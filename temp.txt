translation_unit (1,1)-(3503,1)
  comment: '/* Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */' (1,1)-(14,4)
  preproc_include (16,1)-(17,1)
    #include: '#include' (16,1)-(16,9)
    string_literal (16,10)-(16,22)
      ": '"' (16,10)-(16,11)
      string_content: 'jcontext.h' (16,11)-(16,21)
      ": '"' (16,21)-(16,22)
  preproc_include (17,1)-(18,1)
    #include: '#include' (17,1)-(17,9)
    string_literal (17,10)-(17,32)
      ": '"' (17,10)-(17,11)
      string_content: 'js-parser-internal.h' (17,11)-(17,31)
      ": '"' (17,31)-(17,32)
  preproc_include (18,1)-(19,1)
    #include: '#include' (18,1)-(18,9)
    string_literal (18,10)-(18,33)
      ": '"' (18,10)-(18,11)
      string_content: 'js-scanner-internal.h' (18,11)-(18,32)
      ": '"' (18,32)-(18,33)
  preproc_include (19,1)-(20,1)
    #include: '#include' (19,1)-(19,9)
    string_literal (19,10)-(19,30)
      ": '"' (19,10)-(19,11)
      string_content: 'lit-char-helpers.h' (19,11)-(19,29)
      ": '"' (19,29)-(19,30)
  ERROR (21,1)-(3503,1)
    #if: '#if' (21,1)-(21,4)
    call_expression (21,5)-(21,27)
      identifier: 'ENABLED' (21,5)-(21,12)
      argument_list (21,13)-(21,27)
        (: '(' (21,13)-(21,14)
        identifier: 'JERRY_PARSER' (21,14)-(21,26)
        ): ')' (21,26)-(21,27)
    
: '

' (21,27)-(23,1)
    comment: '/** \addtogroup parser Parser
 * @{
 *
 * \addtogroup jsparser JavaScript
 * @{
 *
 * \addtogroup jsparser_scanner Scanner
 * @{
 */' (23,1)-(31,4)
    comment: '/**
 * Scan return types.
 */' (33,1)-(35,4)
    type_definition (36,1)-(40,23)
      typedef: 'typedef' (36,1)-(36,8)
      enum_specifier (36,9)-(40,2)
        enum: 'enum' (36,9)-(36,13)
        enumerator_list (37,1)-(40,2)
          {: '{' (37,1)-(37,2)
          enumerator (38,3)-(38,18)
            identifier: 'SCAN_NEXT_TOKEN' (38,3)-(38,18)
          ,: ',' (38,18)-(38,19)
          comment: '/**< get next token after return */' (38,20)-(38,55)
          enumerator (39,3)-(39,18)
            identifier: 'SCAN_KEEP_TOKEN' (39,3)-(39,18)
          ,: ',' (39,18)-(39,19)
          comment: '/**< keep the current token after return */' (39,20)-(39,63)
          }: '}' (40,1)-(40,2)
      type_identifier: 'scan_return_types_t' (40,3)-(40,22)
      ;: ';' (40,22)-(40,23)
    comment: '/**
 * Checks whether token type is "of".
 */' (42,1)-(44,4)
    preproc_if (45,1)-(49,7)
      #if: '#if' (45,1)-(45,4)
      call_expression (45,5)-(45,27)
        identifier: 'ENABLED' (45,5)-(45,12)
        argument_list (45,13)-(45,27)
          (: '(' (45,13)-(45,14)
          identifier: 'JERRY_ES2015' (45,14)-(45,26)
          ): ')' (45,26)-(45,27)
      
: '
' (45,27)-(46,1)
      preproc_function_def (46,1)-(47,1)
        #define: '#define' (46,1)-(46,8)
        identifier: 'SCANNER_IDENTIFIER_IS_OF' (46,9)-(46,33)
        preproc_params (46,33)-(46,35)
          (: '(' (46,33)-(46,34)
          ): ')' (46,34)-(46,35)
        preproc_arg: '(lexer_token_is_identifier (context_p, "of", 2))' (46,36)-(46,84)
      preproc_else (47,1)-(49,1)
        #else: '#else' (47,1)-(47,6)
        preproc_function_def (48,1)-(49,1)
          #define: '#define' (48,1)-(48,8)
          identifier: 'SCANNER_IDENTIFIER_IS_OF' (48,9)-(48,33)
          preproc_params (48,33)-(48,35)
            (: '(' (48,33)-(48,34)
            ): ')' (48,34)-(48,35)
          preproc_arg: '(false)' (48,36)-(48,43)
      #endif: '#endif' (49,1)-(49,7)
    comment: '/* ENABLED (JERRY_ES2015) */' (49,8)-(49,36)
    preproc_if (51,1)-(67,7)
      #if: '#if' (51,1)-(51,4)
      call_expression (51,5)-(51,27)
        identifier: 'ENABLED' (51,5)-(51,12)
        argument_list (51,13)-(51,27)
          (: '(' (51,13)-(51,14)
          identifier: 'JERRY_ES2015' (51,14)-(51,26)
          ): ')' (51,26)-(51,27)
      
: '

' (51,27)-(53,1)
      expression_statement (53,1)-(55,100)
        call_expression (53,1)-(55,99)
          identifier: 'JERRY_STATIC_ASSERT' (53,1)-(53,20)
          argument_list (53,21)-(55,99)
            (: '(' (53,21)-(53,22)
            binary_expression (53,22)-(54,54)
              call_expression (53,22)-(53,92)
                identifier: 'SCANNER_FROM_LITERAL_POOL_TO_COMPUTED' (53,22)-(53,59)
                argument_list (53,60)-(53,92)
                  (: '(' (53,60)-(53,61)
                  identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (53,61)-(53,91)
                  ): ')' (53,91)-(53,92)
              ==: '==' (54,22)-(54,24)
              identifier: 'SCAN_STACK_COMPUTED_GENERATOR' (54,25)-(54,54)
            ,: ',' (54,54)-(54,55)
            identifier: 'scanner_invalid_conversion_from_literal_pool_generator_to_computed_generator' (55,22)-(55,98)
            ): ')' (55,98)-(55,99)
        ;: ';' (55,99)-(55,100)
      expression_statement (56,1)-(58,92)
        call_expression (56,1)-(58,91)
          identifier: 'JERRY_STATIC_ASSERT' (56,1)-(56,20)
          argument_list (56,21)-(58,91)
            (: '(' (56,21)-(56,22)
            binary_expression (56,22)-(57,50)
              call_expression (56,22)-(56,88)
                identifier: 'SCANNER_FROM_LITERAL_POOL_TO_COMPUTED' (56,22)-(56,59)
                argument_list (56,60)-(56,88)
                  (: '(' (56,60)-(56,61)
                  identifier: 'SCANNER_LITERAL_POOL_ASYNC' (56,61)-(56,87)
                  ): ')' (56,87)-(56,88)
              ==: '==' (57,22)-(57,24)
              identifier: 'SCAN_STACK_COMPUTED_ASYNC' (57,25)-(57,50)
            ,: ',' (57,50)-(57,51)
            identifier: 'scanner_invalid_conversion_from_literal_pool_async_to_computed_async' (58,22)-(58,90)
            ): ')' (58,90)-(58,91)
        ;: ';' (58,91)-(58,92)
      expression_statement (60,1)-(62,100)
        call_expression (60,1)-(62,99)
          identifier: 'JERRY_STATIC_ASSERT' (60,1)-(60,20)
          argument_list (60,21)-(62,99)
            (: '(' (60,21)-(60,22)
            binary_expression (60,22)-(61,55)
              call_expression (60,22)-(60,91)
                identifier: 'SCANNER_FROM_COMPUTED_TO_LITERAL_POOL' (60,22)-(60,59)
                argument_list (60,60)-(60,91)
                  (: '(' (60,60)-(60,61)
                  identifier: 'SCAN_STACK_COMPUTED_GENERATOR' (60,61)-(60,90)
                  ): ')' (60,90)-(60,91)
              ==: '==' (61,22)-(61,24)
              identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (61,25)-(61,55)
            ,: ',' (61,55)-(61,56)
            identifier: 'scanner_invalid_conversion_from_computed_generator_to_literal_pool_generator' (62,22)-(62,98)
            ): ')' (62,98)-(62,99)
        ;: ';' (62,99)-(62,100)
      expression_statement (63,1)-(65,92)
        call_expression (63,1)-(65,91)
          identifier: 'JERRY_STATIC_ASSERT' (63,1)-(63,20)
          argument_list (63,21)-(65,91)
            (: '(' (63,21)-(63,22)
            binary_expression (63,22)-(64,51)
              call_expression (63,22)-(63,87)
                identifier: 'SCANNER_FROM_COMPUTED_TO_LITERAL_POOL' (63,22)-(63,59)
                argument_list (63,60)-(63,87)
                  (: '(' (63,60)-(63,61)
                  identifier: 'SCAN_STACK_COMPUTED_ASYNC' (63,61)-(63,86)
                  ): ')' (63,86)-(63,87)
              ==: '==' (64,22)-(64,24)
              identifier: 'SCANNER_LITERAL_POOL_ASYNC' (64,25)-(64,51)
            ,: ',' (64,51)-(64,52)
            identifier: 'scanner_invalid_conversion_from_computed_async_to_literal_pool_async' (65,22)-(65,90)
            ): ')' (65,90)-(65,91)
        ;: ';' (65,91)-(65,92)
      #endif: '#endif' (67,1)-(67,7)
    comment: '/* ENABLED (JERRY_ES2015) */' (67,8)-(67,36)
    comment: '/**
 * Scan primary expression.
 *
 * @return SCAN_NEXT_TOKEN to read the next token, or SCAN_KEEP_TOKEN to do nothing
 */' (69,1)-(73,4)
    function_definition (74,1)-(287,2)
      storage_class_specifier (74,1)-(74,7)
        static: 'static' (74,1)-(74,7)
      type_identifier: 'scan_return_types_t' (74,8)-(74,27)
      function_declarator (75,1)-(78,63)
        identifier: 'scanner_scan_primary_expression' (75,1)-(75,32)
        parameter_list (75,33)-(78,63)
          (: '(' (75,33)-(75,34)
          parameter_declaration (75,34)-(75,61)
            type_identifier: 'parser_context_t' (75,34)-(75,50)
            pointer_declarator (75,51)-(75,61)
              *: '*' (75,51)-(75,52)
              identifier: 'context_p' (75,52)-(75,61)
          ,: ',' (75,61)-(75,62)
          comment: '/**< context */' (75,63)-(75,78)
          parameter_declaration (76,34)-(76,70)
            type_identifier: 'scanner_context_t' (76,34)-(76,51)
            pointer_declarator (76,52)-(76,70)
              *: '*' (76,52)-(76,53)
              identifier: 'scanner_context_p' (76,53)-(76,70)
          ,: ',' (76,70)-(76,71)
          comment: '/* scanner context */' (76,72)-(76,93)
          parameter_declaration (77,34)-(77,57)
            type_identifier: 'lexer_token_type_t' (77,34)-(77,52)
            identifier: 'type' (77,53)-(77,57)
          ,: ',' (77,57)-(77,58)
          comment: '/**< current token type */' (77,59)-(77,85)
          parameter_declaration (78,34)-(78,62)
            type_identifier: 'scan_stack_modes_t' (78,34)-(78,52)
            identifier: 'stack_top' (78,53)-(78,62)
          ): ')' (78,62)-(78,63)
      comment: '/**< current stack top */' (78,64)-(78,89)
      compound_statement (79,1)-(287,2)
        {: '{' (79,1)-(79,2)
        switch_statement (80,3)-(285,4)
          switch: 'switch' (80,3)-(80,9)
          parenthesized_expression (80,10)-(80,16)
            (: '(' (80,10)-(80,11)
            identifier: 'type' (80,11)-(80,15)
            ): ')' (80,15)-(80,16)
          compound_statement (81,3)-(285,4)
            {: '{' (81,3)-(81,4)
            case_statement (82,5)-(93,6)
              case: 'case' (82,5)-(82,9)
              identifier: 'LEXER_KEYW_NEW' (82,10)-(82,24)
              :: ':' (82,24)-(82,25)
              compound_statement (83,5)-(93,6)
                {: '{' (83,5)-(83,6)
                expression_statement (84,7)-(84,72)
                  assignment_expression (84,7)-(84,71)
                    field_expression (84,7)-(84,30)
                      identifier: 'scanner_context_p' (84,7)-(84,24)
                      ->: '->' (84,24)-(84,26)
                      field_identifier: 'mode' (84,26)-(84,30)
                    =: '=' (84,31)-(84,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_AFTER_NEW' (84,33)-(84,71)
                  ;: ';' (84,71)-(84,72)
                preproc_if (86,1)-(91,7)
                  #if: '#if' (86,1)-(86,4)
                  call_expression (86,5)-(86,27)
                    identifier: 'ENABLED' (86,5)-(86,12)
                    argument_list (86,13)-(86,27)
                      (: '(' (86,13)-(86,14)
                      identifier: 'JERRY_ES2015' (86,14)-(86,26)
                      ): ')' (86,26)-(86,27)
                  
: '
' (86,27)-(87,1)
                  if_statement (87,7)-(90,8)
                    if: 'if' (87,7)-(87,9)
                    parenthesized_expression (87,10)-(87,51)
                      (: '(' (87,10)-(87,11)
                      call_expression (87,11)-(87,50)
                        identifier: 'scanner_try_scan_new_target' (87,11)-(87,38)
                        argument_list (87,39)-(87,50)
                          (: '(' (87,39)-(87,40)
                          identifier: 'context_p' (87,40)-(87,49)
                          ): ')' (87,49)-(87,50)
                      ): ')' (87,50)-(87,51)
                    compound_statement (88,7)-(90,8)
                      {: '{' (88,7)-(88,8)
                      expression_statement (89,9)-(89,69)
                        assignment_expression (89,9)-(89,68)
                          field_expression (89,9)-(89,32)
                            identifier: 'scanner_context_p' (89,9)-(89,26)
                            ->: '->' (89,26)-(89,28)
                            field_identifier: 'mode' (89,28)-(89,32)
                          =: '=' (89,33)-(89,34)
                          identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (89,35)-(89,68)
                        ;: ';' (89,68)-(89,69)
                      }: '}' (90,7)-(90,8)
                  #endif: '#endif' (91,1)-(91,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (91,8)-(91,36)
                break_statement (92,7)-(92,13)
                  break: 'break' (92,7)-(92,12)
                  ;: ';' (92,12)-(92,13)
                }: '}' (93,5)-(93,6)
            case_statement (94,5)-(94,23)
              case: 'case' (94,5)-(94,9)
              identifier: 'LEXER_DIVIDE' (94,10)-(94,22)
              :: ':' (94,22)-(94,23)
            case_statement (95,5)-(100,6)
              case: 'case' (95,5)-(95,9)
              identifier: 'LEXER_ASSIGN_DIVIDE' (95,10)-(95,29)
              :: ':' (95,29)-(95,30)
              compound_statement (96,5)-(100,6)
                {: '{' (96,5)-(96,6)
                expression_statement (97,7)-(97,55)
                  call_expression (97,7)-(97,54)
                    identifier: 'lexer_construct_regexp_object' (97,7)-(97,36)
                    argument_list (97,37)-(97,54)
                      (: '(' (97,37)-(97,38)
                      identifier: 'context_p' (97,38)-(97,47)
                      ,: ',' (97,47)-(97,48)
                      true: 'true' (97,49)-(97,53)
                      ): ')' (97,53)-(97,54)
                  ;: ';' (97,54)-(97,55)
                expression_statement (98,7)-(98,67)
                  assignment_expression (98,7)-(98,66)
                    field_expression (98,7)-(98,30)
                      identifier: 'scanner_context_p' (98,7)-(98,24)
                      ->: '->' (98,24)-(98,26)
                      field_identifier: 'mode' (98,26)-(98,30)
                    =: '=' (98,31)-(98,32)
                    identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (98,33)-(98,66)
                  ;: ';' (98,66)-(98,67)
                break_statement (99,7)-(99,13)
                  break: 'break' (99,7)-(99,12)
                  ;: ';' (99,12)-(99,13)
                }: '}' (100,5)-(100,6)
            case_statement (101,5)-(130,6)
              case: 'case' (101,5)-(101,9)
              identifier: 'LEXER_KEYW_FUNCTION' (101,10)-(101,29)
              :: ':' (101,29)-(101,30)
              compound_statement (102,5)-(130,6)
                {: '{' (102,5)-(102,6)
                declaration (103,7)-(103,61)
                  primitive_type: 'uint16_t' (103,7)-(103,15)
                  init_declarator (103,16)-(103,60)
                    identifier: 'status_flags' (103,16)-(103,28)
                    =: '=' (103,29)-(103,30)
                    identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (103,31)-(103,60)
                  ;: ';' (103,60)-(103,61)
                preproc_if (105,1)-(115,7)
                  #if: '#if' (105,1)-(105,4)
                  call_expression (105,5)-(105,27)
                    identifier: 'ENABLED' (105,5)-(105,12)
                    argument_list (105,13)-(105,27)
                      (: '(' (105,13)-(105,14)
                      identifier: 'JERRY_ES2015' (105,14)-(105,26)
                      ): ')' (105,26)-(105,27)
                  
: '
' (105,27)-(106,1)
                  if_statement (106,7)-(109,8)
                    if: 'if' (106,7)-(106,9)
                    parenthesized_expression (106,10)-(106,53)
                      (: '(' (106,10)-(106,11)
                      binary_expression (106,11)-(106,52)
                        field_expression (106,11)-(106,44)
                          identifier: 'scanner_context_p' (106,11)-(106,28)
                          ->: '->' (106,28)-(106,30)
                          field_identifier: 'async_source_p' (106,30)-(106,44)
                        !=: '!=' (106,45)-(106,47)
                        null (106,48)-(106,52)
                          NULL: 'NULL' (106,48)-(106,52)
                      ): ')' (106,52)-(106,53)
                    compound_statement (107,7)-(109,8)
                      {: '{' (107,7)-(107,8)
                      expression_statement (108,9)-(108,52)
                        assignment_expression (108,9)-(108,51)
                          identifier: 'status_flags' (108,9)-(108,21)
                          |=: '|=' (108,22)-(108,24)
                          identifier: 'SCANNER_LITERAL_POOL_ASYNC' (108,25)-(108,51)
                        ;: ';' (108,51)-(108,52)
                      }: '}' (109,7)-(109,8)
                  if_statement (111,7)-(114,8)
                    if: 'if' (111,7)-(111,9)
                    parenthesized_expression (111,10)-(111,47)
                      (: '(' (111,10)-(111,11)
                      call_expression (111,11)-(111,46)
                        identifier: 'lexer_consume_generator' (111,11)-(111,34)
                        argument_list (111,35)-(111,46)
                          (: '(' (111,35)-(111,36)
                          identifier: 'context_p' (111,36)-(111,45)
                          ): ')' (111,45)-(111,46)
                      ): ')' (111,46)-(111,47)
                    compound_statement (112,7)-(114,8)
                      {: '{' (112,7)-(112,8)
                      expression_statement (113,9)-(113,56)
                        assignment_expression (113,9)-(113,55)
                          identifier: 'status_flags' (113,9)-(113,21)
                          |=: '|=' (113,22)-(113,24)
                          identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (113,25)-(113,55)
                        ;: ';' (113,55)-(113,56)
                      }: '}' (114,7)-(114,8)
                  #endif: '#endif' (115,1)-(115,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (115,8)-(115,36)
                expression_statement (117,7)-(117,78)
                  call_expression (117,7)-(117,77)
                    identifier: 'scanner_push_literal_pool' (117,7)-(117,32)
                    argument_list (117,33)-(117,77)
                      (: '(' (117,33)-(117,34)
                      identifier: 'context_p' (117,34)-(117,43)
                      ,: ',' (117,43)-(117,44)
                      identifier: 'scanner_context_p' (117,45)-(117,62)
                      ,: ',' (117,62)-(117,63)
                      identifier: 'status_flags' (117,64)-(117,76)
                      ): ')' (117,76)-(117,77)
                  ;: ';' (117,77)-(117,78)
                expression_statement (119,7)-(119,36)
                  call_expression (119,7)-(119,35)
                    identifier: 'lexer_next_token' (119,7)-(119,23)
                    argument_list (119,24)-(119,35)
                      (: '(' (119,24)-(119,25)
                      identifier: 'context_p' (119,25)-(119,34)
                      ): ')' (119,34)-(119,35)
                  ;: ';' (119,35)-(119,36)
                if_statement (121,7)-(125,8)
                  if: 'if' (121,7)-(121,9)
                  parenthesized_expression (121,10)-(122,72)
                    (: '(' (121,10)-(121,11)
                    binary_expression (121,11)-(122,71)
                      binary_expression (121,11)-(121,49)
                        field_expression (121,11)-(121,32)
                          field_expression (121,11)-(121,27)
                            identifier: 'context_p' (121,11)-(121,20)
                            ->: '->' (121,20)-(121,22)
                            field_identifier: 'token' (121,22)-(121,27)
                          .: '.' (121,27)-(121,28)
                          field_identifier: 'type' (121,28)-(121,32)
                        ==: '==' (121,33)-(121,35)
                        identifier: 'LEXER_LITERAL' (121,36)-(121,49)
                      &&: '&&' (122,11)-(122,13)
                      binary_expression (122,14)-(122,71)
                        field_expression (122,14)-(122,48)
                          field_expression (122,14)-(122,43)
                            field_expression (122,14)-(122,30)
                              identifier: 'context_p' (122,14)-(122,23)
                              ->: '->' (122,23)-(122,25)
                              field_identifier: 'token' (122,25)-(122,30)
                            .: '.' (122,30)-(122,31)
                            field_identifier: 'lit_location' (122,31)-(122,43)
                          .: '.' (122,43)-(122,44)
                          field_identifier: 'type' (122,44)-(122,48)
                        ==: '==' (122,49)-(122,51)
                        identifier: 'LEXER_IDENT_LITERAL' (122,52)-(122,71)
                    ): ')' (122,71)-(122,72)
                  compound_statement (123,7)-(125,8)
                    {: '{' (123,7)-(123,8)
                    expression_statement (124,9)-(124,38)
                      call_expression (124,9)-(124,37)
                        identifier: 'lexer_next_token' (124,9)-(124,25)
                        argument_list (124,26)-(124,37)
                          (: '(' (124,26)-(124,27)
                          identifier: 'context_p' (124,27)-(124,36)
                          ): ')' (124,36)-(124,37)
                      ;: ';' (124,37)-(124,38)
                    }: '}' (125,7)-(125,8)
                expression_statement (127,7)-(127,75)
                  call_expression (127,7)-(127,74)
                    identifier: 'parser_stack_push_uint8' (127,7)-(127,30)
                    argument_list (127,31)-(127,74)
                      (: '(' (127,31)-(127,32)
                      identifier: 'context_p' (127,32)-(127,41)
                      ,: ',' (127,41)-(127,42)
                      identifier: 'SCAN_STACK_FUNCTION_EXPRESSION' (127,43)-(127,73)
                      ): ')' (127,73)-(127,74)
                  ;: ';' (127,74)-(127,75)
                expression_statement (128,7)-(128,62)
                  assignment_expression (128,7)-(128,61)
                    field_expression (128,7)-(128,30)
                      identifier: 'scanner_context_p' (128,7)-(128,24)
                      ->: '->' (128,24)-(128,26)
                      field_identifier: 'mode' (128,26)-(128,30)
                    =: '=' (128,31)-(128,32)
                    identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (128,33)-(128,61)
                  ;: ';' (128,61)-(128,62)
                return_statement (129,7)-(129,30)
                  return: 'return' (129,7)-(129,13)
                  identifier: 'SCAN_KEEP_TOKEN' (129,14)-(129,29)
                  ;: ';' (129,29)-(129,30)
                }: '}' (130,5)-(130,6)
            case_statement (131,5)-(135,6)
              case: 'case' (131,5)-(131,9)
              identifier: 'LEXER_LEFT_PAREN' (131,10)-(131,26)
              :: ':' (131,26)-(131,27)
              compound_statement (132,5)-(135,6)
                {: '{' (132,5)-(132,6)
                expression_statement (133,7)-(133,59)
                  call_expression (133,7)-(133,58)
                    identifier: 'scanner_scan_bracket' (133,7)-(133,27)
                    argument_list (133,28)-(133,58)
                      (: '(' (133,28)-(133,29)
                      identifier: 'context_p' (133,29)-(133,38)
                      ,: ',' (133,38)-(133,39)
                      identifier: 'scanner_context_p' (133,40)-(133,57)
                      ): ')' (133,57)-(133,58)
                  ;: ';' (133,58)-(133,59)
                return_statement (134,7)-(134,30)
                  return: 'return' (134,7)-(134,13)
                  identifier: 'SCAN_KEEP_TOKEN' (134,14)-(134,29)
                  ;: ';' (134,29)-(134,30)
                }: '}' (135,5)-(135,6)
            case_statement (136,5)-(145,6)
              case: 'case' (136,5)-(136,9)
              identifier: 'LEXER_LEFT_SQUARE' (136,10)-(136,27)
              :: ':' (136,27)-(136,28)
              compound_statement (137,5)-(145,6)
                {: '{' (137,5)-(137,6)
                preproc_if (138,1)-(140,7)
                  #if: '#if' (138,1)-(138,4)
                  call_expression (138,5)-(138,27)
                    identifier: 'ENABLED' (138,5)-(138,12)
                    argument_list (138,13)-(138,27)
                      (: '(' (138,13)-(138,14)
                      identifier: 'JERRY_ES2015' (138,14)-(138,26)
                      ): ')' (138,26)-(138,27)
                  
: '
' (138,27)-(139,1)
                  expression_statement (139,7)-(139,102)
                    call_expression (139,7)-(139,101)
                      identifier: 'scanner_push_destructuring_pattern' (139,7)-(139,41)
                      argument_list (139,42)-(139,101)
                        (: '(' (139,42)-(139,43)
                        identifier: 'context_p' (139,43)-(139,52)
                        ,: ',' (139,52)-(139,53)
                        identifier: 'scanner_context_p' (139,54)-(139,71)
                        ,: ',' (139,71)-(139,72)
                        identifier: 'SCANNER_BINDING_NONE' (139,73)-(139,93)
                        ,: ',' (139,93)-(139,94)
                        false: 'false' (139,95)-(139,100)
                        ): ')' (139,100)-(139,101)
                    ;: ';' (139,101)-(139,102)
                  #endif: '#endif' (140,1)-(140,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (140,8)-(140,36)
                expression_statement (142,7)-(142,69)
                  call_expression (142,7)-(142,68)
                    identifier: 'parser_stack_push_uint8' (142,7)-(142,30)
                    argument_list (142,31)-(142,68)
                      (: '(' (142,31)-(142,32)
                      identifier: 'context_p' (142,32)-(142,41)
                      ,: ',' (142,41)-(142,42)
                      identifier: 'SCAN_STACK_ARRAY_LITERAL' (142,43)-(142,67)
                      ): ')' (142,67)-(142,68)
                  ;: ';' (142,68)-(142,69)
                expression_statement (143,7)-(143,62)
                  assignment_expression (143,7)-(143,61)
                    field_expression (143,7)-(143,30)
                      identifier: 'scanner_context_p' (143,7)-(143,24)
                      ->: '->' (143,24)-(143,26)
                      field_identifier: 'mode' (143,26)-(143,30)
                    =: '=' (143,31)-(143,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (143,33)-(143,61)
                  ;: ';' (143,61)-(143,62)
                break_statement (144,7)-(144,13)
                  break: 'break' (144,7)-(144,12)
                  ;: ';' (144,12)-(144,13)
                }: '}' (145,5)-(145,6)
            case_statement (146,5)-(155,6)
              case: 'case' (146,5)-(146,9)
              identifier: 'LEXER_LEFT_BRACE' (146,10)-(146,26)
              :: ':' (146,26)-(146,27)
              compound_statement (147,5)-(155,6)
                {: '{' (147,5)-(147,6)
                preproc_if (148,1)-(150,7)
                  #if: '#if' (148,1)-(148,4)
                  call_expression (148,5)-(148,27)
                    identifier: 'ENABLED' (148,5)-(148,12)
                    argument_list (148,13)-(148,27)
                      (: '(' (148,13)-(148,14)
                      identifier: 'JERRY_ES2015' (148,14)-(148,26)
                      ): ')' (148,26)-(148,27)
                  
: '
' (148,27)-(149,1)
                  expression_statement (149,7)-(149,102)
                    call_expression (149,7)-(149,101)
                      identifier: 'scanner_push_destructuring_pattern' (149,7)-(149,41)
                      argument_list (149,42)-(149,101)
                        (: '(' (149,42)-(149,43)
                        identifier: 'context_p' (149,43)-(149,52)
                        ,: ',' (149,52)-(149,53)
                        identifier: 'scanner_context_p' (149,54)-(149,71)
                        ,: ',' (149,71)-(149,72)
                        identifier: 'SCANNER_BINDING_NONE' (149,73)-(149,93)
                        ,: ',' (149,93)-(149,94)
                        false: 'false' (149,95)-(149,100)
                        ): ')' (149,100)-(149,101)
                    ;: ';' (149,101)-(149,102)
                  #endif: '#endif' (150,1)-(150,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (150,8)-(150,36)
                expression_statement (152,7)-(152,70)
                  call_expression (152,7)-(152,69)
                    identifier: 'parser_stack_push_uint8' (152,7)-(152,30)
                    argument_list (152,31)-(152,69)
                      (: '(' (152,31)-(152,32)
                      identifier: 'context_p' (152,32)-(152,41)
                      ,: ',' (152,41)-(152,42)
                      identifier: 'SCAN_STACK_OBJECT_LITERAL' (152,43)-(152,68)
                      ): ')' (152,68)-(152,69)
                  ;: ';' (152,69)-(152,70)
                expression_statement (153,7)-(153,57)
                  assignment_expression (153,7)-(153,56)
                    field_expression (153,7)-(153,30)
                      identifier: 'scanner_context_p' (153,7)-(153,24)
                      ->: '->' (153,24)-(153,26)
                      field_identifier: 'mode' (153,26)-(153,30)
                    =: '=' (153,31)-(153,32)
                    identifier: 'SCAN_MODE_PROPERTY_NAME' (153,33)-(153,56)
                  ;: ';' (153,56)-(153,57)
                return_statement (154,7)-(154,30)
                  return: 'return' (154,7)-(154,13)
                  identifier: 'SCAN_KEEP_TOKEN' (154,14)-(154,29)
                  ;: ';' (154,29)-(154,30)
                }: '}' (155,5)-(155,6)
            preproc_if (156,1)-(169,7)
              #if: '#if' (156,1)-(156,4)
              call_expression (156,5)-(156,27)
                identifier: 'ENABLED' (156,5)-(156,12)
                argument_list (156,13)-(156,27)
                  (: '(' (156,13)-(156,14)
                  identifier: 'JERRY_ES2015' (156,14)-(156,26)
                  ): ')' (156,26)-(156,27)
              
: '
' (156,27)-(157,1)
              case_statement (157,5)-(168,6)
                case: 'case' (157,5)-(157,9)
                identifier: 'LEXER_TEMPLATE_LITERAL' (157,10)-(157,32)
                :: ':' (157,32)-(157,33)
                compound_statement (158,5)-(168,6)
                  {: '{' (158,5)-(158,6)
                  if_statement (159,7)-(164,8)
                    if: 'if' (159,7)-(159,9)
                    parenthesized_expression (159,10)-(159,60)
                      (: '(' (159,10)-(159,11)
                      binary_expression (159,11)-(159,59)
                        subscript_expression (159,11)-(159,34)
                          field_expression (159,11)-(159,30)
                            identifier: 'context_p' (159,11)-(159,20)
                            ->: '->' (159,20)-(159,22)
                            field_identifier: 'source_p' (159,22)-(159,30)
                          [: '[' (159,30)-(159,31)
                          number_literal: '-1' (159,31)-(159,33)
                          ]: ']' (159,33)-(159,34)
                        !=: '!=' (159,35)-(159,37)
                        identifier: 'LIT_CHAR_GRAVE_ACCENT' (159,38)-(159,59)
                      ): ')' (159,59)-(159,60)
                    compound_statement (160,7)-(164,8)
                      {: '{' (160,7)-(160,8)
                      expression_statement (161,9)-(161,73)
                        call_expression (161,9)-(161,72)
                          identifier: 'parser_stack_push_uint8' (161,9)-(161,32)
                          argument_list (161,33)-(161,72)
                            (: '(' (161,33)-(161,34)
                            identifier: 'context_p' (161,34)-(161,43)
                            ,: ',' (161,43)-(161,44)
                            identifier: 'SCAN_STACK_TEMPLATE_STRING' (161,45)-(161,71)
                            ): ')' (161,71)-(161,72)
                        ;: ';' (161,72)-(161,73)
                      expression_statement (162,9)-(162,64)
                        assignment_expression (162,9)-(162,63)
                          field_expression (162,9)-(162,32)
                            identifier: 'scanner_context_p' (162,9)-(162,26)
                            ->: '->' (162,26)-(162,28)
                            field_identifier: 'mode' (162,28)-(162,32)
                          =: '=' (162,33)-(162,34)
                          identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (162,35)-(162,63)
                        ;: ';' (162,63)-(162,64)
                      break_statement (163,9)-(163,15)
                        break: 'break' (163,9)-(163,14)
                        ;: ';' (163,14)-(163,15)
                      }: '}' (164,7)-(164,8)
                  comment: '/* The string is a normal string literal. */' (166,7)-(166,51)
                  comment: '/* FALLTHRU */' (167,7)-(167,21)
                  }: '}' (168,5)-(168,6)
              #endif: '#endif' (169,1)-(169,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (169,8)-(169,36)
            case_statement (170,5)-(194,6)
              case: 'case' (170,5)-(170,9)
              identifier: 'LEXER_LITERAL' (170,10)-(170,23)
              :: ':' (170,23)-(170,24)
              compound_statement (171,5)-(194,6)
                {: '{' (171,5)-(171,6)
                preproc_if (172,1)-(187,7)
                  #if: '#if' (172,1)-(172,4)
                  call_expression (172,5)-(172,27)
                    identifier: 'ENABLED' (172,5)-(172,12)
                    argument_list (172,13)-(172,27)
                      (: '(' (172,13)-(172,14)
                      identifier: 'JERRY_ES2015' (172,14)-(172,26)
                      ): ')' (172,26)-(172,27)
                  
: '
' (172,27)-(173,1)
                  declaration (173,7)-(173,53)
                    type_qualifier (173,7)-(173,12)
                      const: 'const' (173,7)-(173,12)
                    primitive_type: 'uint8_t' (173,13)-(173,20)
                    init_declarator (173,21)-(173,52)
                      pointer_declarator (173,21)-(173,30)
                        *: '*' (173,21)-(173,22)
                        identifier: 'source_p' (173,22)-(173,30)
                      =: '=' (173,31)-(173,32)
                      field_expression (173,33)-(173,52)
                        identifier: 'context_p' (173,33)-(173,42)
                        ->: '->' (173,42)-(173,44)
                        field_identifier: 'source_p' (173,44)-(173,52)
                    ;: ';' (173,52)-(173,53)
                  if_statement (175,7)-(186,8)
                    if: 'if' (175,7)-(175,9)
                    parenthesized_expression (175,10)-(176,44)
                      (: '(' (175,10)-(175,11)
                      binary_expression (175,11)-(176,43)
                        binary_expression (175,11)-(175,68)
                          field_expression (175,11)-(175,45)
                            field_expression (175,11)-(175,40)
                              field_expression (175,11)-(175,27)
                                identifier: 'context_p' (175,11)-(175,20)
                                ->: '->' (175,20)-(175,22)
                                field_identifier: 'token' (175,22)-(175,27)
                              .: '.' (175,27)-(175,28)
                              field_identifier: 'lit_location' (175,28)-(175,40)
                            .: '.' (175,40)-(175,41)
                            field_identifier: 'type' (175,41)-(175,45)
                          ==: '==' (175,46)-(175,48)
                          identifier: 'LEXER_IDENT_LITERAL' (175,49)-(175,68)
                        &&: '&&' (176,11)-(176,13)
                        call_expression (176,14)-(176,43)
                          identifier: 'lexer_check_arrow' (176,14)-(176,31)
                          argument_list (176,32)-(176,43)
                            (: '(' (176,32)-(176,33)
                            identifier: 'context_p' (176,33)-(176,42)
                            ): ')' (176,42)-(176,43)
                      ): ')' (176,43)-(176,44)
                    compound_statement (177,7)-(180,8)
                      {: '{' (177,7)-(177,8)
                      expression_statement (178,9)-(178,76)
                        call_expression (178,9)-(178,75)
                          identifier: 'scanner_scan_simple_arrow' (178,9)-(178,34)
                          argument_list (178,35)-(178,75)
                            (: '(' (178,35)-(178,36)
                            identifier: 'context_p' (178,36)-(178,45)
                            ,: ',' (178,45)-(178,46)
                            identifier: 'scanner_context_p' (178,47)-(178,64)
                            ,: ',' (178,64)-(178,65)
                            identifier: 'source_p' (178,66)-(178,74)
                            ): ')' (178,74)-(178,75)
                        ;: ';' (178,75)-(178,76)
                      return_statement (179,9)-(179,32)
                        return: 'return' (179,9)-(179,15)
                        identifier: 'SCAN_KEEP_TOKEN' (179,16)-(179,31)
                        ;: ';' (179,31)-(179,32)
                      }: '}' (180,7)-(180,8)
                    else_clause (181,7)-(186,8)
                      else: 'else' (181,7)-(181,11)
                      if_statement (181,12)-(186,8)
                        if: 'if' (181,12)-(181,14)
                        parenthesized_expression (181,15)-(181,66)
                          (: '(' (181,15)-(181,16)
                          call_expression (181,16)-(181,65)
                            identifier: 'JERRY_UNLIKELY' (181,16)-(181,30)
                            argument_list (181,31)-(181,65)
                              (: '(' (181,31)-(181,32)
                              call_expression (181,32)-(181,64)
                                identifier: 'lexer_token_is_async' (181,32)-(181,52)
                                argument_list (181,53)-(181,64)
                                  (: '(' (181,53)-(181,54)
                                  identifier: 'context_p' (181,54)-(181,63)
                                  ): ')' (181,63)-(181,64)
                              ): ')' (181,64)-(181,65)
                          ): ')' (181,65)-(181,66)
                        compound_statement (182,7)-(186,8)
                          {: '{' (182,7)-(182,8)
                          expression_statement (183,9)-(183,54)
                            assignment_expression (183,9)-(183,53)
                              field_expression (183,9)-(183,42)
                                identifier: 'scanner_context_p' (183,9)-(183,26)
                                ->: '->' (183,26)-(183,28)
                                field_identifier: 'async_source_p' (183,28)-(183,42)
                              =: '=' (183,43)-(183,44)
                              identifier: 'source_p' (183,45)-(183,53)
                            ;: ';' (183,53)-(183,54)
                          expression_statement (184,9)-(184,69)
                            call_expression (184,9)-(184,68)
                              identifier: 'scanner_check_async_function' (184,9)-(184,37)
                              argument_list (184,38)-(184,68)
                                (: '(' (184,38)-(184,39)
                                identifier: 'context_p' (184,39)-(184,48)
                                ,: ',' (184,48)-(184,49)
                                identifier: 'scanner_context_p' (184,50)-(184,67)
                                ): ')' (184,67)-(184,68)
                            ;: ';' (184,68)-(184,69)
                          return_statement (185,9)-(185,32)
                            return: 'return' (185,9)-(185,15)
                            identifier: 'SCAN_KEEP_TOKEN' (185,16)-(185,31)
                            ;: ';' (185,31)-(185,32)
                          }: '}' (186,7)-(186,8)
                  #endif: '#endif' (187,1)-(187,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (187,8)-(187,36)
                if_statement (189,7)-(192,8)
                  if: 'if' (189,7)-(189,9)
                  parenthesized_expression (189,10)-(189,69)
                    (: '(' (189,10)-(189,11)
                    binary_expression (189,11)-(189,68)
                      field_expression (189,11)-(189,45)
                        field_expression (189,11)-(189,40)
                          field_expression (189,11)-(189,27)
                            identifier: 'context_p' (189,11)-(189,20)
                            ->: '->' (189,20)-(189,22)
                            field_identifier: 'token' (189,22)-(189,27)
                          .: '.' (189,27)-(189,28)
                          field_identifier: 'lit_location' (189,28)-(189,40)
                        .: '.' (189,40)-(189,41)
                        field_identifier: 'type' (189,41)-(189,45)
                      ==: '==' (189,46)-(189,48)
                      identifier: 'LEXER_IDENT_LITERAL' (189,49)-(189,68)
                    ): ')' (189,68)-(189,69)
                  compound_statement (190,7)-(192,8)
                    {: '{' (190,7)-(190,8)
                    expression_statement (191,9)-(191,62)
                      call_expression (191,9)-(191,61)
                        identifier: 'scanner_add_reference' (191,9)-(191,30)
                        argument_list (191,31)-(191,61)
                          (: '(' (191,31)-(191,32)
                          identifier: 'context_p' (191,32)-(191,41)
                          ,: ',' (191,41)-(191,42)
                          identifier: 'scanner_context_p' (191,43)-(191,60)
                          ): ')' (191,60)-(191,61)
                      ;: ';' (191,61)-(191,62)
                    }: '}' (192,7)-(192,8)
                comment: '/* FALLTHRU */' (193,7)-(193,21)
                }: '}' (194,5)-(194,6)
            case_statement (195,5)-(195,26)
              case: 'case' (195,5)-(195,9)
              identifier: 'LEXER_KEYW_THIS' (195,10)-(195,25)
              :: ':' (195,25)-(195,26)
            case_statement (196,5)-(196,27)
              case: 'case' (196,5)-(196,9)
              identifier: 'LEXER_KEYW_SUPER' (196,10)-(196,26)
              :: ':' (196,26)-(196,27)
            case_statement (197,5)-(197,25)
              case: 'case' (197,5)-(197,9)
              identifier: 'LEXER_LIT_TRUE' (197,10)-(197,24)
              :: ':' (197,24)-(197,25)
            case_statement (198,5)-(198,26)
              case: 'case' (198,5)-(198,9)
              identifier: 'LEXER_LIT_FALSE' (198,10)-(198,25)
              :: ':' (198,25)-(198,26)
            case_statement (199,5)-(203,6)
              case: 'case' (199,5)-(199,9)
              identifier: 'LEXER_LIT_NULL' (199,10)-(199,24)
              :: ':' (199,24)-(199,25)
              compound_statement (200,5)-(203,6)
                {: '{' (200,5)-(200,6)
                expression_statement (201,7)-(201,67)
                  assignment_expression (201,7)-(201,66)
                    field_expression (201,7)-(201,30)
                      identifier: 'scanner_context_p' (201,7)-(201,24)
                      ->: '->' (201,24)-(201,26)
                      field_identifier: 'mode' (201,26)-(201,30)
                    =: '=' (201,31)-(201,32)
                    identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (201,33)-(201,66)
                  ;: ';' (201,66)-(201,67)
                break_statement (202,7)-(202,13)
                  break: 'break' (202,7)-(202,12)
                  ;: ';' (202,12)-(202,13)
                }: '}' (203,5)-(203,6)
            preproc_if (204,1)-(215,7)
              #if: '#if' (204,1)-(204,4)
              call_expression (204,5)-(204,27)
                identifier: 'ENABLED' (204,5)-(204,12)
                argument_list (204,13)-(204,27)
                  (: '(' (204,13)-(204,14)
                  identifier: 'JERRY_ES2015' (204,14)-(204,26)
                  ): ')' (204,26)-(204,27)
              
: '
' (204,27)-(205,1)
              case_statement (205,5)-(214,6)
                case: 'case' (205,5)-(205,9)
                identifier: 'LEXER_KEYW_CLASS' (205,10)-(205,26)
                :: ':' (205,26)-(205,27)
                compound_statement (206,5)-(214,6)
                  {: '{' (206,5)-(206,6)
                  expression_statement (207,7)-(207,98)
                    call_expression (207,7)-(207,97)
                      identifier: 'scanner_push_class_declaration' (207,7)-(207,37)
                      argument_list (207,38)-(207,97)
                        (: '(' (207,38)-(207,39)
                        identifier: 'context_p' (207,39)-(207,48)
                        ,: ',' (207,48)-(207,49)
                        identifier: 'scanner_context_p' (207,50)-(207,67)
                        ,: ',' (207,67)-(207,68)
                        identifier: 'SCAN_STACK_CLASS_EXPRESSION' (207,69)-(207,96)
                        ): ')' (207,96)-(207,97)
                    ;: ';' (207,97)-(207,98)
                  if_statement (209,7)-(212,8)
                    if: 'if' (209,7)-(209,9)
                    parenthesized_expression (209,10)-(209,111)
                      (: '(' (209,10)-(209,11)
                      binary_expression (209,11)-(209,110)
                        binary_expression (209,11)-(209,49)
                          field_expression (209,11)-(209,32)
                            field_expression (209,11)-(209,27)
                              identifier: 'context_p' (209,11)-(209,20)
                              ->: '->' (209,20)-(209,22)
                              field_identifier: 'token' (209,22)-(209,27)
                            .: '.' (209,27)-(209,28)
                            field_identifier: 'type' (209,28)-(209,32)
                          !=: '!=' (209,33)-(209,35)
                          identifier: 'LEXER_LITERAL' (209,36)-(209,49)
                        ||: '||' (209,50)-(209,52)
                        binary_expression (209,53)-(209,110)
                          field_expression (209,53)-(209,87)
                            field_expression (209,53)-(209,82)
                              field_expression (209,53)-(209,69)
                                identifier: 'context_p' (209,53)-(209,62)
                                ->: '->' (209,62)-(209,64)
                                field_identifier: 'token' (209,64)-(209,69)
                              .: '.' (209,69)-(209,70)
                              field_identifier: 'lit_location' (209,70)-(209,82)
                            .: '.' (209,82)-(209,83)
                            field_identifier: 'type' (209,83)-(209,87)
                          !=: '!=' (209,88)-(209,90)
                          identifier: 'LEXER_IDENT_LITERAL' (209,91)-(209,110)
                      ): ')' (209,110)-(209,111)
                    compound_statement (210,7)-(212,8)
                      {: '{' (210,7)-(210,8)
                      return_statement (211,9)-(211,32)
                        return: 'return' (211,9)-(211,15)
                        identifier: 'SCAN_KEEP_TOKEN' (211,16)-(211,31)
                        ;: ';' (211,31)-(211,32)
                      }: '}' (212,7)-(212,8)
                  break_statement (213,7)-(213,13)
                    break: 'break' (213,7)-(213,12)
                    ;: ';' (213,12)-(213,13)
                  }: '}' (214,5)-(214,6)
              #endif: '#endif' (215,1)-(215,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (215,8)-(215,36)
            case_statement (216,5)-(225,6)
              case: 'case' (216,5)-(216,9)
              identifier: 'LEXER_RIGHT_SQUARE' (216,10)-(216,28)
              :: ':' (216,28)-(216,29)
              compound_statement (217,5)-(225,6)
                {: '{' (217,5)-(217,6)
                if_statement (218,7)-(221,8)
                  if: 'if' (218,7)-(218,9)
                  parenthesized_expression (218,10)-(218,49)
                    (: '(' (218,10)-(218,11)
                    binary_expression (218,11)-(218,48)
                      identifier: 'stack_top' (218,11)-(218,20)
                      !=: '!=' (218,21)-(218,23)
                      identifier: 'SCAN_STACK_ARRAY_LITERAL' (218,24)-(218,48)
                    ): ')' (218,48)-(218,49)
                  compound_statement (219,7)-(221,8)
                    {: '{' (219,7)-(219,8)
                    expression_statement (220,9)-(220,41)
                      call_expression (220,9)-(220,40)
                        identifier: 'scanner_raise_error' (220,9)-(220,28)
                        argument_list (220,29)-(220,40)
                          (: '(' (220,29)-(220,30)
                          identifier: 'context_p' (220,30)-(220,39)
                          ): ')' (220,39)-(220,40)
                      ;: ';' (220,40)-(220,41)
                    }: '}' (221,7)-(221,8)
                expression_statement (223,7)-(223,66)
                  assignment_expression (223,7)-(223,65)
                    field_expression (223,7)-(223,30)
                      identifier: 'scanner_context_p' (223,7)-(223,24)
                      ->: '->' (223,24)-(223,26)
                      field_identifier: 'mode' (223,26)-(223,30)
                    =: '=' (223,31)-(223,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (223,33)-(223,65)
                  ;: ';' (223,65)-(223,66)
                return_statement (224,7)-(224,30)
                  return: 'return' (224,7)-(224,13)
                  identifier: 'SCAN_KEEP_TOKEN' (224,14)-(224,29)
                  ;: ';' (224,29)-(224,30)
                }: '}' (225,5)-(225,6)
            preproc_if (226,1)-(237,7)
              #if: '#if' (226,1)-(226,4)
              call_expression (226,5)-(226,27)
                identifier: 'ENABLED' (226,5)-(226,12)
                argument_list (226,13)-(226,27)
                  (: '(' (226,13)-(226,14)
                  identifier: 'JERRY_ES2015' (226,14)-(226,26)
                  ): ')' (226,26)-(226,27)
              
: '
' (226,27)-(227,1)
              case_statement (227,5)-(236,6)
                case: 'case' (227,5)-(227,9)
                identifier: 'LEXER_THREE_DOTS' (227,10)-(227,26)
                :: ':' (227,26)-(227,27)
                compound_statement (228,5)-(236,6)
                  {: '{' (228,5)-(228,6)
                  comment: '/* Elision or spread arguments */' (229,7)-(229,40)
                  if_statement (230,7)-(233,8)
                    if: 'if' (230,7)-(230,9)
                    parenthesized_expression (230,10)-(230,93)
                      (: '(' (230,10)-(230,11)
                      binary_expression (230,11)-(230,92)
                        binary_expression (230,11)-(230,51)
                          identifier: 'stack_top' (230,11)-(230,20)
                          !=: '!=' (230,21)-(230,23)
                          identifier: 'SCAN_STACK_PAREN_EXPRESSION' (230,24)-(230,51)
                        &&: '&&' (230,52)-(230,54)
                        binary_expression (230,55)-(230,92)
                          identifier: 'stack_top' (230,55)-(230,64)
                          !=: '!=' (230,65)-(230,67)
                          identifier: 'SCAN_STACK_ARRAY_LITERAL' (230,68)-(230,92)
                      ): ')' (230,92)-(230,93)
                    compound_statement (231,7)-(233,8)
                      {: '{' (231,7)-(231,8)
                      expression_statement (232,9)-(232,41)
                        call_expression (232,9)-(232,40)
                          identifier: 'scanner_raise_error' (232,9)-(232,28)
                          argument_list (232,29)-(232,40)
                            (: '(' (232,29)-(232,30)
                            identifier: 'context_p' (232,30)-(232,39)
                            ): ')' (232,39)-(232,40)
                        ;: ';' (232,40)-(232,41)
                      }: '}' (233,7)-(233,8)
                  expression_statement (234,7)-(234,62)
                    assignment_expression (234,7)-(234,61)
                      field_expression (234,7)-(234,30)
                        identifier: 'scanner_context_p' (234,7)-(234,24)
                        ->: '->' (234,24)-(234,26)
                        field_identifier: 'mode' (234,26)-(234,30)
                      =: '=' (234,31)-(234,32)
                      identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (234,33)-(234,61)
                    ;: ';' (234,61)-(234,62)
                  break_statement (235,7)-(235,13)
                    break: 'break' (235,7)-(235,12)
                    ;: ';' (235,12)-(235,13)
                  }: '}' (236,5)-(236,6)
              #endif: '#endif' (237,1)-(237,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (237,8)-(237,36)
            case_statement (238,5)-(253,6)
              case: 'case' (238,5)-(238,9)
              identifier: 'LEXER_COMMA' (238,10)-(238,21)
              :: ':' (238,21)-(238,22)
              compound_statement (239,5)-(253,6)
                {: '{' (239,5)-(239,6)
                if_statement (240,7)-(243,8)
                  if: 'if' (240,7)-(240,9)
                  parenthesized_expression (240,10)-(240,49)
                    (: '(' (240,10)-(240,11)
                    binary_expression (240,11)-(240,48)
                      identifier: 'stack_top' (240,11)-(240,20)
                      !=: '!=' (240,21)-(240,23)
                      identifier: 'SCAN_STACK_ARRAY_LITERAL' (240,24)-(240,48)
                    ): ')' (240,48)-(240,49)
                  compound_statement (241,7)-(243,8)
                    {: '{' (241,7)-(241,8)
                    expression_statement (242,9)-(242,41)
                      call_expression (242,9)-(242,40)
                        identifier: 'scanner_raise_error' (242,9)-(242,28)
                        argument_list (242,29)-(242,40)
                          (: '(' (242,29)-(242,30)
                          identifier: 'context_p' (242,30)-(242,39)
                          ): ')' (242,39)-(242,40)
                      ;: ';' (242,40)-(242,41)
                    }: '}' (243,7)-(243,8)
                expression_statement (244,7)-(244,62)
                  assignment_expression (244,7)-(244,61)
                    field_expression (244,7)-(244,30)
                      identifier: 'scanner_context_p' (244,7)-(244,24)
                      ->: '->' (244,24)-(244,26)
                      field_identifier: 'mode' (244,26)-(244,30)
                    =: '=' (244,31)-(244,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (244,33)-(244,61)
                  ;: ';' (244,61)-(244,62)
                preproc_if (246,1)-(251,7)
                  #if: '#if' (246,1)-(246,4)
                  call_expression (246,5)-(246,27)
                    identifier: 'ENABLED' (246,5)-(246,12)
                    argument_list (246,13)-(246,27)
                      (: '(' (246,13)-(246,14)
                      identifier: 'JERRY_ES2015' (246,14)-(246,26)
                      ): ')' (246,26)-(246,27)
                  
: '
' (246,27)-(247,1)
                  if_statement (247,7)-(250,8)
                    if: 'if' (247,7)-(247,9)
                    parenthesized_expression (247,10)-(247,67)
                      (: '(' (247,10)-(247,11)
                      binary_expression (247,11)-(247,66)
                        field_expression (247,11)-(247,42)
                          identifier: 'scanner_context_p' (247,11)-(247,28)
                          ->: '->' (247,28)-(247,30)
                          field_identifier: 'binding_type' (247,30)-(247,42)
                        !=: '!=' (247,43)-(247,45)
                        identifier: 'SCANNER_BINDING_NONE' (247,46)-(247,66)
                      ): ')' (247,66)-(247,67)
                    compound_statement (248,7)-(250,8)
                      {: '{' (248,7)-(248,8)
                      expression_statement (249,9)-(249,53)
                        assignment_expression (249,9)-(249,52)
                          field_expression (249,9)-(249,32)
                            identifier: 'scanner_context_p' (249,9)-(249,26)
                            ->: '->' (249,26)-(249,28)
                            field_identifier: 'mode' (249,28)-(249,32)
                          =: '=' (249,33)-(249,34)
                          identifier: 'SCAN_MODE_BINDING' (249,35)-(249,52)
                        ;: ';' (249,52)-(249,53)
                      }: '}' (250,7)-(250,8)
                  #endif: '#endif' (251,1)-(251,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (251,8)-(251,36)
                break_statement (252,7)-(252,13)
                  break: 'break' (252,7)-(252,12)
                  ;: ';' (252,12)-(252,13)
                }: '}' (253,5)-(253,6)
            preproc_if (254,1)-(270,7)
              #if: '#if' (254,1)-(254,4)
              call_expression (254,5)-(254,27)
                identifier: 'ENABLED' (254,5)-(254,12)
                argument_list (254,13)-(254,27)
                  (: '(' (254,13)-(254,14)
                  identifier: 'JERRY_ES2015' (254,14)-(254,26)
                  ): ')' (254,26)-(254,27)
              
: '
' (254,27)-(255,1)
              case_statement (255,5)-(269,6)
                case: 'case' (255,5)-(255,9)
                identifier: 'LEXER_KEYW_YIELD' (255,10)-(255,26)
                :: ':' (255,26)-(255,27)
                compound_statement (256,5)-(269,6)
                  {: '{' (256,5)-(256,6)
                  expression_statement (257,7)-(257,36)
                    call_expression (257,7)-(257,35)
                      identifier: 'lexer_next_token' (257,7)-(257,23)
                      argument_list (257,24)-(257,35)
                        (: '(' (257,24)-(257,25)
                        identifier: 'context_p' (257,25)-(257,34)
                        ): ')' (257,34)-(257,35)
                    ;: ';' (257,35)-(257,36)
                  if_statement (259,7)-(262,8)
                    if: 'if' (259,7)-(259,9)
                    parenthesized_expression (259,10)-(259,48)
                      (: '(' (259,10)-(259,11)
                      call_expression (259,11)-(259,47)
                        identifier: 'lexer_check_yield_no_arg' (259,11)-(259,35)
                        argument_list (259,36)-(259,47)
                          (: '(' (259,36)-(259,37)
                          identifier: 'context_p' (259,37)-(259,46)
                          ): ')' (259,46)-(259,47)
                      ): ')' (259,47)-(259,48)
                    compound_statement (260,7)-(262,8)
                      {: '{' (260,7)-(260,8)
                      expression_statement (261,9)-(261,68)
                        assignment_expression (261,9)-(261,67)
                          field_expression (261,9)-(261,32)
                            identifier: 'scanner_context_p' (261,9)-(261,26)
                            ->: '->' (261,26)-(261,28)
                            field_identifier: 'mode' (261,28)-(261,32)
                          =: '=' (261,33)-(261,34)
                          identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (261,35)-(261,67)
                        ;: ';' (261,67)-(261,68)
                      }: '}' (262,7)-(262,8)
                  if_statement (264,7)-(267,8)
                    if: 'if' (264,7)-(264,9)
                    parenthesized_expression (264,10)-(264,51)
                      (: '(' (264,10)-(264,11)
                      binary_expression (264,11)-(264,50)
                        field_expression (264,11)-(264,32)
                          field_expression (264,11)-(264,27)
                            identifier: 'context_p' (264,11)-(264,20)
                            ->: '->' (264,20)-(264,22)
                            field_identifier: 'token' (264,22)-(264,27)
                          .: '.' (264,27)-(264,28)
                          field_identifier: 'type' (264,28)-(264,32)
                        ==: '==' (264,33)-(264,35)
                        identifier: 'LEXER_MULTIPLY' (264,36)-(264,50)
                      ): ')' (264,50)-(264,51)
                    compound_statement (265,7)-(267,8)
                      {: '{' (265,7)-(265,8)
                      return_statement (266,9)-(266,32)
                        return: 'return' (266,9)-(266,15)
                        identifier: 'SCAN_NEXT_TOKEN' (266,16)-(266,31)
                        ;: ';' (266,31)-(266,32)
                      }: '}' (267,7)-(267,8)
                  return_statement (268,7)-(268,30)
                    return: 'return' (268,7)-(268,13)
                    identifier: 'SCAN_KEEP_TOKEN' (268,14)-(268,29)
                    ;: ';' (268,29)-(268,30)
                  }: '}' (269,5)-(269,6)
              #endif: '#endif' (270,1)-(270,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (270,8)-(270,36)
            case_statement (271,5)-(280,6)
              case: 'case' (271,5)-(271,9)
              identifier: 'LEXER_RIGHT_PAREN' (271,10)-(271,27)
              :: ':' (271,27)-(271,28)
              compound_statement (272,5)-(280,6)
                {: '{' (272,5)-(272,6)
                if_statement (273,7)-(278,8)
                  if: 'if' (273,7)-(273,9)
                  parenthesized_expression (273,10)-(273,52)
                    (: '(' (273,10)-(273,11)
                    binary_expression (273,11)-(273,51)
                      identifier: 'stack_top' (273,11)-(273,20)
                      ==: '==' (273,21)-(273,23)
                      identifier: 'SCAN_STACK_PAREN_EXPRESSION' (273,24)-(273,51)
                    ): ')' (273,51)-(273,52)
                  compound_statement (274,7)-(278,8)
                    {: '{' (274,7)-(274,8)
                    expression_statement (275,9)-(275,69)
                      assignment_expression (275,9)-(275,68)
                        field_expression (275,9)-(275,32)
                          identifier: 'scanner_context_p' (275,9)-(275,26)
                          ->: '->' (275,26)-(275,28)
                          field_identifier: 'mode' (275,28)-(275,32)
                        =: '=' (275,33)-(275,34)
                        identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (275,35)-(275,68)
                      ;: ';' (275,68)-(275,69)
                    expression_statement (276,9)-(276,44)
                      call_expression (276,9)-(276,43)
                        identifier: 'parser_stack_pop_uint8' (276,9)-(276,31)
                        argument_list (276,32)-(276,43)
                          (: '(' (276,32)-(276,33)
                          identifier: 'context_p' (276,33)-(276,42)
                          ): ')' (276,42)-(276,43)
                      ;: ';' (276,43)-(276,44)
                    break_statement (277,9)-(277,15)
                      break: 'break' (277,9)-(277,14)
                      ;: ';' (277,14)-(277,15)
                    }: '}' (278,7)-(278,8)
                comment: '/* FALLTHRU */' (279,7)-(279,21)
                }: '}' (280,5)-(280,6)
            case_statement (281,5)-(284,6)
              default: 'default' (281,5)-(281,12)
              :: ':' (281,12)-(281,13)
              compound_statement (282,5)-(284,6)
                {: '{' (282,5)-(282,6)
                expression_statement (283,7)-(283,39)
                  call_expression (283,7)-(283,38)
                    identifier: 'scanner_raise_error' (283,7)-(283,26)
                    argument_list (283,27)-(283,38)
                      (: '(' (283,27)-(283,28)
                      identifier: 'context_p' (283,28)-(283,37)
                      ): ')' (283,37)-(283,38)
                  ;: ';' (283,38)-(283,39)
                }: '}' (284,5)-(284,6)
            }: '}' (285,3)-(285,4)
        return_statement (286,3)-(286,26)
          return: 'return' (286,3)-(286,9)
          identifier: 'SCAN_NEXT_TOKEN' (286,10)-(286,25)
          ;: ';' (286,25)-(286,26)
        }: '}' (287,1)-(287,2)
    comment: '/* scanner_scan_primary_expression */' (287,3)-(287,40)
    comment: '/**
 * Scan the tokens after the primary expression.
 *
 * @return true for break, false for fall through
 */' (289,1)-(293,4)
    function_definition (294,1)-(376,2)
      storage_class_specifier (294,1)-(294,7)
        static: 'static' (294,1)-(294,7)
      primitive_type: 'bool' (294,8)-(294,12)
      function_declarator (295,1)-(298,68)
        identifier: 'scanner_scan_post_primary_expression' (295,1)-(295,37)
        parameter_list (295,38)-(298,68)
          (: '(' (295,38)-(295,39)
          parameter_declaration (295,39)-(295,66)
            type_identifier: 'parser_context_t' (295,39)-(295,55)
            pointer_declarator (295,56)-(295,66)
              *: '*' (295,56)-(295,57)
              identifier: 'context_p' (295,57)-(295,66)
          ,: ',' (295,66)-(295,67)
          comment: '/**< context */' (295,68)-(295,83)
          parameter_declaration (296,39)-(296,75)
            type_identifier: 'scanner_context_t' (296,39)-(296,56)
            pointer_declarator (296,57)-(296,75)
              *: '*' (296,57)-(296,58)
              identifier: 'scanner_context_p' (296,58)-(296,75)
          ,: ',' (296,75)-(296,76)
          comment: '/**< scanner context */' (296,77)-(296,100)
          parameter_declaration (297,39)-(297,62)
            type_identifier: 'lexer_token_type_t' (297,39)-(297,57)
            identifier: 'type' (297,58)-(297,62)
          ,: ',' (297,62)-(297,63)
          comment: '/**< current token type */' (297,64)-(297,90)
          parameter_declaration (298,39)-(298,67)
            type_identifier: 'scan_stack_modes_t' (298,39)-(298,57)
            identifier: 'stack_top' (298,58)-(298,67)
          ): ')' (298,67)-(298,68)
      comment: '/**< current stack top */' (298,69)-(298,94)
      compound_statement (299,1)-(376,2)
        {: '{' (299,1)-(299,2)
        switch_statement (300,3)-(366,4)
          switch: 'switch' (300,3)-(300,9)
          parenthesized_expression (300,10)-(300,16)
            (: '(' (300,10)-(300,11)
            identifier: 'type' (300,11)-(300,15)
            ): ')' (300,15)-(300,16)
          compound_statement (301,3)-(366,4)
            {: '{' (301,3)-(301,4)
            case_statement (302,5)-(313,6)
              case: 'case' (302,5)-(302,9)
              identifier: 'LEXER_DOT' (302,10)-(302,19)
              :: ':' (302,19)-(302,20)
              compound_statement (303,5)-(313,6)
                {: '{' (303,5)-(303,6)
                expression_statement (304,7)-(304,41)
                  call_expression (304,7)-(304,40)
                    identifier: 'lexer_scan_identifier' (304,7)-(304,28)
                    argument_list (304,29)-(304,40)
                      (: '(' (304,29)-(304,30)
                      identifier: 'context_p' (304,30)-(304,39)
                      ): ')' (304,39)-(304,40)
                  ;: ';' (304,40)-(304,41)
                if_statement (306,7)-(310,8)
                  if: 'if' (306,7)-(306,9)
                  parenthesized_expression (306,10)-(307,72)
                    (: '(' (306,10)-(306,11)
                    binary_expression (306,11)-(307,71)
                      binary_expression (306,11)-(306,49)
                        field_expression (306,11)-(306,32)
                          field_expression (306,11)-(306,27)
                            identifier: 'context_p' (306,11)-(306,20)
                            ->: '->' (306,20)-(306,22)
                            field_identifier: 'token' (306,22)-(306,27)
                          .: '.' (306,27)-(306,28)
                          field_identifier: 'type' (306,28)-(306,32)
                        !=: '!=' (306,33)-(306,35)
                        identifier: 'LEXER_LITERAL' (306,36)-(306,49)
                      ||: '||' (307,11)-(307,13)
                      binary_expression (307,14)-(307,71)
                        field_expression (307,14)-(307,48)
                          field_expression (307,14)-(307,43)
                            field_expression (307,14)-(307,30)
                              identifier: 'context_p' (307,14)-(307,23)
                              ->: '->' (307,23)-(307,25)
                              field_identifier: 'token' (307,25)-(307,30)
                            .: '.' (307,30)-(307,31)
                            field_identifier: 'lit_location' (307,31)-(307,43)
                          .: '.' (307,43)-(307,44)
                          field_identifier: 'type' (307,44)-(307,48)
                        !=: '!=' (307,49)-(307,51)
                        identifier: 'LEXER_IDENT_LITERAL' (307,52)-(307,71)
                    ): ')' (307,71)-(307,72)
                  compound_statement (308,7)-(310,8)
                    {: '{' (308,7)-(308,8)
                    expression_statement (309,9)-(309,41)
                      call_expression (309,9)-(309,40)
                        identifier: 'scanner_raise_error' (309,9)-(309,28)
                        argument_list (309,29)-(309,40)
                          (: '(' (309,29)-(309,30)
                          identifier: 'context_p' (309,30)-(309,39)
                          ): ')' (309,39)-(309,40)
                      ;: ';' (309,40)-(309,41)
                    }: '}' (310,7)-(310,8)
                return_statement (312,7)-(312,19)
                  return: 'return' (312,7)-(312,13)
                  true: 'true' (312,14)-(312,18)
                  ;: ';' (312,18)-(312,19)
                }: '}' (313,5)-(313,6)
            case_statement (314,5)-(319,6)
              case: 'case' (314,5)-(314,9)
              identifier: 'LEXER_LEFT_PAREN' (314,10)-(314,26)
              :: ':' (314,26)-(314,27)
              compound_statement (315,5)-(319,6)
                {: '{' (315,5)-(315,6)
                expression_statement (316,7)-(316,72)
                  call_expression (316,7)-(316,71)
                    identifier: 'parser_stack_push_uint8' (316,7)-(316,30)
                    argument_list (316,31)-(316,71)
                      (: '(' (316,31)-(316,32)
                      identifier: 'context_p' (316,32)-(316,41)
                      ,: ',' (316,41)-(316,42)
                      identifier: 'SCAN_STACK_PAREN_EXPRESSION' (316,43)-(316,70)
                      ): ')' (316,70)-(316,71)
                  ;: ';' (316,71)-(316,72)
                expression_statement (317,7)-(317,62)
                  assignment_expression (317,7)-(317,61)
                    field_expression (317,7)-(317,30)
                      identifier: 'scanner_context_p' (317,7)-(317,24)
                      ->: '->' (317,24)-(317,26)
                      field_identifier: 'mode' (317,26)-(317,30)
                    =: '=' (317,31)-(317,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (317,33)-(317,61)
                  ;: ';' (317,61)-(317,62)
                return_statement (318,7)-(318,19)
                  return: 'return' (318,7)-(318,13)
                  true: 'true' (318,14)-(318,18)
                  ;: ';' (318,18)-(318,19)
                }: '}' (319,5)-(319,6)
            preproc_if (320,1)-(330,7)
              #if: '#if' (320,1)-(320,4)
              call_expression (320,5)-(320,27)
                identifier: 'ENABLED' (320,5)-(320,12)
                argument_list (320,13)-(320,27)
                  (: '(' (320,13)-(320,14)
                  identifier: 'JERRY_ES2015' (320,14)-(320,26)
                  ): ')' (320,26)-(320,27)
              
: '
' (320,27)-(321,1)
              case_statement (321,5)-(329,6)
                case: 'case' (321,5)-(321,9)
                identifier: 'LEXER_TEMPLATE_LITERAL' (321,10)-(321,32)
                :: ':' (321,32)-(321,33)
                compound_statement (322,5)-(329,6)
                  {: '{' (322,5)-(322,6)
                  if_statement (323,7)-(327,8)
                    if: 'if' (323,7)-(323,9)
                    parenthesized_expression (323,10)-(323,77)
                      (: '(' (323,10)-(323,11)
                      call_expression (323,11)-(323,76)
                        identifier: 'JERRY_UNLIKELY' (323,11)-(323,25)
                        argument_list (323,26)-(323,76)
                          (: '(' (323,26)-(323,27)
                          binary_expression (323,27)-(323,75)
                            subscript_expression (323,27)-(323,50)
                              field_expression (323,27)-(323,46)
                                identifier: 'context_p' (323,27)-(323,36)
                                ->: '->' (323,36)-(323,38)
                                field_identifier: 'source_p' (323,38)-(323,46)
                              [: '[' (323,46)-(323,47)
                              number_literal: '-1' (323,47)-(323,49)
                              ]: ']' (323,49)-(323,50)
                            !=: '!=' (323,51)-(323,53)
                            identifier: 'LIT_CHAR_GRAVE_ACCENT' (323,54)-(323,75)
                          ): ')' (323,75)-(323,76)
                      ): ')' (323,76)-(323,77)
                    compound_statement (324,7)-(327,8)
                      {: '{' (324,7)-(324,8)
                      expression_statement (325,9)-(325,64)
                        assignment_expression (325,9)-(325,63)
                          field_expression (325,9)-(325,32)
                            identifier: 'scanner_context_p' (325,9)-(325,26)
                            ->: '->' (325,26)-(325,28)
                            field_identifier: 'mode' (325,28)-(325,32)
                          =: '=' (325,33)-(325,34)
                          identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (325,35)-(325,63)
                        ;: ';' (325,63)-(325,64)
                      expression_statement (326,9)-(326,81)
                        call_expression (326,9)-(326,80)
                          identifier: 'parser_stack_push_uint8' (326,9)-(326,32)
                          argument_list (326,33)-(326,80)
                            (: '(' (326,33)-(326,34)
                            identifier: 'context_p' (326,34)-(326,43)
                            ,: ',' (326,43)-(326,44)
                            identifier: 'SCAN_STACK_TAGGED_TEMPLATE_LITERAL' (326,45)-(326,79)
                            ): ')' (326,79)-(326,80)
                        ;: ';' (326,80)-(326,81)
                      }: '}' (327,7)-(327,8)
                  return_statement (328,7)-(328,19)
                    return: 'return' (328,7)-(328,13)
                    true: 'true' (328,14)-(328,18)
                    ;: ';' (328,18)-(328,19)
                  }: '}' (329,5)-(329,6)
              #endif: '#endif' (330,1)-(330,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (330,8)-(330,36)
            case_statement (331,5)-(336,6)
              case: 'case' (331,5)-(331,9)
              identifier: 'LEXER_LEFT_SQUARE' (331,10)-(331,27)
              :: ':' (331,27)-(331,28)
              compound_statement (332,5)-(336,6)
                {: '{' (332,5)-(332,6)
                expression_statement (333,7)-(333,73)
                  call_expression (333,7)-(333,72)
                    identifier: 'parser_stack_push_uint8' (333,7)-(333,30)
                    argument_list (333,31)-(333,72)
                      (: '(' (333,31)-(333,32)
                      identifier: 'context_p' (333,32)-(333,41)
                      ,: ',' (333,41)-(333,42)
                      identifier: 'SCAN_STACK_PROPERTY_ACCESSOR' (333,43)-(333,71)
                      ): ')' (333,71)-(333,72)
                  ;: ';' (333,72)-(333,73)
                expression_statement (334,7)-(334,62)
                  assignment_expression (334,7)-(334,61)
                    field_expression (334,7)-(334,30)
                      identifier: 'scanner_context_p' (334,7)-(334,24)
                      ->: '->' (334,24)-(334,26)
                      field_identifier: 'mode' (334,26)-(334,30)
                    =: '=' (334,31)-(334,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (334,33)-(334,61)
                  ;: ';' (334,61)-(334,62)
                return_statement (335,7)-(335,19)
                  return: 'return' (335,7)-(335,13)
                  true: 'true' (335,14)-(335,18)
                  ;: ';' (335,18)-(335,19)
                }: '}' (336,5)-(336,6)
            case_statement (337,5)-(337,25)
              case: 'case' (337,5)-(337,9)
              identifier: 'LEXER_INCREASE' (337,10)-(337,24)
              :: ':' (337,24)-(337,25)
            case_statement (338,5)-(355,6)
              case: 'case' (338,5)-(338,9)
              identifier: 'LEXER_DECREASE' (338,10)-(338,24)
              :: ':' (338,24)-(338,25)
              compound_statement (339,5)-(355,6)
                {: '{' (339,5)-(339,6)
                expression_statement (340,7)-(340,66)
                  assignment_expression (340,7)-(340,65)
                    field_expression (340,7)-(340,30)
                      identifier: 'scanner_context_p' (340,7)-(340,24)
                      ->: '->' (340,24)-(340,26)
                      field_identifier: 'mode' (340,26)-(340,30)
                    =: '=' (340,31)-(340,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (340,33)-(340,65)
                  ;: ';' (340,65)-(340,66)
                if_statement (342,7)-(345,8)
                  if: 'if' (342,7)-(342,9)
                  parenthesized_expression (342,10)-(342,54)
                    (: '(' (342,10)-(342,11)
                    binary_expression (342,11)-(342,53)
                      field_expression (342,11)-(342,33)
                        field_expression (342,11)-(342,27)
                          identifier: 'context_p' (342,11)-(342,20)
                          ->: '->' (342,20)-(342,22)
                          field_identifier: 'token' (342,22)-(342,27)
                        .: '.' (342,27)-(342,28)
                        field_identifier: 'flags' (342,28)-(342,33)
                      &: '&' (342,34)-(342,35)
                      identifier: 'LEXER_WAS_NEWLINE' (342,36)-(342,53)
                    ): ')' (342,53)-(342,54)
                  compound_statement (343,7)-(345,8)
                    {: '{' (343,7)-(343,8)
                    return_statement (344,9)-(344,22)
                      return: 'return' (344,9)-(344,15)
                      false: 'false' (344,16)-(344,21)
                      ;: ';' (344,21)-(344,22)
                    }: '}' (345,7)-(345,8)
                expression_statement (347,7)-(347,36)
                  call_expression (347,7)-(347,35)
                    identifier: 'lexer_next_token' (347,7)-(347,23)
                    argument_list (347,24)-(347,35)
                      (: '(' (347,24)-(347,25)
                      identifier: 'context_p' (347,25)-(347,34)
                      ): ')' (347,34)-(347,35)
                  ;: ';' (347,35)-(347,36)
                expression_statement (348,7)-(348,57)
                  assignment_expression (348,7)-(348,56)
                    identifier: 'type' (348,7)-(348,11)
                    =: '=' (348,12)-(348,13)
                    cast_expression (348,14)-(348,56)
                      (: '(' (348,14)-(348,15)
                      type_descriptor (348,15)-(348,33)
                        type_identifier: 'lexer_token_type_t' (348,15)-(348,33)
                      ): ')' (348,33)-(348,34)
                      field_expression (348,35)-(348,56)
                        field_expression (348,35)-(348,51)
                          identifier: 'context_p' (348,35)-(348,44)
                          ->: '->' (348,44)-(348,46)
                          field_identifier: 'token' (348,46)-(348,51)
                        .: '.' (348,51)-(348,52)
                        field_identifier: 'type' (348,52)-(348,56)
                  ;: ';' (348,56)-(348,57)
                if_statement (350,7)-(353,8)
                  if: 'if' (350,7)-(350,9)
                  parenthesized_expression (350,10)-(350,39)
                    (: '(' (350,10)-(350,11)
                    binary_expression (350,11)-(350,38)
                      identifier: 'type' (350,11)-(350,15)
                      !=: '!=' (350,16)-(350,18)
                      identifier: 'LEXER_QUESTION_MARK' (350,19)-(350,38)
                    ): ')' (350,38)-(350,39)
                  compound_statement (351,7)-(353,8)
                    {: '{' (351,7)-(351,8)
                    break_statement (352,9)-(352,15)
                      break: 'break' (352,9)-(352,14)
                      ;: ';' (352,14)-(352,15)
                    }: '}' (353,7)-(353,8)
                comment: '/* FALLTHRU */' (354,7)-(354,21)
                }: '}' (355,5)-(355,6)
            case_statement (356,5)-(361,6)
              case: 'case' (356,5)-(356,9)
              identifier: 'LEXER_QUESTION_MARK' (356,10)-(356,29)
              :: ':' (356,29)-(356,30)
              compound_statement (357,5)-(361,6)
                {: '{' (357,5)-(357,6)
                expression_statement (358,7)-(358,72)
                  call_expression (358,7)-(358,71)
                    identifier: 'parser_stack_push_uint8' (358,7)-(358,30)
                    argument_list (358,31)-(358,71)
                      (: '(' (358,31)-(358,32)
                      identifier: 'context_p' (358,32)-(358,41)
                      ,: ',' (358,41)-(358,42)
                      identifier: 'SCAN_STACK_COLON_EXPRESSION' (358,43)-(358,70)
                      ): ')' (358,70)-(358,71)
                  ;: ';' (358,71)-(358,72)
                expression_statement (359,7)-(359,62)
                  assignment_expression (359,7)-(359,61)
                    field_expression (359,7)-(359,30)
                      identifier: 'scanner_context_p' (359,7)-(359,24)
                      ->: '->' (359,24)-(359,26)
                      field_identifier: 'mode' (359,26)-(359,30)
                    =: '=' (359,31)-(359,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (359,33)-(359,61)
                  ;: ';' (359,61)-(359,62)
                return_statement (360,7)-(360,19)
                  return: 'return' (360,7)-(360,13)
                  true: 'true' (360,14)-(360,18)
                  ;: ';' (360,18)-(360,19)
                }: '}' (361,5)-(361,6)
            case_statement (362,5)-(365,6)
              default: 'default' (362,5)-(362,12)
              :: ':' (362,12)-(362,13)
              compound_statement (363,5)-(365,6)
                {: '{' (363,5)-(363,6)
                break_statement (364,7)-(364,13)
                  break: 'break' (364,7)-(364,12)
                  ;: ';' (364,12)-(364,13)
                }: '}' (365,5)-(365,6)
            }: '}' (366,3)-(366,4)
        if_statement (368,3)-(373,4)
          if: 'if' (368,3)-(368,5)
          parenthesized_expression (368,6)-(369,71)
            (: '(' (368,6)-(368,7)
            binary_expression (368,7)-(369,70)
              call_expression (368,7)-(368,38)
                identifier: 'LEXER_IS_BINARY_OP_TOKEN' (368,7)-(368,31)
                argument_list (368,32)-(368,38)
                  (: '(' (368,32)-(368,33)
                  identifier: 'type' (368,33)-(368,37)
                  ): ')' (368,37)-(368,38)
              &&: '&&' (369,7)-(369,9)
              parenthesized_expression (369,10)-(369,70)
                (: '(' (369,10)-(369,11)
                binary_expression (369,11)-(369,69)
                  binary_expression (369,11)-(369,32)
                    identifier: 'type' (369,11)-(369,15)
                    !=: '!=' (369,16)-(369,18)
                    identifier: 'LEXER_KEYW_IN' (369,19)-(369,32)
                  ||: '||' (369,33)-(369,35)
                  unary_expression (369,36)-(369,69)
                    !: '!' (369,36)-(369,37)
                    call_expression (369,37)-(369,69)
                      identifier: 'SCANNER_IS_FOR_START' (369,37)-(369,57)
                      argument_list (369,58)-(369,69)
                        (: '(' (369,58)-(369,59)
                        identifier: 'stack_top' (369,59)-(369,68)
                        ): ')' (369,68)-(369,69)
                ): ')' (369,69)-(369,70)
            ): ')' (369,70)-(369,71)
          compound_statement (370,3)-(373,4)
            {: '{' (370,3)-(370,4)
            expression_statement (371,5)-(371,60)
              assignment_expression (371,5)-(371,59)
                field_expression (371,5)-(371,28)
                  identifier: 'scanner_context_p' (371,5)-(371,22)
                  ->: '->' (371,22)-(371,24)
                  field_identifier: 'mode' (371,24)-(371,28)
                =: '=' (371,29)-(371,30)
                identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (371,31)-(371,59)
              ;: ';' (371,59)-(371,60)
            return_statement (372,5)-(372,17)
              return: 'return' (372,5)-(372,11)
              true: 'true' (372,12)-(372,16)
              ;: ';' (372,16)-(372,17)
            }: '}' (373,3)-(373,4)
        return_statement (375,3)-(375,16)
          return: 'return' (375,3)-(375,9)
          false: 'false' (375,10)-(375,15)
          ;: ';' (375,15)-(375,16)
        }: '}' (376,1)-(376,2)
    comment: '/* scanner_scan_post_primary_expression */' (376,3)-(376,45)
    comment: '/**
 * Scan the tokens after the primary expression.
 *
 * @return SCAN_NEXT_TOKEN to read the next token, or SCAN_KEEP_TOKEN to do nothing
 */' (378,1)-(382,4)
    function_definition (383,1)-(1068,2)
      storage_class_specifier (383,1)-(383,7)
        static: 'static' (383,1)-(383,7)
      type_identifier: 'scan_return_types_t' (383,8)-(383,27)
      function_declarator (384,1)-(387,67)
        identifier: 'scanner_scan_primary_expression_end' (384,1)-(384,36)
        parameter_list (384,37)-(387,67)
          (: '(' (384,37)-(384,38)
          parameter_declaration (384,38)-(384,65)
            type_identifier: 'parser_context_t' (384,38)-(384,54)
            pointer_declarator (384,55)-(384,65)
              *: '*' (384,55)-(384,56)
              identifier: 'context_p' (384,56)-(384,65)
          ,: ',' (384,65)-(384,66)
          comment: '/**< context */' (384,67)-(384,82)
          parameter_declaration (385,38)-(385,74)
            type_identifier: 'scanner_context_t' (385,38)-(385,55)
            pointer_declarator (385,56)-(385,74)
              *: '*' (385,56)-(385,57)
              identifier: 'scanner_context_p' (385,57)-(385,74)
          ,: ',' (385,74)-(385,75)
          comment: '/**< scanner context */' (385,76)-(385,99)
          parameter_declaration (386,38)-(386,61)
            type_identifier: 'lexer_token_type_t' (386,38)-(386,56)
            identifier: 'type' (386,57)-(386,61)
          ,: ',' (386,61)-(386,62)
          comment: '/**< current token type */' (386,63)-(386,89)
          parameter_declaration (387,38)-(387,66)
            type_identifier: 'scan_stack_modes_t' (387,38)-(387,56)
            identifier: 'stack_top' (387,57)-(387,66)
          ): ')' (387,66)-(387,67)
      comment: '/**< current stack top */' (387,68)-(387,93)
      compound_statement (388,1)-(1068,2)
        {: '{' (388,1)-(388,2)
        if_statement (389,3)-(457,4)
          if: 'if' (389,3)-(389,5)
          parenthesized_expression (389,6)-(389,27)
            (: '(' (389,6)-(389,7)
            binary_expression (389,7)-(389,26)
              identifier: 'type' (389,7)-(389,11)
              ==: '==' (389,12)-(389,14)
              identifier: 'LEXER_COMMA' (389,15)-(389,26)
            ): ')' (389,26)-(389,27)
          compound_statement (390,3)-(457,4)
            {: '{' (390,3)-(390,4)
            switch_statement (391,5)-(456,6)
              switch: 'switch' (391,5)-(391,11)
              parenthesized_expression (391,12)-(391,23)
                (: '(' (391,12)-(391,13)
                identifier: 'stack_top' (391,13)-(391,22)
                ): ')' (391,22)-(391,23)
              compound_statement (392,5)-(456,6)
                {: '{' (392,5)-(392,6)
                case_statement (393,7)-(393,27)
                  case: 'case' (393,7)-(393,11)
                  identifier: 'SCAN_STACK_VAR' (393,12)-(393,26)
                  :: ':' (393,26)-(393,27)
                preproc_if (394,1)-(397,7)
                  #if: '#if' (394,1)-(394,4)
                  call_expression (394,5)-(394,27)
                    identifier: 'ENABLED' (394,5)-(394,12)
                    argument_list (394,13)-(394,27)
                      (: '(' (394,13)-(394,14)
                      identifier: 'JERRY_ES2015' (394,14)-(394,26)
                      ): ')' (394,26)-(394,27)
                  
: '
' (394,27)-(395,1)
                  case_statement (395,7)-(395,27)
                    case: 'case' (395,7)-(395,11)
                    identifier: 'SCAN_STACK_LET' (395,12)-(395,26)
                    :: ':' (395,26)-(395,27)
                  case_statement (396,7)-(396,29)
                    case: 'case' (396,7)-(396,11)
                    identifier: 'SCAN_STACK_CONST' (396,12)-(396,28)
                    :: ':' (396,28)-(396,29)
                  #endif: '#endif' (397,1)-(397,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (397,8)-(397,36)
                case_statement (398,7)-(398,37)
                  case: 'case' (398,7)-(398,11)
                  identifier: 'SCAN_STACK_FOR_VAR_START' (398,12)-(398,36)
                  :: ':' (398,36)-(398,37)
                preproc_if (399,1)-(402,7)
                  #if: '#if' (399,1)-(399,4)
                  call_expression (399,5)-(399,27)
                    identifier: 'ENABLED' (399,5)-(399,12)
                    argument_list (399,13)-(399,27)
                      (: '(' (399,13)-(399,14)
                      identifier: 'JERRY_ES2015' (399,14)-(399,26)
                      ): ')' (399,26)-(399,27)
                  
: '
' (399,27)-(400,1)
                  case_statement (400,7)-(400,37)
                    case: 'case' (400,7)-(400,11)
                    identifier: 'SCAN_STACK_FOR_LET_START' (400,12)-(400,36)
                    :: ':' (400,36)-(400,37)
                  case_statement (401,7)-(401,39)
                    case: 'case' (401,7)-(401,11)
                    identifier: 'SCAN_STACK_FOR_CONST_START' (401,12)-(401,38)
                    :: ':' (401,38)-(401,39)
                  #endif: '#endif' (402,1)-(402,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (402,8)-(402,36)
                compound_statement (403,7)-(406,8)
                  {: '{' (403,7)-(403,8)
                  expression_statement (404,9)-(404,59)
                    assignment_expression (404,9)-(404,58)
                      field_expression (404,9)-(404,32)
                        identifier: 'scanner_context_p' (404,9)-(404,26)
                        ->: '->' (404,26)-(404,28)
                        field_identifier: 'mode' (404,28)-(404,32)
                      =: '=' (404,33)-(404,34)
                      identifier: 'SCAN_MODE_VAR_STATEMENT' (404,35)-(404,58)
                    ;: ';' (404,58)-(404,59)
                  return_statement (405,9)-(405,32)
                    return: 'return' (405,9)-(405,15)
                    identifier: 'SCAN_NEXT_TOKEN' (405,16)-(405,31)
                    ;: ';' (405,31)-(405,32)
                  }: '}' (406,7)-(406,8)
                case_statement (407,7)-(411,8)
                  case: 'case' (407,7)-(407,11)
                  identifier: 'SCAN_STACK_COLON_EXPRESSION' (407,12)-(407,39)
                  :: ':' (407,39)-(407,40)
                  compound_statement (408,7)-(411,8)
                    {: '{' (408,7)-(408,8)
                    expression_statement (409,9)-(409,41)
                      call_expression (409,9)-(409,40)
                        identifier: 'scanner_raise_error' (409,9)-(409,28)
                        argument_list (409,29)-(409,40)
                          (: '(' (409,29)-(409,30)
                          identifier: 'context_p' (409,30)-(409,39)
                          ): ')' (409,39)-(409,40)
                      ;: ';' (409,40)-(409,41)
                    break_statement (410,9)-(410,15)
                      break: 'break' (410,9)-(410,14)
                      ;: ';' (410,14)-(410,15)
                    }: '}' (411,7)-(411,8)
                preproc_if (412,1)-(445,7)
                  #if: '#if' (412,1)-(412,4)
                  call_expression (412,5)-(412,27)
                    identifier: 'ENABLED' (412,5)-(412,12)
                    argument_list (412,13)-(412,27)
                      (: '(' (412,13)-(412,14)
                      identifier: 'JERRY_ES2015' (412,14)-(412,26)
                      ): ')' (412,26)-(412,27)
                  
: '
' (412,27)-(413,1)
                  case_statement (413,7)-(413,36)
                    case: 'case' (413,7)-(413,11)
                    identifier: 'SCAN_STACK_BINDING_INIT' (413,12)-(413,35)
                    :: ':' (413,35)-(413,36)
                  case_statement (414,7)-(417,8)
                    case: 'case' (414,7)-(414,11)
                    identifier: 'SCAN_STACK_BINDING_LIST_INIT' (414,12)-(414,40)
                    :: ':' (414,40)-(414,41)
                    compound_statement (415,7)-(417,8)
                      {: '{' (415,7)-(415,8)
                      break_statement (416,9)-(416,15)
                        break: 'break' (416,9)-(416,14)
                        ;: ';' (416,14)-(416,15)
                      }: '}' (417,7)-(417,8)
                  case_statement (418,7)-(423,8)
                    case: 'case' (418,7)-(418,11)
                    identifier: 'SCAN_STACK_ARROW_ARGUMENTS' (418,12)-(418,38)
                    :: ':' (418,38)-(418,39)
                    compound_statement (419,7)-(423,8)
                      {: '{' (419,7)-(419,8)
                      expression_statement (420,9)-(420,38)
                        call_expression (420,9)-(420,37)
                          identifier: 'lexer_next_token' (420,9)-(420,25)
                          argument_list (420,26)-(420,37)
                            (: '(' (420,26)-(420,27)
                            identifier: 'context_p' (420,27)-(420,36)
                            ): ')' (420,36)-(420,37)
                        ;: ';' (420,37)-(420,38)
                      expression_statement (421,9)-(421,64)
                        call_expression (421,9)-(421,63)
                          identifier: 'scanner_check_arrow_arg' (421,9)-(421,32)
                          argument_list (421,33)-(421,63)
                            (: '(' (421,33)-(421,34)
                            identifier: 'context_p' (421,34)-(421,43)
                            ,: ',' (421,43)-(421,44)
                            identifier: 'scanner_context_p' (421,45)-(421,62)
                            ): ')' (421,62)-(421,63)
                        ;: ';' (421,63)-(421,64)
                      return_statement (422,9)-(422,32)
                        return: 'return' (422,9)-(422,15)
                        identifier: 'SCAN_KEEP_TOKEN' (422,16)-(422,31)
                        ;: ';' (422,31)-(422,32)
                      }: '}' (423,7)-(423,8)
                  case_statement (424,7)-(427,8)
                    case: 'case' (424,7)-(424,11)
                    identifier: 'SCAN_STACK_ARROW_EXPRESSION' (424,12)-(424,39)
                    :: ':' (424,39)-(424,40)
                    compound_statement (425,7)-(427,8)
                      {: '{' (425,7)-(425,8)
                      break_statement (426,9)-(426,15)
                        break: 'break' (426,9)-(426,14)
                        ;: ';' (426,14)-(426,15)
                      }: '}' (427,7)-(427,8)
                  case_statement (428,7)-(433,8)
                    case: 'case' (428,7)-(428,11)
                    identifier: 'SCAN_STACK_FUNCTION_PARAMETERS' (428,12)-(428,42)
                    :: ':' (428,42)-(428,43)
                    compound_statement (429,7)-(433,8)
                      {: '{' (429,7)-(429,8)
                      expression_statement (430,9)-(430,73)
                        assignment_expression (430,9)-(430,72)
                          field_expression (430,9)-(430,32)
                            identifier: 'scanner_context_p' (430,9)-(430,26)
                            ->: '->' (430,26)-(430,28)
                            field_identifier: 'mode' (430,28)-(430,32)
                          =: '=' (430,33)-(430,34)
                          identifier: 'SCAN_MODE_CONTINUE_FUNCTION_ARGUMENTS' (430,35)-(430,72)
                        ;: ';' (430,72)-(430,73)
                      expression_statement (431,9)-(431,44)
                        call_expression (431,9)-(431,43)
                          identifier: 'parser_stack_pop_uint8' (431,9)-(431,31)
                          argument_list (431,32)-(431,43)
                            (: '(' (431,32)-(431,33)
                            identifier: 'context_p' (431,33)-(431,42)
                            ): ')' (431,42)-(431,43)
                        ;: ';' (431,43)-(431,44)
                      return_statement (432,9)-(432,32)
                        return: 'return' (432,9)-(432,15)
                        identifier: 'SCAN_NEXT_TOKEN' (432,16)-(432,31)
                        ;: ';' (432,31)-(432,32)
                      }: '}' (433,7)-(433,8)
                  case_statement (434,7)-(444,8)
                    case: 'case' (434,7)-(434,11)
                    identifier: 'SCAN_STACK_ARRAY_LITERAL' (434,12)-(434,36)
                    :: ':' (434,36)-(434,37)
                    compound_statement (435,7)-(444,8)
                      {: '{' (435,7)-(435,8)
                      expression_statement (436,9)-(436,64)
                        assignment_expression (436,9)-(436,63)
                          field_expression (436,9)-(436,32)
                            identifier: 'scanner_context_p' (436,9)-(436,26)
                            ->: '->' (436,26)-(436,28)
                            field_identifier: 'mode' (436,28)-(436,32)
                          =: '=' (436,33)-(436,34)
                          identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (436,35)-(436,63)
                        ;: ';' (436,63)-(436,64)
                      if_statement (438,9)-(441,10)
                        if: 'if' (438,9)-(438,11)
                        parenthesized_expression (438,12)-(438,69)
                          (: '(' (438,12)-(438,13)
                          binary_expression (438,13)-(438,68)
                            field_expression (438,13)-(438,44)
                              identifier: 'scanner_context_p' (438,13)-(438,30)
                              ->: '->' (438,30)-(438,32)
                              field_identifier: 'binding_type' (438,32)-(438,44)
                            !=: '!=' (438,45)-(438,47)
                            identifier: 'SCANNER_BINDING_NONE' (438,48)-(438,68)
                          ): ')' (438,68)-(438,69)
                        compound_statement (439,9)-(441,10)
                          {: '{' (439,9)-(439,10)
                          expression_statement (440,11)-(440,55)
                            assignment_expression (440,11)-(440,54)
                              field_expression (440,11)-(440,34)
                                identifier: 'scanner_context_p' (440,11)-(440,28)
                                ->: '->' (440,28)-(440,30)
                                field_identifier: 'mode' (440,30)-(440,34)
                              =: '=' (440,35)-(440,36)
                              identifier: 'SCAN_MODE_BINDING' (440,37)-(440,54)
                            ;: ';' (440,54)-(440,55)
                          }: '}' (441,9)-(441,10)
                      return_statement (443,9)-(443,32)
                        return: 'return' (443,9)-(443,15)
                        identifier: 'SCAN_NEXT_TOKEN' (443,16)-(443,31)
                        ;: ';' (443,31)-(443,32)
                      }: '}' (444,7)-(444,8)
                  #endif: '#endif' (445,1)-(445,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (445,8)-(445,36)
                case_statement (446,7)-(450,8)
                  case: 'case' (446,7)-(446,11)
                  identifier: 'SCAN_STACK_OBJECT_LITERAL' (446,12)-(446,37)
                  :: ':' (446,37)-(446,38)
                  compound_statement (447,7)-(450,8)
                    {: '{' (447,7)-(447,8)
                    expression_statement (448,9)-(448,59)
                      assignment_expression (448,9)-(448,58)
                        field_expression (448,9)-(448,32)
                          identifier: 'scanner_context_p' (448,9)-(448,26)
                          ->: '->' (448,26)-(448,28)
                          field_identifier: 'mode' (448,28)-(448,32)
                        =: '=' (448,33)-(448,34)
                        identifier: 'SCAN_MODE_PROPERTY_NAME' (448,35)-(448,58)
                      ;: ';' (448,58)-(448,59)
                    return_statement (449,9)-(449,32)
                      return: 'return' (449,9)-(449,15)
                      identifier: 'SCAN_KEEP_TOKEN' (449,16)-(449,31)
                      ;: ';' (449,31)-(449,32)
                    }: '}' (450,7)-(450,8)
                case_statement (451,7)-(455,8)
                  default: 'default' (451,7)-(451,14)
                  :: ':' (451,14)-(451,15)
                  compound_statement (452,7)-(455,8)
                    {: '{' (452,7)-(452,8)
                    expression_statement (453,9)-(453,64)
                      assignment_expression (453,9)-(453,63)
                        field_expression (453,9)-(453,32)
                          identifier: 'scanner_context_p' (453,9)-(453,26)
                          ->: '->' (453,26)-(453,28)
                          field_identifier: 'mode' (453,28)-(453,32)
                        =: '=' (453,33)-(453,34)
                        identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (453,35)-(453,63)
                      ;: ';' (453,63)-(453,64)
                    return_statement (454,9)-(454,32)
                      return: 'return' (454,9)-(454,15)
                      identifier: 'SCAN_NEXT_TOKEN' (454,16)-(454,31)
                      ;: ';' (454,31)-(454,32)
                    }: '}' (455,7)-(455,8)
                }: '}' (456,5)-(456,6)
            }: '}' (457,3)-(457,4)
        switch_statement (459,3)-(1064,4)
          switch: 'switch' (459,3)-(459,9)
          parenthesized_expression (459,10)-(459,21)
            (: '(' (459,10)-(459,11)
            identifier: 'stack_top' (459,11)-(459,20)
            ): ')' (459,20)-(459,21)
          compound_statement (460,3)-(1064,4)
            {: '{' (460,3)-(460,4)
            case_statement (461,5)-(478,6)
              case: 'case' (461,5)-(461,9)
              identifier: 'SCAN_STACK_WITH_EXPRESSION' (461,10)-(461,36)
              :: ':' (461,36)-(461,37)
              compound_statement (462,5)-(478,6)
                {: '{' (462,5)-(462,6)
                if_statement (463,7)-(466,8)
                  if: 'if' (463,7)-(463,9)
                  parenthesized_expression (463,10)-(463,37)
                    (: '(' (463,10)-(463,11)
                    binary_expression (463,11)-(463,36)
                      identifier: 'type' (463,11)-(463,15)
                      !=: '!=' (463,16)-(463,18)
                      identifier: 'LEXER_RIGHT_PAREN' (463,19)-(463,36)
                    ): ')' (463,36)-(463,37)
                  compound_statement (464,7)-(466,8)
                    {: '{' (464,7)-(464,8)
                    break_statement (465,9)-(465,15)
                      break: 'break' (465,9)-(465,14)
                      ;: ';' (465,14)-(465,15)
                    }: '}' (466,7)-(466,8)
                expression_statement (468,7)-(468,42)
                  call_expression (468,7)-(468,41)
                    identifier: 'parser_stack_pop_uint8' (468,7)-(468,29)
                    argument_list (468,30)-(468,41)
                      (: '(' (468,30)-(468,31)
                      identifier: 'context_p' (468,31)-(468,40)
                      ): ')' (468,40)-(468,41)
                  ;: ';' (468,41)-(468,42)
                declaration (470,7)-(470,86)
                  primitive_type: 'uint16_t' (470,7)-(470,15)
                  init_declarator (470,16)-(470,85)
                    identifier: 'status_flags' (470,16)-(470,28)
                    =: '=' (470,29)-(470,30)
                    field_expression (470,31)-(470,85)
                      field_expression (470,31)-(470,71)
                        identifier: 'scanner_context_p' (470,31)-(470,48)
                        ->: '->' (470,48)-(470,50)
                        field_identifier: 'active_literal_pool_p' (470,50)-(470,71)
                      ->: '->' (470,71)-(470,73)
                      field_identifier: 'status_flags' (470,73)-(470,85)
                  ;: ';' (470,85)-(470,86)
                expression_statement (471,7)-(471,98)
                  call_expression (471,7)-(471,97)
                    identifier: 'parser_stack_push_uint8' (471,7)-(471,30)
                    argument_list (471,31)-(471,97)
                      (: '(' (471,31)-(471,32)
                      identifier: 'context_p' (471,32)-(471,41)
                      ,: ',' (471,41)-(471,42)
                      conditional_expression (471,43)-(471,96)
                        parenthesized_expression (471,43)-(471,88)
                          (: '(' (471,43)-(471,44)
                          binary_expression (471,44)-(471,87)
                            identifier: 'status_flags' (471,44)-(471,56)
                            &: '&' (471,57)-(471,58)
                            identifier: 'SCANNER_LITERAL_POOL_IN_WITH' (471,59)-(471,87)
                          ): ')' (471,87)-(471,88)
                        ?: '?' (471,89)-(471,90)
                        number_literal: '1' (471,91)-(471,92)
                        :: ':' (471,93)-(471,94)
                        number_literal: '0' (471,95)-(471,96)
                      ): ')' (471,96)-(471,97)
                  ;: ';' (471,97)-(471,98)
                expression_statement (472,7)-(472,70)
                  call_expression (472,7)-(472,69)
                    identifier: 'parser_stack_push_uint8' (472,7)-(472,30)
                    argument_list (472,31)-(472,69)
                      (: '(' (472,31)-(472,32)
                      identifier: 'context_p' (472,32)-(472,41)
                      ,: ',' (472,41)-(472,42)
                      identifier: 'SCAN_STACK_WITH_STATEMENT' (472,43)-(472,68)
                      ): ')' (472,68)-(472,69)
                  ;: ';' (472,69)-(472,70)
                expression_statement (473,7)-(473,52)
                  assignment_expression (473,7)-(473,51)
                    identifier: 'status_flags' (473,7)-(473,19)
                    |=: '|=' (473,20)-(473,22)
                    identifier: 'SCANNER_LITERAL_POOL_IN_WITH' (473,23)-(473,51)
                  ;: ';' (473,51)-(473,52)
                expression_statement (474,7)-(474,77)
                  assignment_expression (474,7)-(474,76)
                    field_expression (474,7)-(474,61)
                      field_expression (474,7)-(474,47)
                        identifier: 'scanner_context_p' (474,7)-(474,24)
                        ->: '->' (474,24)-(474,26)
                        field_identifier: 'active_literal_pool_p' (474,26)-(474,47)
                      ->: '->' (474,47)-(474,49)
                      field_identifier: 'status_flags' (474,49)-(474,61)
                    =: '=' (474,62)-(474,63)
                    identifier: 'status_flags' (474,64)-(474,76)
                  ;: ';' (474,76)-(474,77)
                expression_statement (476,7)-(476,53)
                  assignment_expression (476,7)-(476,52)
                    field_expression (476,7)-(476,30)
                      identifier: 'scanner_context_p' (476,7)-(476,24)
                      ->: '->' (476,24)-(476,26)
                      field_identifier: 'mode' (476,26)-(476,30)
                    =: '=' (476,31)-(476,32)
                    identifier: 'SCAN_MODE_STATEMENT' (476,33)-(476,52)
                  ;: ';' (476,52)-(476,53)
                return_statement (477,7)-(477,30)
                  return: 'return' (477,7)-(477,13)
                  identifier: 'SCAN_NEXT_TOKEN' (477,14)-(477,29)
                  ;: ';' (477,29)-(477,30)
                }: '}' (478,5)-(478,6)
            case_statement (479,5)-(488,6)
              case: 'case' (479,5)-(479,9)
              identifier: 'SCAN_STACK_DO_EXPRESSION' (479,10)-(479,34)
              :: ':' (479,34)-(479,35)
              compound_statement (480,5)-(488,6)
                {: '{' (480,5)-(480,6)
                if_statement (481,7)-(484,8)
                  if: 'if' (481,7)-(481,9)
                  parenthesized_expression (481,10)-(481,37)
                    (: '(' (481,10)-(481,11)
                    binary_expression (481,11)-(481,36)
                      identifier: 'type' (481,11)-(481,15)
                      !=: '!=' (481,16)-(481,18)
                      identifier: 'LEXER_RIGHT_PAREN' (481,19)-(481,36)
                    ): ')' (481,36)-(481,37)
                  compound_statement (482,7)-(484,8)
                    {: '{' (482,7)-(482,8)
                    break_statement (483,9)-(483,15)
                      break: 'break' (483,9)-(483,14)
                      ;: ';' (483,14)-(483,15)
                    }: '}' (484,7)-(484,8)
                expression_statement (486,7)-(486,57)
                  assignment_expression (486,7)-(486,56)
                    field_expression (486,7)-(486,30)
                      identifier: 'scanner_context_p' (486,7)-(486,24)
                      ->: '->' (486,24)-(486,26)
                      field_identifier: 'mode' (486,26)-(486,30)
                    =: '=' (486,31)-(486,32)
                    identifier: 'SCAN_MODE_STATEMENT_END' (486,33)-(486,56)
                  ;: ';' (486,56)-(486,57)
                return_statement (487,7)-(487,30)
                  return: 'return' (487,7)-(487,13)
                  identifier: 'SCAN_NEXT_TOKEN' (487,14)-(487,29)
                  ;: ';' (487,29)-(487,30)
                }: '}' (488,5)-(488,6)
            case_statement (489,5)-(511,6)
              case: 'case' (489,5)-(489,9)
              identifier: 'SCAN_STACK_WHILE_EXPRESSION' (489,10)-(489,37)
              :: ':' (489,37)-(489,38)
              compound_statement (490,5)-(511,6)
                {: '{' (490,5)-(490,6)
                if_statement (491,7)-(494,8)
                  if: 'if' (491,7)-(491,9)
                  parenthesized_expression (491,10)-(491,37)
                    (: '(' (491,10)-(491,11)
                    binary_expression (491,11)-(491,36)
                      identifier: 'type' (491,11)-(491,15)
                      !=: '!=' (491,16)-(491,18)
                      identifier: 'LEXER_RIGHT_PAREN' (491,19)-(491,36)
                    ): ')' (491,36)-(491,37)
                  compound_statement (492,7)-(494,8)
                    {: '{' (492,7)-(492,8)
                    break_statement (493,9)-(493,15)
                      break: 'break' (493,9)-(493,14)
                      ;: ';' (493,14)-(493,15)
                    }: '}' (494,7)-(494,8)
                declaration (496,7)-(496,43)
                  type_identifier: 'scanner_source_start_t' (496,7)-(496,29)
                  identifier: 'source_start' (496,30)-(496,42)
                  ;: ';' (496,42)-(496,43)
                expression_statement (498,7)-(498,42)
                  call_expression (498,7)-(498,41)
                    identifier: 'parser_stack_pop_uint8' (498,7)-(498,29)
                    argument_list (498,30)-(498,41)
                      (: '(' (498,30)-(498,31)
                      identifier: 'context_p' (498,31)-(498,40)
                      ): ')' (498,40)-(498,41)
                  ;: ';' (498,41)-(498,42)
                expression_statement (499,7)-(499,84)
                  call_expression (499,7)-(499,83)
                    identifier: 'parser_stack_pop' (499,7)-(499,23)
                    argument_list (499,24)-(499,83)
                      (: '(' (499,24)-(499,25)
                      identifier: 'context_p' (499,25)-(499,34)
                      ,: ',' (499,34)-(499,35)
                      pointer_expression (499,36)-(499,49)
                        &: '&' (499,36)-(499,37)
                        identifier: 'source_start' (499,37)-(499,49)
                      ,: ',' (499,49)-(499,50)
                      sizeof_expression (499,51)-(499,82)
                        sizeof: 'sizeof' (499,51)-(499,57)
                        parenthesized_expression (499,58)-(499,82)
                          (: '(' (499,58)-(499,59)
                          identifier: 'scanner_source_start_t' (499,59)-(499,81)
                          ): ')' (499,81)-(499,82)
                      ): ')' (499,82)-(499,83)
                  ;: ';' (499,83)-(499,84)
                declaration (501,7)-(501,48)
                  type_identifier: 'scanner_location_info_t' (501,7)-(501,30)
                  pointer_declarator (501,31)-(501,47)
                    *: '*' (501,31)-(501,32)
                    identifier: 'location_info_p' (501,32)-(501,47)
                  ;: ';' (501,47)-(501,48)
                expression_statement (502,7)-(504,108)
                  assignment_expression (502,7)-(504,107)
                    identifier: 'location_info_p' (502,7)-(502,22)
                    =: '=' (502,23)-(502,24)
                    cast_expression (502,25)-(504,107)
                      (: '(' (502,25)-(502,26)
                      type_descriptor (502,26)-(502,51)
                        type_identifier: 'scanner_location_info_t' (502,26)-(502,49)
                        abstract_pointer_declarator (502,50)-(502,51)
                          *: '*' (502,50)-(502,51)
                      ): ')' (502,51)-(502,52)
                      call_expression (502,53)-(504,107)
                        identifier: 'scanner_insert_info' (502,53)-(502,72)
                        argument_list (502,73)-(504,107)
                          (: '(' (502,73)-(502,74)
                          identifier: 'context_p' (502,74)-(502,83)
                          ,: ',' (502,83)-(502,84)
                          field_expression (503,74)-(503,95)
                            identifier: 'source_start' (503,74)-(503,86)
                            .: '.' (503,86)-(503,87)
                            field_identifier: 'source_p' (503,87)-(503,95)
                          ,: ',' (503,95)-(503,96)
                          sizeof_expression (504,74)-(504,106)
                            sizeof: 'sizeof' (504,74)-(504,80)
                            parenthesized_expression (504,81)-(504,106)
                              (: '(' (504,81)-(504,82)
                              identifier: 'scanner_location_info_t' (504,82)-(504,105)
                              ): ')' (504,105)-(504,106)
                          ): ')' (504,106)-(504,107)
                  ;: ';' (504,107)-(504,108)
                expression_statement (505,7)-(505,55)
                  assignment_expression (505,7)-(505,54)
                    field_expression (505,7)-(505,33)
                      field_expression (505,7)-(505,28)
                        identifier: 'location_info_p' (505,7)-(505,22)
                        ->: '->' (505,22)-(505,24)
                        field_identifier: 'info' (505,24)-(505,28)
                      .: '.' (505,28)-(505,29)
                      field_identifier: 'type' (505,29)-(505,33)
                    =: '=' (505,34)-(505,35)
                    identifier: 'SCANNER_TYPE_WHILE' (505,36)-(505,54)
                  ;: ';' (505,54)-(505,55)
                expression_statement (507,7)-(507,68)
                  call_expression (507,7)-(507,67)
                    identifier: 'scanner_get_location' (507,7)-(507,27)
                    argument_list (507,28)-(507,67)
                      (: '(' (507,28)-(507,29)
                      pointer_expression (507,29)-(507,55)
                        &: '&' (507,29)-(507,30)
                        field_expression (507,30)-(507,55)
                          identifier: 'location_info_p' (507,30)-(507,45)
                          ->: '->' (507,45)-(507,47)
                          field_identifier: 'location' (507,47)-(507,55)
                      ,: ',' (507,55)-(507,56)
                      identifier: 'context_p' (507,57)-(507,66)
                      ): ')' (507,66)-(507,67)
                  ;: ';' (507,67)-(507,68)
                expression_statement (509,7)-(509,53)
                  assignment_expression (509,7)-(509,52)
                    field_expression (509,7)-(509,30)
                      identifier: 'scanner_context_p' (509,7)-(509,24)
                      ->: '->' (509,24)-(509,26)
                      field_identifier: 'mode' (509,26)-(509,30)
                    =: '=' (509,31)-(509,32)
                    identifier: 'SCAN_MODE_STATEMENT' (509,33)-(509,52)
                  ;: ';' (509,52)-(509,53)
                return_statement (510,7)-(510,30)
                  return: 'return' (510,7)-(510,13)
                  identifier: 'SCAN_NEXT_TOKEN' (510,14)-(510,29)
                  ;: ';' (510,29)-(510,30)
                }: '}' (511,5)-(511,6)
            case_statement (512,5)-(530,6)
              case: 'case' (512,5)-(512,9)
              identifier: 'SCAN_STACK_PAREN_EXPRESSION' (512,10)-(512,37)
              :: ':' (512,37)-(512,38)
              compound_statement (513,5)-(530,6)
                {: '{' (513,5)-(513,6)
                if_statement (514,7)-(517,8)
                  if: 'if' (514,7)-(514,9)
                  parenthesized_expression (514,10)-(514,37)
                    (: '(' (514,10)-(514,11)
                    binary_expression (514,11)-(514,36)
                      identifier: 'type' (514,11)-(514,15)
                      !=: '!=' (514,16)-(514,18)
                      identifier: 'LEXER_RIGHT_PAREN' (514,19)-(514,36)
                    ): ')' (514,36)-(514,37)
                  compound_statement (515,7)-(517,8)
                    {: '{' (515,7)-(515,8)
                    break_statement (516,9)-(516,15)
                      break: 'break' (516,9)-(516,14)
                      ;: ';' (516,14)-(516,15)
                    }: '}' (517,7)-(517,8)
                expression_statement (519,7)-(519,42)
                  call_expression (519,7)-(519,41)
                    identifier: 'parser_stack_pop_uint8' (519,7)-(519,29)
                    argument_list (519,30)-(519,41)
                      (: '(' (519,30)-(519,31)
                      identifier: 'context_p' (519,31)-(519,40)
                      ): ')' (519,40)-(519,41)
                  ;: ';' (519,41)-(519,42)
                preproc_if (521,1)-(526,7)
                  #if: '#if' (521,1)-(521,4)
                  call_expression (521,5)-(521,27)
                    identifier: 'ENABLED' (521,5)-(521,12)
                    argument_list (521,13)-(521,27)
                      (: '(' (521,13)-(521,14)
                      identifier: 'JERRY_ES2015' (521,14)-(521,26)
                      ): ')' (521,26)-(521,27)
                  
: '
' (521,27)-(522,1)
                  if_statement (522,7)-(525,8)
                    if: 'if' (522,7)-(522,9)
                    parenthesized_expression (522,10)-(522,62)
                      (: '(' (522,10)-(522,11)
                      binary_expression (522,11)-(522,61)
                        field_expression (522,11)-(522,37)
                          identifier: 'context_p' (522,11)-(522,20)
                          ->: '->' (522,20)-(522,22)
                          field_identifier: 'stack_top_uint8' (522,22)-(522,37)
                        ==: '==' (522,38)-(522,40)
                        identifier: 'SCAN_STACK_USE_ASYNC' (522,41)-(522,61)
                      ): ')' (522,61)-(522,62)
                    compound_statement (523,7)-(525,8)
                      {: '{' (523,7)-(523,8)
                      expression_statement (524,9)-(524,66)
                        call_expression (524,9)-(524,65)
                          identifier: 'scanner_add_async_literal' (524,9)-(524,34)
                          argument_list (524,35)-(524,65)
                            (: '(' (524,35)-(524,36)
                            identifier: 'context_p' (524,36)-(524,45)
                            ,: ',' (524,45)-(524,46)
                            identifier: 'scanner_context_p' (524,47)-(524,64)
                            ): ')' (524,64)-(524,65)
                        ;: ';' (524,65)-(524,66)
                      }: '}' (525,7)-(525,8)
                  #endif: '#endif' (526,1)-(526,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (526,8)-(526,36)
                expression_statement (528,7)-(528,67)
                  assignment_expression (528,7)-(528,66)
                    field_expression (528,7)-(528,30)
                      identifier: 'scanner_context_p' (528,7)-(528,24)
                      ->: '->' (528,24)-(528,26)
                      field_identifier: 'mode' (528,26)-(528,30)
                    =: '=' (528,31)-(528,32)
                    identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (528,33)-(528,66)
                  ;: ';' (528,66)-(528,67)
                return_statement (529,7)-(529,30)
                  return: 'return' (529,7)-(529,13)
                  identifier: 'SCAN_NEXT_TOKEN' (529,14)-(529,29)
                  ;: ';' (529,29)-(529,30)
                }: '}' (530,5)-(530,6)
            case_statement (531,5)-(550,6)
              case: 'case' (531,5)-(531,9)
              identifier: 'SCAN_STACK_STATEMENT_WITH_EXPR' (531,10)-(531,40)
              :: ':' (531,40)-(531,41)
              compound_statement (532,5)-(550,6)
                {: '{' (532,5)-(532,6)
                if_statement (533,7)-(536,8)
                  if: 'if' (533,7)-(533,9)
                  parenthesized_expression (533,10)-(533,37)
                    (: '(' (533,10)-(533,11)
                    binary_expression (533,11)-(533,36)
                      identifier: 'type' (533,11)-(533,15)
                      !=: '!=' (533,16)-(533,18)
                      identifier: 'LEXER_RIGHT_PAREN' (533,19)-(533,36)
                    ): ')' (533,36)-(533,37)
                  compound_statement (534,7)-(536,8)
                    {: '{' (534,7)-(534,8)
                    break_statement (535,9)-(535,15)
                      break: 'break' (535,9)-(535,14)
                      ;: ';' (535,14)-(535,15)
                    }: '}' (536,7)-(536,8)
                expression_statement (538,7)-(538,42)
                  call_expression (538,7)-(538,41)
                    identifier: 'parser_stack_pop_uint8' (538,7)-(538,29)
                    argument_list (538,30)-(538,41)
                      (: '(' (538,30)-(538,31)
                      identifier: 'context_p' (538,31)-(538,40)
                      ): ')' (538,40)-(538,41)
                  ;: ';' (538,41)-(538,42)
                preproc_if (540,1)-(546,7)
                  #if: '#if' (540,1)-(540,4)
                  call_expression (540,5)-(540,27)
                    identifier: 'ENABLED' (540,5)-(540,12)
                    argument_list (540,13)-(540,27)
                      (: '(' (540,13)-(540,14)
                      identifier: 'JERRY_ES2015' (540,14)-(540,26)
                      ): ')' (540,26)-(540,27)
                  
: '
' (540,27)-(541,1)
                  if_statement (541,7)-(545,8)
                    if: 'if' (541,7)-(541,9)
                    parenthesized_expression (541,10)-(541,65)
                      (: '(' (541,10)-(541,11)
                      binary_expression (541,11)-(541,64)
                        field_expression (541,11)-(541,37)
                          identifier: 'context_p' (541,11)-(541,20)
                          ->: '->' (541,20)-(541,22)
                          field_identifier: 'stack_top_uint8' (541,22)-(541,37)
                        ==: '==' (541,38)-(541,40)
                        identifier: 'SCAN_STACK_IF_STATEMENT' (541,41)-(541,64)
                      ): ')' (541,64)-(541,65)
                    compound_statement (542,7)-(545,8)
                      {: '{' (542,7)-(542,8)
                      expression_statement (543,9)-(543,72)
                        call_expression (543,9)-(543,71)
                          identifier: 'scanner_check_function_after_if' (543,9)-(543,40)
                          argument_list (543,41)-(543,71)
                            (: '(' (543,41)-(543,42)
                            identifier: 'context_p' (543,42)-(543,51)
                            ,: ',' (543,51)-(543,52)
                            identifier: 'scanner_context_p' (543,53)-(543,70)
                            ): ')' (543,70)-(543,71)
                        ;: ';' (543,71)-(543,72)
                      return_statement (544,9)-(544,32)
                        return: 'return' (544,9)-(544,15)
                        identifier: 'SCAN_KEEP_TOKEN' (544,16)-(544,31)
                        ;: ';' (544,31)-(544,32)
                      }: '}' (545,7)-(545,8)
                  #endif: '#endif' (546,1)-(546,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (546,8)-(546,36)
                expression_statement (548,7)-(548,53)
                  assignment_expression (548,7)-(548,52)
                    field_expression (548,7)-(548,30)
                      identifier: 'scanner_context_p' (548,7)-(548,24)
                      ->: '->' (548,24)-(548,26)
                      field_identifier: 'mode' (548,26)-(548,30)
                    =: '=' (548,31)-(548,32)
                    identifier: 'SCAN_MODE_STATEMENT' (548,33)-(548,52)
                  ;: ';' (548,52)-(548,53)
                return_statement (549,7)-(549,30)
                  return: 'return' (549,7)-(549,13)
                  identifier: 'SCAN_NEXT_TOKEN' (549,14)-(549,29)
                  ;: ';' (549,29)-(549,30)
                }: '}' (550,5)-(550,6)
            preproc_if (551,1)-(607,7)
              #if: '#if' (551,1)-(551,4)
              call_expression (551,5)-(551,27)
                identifier: 'ENABLED' (551,5)-(551,12)
                argument_list (551,13)-(551,27)
                  (: '(' (551,13)-(551,14)
                  identifier: 'JERRY_ES2015' (551,14)-(551,26)
                  ): ')' (551,26)-(551,27)
              
: '
' (551,27)-(552,1)
              case_statement (552,5)-(579,6)
                case: 'case' (552,5)-(552,9)
                identifier: 'SCAN_STACK_BINDING_LIST_INIT' (552,10)-(552,38)
                :: ':' (552,38)-(552,39)
                compound_statement (553,5)-(579,6)
                  {: '{' (553,5)-(553,6)
                  expression_statement (554,7)-(554,42)
                    call_expression (554,7)-(554,41)
                      identifier: 'parser_stack_pop_uint8' (554,7)-(554,29)
                      argument_list (554,30)-(554,41)
                        (: '(' (554,30)-(554,31)
                        identifier: 'context_p' (554,31)-(554,40)
                        ): ')' (554,40)-(554,41)
                    ;: ';' (554,41)-(554,42)
                  expression_statement (556,7)-(563,82)
                    call_expression (556,7)-(563,81)
                      identifier: 'JERRY_ASSERT' (556,7)-(556,19)
                      argument_list (556,20)-(563,81)
                        (: '(' (556,20)-(556,21)
                        binary_expression (556,21)-(563,80)
                          binary_expression (556,21)-(562,84)
                            binary_expression (556,21)-(561,80)
                              binary_expression (556,21)-(560,78)
                                binary_expression (556,21)-(559,70)
                                  binary_expression (556,21)-(558,68)
                                    binary_expression (556,21)-(557,79)
                                      binary_expression (556,21)-(556,75)
                                        field_expression (556,21)-(556,47)
                                          identifier: 'context_p' (556,21)-(556,30)
                                          ->: '->' (556,30)-(556,32)
                                          field_identifier: 'stack_top_uint8' (556,32)-(556,47)
                                        ==: '==' (556,48)-(556,50)
                                        identifier: 'SCAN_STACK_ARRAY_LITERAL' (556,51)-(556,75)
                                      ||: '||' (557,21)-(557,23)
                                      binary_expression (557,24)-(557,79)
                                        field_expression (557,24)-(557,50)
                                          identifier: 'context_p' (557,24)-(557,33)
                                          ->: '->' (557,33)-(557,35)
                                          field_identifier: 'stack_top_uint8' (557,35)-(557,50)
                                        ==: '==' (557,51)-(557,53)
                                        identifier: 'SCAN_STACK_OBJECT_LITERAL' (557,54)-(557,79)
                                    ||: '||' (558,21)-(558,23)
                                    binary_expression (558,24)-(558,68)
                                      field_expression (558,24)-(558,50)
                                        identifier: 'context_p' (558,24)-(558,33)
                                        ->: '->' (558,33)-(558,35)
                                        field_identifier: 'stack_top_uint8' (558,35)-(558,50)
                                      ==: '==' (558,51)-(558,53)
                                      identifier: 'SCAN_STACK_LET' (558,54)-(558,68)
                                  ||: '||' (559,21)-(559,23)
                                  binary_expression (559,24)-(559,70)
                                    field_expression (559,24)-(559,50)
                                      identifier: 'context_p' (559,24)-(559,33)
                                      ->: '->' (559,33)-(559,35)
                                      field_identifier: 'stack_top_uint8' (559,35)-(559,50)
                                    ==: '==' (559,51)-(559,53)
                                    identifier: 'SCAN_STACK_CONST' (559,54)-(559,70)
                                ||: '||' (560,21)-(560,23)
                                binary_expression (560,24)-(560,78)
                                  field_expression (560,24)-(560,50)
                                    identifier: 'context_p' (560,24)-(560,33)
                                    ->: '->' (560,33)-(560,35)
                                    field_identifier: 'stack_top_uint8' (560,35)-(560,50)
                                  ==: '==' (560,51)-(560,53)
                                  identifier: 'SCAN_STACK_FOR_LET_START' (560,54)-(560,78)
                              ||: '||' (561,21)-(561,23)
                              binary_expression (561,24)-(561,80)
                                field_expression (561,24)-(561,50)
                                  identifier: 'context_p' (561,24)-(561,33)
                                  ->: '->' (561,33)-(561,35)
                                  field_identifier: 'stack_top_uint8' (561,35)-(561,50)
                                ==: '==' (561,51)-(561,53)
                                identifier: 'SCAN_STACK_FOR_CONST_START' (561,54)-(561,80)
                            ||: '||' (562,21)-(562,23)
                            binary_expression (562,24)-(562,84)
                              field_expression (562,24)-(562,50)
                                identifier: 'context_p' (562,24)-(562,33)
                                ->: '->' (562,33)-(562,35)
                                field_identifier: 'stack_top_uint8' (562,35)-(562,50)
                              ==: '==' (562,51)-(562,53)
                              identifier: 'SCAN_STACK_FUNCTION_PARAMETERS' (562,54)-(562,84)
                          ||: '||' (563,21)-(563,23)
                          binary_expression (563,24)-(563,80)
                            field_expression (563,24)-(563,50)
                              identifier: 'context_p' (563,24)-(563,33)
                              ->: '->' (563,33)-(563,35)
                              field_identifier: 'stack_top_uint8' (563,35)-(563,50)
                            ==: '==' (563,51)-(563,53)
                            identifier: 'SCAN_STACK_ARROW_ARGUMENTS' (563,54)-(563,80)
                        ): ')' (563,80)-(563,81)
                    ;: ';' (563,81)-(563,82)
                  declaration (565,7)-(565,90)
                    type_identifier: 'scanner_binding_item_t' (565,7)-(565,29)
                    init_declarator (565,30)-(565,89)
                      pointer_declarator (565,30)-(565,37)
                        *: '*' (565,30)-(565,31)
                        identifier: 'item_p' (565,31)-(565,37)
                      =: '=' (565,38)-(565,39)
                      field_expression (565,40)-(565,89)
                        field_expression (565,40)-(565,80)
                          identifier: 'scanner_context_p' (565,40)-(565,57)
                          ->: '->' (565,57)-(565,59)
                          field_identifier: 'active_binding_list_p' (565,59)-(565,80)
                        ->: '->' (565,80)-(565,82)
                        field_identifier: 'items_p' (565,82)-(565,89)
                    ;: ';' (565,89)-(565,90)
                  while_statement (567,7)-(574,8)
                    while: 'while' (567,7)-(567,12)
                    parenthesized_expression (567,13)-(567,29)
                      (: '(' (567,13)-(567,14)
                      binary_expression (567,14)-(567,28)
                        identifier: 'item_p' (567,14)-(567,20)
                        !=: '!=' (567,21)-(567,23)
                        null (567,24)-(567,28)
                          NULL: 'NULL' (567,24)-(567,28)
                      ): ')' (567,28)-(567,29)
                    compound_statement (568,7)-(574,8)
                      {: '{' (568,7)-(568,8)
                      if_statement (569,9)-(572,10)
                        if: 'if' (569,9)-(569,11)
                        parenthesized_expression (569,12)-(569,63)
                          (: '(' (569,12)-(569,13)
                          binary_expression (569,13)-(569,62)
                            field_expression (569,13)-(569,36)
                              field_expression (569,13)-(569,30)
                                identifier: 'item_p' (569,13)-(569,19)
                                ->: '->' (569,19)-(569,21)
                                field_identifier: 'literal_p' (569,21)-(569,30)
                              ->: '->' (569,30)-(569,32)
                              field_identifier: 'type' (569,32)-(569,36)
                            &: '&' (569,37)-(569,38)
                            identifier: 'SCANNER_LITERAL_IS_USED' (569,39)-(569,62)
                          ): ')' (569,62)-(569,63)
                        compound_statement (570,9)-(572,10)
                          {: '{' (570,9)-(570,10)
                          expression_statement (571,11)-(571,67)
                            assignment_expression (571,11)-(571,66)
                              field_expression (571,11)-(571,34)
                                field_expression (571,11)-(571,28)
                                  identifier: 'item_p' (571,11)-(571,17)
                                  ->: '->' (571,17)-(571,19)
                                  field_identifier: 'literal_p' (571,19)-(571,28)
                                ->: '->' (571,28)-(571,30)
                                field_identifier: 'type' (571,30)-(571,34)
                              |=: '|=' (571,35)-(571,37)
                              identifier: 'SCANNER_LITERAL_EARLY_CREATE' (571,38)-(571,66)
                            ;: ';' (571,66)-(571,67)
                          }: '}' (572,9)-(572,10)
                      expression_statement (573,9)-(573,33)
                        assignment_expression (573,9)-(573,32)
                          identifier: 'item_p' (573,9)-(573,15)
                          =: '=' (573,16)-(573,17)
                          field_expression (573,18)-(573,32)
                            identifier: 'item_p' (573,18)-(573,24)
                            ->: '->' (573,24)-(573,26)
                            field_identifier: 'next_p' (573,26)-(573,32)
                        ;: ';' (573,32)-(573,33)
                      }: '}' (574,7)-(574,8)
                  expression_statement (576,7)-(576,52)
                    call_expression (576,7)-(576,51)
                      identifier: 'scanner_pop_binding_list' (576,7)-(576,31)
                      argument_list (576,32)-(576,51)
                        (: '(' (576,32)-(576,33)
                        identifier: 'scanner_context_p' (576,33)-(576,50)
                        ): ')' (576,50)-(576,51)
                    ;: ';' (576,51)-(576,52)
                  expression_statement (577,7)-(577,66)
                    assignment_expression (577,7)-(577,65)
                      field_expression (577,7)-(577,30)
                        identifier: 'scanner_context_p' (577,7)-(577,24)
                        ->: '->' (577,24)-(577,26)
                        field_identifier: 'mode' (577,26)-(577,30)
                      =: '=' (577,31)-(577,32)
                      identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (577,33)-(577,65)
                    ;: ';' (577,65)-(577,66)
                  return_statement (578,7)-(578,30)
                    return: 'return' (578,7)-(578,13)
                    identifier: 'SCAN_KEEP_TOKEN' (578,14)-(578,29)
                    ;: ';' (578,29)-(578,30)
                  }: '}' (579,5)-(579,6)
              case_statement (580,5)-(606,6)
                case: 'case' (580,5)-(580,9)
                identifier: 'SCAN_STACK_BINDING_INIT' (580,10)-(580,33)
                :: ':' (580,33)-(580,34)
                compound_statement (581,5)-(606,6)
                  {: '{' (581,5)-(581,6)
                  declaration (582,7)-(582,49)
                    type_identifier: 'scanner_binding_literal_t' (582,7)-(582,32)
                    identifier: 'binding_literal' (582,33)-(582,48)
                    ;: ';' (582,48)-(582,49)
                  expression_statement (584,7)-(584,42)
                    call_expression (584,7)-(584,41)
                      identifier: 'parser_stack_pop_uint8' (584,7)-(584,29)
                      argument_list (584,30)-(584,41)
                        (: '(' (584,30)-(584,31)
                        identifier: 'context_p' (584,31)-(584,40)
                        ): ')' (584,40)-(584,41)
                    ;: ';' (584,41)-(584,42)
                  expression_statement (585,7)-(585,90)
                    call_expression (585,7)-(585,89)
                      identifier: 'parser_stack_pop' (585,7)-(585,23)
                      argument_list (585,24)-(585,89)
                        (: '(' (585,24)-(585,25)
                        identifier: 'context_p' (585,25)-(585,34)
                        ,: ',' (585,34)-(585,35)
                        pointer_expression (585,36)-(585,52)
                          &: '&' (585,36)-(585,37)
                          identifier: 'binding_literal' (585,37)-(585,52)
                        ,: ',' (585,52)-(585,53)
                        sizeof_expression (585,54)-(585,88)
                          sizeof: 'sizeof' (585,54)-(585,60)
                          parenthesized_expression (585,61)-(585,88)
                            (: '(' (585,61)-(585,62)
                            identifier: 'scanner_binding_literal_t' (585,62)-(585,87)
                            ): ')' (585,87)-(585,88)
                        ): ')' (585,88)-(585,89)
                    ;: ';' (585,89)-(585,90)
                  expression_statement (587,7)-(594,82)
                    call_expression (587,7)-(594,81)
                      identifier: 'JERRY_ASSERT' (587,7)-(587,19)
                      argument_list (587,20)-(594,81)
                        (: '(' (587,20)-(587,21)
                        binary_expression (587,21)-(594,80)
                          binary_expression (587,21)-(593,84)
                            binary_expression (587,21)-(592,80)
                              binary_expression (587,21)-(591,78)
                                binary_expression (587,21)-(590,70)
                                  binary_expression (587,21)-(589,68)
                                    binary_expression (587,21)-(588,79)
                                      binary_expression (587,21)-(587,75)
                                        field_expression (587,21)-(587,47)
                                          identifier: 'context_p' (587,21)-(587,30)
                                          ->: '->' (587,30)-(587,32)
                                          field_identifier: 'stack_top_uint8' (587,32)-(587,47)
                                        ==: '==' (587,48)-(587,50)
                                        identifier: 'SCAN_STACK_ARRAY_LITERAL' (587,51)-(587,75)
                                      ||: '||' (588,21)-(588,23)
                                      binary_expression (588,24)-(588,79)
                                        field_expression (588,24)-(588,50)
                                          identifier: 'context_p' (588,24)-(588,33)
                                          ->: '->' (588,33)-(588,35)
                                          field_identifier: 'stack_top_uint8' (588,35)-(588,50)
                                        ==: '==' (588,51)-(588,53)
                                        identifier: 'SCAN_STACK_OBJECT_LITERAL' (588,54)-(588,79)
                                    ||: '||' (589,21)-(589,23)
                                    binary_expression (589,24)-(589,68)
                                      field_expression (589,24)-(589,50)
                                        identifier: 'context_p' (589,24)-(589,33)
                                        ->: '->' (589,33)-(589,35)
                                        field_identifier: 'stack_top_uint8' (589,35)-(589,50)
                                      ==: '==' (589,51)-(589,53)
                                      identifier: 'SCAN_STACK_LET' (589,54)-(589,68)
                                  ||: '||' (590,21)-(590,23)
                                  binary_expression (590,24)-(590,70)
                                    field_expression (590,24)-(590,50)
                                      identifier: 'context_p' (590,24)-(590,33)
                                      ->: '->' (590,33)-(590,35)
                                      field_identifier: 'stack_top_uint8' (590,35)-(590,50)
                                    ==: '==' (590,51)-(590,53)
                                    identifier: 'SCAN_STACK_CONST' (590,54)-(590,70)
                                ||: '||' (591,21)-(591,23)
                                binary_expression (591,24)-(591,78)
                                  field_expression (591,24)-(591,50)
                                    identifier: 'context_p' (591,24)-(591,33)
                                    ->: '->' (591,33)-(591,35)
                                    field_identifier: 'stack_top_uint8' (591,35)-(591,50)
                                  ==: '==' (591,51)-(591,53)
                                  identifier: 'SCAN_STACK_FOR_LET_START' (591,54)-(591,78)
                              ||: '||' (592,21)-(592,23)
                              binary_expression (592,24)-(592,80)
                                field_expression (592,24)-(592,50)
                                  identifier: 'context_p' (592,24)-(592,33)
                                  ->: '->' (592,33)-(592,35)
                                  field_identifier: 'stack_top_uint8' (592,35)-(592,50)
                                ==: '==' (592,51)-(592,53)
                                identifier: 'SCAN_STACK_FOR_CONST_START' (592,54)-(592,80)
                            ||: '||' (593,21)-(593,23)
                            binary_expression (593,24)-(593,84)
                              field_expression (593,24)-(593,50)
                                identifier: 'context_p' (593,24)-(593,33)
                                ->: '->' (593,33)-(593,35)
                                field_identifier: 'stack_top_uint8' (593,35)-(593,50)
                              ==: '==' (593,51)-(593,53)
                              identifier: 'SCAN_STACK_FUNCTION_PARAMETERS' (593,54)-(593,84)
                          ||: '||' (594,21)-(594,23)
                          binary_expression (594,24)-(594,80)
                            field_expression (594,24)-(594,50)
                              identifier: 'context_p' (594,24)-(594,33)
                              ->: '->' (594,33)-(594,35)
                              field_identifier: 'stack_top_uint8' (594,35)-(594,50)
                            ==: '==' (594,51)-(594,53)
                            identifier: 'SCAN_STACK_ARROW_ARGUMENTS' (594,54)-(594,80)
                        ): ')' (594,80)-(594,81)
                    ;: ';' (594,81)-(594,82)
                  expression_statement (596,7)-(597,86)
                    call_expression (596,7)-(597,85)
                      identifier: 'JERRY_ASSERT' (596,7)-(596,19)
                      argument_list (596,20)-(597,85)
                        (: '(' (596,20)-(596,21)
                        binary_expression (596,21)-(597,84)
                          parenthesized_expression (596,21)-(596,102)
                            (: '(' (596,21)-(596,22)
                            binary_expression (596,22)-(596,101)
                              binary_expression (596,22)-(596,59)
                                identifier: 'stack_top' (596,22)-(596,31)
                                !=: '!=' (596,32)-(596,34)
                                identifier: 'SCAN_STACK_ARRAY_LITERAL' (596,35)-(596,59)
                              &&: '&&' (596,60)-(596,62)
                              binary_expression (596,63)-(596,101)
                                identifier: 'stack_top' (596,63)-(596,72)
                                !=: '!=' (596,73)-(596,75)
                                identifier: 'SCAN_STACK_OBJECT_LITERAL' (596,76)-(596,101)
                            ): ')' (596,101)-(596,102)
                          ||: '||' (597,21)-(597,23)
                          call_expression (597,24)-(597,84)
                            identifier: 'SCANNER_NEEDS_BINDING_LIST' (597,24)-(597,50)
                            argument_list (597,51)-(597,84)
                              (: '(' (597,51)-(597,52)
                              field_expression (597,52)-(597,83)
                                identifier: 'scanner_context_p' (597,52)-(597,69)
                                ->: '->' (597,69)-(597,71)
                                field_identifier: 'binding_type' (597,71)-(597,83)
                              ): ')' (597,83)-(597,84)
                        ): ')' (597,84)-(597,85)
                    ;: ';' (597,85)-(597,86)
                  if_statement (599,7)-(602,8)
                    if: 'if' (599,7)-(599,9)
                    parenthesized_expression (599,10)-(599,69)
                      (: '(' (599,10)-(599,11)
                      binary_expression (599,11)-(599,68)
                        field_expression (599,11)-(599,42)
                          field_expression (599,11)-(599,36)
                            identifier: 'binding_literal' (599,11)-(599,26)
                            .: '.' (599,26)-(599,27)
                            field_identifier: 'literal_p' (599,27)-(599,36)
                          ->: '->' (599,36)-(599,38)
                          field_identifier: 'type' (599,38)-(599,42)
                        &: '&' (599,43)-(599,44)
                        identifier: 'SCANNER_LITERAL_IS_USED' (599,45)-(599,68)
                      ): ')' (599,68)-(599,69)
                    compound_statement (600,7)-(602,8)
                      {: '{' (600,7)-(600,8)
                      expression_statement (601,9)-(601,73)
                        assignment_expression (601,9)-(601,72)
                          field_expression (601,9)-(601,40)
                            field_expression (601,9)-(601,34)
                              identifier: 'binding_literal' (601,9)-(601,24)
                              .: '.' (601,24)-(601,25)
                              field_identifier: 'literal_p' (601,25)-(601,34)
                            ->: '->' (601,34)-(601,36)
                            field_identifier: 'type' (601,36)-(601,40)
                          |=: '|=' (601,41)-(601,43)
                          identifier: 'SCANNER_LITERAL_EARLY_CREATE' (601,44)-(601,72)
                        ;: ';' (601,72)-(601,73)
                      }: '}' (602,7)-(602,8)
                  expression_statement (604,7)-(604,66)
                    assignment_expression (604,7)-(604,65)
                      field_expression (604,7)-(604,30)
                        identifier: 'scanner_context_p' (604,7)-(604,24)
                        ->: '->' (604,24)-(604,26)
                        field_identifier: 'mode' (604,26)-(604,30)
                      =: '=' (604,31)-(604,32)
                      identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (604,33)-(604,65)
                    ;: ';' (604,65)-(604,66)
                  return_statement (605,7)-(605,30)
                    return: 'return' (605,7)-(605,13)
                    identifier: 'SCAN_KEEP_TOKEN' (605,14)-(605,29)
                    ;: ';' (605,29)-(605,30)
                  }: '}' (606,5)-(606,6)
              #endif: '#endif' (607,1)-(607,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (607,8)-(607,36)
            case_statement (608,5)-(608,25)
              case: 'case' (608,5)-(608,9)
              identifier: 'SCAN_STACK_VAR' (608,10)-(608,24)
              :: ':' (608,24)-(608,25)
            preproc_if (609,1)-(612,7)
              #if: '#if' (609,1)-(609,4)
              call_expression (609,5)-(609,27)
                identifier: 'ENABLED' (609,5)-(609,12)
                argument_list (609,13)-(609,27)
                  (: '(' (609,13)-(609,14)
                  identifier: 'JERRY_ES2015' (609,14)-(609,26)
                  ): ')' (609,26)-(609,27)
              
: '
' (609,27)-(610,1)
              case_statement (610,5)-(610,25)
                case: 'case' (610,5)-(610,9)
                identifier: 'SCAN_STACK_LET' (610,10)-(610,24)
                :: ':' (610,24)-(610,25)
              case_statement (611,5)-(611,27)
                case: 'case' (611,5)-(611,9)
                identifier: 'SCAN_STACK_CONST' (611,10)-(611,26)
                :: ':' (611,26)-(611,27)
              #endif: '#endif' (612,1)-(612,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (612,8)-(612,36)
            compound_statement (613,5)-(620,6)
              {: '{' (613,5)-(613,6)
              preproc_if (614,1)-(616,7)
                #if: '#if' (614,1)-(614,4)
                call_expression (614,5)-(614,41)
                  identifier: 'ENABLED' (614,5)-(614,12)
                  argument_list (614,13)-(614,41)
                    (: '(' (614,13)-(614,14)
                    identifier: 'JERRY_ES2015_MODULE_SYSTEM' (614,14)-(614,40)
                    ): ')' (614,40)-(614,41)
                
: '
' (614,41)-(615,1)
                expression_statement (615,7)-(615,108)
                  assignment_expression (615,7)-(615,107)
                    field_expression (615,7)-(615,61)
                      field_expression (615,7)-(615,47)
                        identifier: 'scanner_context_p' (615,7)-(615,24)
                        ->: '->' (615,24)-(615,26)
                        field_identifier: 'active_literal_pool_p' (615,26)-(615,47)
                      ->: '->' (615,47)-(615,49)
                      field_identifier: 'status_flags' (615,49)-(615,61)
                    &=: '&=' (615,62)-(615,64)
                    cast_expression (615,65)-(615,107)
                      (: '(' (615,65)-(615,66)
                      type_descriptor (615,66)-(615,74)
                        primitive_type: 'uint16_t' (615,66)-(615,74)
                      ): ')' (615,74)-(615,75)
                      unary_expression (615,76)-(615,107)
                        ~: '~' (615,76)-(615,77)
                        identifier: 'SCANNER_LITERAL_POOL_IN_EXPORT' (615,77)-(615,107)
                  ;: ';' (615,107)-(615,108)
                #endif: '#endif' (616,1)-(616,7)
              comment: '/* ENABLED (JERRY_ES2015_MODULE_SYSTEM) */' (616,8)-(616,50)
              expression_statement (618,7)-(618,42)
                call_expression (618,7)-(618,41)
                  identifier: 'parser_stack_pop_uint8' (618,7)-(618,29)
                  argument_list (618,30)-(618,41)
                    (: '(' (618,30)-(618,31)
                    identifier: 'context_p' (618,31)-(618,40)
                    ): ')' (618,40)-(618,41)
                ;: ';' (618,41)-(618,42)
              return_statement (619,7)-(619,30)
                return: 'return' (619,7)-(619,13)
                identifier: 'SCAN_KEEP_TOKEN' (619,14)-(619,29)
                ;: ';' (619,29)-(619,30)
              }: '}' (620,5)-(620,6)
            case_statement (621,5)-(621,35)
              case: 'case' (621,5)-(621,9)
              identifier: 'SCAN_STACK_FOR_VAR_START' (621,10)-(621,34)
              :: ':' (621,34)-(621,35)
            preproc_if (622,1)-(625,7)
              #if: '#if' (622,1)-(622,4)
              call_expression (622,5)-(622,27)
                identifier: 'ENABLED' (622,5)-(622,12)
                argument_list (622,13)-(622,27)
                  (: '(' (622,13)-(622,14)
                  identifier: 'JERRY_ES2015' (622,14)-(622,26)
                  ): ')' (622,26)-(622,27)
              
: '
' (622,27)-(623,1)
              case_statement (623,5)-(623,35)
                case: 'case' (623,5)-(623,9)
                identifier: 'SCAN_STACK_FOR_LET_START' (623,10)-(623,34)
                :: ':' (623,34)-(623,35)
              case_statement (624,5)-(624,37)
                case: 'case' (624,5)-(624,9)
                identifier: 'SCAN_STACK_FOR_CONST_START' (624,10)-(624,36)
                :: ':' (624,36)-(624,37)
              #endif: '#endif' (625,1)-(625,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (625,8)-(625,36)
            case_statement (626,5)-(688,6)
              case: 'case' (626,5)-(626,9)
              identifier: 'SCAN_STACK_FOR_START' (626,10)-(626,30)
              :: ':' (626,30)-(626,31)
              compound_statement (627,5)-(688,6)
                {: '{' (627,5)-(627,6)
                if_statement (628,7)-(655,8)
                  if: 'if' (628,7)-(628,9)
                  parenthesized_expression (628,10)-(628,64)
                    (: '(' (628,10)-(628,11)
                    binary_expression (628,11)-(628,63)
                      binary_expression (628,11)-(628,32)
                        identifier: 'type' (628,11)-(628,15)
                        ==: '==' (628,16)-(628,18)
                        identifier: 'LEXER_KEYW_IN' (628,19)-(628,32)
                      ||: '||' (628,33)-(628,35)
                      call_expression (628,36)-(628,63)
                        identifier: 'SCANNER_IDENTIFIER_IS_OF' (628,36)-(628,60)
                        argument_list (628,61)-(628,63)
                          (: '(' (628,61)-(628,62)
                          ): ')' (628,62)-(628,63)
                    ): ')' (628,63)-(628,64)
                  compound_statement (629,7)-(655,8)
                    {: '{' (629,7)-(629,8)
                    declaration (630,9)-(630,47)
                      type_identifier: 'scanner_for_statement_t' (630,9)-(630,32)
                      identifier: 'for_statement' (630,33)-(630,46)
                      ;: ';' (630,46)-(630,47)
                    expression_statement (632,9)-(632,44)
                      call_expression (632,9)-(632,43)
                        identifier: 'parser_stack_pop_uint8' (632,9)-(632,31)
                        argument_list (632,32)-(632,43)
                          (: '(' (632,32)-(632,33)
                          identifier: 'context_p' (632,33)-(632,42)
                          ): ')' (632,42)-(632,43)
                      ;: ';' (632,43)-(632,44)
                    expression_statement (633,9)-(633,88)
                      call_expression (633,9)-(633,87)
                        identifier: 'parser_stack_pop' (633,9)-(633,25)
                        argument_list (633,26)-(633,87)
                          (: '(' (633,26)-(633,27)
                          identifier: 'context_p' (633,27)-(633,36)
                          ,: ',' (633,36)-(633,37)
                          pointer_expression (633,38)-(633,52)
                            &: '&' (633,38)-(633,39)
                            identifier: 'for_statement' (633,39)-(633,52)
                          ,: ',' (633,52)-(633,53)
                          sizeof_expression (633,54)-(633,86)
                            sizeof: 'sizeof' (633,54)-(633,60)
                            parenthesized_expression (633,61)-(633,86)
                              (: '(' (633,61)-(633,62)
                              identifier: 'scanner_for_statement_t' (633,62)-(633,85)
                              ): ')' (633,85)-(633,86)
                          ): ')' (633,86)-(633,87)
                      ;: ';' (633,87)-(633,88)
                    declaration (635,9)-(635,48)
                      type_identifier: 'scanner_location_info_t' (635,9)-(635,32)
                      pointer_declarator (635,33)-(635,47)
                        *: '*' (635,33)-(635,34)
                        identifier: 'location_info' (635,34)-(635,47)
                      ;: ';' (635,47)-(635,48)
                    expression_statement (636,9)-(638,108)
                      assignment_expression (636,9)-(638,107)
                        identifier: 'location_info' (636,9)-(636,22)
                        =: '=' (636,23)-(636,24)
                        cast_expression (636,25)-(638,107)
                          (: '(' (636,25)-(636,26)
                          type_descriptor (636,26)-(636,51)
                            type_identifier: 'scanner_location_info_t' (636,26)-(636,49)
                            abstract_pointer_declarator (636,50)-(636,51)
                              *: '*' (636,50)-(636,51)
                          ): ')' (636,51)-(636,52)
                          call_expression (636,53)-(638,107)
                            identifier: 'scanner_insert_info' (636,53)-(636,72)
                            argument_list (636,73)-(638,107)
                              (: '(' (636,73)-(636,74)
                              identifier: 'context_p' (636,74)-(636,83)
                              ,: ',' (636,83)-(636,84)
                              field_expression (637,74)-(637,98)
                                field_expression (637,74)-(637,89)
                                  identifier: 'for_statement' (637,74)-(637,87)
                                  .: '.' (637,87)-(637,88)
                                  field_identifier: 'u' (637,88)-(637,89)
                                .: '.' (637,89)-(637,90)
                                field_identifier: 'source_p' (637,90)-(637,98)
                              ,: ',' (637,98)-(637,99)
                              sizeof_expression (638,74)-(638,106)
                                sizeof: 'sizeof' (638,74)-(638,80)
                                parenthesized_expression (638,81)-(638,106)
                                  (: '(' (638,81)-(638,82)
                                  identifier: 'scanner_location_info_t' (638,82)-(638,105)
                                  ): ')' (638,105)-(638,106)
                              ): ')' (638,106)-(638,107)
                      ;: ';' (638,107)-(638,108)
                    preproc_if (639,1)-(648,7)
                      #if: '#if' (639,1)-(639,4)
                      call_expression (639,5)-(639,27)
                        identifier: 'ENABLED' (639,5)-(639,12)
                        argument_list (639,13)-(639,27)
                          (: '(' (639,13)-(639,14)
                          identifier: 'JERRY_ES2015' (639,14)-(639,26)
                          ): ')' (639,26)-(639,27)
                      
: '
' (639,27)-(640,1)
                      expression_statement (640,9)-(640,104)
                        assignment_expression (640,9)-(640,103)
                          field_expression (640,9)-(640,33)
                            field_expression (640,9)-(640,28)
                              identifier: 'location_info' (640,9)-(640,22)
                              ->: '->' (640,22)-(640,24)
                              field_identifier: 'info' (640,24)-(640,28)
                            .: '.' (640,28)-(640,29)
                            field_identifier: 'type' (640,29)-(640,33)
                          =: '=' (640,34)-(640,35)
                          conditional_expression (640,36)-(640,103)
                            parenthesized_expression (640,36)-(640,59)
                              (: '(' (640,36)-(640,37)
                              binary_expression (640,37)-(640,58)
                                identifier: 'type' (640,37)-(640,41)
                                ==: '==' (640,42)-(640,44)
                                identifier: 'LEXER_KEYW_IN' (640,45)-(640,58)
                              ): ')' (640,58)-(640,59)
                            ?: '?' (640,60)-(640,61)
                            identifier: 'SCANNER_TYPE_FOR_IN' (640,62)-(640,81)
                            :: ':' (640,82)-(640,83)
                            identifier: 'SCANNER_TYPE_FOR_OF' (640,84)-(640,103)
                        ;: ';' (640,103)-(640,104)
                      if_statement (642,9)-(645,10)
                        if: 'if' (642,9)-(642,11)
                        parenthesized_expression (642,12)-(642,94)
                          (: '(' (642,12)-(642,13)
                          binary_expression (642,13)-(642,93)
                            binary_expression (642,13)-(642,50)
                              identifier: 'stack_top' (642,13)-(642,22)
                              ==: '==' (642,23)-(642,25)
                              identifier: 'SCAN_STACK_FOR_LET_START' (642,26)-(642,50)
                            ||: '||' (642,51)-(642,53)
                            binary_expression (642,54)-(642,93)
                              identifier: 'stack_top' (642,54)-(642,63)
                              ==: '==' (642,64)-(642,66)
                              identifier: 'SCAN_STACK_FOR_CONST_START' (642,67)-(642,93)
                          ): ')' (642,93)-(642,94)
                        compound_statement (643,9)-(645,10)
                          {: '{' (643,9)-(643,10)
                          expression_statement (644,11)-(644,79)
                            call_expression (644,11)-(644,78)
                              identifier: 'parser_stack_push_uint8' (644,11)-(644,34)
                              argument_list (644,35)-(644,78)
                                (: '(' (644,35)-(644,36)
                                identifier: 'context_p' (644,36)-(644,45)
                                ,: ',' (644,45)-(644,46)
                                identifier: 'SCAN_STACK_PRIVATE_BLOCK_EARLY' (644,47)-(644,77)
                                ): ')' (644,77)-(644,78)
                            ;: ';' (644,78)-(644,79)
                          }: '}' (645,9)-(645,10)
                      preproc_else (646,1)-(647,56)
                        #else: '#else' (646,1)-(646,6)
                        comment: '/* !ENABLED (JERRY_ES2015) */' (646,7)-(646,36)
                        expression_statement (647,9)-(647,56)
                          assignment_expression (647,9)-(647,55)
                            field_expression (647,9)-(647,33)
                              field_expression (647,9)-(647,28)
                                identifier: 'location_info' (647,9)-(647,22)
                                ->: '->' (647,22)-(647,24)
                                field_identifier: 'info' (647,24)-(647,28)
                              .: '.' (647,28)-(647,29)
                              field_identifier: 'type' (647,29)-(647,33)
                            =: '=' (647,34)-(647,35)
                            identifier: 'SCANNER_TYPE_FOR_IN' (647,36)-(647,55)
                          ;: ';' (647,55)-(647,56)
                      #endif: '#endif' (648,1)-(648,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (648,8)-(648,36)
                    expression_statement (650,9)-(650,68)
                      call_expression (650,9)-(650,67)
                        identifier: 'scanner_get_location' (650,9)-(650,29)
                        argument_list (650,30)-(650,67)
                          (: '(' (650,30)-(650,31)
                          pointer_expression (650,31)-(650,55)
                            &: '&' (650,31)-(650,32)
                            field_expression (650,32)-(650,55)
                              identifier: 'location_info' (650,32)-(650,45)
                              ->: '->' (650,45)-(650,47)
                              field_identifier: 'location' (650,47)-(650,55)
                          ,: ',' (650,55)-(650,56)
                          identifier: 'context_p' (650,57)-(650,66)
                          ): ')' (650,66)-(650,67)
                      ;: ';' (650,67)-(650,68)
                    expression_statement (652,9)-(652,77)
                      call_expression (652,9)-(652,76)
                        identifier: 'parser_stack_push_uint8' (652,9)-(652,32)
                        argument_list (652,33)-(652,76)
                          (: '(' (652,33)-(652,34)
                          identifier: 'context_p' (652,34)-(652,43)
                          ,: ',' (652,43)-(652,44)
                          identifier: 'SCAN_STACK_STATEMENT_WITH_EXPR' (652,45)-(652,75)
                          ): ')' (652,75)-(652,76)
                      ;: ';' (652,76)-(652,77)
                    expression_statement (653,9)-(653,64)
                      assignment_expression (653,9)-(653,63)
                        field_expression (653,9)-(653,32)
                          identifier: 'scanner_context_p' (653,9)-(653,26)
                          ->: '->' (653,26)-(653,28)
                          field_identifier: 'mode' (653,28)-(653,32)
                        =: '=' (653,33)-(653,34)
                        identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (653,35)-(653,63)
                      ;: ';' (653,63)-(653,64)
                    return_statement (654,9)-(654,32)
                      return: 'return' (654,9)-(654,15)
                      identifier: 'SCAN_NEXT_TOKEN' (654,16)-(654,31)
                      ;: ';' (654,31)-(654,32)
                    }: '}' (655,7)-(655,8)
                if_statement (657,7)-(660,8)
                  if: 'if' (657,7)-(657,9)
                  parenthesized_expression (657,10)-(657,35)
                    (: '(' (657,10)-(657,11)
                    binary_expression (657,11)-(657,34)
                      identifier: 'type' (657,11)-(657,15)
                      !=: '!=' (657,16)-(657,18)
                      identifier: 'LEXER_SEMICOLON' (657,19)-(657,34)
                    ): ')' (657,34)-(657,35)
                  compound_statement (658,7)-(660,8)
                    {: '{' (658,7)-(658,8)
                    break_statement (659,9)-(659,15)
                      break: 'break' (659,9)-(659,14)
                      ;: ';' (659,14)-(659,15)
                    }: '}' (660,7)-(660,8)
                declaration (662,7)-(662,45)
                  type_identifier: 'scanner_for_statement_t' (662,7)-(662,30)
                  identifier: 'for_statement' (662,31)-(662,44)
                  ;: ';' (662,44)-(662,45)
                expression_statement (664,7)-(664,42)
                  call_expression (664,7)-(664,41)
                    identifier: 'parser_stack_pop_uint8' (664,7)-(664,29)
                    argument_list (664,30)-(664,41)
                      (: '(' (664,30)-(664,31)
                      identifier: 'context_p' (664,31)-(664,40)
                      ): ')' (664,40)-(664,41)
                  ;: ';' (664,41)-(664,42)
                expression_statement (665,7)-(665,76)
                  call_expression (665,7)-(665,75)
                    identifier: 'parser_stack_pop' (665,7)-(665,23)
                    argument_list (665,24)-(665,75)
                      (: '(' (665,24)-(665,25)
                      identifier: 'context_p' (665,25)-(665,34)
                      ,: ',' (665,34)-(665,35)
                      null (665,36)-(665,40)
                        NULL: 'NULL' (665,36)-(665,40)
                      ,: ',' (665,40)-(665,41)
                      sizeof_expression (665,42)-(665,74)
                        sizeof: 'sizeof' (665,42)-(665,48)
                        parenthesized_expression (665,49)-(665,74)
                          (: '(' (665,49)-(665,50)
                          identifier: 'scanner_for_statement_t' (665,50)-(665,73)
                          ): ')' (665,73)-(665,74)
                      ): ')' (665,74)-(665,75)
                  ;: ';' (665,75)-(665,76)
                preproc_if (667,1)-(672,7)
                  #if: '#if' (667,1)-(667,4)
                  call_expression (667,5)-(667,27)
                    identifier: 'ENABLED' (667,5)-(667,12)
                    argument_list (667,13)-(667,27)
                      (: '(' (667,13)-(667,14)
                      identifier: 'JERRY_ES2015' (667,14)-(667,26)
                      ): ')' (667,26)-(667,27)
                  
: '
' (667,27)-(668,1)
                  if_statement (668,7)-(671,8)
                    if: 'if' (668,7)-(668,9)
                    parenthesized_expression (668,10)-(668,92)
                      (: '(' (668,10)-(668,11)
                      binary_expression (668,11)-(668,91)
                        binary_expression (668,11)-(668,48)
                          identifier: 'stack_top' (668,11)-(668,20)
                          ==: '==' (668,21)-(668,23)
                          identifier: 'SCAN_STACK_FOR_LET_START' (668,24)-(668,48)
                        ||: '||' (668,49)-(668,51)
                        binary_expression (668,52)-(668,91)
                          identifier: 'stack_top' (668,52)-(668,61)
                          ==: '==' (668,62)-(668,64)
                          identifier: 'SCAN_STACK_FOR_CONST_START' (668,65)-(668,91)
                      ): ')' (668,91)-(668,92)
                    compound_statement (669,7)-(671,8)
                      {: '{' (669,7)-(669,8)
                      expression_statement (670,9)-(670,71)
                        call_expression (670,9)-(670,70)
                          identifier: 'parser_stack_push_uint8' (670,9)-(670,32)
                          argument_list (670,33)-(670,70)
                            (: '(' (670,33)-(670,34)
                            identifier: 'context_p' (670,34)-(670,43)
                            ,: ',' (670,43)-(670,44)
                            identifier: 'SCAN_STACK_PRIVATE_BLOCK' (670,45)-(670,69)
                            ): ')' (670,69)-(670,70)
                        ;: ';' (670,70)-(670,71)
                      }: '}' (671,7)-(671,8)
                  #endif: '#endif' (672,1)-(672,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (672,8)-(672,36)
                expression_statement (674,7)-(674,54)
                  assignment_expression (674,7)-(674,53)
                    field_expression (674,7)-(674,31)
                      field_expression (674,7)-(674,22)
                        identifier: 'for_statement' (674,7)-(674,20)
                        .: '.' (674,20)-(674,21)
                        field_identifier: 'u' (674,21)-(674,22)
                      .: '.' (674,22)-(674,23)
                      field_identifier: 'source_p' (674,23)-(674,31)
                    =: '=' (674,32)-(674,33)
                    field_expression (674,34)-(674,53)
                      identifier: 'context_p' (674,34)-(674,43)
                      ->: '->' (674,43)-(674,45)
                      field_identifier: 'source_p' (674,45)-(674,53)
                  ;: ';' (674,53)-(674,54)
                expression_statement (675,7)-(675,87)
                  call_expression (675,7)-(675,86)
                    identifier: 'parser_stack_push' (675,7)-(675,24)
                    argument_list (675,25)-(675,86)
                      (: '(' (675,25)-(675,26)
                      identifier: 'context_p' (675,26)-(675,35)
                      ,: ',' (675,35)-(675,36)
                      pointer_expression (675,37)-(675,51)
                        &: '&' (675,37)-(675,38)
                        identifier: 'for_statement' (675,38)-(675,51)
                      ,: ',' (675,51)-(675,52)
                      sizeof_expression (675,53)-(675,85)
                        sizeof: 'sizeof' (675,53)-(675,59)
                        parenthesized_expression (675,60)-(675,85)
                          (: '(' (675,60)-(675,61)
                          identifier: 'scanner_for_statement_t' (675,61)-(675,84)
                          ): ')' (675,84)-(675,85)
                      ): ')' (675,85)-(675,86)
                  ;: ';' (675,86)-(675,87)
                expression_statement (676,7)-(676,69)
                  call_expression (676,7)-(676,68)
                    identifier: 'parser_stack_push_uint8' (676,7)-(676,30)
                    argument_list (676,31)-(676,68)
                      (: '(' (676,31)-(676,32)
                      identifier: 'context_p' (676,32)-(676,41)
                      ,: ',' (676,41)-(676,42)
                      identifier: 'SCAN_STACK_FOR_CONDITION' (676,43)-(676,67)
                      ): ')' (676,67)-(676,68)
                  ;: ';' (676,68)-(676,69)
                expression_statement (678,7)-(678,36)
                  call_expression (678,7)-(678,35)
                    identifier: 'lexer_next_token' (678,7)-(678,23)
                    argument_list (678,24)-(678,35)
                      (: '(' (678,24)-(678,25)
                      identifier: 'context_p' (678,25)-(678,34)
                      ): ')' (678,34)-(678,35)
                  ;: ';' (678,35)-(678,36)
                if_statement (680,7)-(684,8)
                  if: 'if' (680,7)-(680,9)
                  parenthesized_expression (680,10)-(680,52)
                    (: '(' (680,10)-(680,11)
                    binary_expression (680,11)-(680,51)
                      field_expression (680,11)-(680,32)
                        field_expression (680,11)-(680,27)
                          identifier: 'context_p' (680,11)-(680,20)
                          ->: '->' (680,20)-(680,22)
                          field_identifier: 'token' (680,22)-(680,27)
                        .: '.' (680,27)-(680,28)
                        field_identifier: 'type' (680,28)-(680,32)
                      !=: '!=' (680,33)-(680,35)
                      identifier: 'LEXER_SEMICOLON' (680,36)-(680,51)
                    ): ')' (680,51)-(680,52)
                  compound_statement (681,7)-(684,8)
                    {: '{' (681,7)-(681,8)
                    expression_statement (682,9)-(682,64)
                      assignment_expression (682,9)-(682,63)
                        field_expression (682,9)-(682,32)
                          identifier: 'scanner_context_p' (682,9)-(682,26)
                          ->: '->' (682,26)-(682,28)
                          field_identifier: 'mode' (682,28)-(682,32)
                        =: '=' (682,33)-(682,34)
                        identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (682,35)-(682,63)
                      ;: ';' (682,63)-(682,64)
                    return_statement (683,9)-(683,32)
                      return: 'return' (683,9)-(683,15)
                      identifier: 'SCAN_KEEP_TOKEN' (683,16)-(683,31)
                      ;: ';' (683,31)-(683,32)
                    }: '}' (684,7)-(684,8)
                expression_statement (686,7)-(686,30)
                  assignment_expression (686,7)-(686,29)
                    identifier: 'type' (686,7)-(686,11)
                    =: '=' (686,12)-(686,13)
                    identifier: 'LEXER_SEMICOLON' (686,14)-(686,29)
                  ;: ';' (686,29)-(686,30)
                comment: '/* FALLTHRU */' (687,7)-(687,21)
                }: '}' (688,5)-(688,6)
            case_statement (689,5)-(725,6)
              case: 'case' (689,5)-(689,9)
              identifier: 'SCAN_STACK_FOR_CONDITION' (689,10)-(689,34)
              :: ':' (689,34)-(689,35)
              compound_statement (690,5)-(725,6)
                {: '{' (690,5)-(690,6)
                if_statement (691,7)-(694,8)
                  if: 'if' (691,7)-(691,9)
                  parenthesized_expression (691,10)-(691,35)
                    (: '(' (691,10)-(691,11)
                    binary_expression (691,11)-(691,34)
                      identifier: 'type' (691,11)-(691,15)
                      !=: '!=' (691,16)-(691,18)
                      identifier: 'LEXER_SEMICOLON' (691,19)-(691,34)
                    ): ')' (691,34)-(691,35)
                  compound_statement (692,7)-(694,8)
                    {: '{' (692,7)-(692,8)
                    break_statement (693,9)-(693,15)
                      break: 'break' (693,9)-(693,14)
                      ;: ';' (693,14)-(693,15)
                    }: '}' (694,7)-(694,8)
                declaration (696,7)-(696,45)
                  type_identifier: 'scanner_for_statement_t' (696,7)-(696,30)
                  identifier: 'for_statement' (696,31)-(696,44)
                  ;: ';' (696,44)-(696,45)
                expression_statement (698,7)-(698,42)
                  call_expression (698,7)-(698,41)
                    identifier: 'parser_stack_pop_uint8' (698,7)-(698,29)
                    argument_list (698,30)-(698,41)
                      (: '(' (698,30)-(698,31)
                      identifier: 'context_p' (698,31)-(698,40)
                      ): ')' (698,40)-(698,41)
                  ;: ';' (698,41)-(698,42)
                expression_statement (699,7)-(699,86)
                  call_expression (699,7)-(699,85)
                    identifier: 'parser_stack_pop' (699,7)-(699,23)
                    argument_list (699,24)-(699,85)
                      (: '(' (699,24)-(699,25)
                      identifier: 'context_p' (699,25)-(699,34)
                      ,: ',' (699,34)-(699,35)
                      pointer_expression (699,36)-(699,50)
                        &: '&' (699,36)-(699,37)
                        identifier: 'for_statement' (699,37)-(699,50)
                      ,: ',' (699,50)-(699,51)
                      sizeof_expression (699,52)-(699,84)
                        sizeof: 'sizeof' (699,52)-(699,58)
                        parenthesized_expression (699,59)-(699,84)
                          (: '(' (699,59)-(699,60)
                          identifier: 'scanner_for_statement_t' (699,60)-(699,83)
                          ): ')' (699,83)-(699,84)
                      ): ')' (699,84)-(699,85)
                  ;: ';' (699,85)-(699,86)
                declaration (701,7)-(701,38)
                  type_identifier: 'scanner_for_info_t' (701,7)-(701,25)
                  pointer_declarator (701,26)-(701,37)
                    *: '*' (701,26)-(701,27)
                    identifier: 'for_info_p' (701,27)-(701,37)
                  ;: ';' (701,37)-(701,38)
                expression_statement (702,7)-(704,93)
                  assignment_expression (702,7)-(704,92)
                    identifier: 'for_info_p' (702,7)-(702,17)
                    =: '=' (702,18)-(702,19)
                    cast_expression (702,20)-(704,92)
                      (: '(' (702,20)-(702,21)
                      type_descriptor (702,21)-(702,41)
                        type_identifier: 'scanner_for_info_t' (702,21)-(702,39)
                        abstract_pointer_declarator (702,40)-(702,41)
                          *: '*' (702,40)-(702,41)
                      ): ')' (702,41)-(702,42)
                      call_expression (702,43)-(704,92)
                        identifier: 'scanner_insert_info' (702,43)-(702,62)
                        argument_list (702,63)-(704,92)
                          (: '(' (702,63)-(702,64)
                          identifier: 'context_p' (702,64)-(702,73)
                          ,: ',' (702,73)-(702,74)
                          field_expression (703,64)-(703,88)
                            field_expression (703,64)-(703,79)
                              identifier: 'for_statement' (703,64)-(703,77)
                              .: '.' (703,77)-(703,78)
                              field_identifier: 'u' (703,78)-(703,79)
                            .: '.' (703,79)-(703,80)
                            field_identifier: 'source_p' (703,80)-(703,88)
                          ,: ',' (703,88)-(703,89)
                          sizeof_expression (704,64)-(704,91)
                            sizeof: 'sizeof' (704,64)-(704,70)
                            parenthesized_expression (704,71)-(704,91)
                              (: '(' (704,71)-(704,72)
                              identifier: 'scanner_for_info_t' (704,72)-(704,90)
                              ): ')' (704,90)-(704,91)
                          ): ')' (704,91)-(704,92)
                  ;: ';' (704,92)-(704,93)
                expression_statement (705,7)-(705,48)
                  assignment_expression (705,7)-(705,47)
                    field_expression (705,7)-(705,28)
                      field_expression (705,7)-(705,23)
                        identifier: 'for_info_p' (705,7)-(705,17)
                        ->: '->' (705,17)-(705,19)
                        field_identifier: 'info' (705,19)-(705,23)
                      .: '.' (705,23)-(705,24)
                      field_identifier: 'type' (705,24)-(705,28)
                    =: '=' (705,29)-(705,30)
                    identifier: 'SCANNER_TYPE_FOR' (705,31)-(705,47)
                  ;: ';' (705,47)-(705,48)
                expression_statement (707,7)-(707,74)
                  call_expression (707,7)-(707,73)
                    identifier: 'scanner_get_location' (707,7)-(707,27)
                    argument_list (707,28)-(707,73)
                      (: '(' (707,28)-(707,29)
                      pointer_expression (707,29)-(707,61)
                        &: '&' (707,29)-(707,30)
                        field_expression (707,30)-(707,61)
                          identifier: 'for_info_p' (707,30)-(707,40)
                          ->: '->' (707,40)-(707,42)
                          field_identifier: 'expression_location' (707,42)-(707,61)
                      ,: ',' (707,61)-(707,62)
                      identifier: 'context_p' (707,63)-(707,72)
                      ): ')' (707,72)-(707,73)
                  ;: ';' (707,73)-(707,74)
                expression_statement (708,7)-(708,48)
                  assignment_expression (708,7)-(708,47)
                    field_expression (708,7)-(708,40)
                      field_expression (708,7)-(708,31)
                        identifier: 'for_info_p' (708,7)-(708,17)
                        ->: '->' (708,17)-(708,19)
                        field_identifier: 'end_location' (708,19)-(708,31)
                      .: '.' (708,31)-(708,32)
                      field_identifier: 'source_p' (708,32)-(708,40)
                    =: '=' (708,41)-(708,42)
                    null (708,43)-(708,47)
                      NULL: 'NULL' (708,43)-(708,47)
                  ;: ';' (708,47)-(708,48)
                expression_statement (710,7)-(710,47)
                  assignment_expression (710,7)-(710,46)
                    field_expression (710,7)-(710,33)
                      field_expression (710,7)-(710,22)
                        identifier: 'for_statement' (710,7)-(710,20)
                        .: '.' (710,20)-(710,21)
                        field_identifier: 'u' (710,21)-(710,22)
                      .: '.' (710,22)-(710,23)
                      field_identifier: 'for_info_p' (710,23)-(710,33)
                    =: '=' (710,34)-(710,35)
                    identifier: 'for_info_p' (710,36)-(710,46)
                  ;: ';' (710,46)-(710,47)
                expression_statement (712,7)-(712,87)
                  call_expression (712,7)-(712,86)
                    identifier: 'parser_stack_push' (712,7)-(712,24)
                    argument_list (712,25)-(712,86)
                      (: '(' (712,25)-(712,26)
                      identifier: 'context_p' (712,26)-(712,35)
                      ,: ',' (712,35)-(712,36)
                      pointer_expression (712,37)-(712,51)
                        &: '&' (712,37)-(712,38)
                        identifier: 'for_statement' (712,38)-(712,51)
                      ,: ',' (712,51)-(712,52)
                      sizeof_expression (712,53)-(712,85)
                        sizeof: 'sizeof' (712,53)-(712,59)
                        parenthesized_expression (712,60)-(712,85)
                          (: '(' (712,60)-(712,61)
                          identifier: 'scanner_for_statement_t' (712,61)-(712,84)
                          ): ')' (712,84)-(712,85)
                      ): ')' (712,85)-(712,86)
                  ;: ';' (712,86)-(712,87)
                expression_statement (713,7)-(713,70)
                  call_expression (713,7)-(713,69)
                    identifier: 'parser_stack_push_uint8' (713,7)-(713,30)
                    argument_list (713,31)-(713,69)
                      (: '(' (713,31)-(713,32)
                      identifier: 'context_p' (713,32)-(713,41)
                      ,: ',' (713,41)-(713,42)
                      identifier: 'SCAN_STACK_FOR_EXPRESSION' (713,43)-(713,68)
                      ): ')' (713,68)-(713,69)
                  ;: ';' (713,69)-(713,70)
                expression_statement (715,7)-(715,36)
                  call_expression (715,7)-(715,35)
                    identifier: 'lexer_next_token' (715,7)-(715,23)
                    argument_list (715,24)-(715,35)
                      (: '(' (715,24)-(715,25)
                      identifier: 'context_p' (715,25)-(715,34)
                      ): ')' (715,34)-(715,35)
                  ;: ';' (715,35)-(715,36)
                if_statement (717,7)-(721,8)
                  if: 'if' (717,7)-(717,9)
                  parenthesized_expression (717,10)-(717,54)
                    (: '(' (717,10)-(717,11)
                    binary_expression (717,11)-(717,53)
                      field_expression (717,11)-(717,32)
                        field_expression (717,11)-(717,27)
                          identifier: 'context_p' (717,11)-(717,20)
                          ->: '->' (717,20)-(717,22)
                          field_identifier: 'token' (717,22)-(717,27)
                        .: '.' (717,27)-(717,28)
                        field_identifier: 'type' (717,28)-(717,32)
                      !=: '!=' (717,33)-(717,35)
                      identifier: 'LEXER_RIGHT_PAREN' (717,36)-(717,53)
                    ): ')' (717,53)-(717,54)
                  compound_statement (718,7)-(721,8)
                    {: '{' (718,7)-(718,8)
                    expression_statement (719,9)-(719,64)
                      assignment_expression (719,9)-(719,63)
                        field_expression (719,9)-(719,32)
                          identifier: 'scanner_context_p' (719,9)-(719,26)
                          ->: '->' (719,26)-(719,28)
                          field_identifier: 'mode' (719,28)-(719,32)
                        =: '=' (719,33)-(719,34)
                        identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (719,35)-(719,63)
                      ;: ';' (719,63)-(719,64)
                    return_statement (720,9)-(720,32)
                      return: 'return' (720,9)-(720,15)
                      identifier: 'SCAN_KEEP_TOKEN' (720,16)-(720,31)
                      ;: ';' (720,31)-(720,32)
                    }: '}' (721,7)-(721,8)
                expression_statement (723,7)-(723,32)
                  assignment_expression (723,7)-(723,31)
                    identifier: 'type' (723,7)-(723,11)
                    =: '=' (723,12)-(723,13)
                    identifier: 'LEXER_RIGHT_PAREN' (723,14)-(723,31)
                  ;: ';' (723,31)-(723,32)
                comment: '/* FALLTHRU */' (724,7)-(724,21)
                }: '}' (725,5)-(725,6)
            case_statement (726,5)-(742,6)
              case: 'case' (726,5)-(726,9)
              identifier: 'SCAN_STACK_FOR_EXPRESSION' (726,10)-(726,35)
              :: ':' (726,35)-(726,36)
              compound_statement (727,5)-(742,6)
                {: '{' (727,5)-(727,6)
                if_statement (728,7)-(731,8)
                  if: 'if' (728,7)-(728,9)
                  parenthesized_expression (728,10)-(728,37)
                    (: '(' (728,10)-(728,11)
                    binary_expression (728,11)-(728,36)
                      identifier: 'type' (728,11)-(728,15)
                      !=: '!=' (728,16)-(728,18)
                      identifier: 'LEXER_RIGHT_PAREN' (728,19)-(728,36)
                    ): ')' (728,36)-(728,37)
                  compound_statement (729,7)-(731,8)
                    {: '{' (729,7)-(729,8)
                    break_statement (730,9)-(730,15)
                      break: 'break' (730,9)-(730,14)
                      ;: ';' (730,14)-(730,15)
                    }: '}' (731,7)-(731,8)
                declaration (733,7)-(733,45)
                  type_identifier: 'scanner_for_statement_t' (733,7)-(733,30)
                  identifier: 'for_statement' (733,31)-(733,44)
                  ;: ';' (733,44)-(733,45)
                expression_statement (735,7)-(735,42)
                  call_expression (735,7)-(735,41)
                    identifier: 'parser_stack_pop_uint8' (735,7)-(735,29)
                    argument_list (735,30)-(735,41)
                      (: '(' (735,30)-(735,31)
                      identifier: 'context_p' (735,31)-(735,40)
                      ): ')' (735,40)-(735,41)
                  ;: ';' (735,41)-(735,42)
                expression_statement (736,7)-(736,86)
                  call_expression (736,7)-(736,85)
                    identifier: 'parser_stack_pop' (736,7)-(736,23)
                    argument_list (736,24)-(736,85)
                      (: '(' (736,24)-(736,25)
                      identifier: 'context_p' (736,25)-(736,34)
                      ,: ',' (736,34)-(736,35)
                      pointer_expression (736,36)-(736,50)
                        &: '&' (736,36)-(736,37)
                        identifier: 'for_statement' (736,37)-(736,50)
                      ,: ',' (736,50)-(736,51)
                      sizeof_expression (736,52)-(736,84)
                        sizeof: 'sizeof' (736,52)-(736,58)
                        parenthesized_expression (736,59)-(736,84)
                          (: '(' (736,59)-(736,60)
                          identifier: 'scanner_for_statement_t' (736,60)-(736,83)
                          ): ')' (736,83)-(736,84)
                      ): ')' (736,84)-(736,85)
                  ;: ';' (736,85)-(736,86)
                expression_statement (738,7)-(738,83)
                  call_expression (738,7)-(738,82)
                    identifier: 'scanner_get_location' (738,7)-(738,27)
                    argument_list (738,28)-(738,82)
                      (: '(' (738,28)-(738,29)
                      pointer_expression (738,29)-(738,70)
                        &: '&' (738,29)-(738,30)
                        field_expression (738,30)-(738,70)
                          field_expression (738,30)-(738,56)
                            field_expression (738,30)-(738,45)
                              identifier: 'for_statement' (738,30)-(738,43)
                              .: '.' (738,43)-(738,44)
                              field_identifier: 'u' (738,44)-(738,45)
                            .: '.' (738,45)-(738,46)
                            field_identifier: 'for_info_p' (738,46)-(738,56)
                          ->: '->' (738,56)-(738,58)
                          field_identifier: 'end_location' (738,58)-(738,70)
                      ,: ',' (738,70)-(738,71)
                      identifier: 'context_p' (738,72)-(738,81)
                      ): ')' (738,81)-(738,82)
                  ;: ';' (738,82)-(738,83)
                expression_statement (740,7)-(740,53)
                  assignment_expression (740,7)-(740,52)
                    field_expression (740,7)-(740,30)
                      identifier: 'scanner_context_p' (740,7)-(740,24)
                      ->: '->' (740,24)-(740,26)
                      field_identifier: 'mode' (740,26)-(740,30)
                    =: '=' (740,31)-(740,32)
                    identifier: 'SCAN_MODE_STATEMENT' (740,33)-(740,52)
                  ;: ';' (740,52)-(740,53)
                return_statement (741,7)-(741,30)
                  return: 'return' (741,7)-(741,13)
                  identifier: 'SCAN_NEXT_TOKEN' (741,14)-(741,29)
                  ;: ';' (741,29)-(741,30)
                }: '}' (742,5)-(742,6)
            case_statement (743,5)-(788,6)
              case: 'case' (743,5)-(743,9)
              identifier: 'SCAN_STACK_SWITCH_EXPRESSION' (743,10)-(743,38)
              :: ':' (743,38)-(743,39)
              compound_statement (744,5)-(788,6)
                {: '{' (744,5)-(744,6)
                if_statement (745,7)-(748,8)
                  if: 'if' (745,7)-(745,9)
                  parenthesized_expression (745,10)-(745,37)
                    (: '(' (745,10)-(745,11)
                    binary_expression (745,11)-(745,36)
                      identifier: 'type' (745,11)-(745,15)
                      !=: '!=' (745,16)-(745,18)
                      identifier: 'LEXER_RIGHT_PAREN' (745,19)-(745,36)
                    ): ')' (745,36)-(745,37)
                  compound_statement (746,7)-(748,8)
                    {: '{' (746,7)-(746,8)
                    break_statement (747,9)-(747,15)
                      break: 'break' (747,9)-(747,14)
                      ;: ';' (747,14)-(747,15)
                    }: '}' (748,7)-(748,8)
                expression_statement (750,7)-(750,36)
                  call_expression (750,7)-(750,35)
                    identifier: 'lexer_next_token' (750,7)-(750,23)
                    argument_list (750,24)-(750,35)
                      (: '(' (750,24)-(750,25)
                      identifier: 'context_p' (750,25)-(750,34)
                      ): ')' (750,34)-(750,35)
                  ;: ';' (750,35)-(750,36)
                if_statement (752,7)-(755,8)
                  if: 'if' (752,7)-(752,9)
                  parenthesized_expression (752,10)-(752,53)
                    (: '(' (752,10)-(752,11)
                    binary_expression (752,11)-(752,52)
                      field_expression (752,11)-(752,32)
                        field_expression (752,11)-(752,27)
                          identifier: 'context_p' (752,11)-(752,20)
                          ->: '->' (752,20)-(752,22)
                          field_identifier: 'token' (752,22)-(752,27)
                        .: '.' (752,27)-(752,28)
                        field_identifier: 'type' (752,28)-(752,32)
                      !=: '!=' (752,33)-(752,35)
                      identifier: 'LEXER_LEFT_BRACE' (752,36)-(752,52)
                    ): ')' (752,52)-(752,53)
                  compound_statement (753,7)-(755,8)
                    {: '{' (753,7)-(753,8)
                    break_statement (754,9)-(754,15)
                      break: 'break' (754,9)-(754,14)
                      ;: ';' (754,14)-(754,15)
                    }: '}' (755,7)-(755,8)
                preproc_if (757,1)-(761,7)
                  #if: '#if' (757,1)-(757,4)
                  call_expression (757,5)-(757,27)
                    identifier: 'ENABLED' (757,5)-(757,12)
                    argument_list (757,13)-(757,27)
                      (: '(' (757,13)-(757,14)
                      identifier: 'JERRY_ES2015' (757,14)-(757,26)
                      ): ')' (757,26)-(757,27)
                  
: '
' (757,27)-(758,1)
                  declaration (758,7)-(758,46)
                    type_identifier: 'scanner_literal_pool_t' (758,7)-(758,29)
                    pointer_declarator (758,30)-(758,45)
                      *: '*' (758,30)-(758,31)
                      identifier: 'literal_pool_p' (758,31)-(758,45)
                    ;: ';' (758,45)-(758,46)
                  expression_statement (759,7)-(759,109)
                    assignment_expression (759,7)-(759,108)
                      identifier: 'literal_pool_p' (759,7)-(759,21)
                      =: '=' (759,22)-(759,23)
                      call_expression (759,24)-(759,108)
                        identifier: 'scanner_push_literal_pool' (759,24)-(759,49)
                        argument_list (759,50)-(759,108)
                          (: '(' (759,50)-(759,51)
                          identifier: 'context_p' (759,51)-(759,60)
                          ,: ',' (759,60)-(759,61)
                          identifier: 'scanner_context_p' (759,62)-(759,79)
                          ,: ',' (759,79)-(759,80)
                          identifier: 'SCANNER_LITERAL_POOL_BLOCK' (759,81)-(759,107)
                          ): ')' (759,107)-(759,108)
                    ;: ';' (759,108)-(759,109)
                  expression_statement (760,7)-(760,58)
                    assignment_expression (760,7)-(760,57)
                      field_expression (760,7)-(760,31)
                        identifier: 'literal_pool_p' (760,7)-(760,21)
                        ->: '->' (760,21)-(760,23)
                        field_identifier: 'source_p' (760,23)-(760,31)
                      =: '=' (760,32)-(760,33)
                      binary_expression (760,34)-(760,57)
                        field_expression (760,34)-(760,53)
                          identifier: 'context_p' (760,34)-(760,43)
                          ->: '->' (760,43)-(760,45)
                          field_identifier: 'source_p' (760,45)-(760,53)
                        -: '-' (760,54)-(760,55)
                        number_literal: '1' (760,56)-(760,57)
                    ;: ';' (760,57)-(760,58)
                  #endif: '#endif' (761,1)-(761,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (761,8)-(761,36)
                expression_statement (763,7)-(763,42)
                  call_expression (763,7)-(763,41)
                    identifier: 'parser_stack_pop_uint8' (763,7)-(763,29)
                    argument_list (763,30)-(763,41)
                      (: '(' (763,30)-(763,31)
                      identifier: 'context_p' (763,31)-(763,40)
                      ): ')' (763,40)-(763,41)
                  ;: ';' (763,41)-(763,42)
                declaration (765,7)-(765,96)
                  type_identifier: 'scanner_switch_statement_t' (765,7)-(765,33)
                  init_declarator (765,34)-(765,95)
                    identifier: 'switch_statement' (765,34)-(765,50)
                    =: '=' (765,51)-(765,52)
                    field_expression (765,53)-(765,95)
                      identifier: 'scanner_context_p' (765,53)-(765,70)
                      ->: '->' (765,70)-(765,72)
                      field_identifier: 'active_switch_statement' (765,72)-(765,95)
                  ;: ';' (765,95)-(765,96)
                expression_statement (766,7)-(766,93)
                  call_expression (766,7)-(766,92)
                    identifier: 'parser_stack_push' (766,7)-(766,24)
                    argument_list (766,25)-(766,92)
                      (: '(' (766,25)-(766,26)
                      identifier: 'context_p' (766,26)-(766,35)
                      ,: ',' (766,35)-(766,36)
                      pointer_expression (766,37)-(766,54)
                        &: '&' (766,37)-(766,38)
                        identifier: 'switch_statement' (766,38)-(766,54)
                      ,: ',' (766,54)-(766,55)
                      sizeof_expression (766,56)-(766,91)
                        sizeof: 'sizeof' (766,56)-(766,62)
                        parenthesized_expression (766,63)-(766,91)
                          (: '(' (766,63)-(766,64)
                          identifier: 'scanner_switch_statement_t' (766,64)-(766,90)
                          ): ')' (766,90)-(766,91)
                      ): ')' (766,91)-(766,92)
                  ;: ';' (766,92)-(766,93)
                expression_statement (767,7)-(767,68)
                  call_expression (767,7)-(767,67)
                    identifier: 'parser_stack_push_uint8' (767,7)-(767,30)
                    argument_list (767,31)-(767,67)
                      (: '(' (767,31)-(767,32)
                      identifier: 'context_p' (767,32)-(767,41)
                      ,: ',' (767,41)-(767,42)
                      identifier: 'SCAN_STACK_SWITCH_BLOCK' (767,43)-(767,66)
                      ): ')' (767,66)-(767,67)
                  ;: ';' (767,67)-(767,68)
                declaration (769,7)-(769,44)
                  type_identifier: 'scanner_switch_info_t' (769,7)-(769,28)
                  pointer_declarator (769,29)-(769,43)
                    *: '*' (769,29)-(769,30)
                    identifier: 'switch_info_p' (769,30)-(769,43)
                  ;: ';' (769,43)-(769,44)
                expression_statement (770,7)-(772,102)
                  assignment_expression (770,7)-(772,101)
                    identifier: 'switch_info_p' (770,7)-(770,20)
                    =: '=' (770,21)-(770,22)
                    cast_expression (770,23)-(772,101)
                      (: '(' (770,23)-(770,24)
                      type_descriptor (770,24)-(770,47)
                        type_identifier: 'scanner_switch_info_t' (770,24)-(770,45)
                        abstract_pointer_declarator (770,46)-(770,47)
                          *: '*' (770,46)-(770,47)
                      ): ')' (770,47)-(770,48)
                      call_expression (770,49)-(772,101)
                        identifier: 'scanner_insert_info' (770,49)-(770,68)
                        argument_list (770,69)-(772,101)
                          (: '(' (770,69)-(770,70)
                          identifier: 'context_p' (770,70)-(770,79)
                          ,: ',' (770,79)-(770,80)
                          field_expression (771,70)-(771,89)
                            identifier: 'context_p' (771,70)-(771,79)
                            ->: '->' (771,79)-(771,81)
                            field_identifier: 'source_p' (771,81)-(771,89)
                          ,: ',' (771,89)-(771,90)
                          sizeof_expression (772,70)-(772,100)
                            sizeof: 'sizeof' (772,70)-(772,76)
                            parenthesized_expression (772,77)-(772,100)
                              (: '(' (772,77)-(772,78)
                              identifier: 'scanner_switch_info_t' (772,78)-(772,99)
                              ): ')' (772,99)-(772,100)
                          ): ')' (772,100)-(772,101)
                  ;: ';' (772,101)-(772,102)
                expression_statement (773,7)-(773,54)
                  assignment_expression (773,7)-(773,53)
                    field_expression (773,7)-(773,31)
                      field_expression (773,7)-(773,26)
                        identifier: 'switch_info_p' (773,7)-(773,20)
                        ->: '->' (773,20)-(773,22)
                        field_identifier: 'info' (773,22)-(773,26)
                      .: '.' (773,26)-(773,27)
                      field_identifier: 'type' (773,27)-(773,31)
                    =: '=' (773,32)-(773,33)
                    identifier: 'SCANNER_TYPE_SWITCH' (773,34)-(773,53)
                  ;: ';' (773,53)-(773,54)
                expression_statement (774,7)-(774,36)
                  assignment_expression (774,7)-(774,35)
                    field_expression (774,7)-(774,28)
                      identifier: 'switch_info_p' (774,7)-(774,20)
                      ->: '->' (774,20)-(774,22)
                      field_identifier: 'case_p' (774,22)-(774,28)
                    =: '=' (774,29)-(774,30)
                    null (774,31)-(774,35)
                      NULL: 'NULL' (774,31)-(774,35)
                  ;: ';' (774,35)-(774,36)
                expression_statement (775,7)-(775,87)
                  assignment_expression (775,7)-(775,86)
                    field_expression (775,7)-(775,61)
                      field_expression (775,7)-(775,49)
                        identifier: 'scanner_context_p' (775,7)-(775,24)
                        ->: '->' (775,24)-(775,26)
                        field_identifier: 'active_switch_statement' (775,26)-(775,49)
                      .: '.' (775,49)-(775,50)
                      field_identifier: 'last_case_p' (775,50)-(775,61)
                    =: '=' (775,62)-(775,63)
                    pointer_expression (775,64)-(775,86)
                      &: '&' (775,64)-(775,65)
                      field_expression (775,65)-(775,86)
                        identifier: 'switch_info_p' (775,65)-(775,78)
                        ->: '->' (775,78)-(775,80)
                        field_identifier: 'case_p' (775,80)-(775,86)
                  ;: ';' (775,86)-(775,87)
                expression_statement (777,7)-(777,36)
                  call_expression (777,7)-(777,35)
                    identifier: 'lexer_next_token' (777,7)-(777,23)
                    argument_list (777,24)-(777,35)
                      (: '(' (777,24)-(777,25)
                      identifier: 'context_p' (777,25)-(777,34)
                      ): ')' (777,34)-(777,35)
                  ;: ';' (777,35)-(777,36)
                if_statement (779,7)-(784,8)
                  if: 'if' (779,7)-(779,9)
                  parenthesized_expression (779,10)-(781,58)
                    (: '(' (779,10)-(779,11)
                    binary_expression (779,11)-(781,57)
                      binary_expression (779,11)-(780,54)
                        binary_expression (779,11)-(779,53)
                          field_expression (779,11)-(779,32)
                            field_expression (779,11)-(779,27)
                              identifier: 'context_p' (779,11)-(779,20)
                              ->: '->' (779,20)-(779,22)
                              field_identifier: 'token' (779,22)-(779,27)
                            .: '.' (779,27)-(779,28)
                            field_identifier: 'type' (779,28)-(779,32)
                          !=: '!=' (779,33)-(779,35)
                          identifier: 'LEXER_RIGHT_BRACE' (779,36)-(779,53)
                        &&: '&&' (780,11)-(780,13)
                        binary_expression (780,14)-(780,54)
                          field_expression (780,14)-(780,35)
                            field_expression (780,14)-(780,30)
                              identifier: 'context_p' (780,14)-(780,23)
                              ->: '->' (780,23)-(780,25)
                              field_identifier: 'token' (780,25)-(780,30)
                            .: '.' (780,30)-(780,31)
                            field_identifier: 'type' (780,31)-(780,35)
                          !=: '!=' (780,36)-(780,38)
                          identifier: 'LEXER_KEYW_CASE' (780,39)-(780,54)
                      &&: '&&' (781,11)-(781,13)
                      binary_expression (781,14)-(781,57)
                        field_expression (781,14)-(781,35)
                          field_expression (781,14)-(781,30)
                            identifier: 'context_p' (781,14)-(781,23)
                            ->: '->' (781,23)-(781,25)
                            field_identifier: 'token' (781,25)-(781,30)
                          .: '.' (781,30)-(781,31)
                          field_identifier: 'type' (781,31)-(781,35)
                        !=: '!=' (781,36)-(781,38)
                        identifier: 'LEXER_KEYW_DEFAULT' (781,39)-(781,57)
                    ): ')' (781,57)-(781,58)
                  compound_statement (782,7)-(784,8)
                    {: '{' (782,7)-(782,8)
                    break_statement (783,9)-(783,15)
                      break: 'break' (783,9)-(783,14)
                      ;: ';' (783,14)-(783,15)
                    }: '}' (784,7)-(784,8)
                expression_statement (786,7)-(786,67)
                  assignment_expression (786,7)-(786,66)
                    field_expression (786,7)-(786,30)
                      identifier: 'scanner_context_p' (786,7)-(786,24)
                      ->: '->' (786,24)-(786,26)
                      field_identifier: 'mode' (786,26)-(786,30)
                    =: '=' (786,31)-(786,32)
                    identifier: 'SCAN_MODE_STATEMENT_OR_TERMINATOR' (786,33)-(786,66)
                  ;: ';' (786,66)-(786,67)
                return_statement (787,7)-(787,30)
                  return: 'return' (787,7)-(787,13)
                  identifier: 'SCAN_KEEP_TOKEN' (787,14)-(787,29)
                  ;: ';' (787,29)-(787,30)
                }: '}' (788,5)-(788,6)
            case_statement (789,5)-(811,6)
              case: 'case' (789,5)-(789,9)
              identifier: 'SCAN_STACK_CASE_STATEMENT' (789,10)-(789,35)
              :: ':' (789,35)-(789,36)
              compound_statement (790,5)-(811,6)
                {: '{' (790,5)-(790,6)
                if_statement (791,7)-(794,8)
                  if: 'if' (791,7)-(791,9)
                  parenthesized_expression (791,10)-(791,31)
                    (: '(' (791,10)-(791,11)
                    binary_expression (791,11)-(791,30)
                      identifier: 'type' (791,11)-(791,15)
                      !=: '!=' (791,16)-(791,18)
                      identifier: 'LEXER_COLON' (791,19)-(791,30)
                    ): ')' (791,30)-(791,31)
                  compound_statement (792,7)-(794,8)
                    {: '{' (792,7)-(792,8)
                    break_statement (793,9)-(793,15)
                      break: 'break' (793,9)-(793,14)
                      ;: ';' (793,14)-(793,15)
                    }: '}' (794,7)-(794,8)
                declaration (796,7)-(796,43)
                  type_identifier: 'scanner_source_start_t' (796,7)-(796,29)
                  identifier: 'source_start' (796,30)-(796,42)
                  ;: ';' (796,42)-(796,43)
                expression_statement (798,7)-(798,42)
                  call_expression (798,7)-(798,41)
                    identifier: 'parser_stack_pop_uint8' (798,7)-(798,29)
                    argument_list (798,30)-(798,41)
                      (: '(' (798,30)-(798,31)
                      identifier: 'context_p' (798,31)-(798,40)
                      ): ')' (798,40)-(798,41)
                  ;: ';' (798,41)-(798,42)
                expression_statement (799,7)-(799,84)
                  call_expression (799,7)-(799,83)
                    identifier: 'parser_stack_pop' (799,7)-(799,23)
                    argument_list (799,24)-(799,83)
                      (: '(' (799,24)-(799,25)
                      identifier: 'context_p' (799,25)-(799,34)
                      ,: ',' (799,34)-(799,35)
                      pointer_expression (799,36)-(799,49)
                        &: '&' (799,36)-(799,37)
                        identifier: 'source_start' (799,37)-(799,49)
                      ,: ',' (799,49)-(799,50)
                      sizeof_expression (799,51)-(799,82)
                        sizeof: 'sizeof' (799,51)-(799,57)
                        parenthesized_expression (799,58)-(799,82)
                          (: '(' (799,58)-(799,59)
                          identifier: 'scanner_source_start_t' (799,59)-(799,81)
                          ): ')' (799,81)-(799,82)
                      ): ')' (799,82)-(799,83)
                  ;: ';' (799,83)-(799,84)
                declaration (801,7)-(801,48)
                  type_identifier: 'scanner_location_info_t' (801,7)-(801,30)
                  pointer_declarator (801,31)-(801,47)
                    *: '*' (801,31)-(801,32)
                    identifier: 'location_info_p' (801,32)-(801,47)
                  ;: ';' (801,47)-(801,48)
                expression_statement (802,7)-(804,108)
                  assignment_expression (802,7)-(804,107)
                    identifier: 'location_info_p' (802,7)-(802,22)
                    =: '=' (802,23)-(802,24)
                    cast_expression (802,25)-(804,107)
                      (: '(' (802,25)-(802,26)
                      type_descriptor (802,26)-(802,51)
                        type_identifier: 'scanner_location_info_t' (802,26)-(802,49)
                        abstract_pointer_declarator (802,50)-(802,51)
                          *: '*' (802,50)-(802,51)
                      ): ')' (802,51)-(802,52)
                      call_expression (802,53)-(804,107)
                        identifier: 'scanner_insert_info' (802,53)-(802,72)
                        argument_list (802,73)-(804,107)
                          (: '(' (802,73)-(802,74)
                          identifier: 'context_p' (802,74)-(802,83)
                          ,: ',' (802,83)-(802,84)
                          field_expression (803,74)-(803,95)
                            identifier: 'source_start' (803,74)-(803,86)
                            .: '.' (803,86)-(803,87)
                            field_identifier: 'source_p' (803,87)-(803,95)
                          ,: ',' (803,95)-(803,96)
                          sizeof_expression (804,74)-(804,106)
                            sizeof: 'sizeof' (804,74)-(804,80)
                            parenthesized_expression (804,81)-(804,106)
                              (: '(' (804,81)-(804,82)
                              identifier: 'scanner_location_info_t' (804,82)-(804,105)
                              ): ')' (804,105)-(804,106)
                          ): ')' (804,106)-(804,107)
                  ;: ';' (804,107)-(804,108)
                expression_statement (805,7)-(805,54)
                  assignment_expression (805,7)-(805,53)
                    field_expression (805,7)-(805,33)
                      field_expression (805,7)-(805,28)
                        identifier: 'location_info_p' (805,7)-(805,22)
                        ->: '->' (805,22)-(805,24)
                        field_identifier: 'info' (805,24)-(805,28)
                      .: '.' (805,28)-(805,29)
                      field_identifier: 'type' (805,29)-(805,33)
                    =: '=' (805,34)-(805,35)
                    identifier: 'SCANNER_TYPE_CASE' (805,36)-(805,53)
                  ;: ';' (805,53)-(805,54)
                expression_statement (807,7)-(807,68)
                  call_expression (807,7)-(807,67)
                    identifier: 'scanner_get_location' (807,7)-(807,27)
                    argument_list (807,28)-(807,67)
                      (: '(' (807,28)-(807,29)
                      pointer_expression (807,29)-(807,55)
                        &: '&' (807,29)-(807,30)
                        field_expression (807,30)-(807,55)
                          identifier: 'location_info_p' (807,30)-(807,45)
                          ->: '->' (807,45)-(807,47)
                          field_identifier: 'location' (807,47)-(807,55)
                      ,: ',' (807,55)-(807,56)
                      identifier: 'context_p' (807,57)-(807,66)
                      ): ')' (807,66)-(807,67)
                  ;: ';' (807,67)-(807,68)
                expression_statement (809,7)-(809,67)
                  assignment_expression (809,7)-(809,66)
                    field_expression (809,7)-(809,30)
                      identifier: 'scanner_context_p' (809,7)-(809,24)
                      ->: '->' (809,24)-(809,26)
                      field_identifier: 'mode' (809,26)-(809,30)
                    =: '=' (809,31)-(809,32)
                    identifier: 'SCAN_MODE_STATEMENT_OR_TERMINATOR' (809,33)-(809,66)
                  ;: ';' (809,66)-(809,67)
                return_statement (810,7)-(810,30)
                  return: 'return' (810,7)-(810,13)
                  identifier: 'SCAN_NEXT_TOKEN' (810,14)-(810,29)
                  ;: ';' (810,29)-(810,30)
                }: '}' (811,5)-(811,6)
            case_statement (812,5)-(822,6)
              case: 'case' (812,5)-(812,9)
              identifier: 'SCAN_STACK_COLON_EXPRESSION' (812,10)-(812,37)
              :: ':' (812,37)-(812,38)
              compound_statement (813,5)-(822,6)
                {: '{' (813,5)-(813,6)
                if_statement (814,7)-(817,8)
                  if: 'if' (814,7)-(814,9)
                  parenthesized_expression (814,10)-(814,31)
                    (: '(' (814,10)-(814,11)
                    binary_expression (814,11)-(814,30)
                      identifier: 'type' (814,11)-(814,15)
                      !=: '!=' (814,16)-(814,18)
                      identifier: 'LEXER_COLON' (814,19)-(814,30)
                    ): ')' (814,30)-(814,31)
                  compound_statement (815,7)-(817,8)
                    {: '{' (815,7)-(815,8)
                    break_statement (816,9)-(816,15)
                      break: 'break' (816,9)-(816,14)
                      ;: ';' (816,14)-(816,15)
                    }: '}' (817,7)-(817,8)
                expression_statement (819,7)-(819,62)
                  assignment_expression (819,7)-(819,61)
                    field_expression (819,7)-(819,30)
                      identifier: 'scanner_context_p' (819,7)-(819,24)
                      ->: '->' (819,24)-(819,26)
                      field_identifier: 'mode' (819,26)-(819,30)
                    =: '=' (819,31)-(819,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (819,33)-(819,61)
                  ;: ';' (819,61)-(819,62)
                expression_statement (820,7)-(820,42)
                  call_expression (820,7)-(820,41)
                    identifier: 'parser_stack_pop_uint8' (820,7)-(820,29)
                    argument_list (820,30)-(820,41)
                      (: '(' (820,30)-(820,31)
                      identifier: 'context_p' (820,31)-(820,40)
                      ): ')' (820,40)-(820,41)
                  ;: ';' (820,41)-(820,42)
                return_statement (821,7)-(821,30)
                  return: 'return' (821,7)-(821,13)
                  identifier: 'SCAN_NEXT_TOKEN' (821,14)-(821,29)
                  ;: ';' (821,29)-(821,30)
                }: '}' (822,5)-(822,6)
            preproc_if (823,1)-(898,7)
              #if: '#if' (823,1)-(823,4)
              call_expression (823,5)-(823,27)
                identifier: 'ENABLED' (823,5)-(823,12)
                argument_list (823,13)-(823,27)
                  (: '(' (823,13)-(823,14)
                  identifier: 'JERRY_ES2015' (823,14)-(823,26)
                  ): ')' (823,26)-(823,27)
              
: '
' (823,27)-(824,1)
              case_statement (824,5)-(824,35)
                case: 'case' (824,5)-(824,9)
                identifier: 'SCAN_STACK_ARRAY_LITERAL' (824,10)-(824,34)
                :: ':' (824,34)-(824,35)
              case_statement (825,5)-(895,6)
                case: 'case' (825,5)-(825,9)
                identifier: 'SCAN_STACK_OBJECT_LITERAL' (825,10)-(825,35)
                :: ':' (825,35)-(825,36)
                compound_statement (826,5)-(895,6)
                  {: '{' (826,5)-(826,6)
                  if_statement (827,7)-(831,8)
                    if: 'if' (827,7)-(827,9)
                    parenthesized_expression (827,10)-(828,88)
                      (: '(' (827,10)-(827,11)
                      binary_expression (827,11)-(828,87)
                        parenthesized_expression (827,11)-(827,84)
                          (: '(' (827,11)-(827,12)
                          binary_expression (827,12)-(827,83)
                            parenthesized_expression (827,12)-(827,51)
                              (: '(' (827,12)-(827,13)
                              binary_expression (827,13)-(827,50)
                                identifier: 'stack_top' (827,13)-(827,22)
                                ==: '==' (827,23)-(827,25)
                                identifier: 'SCAN_STACK_ARRAY_LITERAL' (827,26)-(827,50)
                              ): ')' (827,50)-(827,51)
                            &&: '&&' (827,52)-(827,54)
                            parenthesized_expression (827,55)-(827,83)
                              (: '(' (827,55)-(827,56)
                              binary_expression (827,56)-(827,82)
                                identifier: 'type' (827,56)-(827,60)
                                !=: '!=' (827,61)-(827,63)
                                identifier: 'LEXER_RIGHT_SQUARE' (827,64)-(827,82)
                              ): ')' (827,82)-(827,83)
                          ): ')' (827,83)-(827,84)
                        ||: '||' (828,11)-(828,13)
                        parenthesized_expression (828,14)-(828,87)
                          (: '(' (828,14)-(828,15)
                          binary_expression (828,15)-(828,86)
                            parenthesized_expression (828,15)-(828,55)
                              (: '(' (828,15)-(828,16)
                              binary_expression (828,16)-(828,54)
                                identifier: 'stack_top' (828,16)-(828,25)
                                ==: '==' (828,26)-(828,28)
                                identifier: 'SCAN_STACK_OBJECT_LITERAL' (828,29)-(828,54)
                              ): ')' (828,54)-(828,55)
                            &&: '&&' (828,56)-(828,58)
                            parenthesized_expression (828,59)-(828,86)
                              (: '(' (828,59)-(828,60)
                              binary_expression (828,60)-(828,85)
                                identifier: 'type' (828,60)-(828,64)
                                !=: '!=' (828,65)-(828,67)
                                identifier: 'LEXER_RIGHT_BRACE' (828,68)-(828,85)
                              ): ')' (828,85)-(828,86)
                          ): ')' (828,86)-(828,87)
                      ): ')' (828,87)-(828,88)
                    compound_statement (829,7)-(831,8)
                      {: '{' (829,7)-(829,8)
                      break_statement (830,9)-(830,15)
                        break: 'break' (830,9)-(830,14)
                        ;: ';' (830,14)-(830,15)
                      }: '}' (831,7)-(831,8)
                  declaration (833,7)-(833,43)
                    type_identifier: 'scanner_source_start_t' (833,7)-(833,29)
                    identifier: 'source_start' (833,30)-(833,42)
                    ;: ';' (833,42)-(833,43)
                  declaration (834,7)-(834,62)
                    primitive_type: 'uint8_t' (834,7)-(834,14)
                    init_declarator (834,15)-(834,61)
                      identifier: 'binding_type' (834,15)-(834,27)
                      =: '=' (834,28)-(834,29)
                      field_expression (834,30)-(834,61)
                        identifier: 'scanner_context_p' (834,30)-(834,47)
                        ->: '->' (834,47)-(834,49)
                        field_identifier: 'binding_type' (834,49)-(834,61)
                    ;: ';' (834,61)-(834,62)
                  expression_statement (836,7)-(836,42)
                    call_expression (836,7)-(836,41)
                      identifier: 'parser_stack_pop_uint8' (836,7)-(836,29)
                      argument_list (836,30)-(836,41)
                        (: '(' (836,30)-(836,31)
                        identifier: 'context_p' (836,31)-(836,40)
                        ): ')' (836,40)-(836,41)
                    ;: ';' (836,41)-(836,42)
                  expression_statement (837,7)-(837,68)
                    assignment_expression (837,7)-(837,67)
                      field_expression (837,7)-(837,38)
                        identifier: 'scanner_context_p' (837,7)-(837,24)
                        ->: '->' (837,24)-(837,26)
                        field_identifier: 'binding_type' (837,26)-(837,38)
                      =: '=' (837,39)-(837,40)
                      field_expression (837,41)-(837,67)
                        identifier: 'context_p' (837,41)-(837,50)
                        ->: '->' (837,50)-(837,52)
                        field_identifier: 'stack_top_uint8' (837,52)-(837,67)
                    ;: ';' (837,67)-(837,68)
                  expression_statement (838,7)-(838,42)
                    call_expression (838,7)-(838,41)
                      identifier: 'parser_stack_pop_uint8' (838,7)-(838,29)
                      argument_list (838,30)-(838,41)
                        (: '(' (838,30)-(838,31)
                        identifier: 'context_p' (838,31)-(838,40)
                        ): ')' (838,40)-(838,41)
                    ;: ';' (838,41)-(838,42)
                  expression_statement (839,7)-(839,84)
                    call_expression (839,7)-(839,83)
                      identifier: 'parser_stack_pop' (839,7)-(839,23)
                      argument_list (839,24)-(839,83)
                        (: '(' (839,24)-(839,25)
                        identifier: 'context_p' (839,25)-(839,34)
                        ,: ',' (839,34)-(839,35)
                        pointer_expression (839,36)-(839,49)
                          &: '&' (839,36)-(839,37)
                          identifier: 'source_start' (839,37)-(839,49)
                        ,: ',' (839,49)-(839,50)
                        sizeof_expression (839,51)-(839,82)
                          sizeof: 'sizeof' (839,51)-(839,57)
                          parenthesized_expression (839,58)-(839,82)
                            (: '(' (839,58)-(839,59)
                            identifier: 'scanner_source_start_t' (839,59)-(839,81)
                            ): ')' (839,81)-(839,82)
                        ): ')' (839,82)-(839,83)
                    ;: ';' (839,83)-(839,84)
                  expression_statement (841,7)-(841,36)
                    call_expression (841,7)-(841,35)
                      identifier: 'lexer_next_token' (841,7)-(841,23)
                      argument_list (841,24)-(841,35)
                        (: '(' (841,24)-(841,25)
                        identifier: 'context_p' (841,25)-(841,34)
                        ): ')' (841,34)-(841,35)
                    ;: ';' (841,35)-(841,36)
                  if_statement (843,7)-(861,8)
                    if: 'if' (843,7)-(843,9)
                    parenthesized_expression (843,10)-(843,109)
                      (: '(' (843,10)-(843,11)
                      binary_expression (843,11)-(843,108)
                        binary_expression (843,11)-(843,48)
                          identifier: 'binding_type' (843,11)-(843,23)
                          ==: '==' (843,24)-(843,26)
                          identifier: 'SCANNER_BINDING_CATCH' (843,27)-(843,48)
                        &&: '&&' (843,49)-(843,51)
                        binary_expression (843,52)-(843,108)
                          field_expression (843,52)-(843,78)
                            identifier: 'context_p' (843,52)-(843,61)
                            ->: '->' (843,61)-(843,63)
                            field_identifier: 'stack_top_uint8' (843,63)-(843,78)
                          ==: '==' (843,79)-(843,81)
                          identifier: 'SCAN_STACK_CATCH_STATEMENT' (843,82)-(843,108)
                      ): ')' (843,108)-(843,109)
                    compound_statement (844,7)-(861,8)
                      {: '{' (844,7)-(844,8)
                      expression_statement (845,9)-(845,54)
                        call_expression (845,9)-(845,53)
                          identifier: 'scanner_pop_binding_list' (845,9)-(845,33)
                          argument_list (845,34)-(845,53)
                            (: '(' (845,34)-(845,35)
                            identifier: 'scanner_context_p' (845,35)-(845,52)
                            ): ')' (845,52)-(845,53)
                        ;: ';' (845,53)-(845,54)
                      if_statement (847,9)-(850,10)
                        if: 'if' (847,9)-(847,11)
                        parenthesized_expression (847,12)-(847,56)
                          (: '(' (847,12)-(847,13)
                          binary_expression (847,13)-(847,55)
                            field_expression (847,13)-(847,34)
                              field_expression (847,13)-(847,29)
                                identifier: 'context_p' (847,13)-(847,22)
                                ->: '->' (847,22)-(847,24)
                                field_identifier: 'token' (847,24)-(847,29)
                              .: '.' (847,29)-(847,30)
                              field_identifier: 'type' (847,30)-(847,34)
                            !=: '!=' (847,35)-(847,37)
                            identifier: 'LEXER_RIGHT_PAREN' (847,38)-(847,55)
                          ): ')' (847,55)-(847,56)
                        compound_statement (848,9)-(850,10)
                          {: '{' (848,9)-(848,10)
                          expression_statement (849,11)-(849,43)
                            call_expression (849,11)-(849,42)
                              identifier: 'scanner_raise_error' (849,11)-(849,30)
                              argument_list (849,31)-(849,42)
                                (: '(' (849,31)-(849,32)
                                identifier: 'context_p' (849,32)-(849,41)
                                ): ')' (849,41)-(849,42)
                            ;: ';' (849,42)-(849,43)
                          }: '}' (850,9)-(850,10)
                      expression_statement (852,9)-(852,38)
                        call_expression (852,9)-(852,37)
                          identifier: 'lexer_next_token' (852,9)-(852,25)
                          argument_list (852,26)-(852,37)
                            (: '(' (852,26)-(852,27)
                            identifier: 'context_p' (852,27)-(852,36)
                            ): ')' (852,36)-(852,37)
                        ;: ';' (852,37)-(852,38)
                      if_statement (854,9)-(857,10)
                        if: 'if' (854,9)-(854,11)
                        parenthesized_expression (854,12)-(854,55)
                          (: '(' (854,12)-(854,13)
                          binary_expression (854,13)-(854,54)
                            field_expression (854,13)-(854,34)
                              field_expression (854,13)-(854,29)
                                identifier: 'context_p' (854,13)-(854,22)
                                ->: '->' (854,22)-(854,24)
                                field_identifier: 'token' (854,24)-(854,29)
                              .: '.' (854,29)-(854,30)
                              field_identifier: 'type' (854,30)-(854,34)
                            !=: '!=' (854,35)-(854,37)
                            identifier: 'LEXER_LEFT_BRACE' (854,38)-(854,54)
                          ): ')' (854,54)-(854,55)
                        compound_statement (855,9)-(857,10)
                          {: '{' (855,9)-(855,10)
                          expression_statement (856,11)-(856,43)
                            call_expression (856,11)-(856,42)
                              identifier: 'scanner_raise_error' (856,11)-(856,30)
                              argument_list (856,31)-(856,42)
                                (: '(' (856,31)-(856,32)
                                identifier: 'context_p' (856,32)-(856,41)
                                ): ')' (856,41)-(856,42)
                            ;: ';' (856,42)-(856,43)
                          }: '}' (857,9)-(857,10)
                      expression_statement (859,9)-(859,69)
                        assignment_expression (859,9)-(859,68)
                          field_expression (859,9)-(859,32)
                            identifier: 'scanner_context_p' (859,9)-(859,26)
                            ->: '->' (859,26)-(859,28)
                            field_identifier: 'mode' (859,28)-(859,32)
                          =: '=' (859,33)-(859,34)
                          identifier: 'SCAN_MODE_STATEMENT_OR_TERMINATOR' (859,35)-(859,68)
                        ;: ';' (859,68)-(859,69)
                      return_statement (860,9)-(860,32)
                        return: 'return' (860,9)-(860,15)
                        identifier: 'SCAN_NEXT_TOKEN' (860,16)-(860,31)
                        ;: ';' (860,31)-(860,32)
                      }: '}' (861,7)-(861,8)
                  if_statement (863,7)-(872,8)
                    if: 'if' (863,7)-(863,9)
                    parenthesized_expression (863,10)-(863,49)
                      (: '(' (863,10)-(863,11)
                      binary_expression (863,11)-(863,48)
                        field_expression (863,11)-(863,32)
                          field_expression (863,11)-(863,27)
                            identifier: 'context_p' (863,11)-(863,20)
                            ->: '->' (863,20)-(863,22)
                            field_identifier: 'token' (863,22)-(863,27)
                          .: '.' (863,27)-(863,28)
                          field_identifier: 'type' (863,28)-(863,32)
                        !=: '!=' (863,33)-(863,35)
                        identifier: 'LEXER_ASSIGN' (863,36)-(863,48)
                      ): ')' (863,48)-(863,49)
                    compound_statement (864,7)-(872,8)
                      {: '{' (864,7)-(864,8)
                      if_statement (865,9)-(868,10)
                        if: 'if' (865,9)-(865,11)
                        parenthesized_expression (865,12)-(865,55)
                          (: '(' (865,12)-(865,13)
                          call_expression (865,13)-(865,54)
                            identifier: 'SCANNER_NEEDS_BINDING_LIST' (865,13)-(865,39)
                            argument_list (865,40)-(865,54)
                              (: '(' (865,40)-(865,41)
                              identifier: 'binding_type' (865,41)-(865,53)
                              ): ')' (865,53)-(865,54)
                          ): ')' (865,54)-(865,55)
                        compound_statement (866,9)-(868,10)
                          {: '{' (866,9)-(866,10)
                          expression_statement (867,11)-(867,56)
                            call_expression (867,11)-(867,55)
                              identifier: 'scanner_pop_binding_list' (867,11)-(867,35)
                              argument_list (867,36)-(867,55)
                                (: '(' (867,36)-(867,37)
                                identifier: 'scanner_context_p' (867,37)-(867,54)
                                ): ')' (867,54)-(867,55)
                            ;: ';' (867,55)-(867,56)
                          }: '}' (868,9)-(868,10)
                      expression_statement (870,9)-(870,69)
                        assignment_expression (870,9)-(870,68)
                          field_expression (870,9)-(870,32)
                            identifier: 'scanner_context_p' (870,9)-(870,26)
                            ->: '->' (870,26)-(870,28)
                            field_identifier: 'mode' (870,28)-(870,32)
                          =: '=' (870,33)-(870,34)
                          identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (870,35)-(870,68)
                        ;: ';' (870,68)-(870,69)
                      return_statement (871,9)-(871,32)
                        return: 'return' (871,9)-(871,15)
                        identifier: 'SCAN_KEEP_TOKEN' (871,16)-(871,31)
                        ;: ';' (871,31)-(871,32)
                      }: '}' (872,7)-(872,8)
                  declaration (874,7)-(874,48)
                    type_identifier: 'scanner_location_info_t' (874,7)-(874,30)
                    pointer_declarator (874,31)-(874,47)
                      *: '*' (874,31)-(874,32)
                      identifier: 'location_info_p' (874,32)-(874,47)
                    ;: ';' (874,47)-(874,48)
                  expression_statement (875,7)-(877,108)
                    assignment_expression (875,7)-(877,107)
                      identifier: 'location_info_p' (875,7)-(875,22)
                      =: '=' (875,23)-(875,24)
                      cast_expression (875,25)-(877,107)
                        (: '(' (875,25)-(875,26)
                        type_descriptor (875,26)-(875,51)
                          type_identifier: 'scanner_location_info_t' (875,26)-(875,49)
                          abstract_pointer_declarator (875,50)-(875,51)
                            *: '*' (875,50)-(875,51)
                        ): ')' (875,51)-(875,52)
                        call_expression (875,53)-(877,107)
                          identifier: 'scanner_insert_info' (875,53)-(875,72)
                          argument_list (875,73)-(877,107)
                            (: '(' (875,73)-(875,74)
                            identifier: 'context_p' (875,74)-(875,83)
                            ,: ',' (875,83)-(875,84)
                            field_expression (876,74)-(876,95)
                              identifier: 'source_start' (876,74)-(876,86)
                              .: '.' (876,86)-(876,87)
                              field_identifier: 'source_p' (876,87)-(876,95)
                            ,: ',' (876,95)-(876,96)
                            sizeof_expression (877,74)-(877,106)
                              sizeof: 'sizeof' (877,74)-(877,80)
                              parenthesized_expression (877,81)-(877,106)
                                (: '(' (877,81)-(877,82)
                                identifier: 'scanner_location_info_t' (877,82)-(877,105)
                                ): ')' (877,105)-(877,106)
                            ): ')' (877,106)-(877,107)
                    ;: ';' (877,107)-(877,108)
                  expression_statement (878,7)-(878,61)
                    assignment_expression (878,7)-(878,60)
                      field_expression (878,7)-(878,33)
                        field_expression (878,7)-(878,28)
                          identifier: 'location_info_p' (878,7)-(878,22)
                          ->: '->' (878,22)-(878,24)
                          field_identifier: 'info' (878,24)-(878,28)
                        .: '.' (878,28)-(878,29)
                        field_identifier: 'type' (878,29)-(878,33)
                      =: '=' (878,34)-(878,35)
                      identifier: 'SCANNER_TYPE_INITIALIZER' (878,36)-(878,60)
                    ;: ';' (878,60)-(878,61)
                  expression_statement (879,7)-(879,68)
                    call_expression (879,7)-(879,67)
                      identifier: 'scanner_get_location' (879,7)-(879,27)
                      argument_list (879,28)-(879,67)
                        (: '(' (879,28)-(879,29)
                        pointer_expression (879,29)-(879,55)
                          &: '&' (879,29)-(879,30)
                          field_expression (879,30)-(879,55)
                            identifier: 'location_info_p' (879,30)-(879,45)
                            ->: '->' (879,45)-(879,47)
                            field_identifier: 'location' (879,47)-(879,55)
                        ,: ',' (879,55)-(879,56)
                        identifier: 'context_p' (879,57)-(879,66)
                        ): ')' (879,66)-(879,67)
                    ;: ';' (879,67)-(879,68)
                  expression_statement (880,7)-(880,62)
                    assignment_expression (880,7)-(880,61)
                      field_expression (880,7)-(880,30)
                        identifier: 'scanner_context_p' (880,7)-(880,24)
                        ->: '->' (880,24)-(880,26)
                        field_identifier: 'mode' (880,26)-(880,30)
                      =: '=' (880,31)-(880,32)
                      identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (880,33)-(880,61)
                    ;: ';' (880,61)-(880,62)
                  if_statement (882,7)-(893,8)
                    if: 'if' (882,7)-(882,9)
                    parenthesized_expression (882,10)-(882,53)
                      (: '(' (882,10)-(882,11)
                      call_expression (882,11)-(882,52)
                        identifier: 'SCANNER_NEEDS_BINDING_LIST' (882,11)-(882,37)
                        argument_list (882,38)-(882,52)
                          (: '(' (882,38)-(882,39)
                          identifier: 'binding_type' (882,39)-(882,51)
                          ): ')' (882,51)-(882,52)
                      ): ')' (882,52)-(882,53)
                    compound_statement (883,7)-(893,8)
                      {: '{' (883,7)-(883,8)
                      declaration (884,9)-(884,92)
                        type_identifier: 'scanner_binding_item_t' (884,9)-(884,31)
                        init_declarator (884,32)-(884,91)
                          pointer_declarator (884,32)-(884,39)
                            *: '*' (884,32)-(884,33)
                            identifier: 'item_p' (884,33)-(884,39)
                          =: '=' (884,40)-(884,41)
                          field_expression (884,42)-(884,91)
                            field_expression (884,42)-(884,82)
                              identifier: 'scanner_context_p' (884,42)-(884,59)
                              ->: '->' (884,59)-(884,61)
                              field_identifier: 'active_binding_list_p' (884,61)-(884,82)
                            ->: '->' (884,82)-(884,84)
                            field_identifier: 'items_p' (884,84)-(884,91)
                        ;: ';' (884,91)-(884,92)
                      while_statement (886,9)-(890,10)
                        while: 'while' (886,9)-(886,14)
                        parenthesized_expression (886,15)-(886,31)
                          (: '(' (886,15)-(886,16)
                          binary_expression (886,16)-(886,30)
                            identifier: 'item_p' (886,16)-(886,22)
                            !=: '!=' (886,23)-(886,25)
                            null (886,26)-(886,30)
                              NULL: 'NULL' (886,26)-(886,30)
                          ): ')' (886,30)-(886,31)
                        compound_statement (887,9)-(890,10)
                          {: '{' (887,9)-(887,10)
                          expression_statement (888,11)-(888,73)
                            assignment_expression (888,11)-(888,72)
                              field_expression (888,11)-(888,34)
                                field_expression (888,11)-(888,28)
                                  identifier: 'item_p' (888,11)-(888,17)
                                  ->: '->' (888,17)-(888,19)
                                  field_identifier: 'literal_p' (888,19)-(888,28)
                                ->: '->' (888,28)-(888,30)
                                field_identifier: 'type' (888,30)-(888,34)
                              &=: '&=' (888,35)-(888,37)
                              cast_expression (888,38)-(888,72)
                                (: '(' (888,38)-(888,39)
                                type_descriptor (888,39)-(888,46)
                                  primitive_type: 'uint8_t' (888,39)-(888,46)
                                ): ')' (888,46)-(888,47)
                                unary_expression (888,48)-(888,72)
                                  ~: '~' (888,48)-(888,49)
                                  identifier: 'SCANNER_LITERAL_IS_USED' (888,49)-(888,72)
                            ;: ';' (888,72)-(888,73)
                          expression_statement (889,11)-(889,35)
                            assignment_expression (889,11)-(889,34)
                              identifier: 'item_p' (889,11)-(889,17)
                              =: '=' (889,18)-(889,19)
                              field_expression (889,20)-(889,34)
                                identifier: 'item_p' (889,20)-(889,26)
                                ->: '->' (889,26)-(889,28)
                                field_identifier: 'next_p' (889,28)-(889,34)
                            ;: ';' (889,34)-(889,35)
                          }: '}' (890,9)-(890,10)
                      expression_statement (892,9)-(892,75)
                        call_expression (892,9)-(892,74)
                          identifier: 'parser_stack_push_uint8' (892,9)-(892,32)
                          argument_list (892,33)-(892,74)
                            (: '(' (892,33)-(892,34)
                            identifier: 'context_p' (892,34)-(892,43)
                            ,: ',' (892,43)-(892,44)
                            identifier: 'SCAN_STACK_BINDING_LIST_INIT' (892,45)-(892,73)
                            ): ')' (892,73)-(892,74)
                        ;: ';' (892,74)-(892,75)
                      }: '}' (893,7)-(893,8)
                  return_statement (894,7)-(894,30)
                    return: 'return' (894,7)-(894,13)
                    identifier: 'SCAN_NEXT_TOKEN' (894,14)-(894,29)
                    ;: ';' (894,29)-(894,30)
                  }: '}' (895,5)-(895,6)
              preproc_else (896,1)-(897,35)
                #else: '#else' (896,1)-(896,6)
                comment: '/* !ENABLED (JERRY_ES2015) */' (896,7)-(896,36)
                case_statement (897,5)-(897,35)
                  case: 'case' (897,5)-(897,9)
                  identifier: 'SCAN_STACK_ARRAY_LITERAL' (897,10)-(897,34)
                  :: ':' (897,34)-(897,35)
              #endif: '#endif' (898,1)-(898,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (898,8)-(898,36)
            case_statement (899,5)-(909,6)
              case: 'case' (899,5)-(899,9)
              identifier: 'SCAN_STACK_PROPERTY_ACCESSOR' (899,10)-(899,38)
              :: ':' (899,38)-(899,39)
              compound_statement (900,5)-(909,6)
                {: '{' (900,5)-(900,6)
                if_statement (901,7)-(904,8)
                  if: 'if' (901,7)-(901,9)
                  parenthesized_expression (901,10)-(901,38)
                    (: '(' (901,10)-(901,11)
                    binary_expression (901,11)-(901,37)
                      identifier: 'type' (901,11)-(901,15)
                      !=: '!=' (901,16)-(901,18)
                      identifier: 'LEXER_RIGHT_SQUARE' (901,19)-(901,37)
                    ): ')' (901,37)-(901,38)
                  compound_statement (902,7)-(904,8)
                    {: '{' (902,7)-(902,8)
                    break_statement (903,9)-(903,15)
                      break: 'break' (903,9)-(903,14)
                      ;: ';' (903,14)-(903,15)
                    }: '}' (904,7)-(904,8)
                expression_statement (906,7)-(906,67)
                  assignment_expression (906,7)-(906,66)
                    field_expression (906,7)-(906,30)
                      identifier: 'scanner_context_p' (906,7)-(906,24)
                      ->: '->' (906,24)-(906,26)
                      field_identifier: 'mode' (906,26)-(906,30)
                    =: '=' (906,31)-(906,32)
                    identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (906,33)-(906,66)
                  ;: ';' (906,66)-(906,67)
                expression_statement (907,7)-(907,42)
                  call_expression (907,7)-(907,41)
                    identifier: 'parser_stack_pop_uint8' (907,7)-(907,29)
                    argument_list (907,30)-(907,41)
                      (: '(' (907,30)-(907,31)
                      identifier: 'context_p' (907,31)-(907,40)
                      ): ')' (907,40)-(907,41)
                  ;: ';' (907,41)-(907,42)
                return_statement (908,7)-(908,30)
                  return: 'return' (908,7)-(908,13)
                  identifier: 'SCAN_NEXT_TOKEN' (908,14)-(908,29)
                  ;: ';' (908,29)-(908,30)
                }: '}' (909,5)-(909,6)
            preproc_if (910,1)-(922,7)
              #if: '#if' (910,1)-(910,4)
              unary_expression (910,5)-(910,28)
                !: '!' (910,5)-(910,6)
                call_expression (910,6)-(910,28)
                  identifier: 'ENABLED' (910,6)-(910,13)
                  argument_list (910,14)-(910,28)
                    (: '(' (910,14)-(910,15)
                    identifier: 'JERRY_ES2015' (910,15)-(910,27)
                    ): ')' (910,27)-(910,28)
              
: '
' (910,28)-(911,1)
              case_statement (911,5)-(921,6)
                case: 'case' (911,5)-(911,9)
                identifier: 'SCAN_STACK_OBJECT_LITERAL' (911,10)-(911,35)
                :: ':' (911,35)-(911,36)
                compound_statement (912,5)-(921,6)
                  {: '{' (912,5)-(912,6)
                  if_statement (913,7)-(916,8)
                    if: 'if' (913,7)-(913,9)
                    parenthesized_expression (913,10)-(913,37)
                      (: '(' (913,10)-(913,11)
                      binary_expression (913,11)-(913,36)
                        identifier: 'type' (913,11)-(913,15)
                        !=: '!=' (913,16)-(913,18)
                        identifier: 'LEXER_RIGHT_BRACE' (913,19)-(913,36)
                      ): ')' (913,36)-(913,37)
                    compound_statement (914,7)-(916,8)
                      {: '{' (914,7)-(914,8)
                      break_statement (915,9)-(915,15)
                        break: 'break' (915,9)-(915,14)
                        ;: ';' (915,14)-(915,15)
                      }: '}' (916,7)-(916,8)
                  expression_statement (918,7)-(918,67)
                    assignment_expression (918,7)-(918,66)
                      field_expression (918,7)-(918,30)
                        identifier: 'scanner_context_p' (918,7)-(918,24)
                        ->: '->' (918,24)-(918,26)
                        field_identifier: 'mode' (918,26)-(918,30)
                      =: '=' (918,31)-(918,32)
                      identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (918,33)-(918,66)
                    ;: ';' (918,66)-(918,67)
                  expression_statement (919,7)-(919,42)
                    call_expression (919,7)-(919,41)
                      identifier: 'parser_stack_pop_uint8' (919,7)-(919,29)
                      argument_list (919,30)-(919,41)
                        (: '(' (919,30)-(919,31)
                        identifier: 'context_p' (919,31)-(919,40)
                        ): ')' (919,40)-(919,41)
                    ;: ';' (919,41)-(919,42)
                  return_statement (920,7)-(920,30)
                    return: 'return' (920,7)-(920,13)
                    identifier: 'SCAN_NEXT_TOKEN' (920,14)-(920,29)
                    ;: ';' (920,29)-(920,30)
                  }: '}' (921,5)-(921,6)
              #endif: '#endif' (922,1)-(922,7)
            comment: '/* !ENABLED (JERRY_ES2015) */' (922,8)-(922,37)
            preproc_if (923,1)-(1058,7)
              #if: '#if' (923,1)-(923,4)
              call_expression (923,5)-(923,27)
                identifier: 'ENABLED' (923,5)-(923,12)
                argument_list (923,13)-(923,27)
                  (: '(' (923,13)-(923,14)
                  identifier: 'JERRY_ES2015' (923,14)-(923,26)
                  ): ')' (923,26)-(923,27)
              
: '
' (923,27)-(924,1)
              case_statement (924,5)-(967,6)
                case: 'case' (924,5)-(924,9)
                identifier: 'SCAN_STACK_COMPUTED_PROPERTY' (924,10)-(924,38)
                :: ':' (924,38)-(924,39)
                compound_statement (925,5)-(967,6)
                  {: '{' (925,5)-(925,6)
                  if_statement (926,7)-(929,8)
                    if: 'if' (926,7)-(926,9)
                    parenthesized_expression (926,10)-(926,38)
                      (: '(' (926,10)-(926,11)
                      binary_expression (926,11)-(926,37)
                        identifier: 'type' (926,11)-(926,15)
                        !=: '!=' (926,16)-(926,18)
                        identifier: 'LEXER_RIGHT_SQUARE' (926,19)-(926,37)
                      ): ')' (926,37)-(926,38)
                    compound_statement (927,7)-(929,8)
                      {: '{' (927,7)-(927,8)
                      break_statement (928,9)-(928,15)
                        break: 'break' (928,9)-(928,14)
                        ;: ';' (928,14)-(928,15)
                      }: '}' (929,7)-(929,8)
                  expression_statement (931,7)-(931,36)
                    call_expression (931,7)-(931,35)
                      identifier: 'lexer_next_token' (931,7)-(931,23)
                      argument_list (931,24)-(931,35)
                        (: '(' (931,24)-(931,25)
                        identifier: 'context_p' (931,25)-(931,34)
                        ): ')' (931,34)-(931,35)
                    ;: ';' (931,35)-(931,36)
                  expression_statement (933,7)-(933,42)
                    call_expression (933,7)-(933,41)
                      identifier: 'parser_stack_pop_uint8' (933,7)-(933,29)
                      argument_list (933,30)-(933,41)
                        (: '(' (933,30)-(933,31)
                        identifier: 'context_p' (933,31)-(933,40)
                        ): ')' (933,40)-(933,41)
                    ;: ';' (933,41)-(933,42)
                  expression_statement (934,7)-(934,67)
                    assignment_expression (934,7)-(934,66)
                      identifier: 'stack_top' (934,7)-(934,16)
                      =: '=' (934,17)-(934,18)
                      cast_expression (934,19)-(934,66)
                        (: '(' (934,19)-(934,20)
                        type_descriptor (934,20)-(934,38)
                          type_identifier: 'scan_stack_modes_t' (934,20)-(934,38)
                        ): ')' (934,38)-(934,39)
                        field_expression (934,40)-(934,66)
                          identifier: 'context_p' (934,40)-(934,49)
                          ->: '->' (934,49)-(934,51)
                          field_identifier: 'stack_top_uint8' (934,51)-(934,66)
                    ;: ';' (934,66)-(934,67)
                  if_statement (936,7)-(942,8)
                    if: 'if' (936,7)-(936,9)
                    parenthesized_expression (936,10)-(936,53)
                      (: '(' (936,10)-(936,11)
                      binary_expression (936,11)-(936,52)
                        identifier: 'stack_top' (936,11)-(936,20)
                        ==: '==' (936,21)-(936,23)
                        identifier: 'SCAN_STACK_FUNCTION_PROPERTY' (936,24)-(936,52)
                      ): ')' (936,52)-(936,53)
                    compound_statement (937,7)-(942,8)
                      {: '{' (937,7)-(937,8)
                      expression_statement (938,9)-(938,97)
                        call_expression (938,9)-(938,96)
                          identifier: 'scanner_push_literal_pool' (938,9)-(938,34)
                          argument_list (938,35)-(938,96)
                            (: '(' (938,35)-(938,36)
                            identifier: 'context_p' (938,36)-(938,45)
                            ,: ',' (938,45)-(938,46)
                            identifier: 'scanner_context_p' (938,47)-(938,64)
                            ,: ',' (938,64)-(938,65)
                            identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (938,66)-(938,95)
                            ): ')' (938,95)-(938,96)
                        ;: ';' (938,96)-(938,97)
                      expression_statement (940,9)-(940,64)
                        assignment_expression (940,9)-(940,63)
                          field_expression (940,9)-(940,32)
                            identifier: 'scanner_context_p' (940,9)-(940,26)
                            ->: '->' (940,26)-(940,28)
                            field_identifier: 'mode' (940,28)-(940,32)
                          =: '=' (940,33)-(940,34)
                          identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (940,35)-(940,63)
                        ;: ';' (940,63)-(940,64)
                      return_statement (941,9)-(941,32)
                        return: 'return' (941,9)-(941,15)
                        identifier: 'SCAN_KEEP_TOKEN' (941,16)-(941,31)
                        ;: ';' (941,31)-(941,32)
                      }: '}' (942,7)-(942,8)
                  expression_statement (944,7)-(944,61)
                    call_expression (944,7)-(944,60)
                      identifier: 'JERRY_ASSERT' (944,7)-(944,19)
                      argument_list (944,20)-(944,60)
                        (: '(' (944,20)-(944,21)
                        binary_expression (944,21)-(944,59)
                          identifier: 'stack_top' (944,21)-(944,30)
                          ==: '==' (944,31)-(944,33)
                          identifier: 'SCAN_STACK_OBJECT_LITERAL' (944,34)-(944,59)
                        ): ')' (944,59)-(944,60)
                    ;: ';' (944,60)-(944,61)
                  if_statement (946,7)-(953,8)
                    if: 'if' (946,7)-(946,9)
                    parenthesized_expression (946,10)-(946,53)
                      (: '(' (946,10)-(946,11)
                      binary_expression (946,11)-(946,52)
                        field_expression (946,11)-(946,32)
                          field_expression (946,11)-(946,27)
                            identifier: 'context_p' (946,11)-(946,20)
                            ->: '->' (946,20)-(946,22)
                            field_identifier: 'token' (946,22)-(946,27)
                          .: '.' (946,27)-(946,28)
                          field_identifier: 'type' (946,28)-(946,32)
                        ==: '==' (946,33)-(946,35)
                        identifier: 'LEXER_LEFT_PAREN' (946,36)-(946,52)
                      ): ')' (946,52)-(946,53)
                    compound_statement (947,7)-(953,8)
                      {: '{' (947,7)-(947,8)
                      expression_statement (948,9)-(948,97)
                        call_expression (948,9)-(948,96)
                          identifier: 'scanner_push_literal_pool' (948,9)-(948,34)
                          argument_list (948,35)-(948,96)
                            (: '(' (948,35)-(948,36)
                            identifier: 'context_p' (948,36)-(948,45)
                            ,: ',' (948,45)-(948,46)
                            identifier: 'scanner_context_p' (948,47)-(948,64)
                            ,: ',' (948,64)-(948,65)
                            identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (948,66)-(948,95)
                            ): ')' (948,95)-(948,96)
                        ;: ';' (948,96)-(948,97)
                      expression_statement (950,9)-(950,75)
                        call_expression (950,9)-(950,74)
                          identifier: 'parser_stack_push_uint8' (950,9)-(950,32)
                          argument_list (950,33)-(950,74)
                            (: '(' (950,33)-(950,34)
                            identifier: 'context_p' (950,34)-(950,43)
                            ,: ',' (950,43)-(950,44)
                            identifier: 'SCAN_STACK_FUNCTION_PROPERTY' (950,45)-(950,73)
                            ): ')' (950,73)-(950,74)
                        ;: ';' (950,74)-(950,75)
                      expression_statement (951,9)-(951,64)
                        assignment_expression (951,9)-(951,63)
                          field_expression (951,9)-(951,32)
                            identifier: 'scanner_context_p' (951,9)-(951,26)
                            ->: '->' (951,26)-(951,28)
                            field_identifier: 'mode' (951,28)-(951,32)
                          =: '=' (951,33)-(951,34)
                          identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (951,35)-(951,63)
                        ;: ';' (951,63)-(951,64)
                      return_statement (952,9)-(952,32)
                        return: 'return' (952,9)-(952,15)
                        identifier: 'SCAN_KEEP_TOKEN' (952,16)-(952,31)
                        ;: ';' (952,31)-(952,32)
                      }: '}' (953,7)-(953,8)
                  if_statement (955,7)-(958,8)
                    if: 'if' (955,7)-(955,9)
                    parenthesized_expression (955,10)-(955,48)
                      (: '(' (955,10)-(955,11)
                      binary_expression (955,11)-(955,47)
                        field_expression (955,11)-(955,32)
                          field_expression (955,11)-(955,27)
                            identifier: 'context_p' (955,11)-(955,20)
                            ->: '->' (955,20)-(955,22)
                            field_identifier: 'token' (955,22)-(955,27)
                          .: '.' (955,27)-(955,28)
                          field_identifier: 'type' (955,28)-(955,32)
                        !=: '!=' (955,33)-(955,35)
                        identifier: 'LEXER_COLON' (955,36)-(955,47)
                      ): ')' (955,47)-(955,48)
                    compound_statement (956,7)-(958,8)
                      {: '{' (956,7)-(956,8)
                      expression_statement (957,9)-(957,41)
                        call_expression (957,9)-(957,40)
                          identifier: 'scanner_raise_error' (957,9)-(957,28)
                          argument_list (957,29)-(957,40)
                            (: '(' (957,29)-(957,30)
                            identifier: 'context_p' (957,30)-(957,39)
                            ): ')' (957,39)-(957,40)
                        ;: ';' (957,40)-(957,41)
                      }: '}' (958,7)-(958,8)
                  expression_statement (960,7)-(960,62)
                    assignment_expression (960,7)-(960,61)
                      field_expression (960,7)-(960,30)
                        identifier: 'scanner_context_p' (960,7)-(960,24)
                        ->: '->' (960,24)-(960,26)
                        field_identifier: 'mode' (960,26)-(960,30)
                      =: '=' (960,31)-(960,32)
                      identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (960,33)-(960,61)
                    ;: ';' (960,61)-(960,62)
                  if_statement (962,7)-(965,8)
                    if: 'if' (962,7)-(962,9)
                    parenthesized_expression (962,10)-(962,67)
                      (: '(' (962,10)-(962,11)
                      binary_expression (962,11)-(962,66)
                        field_expression (962,11)-(962,42)
                          identifier: 'scanner_context_p' (962,11)-(962,28)
                          ->: '->' (962,28)-(962,30)
                          field_identifier: 'binding_type' (962,30)-(962,42)
                        !=: '!=' (962,43)-(962,45)
                        identifier: 'SCANNER_BINDING_NONE' (962,46)-(962,66)
                      ): ')' (962,66)-(962,67)
                    compound_statement (963,7)-(965,8)
                      {: '{' (963,7)-(963,8)
                      expression_statement (964,9)-(964,53)
                        assignment_expression (964,9)-(964,52)
                          field_expression (964,9)-(964,32)
                            identifier: 'scanner_context_p' (964,9)-(964,26)
                            ->: '->' (964,26)-(964,28)
                            field_identifier: 'mode' (964,28)-(964,32)
                          =: '=' (964,33)-(964,34)
                          identifier: 'SCAN_MODE_BINDING' (964,35)-(964,52)
                        ;: ';' (964,52)-(964,53)
                      }: '}' (965,7)-(965,8)
                  return_statement (966,7)-(966,30)
                    return: 'return' (966,7)-(966,13)
                    identifier: 'SCAN_NEXT_TOKEN' (966,14)-(966,29)
                    ;: ';' (966,29)-(966,30)
                  }: '}' (967,5)-(967,6)
              case_statement (968,5)-(968,40)
                case: 'case' (968,5)-(968,9)
                identifier: 'SCAN_STACK_COMPUTED_GENERATOR' (968,10)-(968,39)
                :: ':' (968,39)-(968,40)
              case_statement (969,5)-(969,36)
                case: 'case' (969,5)-(969,9)
                identifier: 'SCAN_STACK_COMPUTED_ASYNC' (969,10)-(969,35)
                :: ':' (969,35)-(969,36)
              case_statement (970,5)-(991,6)
                case: 'case' (970,5)-(970,9)
                identifier: 'SCAN_STACK_COMPUTED_ASYNC_GENERATOR' (970,10)-(970,45)
                :: ':' (970,45)-(970,46)
                compound_statement (971,5)-(991,6)
                  {: '{' (971,5)-(971,6)
                  if_statement (972,7)-(975,8)
                    if: 'if' (972,7)-(972,9)
                    parenthesized_expression (972,10)-(972,38)
                      (: '(' (972,10)-(972,11)
                      binary_expression (972,11)-(972,37)
                        identifier: 'type' (972,11)-(972,15)
                        !=: '!=' (972,16)-(972,18)
                        identifier: 'LEXER_RIGHT_SQUARE' (972,19)-(972,37)
                      ): ')' (972,37)-(972,38)
                    compound_statement (973,7)-(975,8)
                      {: '{' (973,7)-(973,8)
                      break_statement (974,9)-(974,15)
                        break: 'break' (974,9)-(974,14)
                        ;: ';' (974,14)-(974,15)
                      }: '}' (975,7)-(975,8)
                  expression_statement (977,7)-(977,36)
                    call_expression (977,7)-(977,35)
                      identifier: 'lexer_next_token' (977,7)-(977,23)
                      argument_list (977,24)-(977,35)
                        (: '(' (977,24)-(977,25)
                        identifier: 'context_p' (977,25)-(977,34)
                        ): ')' (977,34)-(977,35)
                    ;: ';' (977,35)-(977,36)
                  expression_statement (978,7)-(978,42)
                    call_expression (978,7)-(978,41)
                      identifier: 'parser_stack_pop_uint8' (978,7)-(978,29)
                      argument_list (978,30)-(978,41)
                        (: '(' (978,30)-(978,31)
                        identifier: 'context_p' (978,31)-(978,40)
                        ): ')' (978,40)-(978,41)
                    ;: ';' (978,41)-(978,42)
                  expression_statement (980,7)-(981,84)
                    call_expression (980,7)-(981,83)
                      identifier: 'JERRY_ASSERT' (980,7)-(980,19)
                      argument_list (980,20)-(981,83)
                        (: '(' (980,20)-(980,21)
                        binary_expression (980,21)-(981,82)
                          binary_expression (980,21)-(980,76)
                            field_expression (980,21)-(980,47)
                              identifier: 'context_p' (980,21)-(980,30)
                              ->: '->' (980,30)-(980,32)
                              field_identifier: 'stack_top_uint8' (980,32)-(980,47)
                            ==: '==' (980,48)-(980,50)
                            identifier: 'SCAN_STACK_OBJECT_LITERAL' (980,51)-(980,76)
                          ||: '||' (981,21)-(981,23)
                          binary_expression (981,24)-(981,82)
                            field_expression (981,24)-(981,50)
                              identifier: 'context_p' (981,24)-(981,33)
                              ->: '->' (981,33)-(981,35)
                              field_identifier: 'stack_top_uint8' (981,35)-(981,50)
                            ==: '==' (981,51)-(981,53)
                            identifier: 'SCAN_STACK_FUNCTION_PROPERTY' (981,54)-(981,82)
                        ): ')' (981,82)-(981,83)
                    ;: ';' (981,83)-(981,84)
                  declaration (983,7)-(985,96)
                    primitive_type: 'uint16_t' (983,7)-(983,15)
                    init_declarator (983,16)-(985,95)
                      identifier: 'status_flags' (983,16)-(983,28)
                      =: '=' (983,29)-(983,30)
                      cast_expression (983,31)-(985,95)
                        (: '(' (983,31)-(983,32)
                        type_descriptor (983,32)-(983,40)
                          primitive_type: 'uint16_t' (983,32)-(983,40)
                        ): ')' (983,40)-(983,41)
                        parenthesized_expression (983,42)-(985,95)
                          (: '(' (983,42)-(983,43)
                          binary_expression (983,43)-(985,94)
                            binary_expression (983,43)-(984,75)
                              identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (983,43)-(983,72)
                              |: '|' (984,43)-(984,44)
                              identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (984,45)-(984,75)
                            |: '|' (985,43)-(985,44)
                            call_expression (985,45)-(985,94)
                              identifier: 'SCANNER_FROM_COMPUTED_TO_LITERAL_POOL' (985,45)-(985,82)
                              argument_list (985,83)-(985,94)
                                (: '(' (985,83)-(985,84)
                                identifier: 'stack_top' (985,84)-(985,93)
                                ): ')' (985,93)-(985,94)
                          ): ')' (985,94)-(985,95)
                    ;: ';' (985,95)-(985,96)
                  expression_statement (987,7)-(987,78)
                    call_expression (987,7)-(987,77)
                      identifier: 'scanner_push_literal_pool' (987,7)-(987,32)
                      argument_list (987,33)-(987,77)
                        (: '(' (987,33)-(987,34)
                        identifier: 'context_p' (987,34)-(987,43)
                        ,: ',' (987,43)-(987,44)
                        identifier: 'scanner_context_p' (987,45)-(987,62)
                        ,: ',' (987,62)-(987,63)
                        identifier: 'status_flags' (987,64)-(987,76)
                        ): ')' (987,76)-(987,77)
                    ;: ';' (987,77)-(987,78)
                  expression_statement (989,7)-(989,62)
                    assignment_expression (989,7)-(989,61)
                      field_expression (989,7)-(989,30)
                        identifier: 'scanner_context_p' (989,7)-(989,24)
                        ->: '->' (989,24)-(989,26)
                        field_identifier: 'mode' (989,26)-(989,30)
                      =: '=' (989,31)-(989,32)
                      identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (989,33)-(989,61)
                    ;: ';' (989,61)-(989,62)
                  return_statement (990,7)-(990,30)
                    return: 'return' (990,7)-(990,13)
                    identifier: 'SCAN_KEEP_TOKEN' (990,14)-(990,29)
                    ;: ';' (990,29)-(990,30)
                  }: '}' (991,5)-(991,6)
              case_statement (992,5)-(992,37)
                case: 'case' (992,5)-(992,9)
                identifier: 'SCAN_STACK_TEMPLATE_STRING' (992,10)-(992,36)
                :: ':' (992,36)-(992,37)
              case_statement (993,5)-(1014,6)
                case: 'case' (993,5)-(993,9)
                identifier: 'SCAN_STACK_TAGGED_TEMPLATE_LITERAL' (993,10)-(993,44)
                :: ':' (993,44)-(993,45)
                compound_statement (994,5)-(1014,6)
                  {: '{' (994,5)-(994,6)
                  if_statement (995,7)-(998,8)
                    if: 'if' (995,7)-(995,9)
                    parenthesized_expression (995,10)-(995,37)
                      (: '(' (995,10)-(995,11)
                      binary_expression (995,11)-(995,36)
                        identifier: 'type' (995,11)-(995,15)
                        !=: '!=' (995,16)-(995,18)
                        identifier: 'LEXER_RIGHT_BRACE' (995,19)-(995,36)
                      ): ')' (995,36)-(995,37)
                    compound_statement (996,7)-(998,8)
                      {: '{' (996,7)-(996,8)
                      break_statement (997,9)-(997,15)
                        break: 'break' (997,9)-(997,14)
                        ;: ';' (997,14)-(997,15)
                      }: '}' (998,7)-(998,8)
                  expression_statement (1000,7)-(1000,29)
                    update_expression (1000,7)-(1000,28)
                      field_expression (1000,7)-(1000,26)
                        identifier: 'context_p' (1000,7)-(1000,16)
                        ->: '->' (1000,16)-(1000,18)
                        field_identifier: 'source_p' (1000,18)-(1000,26)
                      --: '--' (1000,26)-(1000,28)
                    ;: ';' (1000,28)-(1000,29)
                  expression_statement (1001,7)-(1001,27)
                    update_expression (1001,7)-(1001,26)
                      field_expression (1001,7)-(1001,24)
                        identifier: 'context_p' (1001,7)-(1001,16)
                        ->: '->' (1001,16)-(1001,18)
                        field_identifier: 'column' (1001,18)-(1001,24)
                      --: '--' (1001,24)-(1001,26)
                    ;: ';' (1001,26)-(1001,27)
                  expression_statement (1002,7)-(1002,60)
                    call_expression (1002,7)-(1002,59)
                      identifier: 'lexer_parse_string' (1002,7)-(1002,25)
                      argument_list (1002,26)-(1002,59)
                        (: '(' (1002,26)-(1002,27)
                        identifier: 'context_p' (1002,27)-(1002,36)
                        ,: ',' (1002,36)-(1002,37)
                        identifier: 'LEXER_STRING_NO_OPTS' (1002,38)-(1002,58)
                        ): ')' (1002,58)-(1002,59)
                    ;: ';' (1002,59)-(1002,60)
                  if_statement (1004,7)-(1012,8)
                    if: 'if' (1004,7)-(1004,9)
                    parenthesized_expression (1004,10)-(1004,60)
                      (: '(' (1004,10)-(1004,11)
                      binary_expression (1004,11)-(1004,59)
                        subscript_expression (1004,11)-(1004,34)
                          field_expression (1004,11)-(1004,30)
                            identifier: 'context_p' (1004,11)-(1004,20)
                            ->: '->' (1004,20)-(1004,22)
                            field_identifier: 'source_p' (1004,22)-(1004,30)
                          [: '[' (1004,30)-(1004,31)
                          number_literal: '-1' (1004,31)-(1004,33)
                          ]: ']' (1004,33)-(1004,34)
                        !=: '!=' (1004,35)-(1004,37)
                        identifier: 'LIT_CHAR_GRAVE_ACCENT' (1004,38)-(1004,59)
                      ): ')' (1004,59)-(1004,60)
                    compound_statement (1005,7)-(1007,8)
                      {: '{' (1005,7)-(1005,8)
                      expression_statement (1006,9)-(1006,64)
                        assignment_expression (1006,9)-(1006,63)
                          field_expression (1006,9)-(1006,32)
                            identifier: 'scanner_context_p' (1006,9)-(1006,26)
                            ->: '->' (1006,26)-(1006,28)
                            field_identifier: 'mode' (1006,28)-(1006,32)
                          =: '=' (1006,33)-(1006,34)
                          identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1006,35)-(1006,63)
                        ;: ';' (1006,63)-(1006,64)
                      }: '}' (1007,7)-(1007,8)
                    else_clause (1008,7)-(1012,8)
                      else: 'else' (1008,7)-(1008,11)
                      compound_statement (1009,7)-(1012,8)
                        {: '{' (1009,7)-(1009,8)
                        expression_statement (1010,9)-(1010,44)
                          call_expression (1010,9)-(1010,43)
                            identifier: 'parser_stack_pop_uint8' (1010,9)-(1010,31)
                            argument_list (1010,32)-(1010,43)
                              (: '(' (1010,32)-(1010,33)
                              identifier: 'context_p' (1010,33)-(1010,42)
                              ): ')' (1010,42)-(1010,43)
                          ;: ';' (1010,43)-(1010,44)
                        expression_statement (1011,9)-(1011,69)
                          assignment_expression (1011,9)-(1011,68)
                            field_expression (1011,9)-(1011,32)
                              identifier: 'scanner_context_p' (1011,9)-(1011,26)
                              ->: '->' (1011,26)-(1011,28)
                              field_identifier: 'mode' (1011,28)-(1011,32)
                            =: '=' (1011,33)-(1011,34)
                            identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (1011,35)-(1011,68)
                          ;: ';' (1011,68)-(1011,69)
                        }: '}' (1012,7)-(1012,8)
                  return_statement (1013,7)-(1013,30)
                    return: 'return' (1013,7)-(1013,13)
                    identifier: 'SCAN_NEXT_TOKEN' (1013,14)-(1013,29)
                    ;: ';' (1013,29)-(1013,30)
                  }: '}' (1014,5)-(1014,6)
              case_statement (1015,5)-(1024,6)
                case: 'case' (1015,5)-(1015,9)
                identifier: 'SCAN_STACK_ARROW_ARGUMENTS' (1015,10)-(1015,36)
                :: ':' (1015,36)-(1015,37)
                compound_statement (1016,5)-(1024,6)
                  {: '{' (1016,5)-(1016,6)
                  if_statement (1017,7)-(1020,8)
                    if: 'if' (1017,7)-(1017,9)
                    parenthesized_expression (1017,10)-(1017,37)
                      (: '(' (1017,10)-(1017,11)
                      binary_expression (1017,11)-(1017,36)
                        identifier: 'type' (1017,11)-(1017,15)
                        !=: '!=' (1017,16)-(1017,18)
                        identifier: 'LEXER_RIGHT_PAREN' (1017,19)-(1017,36)
                      ): ')' (1017,36)-(1017,37)
                    compound_statement (1018,7)-(1020,8)
                      {: '{' (1018,7)-(1018,8)
                      break_statement (1019,9)-(1019,15)
                        break: 'break' (1019,9)-(1019,14)
                        ;: ';' (1019,14)-(1019,15)
                      }: '}' (1020,7)-(1020,8)
                  expression_statement (1022,7)-(1022,58)
                    call_expression (1022,7)-(1022,57)
                      identifier: 'scanner_check_arrow' (1022,7)-(1022,26)
                      argument_list (1022,27)-(1022,57)
                        (: '(' (1022,27)-(1022,28)
                        identifier: 'context_p' (1022,28)-(1022,37)
                        ,: ',' (1022,37)-(1022,38)
                        identifier: 'scanner_context_p' (1022,39)-(1022,56)
                        ): ')' (1022,56)-(1022,57)
                    ;: ';' (1022,57)-(1022,58)
                  return_statement (1023,7)-(1023,30)
                    return: 'return' (1023,7)-(1023,13)
                    identifier: 'SCAN_KEEP_TOKEN' (1023,14)-(1023,29)
                    ;: ';' (1023,29)-(1023,30)
                  }: '}' (1024,5)-(1024,6)
              case_statement (1025,5)-(1032,6)
                case: 'case' (1025,5)-(1025,9)
                identifier: 'SCAN_STACK_ARROW_EXPRESSION' (1025,10)-(1025,37)
                :: ':' (1025,37)-(1025,38)
                compound_statement (1026,5)-(1032,6)
                  {: '{' (1026,5)-(1026,6)
                  expression_statement (1027,7)-(1027,63)
                    call_expression (1027,7)-(1027,62)
                      identifier: 'scanner_pop_literal_pool' (1027,7)-(1027,31)
                      argument_list (1027,32)-(1027,62)
                        (: '(' (1027,32)-(1027,33)
                        identifier: 'context_p' (1027,33)-(1027,42)
                        ,: ',' (1027,42)-(1027,43)
                        identifier: 'scanner_context_p' (1027,44)-(1027,61)
                        ): ')' (1027,61)-(1027,62)
                    ;: ';' (1027,62)-(1027,63)
                  expression_statement (1028,7)-(1028,42)
                    call_expression (1028,7)-(1028,41)
                      identifier: 'parser_stack_pop_uint8' (1028,7)-(1028,29)
                      argument_list (1028,30)-(1028,41)
                        (: '(' (1028,30)-(1028,31)
                        identifier: 'context_p' (1028,31)-(1028,40)
                        ): ')' (1028,40)-(1028,41)
                    ;: ';' (1028,41)-(1028,42)
                  expression_statement (1029,7)-(1029,69)
                    call_expression (1029,7)-(1029,68)
                      identifier: 'lexer_update_await_yield' (1029,7)-(1029,31)
                      argument_list (1029,32)-(1029,68)
                        (: '(' (1029,32)-(1029,33)
                        identifier: 'context_p' (1029,33)-(1029,42)
                        ,: ',' (1029,42)-(1029,43)
                        field_expression (1029,44)-(1029,67)
                          identifier: 'context_p' (1029,44)-(1029,53)
                          ->: '->' (1029,53)-(1029,55)
                          field_identifier: 'status_flags' (1029,55)-(1029,67)
                        ): ')' (1029,67)-(1029,68)
                    ;: ';' (1029,68)-(1029,69)
                  expression_statement (1030,7)-(1030,66)
                    assignment_expression (1030,7)-(1030,65)
                      field_expression (1030,7)-(1030,30)
                        identifier: 'scanner_context_p' (1030,7)-(1030,24)
                        ->: '->' (1030,24)-(1030,26)
                        field_identifier: 'mode' (1030,26)-(1030,30)
                      =: '=' (1030,31)-(1030,32)
                      identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (1030,33)-(1030,65)
                    ;: ';' (1030,65)-(1030,66)
                  return_statement (1031,7)-(1031,30)
                    return: 'return' (1031,7)-(1031,13)
                    identifier: 'SCAN_KEEP_TOKEN' (1031,14)-(1031,29)
                    ;: ';' (1031,29)-(1031,30)
                  }: '}' (1032,5)-(1032,6)
              case_statement (1033,5)-(1044,6)
                case: 'case' (1033,5)-(1033,9)
                identifier: 'SCAN_STACK_CLASS_EXTENDS' (1033,10)-(1033,34)
                :: ':' (1033,34)-(1033,35)
                compound_statement (1034,5)-(1044,6)
                  {: '{' (1034,5)-(1034,6)
                  if_statement (1035,7)-(1038,8)
                    if: 'if' (1035,7)-(1035,9)
                    parenthesized_expression (1035,10)-(1035,36)
                      (: '(' (1035,10)-(1035,11)
                      binary_expression (1035,11)-(1035,35)
                        identifier: 'type' (1035,11)-(1035,15)
                        !=: '!=' (1035,16)-(1035,18)
                        identifier: 'LEXER_LEFT_BRACE' (1035,19)-(1035,35)
                      ): ')' (1035,35)-(1035,36)
                    compound_statement (1036,7)-(1038,8)
                      {: '{' (1036,7)-(1036,8)
                      break_statement (1037,9)-(1037,15)
                        break: 'break' (1037,9)-(1037,14)
                        ;: ';' (1037,14)-(1037,15)
                      }: '}' (1038,7)-(1038,8)
                  expression_statement (1040,7)-(1040,56)
                    assignment_expression (1040,7)-(1040,55)
                      field_expression (1040,7)-(1040,30)
                        identifier: 'scanner_context_p' (1040,7)-(1040,24)
                        ->: '->' (1040,24)-(1040,26)
                        field_identifier: 'mode' (1040,26)-(1040,30)
                      =: '=' (1040,31)-(1040,32)
                      identifier: 'SCAN_MODE_CLASS_METHOD' (1040,33)-(1040,55)
                    ;: ';' (1040,55)-(1040,56)
                  expression_statement (1041,7)-(1041,42)
                    call_expression (1041,7)-(1041,41)
                      identifier: 'parser_stack_pop_uint8' (1041,7)-(1041,29)
                      argument_list (1041,30)-(1041,41)
                        (: '(' (1041,30)-(1041,31)
                        identifier: 'context_p' (1041,31)-(1041,40)
                        ): ')' (1041,40)-(1041,41)
                    ;: ';' (1041,41)-(1041,42)
                  return_statement (1043,7)-(1043,30)
                    return: 'return' (1043,7)-(1043,13)
                    identifier: 'SCAN_KEEP_TOKEN' (1043,14)-(1043,29)
                    ;: ';' (1043,29)-(1043,30)
                  }: '}' (1044,5)-(1044,6)
              case_statement (1045,5)-(1057,6)
                case: 'case' (1045,5)-(1045,9)
                identifier: 'SCAN_STACK_FUNCTION_PARAMETERS' (1045,10)-(1045,40)
                :: ':' (1045,40)-(1045,41)
                compound_statement (1046,5)-(1057,6)
                  {: '{' (1046,5)-(1046,6)
                  expression_statement (1047,7)-(1047,42)
                    call_expression (1047,7)-(1047,41)
                      identifier: 'parser_stack_pop_uint8' (1047,7)-(1047,29)
                      argument_list (1047,30)-(1047,41)
                        (: '(' (1047,30)-(1047,31)
                        identifier: 'context_p' (1047,31)-(1047,40)
                        ): ')' (1047,40)-(1047,41)
                    ;: ';' (1047,41)-(1047,42)
                  if_statement (1049,7)-(1053,8)
                    if: 'if' (1049,7)-(1049,9)
                    parenthesized_expression (1049,10)-(1050,94)
                      (: '(' (1049,10)-(1049,11)
                      binary_expression (1049,11)-(1050,93)
                        binary_expression (1049,11)-(1049,36)
                          identifier: 'type' (1049,11)-(1049,15)
                          !=: '!=' (1049,16)-(1049,18)
                          identifier: 'LEXER_RIGHT_PAREN' (1049,19)-(1049,36)
                        &&: '&&' (1050,11)-(1050,13)
                        parenthesized_expression (1050,14)-(1050,93)
                          (: '(' (1050,14)-(1050,15)
                          binary_expression (1050,15)-(1050,92)
                            binary_expression (1050,15)-(1050,32)
                              identifier: 'type' (1050,15)-(1050,19)
                              !=: '!=' (1050,20)-(1050,22)
                              identifier: 'LEXER_EOS' (1050,23)-(1050,32)
                            ||: '||' (1050,33)-(1050,35)
                            binary_expression (1050,36)-(1050,92)
                              field_expression (1050,36)-(1050,62)
                                identifier: 'context_p' (1050,36)-(1050,45)
                                ->: '->' (1050,45)-(1050,47)
                                field_identifier: 'stack_top_uint8' (1050,47)-(1050,62)
                              !=: '!=' (1050,63)-(1050,65)
                              identifier: 'SCAN_STACK_SCRIPT_FUNCTION' (1050,66)-(1050,92)
                          ): ')' (1050,92)-(1050,93)
                      ): ')' (1050,93)-(1050,94)
                    compound_statement (1051,7)-(1053,8)
                      {: '{' (1051,7)-(1051,8)
                      break_statement (1052,9)-(1052,15)
                        break: 'break' (1052,9)-(1052,14)
                        ;: ';' (1052,14)-(1052,15)
                      }: '}' (1053,7)-(1053,8)
                  expression_statement (1055,7)-(1055,71)
                    assignment_expression (1055,7)-(1055,70)
                      field_expression (1055,7)-(1055,30)
                        identifier: 'scanner_context_p' (1055,7)-(1055,24)
                        ->: '->' (1055,24)-(1055,26)
                        field_identifier: 'mode' (1055,26)-(1055,30)
                      =: '=' (1055,31)-(1055,32)
                      identifier: 'SCAN_MODE_CONTINUE_FUNCTION_ARGUMENTS' (1055,33)-(1055,70)
                    ;: ';' (1055,70)-(1055,71)
                  return_statement (1056,7)-(1056,30)
                    return: 'return' (1056,7)-(1056,13)
                    identifier: 'SCAN_KEEP_TOKEN' (1056,14)-(1056,29)
                    ;: ';' (1056,29)-(1056,30)
                  }: '}' (1057,5)-(1057,6)
              #endif: '#endif' (1058,1)-(1058,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (1058,8)-(1058,36)
            case_statement (1059,5)-(1063,6)
              default: 'default' (1059,5)-(1059,12)
              :: ':' (1059,12)-(1059,13)
              compound_statement (1060,5)-(1063,6)
                {: '{' (1060,5)-(1060,6)
                expression_statement (1061,7)-(1061,57)
                  assignment_expression (1061,7)-(1061,56)
                    field_expression (1061,7)-(1061,30)
                      identifier: 'scanner_context_p' (1061,7)-(1061,24)
                      ->: '->' (1061,24)-(1061,26)
                      field_identifier: 'mode' (1061,26)-(1061,30)
                    =: '=' (1061,31)-(1061,32)
                    identifier: 'SCAN_MODE_STATEMENT_END' (1061,33)-(1061,56)
                  ;: ';' (1061,56)-(1061,57)
                return_statement (1062,7)-(1062,30)
                  return: 'return' (1062,7)-(1062,13)
                  identifier: 'SCAN_KEEP_TOKEN' (1062,14)-(1062,29)
                  ;: ';' (1062,29)-(1062,30)
                }: '}' (1063,5)-(1063,6)
            }: '}' (1064,3)-(1064,4)
        expression_statement (1066,3)-(1066,35)
          call_expression (1066,3)-(1066,34)
            identifier: 'scanner_raise_error' (1066,3)-(1066,22)
            argument_list (1066,23)-(1066,34)
              (: '(' (1066,23)-(1066,24)
              identifier: 'context_p' (1066,24)-(1066,33)
              ): ')' (1066,33)-(1066,34)
          ;: ';' (1066,34)-(1066,35)
        return_statement (1067,3)-(1067,26)
          return: 'return' (1067,3)-(1067,9)
          identifier: 'SCAN_NEXT_TOKEN' (1067,10)-(1067,25)
          ;: ';' (1067,25)-(1067,26)
        }: '}' (1068,1)-(1068,2)
    comment: '/* scanner_scan_primary_expression_end */' (1068,3)-(1068,44)
    comment: '/**
 * Scan statements.
 *
 * @return SCAN_NEXT_TOKEN to read the next token, or SCAN_KEEP_TOKEN to do nothing
 */' (1070,1)-(1074,4)
    function_definition (1075,1)-(1897,2)
      storage_class_specifier (1075,1)-(1075,7)
        static: 'static' (1075,1)-(1075,7)
      type_identifier: 'scan_return_types_t' (1075,8)-(1075,27)
      function_declarator (1076,1)-(1079,54)
        identifier: 'scanner_scan_statement' (1076,1)-(1076,23)
        parameter_list (1076,24)-(1079,54)
          (: '(' (1076,24)-(1076,25)
          parameter_declaration (1076,25)-(1076,52)
            type_identifier: 'parser_context_t' (1076,25)-(1076,41)
            pointer_declarator (1076,42)-(1076,52)
              *: '*' (1076,42)-(1076,43)
              identifier: 'context_p' (1076,43)-(1076,52)
          ,: ',' (1076,52)-(1076,53)
          comment: '/**< context */' (1076,54)-(1076,69)
          parameter_declaration (1077,25)-(1077,61)
            type_identifier: 'scanner_context_t' (1077,25)-(1077,42)
            pointer_declarator (1077,43)-(1077,61)
              *: '*' (1077,43)-(1077,44)
              identifier: 'scanner_context_p' (1077,44)-(1077,61)
          ,: ',' (1077,61)-(1077,62)
          comment: '/**< scanner context */' (1077,63)-(1077,86)
          parameter_declaration (1078,25)-(1078,48)
            type_identifier: 'lexer_token_type_t' (1078,25)-(1078,43)
            identifier: 'type' (1078,44)-(1078,48)
          ,: ',' (1078,48)-(1078,49)
          comment: '/**< current token type */' (1078,50)-(1078,76)
          parameter_declaration (1079,25)-(1079,53)
            type_identifier: 'scan_stack_modes_t' (1079,25)-(1079,43)
            identifier: 'stack_top' (1079,44)-(1079,53)
          ): ')' (1079,53)-(1079,54)
      comment: '/**< current stack top */' (1079,55)-(1079,80)
      compound_statement (1080,1)-(1897,2)
        {: '{' (1080,1)-(1080,2)
        switch_statement (1081,3)-(1818,4)
          switch: 'switch' (1081,3)-(1081,9)
          parenthesized_expression (1081,10)-(1081,16)
            (: '(' (1081,10)-(1081,11)
            identifier: 'type' (1081,11)-(1081,15)
            ): ')' (1081,15)-(1081,16)
          compound_statement (1082,3)-(1818,4)
            {: '{' (1082,3)-(1082,4)
            case_statement (1083,5)-(1087,6)
              case: 'case' (1083,5)-(1083,9)
              identifier: 'LEXER_SEMICOLON' (1083,10)-(1083,25)
              :: ':' (1083,25)-(1083,26)
              compound_statement (1084,5)-(1087,6)
                {: '{' (1084,5)-(1084,6)
                expression_statement (1085,7)-(1085,57)
                  assignment_expression (1085,7)-(1085,56)
                    field_expression (1085,7)-(1085,30)
                      identifier: 'scanner_context_p' (1085,7)-(1085,24)
                      ->: '->' (1085,24)-(1085,26)
                      field_identifier: 'mode' (1085,26)-(1085,30)
                    =: '=' (1085,31)-(1085,32)
                    identifier: 'SCAN_MODE_STATEMENT_END' (1085,33)-(1085,56)
                  ;: ';' (1085,56)-(1085,57)
                return_statement (1086,7)-(1086,30)
                  return: 'return' (1086,7)-(1086,13)
                  identifier: 'SCAN_KEEP_TOKEN' (1086,14)-(1086,29)
                  ;: ';' (1086,29)-(1086,30)
                }: '}' (1087,5)-(1087,6)
            case_statement (1088,5)-(1101,6)
              case: 'case' (1088,5)-(1088,9)
              identifier: 'LEXER_LEFT_BRACE' (1088,10)-(1088,26)
              :: ':' (1088,26)-(1088,27)
              compound_statement (1089,5)-(1101,6)
                {: '{' (1089,5)-(1089,6)
                preproc_if (1090,1)-(1096,7)
                  #if: '#if' (1090,1)-(1090,4)
                  call_expression (1090,5)-(1090,27)
                    identifier: 'ENABLED' (1090,5)-(1090,12)
                    argument_list (1090,13)-(1090,27)
                      (: '(' (1090,13)-(1090,14)
                      identifier: 'JERRY_ES2015' (1090,14)-(1090,26)
                      ): ')' (1090,26)-(1090,27)
                  
: '
' (1090,27)-(1091,1)
                  declaration (1091,7)-(1091,46)
                    type_identifier: 'scanner_literal_pool_t' (1091,7)-(1091,29)
                    pointer_declarator (1091,30)-(1091,45)
                      *: '*' (1091,30)-(1091,31)
                      identifier: 'literal_pool_p' (1091,31)-(1091,45)
                    ;: ';' (1091,45)-(1091,46)
                  expression_statement (1092,7)-(1094,79)
                    assignment_expression (1092,7)-(1094,78)
                      identifier: 'literal_pool_p' (1092,7)-(1092,21)
                      =: '=' (1092,22)-(1092,23)
                      call_expression (1092,24)-(1094,78)
                        identifier: 'scanner_push_literal_pool' (1092,24)-(1092,49)
                        argument_list (1092,50)-(1094,78)
                          (: '(' (1092,50)-(1092,51)
                          identifier: 'context_p' (1092,51)-(1092,60)
                          ,: ',' (1092,60)-(1092,61)
                          identifier: 'scanner_context_p' (1093,51)-(1093,68)
                          ,: ',' (1093,68)-(1093,69)
                          identifier: 'SCANNER_LITERAL_POOL_BLOCK' (1094,51)-(1094,77)
                          ): ')' (1094,77)-(1094,78)
                    ;: ';' (1094,78)-(1094,79)
                  expression_statement (1095,7)-(1095,54)
                    assignment_expression (1095,7)-(1095,53)
                      field_expression (1095,7)-(1095,31)
                        identifier: 'literal_pool_p' (1095,7)-(1095,21)
                        ->: '->' (1095,21)-(1095,23)
                        field_identifier: 'source_p' (1095,23)-(1095,31)
                      =: '=' (1095,32)-(1095,33)
                      field_expression (1095,34)-(1095,53)
                        identifier: 'context_p' (1095,34)-(1095,43)
                        ->: '->' (1095,43)-(1095,45)
                        field_identifier: 'source_p' (1095,45)-(1095,53)
                    ;: ';' (1095,53)-(1095,54)
                  #endif: '#endif' (1096,1)-(1096,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (1096,8)-(1096,36)
                expression_statement (1098,7)-(1098,67)
                  assignment_expression (1098,7)-(1098,66)
                    field_expression (1098,7)-(1098,30)
                      identifier: 'scanner_context_p' (1098,7)-(1098,24)
                      ->: '->' (1098,24)-(1098,26)
                      field_identifier: 'mode' (1098,26)-(1098,30)
                    =: '=' (1098,31)-(1098,32)
                    identifier: 'SCAN_MODE_STATEMENT_OR_TERMINATOR' (1098,33)-(1098,66)
                  ;: ';' (1098,66)-(1098,67)
                expression_statement (1099,7)-(1099,71)
                  call_expression (1099,7)-(1099,70)
                    identifier: 'parser_stack_push_uint8' (1099,7)-(1099,30)
                    argument_list (1099,31)-(1099,70)
                      (: '(' (1099,31)-(1099,32)
                      identifier: 'context_p' (1099,32)-(1099,41)
                      ,: ',' (1099,41)-(1099,42)
                      identifier: 'SCAN_STACK_BLOCK_STATEMENT' (1099,43)-(1099,69)
                      ): ')' (1099,69)-(1099,70)
                  ;: ';' (1099,70)-(1099,71)
                return_statement (1100,7)-(1100,30)
                  return: 'return' (1100,7)-(1100,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1100,14)-(1100,29)
                  ;: ';' (1100,29)-(1100,30)
                }: '}' (1101,5)-(1101,6)
            case_statement (1102,5)-(1107,6)
              case: 'case' (1102,5)-(1102,9)
              identifier: 'LEXER_KEYW_DO' (1102,10)-(1102,23)
              :: ':' (1102,23)-(1102,24)
              compound_statement (1103,5)-(1107,6)
                {: '{' (1103,5)-(1103,6)
                expression_statement (1104,7)-(1104,53)
                  assignment_expression (1104,7)-(1104,52)
                    field_expression (1104,7)-(1104,30)
                      identifier: 'scanner_context_p' (1104,7)-(1104,24)
                      ->: '->' (1104,24)-(1104,26)
                      field_identifier: 'mode' (1104,26)-(1104,30)
                    =: '=' (1104,31)-(1104,32)
                    identifier: 'SCAN_MODE_STATEMENT' (1104,33)-(1104,52)
                  ;: ';' (1104,52)-(1104,53)
                expression_statement (1105,7)-(1105,68)
                  call_expression (1105,7)-(1105,67)
                    identifier: 'parser_stack_push_uint8' (1105,7)-(1105,30)
                    argument_list (1105,31)-(1105,67)
                      (: '(' (1105,31)-(1105,32)
                      identifier: 'context_p' (1105,32)-(1105,41)
                      ,: ',' (1105,41)-(1105,42)
                      identifier: 'SCAN_STACK_DO_STATEMENT' (1105,43)-(1105,66)
                      ): ')' (1105,66)-(1105,67)
                  ;: ';' (1105,67)-(1105,68)
                return_statement (1106,7)-(1106,30)
                  return: 'return' (1106,7)-(1106,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1106,14)-(1106,29)
                  ;: ';' (1106,29)-(1106,30)
                }: '}' (1107,5)-(1107,6)
            case_statement (1108,5)-(1128,6)
              case: 'case' (1108,5)-(1108,9)
              identifier: 'LEXER_KEYW_TRY' (1108,10)-(1108,24)
              :: ':' (1108,24)-(1108,25)
              compound_statement (1109,5)-(1128,6)
                {: '{' (1109,5)-(1109,6)
                expression_statement (1110,7)-(1110,36)
                  call_expression (1110,7)-(1110,35)
                    identifier: 'lexer_next_token' (1110,7)-(1110,23)
                    argument_list (1110,24)-(1110,35)
                      (: '(' (1110,24)-(1110,25)
                      identifier: 'context_p' (1110,25)-(1110,34)
                      ): ')' (1110,34)-(1110,35)
                  ;: ';' (1110,35)-(1110,36)
                if_statement (1112,7)-(1115,8)
                  if: 'if' (1112,7)-(1112,9)
                  parenthesized_expression (1112,10)-(1112,53)
                    (: '(' (1112,10)-(1112,11)
                    binary_expression (1112,11)-(1112,52)
                      field_expression (1112,11)-(1112,32)
                        field_expression (1112,11)-(1112,27)
                          identifier: 'context_p' (1112,11)-(1112,20)
                          ->: '->' (1112,20)-(1112,22)
                          field_identifier: 'token' (1112,22)-(1112,27)
                        .: '.' (1112,27)-(1112,28)
                        field_identifier: 'type' (1112,28)-(1112,32)
                      !=: '!=' (1112,33)-(1112,35)
                      identifier: 'LEXER_LEFT_BRACE' (1112,36)-(1112,52)
                    ): ')' (1112,52)-(1112,53)
                  compound_statement (1113,7)-(1115,8)
                    {: '{' (1113,7)-(1113,8)
                    expression_statement (1114,9)-(1114,41)
                      call_expression (1114,9)-(1114,40)
                        identifier: 'scanner_raise_error' (1114,9)-(1114,28)
                        argument_list (1114,29)-(1114,40)
                          (: '(' (1114,29)-(1114,30)
                          identifier: 'context_p' (1114,30)-(1114,39)
                          ): ')' (1114,39)-(1114,40)
                      ;: ';' (1114,40)-(1114,41)
                    }: '}' (1115,7)-(1115,8)
                preproc_if (1117,1)-(1123,7)
                  #if: '#if' (1117,1)-(1117,4)
                  call_expression (1117,5)-(1117,27)
                    identifier: 'ENABLED' (1117,5)-(1117,12)
                    argument_list (1117,13)-(1117,27)
                      (: '(' (1117,13)-(1117,14)
                      identifier: 'JERRY_ES2015' (1117,14)-(1117,26)
                      ): ')' (1117,26)-(1117,27)
                  
: '
' (1117,27)-(1118,1)
                  declaration (1118,7)-(1118,46)
                    type_identifier: 'scanner_literal_pool_t' (1118,7)-(1118,29)
                    pointer_declarator (1118,30)-(1118,45)
                      *: '*' (1118,30)-(1118,31)
                      identifier: 'literal_pool_p' (1118,31)-(1118,45)
                    ;: ';' (1118,45)-(1118,46)
                  expression_statement (1119,7)-(1121,79)
                    assignment_expression (1119,7)-(1121,78)
                      identifier: 'literal_pool_p' (1119,7)-(1119,21)
                      =: '=' (1119,22)-(1119,23)
                      call_expression (1119,24)-(1121,78)
                        identifier: 'scanner_push_literal_pool' (1119,24)-(1119,49)
                        argument_list (1119,50)-(1121,78)
                          (: '(' (1119,50)-(1119,51)
                          identifier: 'context_p' (1119,51)-(1119,60)
                          ,: ',' (1119,60)-(1119,61)
                          identifier: 'scanner_context_p' (1120,51)-(1120,68)
                          ,: ',' (1120,68)-(1120,69)
                          identifier: 'SCANNER_LITERAL_POOL_BLOCK' (1121,51)-(1121,77)
                          ): ')' (1121,77)-(1121,78)
                    ;: ';' (1121,78)-(1121,79)
                  expression_statement (1122,7)-(1122,54)
                    assignment_expression (1122,7)-(1122,53)
                      field_expression (1122,7)-(1122,31)
                        identifier: 'literal_pool_p' (1122,7)-(1122,21)
                        ->: '->' (1122,21)-(1122,23)
                        field_identifier: 'source_p' (1122,23)-(1122,31)
                      =: '=' (1122,32)-(1122,33)
                      field_expression (1122,34)-(1122,53)
                        identifier: 'context_p' (1122,34)-(1122,43)
                        ->: '->' (1122,43)-(1122,45)
                        field_identifier: 'source_p' (1122,45)-(1122,53)
                    ;: ';' (1122,53)-(1122,54)
                  #endif: '#endif' (1123,1)-(1123,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (1123,8)-(1123,36)
                expression_statement (1125,7)-(1125,67)
                  assignment_expression (1125,7)-(1125,66)
                    field_expression (1125,7)-(1125,30)
                      identifier: 'scanner_context_p' (1125,7)-(1125,24)
                      ->: '->' (1125,24)-(1125,26)
                      field_identifier: 'mode' (1125,26)-(1125,30)
                    =: '=' (1125,31)-(1125,32)
                    identifier: 'SCAN_MODE_STATEMENT_OR_TERMINATOR' (1125,33)-(1125,66)
                  ;: ';' (1125,66)-(1125,67)
                expression_statement (1126,7)-(1126,69)
                  call_expression (1126,7)-(1126,68)
                    identifier: 'parser_stack_push_uint8' (1126,7)-(1126,30)
                    argument_list (1126,31)-(1126,68)
                      (: '(' (1126,31)-(1126,32)
                      identifier: 'context_p' (1126,32)-(1126,41)
                      ,: ',' (1126,41)-(1126,42)
                      identifier: 'SCAN_STACK_TRY_STATEMENT' (1126,43)-(1126,67)
                      ): ')' (1126,67)-(1126,68)
                  ;: ';' (1126,68)-(1126,69)
                return_statement (1127,7)-(1127,30)
                  return: 'return' (1127,7)-(1127,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1127,14)-(1127,29)
                  ;: ';' (1127,29)-(1127,30)
                }: '}' (1128,5)-(1128,6)
            case_statement (1129,5)-(1133,6)
              case: 'case' (1129,5)-(1129,9)
              identifier: 'LEXER_KEYW_DEBUGGER' (1129,10)-(1129,29)
              :: ':' (1129,29)-(1129,30)
              compound_statement (1130,5)-(1133,6)
                {: '{' (1130,5)-(1130,6)
                expression_statement (1131,7)-(1131,57)
                  assignment_expression (1131,7)-(1131,56)
                    field_expression (1131,7)-(1131,30)
                      identifier: 'scanner_context_p' (1131,7)-(1131,24)
                      ->: '->' (1131,24)-(1131,26)
                      field_identifier: 'mode' (1131,26)-(1131,30)
                    =: '=' (1131,31)-(1131,32)
                    identifier: 'SCAN_MODE_STATEMENT_END' (1131,33)-(1131,56)
                  ;: ';' (1131,56)-(1131,57)
                return_statement (1132,7)-(1132,30)
                  return: 'return' (1132,7)-(1132,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1132,14)-(1132,29)
                  ;: ';' (1132,29)-(1132,30)
                }: '}' (1133,5)-(1133,6)
            case_statement (1134,5)-(1134,24)
              case: 'case' (1134,5)-(1134,9)
              identifier: 'LEXER_KEYW_IF' (1134,10)-(1134,23)
              :: ':' (1134,23)-(1134,24)
            case_statement (1135,5)-(1135,26)
              case: 'case' (1135,5)-(1135,9)
              identifier: 'LEXER_KEYW_WITH' (1135,10)-(1135,25)
              :: ':' (1135,25)-(1135,26)
            case_statement (1136,5)-(1162,6)
              case: 'case' (1136,5)-(1136,9)
              identifier: 'LEXER_KEYW_SWITCH' (1136,10)-(1136,27)
              :: ':' (1136,27)-(1136,28)
              compound_statement (1137,5)-(1162,6)
                {: '{' (1137,5)-(1137,6)
                expression_statement (1138,7)-(1138,36)
                  call_expression (1138,7)-(1138,35)
                    identifier: 'lexer_next_token' (1138,7)-(1138,23)
                    argument_list (1138,24)-(1138,35)
                      (: '(' (1138,24)-(1138,25)
                      identifier: 'context_p' (1138,25)-(1138,34)
                      ): ')' (1138,34)-(1138,35)
                  ;: ';' (1138,35)-(1138,36)
                if_statement (1139,7)-(1142,8)
                  if: 'if' (1139,7)-(1139,9)
                  parenthesized_expression (1139,10)-(1139,53)
                    (: '(' (1139,10)-(1139,11)
                    binary_expression (1139,11)-(1139,52)
                      field_expression (1139,11)-(1139,32)
                        field_expression (1139,11)-(1139,27)
                          identifier: 'context_p' (1139,11)-(1139,20)
                          ->: '->' (1139,20)-(1139,22)
                          field_identifier: 'token' (1139,22)-(1139,27)
                        .: '.' (1139,27)-(1139,28)
                        field_identifier: 'type' (1139,28)-(1139,32)
                      !=: '!=' (1139,33)-(1139,35)
                      identifier: 'LEXER_LEFT_PAREN' (1139,36)-(1139,52)
                    ): ')' (1139,52)-(1139,53)
                  compound_statement (1140,7)-(1142,8)
                    {: '{' (1140,7)-(1140,8)
                    expression_statement (1141,9)-(1141,41)
                      call_expression (1141,9)-(1141,40)
                        identifier: 'scanner_raise_error' (1141,9)-(1141,28)
                        argument_list (1141,29)-(1141,40)
                          (: '(' (1141,29)-(1141,30)
                          identifier: 'context_p' (1141,30)-(1141,39)
                          ): ')' (1141,39)-(1141,40)
                      ;: ';' (1141,40)-(1141,41)
                    }: '}' (1142,7)-(1142,8)
                declaration (1144,7)-(1144,53)
                  primitive_type: 'uint8_t' (1144,7)-(1144,14)
                  init_declarator (1144,15)-(1144,52)
                    identifier: 'mode' (1144,15)-(1144,19)
                    =: '=' (1144,20)-(1144,21)
                    identifier: 'SCAN_STACK_STATEMENT_WITH_EXPR' (1144,22)-(1144,52)
                  ;: ';' (1144,52)-(1144,53)
                if_statement (1146,7)-(1157,8)
                  if: 'if' (1146,7)-(1146,9)
                  parenthesized_expression (1146,10)-(1146,33)
                    (: '(' (1146,10)-(1146,11)
                    binary_expression (1146,11)-(1146,32)
                      identifier: 'type' (1146,11)-(1146,15)
                      ==: '==' (1146,16)-(1146,18)
                      identifier: 'LEXER_KEYW_IF' (1146,19)-(1146,32)
                    ): ')' (1146,32)-(1146,33)
                  compound_statement (1147,7)-(1149,8)
                    {: '{' (1147,7)-(1147,8)
                    expression_statement (1148,9)-(1148,70)
                      call_expression (1148,9)-(1148,69)
                        identifier: 'parser_stack_push_uint8' (1148,9)-(1148,32)
                        argument_list (1148,33)-(1148,69)
                          (: '(' (1148,33)-(1148,34)
                          identifier: 'context_p' (1148,34)-(1148,43)
                          ,: ',' (1148,43)-(1148,44)
                          identifier: 'SCAN_STACK_IF_STATEMENT' (1148,45)-(1148,68)
                          ): ')' (1148,68)-(1148,69)
                      ;: ';' (1148,69)-(1148,70)
                    }: '}' (1149,7)-(1149,8)
                  else_clause (1150,7)-(1157,8)
                    else: 'else' (1150,7)-(1150,11)
                    if_statement (1150,12)-(1157,8)
                      if: 'if' (1150,12)-(1150,14)
                      parenthesized_expression (1150,15)-(1150,40)
                        (: '(' (1150,15)-(1150,16)
                        binary_expression (1150,16)-(1150,39)
                          identifier: 'type' (1150,16)-(1150,20)
                          ==: '==' (1150,21)-(1150,23)
                          identifier: 'LEXER_KEYW_WITH' (1150,24)-(1150,39)
                        ): ')' (1150,39)-(1150,40)
                      compound_statement (1151,7)-(1153,8)
                        {: '{' (1151,7)-(1151,8)
                        expression_statement (1152,9)-(1152,43)
                          assignment_expression (1152,9)-(1152,42)
                            identifier: 'mode' (1152,9)-(1152,13)
                            =: '=' (1152,14)-(1152,15)
                            identifier: 'SCAN_STACK_WITH_EXPRESSION' (1152,16)-(1152,42)
                          ;: ';' (1152,42)-(1152,43)
                        }: '}' (1153,7)-(1153,8)
                      else_clause (1154,7)-(1157,8)
                        else: 'else' (1154,7)-(1154,11)
                        if_statement (1154,12)-(1157,8)
                          if: 'if' (1154,12)-(1154,14)
                          parenthesized_expression (1154,15)-(1154,42)
                            (: '(' (1154,15)-(1154,16)
                            binary_expression (1154,16)-(1154,41)
                              identifier: 'type' (1154,16)-(1154,20)
                              ==: '==' (1154,21)-(1154,23)
                              identifier: 'LEXER_KEYW_SWITCH' (1154,24)-(1154,41)
                            ): ')' (1154,41)-(1154,42)
                          compound_statement (1155,7)-(1157,8)
                            {: '{' (1155,7)-(1155,8)
                            expression_statement (1156,9)-(1156,45)
                              assignment_expression (1156,9)-(1156,44)
                                identifier: 'mode' (1156,9)-(1156,13)
                                =: '=' (1156,14)-(1156,15)
                                identifier: 'SCAN_STACK_SWITCH_EXPRESSION' (1156,16)-(1156,44)
                              ;: ';' (1156,44)-(1156,45)
                            }: '}' (1157,7)-(1157,8)
                expression_statement (1159,7)-(1159,62)
                  assignment_expression (1159,7)-(1159,61)
                    field_expression (1159,7)-(1159,30)
                      identifier: 'scanner_context_p' (1159,7)-(1159,24)
                      ->: '->' (1159,24)-(1159,26)
                      field_identifier: 'mode' (1159,26)-(1159,30)
                    =: '=' (1159,31)-(1159,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1159,33)-(1159,61)
                  ;: ';' (1159,61)-(1159,62)
                expression_statement (1160,7)-(1160,49)
                  call_expression (1160,7)-(1160,48)
                    identifier: 'parser_stack_push_uint8' (1160,7)-(1160,30)
                    argument_list (1160,31)-(1160,48)
                      (: '(' (1160,31)-(1160,32)
                      identifier: 'context_p' (1160,32)-(1160,41)
                      ,: ',' (1160,41)-(1160,42)
                      identifier: 'mode' (1160,43)-(1160,47)
                      ): ')' (1160,47)-(1160,48)
                  ;: ';' (1160,48)-(1160,49)
                return_statement (1161,7)-(1161,30)
                  return: 'return' (1161,7)-(1161,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1161,14)-(1161,29)
                  ;: ';' (1161,29)-(1161,30)
                }: '}' (1162,5)-(1162,6)
            case_statement (1163,5)-(1180,6)
              case: 'case' (1163,5)-(1163,9)
              identifier: 'LEXER_KEYW_WHILE' (1163,10)-(1163,26)
              :: ':' (1163,26)-(1163,27)
              compound_statement (1164,5)-(1180,6)
                {: '{' (1164,5)-(1164,6)
                expression_statement (1165,7)-(1165,36)
                  call_expression (1165,7)-(1165,35)
                    identifier: 'lexer_next_token' (1165,7)-(1165,23)
                    argument_list (1165,24)-(1165,35)
                      (: '(' (1165,24)-(1165,25)
                      identifier: 'context_p' (1165,25)-(1165,34)
                      ): ')' (1165,34)-(1165,35)
                  ;: ';' (1165,35)-(1165,36)
                if_statement (1167,7)-(1170,8)
                  if: 'if' (1167,7)-(1167,9)
                  parenthesized_expression (1167,10)-(1167,53)
                    (: '(' (1167,10)-(1167,11)
                    binary_expression (1167,11)-(1167,52)
                      field_expression (1167,11)-(1167,32)
                        field_expression (1167,11)-(1167,27)
                          identifier: 'context_p' (1167,11)-(1167,20)
                          ->: '->' (1167,20)-(1167,22)
                          field_identifier: 'token' (1167,22)-(1167,27)
                        .: '.' (1167,27)-(1167,28)
                        field_identifier: 'type' (1167,28)-(1167,32)
                      !=: '!=' (1167,33)-(1167,35)
                      identifier: 'LEXER_LEFT_PAREN' (1167,36)-(1167,52)
                    ): ')' (1167,52)-(1167,53)
                  compound_statement (1168,7)-(1170,8)
                    {: '{' (1168,7)-(1168,8)
                    expression_statement (1169,9)-(1169,41)
                      call_expression (1169,9)-(1169,40)
                        identifier: 'scanner_raise_error' (1169,9)-(1169,28)
                        argument_list (1169,29)-(1169,40)
                          (: '(' (1169,29)-(1169,30)
                          identifier: 'context_p' (1169,30)-(1169,39)
                          ): ')' (1169,39)-(1169,40)
                      ;: ';' (1169,40)-(1169,41)
                    }: '}' (1170,7)-(1170,8)
                expression_statement (1172,7)-(1172,62)
                  assignment_expression (1172,7)-(1172,61)
                    field_expression (1172,7)-(1172,30)
                      identifier: 'scanner_context_p' (1172,7)-(1172,24)
                      ->: '->' (1172,24)-(1172,26)
                      field_identifier: 'mode' (1172,26)-(1172,30)
                    =: '=' (1172,31)-(1172,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1172,33)-(1172,61)
                  ;: ';' (1172,61)-(1172,62)
                declaration (1174,7)-(1174,43)
                  type_identifier: 'scanner_source_start_t' (1174,7)-(1174,29)
                  identifier: 'source_start' (1174,30)-(1174,42)
                  ;: ';' (1174,42)-(1174,43)
                expression_statement (1175,7)-(1175,51)
                  assignment_expression (1175,7)-(1175,50)
                    field_expression (1175,7)-(1175,28)
                      identifier: 'source_start' (1175,7)-(1175,19)
                      .: '.' (1175,19)-(1175,20)
                      field_identifier: 'source_p' (1175,20)-(1175,28)
                    =: '=' (1175,29)-(1175,30)
                    field_expression (1175,31)-(1175,50)
                      identifier: 'context_p' (1175,31)-(1175,40)
                      ->: '->' (1175,40)-(1175,42)
                      field_identifier: 'source_p' (1175,42)-(1175,50)
                  ;: ';' (1175,50)-(1175,51)
                expression_statement (1177,7)-(1177,85)
                  call_expression (1177,7)-(1177,84)
                    identifier: 'parser_stack_push' (1177,7)-(1177,24)
                    argument_list (1177,25)-(1177,84)
                      (: '(' (1177,25)-(1177,26)
                      identifier: 'context_p' (1177,26)-(1177,35)
                      ,: ',' (1177,35)-(1177,36)
                      pointer_expression (1177,37)-(1177,50)
                        &: '&' (1177,37)-(1177,38)
                        identifier: 'source_start' (1177,38)-(1177,50)
                      ,: ',' (1177,50)-(1177,51)
                      sizeof_expression (1177,52)-(1177,83)
                        sizeof: 'sizeof' (1177,52)-(1177,58)
                        parenthesized_expression (1177,59)-(1177,83)
                          (: '(' (1177,59)-(1177,60)
                          identifier: 'scanner_source_start_t' (1177,60)-(1177,82)
                          ): ')' (1177,82)-(1177,83)
                      ): ')' (1177,83)-(1177,84)
                  ;: ';' (1177,84)-(1177,85)
                expression_statement (1178,7)-(1178,72)
                  call_expression (1178,7)-(1178,71)
                    identifier: 'parser_stack_push_uint8' (1178,7)-(1178,30)
                    argument_list (1178,31)-(1178,71)
                      (: '(' (1178,31)-(1178,32)
                      identifier: 'context_p' (1178,32)-(1178,41)
                      ,: ',' (1178,41)-(1178,42)
                      identifier: 'SCAN_STACK_WHILE_EXPRESSION' (1178,43)-(1178,70)
                      ): ')' (1178,70)-(1178,71)
                  ;: ';' (1178,71)-(1178,72)
                return_statement (1179,7)-(1179,30)
                  return: 'return' (1179,7)-(1179,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1179,14)-(1179,29)
                  ;: ';' (1179,29)-(1179,30)
                }: '}' (1180,5)-(1180,6)
            case_statement (1181,5)-(1276,6)
              case: 'case' (1181,5)-(1181,9)
              identifier: 'LEXER_KEYW_FOR' (1181,10)-(1181,24)
              :: ':' (1181,24)-(1181,25)
              compound_statement (1182,5)-(1276,6)
                {: '{' (1182,5)-(1182,6)
                expression_statement (1183,7)-(1183,36)
                  call_expression (1183,7)-(1183,35)
                    identifier: 'lexer_next_token' (1183,7)-(1183,23)
                    argument_list (1183,24)-(1183,35)
                      (: '(' (1183,24)-(1183,25)
                      identifier: 'context_p' (1183,25)-(1183,34)
                      ): ')' (1183,34)-(1183,35)
                  ;: ';' (1183,35)-(1183,36)
                if_statement (1184,7)-(1187,8)
                  if: 'if' (1184,7)-(1184,9)
                  parenthesized_expression (1184,10)-(1184,53)
                    (: '(' (1184,10)-(1184,11)
                    binary_expression (1184,11)-(1184,52)
                      field_expression (1184,11)-(1184,32)
                        field_expression (1184,11)-(1184,27)
                          identifier: 'context_p' (1184,11)-(1184,20)
                          ->: '->' (1184,20)-(1184,22)
                          field_identifier: 'token' (1184,22)-(1184,27)
                        .: '.' (1184,27)-(1184,28)
                        field_identifier: 'type' (1184,28)-(1184,32)
                      !=: '!=' (1184,33)-(1184,35)
                      identifier: 'LEXER_LEFT_PAREN' (1184,36)-(1184,52)
                    ): ')' (1184,52)-(1184,53)
                  compound_statement (1185,7)-(1187,8)
                    {: '{' (1185,7)-(1185,8)
                    expression_statement (1186,9)-(1186,41)
                      call_expression (1186,9)-(1186,40)
                        identifier: 'scanner_raise_error' (1186,9)-(1186,28)
                        argument_list (1186,29)-(1186,40)
                          (: '(' (1186,29)-(1186,30)
                          identifier: 'context_p' (1186,30)-(1186,39)
                          ): ')' (1186,39)-(1186,40)
                      ;: ';' (1186,40)-(1186,41)
                    }: '}' (1187,7)-(1187,8)
                declaration (1189,7)-(1189,45)
                  type_identifier: 'scanner_for_statement_t' (1189,7)-(1189,30)
                  identifier: 'for_statement' (1189,31)-(1189,44)
                  ;: ';' (1189,44)-(1189,45)
                expression_statement (1190,7)-(1190,54)
                  assignment_expression (1190,7)-(1190,53)
                    field_expression (1190,7)-(1190,31)
                      field_expression (1190,7)-(1190,22)
                        identifier: 'for_statement' (1190,7)-(1190,20)
                        .: '.' (1190,20)-(1190,21)
                        field_identifier: 'u' (1190,21)-(1190,22)
                      .: '.' (1190,22)-(1190,23)
                      field_identifier: 'source_p' (1190,23)-(1190,31)
                    =: '=' (1190,32)-(1190,33)
                    field_expression (1190,34)-(1190,53)
                      identifier: 'context_p' (1190,34)-(1190,43)
                      ->: '->' (1190,43)-(1190,45)
                      field_identifier: 'source_p' (1190,45)-(1190,53)
                  ;: ';' (1190,53)-(1190,54)
                declaration (1191,7)-(1191,49)
                  primitive_type: 'uint8_t' (1191,7)-(1191,14)
                  init_declarator (1191,15)-(1191,48)
                    identifier: 'stack_mode' (1191,15)-(1191,25)
                    =: '=' (1191,26)-(1191,27)
                    identifier: 'SCAN_STACK_FOR_START' (1191,28)-(1191,48)
                  ;: ';' (1191,48)-(1191,49)
                declaration (1192,7)-(1192,57)
                  type_identifier: 'scan_return_types_t' (1192,7)-(1192,26)
                  init_declarator (1192,27)-(1192,56)
                    identifier: 'return_type' (1192,27)-(1192,38)
                    =: '=' (1192,39)-(1192,40)
                    identifier: 'SCAN_KEEP_TOKEN' (1192,41)-(1192,56)
                  ;: ';' (1192,56)-(1192,57)
                expression_statement (1194,7)-(1194,36)
                  call_expression (1194,7)-(1194,35)
                    identifier: 'lexer_next_token' (1194,7)-(1194,23)
                    argument_list (1194,24)-(1194,35)
                      (: '(' (1194,24)-(1194,25)
                      identifier: 'context_p' (1194,25)-(1194,34)
                      ): ')' (1194,34)-(1194,35)
                  ;: ';' (1194,35)-(1194,36)
                expression_statement (1195,7)-(1195,62)
                  assignment_expression (1195,7)-(1195,61)
                    field_expression (1195,7)-(1195,30)
                      identifier: 'scanner_context_p' (1195,7)-(1195,24)
                      ->: '->' (1195,24)-(1195,26)
                      field_identifier: 'mode' (1195,26)-(1195,30)
                    =: '=' (1195,31)-(1195,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1195,33)-(1195,61)
                  ;: ';' (1195,61)-(1195,62)
                preproc_if (1197,1)-(1199,7)
                  #if: '#if' (1197,1)-(1197,4)
                  call_expression (1197,5)-(1197,27)
                    identifier: 'ENABLED' (1197,5)-(1197,12)
                    argument_list (1197,13)-(1197,27)
                      (: '(' (1197,13)-(1197,14)
                      identifier: 'JERRY_ES2015' (1197,14)-(1197,26)
                      ): ')' (1197,26)-(1197,27)
                  
: '
' (1197,27)-(1198,1)
                  declaration (1198,7)-(1198,53)
                    type_qualifier (1198,7)-(1198,12)
                      const: 'const' (1198,7)-(1198,12)
                    primitive_type: 'uint8_t' (1198,13)-(1198,20)
                    init_declarator (1198,21)-(1198,52)
                      pointer_declarator (1198,21)-(1198,30)
                        *: '*' (1198,21)-(1198,22)
                        identifier: 'source_p' (1198,22)-(1198,30)
                      =: '=' (1198,31)-(1198,32)
                      field_expression (1198,33)-(1198,52)
                        identifier: 'context_p' (1198,33)-(1198,42)
                        ->: '->' (1198,42)-(1198,44)
                        field_identifier: 'source_p' (1198,44)-(1198,52)
                    ;: ';' (1198,52)-(1198,53)
                  #endif: '#endif' (1199,1)-(1199,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (1199,8)-(1199,36)
                switch_statement (1201,7)-(1271,8)
                  switch: 'switch' (1201,7)-(1201,13)
                  parenthesized_expression (1201,14)-(1201,37)
                    (: '(' (1201,14)-(1201,15)
                    field_expression (1201,15)-(1201,36)
                      field_expression (1201,15)-(1201,31)
                        identifier: 'context_p' (1201,15)-(1201,24)
                        ->: '->' (1201,24)-(1201,26)
                        field_identifier: 'token' (1201,26)-(1201,31)
                      .: '.' (1201,31)-(1201,32)
                      field_identifier: 'type' (1201,32)-(1201,36)
                    ): ')' (1201,36)-(1201,37)
                  compound_statement (1202,7)-(1271,8)
                    {: '{' (1202,7)-(1202,8)
                    case_statement (1203,9)-(1207,10)
                      case: 'case' (1203,9)-(1203,13)
                      identifier: 'LEXER_SEMICOLON' (1203,14)-(1203,29)
                      :: ':' (1203,29)-(1203,30)
                      compound_statement (1204,9)-(1207,10)
                        {: '{' (1204,9)-(1204,10)
                        expression_statement (1205,11)-(1205,70)
                          assignment_expression (1205,11)-(1205,69)
                            field_expression (1205,11)-(1205,34)
                              identifier: 'scanner_context_p' (1205,11)-(1205,28)
                              ->: '->' (1205,28)-(1205,30)
                              field_identifier: 'mode' (1205,30)-(1205,34)
                            =: '=' (1205,35)-(1205,36)
                            identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (1205,37)-(1205,69)
                          ;: ';' (1205,69)-(1205,70)
                        break_statement (1206,11)-(1206,17)
                          break: 'break' (1206,11)-(1206,16)
                          ;: ';' (1206,16)-(1206,17)
                        }: '}' (1207,9)-(1207,10)
                    case_statement (1208,9)-(1214,10)
                      case: 'case' (1208,9)-(1208,13)
                      identifier: 'LEXER_KEYW_VAR' (1208,14)-(1208,28)
                      :: ':' (1208,28)-(1208,29)
                      compound_statement (1209,9)-(1214,10)
                        {: '{' (1209,9)-(1209,10)
                        expression_statement (1210,11)-(1210,61)
                          assignment_expression (1210,11)-(1210,60)
                            field_expression (1210,11)-(1210,34)
                              identifier: 'scanner_context_p' (1210,11)-(1210,28)
                              ->: '->' (1210,28)-(1210,30)
                              field_identifier: 'mode' (1210,30)-(1210,34)
                            =: '=' (1210,35)-(1210,36)
                            identifier: 'SCAN_MODE_VAR_STATEMENT' (1210,37)-(1210,60)
                          ;: ';' (1210,60)-(1210,61)
                        expression_statement (1211,11)-(1211,49)
                          assignment_expression (1211,11)-(1211,48)
                            identifier: 'stack_mode' (1211,11)-(1211,21)
                            =: '=' (1211,22)-(1211,23)
                            identifier: 'SCAN_STACK_FOR_VAR_START' (1211,24)-(1211,48)
                          ;: ';' (1211,48)-(1211,49)
                        expression_statement (1212,11)-(1212,41)
                          assignment_expression (1212,11)-(1212,40)
                            identifier: 'return_type' (1212,11)-(1212,22)
                            =: '=' (1212,23)-(1212,24)
                            identifier: 'SCAN_NEXT_TOKEN' (1212,25)-(1212,40)
                          ;: ';' (1212,40)-(1212,41)
                        break_statement (1213,11)-(1213,17)
                          break: 'break' (1213,11)-(1213,16)
                          ;: ';' (1213,16)-(1213,17)
                        }: '}' (1214,9)-(1214,10)
                    preproc_if (1215,1)-(1270,7)
                      #if: '#if' (1215,1)-(1215,4)
                      call_expression (1215,5)-(1215,27)
                        identifier: 'ENABLED' (1215,5)-(1215,12)
                        argument_list (1215,13)-(1215,27)
                          (: '(' (1215,13)-(1215,14)
                          identifier: 'JERRY_ES2015' (1215,14)-(1215,26)
                          ): ')' (1215,26)-(1215,27)
                      
: '
' (1215,27)-(1216,1)
                      case_statement (1216,9)-(1252,10)
                        case: 'case' (1216,9)-(1216,13)
                        identifier: 'LEXER_LITERAL' (1216,14)-(1216,27)
                        :: ':' (1216,27)-(1216,28)
                        compound_statement (1217,9)-(1252,10)
                          {: '{' (1217,9)-(1217,10)
                          if_statement (1218,11)-(1221,12)
                            if: 'if' (1218,11)-(1218,13)
                            parenthesized_expression (1218,14)-(1218,47)
                              (: '(' (1218,14)-(1218,15)
                              unary_expression (1218,15)-(1218,46)
                                !: '!' (1218,15)-(1218,16)
                                call_expression (1218,16)-(1218,46)
                                  identifier: 'lexer_token_is_let' (1218,16)-(1218,34)
                                  argument_list (1218,35)-(1218,46)
                                    (: '(' (1218,35)-(1218,36)
                                    identifier: 'context_p' (1218,36)-(1218,45)
                                    ): ')' (1218,45)-(1218,46)
                              ): ')' (1218,46)-(1218,47)
                            compound_statement (1219,11)-(1221,12)
                              {: '{' (1219,11)-(1219,12)
                              break_statement (1220,13)-(1220,19)
                                break: 'break' (1220,13)-(1220,18)
                                ;: ';' (1220,18)-(1220,19)
                              }: '}' (1221,11)-(1221,12)
                          declaration (1223,11)-(1223,56)
                            type_identifier: 'parser_line_counter_t' (1223,11)-(1223,32)
                            init_declarator (1223,33)-(1223,55)
                              identifier: 'line' (1223,33)-(1223,37)
                              =: '=' (1223,38)-(1223,39)
                              field_expression (1223,40)-(1223,55)
                                identifier: 'context_p' (1223,40)-(1223,49)
                                ->: '->' (1223,49)-(1223,51)
                                field_identifier: 'line' (1223,51)-(1223,55)
                            ;: ';' (1223,55)-(1223,56)
                          declaration (1224,11)-(1224,60)
                            type_identifier: 'parser_line_counter_t' (1224,11)-(1224,32)
                            init_declarator (1224,33)-(1224,59)
                              identifier: 'column' (1224,33)-(1224,39)
                              =: '=' (1224,40)-(1224,41)
                              field_expression (1224,42)-(1224,59)
                                identifier: 'context_p' (1224,42)-(1224,51)
                                ->: '->' (1224,51)-(1224,53)
                                field_identifier: 'column' (1224,53)-(1224,59)
                            ;: ';' (1224,59)-(1224,60)
                          if_statement (1226,11)-(1233,12)
                            if: 'if' (1226,11)-(1226,13)
                            parenthesized_expression (1226,14)-(1226,45)
                              (: '(' (1226,14)-(1226,15)
                              call_expression (1226,15)-(1226,44)
                                identifier: 'lexer_check_arrow' (1226,15)-(1226,32)
                                argument_list (1226,33)-(1226,44)
                                  (: '(' (1226,33)-(1226,34)
                                  identifier: 'context_p' (1226,34)-(1226,43)
                                  ): ')' (1226,43)-(1226,44)
                              ): ')' (1226,44)-(1226,45)
                            compound_statement (1227,11)-(1233,12)
                              {: '{' (1227,11)-(1227,12)
                              expression_statement (1228,13)-(1228,44)
                                assignment_expression (1228,13)-(1228,43)
                                  field_expression (1228,13)-(1228,32)
                                    identifier: 'context_p' (1228,13)-(1228,22)
                                    ->: '->' (1228,22)-(1228,24)
                                    field_identifier: 'source_p' (1228,24)-(1228,32)
                                  =: '=' (1228,33)-(1228,34)
                                  identifier: 'source_p' (1228,35)-(1228,43)
                                ;: ';' (1228,43)-(1228,44)
                              expression_statement (1229,13)-(1229,36)
                                assignment_expression (1229,13)-(1229,35)
                                  field_expression (1229,13)-(1229,28)
                                    identifier: 'context_p' (1229,13)-(1229,22)
                                    ->: '->' (1229,22)-(1229,24)
                                    field_identifier: 'line' (1229,24)-(1229,28)
                                  =: '=' (1229,29)-(1229,30)
                                  identifier: 'line' (1229,31)-(1229,35)
                                ;: ';' (1229,35)-(1229,36)
                              expression_statement (1230,13)-(1230,40)
                                assignment_expression (1230,13)-(1230,39)
                                  field_expression (1230,13)-(1230,30)
                                    identifier: 'context_p' (1230,13)-(1230,22)
                                    ->: '->' (1230,22)-(1230,24)
                                    field_identifier: 'column' (1230,24)-(1230,30)
                                  =: '=' (1230,31)-(1230,32)
                                  identifier: 'column' (1230,33)-(1230,39)
                                ;: ';' (1230,39)-(1230,40)
                              expression_statement (1231,13)-(1231,71)
                                assignment_expression (1231,13)-(1231,70)
                                  field_expression (1231,13)-(1231,35)
                                    field_expression (1231,13)-(1231,29)
                                      identifier: 'context_p' (1231,13)-(1231,22)
                                      ->: '->' (1231,22)-(1231,24)
                                      field_identifier: 'token' (1231,24)-(1231,29)
                                    .: '.' (1231,29)-(1231,30)
                                    field_identifier: 'flags' (1231,30)-(1231,35)
                                  &=: '&=' (1231,36)-(1231,38)
                                  cast_expression (1231,39)-(1231,70)
                                    (: '(' (1231,39)-(1231,40)
                                    type_descriptor (1231,40)-(1231,47)
                                      primitive_type: 'uint8_t' (1231,40)-(1231,47)
                                    ): ')' (1231,47)-(1231,48)
                                    unary_expression (1231,49)-(1231,70)
                                      ~: '~' (1231,49)-(1231,50)
                                      identifier: 'LEXER_NO_SKIP_SPACES' (1231,50)-(1231,70)
                                ;: ';' (1231,70)-(1231,71)
                              break_statement (1232,13)-(1232,19)
                                break: 'break' (1232,13)-(1232,18)
                                ;: ';' (1232,18)-(1232,19)
                              }: '}' (1233,11)-(1233,12)
                          expression_statement (1235,11)-(1235,40)
                            call_expression (1235,11)-(1235,39)
                              identifier: 'lexer_next_token' (1235,11)-(1235,27)
                              argument_list (1235,28)-(1235,39)
                                (: '(' (1235,28)-(1235,29)
                                identifier: 'context_p' (1235,29)-(1235,38)
                                ): ')' (1235,38)-(1235,39)
                            ;: ';' (1235,39)-(1235,40)
                          expression_statement (1237,11)-(1237,61)
                            assignment_expression (1237,11)-(1237,60)
                              identifier: 'type' (1237,11)-(1237,15)
                              =: '=' (1237,16)-(1237,17)
                              cast_expression (1237,18)-(1237,60)
                                (: '(' (1237,18)-(1237,19)
                                type_descriptor (1237,19)-(1237,37)
                                  type_identifier: 'lexer_token_type_t' (1237,19)-(1237,37)
                                ): ')' (1237,37)-(1237,38)
                                field_expression (1237,39)-(1237,60)
                                  field_expression (1237,39)-(1237,55)
                                    identifier: 'context_p' (1237,39)-(1237,48)
                                    ->: '->' (1237,48)-(1237,50)
                                    field_identifier: 'token' (1237,50)-(1237,55)
                                  .: '.' (1237,55)-(1237,56)
                                  field_identifier: 'type' (1237,56)-(1237,60)
                            ;: ';' (1237,60)-(1237,61)
                          if_statement (1239,11)-(1248,12)
                            if: 'if' (1239,11)-(1239,13)
                            parenthesized_expression (1239,14)-(1241,103)
                              (: '(' (1239,14)-(1239,15)
                              binary_expression (1239,15)-(1241,102)
                                binary_expression (1239,15)-(1240,42)
                                  binary_expression (1239,15)-(1239,40)
                                    identifier: 'type' (1239,15)-(1239,19)
                                    !=: '!=' (1239,20)-(1239,22)
                                    identifier: 'LEXER_LEFT_SQUARE' (1239,23)-(1239,40)
                                  &&: '&&' (1240,15)-(1240,17)
                                  binary_expression (1240,18)-(1240,42)
                                    identifier: 'type' (1240,18)-(1240,22)
                                    !=: '!=' (1240,23)-(1240,25)
                                    identifier: 'LEXER_LEFT_BRACE' (1240,26)-(1240,42)
                                &&: '&&' (1241,15)-(1241,17)
                                parenthesized_expression (1241,18)-(1241,102)
                                  (: '(' (1241,18)-(1241,19)
                                  binary_expression (1241,19)-(1241,101)
                                    binary_expression (1241,19)-(1241,40)
                                      identifier: 'type' (1241,19)-(1241,23)
                                      !=: '!=' (1241,24)-(1241,26)
                                      identifier: 'LEXER_LITERAL' (1241,27)-(1241,40)
                                    ||: '||' (1241,41)-(1241,43)
                                    binary_expression (1241,44)-(1241,101)
                                      field_expression (1241,44)-(1241,78)
                                        field_expression (1241,44)-(1241,73)
                                          field_expression (1241,44)-(1241,60)
                                            identifier: 'context_p' (1241,44)-(1241,53)
                                            ->: '->' (1241,53)-(1241,55)
                                            field_identifier: 'token' (1241,55)-(1241,60)
                                          .: '.' (1241,60)-(1241,61)
                                          field_identifier: 'lit_location' (1241,61)-(1241,73)
                                        .: '.' (1241,73)-(1241,74)
                                        field_identifier: 'type' (1241,74)-(1241,78)
                                      !=: '!=' (1241,79)-(1241,81)
                                      identifier: 'LEXER_IDENT_LITERAL' (1241,82)-(1241,101)
                                  ): ')' (1241,101)-(1241,102)
                              ): ')' (1241,102)-(1241,103)
                            compound_statement (1242,11)-(1248,12)
                              {: '{' (1242,11)-(1242,12)
                              declaration (1243,13)-(1243,105)
                                type_identifier: 'scanner_info_t' (1243,13)-(1243,27)
                                init_declarator (1243,28)-(1243,104)
                                  pointer_declarator (1243,28)-(1243,35)
                                    *: '*' (1243,28)-(1243,29)
                                    identifier: 'info_p' (1243,29)-(1243,35)
                                  =: '=' (1243,36)-(1243,37)
                                  call_expression (1243,38)-(1243,104)
                                    identifier: 'scanner_insert_info' (1243,38)-(1243,57)
                                    argument_list (1243,58)-(1243,104)
                                      (: '(' (1243,58)-(1243,59)
                                      identifier: 'context_p' (1243,59)-(1243,68)
                                      ,: ',' (1243,68)-(1243,69)
                                      identifier: 'source_p' (1243,70)-(1243,78)
                                      ,: ',' (1243,78)-(1243,79)
                                      sizeof_expression (1243,80)-(1243,103)
                                        sizeof: 'sizeof' (1243,80)-(1243,86)
                                        parenthesized_expression (1243,87)-(1243,103)
                                          (: '(' (1243,87)-(1243,88)
                                          identifier: 'scanner_info_t' (1243,88)-(1243,102)
                                          ): ')' (1243,102)-(1243,103)
                                      ): ')' (1243,103)-(1243,104)
                                ;: ';' (1243,104)-(1243,105)
                              expression_statement (1244,13)-(1244,56)
                                assignment_expression (1244,13)-(1244,55)
                                  field_expression (1244,13)-(1244,25)
                                    identifier: 'info_p' (1244,13)-(1244,19)
                                    ->: '->' (1244,19)-(1244,21)
                                    field_identifier: 'type' (1244,21)-(1244,25)
                                  =: '=' (1244,26)-(1244,27)
                                  identifier: 'SCANNER_TYPE_LET_EXPRESSION' (1244,28)-(1244,55)
                                ;: ';' (1244,55)-(1244,56)
                              expression_statement (1246,13)-(1246,73)
                                assignment_expression (1246,13)-(1246,72)
                                  field_expression (1246,13)-(1246,36)
                                    identifier: 'scanner_context_p' (1246,13)-(1246,30)
                                    ->: '->' (1246,30)-(1246,32)
                                    field_identifier: 'mode' (1246,32)-(1246,36)
                                  =: '=' (1246,37)-(1246,38)
                                  identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (1246,39)-(1246,72)
                                ;: ';' (1246,72)-(1246,73)
                              break_statement (1247,13)-(1247,19)
                                break: 'break' (1247,13)-(1247,18)
                                ;: ';' (1247,18)-(1247,19)
                              }: '}' (1248,11)-(1248,12)
                          expression_statement (1250,11)-(1250,61)
                            assignment_expression (1250,11)-(1250,60)
                              field_expression (1250,11)-(1250,34)
                                identifier: 'scanner_context_p' (1250,11)-(1250,28)
                                ->: '->' (1250,28)-(1250,30)
                                field_identifier: 'mode' (1250,30)-(1250,34)
                              =: '=' (1250,35)-(1250,36)
                              identifier: 'SCAN_MODE_VAR_STATEMENT' (1250,37)-(1250,60)
                            ;: ';' (1250,60)-(1250,61)
                          comment: '/* FALLTHRU */' (1251,11)-(1251,25)
                          }: '}' (1252,9)-(1252,10)
                      case_statement (1253,9)-(1253,29)
                        case: 'case' (1253,9)-(1253,13)
                        identifier: 'LEXER_KEYW_LET' (1253,14)-(1253,28)
                        :: ':' (1253,28)-(1253,29)
                      case_statement (1254,9)-(1269,10)
                        case: 'case' (1254,9)-(1254,13)
                        identifier: 'LEXER_KEYW_CONST' (1254,14)-(1254,30)
                        :: ':' (1254,30)-(1254,31)
                        compound_statement (1255,9)-(1269,10)
                          {: '{' (1255,9)-(1255,10)
                          declaration (1256,11)-(1256,50)
                            type_identifier: 'scanner_literal_pool_t' (1256,11)-(1256,33)
                            pointer_declarator (1256,34)-(1256,49)
                              *: '*' (1256,34)-(1256,35)
                              identifier: 'literal_pool_p' (1256,35)-(1256,49)
                            ;: ';' (1256,49)-(1256,50)
                          expression_statement (1257,11)-(1257,113)
                            assignment_expression (1257,11)-(1257,112)
                              identifier: 'literal_pool_p' (1257,11)-(1257,25)
                              =: '=' (1257,26)-(1257,27)
                              call_expression (1257,28)-(1257,112)
                                identifier: 'scanner_push_literal_pool' (1257,28)-(1257,53)
                                argument_list (1257,54)-(1257,112)
                                  (: '(' (1257,54)-(1257,55)
                                  identifier: 'context_p' (1257,55)-(1257,64)
                                  ,: ',' (1257,64)-(1257,65)
                                  identifier: 'scanner_context_p' (1257,66)-(1257,83)
                                  ,: ',' (1257,83)-(1257,84)
                                  identifier: 'SCANNER_LITERAL_POOL_BLOCK' (1257,85)-(1257,111)
                                  ): ')' (1257,111)-(1257,112)
                            ;: ';' (1257,112)-(1257,113)
                          expression_statement (1258,11)-(1258,47)
                            assignment_expression (1258,11)-(1258,46)
                              field_expression (1258,11)-(1258,35)
                                identifier: 'literal_pool_p' (1258,11)-(1258,25)
                                ->: '->' (1258,25)-(1258,27)
                                field_identifier: 'source_p' (1258,27)-(1258,35)
                              =: '=' (1258,36)-(1258,37)
                              identifier: 'source_p' (1258,38)-(1258,46)
                            ;: ';' (1258,46)-(1258,47)
                          if_statement (1260,11)-(1264,12)
                            if: 'if' (1260,11)-(1260,13)
                            parenthesized_expression (1260,14)-(1260,71)
                              (: '(' (1260,14)-(1260,15)
                              binary_expression (1260,15)-(1260,70)
                                field_expression (1260,15)-(1260,38)
                                  identifier: 'scanner_context_p' (1260,15)-(1260,32)
                                  ->: '->' (1260,32)-(1260,34)
                                  field_identifier: 'mode' (1260,34)-(1260,38)
                                ==: '==' (1260,39)-(1260,41)
                                identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1260,42)-(1260,70)
                              ): ')' (1260,70)-(1260,71)
                            compound_statement (1261,11)-(1264,12)
                              {: '{' (1261,11)-(1261,12)
                              expression_statement (1262,13)-(1262,63)
                                assignment_expression (1262,13)-(1262,62)
                                  field_expression (1262,13)-(1262,36)
                                    identifier: 'scanner_context_p' (1262,13)-(1262,30)
                                    ->: '->' (1262,30)-(1262,32)
                                    field_identifier: 'mode' (1262,32)-(1262,36)
                                  =: '=' (1262,37)-(1262,38)
                                  identifier: 'SCAN_MODE_VAR_STATEMENT' (1262,39)-(1262,62)
                                ;: ';' (1262,62)-(1262,63)
                              expression_statement (1263,13)-(1263,43)
                                assignment_expression (1263,13)-(1263,42)
                                  identifier: 'return_type' (1263,13)-(1263,24)
                                  =: '=' (1263,25)-(1263,26)
                                  identifier: 'SCAN_NEXT_TOKEN' (1263,27)-(1263,42)
                                ;: ';' (1263,42)-(1263,43)
                              }: '}' (1264,11)-(1264,12)
                          expression_statement (1266,11)-(1267,97)
                            assignment_expression (1266,11)-(1267,96)
                              identifier: 'stack_mode' (1266,11)-(1266,21)
                              =: '=' (1266,22)-(1266,23)
                              parenthesized_expression (1266,24)-(1267,96)
                                (: '(' (1266,24)-(1266,25)
                                conditional_expression (1266,25)-(1267,95)
                                  parenthesized_expression (1266,25)-(1266,68)
                                    (: '(' (1266,25)-(1266,26)
                                    binary_expression (1266,26)-(1266,67)
                                      field_expression (1266,26)-(1266,47)
                                        field_expression (1266,26)-(1266,42)
                                          identifier: 'context_p' (1266,26)-(1266,35)
                                          ->: '->' (1266,35)-(1266,37)
                                          field_identifier: 'token' (1266,37)-(1266,42)
                                        .: '.' (1266,42)-(1266,43)
                                        field_identifier: 'type' (1266,43)-(1266,47)
                                      ==: '==' (1266,48)-(1266,50)
                                      identifier: 'LEXER_KEYW_CONST' (1266,51)-(1266,67)
                                    ): ')' (1266,67)-(1266,68)
                                  ?: '?' (1266,69)-(1266,70)
                                  identifier: 'SCAN_STACK_FOR_CONST_START' (1266,71)-(1266,97)
                                  :: ':' (1267,69)-(1267,70)
                                  identifier: 'SCAN_STACK_FOR_LET_START' (1267,71)-(1267,95)
                                ): ')' (1267,95)-(1267,96)
                            ;: ';' (1267,96)-(1267,97)
                          break_statement (1268,11)-(1268,17)
                            break: 'break' (1268,11)-(1268,16)
                            ;: ';' (1268,16)-(1268,17)
                          }: '}' (1269,9)-(1269,10)
                      #endif: '#endif' (1270,1)-(1270,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (1270,8)-(1270,36)
                    }: '}' (1271,7)-(1271,8)
                expression_statement (1273,7)-(1273,87)
                  call_expression (1273,7)-(1273,86)
                    identifier: 'parser_stack_push' (1273,7)-(1273,24)
                    argument_list (1273,25)-(1273,86)
                      (: '(' (1273,25)-(1273,26)
                      identifier: 'context_p' (1273,26)-(1273,35)
                      ,: ',' (1273,35)-(1273,36)
                      pointer_expression (1273,37)-(1273,51)
                        &: '&' (1273,37)-(1273,38)
                        identifier: 'for_statement' (1273,38)-(1273,51)
                      ,: ',' (1273,51)-(1273,52)
                      sizeof_expression (1273,53)-(1273,85)
                        sizeof: 'sizeof' (1273,53)-(1273,59)
                        parenthesized_expression (1273,60)-(1273,85)
                          (: '(' (1273,60)-(1273,61)
                          identifier: 'scanner_for_statement_t' (1273,61)-(1273,84)
                          ): ')' (1273,84)-(1273,85)
                      ): ')' (1273,85)-(1273,86)
                  ;: ';' (1273,86)-(1273,87)
                expression_statement (1274,7)-(1274,55)
                  call_expression (1274,7)-(1274,54)
                    identifier: 'parser_stack_push_uint8' (1274,7)-(1274,30)
                    argument_list (1274,31)-(1274,54)
                      (: '(' (1274,31)-(1274,32)
                      identifier: 'context_p' (1274,32)-(1274,41)
                      ,: ',' (1274,41)-(1274,42)
                      identifier: 'stack_mode' (1274,43)-(1274,53)
                      ): ')' (1274,53)-(1274,54)
                  ;: ';' (1274,54)-(1274,55)
                return_statement (1275,7)-(1275,26)
                  return: 'return' (1275,7)-(1275,13)
                  identifier: 'return_type' (1275,14)-(1275,25)
                  ;: ';' (1275,25)-(1275,26)
                }: '}' (1276,5)-(1276,6)
            case_statement (1277,5)-(1282,6)
              case: 'case' (1277,5)-(1277,9)
              identifier: 'LEXER_KEYW_VAR' (1277,10)-(1277,24)
              :: ':' (1277,24)-(1277,25)
              compound_statement (1278,5)-(1282,6)
                {: '{' (1278,5)-(1278,6)
                expression_statement (1279,7)-(1279,57)
                  assignment_expression (1279,7)-(1279,56)
                    field_expression (1279,7)-(1279,30)
                      identifier: 'scanner_context_p' (1279,7)-(1279,24)
                      ->: '->' (1279,24)-(1279,26)
                      field_identifier: 'mode' (1279,26)-(1279,30)
                    =: '=' (1279,31)-(1279,32)
                    identifier: 'SCAN_MODE_VAR_STATEMENT' (1279,33)-(1279,56)
                  ;: ';' (1279,56)-(1279,57)
                expression_statement (1280,7)-(1280,59)
                  call_expression (1280,7)-(1280,58)
                    identifier: 'parser_stack_push_uint8' (1280,7)-(1280,30)
                    argument_list (1280,31)-(1280,58)
                      (: '(' (1280,31)-(1280,32)
                      identifier: 'context_p' (1280,32)-(1280,41)
                      ,: ',' (1280,41)-(1280,42)
                      identifier: 'SCAN_STACK_VAR' (1280,43)-(1280,57)
                      ): ')' (1280,57)-(1280,58)
                  ;: ';' (1280,58)-(1280,59)
                return_statement (1281,7)-(1281,30)
                  return: 'return' (1281,7)-(1281,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1281,14)-(1281,29)
                  ;: ';' (1281,29)-(1281,30)
                }: '}' (1282,5)-(1282,6)
            preproc_if (1283,1)-(1296,7)
              #if: '#if' (1283,1)-(1283,4)
              call_expression (1283,5)-(1283,27)
                identifier: 'ENABLED' (1283,5)-(1283,12)
                argument_list (1283,13)-(1283,27)
                  (: '(' (1283,13)-(1283,14)
                  identifier: 'JERRY_ES2015' (1283,14)-(1283,26)
                  ): ')' (1283,26)-(1283,27)
              
: '
' (1283,27)-(1284,1)
              case_statement (1284,5)-(1289,6)
                case: 'case' (1284,5)-(1284,9)
                identifier: 'LEXER_KEYW_LET' (1284,10)-(1284,24)
                :: ':' (1284,24)-(1284,25)
                compound_statement (1285,5)-(1289,6)
                  {: '{' (1285,5)-(1285,6)
                  expression_statement (1286,7)-(1286,57)
                    assignment_expression (1286,7)-(1286,56)
                      field_expression (1286,7)-(1286,30)
                        identifier: 'scanner_context_p' (1286,7)-(1286,24)
                        ->: '->' (1286,24)-(1286,26)
                        field_identifier: 'mode' (1286,26)-(1286,30)
                      =: '=' (1286,31)-(1286,32)
                      identifier: 'SCAN_MODE_VAR_STATEMENT' (1286,33)-(1286,56)
                    ;: ';' (1286,56)-(1286,57)
                  expression_statement (1287,7)-(1287,59)
                    call_expression (1287,7)-(1287,58)
                      identifier: 'parser_stack_push_uint8' (1287,7)-(1287,30)
                      argument_list (1287,31)-(1287,58)
                        (: '(' (1287,31)-(1287,32)
                        identifier: 'context_p' (1287,32)-(1287,41)
                        ,: ',' (1287,41)-(1287,42)
                        identifier: 'SCAN_STACK_LET' (1287,43)-(1287,57)
                        ): ')' (1287,57)-(1287,58)
                    ;: ';' (1287,58)-(1287,59)
                  return_statement (1288,7)-(1288,30)
                    return: 'return' (1288,7)-(1288,13)
                    identifier: 'SCAN_NEXT_TOKEN' (1288,14)-(1288,29)
                    ;: ';' (1288,29)-(1288,30)
                  }: '}' (1289,5)-(1289,6)
              case_statement (1290,5)-(1295,6)
                case: 'case' (1290,5)-(1290,9)
                identifier: 'LEXER_KEYW_CONST' (1290,10)-(1290,26)
                :: ':' (1290,26)-(1290,27)
                compound_statement (1291,5)-(1295,6)
                  {: '{' (1291,5)-(1291,6)
                  expression_statement (1292,7)-(1292,57)
                    assignment_expression (1292,7)-(1292,56)
                      field_expression (1292,7)-(1292,30)
                        identifier: 'scanner_context_p' (1292,7)-(1292,24)
                        ->: '->' (1292,24)-(1292,26)
                        field_identifier: 'mode' (1292,26)-(1292,30)
                      =: '=' (1292,31)-(1292,32)
                      identifier: 'SCAN_MODE_VAR_STATEMENT' (1292,33)-(1292,56)
                    ;: ';' (1292,56)-(1292,57)
                  expression_statement (1293,7)-(1293,61)
                    call_expression (1293,7)-(1293,60)
                      identifier: 'parser_stack_push_uint8' (1293,7)-(1293,30)
                      argument_list (1293,31)-(1293,60)
                        (: '(' (1293,31)-(1293,32)
                        identifier: 'context_p' (1293,32)-(1293,41)
                        ,: ',' (1293,41)-(1293,42)
                        identifier: 'SCAN_STACK_CONST' (1293,43)-(1293,59)
                        ): ')' (1293,59)-(1293,60)
                    ;: ';' (1293,60)-(1293,61)
                  return_statement (1294,7)-(1294,30)
                    return: 'return' (1294,7)-(1294,13)
                    identifier: 'SCAN_NEXT_TOKEN' (1294,14)-(1294,29)
                    ;: ';' (1294,29)-(1294,30)
                  }: '}' (1295,5)-(1295,6)
              #endif: '#endif' (1296,1)-(1296,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (1296,8)-(1296,36)
            case_statement (1297,5)-(1301,6)
              case: 'case' (1297,5)-(1297,9)
              identifier: 'LEXER_KEYW_THROW' (1297,10)-(1297,26)
              :: ':' (1297,26)-(1297,27)
              compound_statement (1298,5)-(1301,6)
                {: '{' (1298,5)-(1298,6)
                expression_statement (1299,7)-(1299,62)
                  assignment_expression (1299,7)-(1299,61)
                    field_expression (1299,7)-(1299,30)
                      identifier: 'scanner_context_p' (1299,7)-(1299,24)
                      ->: '->' (1299,24)-(1299,26)
                      field_identifier: 'mode' (1299,26)-(1299,30)
                    =: '=' (1299,31)-(1299,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1299,33)-(1299,61)
                  ;: ';' (1299,61)-(1299,62)
                return_statement (1300,7)-(1300,30)
                  return: 'return' (1300,7)-(1300,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1300,14)-(1300,29)
                  ;: ';' (1300,29)-(1300,30)
                }: '}' (1301,5)-(1301,6)
            case_statement (1302,5)-(1317,6)
              case: 'case' (1302,5)-(1302,9)
              identifier: 'LEXER_KEYW_RETURN' (1302,10)-(1302,27)
              :: ':' (1302,27)-(1302,28)
              compound_statement (1303,5)-(1317,6)
                {: '{' (1303,5)-(1303,6)
                expression_statement (1304,7)-(1304,36)
                  call_expression (1304,7)-(1304,35)
                    identifier: 'lexer_next_token' (1304,7)-(1304,23)
                    argument_list (1304,24)-(1304,35)
                      (: '(' (1304,24)-(1304,25)
                      identifier: 'context_p' (1304,25)-(1304,34)
                      ): ')' (1304,34)-(1304,35)
                  ;: ';' (1304,35)-(1304,36)
                if_statement (1306,7)-(1313,8)
                  if: 'if' (1306,7)-(1306,9)
                  parenthesized_expression (1306,10)-(1309,57)
                    (: '(' (1306,10)-(1306,11)
                    binary_expression (1306,11)-(1309,56)
                      binary_expression (1306,11)-(1308,48)
                        binary_expression (1306,11)-(1307,54)
                          unary_expression (1306,11)-(1306,56)
                            !: '!' (1306,11)-(1306,12)
                            parenthesized_expression (1306,12)-(1306,56)
                              (: '(' (1306,12)-(1306,13)
                              binary_expression (1306,13)-(1306,55)
                                field_expression (1306,13)-(1306,35)
                                  field_expression (1306,13)-(1306,29)
                                    identifier: 'context_p' (1306,13)-(1306,22)
                                    ->: '->' (1306,22)-(1306,24)
                                    field_identifier: 'token' (1306,24)-(1306,29)
                                  .: '.' (1306,29)-(1306,30)
                                  field_identifier: 'flags' (1306,30)-(1306,35)
                                &: '&' (1306,36)-(1306,37)
                                identifier: 'LEXER_WAS_NEWLINE' (1306,38)-(1306,55)
                              ): ')' (1306,55)-(1306,56)
                          &&: '&&' (1307,11)-(1307,13)
                          binary_expression (1307,14)-(1307,54)
                            field_expression (1307,14)-(1307,35)
                              field_expression (1307,14)-(1307,30)
                                identifier: 'context_p' (1307,14)-(1307,23)
                                ->: '->' (1307,23)-(1307,25)
                                field_identifier: 'token' (1307,25)-(1307,30)
                              .: '.' (1307,30)-(1307,31)
                              field_identifier: 'type' (1307,31)-(1307,35)
                            !=: '!=' (1307,36)-(1307,38)
                            identifier: 'LEXER_SEMICOLON' (1307,39)-(1307,54)
                        &&: '&&' (1308,11)-(1308,13)
                        binary_expression (1308,14)-(1308,48)
                          field_expression (1308,14)-(1308,35)
                            field_expression (1308,14)-(1308,30)
                              identifier: 'context_p' (1308,14)-(1308,23)
                              ->: '->' (1308,23)-(1308,25)
                              field_identifier: 'token' (1308,25)-(1308,30)
                            .: '.' (1308,30)-(1308,31)
                            field_identifier: 'type' (1308,31)-(1308,35)
                          !=: '!=' (1308,36)-(1308,38)
                          identifier: 'LEXER_EOS' (1308,39)-(1308,48)
                      &&: '&&' (1309,11)-(1309,13)
                      binary_expression (1309,14)-(1309,56)
                        field_expression (1309,14)-(1309,35)
                          field_expression (1309,14)-(1309,30)
                            identifier: 'context_p' (1309,14)-(1309,23)
                            ->: '->' (1309,23)-(1309,25)
                            field_identifier: 'token' (1309,25)-(1309,30)
                          .: '.' (1309,30)-(1309,31)
                          field_identifier: 'type' (1309,31)-(1309,35)
                        !=: '!=' (1309,36)-(1309,38)
                        identifier: 'LEXER_RIGHT_BRACE' (1309,39)-(1309,56)
                    ): ')' (1309,56)-(1309,57)
                  compound_statement (1310,7)-(1313,8)
                    {: '{' (1310,7)-(1310,8)
                    expression_statement (1311,9)-(1311,64)
                      assignment_expression (1311,9)-(1311,63)
                        field_expression (1311,9)-(1311,32)
                          identifier: 'scanner_context_p' (1311,9)-(1311,26)
                          ->: '->' (1311,26)-(1311,28)
                          field_identifier: 'mode' (1311,28)-(1311,32)
                        =: '=' (1311,33)-(1311,34)
                        identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1311,35)-(1311,63)
                      ;: ';' (1311,63)-(1311,64)
                    return_statement (1312,9)-(1312,32)
                      return: 'return' (1312,9)-(1312,15)
                      identifier: 'SCAN_KEEP_TOKEN' (1312,16)-(1312,31)
                      ;: ';' (1312,31)-(1312,32)
                    }: '}' (1313,7)-(1313,8)
                expression_statement (1315,7)-(1315,57)
                  assignment_expression (1315,7)-(1315,56)
                    field_expression (1315,7)-(1315,30)
                      identifier: 'scanner_context_p' (1315,7)-(1315,24)
                      ->: '->' (1315,24)-(1315,26)
                      field_identifier: 'mode' (1315,26)-(1315,30)
                    =: '=' (1315,31)-(1315,32)
                    identifier: 'SCAN_MODE_STATEMENT_END' (1315,33)-(1315,56)
                  ;: ';' (1315,56)-(1315,57)
                return_statement (1316,7)-(1316,30)
                  return: 'return' (1316,7)-(1316,13)
                  identifier: 'SCAN_KEEP_TOKEN' (1316,14)-(1316,29)
                  ;: ';' (1316,29)-(1316,30)
                }: '}' (1317,5)-(1317,6)
            case_statement (1318,5)-(1318,27)
              case: 'case' (1318,5)-(1318,9)
              identifier: 'LEXER_KEYW_BREAK' (1318,10)-(1318,26)
              :: ':' (1318,26)-(1318,27)
            case_statement (1319,5)-(1331,6)
              case: 'case' (1319,5)-(1319,9)
              identifier: 'LEXER_KEYW_CONTINUE' (1319,10)-(1319,29)
              :: ':' (1319,29)-(1319,30)
              compound_statement (1320,5)-(1331,6)
                {: '{' (1320,5)-(1320,6)
                expression_statement (1321,7)-(1321,36)
                  call_expression (1321,7)-(1321,35)
                    identifier: 'lexer_next_token' (1321,7)-(1321,23)
                    argument_list (1321,24)-(1321,35)
                      (: '(' (1321,24)-(1321,25)
                      identifier: 'context_p' (1321,25)-(1321,34)
                      ): ')' (1321,34)-(1321,35)
                  ;: ';' (1321,35)-(1321,36)
                expression_statement (1322,7)-(1322,57)
                  assignment_expression (1322,7)-(1322,56)
                    field_expression (1322,7)-(1322,30)
                      identifier: 'scanner_context_p' (1322,7)-(1322,24)
                      ->: '->' (1322,24)-(1322,26)
                      field_identifier: 'mode' (1322,26)-(1322,30)
                    =: '=' (1322,31)-(1322,32)
                    identifier: 'SCAN_MODE_STATEMENT_END' (1322,33)-(1322,56)
                  ;: ';' (1322,56)-(1322,57)
                if_statement (1324,7)-(1329,8)
                  if: 'if' (1324,7)-(1324,9)
                  parenthesized_expression (1324,10)-(1326,72)
                    (: '(' (1324,10)-(1324,11)
                    binary_expression (1324,11)-(1326,71)
                      binary_expression (1324,11)-(1325,52)
                        unary_expression (1324,11)-(1324,56)
                          !: '!' (1324,11)-(1324,12)
                          parenthesized_expression (1324,12)-(1324,56)
                            (: '(' (1324,12)-(1324,13)
                            binary_expression (1324,13)-(1324,55)
                              field_expression (1324,13)-(1324,35)
                                field_expression (1324,13)-(1324,29)
                                  identifier: 'context_p' (1324,13)-(1324,22)
                                  ->: '->' (1324,22)-(1324,24)
                                  field_identifier: 'token' (1324,24)-(1324,29)
                                .: '.' (1324,29)-(1324,30)
                                field_identifier: 'flags' (1324,30)-(1324,35)
                              &: '&' (1324,36)-(1324,37)
                              identifier: 'LEXER_WAS_NEWLINE' (1324,38)-(1324,55)
                            ): ')' (1324,55)-(1324,56)
                        &&: '&&' (1325,11)-(1325,13)
                        binary_expression (1325,14)-(1325,52)
                          field_expression (1325,14)-(1325,35)
                            field_expression (1325,14)-(1325,30)
                              identifier: 'context_p' (1325,14)-(1325,23)
                              ->: '->' (1325,23)-(1325,25)
                              field_identifier: 'token' (1325,25)-(1325,30)
                            .: '.' (1325,30)-(1325,31)
                            field_identifier: 'type' (1325,31)-(1325,35)
                          ==: '==' (1325,36)-(1325,38)
                          identifier: 'LEXER_LITERAL' (1325,39)-(1325,52)
                      &&: '&&' (1326,11)-(1326,13)
                      binary_expression (1326,14)-(1326,71)
                        field_expression (1326,14)-(1326,48)
                          field_expression (1326,14)-(1326,43)
                            field_expression (1326,14)-(1326,30)
                              identifier: 'context_p' (1326,14)-(1326,23)
                              ->: '->' (1326,23)-(1326,25)
                              field_identifier: 'token' (1326,25)-(1326,30)
                            .: '.' (1326,30)-(1326,31)
                            field_identifier: 'lit_location' (1326,31)-(1326,43)
                          .: '.' (1326,43)-(1326,44)
                          field_identifier: 'type' (1326,44)-(1326,48)
                        ==: '==' (1326,49)-(1326,51)
                        identifier: 'LEXER_IDENT_LITERAL' (1326,52)-(1326,71)
                    ): ')' (1326,71)-(1326,72)
                  compound_statement (1327,7)-(1329,8)
                    {: '{' (1327,7)-(1327,8)
                    return_statement (1328,9)-(1328,32)
                      return: 'return' (1328,9)-(1328,15)
                      identifier: 'SCAN_NEXT_TOKEN' (1328,16)-(1328,31)
                      ;: ';' (1328,31)-(1328,32)
                    }: '}' (1329,7)-(1329,8)
                return_statement (1330,7)-(1330,30)
                  return: 'return' (1330,7)-(1330,13)
                  identifier: 'SCAN_KEEP_TOKEN' (1330,14)-(1330,29)
                  ;: ';' (1330,29)-(1330,30)
                }: '}' (1331,5)-(1331,6)
            case_statement (1332,5)-(1332,26)
              case: 'case' (1332,5)-(1332,9)
              identifier: 'LEXER_KEYW_CASE' (1332,10)-(1332,25)
              :: ':' (1332,25)-(1332,26)
            case_statement (1333,5)-(1370,6)
              case: 'case' (1333,5)-(1333,9)
              identifier: 'LEXER_KEYW_DEFAULT' (1333,10)-(1333,28)
              :: ':' (1333,28)-(1333,29)
              compound_statement (1334,5)-(1370,6)
                {: '{' (1334,5)-(1334,6)
                if_statement (1335,7)-(1338,8)
                  if: 'if' (1335,7)-(1335,9)
                  parenthesized_expression (1335,10)-(1335,48)
                    (: '(' (1335,10)-(1335,11)
                    binary_expression (1335,11)-(1335,47)
                      identifier: 'stack_top' (1335,11)-(1335,20)
                      !=: '!=' (1335,21)-(1335,23)
                      identifier: 'SCAN_STACK_SWITCH_BLOCK' (1335,24)-(1335,47)
                    ): ')' (1335,47)-(1335,48)
                  compound_statement (1336,7)-(1338,8)
                    {: '{' (1336,7)-(1336,8)
                    expression_statement (1337,9)-(1337,41)
                      call_expression (1337,9)-(1337,40)
                        identifier: 'scanner_raise_error' (1337,9)-(1337,28)
                        argument_list (1337,29)-(1337,40)
                          (: '(' (1337,29)-(1337,30)
                          identifier: 'context_p' (1337,30)-(1337,39)
                          ): ')' (1337,39)-(1337,40)
                      ;: ';' (1337,40)-(1337,41)
                    }: '}' (1338,7)-(1338,8)
                declaration (1340,7)-(1340,40)
                  type_identifier: 'scanner_case_info_t' (1340,7)-(1340,26)
                  pointer_declarator (1340,27)-(1340,39)
                    *: '*' (1340,27)-(1340,28)
                    identifier: 'case_info_p' (1340,28)-(1340,39)
                  ;: ';' (1340,39)-(1340,40)
                expression_statement (1341,7)-(1341,102)
                  assignment_expression (1341,7)-(1341,101)
                    identifier: 'case_info_p' (1341,7)-(1341,18)
                    =: '=' (1341,19)-(1341,20)
                    cast_expression (1341,21)-(1341,101)
                      (: '(' (1341,21)-(1341,22)
                      type_descriptor (1341,22)-(1341,43)
                        type_identifier: 'scanner_case_info_t' (1341,22)-(1341,41)
                        abstract_pointer_declarator (1341,42)-(1341,43)
                          *: '*' (1341,42)-(1341,43)
                      ): ')' (1341,43)-(1341,44)
                      call_expression (1341,45)-(1341,101)
                        identifier: 'scanner_malloc' (1341,45)-(1341,59)
                        argument_list (1341,60)-(1341,101)
                          (: '(' (1341,60)-(1341,61)
                          identifier: 'context_p' (1341,61)-(1341,70)
                          ,: ',' (1341,70)-(1341,71)
                          sizeof_expression (1341,72)-(1341,100)
                            sizeof: 'sizeof' (1341,72)-(1341,78)
                            parenthesized_expression (1341,79)-(1341,100)
                              (: '(' (1341,79)-(1341,80)
                              identifier: 'scanner_case_info_t' (1341,80)-(1341,99)
                              ): ')' (1341,99)-(1341,100)
                          ): ')' (1341,100)-(1341,101)
                  ;: ';' (1341,101)-(1341,102)
                expression_statement (1343,7)-(1343,79)
                  assignment_expression (1343,7)-(1343,78)
                    pointer_expression (1343,7)-(1343,64)
                      *: '*' (1343,7)-(1343,8)
                      parenthesized_expression (1343,8)-(1343,64)
                        (: '(' (1343,8)-(1343,9)
                        field_expression (1343,9)-(1343,63)
                          field_expression (1343,9)-(1343,51)
                            identifier: 'scanner_context_p' (1343,9)-(1343,26)
                            ->: '->' (1343,26)-(1343,28)
                            field_identifier: 'active_switch_statement' (1343,28)-(1343,51)
                          .: '.' (1343,51)-(1343,52)
                          field_identifier: 'last_case_p' (1343,52)-(1343,63)
                        ): ')' (1343,63)-(1343,64)
                    =: '=' (1343,65)-(1343,66)
                    identifier: 'case_info_p' (1343,67)-(1343,78)
                  ;: ';' (1343,78)-(1343,79)
                expression_statement (1344,7)-(1344,85)
                  assignment_expression (1344,7)-(1344,84)
                    field_expression (1344,7)-(1344,61)
                      field_expression (1344,7)-(1344,49)
                        identifier: 'scanner_context_p' (1344,7)-(1344,24)
                        ->: '->' (1344,24)-(1344,26)
                        field_identifier: 'active_switch_statement' (1344,26)-(1344,49)
                      .: '.' (1344,49)-(1344,50)
                      field_identifier: 'last_case_p' (1344,50)-(1344,61)
                    =: '=' (1344,62)-(1344,63)
                    pointer_expression (1344,64)-(1344,84)
                      &: '&' (1344,64)-(1344,65)
                      field_expression (1344,65)-(1344,84)
                        identifier: 'case_info_p' (1344,65)-(1344,76)
                        ->: '->' (1344,76)-(1344,78)
                        field_identifier: 'next_p' (1344,78)-(1344,84)
                  ;: ';' (1344,84)-(1344,85)
                expression_statement (1346,7)-(1346,34)
                  assignment_expression (1346,7)-(1346,33)
                    field_expression (1346,7)-(1346,26)
                      identifier: 'case_info_p' (1346,7)-(1346,18)
                      ->: '->' (1346,18)-(1346,20)
                      field_identifier: 'next_p' (1346,20)-(1346,26)
                    =: '=' (1346,27)-(1346,28)
                    null (1346,29)-(1346,33)
                      NULL: 'NULL' (1346,29)-(1346,33)
                  ;: ';' (1346,33)-(1346,34)
                expression_statement (1347,7)-(1347,64)
                  call_expression (1347,7)-(1347,63)
                    identifier: 'scanner_get_location' (1347,7)-(1347,27)
                    argument_list (1347,28)-(1347,63)
                      (: '(' (1347,28)-(1347,29)
                      pointer_expression (1347,29)-(1347,51)
                        &: '&' (1347,29)-(1347,30)
                        field_expression (1347,30)-(1347,51)
                          identifier: 'case_info_p' (1347,30)-(1347,41)
                          ->: '->' (1347,41)-(1347,43)
                          field_identifier: 'location' (1347,43)-(1347,51)
                      ,: ',' (1347,51)-(1347,52)
                      identifier: 'context_p' (1347,53)-(1347,62)
                      ): ')' (1347,62)-(1347,63)
                  ;: ';' (1347,63)-(1347,64)
                if_statement (1349,7)-(1360,8)
                  if: 'if' (1349,7)-(1349,9)
                  parenthesized_expression (1349,10)-(1349,38)
                    (: '(' (1349,10)-(1349,11)
                    binary_expression (1349,11)-(1349,37)
                      identifier: 'type' (1349,11)-(1349,15)
                      ==: '==' (1349,16)-(1349,18)
                      identifier: 'LEXER_KEYW_DEFAULT' (1349,19)-(1349,37)
                    ): ')' (1349,37)-(1349,38)
                  compound_statement (1350,7)-(1360,8)
                    {: '{' (1350,7)-(1350,8)
                    expression_statement (1351,9)-(1351,38)
                      call_expression (1351,9)-(1351,37)
                        identifier: 'lexer_next_token' (1351,9)-(1351,25)
                        argument_list (1351,26)-(1351,37)
                          (: '(' (1351,26)-(1351,27)
                          identifier: 'context_p' (1351,27)-(1351,36)
                          ): ')' (1351,36)-(1351,37)
                      ;: ';' (1351,37)-(1351,38)
                    if_statement (1353,9)-(1356,10)
                      if: 'if' (1353,9)-(1353,11)
                      parenthesized_expression (1353,12)-(1353,50)
                        (: '(' (1353,12)-(1353,13)
                        binary_expression (1353,13)-(1353,49)
                          field_expression (1353,13)-(1353,34)
                            field_expression (1353,13)-(1353,29)
                              identifier: 'context_p' (1353,13)-(1353,22)
                              ->: '->' (1353,22)-(1353,24)
                              field_identifier: 'token' (1353,24)-(1353,29)
                            .: '.' (1353,29)-(1353,30)
                            field_identifier: 'type' (1353,30)-(1353,34)
                          !=: '!=' (1353,35)-(1353,37)
                          identifier: 'LEXER_COLON' (1353,38)-(1353,49)
                        ): ')' (1353,49)-(1353,50)
                      compound_statement (1354,9)-(1356,10)
                        {: '{' (1354,9)-(1354,10)
                        expression_statement (1355,11)-(1355,43)
                          call_expression (1355,11)-(1355,42)
                            identifier: 'scanner_raise_error' (1355,11)-(1355,30)
                            argument_list (1355,31)-(1355,42)
                              (: '(' (1355,31)-(1355,32)
                              identifier: 'context_p' (1355,32)-(1355,41)
                              ): ')' (1355,41)-(1355,42)
                          ;: ';' (1355,42)-(1355,43)
                        }: '}' (1356,9)-(1356,10)
                    expression_statement (1358,9)-(1358,69)
                      assignment_expression (1358,9)-(1358,68)
                        field_expression (1358,9)-(1358,32)
                          identifier: 'scanner_context_p' (1358,9)-(1358,26)
                          ->: '->' (1358,26)-(1358,28)
                          field_identifier: 'mode' (1358,28)-(1358,32)
                        =: '=' (1358,33)-(1358,34)
                        identifier: 'SCAN_MODE_STATEMENT_OR_TERMINATOR' (1358,35)-(1358,68)
                      ;: ';' (1358,68)-(1358,69)
                    return_statement (1359,9)-(1359,32)
                      return: 'return' (1359,9)-(1359,15)
                      identifier: 'SCAN_NEXT_TOKEN' (1359,16)-(1359,31)
                      ;: ';' (1359,31)-(1359,32)
                    }: '}' (1360,7)-(1360,8)
                declaration (1362,7)-(1362,43)
                  type_identifier: 'scanner_source_start_t' (1362,7)-(1362,29)
                  identifier: 'source_start' (1362,30)-(1362,42)
                  ;: ';' (1362,42)-(1362,43)
                expression_statement (1363,7)-(1363,51)
                  assignment_expression (1363,7)-(1363,50)
                    field_expression (1363,7)-(1363,28)
                      identifier: 'source_start' (1363,7)-(1363,19)
                      .: '.' (1363,19)-(1363,20)
                      field_identifier: 'source_p' (1363,20)-(1363,28)
                    =: '=' (1363,29)-(1363,30)
                    field_expression (1363,31)-(1363,50)
                      identifier: 'context_p' (1363,31)-(1363,40)
                      ->: '->' (1363,40)-(1363,42)
                      field_identifier: 'source_p' (1363,42)-(1363,50)
                  ;: ';' (1363,50)-(1363,51)
                expression_statement (1365,7)-(1365,85)
                  call_expression (1365,7)-(1365,84)
                    identifier: 'parser_stack_push' (1365,7)-(1365,24)
                    argument_list (1365,25)-(1365,84)
                      (: '(' (1365,25)-(1365,26)
                      identifier: 'context_p' (1365,26)-(1365,35)
                      ,: ',' (1365,35)-(1365,36)
                      pointer_expression (1365,37)-(1365,50)
                        &: '&' (1365,37)-(1365,38)
                        identifier: 'source_start' (1365,38)-(1365,50)
                      ,: ',' (1365,50)-(1365,51)
                      sizeof_expression (1365,52)-(1365,83)
                        sizeof: 'sizeof' (1365,52)-(1365,58)
                        parenthesized_expression (1365,59)-(1365,83)
                          (: '(' (1365,59)-(1365,60)
                          identifier: 'scanner_source_start_t' (1365,60)-(1365,82)
                          ): ')' (1365,82)-(1365,83)
                      ): ')' (1365,83)-(1365,84)
                  ;: ';' (1365,84)-(1365,85)
                expression_statement (1366,7)-(1366,70)
                  call_expression (1366,7)-(1366,69)
                    identifier: 'parser_stack_push_uint8' (1366,7)-(1366,30)
                    argument_list (1366,31)-(1366,69)
                      (: '(' (1366,31)-(1366,32)
                      identifier: 'context_p' (1366,32)-(1366,41)
                      ,: ',' (1366,41)-(1366,42)
                      identifier: 'SCAN_STACK_CASE_STATEMENT' (1366,43)-(1366,68)
                      ): ')' (1366,68)-(1366,69)
                  ;: ';' (1366,69)-(1366,70)
                expression_statement (1368,7)-(1368,62)
                  assignment_expression (1368,7)-(1368,61)
                    field_expression (1368,7)-(1368,30)
                      identifier: 'scanner_context_p' (1368,7)-(1368,24)
                      ->: '->' (1368,24)-(1368,26)
                      field_identifier: 'mode' (1368,26)-(1368,30)
                    =: '=' (1368,31)-(1368,32)
                    identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1368,33)-(1368,61)
                  ;: ';' (1368,61)-(1368,62)
                return_statement (1369,7)-(1369,30)
                  return: 'return' (1369,7)-(1369,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1369,14)-(1369,29)
                  ;: ';' (1369,29)-(1369,30)
                }: '}' (1370,5)-(1370,6)
            case_statement (1371,5)-(1425,6)
              case: 'case' (1371,5)-(1371,9)
              identifier: 'LEXER_KEYW_FUNCTION' (1371,10)-(1371,29)
              :: ':' (1371,29)-(1371,30)
              compound_statement (1372,5)-(1425,6)
                {: '{' (1372,5)-(1372,6)
                preproc_if (1373,1)-(1381,7)
                  #if: '#if' (1373,1)-(1373,4)
                  call_expression (1373,5)-(1373,27)
                    identifier: 'ENABLED' (1373,5)-(1373,12)
                    argument_list (1373,13)-(1373,27)
                      (: '(' (1373,13)-(1373,14)
                      identifier: 'JERRY_ES2015' (1373,14)-(1373,26)
                      ): ')' (1373,26)-(1373,27)
                  
: '
' (1373,27)-(1374,1)
                  declaration (1374,7)-(1374,103)
                    primitive_type: 'uint16_t' (1374,7)-(1374,15)
                    init_declarator (1374,16)-(1374,102)
                      identifier: 'status_flags' (1374,16)-(1374,28)
                      =: '=' (1374,29)-(1374,30)
                      binary_expression (1374,31)-(1374,102)
                        identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (1374,31)-(1374,60)
                        |: '|' (1374,61)-(1374,62)
                        identifier: 'SCANNER_LITERAL_POOL_FUNCTION_STATEMENT' (1374,63)-(1374,102)
                    ;: ';' (1374,102)-(1374,103)
                  if_statement (1376,7)-(1380,8)
                    if: 'if' (1376,7)-(1376,9)
                    parenthesized_expression (1376,10)-(1376,53)
                      (: '(' (1376,10)-(1376,11)
                      binary_expression (1376,11)-(1376,52)
                        field_expression (1376,11)-(1376,44)
                          identifier: 'scanner_context_p' (1376,11)-(1376,28)
                          ->: '->' (1376,28)-(1376,30)
                          field_identifier: 'async_source_p' (1376,30)-(1376,44)
                        !=: '!=' (1376,45)-(1376,47)
                        null (1376,48)-(1376,52)
                          NULL: 'NULL' (1376,48)-(1376,52)
                      ): ')' (1376,52)-(1376,53)
                    compound_statement (1377,7)-(1380,8)
                      {: '{' (1377,7)-(1377,8)
                      expression_statement (1378,9)-(1378,85)
                        assignment_expression (1378,9)-(1378,84)
                          field_expression (1378,9)-(1378,40)
                            identifier: 'scanner_context_p' (1378,9)-(1378,26)
                            ->: '->' (1378,26)-(1378,28)
                            field_identifier: 'status_flags' (1378,28)-(1378,40)
                          |=: '|=' (1378,41)-(1378,43)
                          identifier: 'SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION' (1378,44)-(1378,84)
                        ;: ';' (1378,84)-(1378,85)
                      expression_statement (1379,9)-(1379,52)
                        assignment_expression (1379,9)-(1379,51)
                          identifier: 'status_flags' (1379,9)-(1379,21)
                          |=: '|=' (1379,22)-(1379,24)
                          identifier: 'SCANNER_LITERAL_POOL_ASYNC' (1379,25)-(1379,51)
                        ;: ';' (1379,51)-(1379,52)
                      }: '}' (1380,7)-(1380,8)
                  #endif: '#endif' (1381,1)-(1381,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (1381,8)-(1381,36)
                expression_statement (1383,7)-(1383,36)
                  call_expression (1383,7)-(1383,35)
                    identifier: 'lexer_next_token' (1383,7)-(1383,23)
                    argument_list (1383,24)-(1383,35)
                      (: '(' (1383,24)-(1383,25)
                      identifier: 'context_p' (1383,25)-(1383,34)
                      ): ')' (1383,34)-(1383,35)
                  ;: ';' (1383,35)-(1383,36)
                preproc_if (1385,1)-(1391,7)
                  #if: '#if' (1385,1)-(1385,4)
                  call_expression (1385,5)-(1385,27)
                    identifier: 'ENABLED' (1385,5)-(1385,12)
                    argument_list (1385,13)-(1385,27)
                      (: '(' (1385,13)-(1385,14)
                      identifier: 'JERRY_ES2015' (1385,14)-(1385,26)
                      ): ')' (1385,26)-(1385,27)
                  
: '
' (1385,27)-(1386,1)
                  if_statement (1386,7)-(1390,8)
                    if: 'if' (1386,7)-(1386,9)
                    parenthesized_expression (1386,10)-(1386,51)
                      (: '(' (1386,10)-(1386,11)
                      binary_expression (1386,11)-(1386,50)
                        field_expression (1386,11)-(1386,32)
                          field_expression (1386,11)-(1386,27)
                            identifier: 'context_p' (1386,11)-(1386,20)
                            ->: '->' (1386,20)-(1386,22)
                            field_identifier: 'token' (1386,22)-(1386,27)
                          .: '.' (1386,27)-(1386,28)
                          field_identifier: 'type' (1386,28)-(1386,32)
                        ==: '==' (1386,33)-(1386,35)
                        identifier: 'LEXER_MULTIPLY' (1386,36)-(1386,50)
                      ): ')' (1386,50)-(1386,51)
                    compound_statement (1387,7)-(1390,8)
                      {: '{' (1387,7)-(1387,8)
                      expression_statement (1388,9)-(1388,56)
                        assignment_expression (1388,9)-(1388,55)
                          identifier: 'status_flags' (1388,9)-(1388,21)
                          |=: '|=' (1388,22)-(1388,24)
                          identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (1388,25)-(1388,55)
                        ;: ';' (1388,55)-(1388,56)
                      expression_statement (1389,9)-(1389,38)
                        call_expression (1389,9)-(1389,37)
                          identifier: 'lexer_next_token' (1389,9)-(1389,25)
                          argument_list (1389,26)-(1389,37)
                            (: '(' (1389,26)-(1389,27)
                            identifier: 'context_p' (1389,27)-(1389,36)
                            ): ')' (1389,36)-(1389,37)
                        ;: ';' (1389,37)-(1389,38)
                      }: '}' (1390,7)-(1390,8)
                  #endif: '#endif' (1391,1)-(1391,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (1391,8)-(1391,36)
                if_statement (1393,7)-(1397,8)
                  if: 'if' (1393,7)-(1393,9)
                  parenthesized_expression (1393,10)-(1394,72)
                    (: '(' (1393,10)-(1393,11)
                    binary_expression (1393,11)-(1394,71)
                      binary_expression (1393,11)-(1393,49)
                        field_expression (1393,11)-(1393,32)
                          field_expression (1393,11)-(1393,27)
                            identifier: 'context_p' (1393,11)-(1393,20)
                            ->: '->' (1393,20)-(1393,22)
                            field_identifier: 'token' (1393,22)-(1393,27)
                          .: '.' (1393,27)-(1393,28)
                          field_identifier: 'type' (1393,28)-(1393,32)
                        !=: '!=' (1393,33)-(1393,35)
                        identifier: 'LEXER_LITERAL' (1393,36)-(1393,49)
                      ||: '||' (1394,11)-(1394,13)
                      binary_expression (1394,14)-(1394,71)
                        field_expression (1394,14)-(1394,48)
                          field_expression (1394,14)-(1394,43)
                            field_expression (1394,14)-(1394,30)
                              identifier: 'context_p' (1394,14)-(1394,23)
                              ->: '->' (1394,23)-(1394,25)
                              field_identifier: 'token' (1394,25)-(1394,30)
                            .: '.' (1394,30)-(1394,31)
                            field_identifier: 'lit_location' (1394,31)-(1394,43)
                          .: '.' (1394,43)-(1394,44)
                          field_identifier: 'type' (1394,44)-(1394,48)
                        !=: '!=' (1394,49)-(1394,51)
                        identifier: 'LEXER_IDENT_LITERAL' (1394,52)-(1394,71)
                    ): ')' (1394,71)-(1394,72)
                  compound_statement (1395,7)-(1397,8)
                    {: '{' (1395,7)-(1395,8)
                    expression_statement (1396,9)-(1396,41)
                      call_expression (1396,9)-(1396,40)
                        identifier: 'scanner_raise_error' (1396,9)-(1396,28)
                        argument_list (1396,29)-(1396,40)
                          (: '(' (1396,29)-(1396,30)
                          identifier: 'context_p' (1396,30)-(1396,39)
                          ): ')' (1396,39)-(1396,40)
                      ;: ';' (1396,40)-(1396,41)
                    }: '}' (1397,7)-(1397,8)
                declaration (1399,7)-(1399,92)
                  type_identifier: 'lexer_lit_location_t' (1399,7)-(1399,27)
                  init_declarator (1399,28)-(1399,91)
                    pointer_declarator (1399,28)-(1399,38)
                      *: '*' (1399,28)-(1399,29)
                      identifier: 'literal_p' (1399,29)-(1399,38)
                    =: '=' (1399,39)-(1399,40)
                    call_expression (1399,41)-(1399,91)
                      identifier: 'scanner_add_literal' (1399,41)-(1399,60)
                      argument_list (1399,61)-(1399,91)
                        (: '(' (1399,61)-(1399,62)
                        identifier: 'context_p' (1399,62)-(1399,71)
                        ,: ',' (1399,71)-(1399,72)
                        identifier: 'scanner_context_p' (1399,73)-(1399,90)
                        ): ')' (1399,90)-(1399,91)
                  ;: ';' (1399,91)-(1399,92)
                preproc_if (1401,1)-(1418,7)
                  #if: '#if' (1401,1)-(1401,4)
                  call_expression (1401,5)-(1401,27)
                    identifier: 'ENABLED' (1401,5)-(1401,12)
                    argument_list (1401,13)-(1401,27)
                      (: '(' (1401,13)-(1401,14)
                      identifier: 'JERRY_ES2015' (1401,14)-(1401,26)
                      ): ')' (1401,26)-(1401,27)
                  
: '
' (1401,27)-(1402,1)
                  declaration (1402,7)-(1402,106)
                    type_qualifier (1402,7)-(1402,12)
                      const: 'const' (1402,7)-(1402,12)
                    primitive_type: 'uint8_t' (1402,13)-(1402,20)
                    init_declarator (1402,21)-(1402,105)
                      identifier: 'mask' (1402,21)-(1402,25)
                      =: '=' (1402,26)-(1402,27)
                      parenthesized_expression (1402,28)-(1402,105)
                        (: '(' (1402,28)-(1402,29)
                        binary_expression (1402,29)-(1402,104)
                          binary_expression (1402,29)-(1402,77)
                            identifier: 'SCANNER_LITERAL_IS_ARG' (1402,29)-(1402,51)
                            |: '|' (1402,52)-(1402,53)
                            identifier: 'SCANNER_LITERAL_IS_FUNC' (1402,54)-(1402,77)
                          |: '|' (1402,78)-(1402,79)
                          identifier: 'SCANNER_LITERAL_IS_LOCAL' (1402,80)-(1402,104)
                        ): ')' (1402,104)-(1402,105)
                    ;: ';' (1402,105)-(1402,106)
                  if_statement (1404,7)-(1409,8)
                    if: 'if' (1404,7)-(1404,9)
                    parenthesized_expression (1404,10)-(1406,106)
                      (: '(' (1404,10)-(1404,11)
                      binary_expression (1404,11)-(1406,105)
                        binary_expression (1404,11)-(1405,104)
                          parenthesized_expression (1404,11)-(1404,55)
                            (: '(' (1404,11)-(1404,12)
                            binary_expression (1404,12)-(1404,54)
                              field_expression (1404,12)-(1404,27)
                                identifier: 'literal_p' (1404,12)-(1404,21)
                                ->: '->' (1404,21)-(1404,23)
                                field_identifier: 'type' (1404,23)-(1404,27)
                              &: '&' (1404,28)-(1404,29)
                              identifier: 'SCANNER_LITERAL_IS_LOCAL' (1404,30)-(1404,54)
                            ): ')' (1404,54)-(1404,55)
                          &&: '&&' (1405,11)-(1405,13)
                          binary_expression (1405,14)-(1405,104)
                            parenthesized_expression (1405,14)-(1405,38)
                              (: '(' (1405,14)-(1405,15)
                              binary_expression (1405,15)-(1405,37)
                                field_expression (1405,15)-(1405,30)
                                  identifier: 'literal_p' (1405,15)-(1405,24)
                                  ->: '->' (1405,24)-(1405,26)
                                  field_identifier: 'type' (1405,26)-(1405,30)
                                &: '&' (1405,31)-(1405,32)
                                identifier: 'mask' (1405,33)-(1405,37)
                              ): ')' (1405,37)-(1405,38)
                            !=: '!=' (1405,39)-(1405,41)
                            parenthesized_expression (1405,42)-(1405,104)
                              (: '(' (1405,42)-(1405,43)
                              binary_expression (1405,43)-(1405,103)
                                identifier: 'SCANNER_LITERAL_IS_ARG' (1405,43)-(1405,65)
                                |: '|' (1405,66)-(1405,67)
                                identifier: 'SCANNER_LITERAL_IS_DESTRUCTURED_ARG' (1405,68)-(1405,103)
                              ): ')' (1405,103)-(1405,104)
                        &&: '&&' (1406,11)-(1406,13)
                        binary_expression (1406,14)-(1406,105)
                          parenthesized_expression (1406,14)-(1406,38)
                            (: '(' (1406,14)-(1406,15)
                            binary_expression (1406,15)-(1406,37)
                              field_expression (1406,15)-(1406,30)
                                identifier: 'literal_p' (1406,15)-(1406,24)
                                ->: '->' (1406,24)-(1406,26)
                                field_identifier: 'type' (1406,26)-(1406,30)
                              &: '&' (1406,31)-(1406,32)
                              identifier: 'mask' (1406,33)-(1406,37)
                            ): ')' (1406,37)-(1406,38)
                          !=: '!=' (1406,39)-(1406,41)
                          parenthesized_expression (1406,42)-(1406,105)
                            (: '(' (1406,42)-(1406,43)
                            binary_expression (1406,43)-(1406,104)
                              identifier: 'SCANNER_LITERAL_IS_FUNC' (1406,43)-(1406,66)
                              |: '|' (1406,67)-(1406,68)
                              identifier: 'SCANNER_LITERAL_IS_FUNC_DECLARATION' (1406,69)-(1406,104)
                            ): ')' (1406,104)-(1406,105)
                      ): ')' (1406,105)-(1406,106)
                    compound_statement (1407,7)-(1409,8)
                      {: '{' (1407,7)-(1407,8)
                      expression_statement (1408,9)-(1408,55)
                        call_expression (1408,9)-(1408,54)
                          identifier: 'scanner_raise_redeclaration_error' (1408,9)-(1408,42)
                          argument_list (1408,43)-(1408,54)
                            (: '(' (1408,43)-(1408,44)
                            identifier: 'context_p' (1408,44)-(1408,53)
                            ): ')' (1408,53)-(1408,54)
                        ;: ';' (1408,54)-(1408,55)
                      }: '}' (1409,7)-(1409,8)
                  expression_statement (1411,7)-(1411,88)
                    assignment_expression (1411,7)-(1411,87)
                      field_expression (1411,7)-(1411,22)
                        identifier: 'literal_p' (1411,7)-(1411,16)
                        ->: '->' (1411,16)-(1411,18)
                        field_identifier: 'type' (1411,18)-(1411,22)
                      |=: '|=' (1411,23)-(1411,25)
                      binary_expression (1411,26)-(1411,87)
                        identifier: 'SCANNER_LITERAL_IS_FUNC' (1411,26)-(1411,49)
                        |: '|' (1411,50)-(1411,51)
                        identifier: 'SCANNER_LITERAL_IS_FUNC_DECLARATION' (1411,52)-(1411,87)
                    ;: ';' (1411,87)-(1411,88)
                  expression_statement (1413,7)-(1413,95)
                    assignment_expression (1413,7)-(1413,94)
                      field_expression (1413,7)-(1413,38)
                        identifier: 'scanner_context_p' (1413,7)-(1413,24)
                        ->: '->' (1413,24)-(1413,26)
                        field_identifier: 'status_flags' (1413,26)-(1413,38)
                      &=: '&=' (1413,39)-(1413,41)
                      cast_expression (1413,42)-(1413,94)
                        (: '(' (1413,42)-(1413,43)
                        type_descriptor (1413,43)-(1413,51)
                          primitive_type: 'uint16_t' (1413,43)-(1413,51)
                        ): ')' (1413,51)-(1413,52)
                        unary_expression (1413,53)-(1413,94)
                          ~: '~' (1413,53)-(1413,54)
                          identifier: 'SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION' (1413,54)-(1413,94)
                    ;: ';' (1413,94)-(1413,95)
                  preproc_else (1414,1)-(1417,61)
                    #else: '#else' (1414,1)-(1414,6)
                    expression_statement (1415,7)-(1415,75)
                      assignment_expression (1415,7)-(1415,74)
                        field_expression (1415,7)-(1415,22)
                          identifier: 'literal_p' (1415,7)-(1415,16)
                          ->: '->' (1415,16)-(1415,18)
                          field_identifier: 'type' (1415,18)-(1415,22)
                        |=: '|=' (1415,23)-(1415,25)
                        binary_expression (1415,26)-(1415,74)
                          identifier: 'SCANNER_LITERAL_IS_VAR' (1415,26)-(1415,48)
                          |: '|' (1415,49)-(1415,50)
                          identifier: 'SCANNER_LITERAL_IS_FUNC' (1415,51)-(1415,74)
                      ;: ';' (1415,74)-(1415,75)
                    declaration (1417,7)-(1417,61)
                      primitive_type: 'uint16_t' (1417,7)-(1417,15)
                      init_declarator (1417,16)-(1417,60)
                        identifier: 'status_flags' (1417,16)-(1417,28)
                        =: '=' (1417,29)-(1417,30)
                        identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (1417,31)-(1417,60)
                      ;: ';' (1417,60)-(1417,61)
                  #endif: '#endif' (1418,1)-(1418,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (1418,8)-(1418,36)
                expression_statement (1420,7)-(1420,78)
                  call_expression (1420,7)-(1420,77)
                    identifier: 'scanner_push_literal_pool' (1420,7)-(1420,32)
                    argument_list (1420,33)-(1420,77)
                      (: '(' (1420,33)-(1420,34)
                      identifier: 'context_p' (1420,34)-(1420,43)
                      ,: ',' (1420,43)-(1420,44)
                      identifier: 'scanner_context_p' (1420,45)-(1420,62)
                      ,: ',' (1420,62)-(1420,63)
                      identifier: 'status_flags' (1420,64)-(1420,76)
                      ): ')' (1420,76)-(1420,77)
                  ;: ';' (1420,77)-(1420,78)
                expression_statement (1422,7)-(1422,62)
                  assignment_expression (1422,7)-(1422,61)
                    field_expression (1422,7)-(1422,30)
                      identifier: 'scanner_context_p' (1422,7)-(1422,24)
                      ->: '->' (1422,24)-(1422,26)
                      field_identifier: 'mode' (1422,26)-(1422,30)
                    =: '=' (1422,31)-(1422,32)
                    identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (1422,33)-(1422,61)
                  ;: ';' (1422,61)-(1422,62)
                expression_statement (1423,7)-(1423,74)
                  call_expression (1423,7)-(1423,73)
                    identifier: 'parser_stack_push_uint8' (1423,7)-(1423,30)
                    argument_list (1423,31)-(1423,73)
                      (: '(' (1423,31)-(1423,32)
                      identifier: 'context_p' (1423,32)-(1423,41)
                      ,: ',' (1423,41)-(1423,42)
                      identifier: 'SCAN_STACK_FUNCTION_STATEMENT' (1423,43)-(1423,72)
                      ): ')' (1423,72)-(1423,73)
                  ;: ';' (1423,73)-(1423,74)
                return_statement (1424,7)-(1424,30)
                  return: 'return' (1424,7)-(1424,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1424,14)-(1424,29)
                  ;: ';' (1424,29)-(1424,30)
                }: '}' (1425,5)-(1425,6)
            preproc_if (1426,1)-(1451,7)
              #if: '#if' (1426,1)-(1426,4)
              call_expression (1426,5)-(1426,27)
                identifier: 'ENABLED' (1426,5)-(1426,12)
                argument_list (1426,13)-(1426,27)
                  (: '(' (1426,13)-(1426,14)
                  identifier: 'JERRY_ES2015' (1426,14)-(1426,26)
                  ): ')' (1426,26)-(1426,27)
              
: '
' (1426,27)-(1427,1)
              case_statement (1427,5)-(1450,6)
                case: 'case' (1427,5)-(1427,9)
                identifier: 'LEXER_KEYW_CLASS' (1427,10)-(1427,26)
                :: ':' (1427,26)-(1427,27)
                compound_statement (1428,5)-(1450,6)
                  {: '{' (1428,5)-(1428,6)
                  expression_statement (1429,7)-(1429,97)
                    call_expression (1429,7)-(1429,96)
                      identifier: 'scanner_push_class_declaration' (1429,7)-(1429,37)
                      argument_list (1429,38)-(1429,96)
                        (: '(' (1429,38)-(1429,39)
                        identifier: 'context_p' (1429,39)-(1429,48)
                        ,: ',' (1429,48)-(1429,49)
                        identifier: 'scanner_context_p' (1429,50)-(1429,67)
                        ,: ',' (1429,67)-(1429,68)
                        identifier: 'SCAN_STACK_CLASS_STATEMENT' (1429,69)-(1429,95)
                        ): ')' (1429,95)-(1429,96)
                    ;: ';' (1429,96)-(1429,97)
                  if_statement (1431,7)-(1434,8)
                    if: 'if' (1431,7)-(1431,9)
                    parenthesized_expression (1431,10)-(1431,111)
                      (: '(' (1431,10)-(1431,11)
                      binary_expression (1431,11)-(1431,110)
                        binary_expression (1431,11)-(1431,49)
                          field_expression (1431,11)-(1431,32)
                            field_expression (1431,11)-(1431,27)
                              identifier: 'context_p' (1431,11)-(1431,20)
                              ->: '->' (1431,20)-(1431,22)
                              field_identifier: 'token' (1431,22)-(1431,27)
                            .: '.' (1431,27)-(1431,28)
                            field_identifier: 'type' (1431,28)-(1431,32)
                          !=: '!=' (1431,33)-(1431,35)
                          identifier: 'LEXER_LITERAL' (1431,36)-(1431,49)
                        ||: '||' (1431,50)-(1431,52)
                        binary_expression (1431,53)-(1431,110)
                          field_expression (1431,53)-(1431,87)
                            field_expression (1431,53)-(1431,82)
                              field_expression (1431,53)-(1431,69)
                                identifier: 'context_p' (1431,53)-(1431,62)
                                ->: '->' (1431,62)-(1431,64)
                                field_identifier: 'token' (1431,64)-(1431,69)
                              .: '.' (1431,69)-(1431,70)
                              field_identifier: 'lit_location' (1431,70)-(1431,82)
                            .: '.' (1431,82)-(1431,83)
                            field_identifier: 'type' (1431,83)-(1431,87)
                          !=: '!=' (1431,88)-(1431,90)
                          identifier: 'LEXER_IDENT_LITERAL' (1431,91)-(1431,110)
                      ): ')' (1431,110)-(1431,111)
                    compound_statement (1432,7)-(1434,8)
                      {: '{' (1432,7)-(1432,8)
                      expression_statement (1433,9)-(1433,41)
                        call_expression (1433,9)-(1433,40)
                          identifier: 'scanner_raise_error' (1433,9)-(1433,28)
                          argument_list (1433,29)-(1433,40)
                            (: '(' (1433,29)-(1433,30)
                            identifier: 'context_p' (1433,30)-(1433,39)
                            ): ')' (1433,39)-(1433,40)
                        ;: ';' (1433,40)-(1433,41)
                      }: '}' (1434,7)-(1434,8)
                  declaration (1436,7)-(1436,92)
                    type_identifier: 'lexer_lit_location_t' (1436,7)-(1436,27)
                    init_declarator (1436,28)-(1436,91)
                      pointer_declarator (1436,28)-(1436,38)
                        *: '*' (1436,28)-(1436,29)
                        identifier: 'literal_p' (1436,29)-(1436,38)
                      =: '=' (1436,39)-(1436,40)
                      call_expression (1436,41)-(1436,91)
                        identifier: 'scanner_add_literal' (1436,41)-(1436,60)
                        argument_list (1436,61)-(1436,91)
                          (: '(' (1436,61)-(1436,62)
                          identifier: 'context_p' (1436,62)-(1436,71)
                          ,: ',' (1436,71)-(1436,72)
                          identifier: 'scanner_context_p' (1436,73)-(1436,90)
                          ): ')' (1436,90)-(1436,91)
                    ;: ';' (1436,91)-(1436,92)
                  expression_statement (1438,7)-(1438,57)
                    call_expression (1438,7)-(1438,56)
                      identifier: 'scanner_detect_invalid_let' (1438,7)-(1438,33)
                      argument_list (1438,34)-(1438,56)
                        (: '(' (1438,34)-(1438,35)
                        identifier: 'context_p' (1438,35)-(1438,44)
                        ,: ',' (1438,44)-(1438,45)
                        identifier: 'literal_p' (1438,46)-(1438,55)
                        ): ')' (1438,55)-(1438,56)
                    ;: ';' (1438,56)-(1438,57)
                  expression_statement (1439,7)-(1439,49)
                    assignment_expression (1439,7)-(1439,48)
                      field_expression (1439,7)-(1439,22)
                        identifier: 'literal_p' (1439,7)-(1439,16)
                        ->: '->' (1439,16)-(1439,18)
                        field_identifier: 'type' (1439,18)-(1439,22)
                      |=: '|=' (1439,23)-(1439,25)
                      identifier: 'SCANNER_LITERAL_IS_LET' (1439,26)-(1439,48)
                    ;: ';' (1439,48)-(1439,49)
                  preproc_if (1441,1)-(1447,7)
                    #if: '#if' (1441,1)-(1441,4)
                    call_expression (1441,5)-(1441,41)
                      identifier: 'ENABLED' (1441,5)-(1441,12)
                      argument_list (1441,13)-(1441,41)
                        (: '(' (1441,13)-(1441,14)
                        identifier: 'JERRY_ES2015_MODULE_SYSTEM' (1441,14)-(1441,40)
                        ): ')' (1441,40)-(1441,41)
                    
: '
' (1441,41)-(1442,1)
                    if_statement (1442,7)-(1446,8)
                      if: 'if' (1442,7)-(1442,9)
                      parenthesized_expression (1442,10)-(1442,99)
                        (: '(' (1442,10)-(1442,11)
                        binary_expression (1442,11)-(1442,98)
                          field_expression (1442,11)-(1442,65)
                            field_expression (1442,11)-(1442,51)
                              identifier: 'scanner_context_p' (1442,11)-(1442,28)
                              ->: '->' (1442,28)-(1442,30)
                              field_identifier: 'active_literal_pool_p' (1442,30)-(1442,51)
                            ->: '->' (1442,51)-(1442,53)
                            field_identifier: 'status_flags' (1442,53)-(1442,65)
                          &: '&' (1442,66)-(1442,67)
                          identifier: 'SCANNER_LITERAL_POOL_IN_EXPORT' (1442,68)-(1442,98)
                        ): ')' (1442,98)-(1442,99)
                      compound_statement (1443,7)-(1446,8)
                        {: '{' (1443,7)-(1443,8)
                        expression_statement (1444,9)-(1444,51)
                          assignment_expression (1444,9)-(1444,50)
                            field_expression (1444,9)-(1444,24)
                              identifier: 'literal_p' (1444,9)-(1444,18)
                              ->: '->' (1444,18)-(1444,20)
                              field_identifier: 'type' (1444,20)-(1444,24)
                            |=: '|=' (1444,25)-(1444,27)
                            identifier: 'SCANNER_LITERAL_NO_REG' (1444,28)-(1444,50)
                          ;: ';' (1444,50)-(1444,51)
                        expression_statement (1445,9)-(1445,110)
                          assignment_expression (1445,9)-(1445,109)
                            field_expression (1445,9)-(1445,63)
                              field_expression (1445,9)-(1445,49)
                                identifier: 'scanner_context_p' (1445,9)-(1445,26)
                                ->: '->' (1445,26)-(1445,28)
                                field_identifier: 'active_literal_pool_p' (1445,28)-(1445,49)
                              ->: '->' (1445,49)-(1445,51)
                              field_identifier: 'status_flags' (1445,51)-(1445,63)
                            &=: '&=' (1445,64)-(1445,66)
                            cast_expression (1445,67)-(1445,109)
                              (: '(' (1445,67)-(1445,68)
                              type_descriptor (1445,68)-(1445,76)
                                primitive_type: 'uint16_t' (1445,68)-(1445,76)
                              ): ')' (1445,76)-(1445,77)
                              unary_expression (1445,78)-(1445,109)
                                ~: '~' (1445,78)-(1445,79)
                                identifier: 'SCANNER_LITERAL_POOL_IN_EXPORT' (1445,79)-(1445,109)
                          ;: ';' (1445,109)-(1445,110)
                        }: '}' (1446,7)-(1446,8)
                    #endif: '#endif' (1447,1)-(1447,7)
                  comment: '/* ENABLED (JERRY_ES2015_MODULE_SYSTEM) */' (1447,8)-(1447,50)
                  return_statement (1449,7)-(1449,30)
                    return: 'return' (1449,7)-(1449,13)
                    identifier: 'SCAN_NEXT_TOKEN' (1449,14)-(1449,29)
                    ;: ';' (1449,29)-(1449,30)
                  }: '}' (1450,5)-(1450,6)
              #endif: '#endif' (1451,1)-(1451,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (1451,8)-(1451,36)
            preproc_if (1452,1)-(1813,7)
              #if: '#if' (1452,1)-(1452,4)
              call_expression (1452,5)-(1452,41)
                identifier: 'ENABLED' (1452,5)-(1452,12)
                argument_list (1452,13)-(1452,41)
                  (: '(' (1452,13)-(1452,14)
                  identifier: 'JERRY_ES2015_MODULE_SYSTEM' (1452,14)-(1452,40)
                  ): ')' (1452,40)-(1452,41)
              
: '
' (1452,41)-(1453,1)
              case_statement (1453,5)-(1620,6)
                case: 'case' (1453,5)-(1453,9)
                identifier: 'LEXER_KEYW_IMPORT' (1453,10)-(1453,27)
                :: ':' (1453,27)-(1453,28)
                compound_statement (1454,5)-(1620,6)
                  {: '{' (1454,5)-(1454,6)
                  if_statement (1455,7)-(1458,8)
                    if: 'if' (1455,7)-(1455,9)
                    parenthesized_expression (1455,10)-(1455,42)
                      (: '(' (1455,10)-(1455,11)
                      binary_expression (1455,11)-(1455,41)
                        identifier: 'stack_top' (1455,11)-(1455,20)
                        !=: '!=' (1455,21)-(1455,23)
                        identifier: 'SCAN_STACK_SCRIPT' (1455,24)-(1455,41)
                      ): ')' (1455,41)-(1455,42)
                    compound_statement (1456,7)-(1458,8)
                      {: '{' (1456,7)-(1456,8)
                      expression_statement (1457,9)-(1457,41)
                        call_expression (1457,9)-(1457,40)
                          identifier: 'scanner_raise_error' (1457,9)-(1457,28)
                          argument_list (1457,29)-(1457,40)
                            (: '(' (1457,29)-(1457,30)
                            identifier: 'context_p' (1457,30)-(1457,39)
                            ): ')' (1457,39)-(1457,40)
                        ;: ';' (1457,40)-(1457,41)
                      }: '}' (1458,7)-(1458,8)
                  expression_statement (1460,7)-(1460,59)
                    assignment_expression (1460,7)-(1460,58)
                      field_expression (1460,7)-(1460,37)
                        identifier: 'context_p' (1460,7)-(1460,16)
                        ->: '->' (1460,16)-(1460,18)
                        field_identifier: 'global_status_flags' (1460,18)-(1460,37)
                      |=: '|=' (1460,38)-(1460,40)
                      identifier: 'ECMA_PARSE_MODULE' (1460,41)-(1460,58)
                    ;: ';' (1460,58)-(1460,59)
                  expression_statement (1462,7)-(1462,57)
                    assignment_expression (1462,7)-(1462,56)
                      field_expression (1462,7)-(1462,30)
                        identifier: 'scanner_context_p' (1462,7)-(1462,24)
                        ->: '->' (1462,24)-(1462,26)
                        field_identifier: 'mode' (1462,26)-(1462,30)
                      =: '=' (1462,31)-(1462,32)
                      identifier: 'SCAN_MODE_STATEMENT_END' (1462,33)-(1462,56)
                    ;: ';' (1462,56)-(1462,57)
                  expression_statement (1463,7)-(1463,36)
                    call_expression (1463,7)-(1463,35)
                      identifier: 'lexer_next_token' (1463,7)-(1463,23)
                      argument_list (1463,24)-(1463,35)
                        (: '(' (1463,24)-(1463,25)
                        identifier: 'context_p' (1463,25)-(1463,34)
                        ): ')' (1463,34)-(1463,35)
                    ;: ';' (1463,35)-(1463,36)
                  if_statement (1465,7)-(1469,8)
                    if: 'if' (1465,7)-(1465,9)
                    parenthesized_expression (1465,10)-(1466,73)
                      (: '(' (1465,10)-(1465,11)
                      binary_expression (1465,11)-(1466,72)
                        binary_expression (1465,11)-(1465,49)
                          field_expression (1465,11)-(1465,32)
                            field_expression (1465,11)-(1465,27)
                              identifier: 'context_p' (1465,11)-(1465,20)
                              ->: '->' (1465,20)-(1465,22)
                              field_identifier: 'token' (1465,22)-(1465,27)
                            .: '.' (1465,27)-(1465,28)
                            field_identifier: 'type' (1465,28)-(1465,32)
                          ==: '==' (1465,33)-(1465,35)
                          identifier: 'LEXER_LITERAL' (1465,36)-(1465,49)
                        &&: '&&' (1466,11)-(1466,13)
                        binary_expression (1466,14)-(1466,72)
                          field_expression (1466,14)-(1466,48)
                            field_expression (1466,14)-(1466,43)
                              field_expression (1466,14)-(1466,30)
                                identifier: 'context_p' (1466,14)-(1466,23)
                                ->: '->' (1466,23)-(1466,25)
                                field_identifier: 'token' (1466,25)-(1466,30)
                              .: '.' (1466,30)-(1466,31)
                              field_identifier: 'lit_location' (1466,31)-(1466,43)
                            .: '.' (1466,43)-(1466,44)
                            field_identifier: 'type' (1466,44)-(1466,48)
                          ==: '==' (1466,49)-(1466,51)
                          identifier: 'LEXER_STRING_LITERAL' (1466,52)-(1466,72)
                      ): ')' (1466,72)-(1466,73)
                    compound_statement (1467,7)-(1469,8)
                      {: '{' (1467,7)-(1467,8)
                      return_statement (1468,9)-(1468,32)
                        return: 'return' (1468,9)-(1468,15)
                        identifier: 'SCAN_NEXT_TOKEN' (1468,16)-(1468,31)
                        ;: ';' (1468,31)-(1468,32)
                      }: '}' (1469,7)-(1469,8)
                  declaration (1471,7)-(1471,33)
                    primitive_type: 'bool' (1471,7)-(1471,11)
                    init_declarator (1471,12)-(1471,32)
                      identifier: 'parse_imports' (1471,12)-(1471,25)
                      =: '=' (1471,26)-(1471,27)
                      true: 'true' (1471,28)-(1471,32)
                    ;: ';' (1471,32)-(1471,33)
                  if_statement (1473,7)-(1495,8)
                    if: 'if' (1473,7)-(1473,9)
                    parenthesized_expression (1473,10)-(1474,72)
                      (: '(' (1473,10)-(1473,11)
                      binary_expression (1473,11)-(1474,71)
                        binary_expression (1473,11)-(1473,49)
                          field_expression (1473,11)-(1473,32)
                            field_expression (1473,11)-(1473,27)
                              identifier: 'context_p' (1473,11)-(1473,20)
                              ->: '->' (1473,20)-(1473,22)
                              field_identifier: 'token' (1473,22)-(1473,27)
                            .: '.' (1473,27)-(1473,28)
                            field_identifier: 'type' (1473,28)-(1473,32)
                          ==: '==' (1473,33)-(1473,35)
                          identifier: 'LEXER_LITERAL' (1473,36)-(1473,49)
                        &&: '&&' (1474,11)-(1474,13)
                        binary_expression (1474,14)-(1474,71)
                          field_expression (1474,14)-(1474,48)
                            field_expression (1474,14)-(1474,43)
                              field_expression (1474,14)-(1474,30)
                                identifier: 'context_p' (1474,14)-(1474,23)
                                ->: '->' (1474,23)-(1474,25)
                                field_identifier: 'token' (1474,25)-(1474,30)
                              .: '.' (1474,30)-(1474,31)
                              field_identifier: 'lit_location' (1474,31)-(1474,43)
                            .: '.' (1474,43)-(1474,44)
                            field_identifier: 'type' (1474,44)-(1474,48)
                          ==: '==' (1474,49)-(1474,51)
                          identifier: 'LEXER_IDENT_LITERAL' (1474,52)-(1474,71)
                      ): ')' (1474,71)-(1474,72)
                    compound_statement (1475,7)-(1495,8)
                      {: '{' (1475,7)-(1475,8)
                      declaration (1476,9)-(1476,94)
                        type_identifier: 'lexer_lit_location_t' (1476,9)-(1476,29)
                        init_declarator (1476,30)-(1476,93)
                          pointer_declarator (1476,30)-(1476,40)
                            *: '*' (1476,30)-(1476,31)
                            identifier: 'literal_p' (1476,31)-(1476,40)
                          =: '=' (1476,41)-(1476,42)
                          call_expression (1476,43)-(1476,93)
                            identifier: 'scanner_add_literal' (1476,43)-(1476,62)
                            argument_list (1476,63)-(1476,93)
                              (: '(' (1476,63)-(1476,64)
                              identifier: 'context_p' (1476,64)-(1476,73)
                              ,: ',' (1476,73)-(1476,74)
                              identifier: 'scanner_context_p' (1476,75)-(1476,92)
                              ): ')' (1476,92)-(1476,93)
                        ;: ';' (1476,93)-(1476,94)
                      preproc_if (1478,1)-(1483,7)
                        #if: '#if' (1478,1)-(1478,4)
                        call_expression (1478,5)-(1478,27)
                          identifier: 'ENABLED' (1478,5)-(1478,12)
                          argument_list (1478,13)-(1478,27)
                            (: '(' (1478,13)-(1478,14)
                            identifier: 'JERRY_ES2015' (1478,14)-(1478,26)
                            ): ')' (1478,26)-(1478,27)
                        
: '
' (1478,27)-(1479,1)
                        expression_statement (1479,9)-(1479,59)
                          call_expression (1479,9)-(1479,58)
                            identifier: 'scanner_detect_invalid_let' (1479,9)-(1479,35)
                            argument_list (1479,36)-(1479,58)
                              (: '(' (1479,36)-(1479,37)
                              identifier: 'context_p' (1479,37)-(1479,46)
                              ,: ',' (1479,46)-(1479,47)
                              identifier: 'literal_p' (1479,48)-(1479,57)
                              ): ')' (1479,57)-(1479,58)
                          ;: ';' (1479,58)-(1479,59)
                        expression_statement (1480,9)-(1480,78)
                          assignment_expression (1480,9)-(1480,77)
                            field_expression (1480,9)-(1480,24)
                              identifier: 'literal_p' (1480,9)-(1480,18)
                              ->: '->' (1480,18)-(1480,20)
                              field_identifier: 'type' (1480,20)-(1480,24)
                            |=: '|=' (1480,25)-(1480,27)
                            binary_expression (1480,28)-(1480,77)
                              identifier: 'SCANNER_LITERAL_IS_LOCAL' (1480,28)-(1480,52)
                              |: '|' (1480,53)-(1480,54)
                              identifier: 'SCANNER_LITERAL_NO_REG' (1480,55)-(1480,77)
                          ;: ';' (1480,77)-(1480,78)
                        preproc_else (1481,1)-(1482,76)
                          #else: '#else' (1481,1)-(1481,6)
                          comment: '/* !ENABLED (JERRY_ES2015) */' (1481,7)-(1481,36)
                          expression_statement (1482,9)-(1482,76)
                            assignment_expression (1482,9)-(1482,75)
                              field_expression (1482,9)-(1482,24)
                                identifier: 'literal_p' (1482,9)-(1482,18)
                                ->: '->' (1482,18)-(1482,20)
                                field_identifier: 'type' (1482,20)-(1482,24)
                              |=: '|=' (1482,25)-(1482,27)
                              binary_expression (1482,28)-(1482,75)
                                identifier: 'SCANNER_LITERAL_IS_VAR' (1482,28)-(1482,50)
                                |: '|' (1482,51)-(1482,52)
                                identifier: 'SCANNER_LITERAL_NO_REG' (1482,53)-(1482,75)
                            ;: ';' (1482,75)-(1482,76)
                        #endif: '#endif' (1483,1)-(1483,7)
                      comment: '/* ENABLED (JERRY_ES2015) */' (1483,8)-(1483,36)
                      expression_statement (1485,9)-(1485,38)
                        call_expression (1485,9)-(1485,37)
                          identifier: 'lexer_next_token' (1485,9)-(1485,25)
                          argument_list (1485,26)-(1485,37)
                            (: '(' (1485,26)-(1485,27)
                            identifier: 'context_p' (1485,27)-(1485,36)
                            ): ')' (1485,36)-(1485,37)
                        ;: ';' (1485,37)-(1485,38)
                      if_statement (1487,9)-(1494,10)
                        if: 'if' (1487,9)-(1487,11)
                        parenthesized_expression (1487,12)-(1487,50)
                          (: '(' (1487,12)-(1487,13)
                          binary_expression (1487,13)-(1487,49)
                            field_expression (1487,13)-(1487,34)
                              field_expression (1487,13)-(1487,29)
                                identifier: 'context_p' (1487,13)-(1487,22)
                                ->: '->' (1487,22)-(1487,24)
                                field_identifier: 'token' (1487,24)-(1487,29)
                              .: '.' (1487,29)-(1487,30)
                              field_identifier: 'type' (1487,30)-(1487,34)
                            ==: '==' (1487,35)-(1487,37)
                            identifier: 'LEXER_COMMA' (1487,38)-(1487,49)
                          ): ')' (1487,49)-(1487,50)
                        compound_statement (1488,9)-(1490,10)
                          {: '{' (1488,9)-(1488,10)
                          expression_statement (1489,11)-(1489,40)
                            call_expression (1489,11)-(1489,39)
                              identifier: 'lexer_next_token' (1489,11)-(1489,27)
                              argument_list (1489,28)-(1489,39)
                                (: '(' (1489,28)-(1489,29)
                                identifier: 'context_p' (1489,29)-(1489,38)
                                ): ')' (1489,38)-(1489,39)
                            ;: ';' (1489,39)-(1489,40)
                          }: '}' (1490,9)-(1490,10)
                        else_clause (1491,9)-(1494,10)
                          else: 'else' (1491,9)-(1491,13)
                          compound_statement (1492,9)-(1494,10)
                            {: '{' (1492,9)-(1492,10)
                            expression_statement (1493,11)-(1493,33)
                              assignment_expression (1493,11)-(1493,32)
                                identifier: 'parse_imports' (1493,11)-(1493,24)
                                =: '=' (1493,25)-(1493,26)
                                false: 'false' (1493,27)-(1493,32)
                              ;: ';' (1493,32)-(1493,33)
                            }: '}' (1494,9)-(1494,10)
                      }: '}' (1495,7)-(1495,8)
                  if_statement (1497,7)-(1604,8)
                    if: 'if' (1497,7)-(1497,9)
                    parenthesized_expression (1497,10)-(1497,25)
                      (: '(' (1497,10)-(1497,11)
                      identifier: 'parse_imports' (1497,11)-(1497,24)
                      ): ')' (1497,24)-(1497,25)
                    compound_statement (1498,7)-(1604,8)
                      {: '{' (1498,7)-(1498,8)
                      if_statement (1499,9)-(1603,10)
                        if: 'if' (1499,9)-(1499,11)
                        parenthesized_expression (1499,12)-(1499,53)
                          (: '(' (1499,12)-(1499,13)
                          binary_expression (1499,13)-(1499,52)
                            field_expression (1499,13)-(1499,34)
                              field_expression (1499,13)-(1499,29)
                                identifier: 'context_p' (1499,13)-(1499,22)
                                ->: '->' (1499,22)-(1499,24)
                                field_identifier: 'token' (1499,24)-(1499,29)
                              .: '.' (1499,29)-(1499,30)
                              field_identifier: 'type' (1499,30)-(1499,34)
                            ==: '==' (1499,35)-(1499,37)
                            identifier: 'LEXER_MULTIPLY' (1499,38)-(1499,52)
                          ): ')' (1499,52)-(1499,53)
                        compound_statement (1500,9)-(1525,10)
                          {: '{' (1500,9)-(1500,10)
                          expression_statement (1501,11)-(1501,40)
                            call_expression (1501,11)-(1501,39)
                              identifier: 'lexer_next_token' (1501,11)-(1501,27)
                              argument_list (1501,28)-(1501,39)
                                (: '(' (1501,28)-(1501,29)
                                identifier: 'context_p' (1501,29)-(1501,38)
                                ): ')' (1501,38)-(1501,39)
                            ;: ';' (1501,39)-(1501,40)
                          if_statement (1502,11)-(1505,12)
                            if: 'if' (1502,11)-(1502,13)
                            parenthesized_expression (1502,14)-(1502,63)
                              (: '(' (1502,14)-(1502,15)
                              unary_expression (1502,15)-(1502,62)
                                !: '!' (1502,15)-(1502,16)
                                call_expression (1502,16)-(1502,62)
                                  identifier: 'lexer_token_is_identifier' (1502,16)-(1502,41)
                                  argument_list (1502,42)-(1502,62)
                                    (: '(' (1502,42)-(1502,43)
                                    identifier: 'context_p' (1502,43)-(1502,52)
                                    ,: ',' (1502,52)-(1502,53)
                                    string_literal (1502,54)-(1502,58)
                                      ": '"' (1502,54)-(1502,55)
                                      string_content: 'as' (1502,55)-(1502,57)
                                      ": '"' (1502,57)-(1502,58)
                                    ,: ',' (1502,58)-(1502,59)
                                    number_literal: '2' (1502,60)-(1502,61)
                                    ): ')' (1502,61)-(1502,62)
                              ): ')' (1502,62)-(1502,63)
                            compound_statement (1503,11)-(1505,12)
                              {: '{' (1503,11)-(1503,12)
                              expression_statement (1504,13)-(1504,45)
                                call_expression (1504,13)-(1504,44)
                                  identifier: 'scanner_raise_error' (1504,13)-(1504,32)
                                  argument_list (1504,33)-(1504,44)
                                    (: '(' (1504,33)-(1504,34)
                                    identifier: 'context_p' (1504,34)-(1504,43)
                                    ): ')' (1504,43)-(1504,44)
                                ;: ';' (1504,44)-(1504,45)
                              }: '}' (1505,11)-(1505,12)
                          expression_statement (1507,11)-(1507,40)
                            call_expression (1507,11)-(1507,39)
                              identifier: 'lexer_next_token' (1507,11)-(1507,27)
                              argument_list (1507,28)-(1507,39)
                                (: '(' (1507,28)-(1507,29)
                                identifier: 'context_p' (1507,29)-(1507,38)
                                ): ')' (1507,38)-(1507,39)
                            ;: ';' (1507,39)-(1507,40)
                          if_statement (1509,11)-(1513,12)
                            if: 'if' (1509,11)-(1509,13)
                            parenthesized_expression (1509,14)-(1510,76)
                              (: '(' (1509,14)-(1509,15)
                              binary_expression (1509,15)-(1510,75)
                                binary_expression (1509,15)-(1509,53)
                                  field_expression (1509,15)-(1509,36)
                                    field_expression (1509,15)-(1509,31)
                                      identifier: 'context_p' (1509,15)-(1509,24)
                                      ->: '->' (1509,24)-(1509,26)
                                      field_identifier: 'token' (1509,26)-(1509,31)
                                    .: '.' (1509,31)-(1509,32)
                                    field_identifier: 'type' (1509,32)-(1509,36)
                                  !=: '!=' (1509,37)-(1509,39)
                                  identifier: 'LEXER_LITERAL' (1509,40)-(1509,53)
                                &&: '&&' (1510,15)-(1510,17)
                                binary_expression (1510,18)-(1510,75)
                                  field_expression (1510,18)-(1510,52)
                                    field_expression (1510,18)-(1510,47)
                                      field_expression (1510,18)-(1510,34)
                                        identifier: 'context_p' (1510,18)-(1510,27)
                                        ->: '->' (1510,27)-(1510,29)
                                        field_identifier: 'token' (1510,29)-(1510,34)
                                      .: '.' (1510,34)-(1510,35)
                                      field_identifier: 'lit_location' (1510,35)-(1510,47)
                                    .: '.' (1510,47)-(1510,48)
                                    field_identifier: 'type' (1510,48)-(1510,52)
                                  ==: '==' (1510,53)-(1510,55)
                                  identifier: 'LEXER_IDENT_LITERAL' (1510,56)-(1510,75)
                              ): ')' (1510,75)-(1510,76)
                            compound_statement (1511,11)-(1513,12)
                              {: '{' (1511,11)-(1511,12)
                              expression_statement (1512,13)-(1512,45)
                                call_expression (1512,13)-(1512,44)
                                  identifier: 'scanner_raise_error' (1512,13)-(1512,32)
                                  argument_list (1512,33)-(1512,44)
                                    (: '(' (1512,33)-(1512,34)
                                    identifier: 'context_p' (1512,34)-(1512,43)
                                    ): ')' (1512,43)-(1512,44)
                                ;: ';' (1512,44)-(1512,45)
                              }: '}' (1513,11)-(1513,12)
                          declaration (1515,11)-(1515,96)
                            type_identifier: 'lexer_lit_location_t' (1515,11)-(1515,31)
                            init_declarator (1515,32)-(1515,95)
                              pointer_declarator (1515,32)-(1515,42)
                                *: '*' (1515,32)-(1515,33)
                                identifier: 'literal_p' (1515,33)-(1515,42)
                              =: '=' (1515,43)-(1515,44)
                              call_expression (1515,45)-(1515,95)
                                identifier: 'scanner_add_literal' (1515,45)-(1515,64)
                                argument_list (1515,65)-(1515,95)
                                  (: '(' (1515,65)-(1515,66)
                                  identifier: 'context_p' (1515,66)-(1515,75)
                                  ,: ',' (1515,75)-(1515,76)
                                  identifier: 'scanner_context_p' (1515,77)-(1515,94)
                                  ): ')' (1515,94)-(1515,95)
                            ;: ';' (1515,95)-(1515,96)
                          preproc_if (1517,1)-(1522,7)
                            #if: '#if' (1517,1)-(1517,4)
                            call_expression (1517,5)-(1517,27)
                              identifier: 'ENABLED' (1517,5)-(1517,12)
                              argument_list (1517,13)-(1517,27)
                                (: '(' (1517,13)-(1517,14)
                                identifier: 'JERRY_ES2015' (1517,14)-(1517,26)
                                ): ')' (1517,26)-(1517,27)
                            
: '
' (1517,27)-(1518,1)
                            expression_statement (1518,11)-(1518,61)
                              call_expression (1518,11)-(1518,60)
                                identifier: 'scanner_detect_invalid_let' (1518,11)-(1518,37)
                                argument_list (1518,38)-(1518,60)
                                  (: '(' (1518,38)-(1518,39)
                                  identifier: 'context_p' (1518,39)-(1518,48)
                                  ,: ',' (1518,48)-(1518,49)
                                  identifier: 'literal_p' (1518,50)-(1518,59)
                                  ): ')' (1518,59)-(1518,60)
                              ;: ';' (1518,60)-(1518,61)
                            expression_statement (1519,11)-(1519,80)
                              assignment_expression (1519,11)-(1519,79)
                                field_expression (1519,11)-(1519,26)
                                  identifier: 'literal_p' (1519,11)-(1519,20)
                                  ->: '->' (1519,20)-(1519,22)
                                  field_identifier: 'type' (1519,22)-(1519,26)
                                |=: '|=' (1519,27)-(1519,29)
                                binary_expression (1519,30)-(1519,79)
                                  identifier: 'SCANNER_LITERAL_IS_LOCAL' (1519,30)-(1519,54)
                                  |: '|' (1519,55)-(1519,56)
                                  identifier: 'SCANNER_LITERAL_NO_REG' (1519,57)-(1519,79)
                              ;: ';' (1519,79)-(1519,80)
                            preproc_else (1520,1)-(1521,78)
                              #else: '#else' (1520,1)-(1520,6)
                              comment: '/* !ENABLED (JERRY_ES2015) */' (1520,7)-(1520,36)
                              expression_statement (1521,11)-(1521,78)
                                assignment_expression (1521,11)-(1521,77)
                                  field_expression (1521,11)-(1521,26)
                                    identifier: 'literal_p' (1521,11)-(1521,20)
                                    ->: '->' (1521,20)-(1521,22)
                                    field_identifier: 'type' (1521,22)-(1521,26)
                                  |=: '|=' (1521,27)-(1521,29)
                                  binary_expression (1521,30)-(1521,77)
                                    identifier: 'SCANNER_LITERAL_IS_VAR' (1521,30)-(1521,52)
                                    |: '|' (1521,53)-(1521,54)
                                    identifier: 'SCANNER_LITERAL_NO_REG' (1521,55)-(1521,77)
                                ;: ';' (1521,77)-(1521,78)
                            #endif: '#endif' (1522,1)-(1522,7)
                          comment: '/* ENABLED (JERRY_ES2015) */' (1522,8)-(1522,36)
                          expression_statement (1524,11)-(1524,40)
                            call_expression (1524,11)-(1524,39)
                              identifier: 'lexer_next_token' (1524,11)-(1524,27)
                              argument_list (1524,28)-(1524,39)
                                (: '(' (1524,28)-(1524,29)
                                identifier: 'context_p' (1524,29)-(1524,38)
                                ): ')' (1524,38)-(1524,39)
                            ;: ';' (1524,39)-(1524,40)
                          }: '}' (1525,9)-(1525,10)
                        else_clause (1526,9)-(1603,10)
                          else: 'else' (1526,9)-(1526,13)
                          if_statement (1526,14)-(1603,10)
                            if: 'if' (1526,14)-(1526,16)
                            parenthesized_expression (1526,17)-(1526,60)
                              (: '(' (1526,17)-(1526,18)
                              binary_expression (1526,18)-(1526,59)
                                field_expression (1526,18)-(1526,39)
                                  field_expression (1526,18)-(1526,34)
                                    identifier: 'context_p' (1526,18)-(1526,27)
                                    ->: '->' (1526,27)-(1526,29)
                                    field_identifier: 'token' (1526,29)-(1526,34)
                                  .: '.' (1526,34)-(1526,35)
                                  field_identifier: 'type' (1526,35)-(1526,39)
                                ==: '==' (1526,40)-(1526,42)
                                identifier: 'LEXER_LEFT_BRACE' (1526,43)-(1526,59)
                              ): ')' (1526,59)-(1526,60)
                            compound_statement (1527,9)-(1599,10)
                              {: '{' (1527,9)-(1527,10)
                              expression_statement (1528,11)-(1528,40)
                                call_expression (1528,11)-(1528,39)
                                  identifier: 'lexer_next_token' (1528,11)-(1528,27)
                                  argument_list (1528,28)-(1528,39)
                                    (: '(' (1528,28)-(1528,29)
                                    identifier: 'context_p' (1528,29)-(1528,38)
                                    ): ')' (1528,38)-(1528,39)
                                ;: ';' (1528,39)-(1528,40)
                              while_statement (1530,11)-(1596,12)
                                while: 'while' (1530,11)-(1530,16)
                                parenthesized_expression (1530,17)-(1530,61)
                                  (: '(' (1530,17)-(1530,18)
                                  binary_expression (1530,18)-(1530,60)
                                    field_expression (1530,18)-(1530,39)
                                      field_expression (1530,18)-(1530,34)
                                        identifier: 'context_p' (1530,18)-(1530,27)
                                        ->: '->' (1530,27)-(1530,29)
                                        field_identifier: 'token' (1530,29)-(1530,34)
                                      .: '.' (1530,34)-(1530,35)
                                      field_identifier: 'type' (1530,35)-(1530,39)
                                    !=: '!=' (1530,40)-(1530,42)
                                    identifier: 'LEXER_RIGHT_BRACE' (1530,43)-(1530,60)
                                  ): ')' (1530,60)-(1530,61)
                                compound_statement (1531,11)-(1596,12)
                                  {: '{' (1531,11)-(1531,12)
                                  if_statement (1532,13)-(1536,14)
                                    if: 'if' (1532,13)-(1532,15)
                                    parenthesized_expression (1532,16)-(1533,78)
                                      (: '(' (1532,16)-(1532,17)
                                      binary_expression (1532,17)-(1533,77)
                                        binary_expression (1532,17)-(1532,55)
                                          field_expression (1532,17)-(1532,38)
                                            field_expression (1532,17)-(1532,33)
                                              identifier: 'context_p' (1532,17)-(1532,26)
                                              ->: '->' (1532,26)-(1532,28)
                                              field_identifier: 'token' (1532,28)-(1532,33)
                                            .: '.' (1532,33)-(1532,34)
                                            field_identifier: 'type' (1532,34)-(1532,38)
                                          !=: '!=' (1532,39)-(1532,41)
                                          identifier: 'LEXER_LITERAL' (1532,42)-(1532,55)
                                        ||: '||' (1533,17)-(1533,19)
                                        binary_expression (1533,20)-(1533,77)
                                          field_expression (1533,20)-(1533,54)
                                            field_expression (1533,20)-(1533,49)
                                              field_expression (1533,20)-(1533,36)
                                                identifier: 'context_p' (1533,20)-(1533,29)
                                                ->: '->' (1533,29)-(1533,31)
                                                field_identifier: 'token' (1533,31)-(1533,36)
                                              .: '.' (1533,36)-(1533,37)
                                              field_identifier: 'lit_location' (1533,37)-(1533,49)
                                            .: '.' (1533,49)-(1533,50)
                                            field_identifier: 'type' (1533,50)-(1533,54)
                                          !=: '!=' (1533,55)-(1533,57)
                                          identifier: 'LEXER_IDENT_LITERAL' (1533,58)-(1533,77)
                                      ): ')' (1533,77)-(1533,78)
                                    compound_statement (1534,13)-(1536,14)
                                      {: '{' (1534,13)-(1534,14)
                                      expression_statement (1535,15)-(1535,47)
                                        call_expression (1535,15)-(1535,46)
                                          identifier: 'scanner_raise_error' (1535,15)-(1535,34)
                                          argument_list (1535,35)-(1535,46)
                                            (: '(' (1535,35)-(1535,36)
                                            identifier: 'context_p' (1535,36)-(1535,45)
                                            ): ')' (1535,45)-(1535,46)
                                        ;: ';' (1535,46)-(1535,47)
                                      }: '}' (1536,13)-(1536,14)
                                  preproc_if (1538,1)-(1540,7)
                                    #if: '#if' (1538,1)-(1538,4)
                                    call_expression (1538,5)-(1538,27)
                                      identifier: 'ENABLED' (1538,5)-(1538,12)
                                      argument_list (1538,13)-(1538,27)
                                        (: '(' (1538,13)-(1538,14)
                                        identifier: 'JERRY_ES2015' (1538,14)-(1538,26)
                                        ): ')' (1538,26)-(1538,27)
                                    
: '
' (1538,27)-(1539,1)
                                    declaration (1539,13)-(1539,59)
                                      type_qualifier (1539,13)-(1539,18)
                                        const: 'const' (1539,13)-(1539,18)
                                      primitive_type: 'uint8_t' (1539,19)-(1539,26)
                                      init_declarator (1539,27)-(1539,58)
                                        pointer_declarator (1539,27)-(1539,36)
                                          *: '*' (1539,27)-(1539,28)
                                          identifier: 'source_p' (1539,28)-(1539,36)
                                        =: '=' (1539,37)-(1539,38)
                                        field_expression (1539,39)-(1539,58)
                                          identifier: 'context_p' (1539,39)-(1539,48)
                                          ->: '->' (1539,48)-(1539,50)
                                          field_identifier: 'source_p' (1539,50)-(1539,58)
                                      ;: ';' (1539,58)-(1539,59)
                                    #endif: '#endif' (1540,1)-(1540,7)
                                  comment: '/* ENABLED (JERRY_ES2015) */' (1540,8)-(1540,36)
                                  if_statement (1542,13)-(1562,14)
                                    if: 'if' (1542,13)-(1542,15)
                                    parenthesized_expression (1542,16)-(1542,78)
                                      (: '(' (1542,16)-(1542,17)
                                      call_expression (1542,17)-(1542,77)
                                        identifier: 'lexer_check_next_character' (1542,17)-(1542,43)
                                        argument_list (1542,44)-(1542,77)
                                          (: '(' (1542,44)-(1542,45)
                                          identifier: 'context_p' (1542,45)-(1542,54)
                                          ,: ',' (1542,54)-(1542,55)
                                          identifier: 'LIT_CHAR_LOWERCASE_A' (1542,56)-(1542,76)
                                          ): ')' (1542,76)-(1542,77)
                                      ): ')' (1542,77)-(1542,78)
                                    compound_statement (1543,13)-(1562,14)
                                      {: '{' (1543,13)-(1543,14)
                                      expression_statement (1544,15)-(1544,44)
                                        call_expression (1544,15)-(1544,43)
                                          identifier: 'lexer_next_token' (1544,15)-(1544,31)
                                          argument_list (1544,32)-(1544,43)
                                            (: '(' (1544,32)-(1544,33)
                                            identifier: 'context_p' (1544,33)-(1544,42)
                                            ): ')' (1544,42)-(1544,43)
                                        ;: ';' (1544,43)-(1544,44)
                                      if_statement (1546,15)-(1549,16)
                                        if: 'if' (1546,15)-(1546,17)
                                        parenthesized_expression (1546,18)-(1546,67)
                                          (: '(' (1546,18)-(1546,19)
                                          unary_expression (1546,19)-(1546,66)
                                            !: '!' (1546,19)-(1546,20)
                                            call_expression (1546,20)-(1546,66)
                                              identifier: 'lexer_token_is_identifier' (1546,20)-(1546,45)
                                              argument_list (1546,46)-(1546,66)
                                                (: '(' (1546,46)-(1546,47)
                                                identifier: 'context_p' (1546,47)-(1546,56)
                                                ,: ',' (1546,56)-(1546,57)
                                                string_literal (1546,58)-(1546,62)
                                                  ": '"' (1546,58)-(1546,59)
                                                  string_content: 'as' (1546,59)-(1546,61)
                                                  ": '"' (1546,61)-(1546,62)
                                                ,: ',' (1546,62)-(1546,63)
                                                number_literal: '2' (1546,64)-(1546,65)
                                                ): ')' (1546,65)-(1546,66)
                                          ): ')' (1546,66)-(1546,67)
                                        compound_statement (1547,15)-(1549,16)
                                          {: '{' (1547,15)-(1547,16)
                                          expression_statement (1548,17)-(1548,49)
                                            call_expression (1548,17)-(1548,48)
                                              identifier: 'scanner_raise_error' (1548,17)-(1548,36)
                                              argument_list (1548,37)-(1548,48)
                                                (: '(' (1548,37)-(1548,38)
                                                identifier: 'context_p' (1548,38)-(1548,47)
                                                ): ')' (1548,47)-(1548,48)
                                            ;: ';' (1548,48)-(1548,49)
                                          }: '}' (1549,15)-(1549,16)
                                      expression_statement (1551,15)-(1551,44)
                                        call_expression (1551,15)-(1551,43)
                                          identifier: 'lexer_next_token' (1551,15)-(1551,31)
                                          argument_list (1551,32)-(1551,43)
                                            (: '(' (1551,32)-(1551,33)
                                            identifier: 'context_p' (1551,33)-(1551,42)
                                            ): ')' (1551,42)-(1551,43)
                                        ;: ';' (1551,43)-(1551,44)
                                      if_statement (1553,15)-(1557,16)
                                        if: 'if' (1553,15)-(1553,17)
                                        parenthesized_expression (1553,18)-(1554,80)
                                          (: '(' (1553,18)-(1553,19)
                                          binary_expression (1553,19)-(1554,79)
                                            binary_expression (1553,19)-(1553,57)
                                              field_expression (1553,19)-(1553,40)
                                                field_expression (1553,19)-(1553,35)
                                                  identifier: 'context_p' (1553,19)-(1553,28)
                                                  ->: '->' (1553,28)-(1553,30)
                                                  field_identifier: 'token' (1553,30)-(1553,35)
                                                .: '.' (1553,35)-(1553,36)
                                                field_identifier: 'type' (1553,36)-(1553,40)
                                              !=: '!=' (1553,41)-(1553,43)
                                              identifier: 'LEXER_LITERAL' (1553,44)-(1553,57)
                                            &&: '&&' (1554,19)-(1554,21)
                                            binary_expression (1554,22)-(1554,79)
                                              field_expression (1554,22)-(1554,56)
                                                field_expression (1554,22)-(1554,51)
                                                  field_expression (1554,22)-(1554,38)
                                                    identifier: 'context_p' (1554,22)-(1554,31)
                                                    ->: '->' (1554,31)-(1554,33)
                                                    field_identifier: 'token' (1554,33)-(1554,38)
                                                  .: '.' (1554,38)-(1554,39)
                                                  field_identifier: 'lit_location' (1554,39)-(1554,51)
                                                .: '.' (1554,51)-(1554,52)
                                                field_identifier: 'type' (1554,52)-(1554,56)
                                              ==: '==' (1554,57)-(1554,59)
                                              identifier: 'LEXER_IDENT_LITERAL' (1554,60)-(1554,79)
                                          ): ')' (1554,79)-(1554,80)
                                        compound_statement (1555,15)-(1557,16)
                                          {: '{' (1555,15)-(1555,16)
                                          expression_statement (1556,17)-(1556,49)
                                            call_expression (1556,17)-(1556,48)
                                              identifier: 'scanner_raise_error' (1556,17)-(1556,36)
                                              argument_list (1556,37)-(1556,48)
                                                (: '(' (1556,37)-(1556,38)
                                                identifier: 'context_p' (1556,38)-(1556,47)
                                                ): ')' (1556,47)-(1556,48)
                                            ;: ';' (1556,48)-(1556,49)
                                          }: '}' (1557,15)-(1557,16)
                                      preproc_if (1559,1)-(1561,7)
                                        #if: '#if' (1559,1)-(1559,4)
                                        call_expression (1559,5)-(1559,27)
                                          identifier: 'ENABLED' (1559,5)-(1559,12)
                                          argument_list (1559,13)-(1559,27)
                                            (: '(' (1559,13)-(1559,14)
                                            identifier: 'JERRY_ES2015' (1559,14)-(1559,26)
                                            ): ')' (1559,26)-(1559,27)
                                        
: '
' (1559,27)-(1560,1)
                                        expression_statement (1560,15)-(1560,46)
                                          assignment_expression (1560,15)-(1560,45)
                                            identifier: 'source_p' (1560,15)-(1560,23)
                                            =: '=' (1560,24)-(1560,25)
                                            field_expression (1560,26)-(1560,45)
                                              identifier: 'context_p' (1560,26)-(1560,35)
                                              ->: '->' (1560,35)-(1560,37)
                                              field_identifier: 'source_p' (1560,37)-(1560,45)
                                          ;: ';' (1560,45)-(1560,46)
                                        #endif: '#endif' (1561,1)-(1561,7)
                                      comment: '/* ENABLED (JERRY_ES2015) */' (1561,8)-(1561,36)
                                      }: '}' (1562,13)-(1562,14)
                                  declaration (1564,13)-(1564,98)
                                    type_identifier: 'lexer_lit_location_t' (1564,13)-(1564,33)
                                    init_declarator (1564,34)-(1564,97)
                                      pointer_declarator (1564,34)-(1564,44)
                                        *: '*' (1564,34)-(1564,35)
                                        identifier: 'literal_p' (1564,35)-(1564,44)
                                      =: '=' (1564,45)-(1564,46)
                                      call_expression (1564,47)-(1564,97)
                                        identifier: 'scanner_add_literal' (1564,47)-(1564,66)
                                        argument_list (1564,67)-(1564,97)
                                          (: '(' (1564,67)-(1564,68)
                                          identifier: 'context_p' (1564,68)-(1564,77)
                                          ,: ',' (1564,77)-(1564,78)
                                          identifier: 'scanner_context_p' (1564,79)-(1564,96)
                                          ): ')' (1564,96)-(1564,97)
                                    ;: ';' (1564,97)-(1564,98)
                                  preproc_if (1566,1)-(1583,7)
                                    #if: '#if' (1566,1)-(1566,4)
                                    call_expression (1566,5)-(1566,27)
                                      identifier: 'ENABLED' (1566,5)-(1566,12)
                                      argument_list (1566,13)-(1566,27)
                                        (: '(' (1566,13)-(1566,14)
                                        identifier: 'JERRY_ES2015' (1566,14)-(1566,26)
                                        ): ')' (1566,26)-(1566,27)
                                    
: '
' (1566,27)-(1567,1)
                                    if_statement (1567,13)-(1573,14)
                                      if: 'if' (1567,13)-(1567,15)
                                      parenthesized_expression (1567,16)-(1569,64)
                                        (: '(' (1567,16)-(1567,17)
                                        binary_expression (1567,17)-(1569,63)
                                          field_expression (1567,17)-(1567,32)
                                            identifier: 'literal_p' (1567,17)-(1567,26)
                                            ->: '->' (1567,26)-(1567,28)
                                            field_identifier: 'type' (1567,28)-(1567,32)
                                          &: '&' (1567,33)-(1567,34)
                                          parenthesized_expression (1567,35)-(1569,63)
                                            (: '(' (1567,35)-(1567,36)
                                            binary_expression (1567,36)-(1569,62)
                                              binary_expression (1567,36)-(1568,60)
                                                identifier: 'SCANNER_LITERAL_IS_ARG' (1567,36)-(1567,58)
                                                |: '|' (1568,36)-(1568,37)
                                                identifier: 'SCANNER_LITERAL_IS_VAR' (1568,38)-(1568,60)
                                              |: '|' (1569,36)-(1569,37)
                                              identifier: 'SCANNER_LITERAL_IS_LOCAL' (1569,38)-(1569,62)
                                            ): ')' (1569,62)-(1569,63)
                                        ): ')' (1569,63)-(1569,64)
                                      compound_statement (1570,13)-(1573,14)
                                        {: '{' (1570,13)-(1570,14)
                                        expression_statement (1571,15)-(1571,46)
                                          assignment_expression (1571,15)-(1571,45)
                                            field_expression (1571,15)-(1571,34)
                                              identifier: 'context_p' (1571,15)-(1571,24)
                                              ->: '->' (1571,24)-(1571,26)
                                              field_identifier: 'source_p' (1571,26)-(1571,34)
                                            =: '=' (1571,35)-(1571,36)
                                            identifier: 'source_p' (1571,37)-(1571,45)
                                          ;: ';' (1571,45)-(1571,46)
                                        expression_statement (1572,15)-(1572,61)
                                          call_expression (1572,15)-(1572,60)
                                            identifier: 'scanner_raise_redeclaration_error' (1572,15)-(1572,48)
                                            argument_list (1572,49)-(1572,60)
                                              (: '(' (1572,49)-(1572,50)
                                              identifier: 'context_p' (1572,50)-(1572,59)
                                              ): ')' (1572,59)-(1572,60)
                                          ;: ';' (1572,60)-(1572,61)
                                        }: '}' (1573,13)-(1573,14)
                                    if_statement (1575,13)-(1578,14)
                                      if: 'if' (1575,13)-(1575,15)
                                      parenthesized_expression (1575,16)-(1575,59)
                                        (: '(' (1575,16)-(1575,17)
                                        binary_expression (1575,17)-(1575,58)
                                          field_expression (1575,17)-(1575,32)
                                            identifier: 'literal_p' (1575,17)-(1575,26)
                                            ->: '->' (1575,26)-(1575,28)
                                            field_identifier: 'type' (1575,28)-(1575,32)
                                          &: '&' (1575,33)-(1575,34)
                                          identifier: 'SCANNER_LITERAL_IS_FUNC' (1575,35)-(1575,58)
                                        ): ')' (1575,58)-(1575,59)
                                      compound_statement (1576,13)-(1578,14)
                                        {: '{' (1576,13)-(1576,14)
                                        expression_statement (1577,15)-(1577,69)
                                          assignment_expression (1577,15)-(1577,68)
                                            field_expression (1577,15)-(1577,30)
                                              identifier: 'literal_p' (1577,15)-(1577,24)
                                              ->: '->' (1577,24)-(1577,26)
                                              field_identifier: 'type' (1577,26)-(1577,30)
                                            &=: '&=' (1577,31)-(1577,33)
                                            cast_expression (1577,34)-(1577,68)
                                              (: '(' (1577,34)-(1577,35)
                                              type_descriptor (1577,35)-(1577,42)
                                                primitive_type: 'uint8_t' (1577,35)-(1577,42)
                                              ): ')' (1577,42)-(1577,43)
                                              unary_expression (1577,44)-(1577,68)
                                                ~: '~' (1577,44)-(1577,45)
                                                identifier: 'SCANNER_LITERAL_IS_FUNC' (1577,45)-(1577,68)
                                          ;: ';' (1577,68)-(1577,69)
                                        }: '}' (1578,13)-(1578,14)
                                    expression_statement (1580,13)-(1580,82)
                                      assignment_expression (1580,13)-(1580,81)
                                        field_expression (1580,13)-(1580,28)
                                          identifier: 'literal_p' (1580,13)-(1580,22)
                                          ->: '->' (1580,22)-(1580,24)
                                          field_identifier: 'type' (1580,24)-(1580,28)
                                        |=: '|=' (1580,29)-(1580,31)
                                        binary_expression (1580,32)-(1580,81)
                                          identifier: 'SCANNER_LITERAL_IS_LOCAL' (1580,32)-(1580,56)
                                          |: '|' (1580,57)-(1580,58)
                                          identifier: 'SCANNER_LITERAL_NO_REG' (1580,59)-(1580,81)
                                      ;: ';' (1580,81)-(1580,82)
                                    preproc_else (1581,1)-(1582,80)
                                      #else: '#else' (1581,1)-(1581,6)
                                      comment: '/* !ENABLED (JERRY_ES2015) */' (1581,7)-(1581,36)
                                      expression_statement (1582,13)-(1582,80)
                                        assignment_expression (1582,13)-(1582,79)
                                          field_expression (1582,13)-(1582,28)
                                            identifier: 'literal_p' (1582,13)-(1582,22)
                                            ->: '->' (1582,22)-(1582,24)
                                            field_identifier: 'type' (1582,24)-(1582,28)
                                          |=: '|=' (1582,29)-(1582,31)
                                          binary_expression (1582,32)-(1582,79)
                                            identifier: 'SCANNER_LITERAL_IS_VAR' (1582,32)-(1582,54)
                                            |: '|' (1582,55)-(1582,56)
                                            identifier: 'SCANNER_LITERAL_NO_REG' (1582,57)-(1582,79)
                                        ;: ';' (1582,79)-(1582,80)
                                    #endif: '#endif' (1583,1)-(1583,7)
                                  comment: '/* ENABLED (JERRY_ES2015) */' (1583,8)-(1583,36)
                                  expression_statement (1585,13)-(1585,42)
                                    call_expression (1585,13)-(1585,41)
                                      identifier: 'lexer_next_token' (1585,13)-(1585,29)
                                      argument_list (1585,30)-(1585,41)
                                        (: '(' (1585,30)-(1585,31)
                                        identifier: 'context_p' (1585,31)-(1585,40)
                                        ): ')' (1585,40)-(1585,41)
                                    ;: ';' (1585,41)-(1585,42)
                                  if_statement (1587,13)-(1595,14)
                                    if: 'if' (1587,13)-(1587,15)
                                    parenthesized_expression (1587,16)-(1587,60)
                                      (: '(' (1587,16)-(1587,17)
                                      binary_expression (1587,17)-(1587,59)
                                        field_expression (1587,17)-(1587,38)
                                          field_expression (1587,17)-(1587,33)
                                            identifier: 'context_p' (1587,17)-(1587,26)
                                            ->: '->' (1587,26)-(1587,28)
                                            field_identifier: 'token' (1587,28)-(1587,33)
                                          .: '.' (1587,33)-(1587,34)
                                          field_identifier: 'type' (1587,34)-(1587,38)
                                        !=: '!=' (1587,39)-(1587,41)
                                        identifier: 'LEXER_RIGHT_BRACE' (1587,42)-(1587,59)
                                      ): ')' (1587,59)-(1587,60)
                                    compound_statement (1588,13)-(1595,14)
                                      {: '{' (1588,13)-(1588,14)
                                      if_statement (1589,15)-(1592,16)
                                        if: 'if' (1589,15)-(1589,17)
                                        parenthesized_expression (1589,18)-(1589,56)
                                          (: '(' (1589,18)-(1589,19)
                                          binary_expression (1589,19)-(1589,55)
                                            field_expression (1589,19)-(1589,40)
                                              field_expression (1589,19)-(1589,35)
                                                identifier: 'context_p' (1589,19)-(1589,28)
                                                ->: '->' (1589,28)-(1589,30)
                                                field_identifier: 'token' (1589,30)-(1589,35)
                                              .: '.' (1589,35)-(1589,36)
                                              field_identifier: 'type' (1589,36)-(1589,40)
                                            !=: '!=' (1589,41)-(1589,43)
                                            identifier: 'LEXER_COMMA' (1589,44)-(1589,55)
                                          ): ')' (1589,55)-(1589,56)
                                        compound_statement (1590,15)-(1592,16)
                                          {: '{' (1590,15)-(1590,16)
                                          expression_statement (1591,17)-(1591,49)
                                            call_expression (1591,17)-(1591,48)
                                              identifier: 'scanner_raise_error' (1591,17)-(1591,36)
                                              argument_list (1591,37)-(1591,48)
                                                (: '(' (1591,37)-(1591,38)
                                                identifier: 'context_p' (1591,38)-(1591,47)
                                                ): ')' (1591,47)-(1591,48)
                                            ;: ';' (1591,48)-(1591,49)
                                          }: '}' (1592,15)-(1592,16)
                                      expression_statement (1594,15)-(1594,44)
                                        call_expression (1594,15)-(1594,43)
                                          identifier: 'lexer_next_token' (1594,15)-(1594,31)
                                          argument_list (1594,32)-(1594,43)
                                            (: '(' (1594,32)-(1594,33)
                                            identifier: 'context_p' (1594,33)-(1594,42)
                                            ): ')' (1594,42)-(1594,43)
                                        ;: ';' (1594,43)-(1594,44)
                                      }: '}' (1595,13)-(1595,14)
                                  }: '}' (1596,11)-(1596,12)
                              expression_statement (1598,11)-(1598,40)
                                call_expression (1598,11)-(1598,39)
                                  identifier: 'lexer_next_token' (1598,11)-(1598,27)
                                  argument_list (1598,28)-(1598,39)
                                    (: '(' (1598,28)-(1598,29)
                                    identifier: 'context_p' (1598,29)-(1598,38)
                                    ): ')' (1598,38)-(1598,39)
                                ;: ';' (1598,39)-(1598,40)
                              }: '}' (1599,9)-(1599,10)
                            else_clause (1600,9)-(1603,10)
                              else: 'else' (1600,9)-(1600,13)
                              compound_statement (1601,9)-(1603,10)
                                {: '{' (1601,9)-(1601,10)
                                expression_statement (1602,11)-(1602,43)
                                  call_expression (1602,11)-(1602,42)
                                    identifier: 'scanner_raise_error' (1602,11)-(1602,30)
                                    argument_list (1602,31)-(1602,42)
                                      (: '(' (1602,31)-(1602,32)
                                      identifier: 'context_p' (1602,32)-(1602,41)
                                      ): ')' (1602,41)-(1602,42)
                                  ;: ';' (1602,42)-(1602,43)
                                }: '}' (1603,9)-(1603,10)
                      }: '}' (1604,7)-(1604,8)
                  if_statement (1606,7)-(1609,8)
                    if: 'if' (1606,7)-(1606,9)
                    parenthesized_expression (1606,10)-(1606,61)
                      (: '(' (1606,10)-(1606,11)
                      unary_expression (1606,11)-(1606,60)
                        !: '!' (1606,11)-(1606,12)
                        call_expression (1606,12)-(1606,60)
                          identifier: 'lexer_token_is_identifier' (1606,12)-(1606,37)
                          argument_list (1606,38)-(1606,60)
                            (: '(' (1606,38)-(1606,39)
                            identifier: 'context_p' (1606,39)-(1606,48)
                            ,: ',' (1606,48)-(1606,49)
                            string_literal (1606,50)-(1606,56)
                              ": '"' (1606,50)-(1606,51)
                              string_content: 'from' (1606,51)-(1606,55)
                              ": '"' (1606,55)-(1606,56)
                            ,: ',' (1606,56)-(1606,57)
                            number_literal: '4' (1606,58)-(1606,59)
                            ): ')' (1606,59)-(1606,60)
                      ): ')' (1606,60)-(1606,61)
                    compound_statement (1607,7)-(1609,8)
                      {: '{' (1607,7)-(1607,8)
                      expression_statement (1608,9)-(1608,41)
                        call_expression (1608,9)-(1608,40)
                          identifier: 'scanner_raise_error' (1608,9)-(1608,28)
                          argument_list (1608,29)-(1608,40)
                            (: '(' (1608,29)-(1608,30)
                            identifier: 'context_p' (1608,30)-(1608,39)
                            ): ')' (1608,39)-(1608,40)
                        ;: ';' (1608,40)-(1608,41)
                      }: '}' (1609,7)-(1609,8)
                  expression_statement (1611,7)-(1611,36)
                    call_expression (1611,7)-(1611,35)
                      identifier: 'lexer_next_token' (1611,7)-(1611,23)
                      argument_list (1611,24)-(1611,35)
                        (: '(' (1611,24)-(1611,25)
                        identifier: 'context_p' (1611,25)-(1611,34)
                        ): ')' (1611,34)-(1611,35)
                    ;: ';' (1611,35)-(1611,36)
                  if_statement (1613,7)-(1617,8)
                    if: 'if' (1613,7)-(1613,9)
                    parenthesized_expression (1613,10)-(1614,73)
                      (: '(' (1613,10)-(1613,11)
                      binary_expression (1613,11)-(1614,72)
                        binary_expression (1613,11)-(1613,49)
                          field_expression (1613,11)-(1613,32)
                            field_expression (1613,11)-(1613,27)
                              identifier: 'context_p' (1613,11)-(1613,20)
                              ->: '->' (1613,20)-(1613,22)
                              field_identifier: 'token' (1613,22)-(1613,27)
                            .: '.' (1613,27)-(1613,28)
                            field_identifier: 'type' (1613,28)-(1613,32)
                          !=: '!=' (1613,33)-(1613,35)
                          identifier: 'LEXER_LITERAL' (1613,36)-(1613,49)
                        &&: '&&' (1614,11)-(1614,13)
                        binary_expression (1614,14)-(1614,72)
                          field_expression (1614,14)-(1614,48)
                            field_expression (1614,14)-(1614,43)
                              field_expression (1614,14)-(1614,30)
                                identifier: 'context_p' (1614,14)-(1614,23)
                                ->: '->' (1614,23)-(1614,25)
                                field_identifier: 'token' (1614,25)-(1614,30)
                              .: '.' (1614,30)-(1614,31)
                              field_identifier: 'lit_location' (1614,31)-(1614,43)
                            .: '.' (1614,43)-(1614,44)
                            field_identifier: 'type' (1614,44)-(1614,48)
                          !=: '!=' (1614,49)-(1614,51)
                          identifier: 'LEXER_STRING_LITERAL' (1614,52)-(1614,72)
                      ): ')' (1614,72)-(1614,73)
                    compound_statement (1615,7)-(1617,8)
                      {: '{' (1615,7)-(1615,8)
                      expression_statement (1616,9)-(1616,41)
                        call_expression (1616,9)-(1616,40)
                          identifier: 'scanner_raise_error' (1616,9)-(1616,28)
                          argument_list (1616,29)-(1616,40)
                            (: '(' (1616,29)-(1616,30)
                            identifier: 'context_p' (1616,30)-(1616,39)
                            ): ')' (1616,39)-(1616,40)
                        ;: ';' (1616,40)-(1616,41)
                      }: '}' (1617,7)-(1617,8)
                  return_statement (1619,7)-(1619,30)
                    return: 'return' (1619,7)-(1619,13)
                    identifier: 'SCAN_NEXT_TOKEN' (1619,14)-(1619,29)
                    ;: ';' (1619,29)-(1619,30)
                  }: '}' (1620,5)-(1620,6)
              case_statement (1621,5)-(1812,6)
                case: 'case' (1621,5)-(1621,9)
                identifier: 'LEXER_KEYW_EXPORT' (1621,10)-(1621,27)
                :: ':' (1621,27)-(1621,28)
                compound_statement (1622,5)-(1812,6)
                  {: '{' (1622,5)-(1622,6)
                  if_statement (1623,7)-(1626,8)
                    if: 'if' (1623,7)-(1623,9)
                    parenthesized_expression (1623,10)-(1623,42)
                      (: '(' (1623,10)-(1623,11)
                      binary_expression (1623,11)-(1623,41)
                        identifier: 'stack_top' (1623,11)-(1623,20)
                        !=: '!=' (1623,21)-(1623,23)
                        identifier: 'SCAN_STACK_SCRIPT' (1623,24)-(1623,41)
                      ): ')' (1623,41)-(1623,42)
                    compound_statement (1624,7)-(1626,8)
                      {: '{' (1624,7)-(1624,8)
                      expression_statement (1625,9)-(1625,41)
                        call_expression (1625,9)-(1625,40)
                          identifier: 'scanner_raise_error' (1625,9)-(1625,28)
                          argument_list (1625,29)-(1625,40)
                            (: '(' (1625,29)-(1625,30)
                            identifier: 'context_p' (1625,30)-(1625,39)
                            ): ')' (1625,39)-(1625,40)
                        ;: ';' (1625,40)-(1625,41)
                      }: '}' (1626,7)-(1626,8)
                  expression_statement (1628,7)-(1628,59)
                    assignment_expression (1628,7)-(1628,58)
                      field_expression (1628,7)-(1628,37)
                        identifier: 'context_p' (1628,7)-(1628,16)
                        ->: '->' (1628,16)-(1628,18)
                        field_identifier: 'global_status_flags' (1628,18)-(1628,37)
                      |=: '|=' (1628,38)-(1628,40)
                      identifier: 'ECMA_PARSE_MODULE' (1628,41)-(1628,58)
                    ;: ';' (1628,58)-(1628,59)
                  expression_statement (1630,7)-(1630,36)
                    call_expression (1630,7)-(1630,35)
                      identifier: 'lexer_next_token' (1630,7)-(1630,23)
                      argument_list (1630,24)-(1630,35)
                        (: '(' (1630,24)-(1630,25)
                        identifier: 'context_p' (1630,25)-(1630,34)
                        ): ')' (1630,34)-(1630,35)
                    ;: ';' (1630,35)-(1630,36)
                  if_statement (1632,7)-(1717,8)
                    if: 'if' (1632,7)-(1632,9)
                    parenthesized_expression (1632,10)-(1632,55)
                      (: '(' (1632,10)-(1632,11)
                      binary_expression (1632,11)-(1632,54)
                        field_expression (1632,11)-(1632,32)
                          field_expression (1632,11)-(1632,27)
                            identifier: 'context_p' (1632,11)-(1632,20)
                            ->: '->' (1632,20)-(1632,22)
                            field_identifier: 'token' (1632,22)-(1632,27)
                          .: '.' (1632,27)-(1632,28)
                          field_identifier: 'type' (1632,28)-(1632,32)
                        ==: '==' (1632,33)-(1632,35)
                        identifier: 'LEXER_KEYW_DEFAULT' (1632,36)-(1632,54)
                      ): ')' (1632,54)-(1632,55)
                    compound_statement (1633,7)-(1717,8)
                      {: '{' (1633,7)-(1633,8)
                      expression_statement (1634,9)-(1634,38)
                        call_expression (1634,9)-(1634,37)
                          identifier: 'lexer_next_token' (1634,9)-(1634,25)
                          argument_list (1634,26)-(1634,37)
                            (: '(' (1634,26)-(1634,27)
                            identifier: 'context_p' (1634,27)-(1634,36)
                            ): ')' (1634,36)-(1634,37)
                        ;: ';' (1634,37)-(1634,38)
                      if_statement (1636,9)-(1675,10)
                        if: 'if' (1636,9)-(1636,11)
                        parenthesized_expression (1636,12)-(1636,58)
                          (: '(' (1636,12)-(1636,13)
                          binary_expression (1636,13)-(1636,57)
                            field_expression (1636,13)-(1636,34)
                              field_expression (1636,13)-(1636,29)
                                identifier: 'context_p' (1636,13)-(1636,22)
                                ->: '->' (1636,22)-(1636,24)
                                field_identifier: 'token' (1636,24)-(1636,29)
                              .: '.' (1636,29)-(1636,30)
                              field_identifier: 'type' (1636,30)-(1636,34)
                            ==: '==' (1636,35)-(1636,37)
                            identifier: 'LEXER_KEYW_FUNCTION' (1636,38)-(1636,57)
                          ): ')' (1636,57)-(1636,58)
                        compound_statement (1637,9)-(1675,10)
                          {: '{' (1637,9)-(1637,10)
                          expression_statement (1638,11)-(1638,40)
                            call_expression (1638,11)-(1638,39)
                              identifier: 'lexer_next_token' (1638,11)-(1638,27)
                              argument_list (1638,28)-(1638,39)
                                (: '(' (1638,28)-(1638,29)
                                identifier: 'context_p' (1638,29)-(1638,38)
                                ): ')' (1638,38)-(1638,39)
                            ;: ';' (1638,39)-(1638,40)
                          if_statement (1639,11)-(1668,12)
                            if: 'if' (1639,11)-(1639,13)
                            parenthesized_expression (1639,14)-(1640,76)
                              (: '(' (1639,14)-(1639,15)
                              binary_expression (1639,15)-(1640,75)
                                binary_expression (1639,15)-(1639,53)
                                  field_expression (1639,15)-(1639,36)
                                    field_expression (1639,15)-(1639,31)
                                      identifier: 'context_p' (1639,15)-(1639,24)
                                      ->: '->' (1639,24)-(1639,26)
                                      field_identifier: 'token' (1639,26)-(1639,31)
                                    .: '.' (1639,31)-(1639,32)
                                    field_identifier: 'type' (1639,32)-(1639,36)
                                  ==: '==' (1639,37)-(1639,39)
                                  identifier: 'LEXER_LITERAL' (1639,40)-(1639,53)
                                &&: '&&' (1640,15)-(1640,17)
                                binary_expression (1640,18)-(1640,75)
                                  field_expression (1640,18)-(1640,52)
                                    field_expression (1640,18)-(1640,47)
                                      field_expression (1640,18)-(1640,34)
                                        identifier: 'context_p' (1640,18)-(1640,27)
                                        ->: '->' (1640,27)-(1640,29)
                                        field_identifier: 'token' (1640,29)-(1640,34)
                                      .: '.' (1640,34)-(1640,35)
                                      field_identifier: 'lit_location' (1640,35)-(1640,47)
                                    .: '.' (1640,47)-(1640,48)
                                    field_identifier: 'type' (1640,48)-(1640,52)
                                  ==: '==' (1640,53)-(1640,55)
                                  identifier: 'LEXER_IDENT_LITERAL' (1640,56)-(1640,75)
                              ): ')' (1640,75)-(1640,76)
                            compound_statement (1641,11)-(1656,12)
                              {: '{' (1641,11)-(1641,12)
                              declaration (1642,13)-(1642,99)
                                type_identifier: 'lexer_lit_location_t' (1642,13)-(1642,33)
                                init_declarator (1642,34)-(1642,98)
                                  pointer_declarator (1642,34)-(1642,45)
                                    *: '*' (1642,34)-(1642,35)
                                    identifier: 'location_p' (1642,35)-(1642,45)
                                  =: '=' (1642,46)-(1642,47)
                                  call_expression (1642,48)-(1642,98)
                                    identifier: 'scanner_add_literal' (1642,48)-(1642,67)
                                    argument_list (1642,68)-(1642,98)
                                      (: '(' (1642,68)-(1642,69)
                                      identifier: 'context_p' (1642,69)-(1642,78)
                                      ,: ',' (1642,78)-(1642,79)
                                      identifier: 'scanner_context_p' (1642,80)-(1642,97)
                                      ): ')' (1642,97)-(1642,98)
                                ;: ';' (1642,98)-(1642,99)
                              preproc_if (1644,1)-(1653,7)
                                #if: '#if' (1644,1)-(1644,4)
                                call_expression (1644,5)-(1644,27)
                                  identifier: 'ENABLED' (1644,5)-(1644,12)
                                  argument_list (1644,13)-(1644,27)
                                    (: '(' (1644,13)-(1644,14)
                                    identifier: 'JERRY_ES2015' (1644,14)-(1644,26)
                                    ): ')' (1644,26)-(1644,27)
                                
: '
' (1644,27)-(1645,1)
                                if_statement (1645,13)-(1649,14)
                                  if: 'if' (1645,13)-(1645,15)
                                  parenthesized_expression (1645,16)-(1646,66)
                                    (: '(' (1645,16)-(1645,17)
                                    binary_expression (1645,17)-(1646,65)
                                      binary_expression (1645,17)-(1645,60)
                                        field_expression (1645,17)-(1645,33)
                                          identifier: 'location_p' (1645,17)-(1645,27)
                                          ->: '->' (1645,27)-(1645,29)
                                          field_identifier: 'type' (1645,29)-(1645,33)
                                        &: '&' (1645,34)-(1645,35)
                                        identifier: 'SCANNER_LITERAL_IS_LOCAL' (1645,36)-(1645,60)
                                      &&: '&&' (1646,17)-(1646,19)
                                      unary_expression (1646,20)-(1646,65)
                                        !: '!' (1646,20)-(1646,21)
                                        parenthesized_expression (1646,21)-(1646,65)
                                          (: '(' (1646,21)-(1646,22)
                                          binary_expression (1646,22)-(1646,64)
                                            field_expression (1646,22)-(1646,38)
                                              identifier: 'location_p' (1646,22)-(1646,32)
                                              ->: '->' (1646,32)-(1646,34)
                                              field_identifier: 'type' (1646,34)-(1646,38)
                                            &: '&' (1646,39)-(1646,40)
                                            identifier: 'SCANNER_LITERAL_IS_FUNC' (1646,41)-(1646,64)
                                          ): ')' (1646,64)-(1646,65)
                                    ): ')' (1646,65)-(1646,66)
                                  compound_statement (1647,13)-(1649,14)
                                    {: '{' (1647,13)-(1647,14)
                                    expression_statement (1648,15)-(1648,61)
                                      call_expression (1648,15)-(1648,60)
                                        identifier: 'scanner_raise_redeclaration_error' (1648,15)-(1648,48)
                                        argument_list (1648,49)-(1648,60)
                                          (: '(' (1648,49)-(1648,50)
                                          identifier: 'context_p' (1648,50)-(1648,59)
                                          ): ')' (1648,59)-(1648,60)
                                      ;: ';' (1648,60)-(1648,61)
                                    }: '}' (1649,13)-(1649,14)
                                expression_statement (1650,13)-(1650,82)
                                  assignment_expression (1650,13)-(1650,81)
                                    field_expression (1650,13)-(1650,29)
                                      identifier: 'location_p' (1650,13)-(1650,23)
                                      ->: '->' (1650,23)-(1650,25)
                                      field_identifier: 'type' (1650,25)-(1650,29)
                                    |=: '|=' (1650,30)-(1650,32)
                                    binary_expression (1650,33)-(1650,81)
                                      identifier: 'SCANNER_LITERAL_IS_FUNC' (1650,33)-(1650,56)
                                      |: '|' (1650,57)-(1650,58)
                                      identifier: 'SCANNER_LITERAL_IS_LET' (1650,59)-(1650,81)
                                  ;: ';' (1650,81)-(1650,82)
                                preproc_else (1651,1)-(1652,82)
                                  #else: '#else' (1651,1)-(1651,6)
                                  comment: '/* !ENABLED (JERRY_ES2015) */' (1651,7)-(1651,36)
                                  expression_statement (1652,13)-(1652,82)
                                    assignment_expression (1652,13)-(1652,81)
                                      field_expression (1652,13)-(1652,29)
                                        identifier: 'location_p' (1652,13)-(1652,23)
                                        ->: '->' (1652,23)-(1652,25)
                                        field_identifier: 'type' (1652,25)-(1652,29)
                                      |=: '|=' (1652,30)-(1652,32)
                                      binary_expression (1652,33)-(1652,81)
                                        identifier: 'SCANNER_LITERAL_IS_VAR' (1652,33)-(1652,55)
                                        |: '|' (1652,56)-(1652,57)
                                        identifier: 'SCANNER_LITERAL_IS_FUNC' (1652,58)-(1652,81)
                                    ;: ';' (1652,81)-(1652,82)
                                #endif: '#endif' (1653,1)-(1653,7)
                              comment: '/* ENABLED (JERRY_ES2015) */' (1653,8)-(1653,36)
                              expression_statement (1655,13)-(1655,42)
                                call_expression (1655,13)-(1655,41)
                                  identifier: 'lexer_next_token' (1655,13)-(1655,29)
                                  argument_list (1655,30)-(1655,41)
                                    (: '(' (1655,30)-(1655,31)
                                    identifier: 'context_p' (1655,31)-(1655,40)
                                    ): ')' (1655,40)-(1655,41)
                                ;: ';' (1655,41)-(1655,42)
                              }: '}' (1656,11)-(1656,12)
                            else_clause (1657,11)-(1668,12)
                              else: 'else' (1657,11)-(1657,15)
                              compound_statement (1658,11)-(1668,12)
                                {: '{' (1658,11)-(1658,12)
                                declaration (1659,13)-(1659,46)
                                  type_identifier: 'lexer_lit_location_t' (1659,13)-(1659,33)
                                  pointer_declarator (1659,34)-(1659,45)
                                    *: '*' (1659,34)-(1659,35)
                                    identifier: 'location_p' (1659,35)-(1659,45)
                                  ;: ';' (1659,45)-(1659,46)
                                expression_statement (1660,13)-(1662,78)
                                  assignment_expression (1660,13)-(1662,77)
                                    identifier: 'location_p' (1660,13)-(1660,23)
                                    =: '=' (1660,24)-(1660,25)
                                    call_expression (1660,26)-(1662,77)
                                      identifier: 'scanner_add_custom_literal' (1660,26)-(1660,52)
                                      argument_list (1660,53)-(1662,77)
                                        (: '(' (1660,53)-(1660,54)
                                        identifier: 'context_p' (1660,54)-(1660,63)
                                        ,: ',' (1660,63)-(1660,64)
                                        field_expression (1661,54)-(1661,94)
                                          identifier: 'scanner_context_p' (1661,54)-(1661,71)
                                          ->: '->' (1661,71)-(1661,73)
                                          field_identifier: 'active_literal_pool_p' (1661,73)-(1661,94)
                                        ,: ',' (1661,94)-(1661,95)
                                        pointer_expression (1662,54)-(1662,76)
                                          &: '&' (1662,54)-(1662,55)
                                          identifier: 'lexer_default_literal' (1662,55)-(1662,76)
                                        ): ')' (1662,76)-(1662,77)
                                  ;: ';' (1662,77)-(1662,78)
                                preproc_if (1663,1)-(1667,7)
                                  #if: '#if' (1663,1)-(1663,4)
                                  call_expression (1663,5)-(1663,27)
                                    identifier: 'ENABLED' (1663,5)-(1663,12)
                                    argument_list (1663,13)-(1663,27)
                                      (: '(' (1663,13)-(1663,14)
                                      identifier: 'JERRY_ES2015' (1663,14)-(1663,26)
                                      ): ')' (1663,26)-(1663,27)
                                  
: '
' (1663,27)-(1664,1)
                                  expression_statement (1664,13)-(1664,82)
                                    assignment_expression (1664,13)-(1664,81)
                                      field_expression (1664,13)-(1664,29)
                                        identifier: 'location_p' (1664,13)-(1664,23)
                                        ->: '->' (1664,23)-(1664,25)
                                        field_identifier: 'type' (1664,25)-(1664,29)
                                      |=: '|=' (1664,30)-(1664,32)
                                      binary_expression (1664,33)-(1664,81)
                                        identifier: 'SCANNER_LITERAL_IS_FUNC' (1664,33)-(1664,56)
                                        |: '|' (1664,57)-(1664,58)
                                        identifier: 'SCANNER_LITERAL_IS_LET' (1664,59)-(1664,81)
                                    ;: ';' (1664,81)-(1664,82)
                                  preproc_else (1665,1)-(1666,82)
                                    #else: '#else' (1665,1)-(1665,6)
                                    comment: '/* !ENABLED (JERRY_ES2015) */' (1665,7)-(1665,36)
                                    expression_statement (1666,13)-(1666,82)
                                      assignment_expression (1666,13)-(1666,81)
                                        field_expression (1666,13)-(1666,29)
                                          identifier: 'location_p' (1666,13)-(1666,23)
                                          ->: '->' (1666,23)-(1666,25)
                                          field_identifier: 'type' (1666,25)-(1666,29)
                                        |=: '|=' (1666,30)-(1666,32)
                                        binary_expression (1666,33)-(1666,81)
                                          identifier: 'SCANNER_LITERAL_IS_VAR' (1666,33)-(1666,55)
                                          |: '|' (1666,56)-(1666,57)
                                          identifier: 'SCANNER_LITERAL_IS_FUNC' (1666,58)-(1666,81)
                                      ;: ';' (1666,81)-(1666,82)
                                  #endif: '#endif' (1667,1)-(1667,7)
                                comment: '/* ENABLED (JERRY_ES2015) */' (1667,8)-(1667,36)
                                }: '}' (1668,11)-(1668,12)
                          expression_statement (1670,11)-(1670,99)
                            call_expression (1670,11)-(1670,98)
                              identifier: 'scanner_push_literal_pool' (1670,11)-(1670,36)
                              argument_list (1670,37)-(1670,98)
                                (: '(' (1670,37)-(1670,38)
                                identifier: 'context_p' (1670,38)-(1670,47)
                                ,: ',' (1670,47)-(1670,48)
                                identifier: 'scanner_context_p' (1670,49)-(1670,66)
                                ,: ',' (1670,66)-(1670,67)
                                identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (1670,68)-(1670,97)
                                ): ')' (1670,97)-(1670,98)
                            ;: ';' (1670,98)-(1670,99)
                          expression_statement (1672,11)-(1672,78)
                            call_expression (1672,11)-(1672,77)
                              identifier: 'parser_stack_push_uint8' (1672,11)-(1672,34)
                              argument_list (1672,35)-(1672,77)
                                (: '(' (1672,35)-(1672,36)
                                identifier: 'context_p' (1672,36)-(1672,45)
                                ,: ',' (1672,45)-(1672,46)
                                identifier: 'SCAN_STACK_FUNCTION_STATEMENT' (1672,47)-(1672,76)
                                ): ')' (1672,76)-(1672,77)
                            ;: ';' (1672,77)-(1672,78)
                          expression_statement (1673,11)-(1673,66)
                            assignment_expression (1673,11)-(1673,65)
                              field_expression (1673,11)-(1673,34)
                                identifier: 'scanner_context_p' (1673,11)-(1673,28)
                                ->: '->' (1673,28)-(1673,30)
                                field_identifier: 'mode' (1673,30)-(1673,34)
                              =: '=' (1673,35)-(1673,36)
                              identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (1673,37)-(1673,65)
                            ;: ';' (1673,65)-(1673,66)
                          return_statement (1674,11)-(1674,34)
                            return: 'return' (1674,11)-(1674,17)
                            identifier: 'SCAN_KEEP_TOKEN' (1674,18)-(1674,33)
                            ;: ';' (1674,33)-(1674,34)
                          }: '}' (1675,9)-(1675,10)
                      preproc_if (1676,1)-(1698,7)
                        #if: '#if' (1676,1)-(1676,4)
                        call_expression (1676,5)-(1676,27)
                          identifier: 'ENABLED' (1676,5)-(1676,12)
                          argument_list (1676,13)-(1676,27)
                            (: '(' (1676,13)-(1676,14)
                            identifier: 'JERRY_ES2015' (1676,14)-(1676,26)
                            ): ')' (1676,26)-(1676,27)
                        
: '
' (1676,27)-(1677,1)
                        if_statement (1677,9)-(1697,10)
                          if: 'if' (1677,9)-(1677,11)
                          parenthesized_expression (1677,12)-(1677,55)
                            (: '(' (1677,12)-(1677,13)
                            binary_expression (1677,13)-(1677,54)
                              field_expression (1677,13)-(1677,34)
                                field_expression (1677,13)-(1677,29)
                                  identifier: 'context_p' (1677,13)-(1677,22)
                                  ->: '->' (1677,22)-(1677,24)
                                  field_identifier: 'token' (1677,24)-(1677,29)
                                .: '.' (1677,29)-(1677,30)
                                field_identifier: 'type' (1677,30)-(1677,34)
                              ==: '==' (1677,35)-(1677,37)
                              identifier: 'LEXER_KEYW_CLASS' (1677,38)-(1677,54)
                            ): ')' (1677,54)-(1677,55)
                          compound_statement (1678,9)-(1697,10)
                            {: '{' (1678,9)-(1678,10)
                            expression_statement (1679,11)-(1679,101)
                              call_expression (1679,11)-(1679,100)
                                identifier: 'scanner_push_class_declaration' (1679,11)-(1679,41)
                                argument_list (1679,42)-(1679,100)
                                  (: '(' (1679,42)-(1679,43)
                                  identifier: 'context_p' (1679,43)-(1679,52)
                                  ,: ',' (1679,52)-(1679,53)
                                  identifier: 'scanner_context_p' (1679,54)-(1679,71)
                                  ,: ',' (1679,71)-(1679,72)
                                  identifier: 'SCAN_STACK_CLASS_STATEMENT' (1679,73)-(1679,99)
                                  ): ')' (1679,99)-(1679,100)
                              ;: ';' (1679,100)-(1679,101)
                            if_statement (1681,11)-(1689,12)
                              if: 'if' (1681,11)-(1681,13)
                              parenthesized_expression (1681,14)-(1681,115)
                                (: '(' (1681,14)-(1681,15)
                                binary_expression (1681,15)-(1681,114)
                                  binary_expression (1681,15)-(1681,53)
                                    field_expression (1681,15)-(1681,36)
                                      field_expression (1681,15)-(1681,31)
                                        identifier: 'context_p' (1681,15)-(1681,24)
                                        ->: '->' (1681,24)-(1681,26)
                                        field_identifier: 'token' (1681,26)-(1681,31)
                                      .: '.' (1681,31)-(1681,32)
                                      field_identifier: 'type' (1681,32)-(1681,36)
                                    ==: '==' (1681,37)-(1681,39)
                                    identifier: 'LEXER_LITERAL' (1681,40)-(1681,53)
                                  &&: '&&' (1681,54)-(1681,56)
                                  binary_expression (1681,57)-(1681,114)
                                    field_expression (1681,57)-(1681,91)
                                      field_expression (1681,57)-(1681,86)
                                        field_expression (1681,57)-(1681,73)
                                          identifier: 'context_p' (1681,57)-(1681,66)
                                          ->: '->' (1681,66)-(1681,68)
                                          field_identifier: 'token' (1681,68)-(1681,73)
                                        .: '.' (1681,73)-(1681,74)
                                        field_identifier: 'lit_location' (1681,74)-(1681,86)
                                      .: '.' (1681,86)-(1681,87)
                                      field_identifier: 'type' (1681,87)-(1681,91)
                                    ==: '==' (1681,92)-(1681,94)
                                    identifier: 'LEXER_IDENT_LITERAL' (1681,95)-(1681,114)
                                ): ')' (1681,114)-(1681,115)
                              compound_statement (1682,11)-(1689,12)
                                {: '{' (1682,11)-(1682,12)
                                declaration (1683,13)-(1683,98)
                                  type_identifier: 'lexer_lit_location_t' (1683,13)-(1683,33)
                                  init_declarator (1683,34)-(1683,97)
                                    pointer_declarator (1683,34)-(1683,44)
                                      *: '*' (1683,34)-(1683,35)
                                      identifier: 'literal_p' (1683,35)-(1683,44)
                                    =: '=' (1683,45)-(1683,46)
                                    call_expression (1683,47)-(1683,97)
                                      identifier: 'scanner_add_literal' (1683,47)-(1683,66)
                                      argument_list (1683,67)-(1683,97)
                                        (: '(' (1683,67)-(1683,68)
                                        identifier: 'context_p' (1683,68)-(1683,77)
                                        ,: ',' (1683,77)-(1683,78)
                                        identifier: 'scanner_context_p' (1683,79)-(1683,96)
                                        ): ')' (1683,96)-(1683,97)
                                  ;: ';' (1683,97)-(1683,98)
                                expression_statement (1685,13)-(1685,63)
                                  call_expression (1685,13)-(1685,62)
                                    identifier: 'scanner_detect_invalid_let' (1685,13)-(1685,39)
                                    argument_list (1685,40)-(1685,62)
                                      (: '(' (1685,40)-(1685,41)
                                      identifier: 'context_p' (1685,41)-(1685,50)
                                      ,: ',' (1685,50)-(1685,51)
                                      identifier: 'literal_p' (1685,52)-(1685,61)
                                      ): ')' (1685,61)-(1685,62)
                                  ;: ';' (1685,62)-(1685,63)
                                expression_statement (1687,13)-(1687,80)
                                  assignment_expression (1687,13)-(1687,79)
                                    field_expression (1687,13)-(1687,28)
                                      identifier: 'literal_p' (1687,13)-(1687,22)
                                      ->: '->' (1687,22)-(1687,24)
                                      field_identifier: 'type' (1687,24)-(1687,28)
                                    |=: '|=' (1687,29)-(1687,31)
                                    binary_expression (1687,32)-(1687,79)
                                      identifier: 'SCANNER_LITERAL_IS_LET' (1687,32)-(1687,54)
                                      |: '|' (1687,55)-(1687,56)
                                      identifier: 'SCANNER_LITERAL_NO_REG' (1687,57)-(1687,79)
                                  ;: ';' (1687,79)-(1687,80)
                                return_statement (1688,13)-(1688,36)
                                  return: 'return' (1688,13)-(1688,19)
                                  identifier: 'SCAN_NEXT_TOKEN' (1688,20)-(1688,35)
                                  ;: ';' (1688,35)-(1688,36)
                                }: '}' (1689,11)-(1689,12)
                            declaration (1691,11)-(1691,43)
                              type_identifier: 'lexer_lit_location_t' (1691,11)-(1691,31)
                              pointer_declarator (1691,32)-(1691,42)
                                *: '*' (1691,32)-(1691,33)
                                identifier: 'literal_p' (1691,33)-(1691,42)
                              ;: ';' (1691,42)-(1691,43)
                            expression_statement (1692,11)-(1694,75)
                              assignment_expression (1692,11)-(1694,74)
                                identifier: 'literal_p' (1692,11)-(1692,20)
                                =: '=' (1692,21)-(1692,22)
                                call_expression (1692,23)-(1694,74)
                                  identifier: 'scanner_add_custom_literal' (1692,23)-(1692,49)
                                  argument_list (1692,50)-(1694,74)
                                    (: '(' (1692,50)-(1692,51)
                                    identifier: 'context_p' (1692,51)-(1692,60)
                                    ,: ',' (1692,60)-(1692,61)
                                    field_expression (1693,51)-(1693,91)
                                      identifier: 'scanner_context_p' (1693,51)-(1693,68)
                                      ->: '->' (1693,68)-(1693,70)
                                      field_identifier: 'active_literal_pool_p' (1693,70)-(1693,91)
                                    ,: ',' (1693,91)-(1693,92)
                                    pointer_expression (1694,51)-(1694,73)
                                      &: '&' (1694,51)-(1694,52)
                                      identifier: 'lexer_default_literal' (1694,52)-(1694,73)
                                    ): ')' (1694,73)-(1694,74)
                              ;: ';' (1694,74)-(1694,75)
                            expression_statement (1695,11)-(1695,78)
                              assignment_expression (1695,11)-(1695,77)
                                field_expression (1695,11)-(1695,26)
                                  identifier: 'literal_p' (1695,11)-(1695,20)
                                  ->: '->' (1695,20)-(1695,22)
                                  field_identifier: 'type' (1695,22)-(1695,26)
                                |=: '|=' (1695,27)-(1695,29)
                                binary_expression (1695,30)-(1695,77)
                                  identifier: 'SCANNER_LITERAL_IS_LET' (1695,30)-(1695,52)
                                  |: '|' (1695,53)-(1695,54)
                                  identifier: 'SCANNER_LITERAL_NO_REG' (1695,55)-(1695,77)
                              ;: ';' (1695,77)-(1695,78)
                            return_statement (1696,11)-(1696,34)
                              return: 'return' (1696,11)-(1696,17)
                              identifier: 'SCAN_KEEP_TOKEN' (1696,18)-(1696,33)
                              ;: ';' (1696,33)-(1696,34)
                            }: '}' (1697,9)-(1697,10)
                        #endif: '#endif' (1698,1)-(1698,7)
                      comment: '/* ENABLED (JERRY_ES2015) */' (1698,8)-(1698,36)
                      comment: '/* Assignment expression. */' (1700,9)-(1700,37)
                      declaration (1701,9)-(1701,42)
                        type_identifier: 'lexer_lit_location_t' (1701,9)-(1701,29)
                        pointer_declarator (1701,30)-(1701,41)
                          *: '*' (1701,30)-(1701,31)
                          identifier: 'location_p' (1701,31)-(1701,41)
                        ;: ';' (1701,41)-(1701,42)
                      expression_statement (1702,9)-(1704,74)
                        assignment_expression (1702,9)-(1704,73)
                          identifier: 'location_p' (1702,9)-(1702,19)
                          =: '=' (1702,20)-(1702,21)
                          call_expression (1702,22)-(1704,73)
                            identifier: 'scanner_add_custom_literal' (1702,22)-(1702,48)
                            argument_list (1702,49)-(1704,73)
                              (: '(' (1702,49)-(1702,50)
                              identifier: 'context_p' (1702,50)-(1702,59)
                              ,: ',' (1702,59)-(1702,60)
                              field_expression (1703,50)-(1703,90)
                                identifier: 'scanner_context_p' (1703,50)-(1703,67)
                                ->: '->' (1703,67)-(1703,69)
                                field_identifier: 'active_literal_pool_p' (1703,69)-(1703,90)
                              ,: ',' (1703,90)-(1703,91)
                              pointer_expression (1704,50)-(1704,72)
                                &: '&' (1704,50)-(1704,51)
                                identifier: 'lexer_default_literal' (1704,51)-(1704,72)
                              ): ')' (1704,72)-(1704,73)
                        ;: ';' (1704,73)-(1704,74)
                      expression_statement (1705,9)-(1705,52)
                        assignment_expression (1705,9)-(1705,51)
                          field_expression (1705,9)-(1705,25)
                            identifier: 'location_p' (1705,9)-(1705,19)
                            ->: '->' (1705,19)-(1705,21)
                            field_identifier: 'type' (1705,21)-(1705,25)
                          |=: '|=' (1705,26)-(1705,28)
                          identifier: 'SCANNER_LITERAL_IS_VAR' (1705,29)-(1705,51)
                        ;: ';' (1705,51)-(1705,52)
                      expression_statement (1706,9)-(1706,64)
                        assignment_expression (1706,9)-(1706,63)
                          field_expression (1706,9)-(1706,32)
                            identifier: 'scanner_context_p' (1706,9)-(1706,26)
                            ->: '->' (1706,26)-(1706,28)
                            field_identifier: 'mode' (1706,28)-(1706,32)
                          =: '=' (1706,33)-(1706,34)
                          identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1706,35)-(1706,63)
                        ;: ';' (1706,63)-(1706,64)
                      if_statement (1708,9)-(1711,10)
                        if: 'if' (1708,9)-(1708,11)
                        parenthesized_expression (1708,12)-(1708,113)
                          (: '(' (1708,12)-(1708,13)
                          binary_expression (1708,13)-(1708,112)
                            binary_expression (1708,13)-(1708,51)
                              field_expression (1708,13)-(1708,34)
                                field_expression (1708,13)-(1708,29)
                                  identifier: 'context_p' (1708,13)-(1708,22)
                                  ->: '->' (1708,22)-(1708,24)
                                  field_identifier: 'token' (1708,24)-(1708,29)
                                .: '.' (1708,29)-(1708,30)
                                field_identifier: 'type' (1708,30)-(1708,34)
                              !=: '!=' (1708,35)-(1708,37)
                              identifier: 'LEXER_LITERAL' (1708,38)-(1708,51)
                            ||: '||' (1708,52)-(1708,54)
                            binary_expression (1708,55)-(1708,112)
                              field_expression (1708,55)-(1708,89)
                                field_expression (1708,55)-(1708,84)
                                  field_expression (1708,55)-(1708,71)
                                    identifier: 'context_p' (1708,55)-(1708,64)
                                    ->: '->' (1708,64)-(1708,66)
                                    field_identifier: 'token' (1708,66)-(1708,71)
                                  .: '.' (1708,71)-(1708,72)
                                  field_identifier: 'lit_location' (1708,72)-(1708,84)
                                .: '.' (1708,84)-(1708,85)
                                field_identifier: 'type' (1708,85)-(1708,89)
                              !=: '!=' (1708,90)-(1708,92)
                              identifier: 'LEXER_IDENT_LITERAL' (1708,93)-(1708,112)
                          ): ')' (1708,112)-(1708,113)
                        compound_statement (1709,9)-(1711,10)
                          {: '{' (1709,9)-(1709,10)
                          return_statement (1710,11)-(1710,34)
                            return: 'return' (1710,11)-(1710,17)
                            identifier: 'SCAN_KEEP_TOKEN' (1710,18)-(1710,33)
                            ;: ';' (1710,33)-(1710,34)
                          }: '}' (1711,9)-(1711,10)
                      expression_statement (1713,9)-(1713,73)
                        assignment_expression (1713,9)-(1713,72)
                          identifier: 'location_p' (1713,9)-(1713,19)
                          =: '=' (1713,20)-(1713,21)
                          call_expression (1713,22)-(1713,72)
                            identifier: 'scanner_add_literal' (1713,22)-(1713,41)
                            argument_list (1713,42)-(1713,72)
                              (: '(' (1713,42)-(1713,43)
                              identifier: 'context_p' (1713,43)-(1713,52)
                              ,: ',' (1713,52)-(1713,53)
                              identifier: 'scanner_context_p' (1713,54)-(1713,71)
                              ): ')' (1713,71)-(1713,72)
                        ;: ';' (1713,72)-(1713,73)
                      expression_statement (1714,9)-(1714,52)
                        assignment_expression (1714,9)-(1714,51)
                          field_expression (1714,9)-(1714,25)
                            identifier: 'location_p' (1714,9)-(1714,19)
                            ->: '->' (1714,19)-(1714,21)
                            field_identifier: 'type' (1714,21)-(1714,25)
                          |=: '|=' (1714,26)-(1714,28)
                          identifier: 'SCANNER_LITERAL_IS_VAR' (1714,29)-(1714,51)
                        ;: ';' (1714,51)-(1714,52)
                      expression_statement (1715,9)-(1715,69)
                        assignment_expression (1715,9)-(1715,68)
                          field_expression (1715,9)-(1715,32)
                            identifier: 'scanner_context_p' (1715,9)-(1715,26)
                            ->: '->' (1715,26)-(1715,28)
                            field_identifier: 'mode' (1715,28)-(1715,32)
                          =: '=' (1715,33)-(1715,34)
                          identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (1715,35)-(1715,68)
                        ;: ';' (1715,68)-(1715,69)
                      return_statement (1716,9)-(1716,32)
                        return: 'return' (1716,9)-(1716,15)
                        identifier: 'SCAN_NEXT_TOKEN' (1716,16)-(1716,31)
                        ;: ';' (1716,31)-(1716,32)
                      }: '}' (1717,7)-(1717,8)
                  expression_statement (1719,7)-(1719,57)
                    assignment_expression (1719,7)-(1719,56)
                      field_expression (1719,7)-(1719,30)
                        identifier: 'scanner_context_p' (1719,7)-(1719,24)
                        ->: '->' (1719,24)-(1719,26)
                        field_identifier: 'mode' (1719,26)-(1719,30)
                      =: '=' (1719,31)-(1719,32)
                      identifier: 'SCAN_MODE_STATEMENT_END' (1719,33)-(1719,56)
                    ;: ';' (1719,56)-(1719,57)
                  if_statement (1721,7)-(1738,8)
                    if: 'if' (1721,7)-(1721,9)
                    parenthesized_expression (1721,10)-(1721,51)
                      (: '(' (1721,10)-(1721,11)
                      binary_expression (1721,11)-(1721,50)
                        field_expression (1721,11)-(1721,32)
                          field_expression (1721,11)-(1721,27)
                            identifier: 'context_p' (1721,11)-(1721,20)
                            ->: '->' (1721,20)-(1721,22)
                            field_identifier: 'token' (1721,22)-(1721,27)
                          .: '.' (1721,27)-(1721,28)
                          field_identifier: 'type' (1721,28)-(1721,32)
                        ==: '==' (1721,33)-(1721,35)
                        identifier: 'LEXER_MULTIPLY' (1721,36)-(1721,50)
                      ): ')' (1721,50)-(1721,51)
                    compound_statement (1722,7)-(1738,8)
                      {: '{' (1722,7)-(1722,8)
                      expression_statement (1723,9)-(1723,38)
                        call_expression (1723,9)-(1723,37)
                          identifier: 'lexer_next_token' (1723,9)-(1723,25)
                          argument_list (1723,26)-(1723,37)
                            (: '(' (1723,26)-(1723,27)
                            identifier: 'context_p' (1723,27)-(1723,36)
                            ): ')' (1723,36)-(1723,37)
                        ;: ';' (1723,37)-(1723,38)
                      if_statement (1724,9)-(1727,10)
                        if: 'if' (1724,9)-(1724,11)
                        parenthesized_expression (1724,12)-(1724,63)
                          (: '(' (1724,12)-(1724,13)
                          unary_expression (1724,13)-(1724,62)
                            !: '!' (1724,13)-(1724,14)
                            call_expression (1724,14)-(1724,62)
                              identifier: 'lexer_token_is_identifier' (1724,14)-(1724,39)
                              argument_list (1724,40)-(1724,62)
                                (: '(' (1724,40)-(1724,41)
                                identifier: 'context_p' (1724,41)-(1724,50)
                                ,: ',' (1724,50)-(1724,51)
                                string_literal (1724,52)-(1724,58)
                                  ": '"' (1724,52)-(1724,53)
                                  string_content: 'from' (1724,53)-(1724,57)
                                  ": '"' (1724,57)-(1724,58)
                                ,: ',' (1724,58)-(1724,59)
                                number_literal: '4' (1724,60)-(1724,61)
                                ): ')' (1724,61)-(1724,62)
                          ): ')' (1724,62)-(1724,63)
                        compound_statement (1725,9)-(1727,10)
                          {: '{' (1725,9)-(1725,10)
                          expression_statement (1726,11)-(1726,43)
                            call_expression (1726,11)-(1726,42)
                              identifier: 'scanner_raise_error' (1726,11)-(1726,30)
                              argument_list (1726,31)-(1726,42)
                                (: '(' (1726,31)-(1726,32)
                                identifier: 'context_p' (1726,32)-(1726,41)
                                ): ')' (1726,41)-(1726,42)
                            ;: ';' (1726,42)-(1726,43)
                          }: '}' (1727,9)-(1727,10)
                      expression_statement (1729,9)-(1729,38)
                        call_expression (1729,9)-(1729,37)
                          identifier: 'lexer_next_token' (1729,9)-(1729,25)
                          argument_list (1729,26)-(1729,37)
                            (: '(' (1729,26)-(1729,27)
                            identifier: 'context_p' (1729,27)-(1729,36)
                            ): ')' (1729,36)-(1729,37)
                        ;: ';' (1729,37)-(1729,38)
                      if_statement (1731,9)-(1735,10)
                        if: 'if' (1731,9)-(1731,11)
                        parenthesized_expression (1731,12)-(1732,75)
                          (: '(' (1731,12)-(1731,13)
                          binary_expression (1731,13)-(1732,74)
                            binary_expression (1731,13)-(1731,51)
                              field_expression (1731,13)-(1731,34)
                                field_expression (1731,13)-(1731,29)
                                  identifier: 'context_p' (1731,13)-(1731,22)
                                  ->: '->' (1731,22)-(1731,24)
                                  field_identifier: 'token' (1731,24)-(1731,29)
                                .: '.' (1731,29)-(1731,30)
                                field_identifier: 'type' (1731,30)-(1731,34)
                              !=: '!=' (1731,35)-(1731,37)
                              identifier: 'LEXER_LITERAL' (1731,38)-(1731,51)
                            &&: '&&' (1732,13)-(1732,15)
                            binary_expression (1732,16)-(1732,74)
                              field_expression (1732,16)-(1732,50)
                                field_expression (1732,16)-(1732,45)
                                  field_expression (1732,16)-(1732,32)
                                    identifier: 'context_p' (1732,16)-(1732,25)
                                    ->: '->' (1732,25)-(1732,27)
                                    field_identifier: 'token' (1732,27)-(1732,32)
                                  .: '.' (1732,32)-(1732,33)
                                  field_identifier: 'lit_location' (1732,33)-(1732,45)
                                .: '.' (1732,45)-(1732,46)
                                field_identifier: 'type' (1732,46)-(1732,50)
                              ==: '==' (1732,51)-(1732,53)
                              identifier: 'LEXER_STRING_LITERAL' (1732,54)-(1732,74)
                          ): ')' (1732,74)-(1732,75)
                        compound_statement (1733,9)-(1735,10)
                          {: '{' (1733,9)-(1733,10)
                          expression_statement (1734,11)-(1734,43)
                            call_expression (1734,11)-(1734,42)
                              identifier: 'scanner_raise_error' (1734,11)-(1734,30)
                              argument_list (1734,31)-(1734,42)
                                (: '(' (1734,31)-(1734,32)
                                identifier: 'context_p' (1734,32)-(1734,41)
                                ): ')' (1734,41)-(1734,42)
                            ;: ';' (1734,42)-(1734,43)
                          }: '}' (1735,9)-(1735,10)
                      return_statement (1737,9)-(1737,32)
                        return: 'return' (1737,9)-(1737,15)
                        identifier: 'SCAN_NEXT_TOKEN' (1737,16)-(1737,31)
                        ;: ';' (1737,31)-(1737,32)
                      }: '}' (1738,7)-(1738,8)
                  if_statement (1740,7)-(1794,8)
                    if: 'if' (1740,7)-(1740,9)
                    parenthesized_expression (1740,10)-(1740,53)
                      (: '(' (1740,10)-(1740,11)
                      binary_expression (1740,11)-(1740,52)
                        field_expression (1740,11)-(1740,32)
                          field_expression (1740,11)-(1740,27)
                            identifier: 'context_p' (1740,11)-(1740,20)
                            ->: '->' (1740,20)-(1740,22)
                            field_identifier: 'token' (1740,22)-(1740,27)
                          .: '.' (1740,27)-(1740,28)
                          field_identifier: 'type' (1740,28)-(1740,32)
                        ==: '==' (1740,33)-(1740,35)
                        identifier: 'LEXER_LEFT_BRACE' (1740,36)-(1740,52)
                      ): ')' (1740,52)-(1740,53)
                    compound_statement (1741,7)-(1794,8)
                      {: '{' (1741,7)-(1741,8)
                      expression_statement (1742,9)-(1742,38)
                        call_expression (1742,9)-(1742,37)
                          identifier: 'lexer_next_token' (1742,9)-(1742,25)
                          argument_list (1742,26)-(1742,37)
                            (: '(' (1742,26)-(1742,27)
                            identifier: 'context_p' (1742,27)-(1742,36)
                            ): ')' (1742,36)-(1742,37)
                        ;: ';' (1742,37)-(1742,38)
                      while_statement (1744,9)-(1776,10)
                        while: 'while' (1744,9)-(1744,14)
                        parenthesized_expression (1744,15)-(1744,59)
                          (: '(' (1744,15)-(1744,16)
                          binary_expression (1744,16)-(1744,58)
                            field_expression (1744,16)-(1744,37)
                              field_expression (1744,16)-(1744,32)
                                identifier: 'context_p' (1744,16)-(1744,25)
                                ->: '->' (1744,25)-(1744,27)
                                field_identifier: 'token' (1744,27)-(1744,32)
                              .: '.' (1744,32)-(1744,33)
                              field_identifier: 'type' (1744,33)-(1744,37)
                            !=: '!=' (1744,38)-(1744,40)
                            identifier: 'LEXER_RIGHT_BRACE' (1744,41)-(1744,58)
                          ): ')' (1744,58)-(1744,59)
                        compound_statement (1745,9)-(1776,10)
                          {: '{' (1745,9)-(1745,10)
                          if_statement (1746,11)-(1750,12)
                            if: 'if' (1746,11)-(1746,13)
                            parenthesized_expression (1746,14)-(1747,76)
                              (: '(' (1746,14)-(1746,15)
                              binary_expression (1746,15)-(1747,75)
                                binary_expression (1746,15)-(1746,53)
                                  field_expression (1746,15)-(1746,36)
                                    field_expression (1746,15)-(1746,31)
                                      identifier: 'context_p' (1746,15)-(1746,24)
                                      ->: '->' (1746,24)-(1746,26)
                                      field_identifier: 'token' (1746,26)-(1746,31)
                                    .: '.' (1746,31)-(1746,32)
                                    field_identifier: 'type' (1746,32)-(1746,36)
                                  !=: '!=' (1746,37)-(1746,39)
                                  identifier: 'LEXER_LITERAL' (1746,40)-(1746,53)
                                ||: '||' (1747,15)-(1747,17)
                                binary_expression (1747,18)-(1747,75)
                                  field_expression (1747,18)-(1747,52)
                                    field_expression (1747,18)-(1747,47)
                                      field_expression (1747,18)-(1747,34)
                                        identifier: 'context_p' (1747,18)-(1747,27)
                                        ->: '->' (1747,27)-(1747,29)
                                        field_identifier: 'token' (1747,29)-(1747,34)
                                      .: '.' (1747,34)-(1747,35)
                                      field_identifier: 'lit_location' (1747,35)-(1747,47)
                                    .: '.' (1747,47)-(1747,48)
                                    field_identifier: 'type' (1747,48)-(1747,52)
                                  !=: '!=' (1747,53)-(1747,55)
                                  identifier: 'LEXER_IDENT_LITERAL' (1747,56)-(1747,75)
                              ): ')' (1747,75)-(1747,76)
                            compound_statement (1748,11)-(1750,12)
                              {: '{' (1748,11)-(1748,12)
                              expression_statement (1749,13)-(1749,45)
                                call_expression (1749,13)-(1749,44)
                                  identifier: 'scanner_raise_error' (1749,13)-(1749,32)
                                  argument_list (1749,33)-(1749,44)
                                    (: '(' (1749,33)-(1749,34)
                                    identifier: 'context_p' (1749,34)-(1749,43)
                                    ): ')' (1749,43)-(1749,44)
                                ;: ';' (1749,44)-(1749,45)
                              }: '}' (1750,11)-(1750,12)
                          expression_statement (1752,11)-(1752,40)
                            call_expression (1752,11)-(1752,39)
                              identifier: 'lexer_next_token' (1752,11)-(1752,27)
                              argument_list (1752,28)-(1752,39)
                                (: '(' (1752,28)-(1752,29)
                                identifier: 'context_p' (1752,29)-(1752,38)
                                ): ')' (1752,38)-(1752,39)
                            ;: ';' (1752,39)-(1752,40)
                          if_statement (1754,11)-(1765,12)
                            if: 'if' (1754,11)-(1754,13)
                            parenthesized_expression (1754,14)-(1754,62)
                              (: '(' (1754,14)-(1754,15)
                              call_expression (1754,15)-(1754,61)
                                identifier: 'lexer_token_is_identifier' (1754,15)-(1754,40)
                                argument_list (1754,41)-(1754,61)
                                  (: '(' (1754,41)-(1754,42)
                                  identifier: 'context_p' (1754,42)-(1754,51)
                                  ,: ',' (1754,51)-(1754,52)
                                  string_literal (1754,53)-(1754,57)
                                    ": '"' (1754,53)-(1754,54)
                                    string_content: 'as' (1754,54)-(1754,56)
                                    ": '"' (1754,56)-(1754,57)
                                  ,: ',' (1754,57)-(1754,58)
                                  number_literal: '2' (1754,59)-(1754,60)
                                  ): ')' (1754,60)-(1754,61)
                              ): ')' (1754,61)-(1754,62)
                            compound_statement (1755,11)-(1765,12)
                              {: '{' (1755,11)-(1755,12)
                              expression_statement (1756,13)-(1756,42)
                                call_expression (1756,13)-(1756,41)
                                  identifier: 'lexer_next_token' (1756,13)-(1756,29)
                                  argument_list (1756,30)-(1756,41)
                                    (: '(' (1756,30)-(1756,31)
                                    identifier: 'context_p' (1756,31)-(1756,40)
                                    ): ')' (1756,40)-(1756,41)
                                ;: ';' (1756,41)-(1756,42)
                              if_statement (1758,13)-(1762,14)
                                if: 'if' (1758,13)-(1758,15)
                                parenthesized_expression (1758,16)-(1759,78)
                                  (: '(' (1758,16)-(1758,17)
                                  binary_expression (1758,17)-(1759,77)
                                    binary_expression (1758,17)-(1758,55)
                                      field_expression (1758,17)-(1758,38)
                                        field_expression (1758,17)-(1758,33)
                                          identifier: 'context_p' (1758,17)-(1758,26)
                                          ->: '->' (1758,26)-(1758,28)
                                          field_identifier: 'token' (1758,28)-(1758,33)
                                        .: '.' (1758,33)-(1758,34)
                                        field_identifier: 'type' (1758,34)-(1758,38)
                                      !=: '!=' (1758,39)-(1758,41)
                                      identifier: 'LEXER_LITERAL' (1758,42)-(1758,55)
                                    &&: '&&' (1759,17)-(1759,19)
                                    binary_expression (1759,20)-(1759,77)
                                      field_expression (1759,20)-(1759,54)
                                        field_expression (1759,20)-(1759,49)
                                          field_expression (1759,20)-(1759,36)
                                            identifier: 'context_p' (1759,20)-(1759,29)
                                            ->: '->' (1759,29)-(1759,31)
                                            field_identifier: 'token' (1759,31)-(1759,36)
                                          .: '.' (1759,36)-(1759,37)
                                          field_identifier: 'lit_location' (1759,37)-(1759,49)
                                        .: '.' (1759,49)-(1759,50)
                                        field_identifier: 'type' (1759,50)-(1759,54)
                                      ==: '==' (1759,55)-(1759,57)
                                      identifier: 'LEXER_IDENT_LITERAL' (1759,58)-(1759,77)
                                  ): ')' (1759,77)-(1759,78)
                                compound_statement (1760,13)-(1762,14)
                                  {: '{' (1760,13)-(1760,14)
                                  expression_statement (1761,15)-(1761,47)
                                    call_expression (1761,15)-(1761,46)
                                      identifier: 'scanner_raise_error' (1761,15)-(1761,34)
                                      argument_list (1761,35)-(1761,46)
                                        (: '(' (1761,35)-(1761,36)
                                        identifier: 'context_p' (1761,36)-(1761,45)
                                        ): ')' (1761,45)-(1761,46)
                                    ;: ';' (1761,46)-(1761,47)
                                  }: '}' (1762,13)-(1762,14)
                              expression_statement (1764,13)-(1764,42)
                                call_expression (1764,13)-(1764,41)
                                  identifier: 'lexer_next_token' (1764,13)-(1764,29)
                                  argument_list (1764,30)-(1764,41)
                                    (: '(' (1764,30)-(1764,31)
                                    identifier: 'context_p' (1764,31)-(1764,40)
                                    ): ')' (1764,40)-(1764,41)
                                ;: ';' (1764,41)-(1764,42)
                              }: '}' (1765,11)-(1765,12)
                          if_statement (1767,11)-(1775,12)
                            if: 'if' (1767,11)-(1767,13)
                            parenthesized_expression (1767,14)-(1767,58)
                              (: '(' (1767,14)-(1767,15)
                              binary_expression (1767,15)-(1767,57)
                                field_expression (1767,15)-(1767,36)
                                  field_expression (1767,15)-(1767,31)
                                    identifier: 'context_p' (1767,15)-(1767,24)
                                    ->: '->' (1767,24)-(1767,26)
                                    field_identifier: 'token' (1767,26)-(1767,31)
                                  .: '.' (1767,31)-(1767,32)
                                  field_identifier: 'type' (1767,32)-(1767,36)
                                !=: '!=' (1767,37)-(1767,39)
                                identifier: 'LEXER_RIGHT_BRACE' (1767,40)-(1767,57)
                              ): ')' (1767,57)-(1767,58)
                            compound_statement (1768,11)-(1775,12)
                              {: '{' (1768,11)-(1768,12)
                              if_statement (1769,13)-(1772,14)
                                if: 'if' (1769,13)-(1769,15)
                                parenthesized_expression (1769,16)-(1769,54)
                                  (: '(' (1769,16)-(1769,17)
                                  binary_expression (1769,17)-(1769,53)
                                    field_expression (1769,17)-(1769,38)
                                      field_expression (1769,17)-(1769,33)
                                        identifier: 'context_p' (1769,17)-(1769,26)
                                        ->: '->' (1769,26)-(1769,28)
                                        field_identifier: 'token' (1769,28)-(1769,33)
                                      .: '.' (1769,33)-(1769,34)
                                      field_identifier: 'type' (1769,34)-(1769,38)
                                    !=: '!=' (1769,39)-(1769,41)
                                    identifier: 'LEXER_COMMA' (1769,42)-(1769,53)
                                  ): ')' (1769,53)-(1769,54)
                                compound_statement (1770,13)-(1772,14)
                                  {: '{' (1770,13)-(1770,14)
                                  expression_statement (1771,15)-(1771,47)
                                    call_expression (1771,15)-(1771,46)
                                      identifier: 'scanner_raise_error' (1771,15)-(1771,34)
                                      argument_list (1771,35)-(1771,46)
                                        (: '(' (1771,35)-(1771,36)
                                        identifier: 'context_p' (1771,36)-(1771,45)
                                        ): ')' (1771,45)-(1771,46)
                                    ;: ';' (1771,46)-(1771,47)
                                  }: '}' (1772,13)-(1772,14)
                              expression_statement (1774,13)-(1774,42)
                                call_expression (1774,13)-(1774,41)
                                  identifier: 'lexer_next_token' (1774,13)-(1774,29)
                                  argument_list (1774,30)-(1774,41)
                                    (: '(' (1774,30)-(1774,31)
                                    identifier: 'context_p' (1774,31)-(1774,40)
                                    ): ')' (1774,40)-(1774,41)
                                ;: ';' (1774,41)-(1774,42)
                              }: '}' (1775,11)-(1775,12)
                          }: '}' (1776,9)-(1776,10)
                      expression_statement (1778,9)-(1778,38)
                        call_expression (1778,9)-(1778,37)
                          identifier: 'lexer_next_token' (1778,9)-(1778,25)
                          argument_list (1778,26)-(1778,37)
                            (: '(' (1778,26)-(1778,27)
                            identifier: 'context_p' (1778,27)-(1778,36)
                            ): ')' (1778,36)-(1778,37)
                        ;: ';' (1778,37)-(1778,38)
                      if_statement (1780,9)-(1783,10)
                        if: 'if' (1780,9)-(1780,11)
                        parenthesized_expression (1780,12)-(1780,63)
                          (: '(' (1780,12)-(1780,13)
                          unary_expression (1780,13)-(1780,62)
                            !: '!' (1780,13)-(1780,14)
                            call_expression (1780,14)-(1780,62)
                              identifier: 'lexer_token_is_identifier' (1780,14)-(1780,39)
                              argument_list (1780,40)-(1780,62)
                                (: '(' (1780,40)-(1780,41)
                                identifier: 'context_p' (1780,41)-(1780,50)
                                ,: ',' (1780,50)-(1780,51)
                                string_literal (1780,52)-(1780,58)
                                  ": '"' (1780,52)-(1780,53)
                                  string_content: 'from' (1780,53)-(1780,57)
                                  ": '"' (1780,57)-(1780,58)
                                ,: ',' (1780,58)-(1780,59)
                                number_literal: '4' (1780,60)-(1780,61)
                                ): ')' (1780,61)-(1780,62)
                          ): ')' (1780,62)-(1780,63)
                        compound_statement (1781,9)-(1783,10)
                          {: '{' (1781,9)-(1781,10)
                          return_statement (1782,11)-(1782,34)
                            return: 'return' (1782,11)-(1782,17)
                            identifier: 'SCAN_KEEP_TOKEN' (1782,18)-(1782,33)
                            ;: ';' (1782,33)-(1782,34)
                          }: '}' (1783,9)-(1783,10)
                      expression_statement (1785,9)-(1785,38)
                        call_expression (1785,9)-(1785,37)
                          identifier: 'lexer_next_token' (1785,9)-(1785,25)
                          argument_list (1785,26)-(1785,37)
                            (: '(' (1785,26)-(1785,27)
                            identifier: 'context_p' (1785,27)-(1785,36)
                            ): ')' (1785,36)-(1785,37)
                        ;: ';' (1785,37)-(1785,38)
                      if_statement (1787,9)-(1791,10)
                        if: 'if' (1787,9)-(1787,11)
                        parenthesized_expression (1787,12)-(1788,75)
                          (: '(' (1787,12)-(1787,13)
                          binary_expression (1787,13)-(1788,74)
                            binary_expression (1787,13)-(1787,51)
                              field_expression (1787,13)-(1787,34)
                                field_expression (1787,13)-(1787,29)
                                  identifier: 'context_p' (1787,13)-(1787,22)
                                  ->: '->' (1787,22)-(1787,24)
                                  field_identifier: 'token' (1787,24)-(1787,29)
                                .: '.' (1787,29)-(1787,30)
                                field_identifier: 'type' (1787,30)-(1787,34)
                              !=: '!=' (1787,35)-(1787,37)
                              identifier: 'LEXER_LITERAL' (1787,38)-(1787,51)
                            &&: '&&' (1788,13)-(1788,15)
                            binary_expression (1788,16)-(1788,74)
                              field_expression (1788,16)-(1788,50)
                                field_expression (1788,16)-(1788,45)
                                  field_expression (1788,16)-(1788,32)
                                    identifier: 'context_p' (1788,16)-(1788,25)
                                    ->: '->' (1788,25)-(1788,27)
                                    field_identifier: 'token' (1788,27)-(1788,32)
                                  .: '.' (1788,32)-(1788,33)
                                  field_identifier: 'lit_location' (1788,33)-(1788,45)
                                .: '.' (1788,45)-(1788,46)
                                field_identifier: 'type' (1788,46)-(1788,50)
                              ==: '==' (1788,51)-(1788,53)
                              identifier: 'LEXER_STRING_LITERAL' (1788,54)-(1788,74)
                          ): ')' (1788,74)-(1788,75)
                        compound_statement (1789,9)-(1791,10)
                          {: '{' (1789,9)-(1789,10)
                          expression_statement (1790,11)-(1790,43)
                            call_expression (1790,11)-(1790,42)
                              identifier: 'scanner_raise_error' (1790,11)-(1790,30)
                              argument_list (1790,31)-(1790,42)
                                (: '(' (1790,31)-(1790,32)
                                identifier: 'context_p' (1790,32)-(1790,41)
                                ): ')' (1790,41)-(1790,42)
                            ;: ';' (1790,42)-(1790,43)
                          }: '}' (1791,9)-(1791,10)
                      return_statement (1793,9)-(1793,32)
                        return: 'return' (1793,9)-(1793,15)
                        identifier: 'SCAN_NEXT_TOKEN' (1793,16)-(1793,31)
                        ;: ';' (1793,31)-(1793,32)
                      }: '}' (1794,7)-(1794,8)
                  switch_statement (1796,7)-(1808,8)
                    switch: 'switch' (1796,7)-(1796,13)
                    parenthesized_expression (1796,14)-(1796,37)
                      (: '(' (1796,14)-(1796,15)
                      field_expression (1796,15)-(1796,36)
                        field_expression (1796,15)-(1796,31)
                          identifier: 'context_p' (1796,15)-(1796,24)
                          ->: '->' (1796,24)-(1796,26)
                          field_identifier: 'token' (1796,26)-(1796,31)
                        .: '.' (1796,31)-(1796,32)
                        field_identifier: 'type' (1796,32)-(1796,36)
                      ): ')' (1796,36)-(1796,37)
                    compound_statement (1797,7)-(1808,8)
                      {: '{' (1797,7)-(1797,8)
                      preproc_if (1798,1)-(1802,7)
                        #if: '#if' (1798,1)-(1798,4)
                        call_expression (1798,5)-(1798,27)
                          identifier: 'ENABLED' (1798,5)-(1798,12)
                          argument_list (1798,13)-(1798,27)
                            (: '(' (1798,13)-(1798,14)
                            identifier: 'JERRY_ES2015' (1798,14)-(1798,26)
                            ): ')' (1798,26)-(1798,27)
                        
: '
' (1798,27)-(1799,1)
                        case_statement (1799,9)-(1799,31)
                          case: 'case' (1799,9)-(1799,13)
                          identifier: 'LEXER_KEYW_CLASS' (1799,14)-(1799,30)
                          :: ':' (1799,30)-(1799,31)
                        case_statement (1800,9)-(1800,29)
                          case: 'case' (1800,9)-(1800,13)
                          identifier: 'LEXER_KEYW_LET' (1800,14)-(1800,28)
                          :: ':' (1800,28)-(1800,29)
                        case_statement (1801,9)-(1801,31)
                          case: 'case' (1801,9)-(1801,13)
                          identifier: 'LEXER_KEYW_CONST' (1801,14)-(1801,30)
                          :: ':' (1801,30)-(1801,31)
                        #endif: '#endif' (1802,1)-(1802,7)
                      comment: '/* ENABLED (JERRY_ES2015) */' (1802,8)-(1802,36)
                      case_statement (1803,9)-(1807,10)
                        case: 'case' (1803,9)-(1803,13)
                        identifier: 'LEXER_KEYW_VAR' (1803,14)-(1803,28)
                        :: ':' (1803,28)-(1803,29)
                        compound_statement (1804,9)-(1807,10)
                          {: '{' (1804,9)-(1804,10)
                          expression_statement (1805,11)-(1805,100)
                            assignment_expression (1805,11)-(1805,99)
                              field_expression (1805,11)-(1805,65)
                                field_expression (1805,11)-(1805,51)
                                  identifier: 'scanner_context_p' (1805,11)-(1805,28)
                                  ->: '->' (1805,28)-(1805,30)
                                  field_identifier: 'active_literal_pool_p' (1805,30)-(1805,51)
                                ->: '->' (1805,51)-(1805,53)
                                field_identifier: 'status_flags' (1805,53)-(1805,65)
                              |=: '|=' (1805,66)-(1805,68)
                              identifier: 'SCANNER_LITERAL_POOL_IN_EXPORT' (1805,69)-(1805,99)
                            ;: ';' (1805,99)-(1805,100)
                          break_statement (1806,11)-(1806,17)
                            break: 'break' (1806,11)-(1806,16)
                            ;: ';' (1806,16)-(1806,17)
                          }: '}' (1807,9)-(1807,10)
                      }: '}' (1808,7)-(1808,8)
                  expression_statement (1810,7)-(1810,53)
                    assignment_expression (1810,7)-(1810,52)
                      field_expression (1810,7)-(1810,30)
                        identifier: 'scanner_context_p' (1810,7)-(1810,24)
                        ->: '->' (1810,24)-(1810,26)
                        field_identifier: 'mode' (1810,26)-(1810,30)
                      =: '=' (1810,31)-(1810,32)
                      identifier: 'SCAN_MODE_STATEMENT' (1810,33)-(1810,52)
                    ;: ';' (1810,52)-(1810,53)
                  return_statement (1811,7)-(1811,30)
                    return: 'return' (1811,7)-(1811,13)
                    identifier: 'SCAN_KEEP_TOKEN' (1811,14)-(1811,29)
                    ;: ';' (1811,29)-(1811,30)
                  }: '}' (1812,5)-(1812,6)
              #endif: '#endif' (1813,1)-(1813,7)
            comment: '/* ENABLED (JERRY_ES2015_MODULE_SYSTEM) */' (1813,8)-(1813,50)
            case_statement (1814,5)-(1817,6)
              default: 'default' (1814,5)-(1814,12)
              :: ':' (1814,12)-(1814,13)
              compound_statement (1815,5)-(1817,6)
                {: '{' (1815,5)-(1815,6)
                break_statement (1816,7)-(1816,13)
                  break: 'break' (1816,7)-(1816,12)
                  ;: ';' (1816,12)-(1816,13)
                }: '}' (1817,5)-(1817,6)
            }: '}' (1818,3)-(1818,4)
        expression_statement (1820,3)-(1820,58)
          assignment_expression (1820,3)-(1820,57)
            field_expression (1820,3)-(1820,26)
              identifier: 'scanner_context_p' (1820,3)-(1820,20)
              ->: '->' (1820,20)-(1820,22)
              field_identifier: 'mode' (1820,22)-(1820,26)
            =: '=' (1820,27)-(1820,28)
            identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (1820,29)-(1820,57)
          ;: ';' (1820,57)-(1820,58)
        if_statement (1822,3)-(1894,4)
          if: 'if' (1822,3)-(1822,5)
          parenthesized_expression (1822,6)-(1823,68)
            (: '(' (1822,6)-(1822,7)
            binary_expression (1822,7)-(1823,67)
              binary_expression (1822,7)-(1822,28)
                identifier: 'type' (1822,7)-(1822,11)
                ==: '==' (1822,12)-(1822,14)
                identifier: 'LEXER_LITERAL' (1822,15)-(1822,28)
              &&: '&&' (1823,7)-(1823,9)
              binary_expression (1823,10)-(1823,67)
                field_expression (1823,10)-(1823,44)
                  field_expression (1823,10)-(1823,39)
                    field_expression (1823,10)-(1823,26)
                      identifier: 'context_p' (1823,10)-(1823,19)
                      ->: '->' (1823,19)-(1823,21)
                      field_identifier: 'token' (1823,21)-(1823,26)
                    .: '.' (1823,26)-(1823,27)
                    field_identifier: 'lit_location' (1823,27)-(1823,39)
                  .: '.' (1823,39)-(1823,40)
                  field_identifier: 'type' (1823,40)-(1823,44)
                ==: '==' (1823,45)-(1823,47)
                identifier: 'LEXER_IDENT_LITERAL' (1823,48)-(1823,67)
            ): ')' (1823,67)-(1823,68)
          compound_statement (1824,3)-(1894,4)
            {: '{' (1824,3)-(1824,4)
            if_statement (1825,5)-(1830,6)
              if: 'if' (1825,5)-(1825,7)
              parenthesized_expression (1825,8)-(1825,81)
                (: '(' (1825,8)-(1825,9)
                call_expression (1825,9)-(1825,80)
                  identifier: 'JERRY_UNLIKELY' (1825,9)-(1825,23)
                  argument_list (1825,24)-(1825,80)
                    (: '(' (1825,24)-(1825,25)
                    call_expression (1825,25)-(1825,79)
                      identifier: 'lexer_check_next_character' (1825,25)-(1825,51)
                      argument_list (1825,52)-(1825,79)
                        (: '(' (1825,52)-(1825,53)
                        identifier: 'context_p' (1825,53)-(1825,62)
                        ,: ',' (1825,62)-(1825,63)
                        identifier: 'LIT_CHAR_COLON' (1825,64)-(1825,78)
                        ): ')' (1825,78)-(1825,79)
                    ): ')' (1825,79)-(1825,80)
                ): ')' (1825,80)-(1825,81)
              compound_statement (1826,5)-(1830,6)
                {: '{' (1826,5)-(1826,6)
                expression_statement (1827,7)-(1827,48)
                  call_expression (1827,7)-(1827,47)
                    identifier: 'lexer_consume_next_character' (1827,7)-(1827,35)
                    argument_list (1827,36)-(1827,47)
                      (: '(' (1827,36)-(1827,37)
                      identifier: 'context_p' (1827,37)-(1827,46)
                      ): ')' (1827,46)-(1827,47)
                  ;: ';' (1827,47)-(1827,48)
                expression_statement (1828,7)-(1828,53)
                  assignment_expression (1828,7)-(1828,52)
                    field_expression (1828,7)-(1828,30)
                      identifier: 'scanner_context_p' (1828,7)-(1828,24)
                      ->: '->' (1828,24)-(1828,26)
                      field_identifier: 'mode' (1828,26)-(1828,30)
                    =: '=' (1828,31)-(1828,32)
                    identifier: 'SCAN_MODE_STATEMENT' (1828,33)-(1828,52)
                  ;: ';' (1828,52)-(1828,53)
                return_statement (1829,7)-(1829,30)
                  return: 'return' (1829,7)-(1829,13)
                  identifier: 'SCAN_NEXT_TOKEN' (1829,14)-(1829,29)
                  ;: ';' (1829,29)-(1829,30)
                }: '}' (1830,5)-(1830,6)
            expression_statement (1832,5)-(1832,66)
              call_expression (1832,5)-(1832,65)
                identifier: 'JERRY_ASSERT' (1832,5)-(1832,17)
                argument_list (1832,18)-(1832,65)
                  (: '(' (1832,18)-(1832,19)
                  binary_expression (1832,19)-(1832,64)
                    field_expression (1832,19)-(1832,41)
                      field_expression (1832,19)-(1832,35)
                        identifier: 'context_p' (1832,19)-(1832,28)
                        ->: '->' (1832,28)-(1832,30)
                        field_identifier: 'token' (1832,30)-(1832,35)
                      .: '.' (1832,35)-(1832,36)
                      field_identifier: 'flags' (1832,36)-(1832,41)
                    &: '&' (1832,42)-(1832,43)
                    identifier: 'LEXER_NO_SKIP_SPACES' (1832,44)-(1832,64)
                  ): ')' (1832,64)-(1832,65)
              ;: ';' (1832,65)-(1832,66)
            preproc_if (1834,1)-(1888,7)
              #if: '#if' (1834,1)-(1834,4)
              call_expression (1834,5)-(1834,27)
                identifier: 'ENABLED' (1834,5)-(1834,12)
                argument_list (1834,13)-(1834,27)
                  (: '(' (1834,13)-(1834,14)
                  identifier: 'JERRY_ES2015' (1834,14)-(1834,26)
                  ): ')' (1834,26)-(1834,27)
              
: '
' (1834,27)-(1835,1)
              comment: '/* The colon needs to be checked first because the parser also checks
     * it first, and this check skips the spaces which affects source_p. */' (1835,5)-(1836,76)
              if_statement (1837,5)-(1841,6)
                if: 'if' (1837,5)-(1837,7)
                parenthesized_expression (1837,8)-(1837,56)
                  (: '(' (1837,8)-(1837,9)
                  call_expression (1837,9)-(1837,55)
                    identifier: 'JERRY_UNLIKELY' (1837,9)-(1837,23)
                    argument_list (1837,24)-(1837,55)
                      (: '(' (1837,24)-(1837,25)
                      call_expression (1837,25)-(1837,54)
                        identifier: 'lexer_check_arrow' (1837,25)-(1837,42)
                        argument_list (1837,43)-(1837,54)
                          (: '(' (1837,43)-(1837,44)
                          identifier: 'context_p' (1837,44)-(1837,53)
                          ): ')' (1837,53)-(1837,54)
                      ): ')' (1837,54)-(1837,55)
                  ): ')' (1837,55)-(1837,56)
                compound_statement (1838,5)-(1841,6)
                  {: '{' (1838,5)-(1838,6)
                  expression_statement (1839,7)-(1839,85)
                    call_expression (1839,7)-(1839,84)
                      identifier: 'scanner_scan_simple_arrow' (1839,7)-(1839,32)
                      argument_list (1839,33)-(1839,84)
                        (: '(' (1839,33)-(1839,34)
                        identifier: 'context_p' (1839,34)-(1839,43)
                        ,: ',' (1839,43)-(1839,44)
                        identifier: 'scanner_context_p' (1839,45)-(1839,62)
                        ,: ',' (1839,62)-(1839,63)
                        field_expression (1839,64)-(1839,83)
                          identifier: 'context_p' (1839,64)-(1839,73)
                          ->: '->' (1839,73)-(1839,75)
                          field_identifier: 'source_p' (1839,75)-(1839,83)
                        ): ')' (1839,83)-(1839,84)
                    ;: ';' (1839,84)-(1839,85)
                  return_statement (1840,7)-(1840,30)
                    return: 'return' (1840,7)-(1840,13)
                    identifier: 'SCAN_KEEP_TOKEN' (1840,14)-(1840,29)
                    ;: ';' (1840,29)-(1840,30)
                  }: '}' (1841,5)-(1841,6)
              if_statement (1843,5)-(1876,6)
                if: 'if' (1843,5)-(1843,7)
                parenthesized_expression (1843,8)-(1843,57)
                  (: '(' (1843,8)-(1843,9)
                  call_expression (1843,9)-(1843,56)
                    identifier: 'JERRY_UNLIKELY' (1843,9)-(1843,23)
                    argument_list (1843,24)-(1843,56)
                      (: '(' (1843,24)-(1843,25)
                      call_expression (1843,25)-(1843,55)
                        identifier: 'lexer_token_is_let' (1843,25)-(1843,43)
                        argument_list (1843,44)-(1843,55)
                          (: '(' (1843,44)-(1843,45)
                          identifier: 'context_p' (1843,45)-(1843,54)
                          ): ')' (1843,54)-(1843,55)
                      ): ')' (1843,55)-(1843,56)
                  ): ')' (1843,56)-(1843,57)
                compound_statement (1844,5)-(1876,6)
                  {: '{' (1844,5)-(1844,6)
                  declaration (1845,7)-(1845,72)
                    type_identifier: 'lexer_lit_location_t' (1845,7)-(1845,27)
                    init_declarator (1845,28)-(1845,71)
                      identifier: 'let_literal' (1845,28)-(1845,39)
                      =: '=' (1845,40)-(1845,41)
                      field_expression (1845,42)-(1845,71)
                        field_expression (1845,42)-(1845,58)
                          identifier: 'context_p' (1845,42)-(1845,51)
                          ->: '->' (1845,51)-(1845,53)
                          field_identifier: 'token' (1845,53)-(1845,58)
                        .: '.' (1845,58)-(1845,59)
                        field_identifier: 'lit_location' (1845,59)-(1845,71)
                    ;: ';' (1845,71)-(1845,72)
                  declaration (1846,7)-(1846,53)
                    type_qualifier (1846,7)-(1846,12)
                      const: 'const' (1846,7)-(1846,12)
                    primitive_type: 'uint8_t' (1846,13)-(1846,20)
                    init_declarator (1846,21)-(1846,52)
                      pointer_declarator (1846,21)-(1846,30)
                        *: '*' (1846,21)-(1846,22)
                        identifier: 'source_p' (1846,22)-(1846,30)
                      =: '=' (1846,31)-(1846,32)
                      field_expression (1846,33)-(1846,52)
                        identifier: 'context_p' (1846,33)-(1846,42)
                        ->: '->' (1846,42)-(1846,44)
                        field_identifier: 'source_p' (1846,44)-(1846,52)
                    ;: ';' (1846,52)-(1846,53)
                  expression_statement (1848,7)-(1848,36)
                    call_expression (1848,7)-(1848,35)
                      identifier: 'lexer_next_token' (1848,7)-(1848,23)
                      argument_list (1848,24)-(1848,35)
                        (: '(' (1848,24)-(1848,25)
                        identifier: 'context_p' (1848,25)-(1848,34)
                        ): ')' (1848,34)-(1848,35)
                    ;: ';' (1848,35)-(1848,36)
                  expression_statement (1850,7)-(1850,57)
                    assignment_expression (1850,7)-(1850,56)
                      identifier: 'type' (1850,7)-(1850,11)
                      =: '=' (1850,12)-(1850,13)
                      cast_expression (1850,14)-(1850,56)
                        (: '(' (1850,14)-(1850,15)
                        type_descriptor (1850,15)-(1850,33)
                          type_identifier: 'lexer_token_type_t' (1850,15)-(1850,33)
                        ): ')' (1850,33)-(1850,34)
                        field_expression (1850,35)-(1850,56)
                          field_expression (1850,35)-(1850,51)
                            identifier: 'context_p' (1850,35)-(1850,44)
                            ->: '->' (1850,44)-(1850,46)
                            field_identifier: 'token' (1850,46)-(1850,51)
                          .: '.' (1850,51)-(1850,52)
                          field_identifier: 'type' (1850,52)-(1850,56)
                    ;: ';' (1850,56)-(1850,57)
                  if_statement (1852,7)-(1859,8)
                    if: 'if' (1852,7)-(1852,9)
                    parenthesized_expression (1852,10)-(1854,99)
                      (: '(' (1852,10)-(1852,11)
                      binary_expression (1852,11)-(1854,98)
                        binary_expression (1852,11)-(1853,38)
                          binary_expression (1852,11)-(1852,36)
                            identifier: 'type' (1852,11)-(1852,15)
                            ==: '==' (1852,16)-(1852,18)
                            identifier: 'LEXER_LEFT_SQUARE' (1852,19)-(1852,36)
                          ||: '||' (1853,11)-(1853,13)
                          binary_expression (1853,14)-(1853,38)
                            identifier: 'type' (1853,14)-(1853,18)
                            ==: '==' (1853,19)-(1853,21)
                            identifier: 'LEXER_LEFT_BRACE' (1853,22)-(1853,38)
                        ||: '||' (1854,11)-(1854,13)
                        parenthesized_expression (1854,14)-(1854,98)
                          (: '(' (1854,14)-(1854,15)
                          binary_expression (1854,15)-(1854,97)
                            binary_expression (1854,15)-(1854,36)
                              identifier: 'type' (1854,15)-(1854,19)
                              ==: '==' (1854,20)-(1854,22)
                              identifier: 'LEXER_LITERAL' (1854,23)-(1854,36)
                            &&: '&&' (1854,37)-(1854,39)
                            binary_expression (1854,40)-(1854,97)
                              field_expression (1854,40)-(1854,74)
                                field_expression (1854,40)-(1854,69)
                                  field_expression (1854,40)-(1854,56)
                                    identifier: 'context_p' (1854,40)-(1854,49)
                                    ->: '->' (1854,49)-(1854,51)
                                    field_identifier: 'token' (1854,51)-(1854,56)
                                  .: '.' (1854,56)-(1854,57)
                                  field_identifier: 'lit_location' (1854,57)-(1854,69)
                                .: '.' (1854,69)-(1854,70)
                                field_identifier: 'type' (1854,70)-(1854,74)
                              ==: '==' (1854,75)-(1854,77)
                              identifier: 'LEXER_IDENT_LITERAL' (1854,78)-(1854,97)
                          ): ')' (1854,97)-(1854,98)
                      ): ')' (1854,98)-(1854,99)
                    compound_statement (1855,7)-(1859,8)
                      {: '{' (1855,7)-(1855,8)
                      expression_statement (1856,9)-(1856,59)
                        assignment_expression (1856,9)-(1856,58)
                          field_expression (1856,9)-(1856,32)
                            identifier: 'scanner_context_p' (1856,9)-(1856,26)
                            ->: '->' (1856,26)-(1856,28)
                            field_identifier: 'mode' (1856,28)-(1856,32)
                          =: '=' (1856,33)-(1856,34)
                          identifier: 'SCAN_MODE_VAR_STATEMENT' (1856,35)-(1856,58)
                        ;: ';' (1856,58)-(1856,59)
                      expression_statement (1857,9)-(1857,61)
                        call_expression (1857,9)-(1857,60)
                          identifier: 'parser_stack_push_uint8' (1857,9)-(1857,32)
                          argument_list (1857,33)-(1857,60)
                            (: '(' (1857,33)-(1857,34)
                            identifier: 'context_p' (1857,34)-(1857,43)
                            ,: ',' (1857,43)-(1857,44)
                            identifier: 'SCAN_STACK_LET' (1857,45)-(1857,59)
                            ): ')' (1857,59)-(1857,60)
                        ;: ';' (1857,60)-(1857,61)
                      return_statement (1858,9)-(1858,32)
                        return: 'return' (1858,9)-(1858,15)
                        identifier: 'SCAN_KEEP_TOKEN' (1858,16)-(1858,31)
                        ;: ';' (1858,31)-(1858,32)
                      }: '}' (1859,7)-(1859,8)
                  declaration (1861,7)-(1861,99)
                    type_identifier: 'scanner_info_t' (1861,7)-(1861,21)
                    init_declarator (1861,22)-(1861,98)
                      pointer_declarator (1861,22)-(1861,29)
                        *: '*' (1861,22)-(1861,23)
                        identifier: 'info_p' (1861,23)-(1861,29)
                      =: '=' (1861,30)-(1861,31)
                      call_expression (1861,32)-(1861,98)
                        identifier: 'scanner_insert_info' (1861,32)-(1861,51)
                        argument_list (1861,52)-(1861,98)
                          (: '(' (1861,52)-(1861,53)
                          identifier: 'context_p' (1861,53)-(1861,62)
                          ,: ',' (1861,62)-(1861,63)
                          identifier: 'source_p' (1861,64)-(1861,72)
                          ,: ',' (1861,72)-(1861,73)
                          sizeof_expression (1861,74)-(1861,97)
                            sizeof: 'sizeof' (1861,74)-(1861,80)
                            parenthesized_expression (1861,81)-(1861,97)
                              (: '(' (1861,81)-(1861,82)
                              identifier: 'scanner_info_t' (1861,82)-(1861,96)
                              ): ')' (1861,96)-(1861,97)
                          ): ')' (1861,97)-(1861,98)
                    ;: ';' (1861,98)-(1861,99)
                  expression_statement (1862,7)-(1862,50)
                    assignment_expression (1862,7)-(1862,49)
                      field_expression (1862,7)-(1862,19)
                        identifier: 'info_p' (1862,7)-(1862,13)
                        ->: '->' (1862,13)-(1862,15)
                        field_identifier: 'type' (1862,15)-(1862,19)
                      =: '=' (1862,20)-(1862,21)
                      identifier: 'SCANNER_TYPE_LET_EXPRESSION' (1862,22)-(1862,49)
                    ;: ';' (1862,49)-(1862,50)
                  declaration (1864,7)-(1866,88)
                    type_identifier: 'lexer_lit_location_t' (1864,7)-(1864,27)
                    init_declarator (1864,28)-(1866,87)
                      pointer_declarator (1864,28)-(1864,43)
                        *: '*' (1864,28)-(1864,29)
                        identifier: 'lit_location_p' (1864,29)-(1864,43)
                      =: '=' (1864,44)-(1864,45)
                      call_expression (1864,46)-(1866,87)
                        identifier: 'scanner_add_custom_literal' (1864,46)-(1864,72)
                        argument_list (1864,73)-(1866,87)
                          (: '(' (1864,73)-(1864,74)
                          identifier: 'context_p' (1864,74)-(1864,83)
                          ,: ',' (1864,83)-(1864,84)
                          field_expression (1865,74)-(1865,114)
                            identifier: 'scanner_context_p' (1865,74)-(1865,91)
                            ->: '->' (1865,91)-(1865,93)
                            field_identifier: 'active_literal_pool_p' (1865,93)-(1865,114)
                          ,: ',' (1865,114)-(1865,115)
                          pointer_expression (1866,74)-(1866,86)
                            &: '&' (1866,74)-(1866,75)
                            identifier: 'let_literal' (1866,75)-(1866,86)
                          ): ')' (1866,86)-(1866,87)
                    ;: ';' (1866,87)-(1866,88)
                  expression_statement (1867,7)-(1867,55)
                    assignment_expression (1867,7)-(1867,54)
                      field_expression (1867,7)-(1867,27)
                        identifier: 'lit_location_p' (1867,7)-(1867,21)
                        ->: '->' (1867,21)-(1867,23)
                        field_identifier: 'type' (1867,23)-(1867,27)
                      |=: '|=' (1867,28)-(1867,30)
                      identifier: 'SCANNER_LITERAL_IS_USED' (1867,31)-(1867,54)
                    ;: ';' (1867,54)-(1867,55)
                  if_statement (1869,7)-(1872,8)
                    if: 'if' (1869,7)-(1869,9)
                    parenthesized_expression (1869,10)-(1869,97)
                      (: '(' (1869,10)-(1869,11)
                      binary_expression (1869,11)-(1869,96)
                        field_expression (1869,11)-(1869,65)
                          field_expression (1869,11)-(1869,51)
                            identifier: 'scanner_context_p' (1869,11)-(1869,28)
                            ->: '->' (1869,28)-(1869,30)
                            field_identifier: 'active_literal_pool_p' (1869,30)-(1869,51)
                          ->: '->' (1869,51)-(1869,53)
                          field_identifier: 'status_flags' (1869,53)-(1869,65)
                        &: '&' (1869,66)-(1869,67)
                        identifier: 'SCANNER_LITERAL_POOL_IN_WITH' (1869,68)-(1869,96)
                      ): ')' (1869,96)-(1869,97)
                    compound_statement (1870,7)-(1872,8)
                      {: '{' (1870,7)-(1870,8)
                      expression_statement (1871,9)-(1871,56)
                        assignment_expression (1871,9)-(1871,55)
                          field_expression (1871,9)-(1871,29)
                            identifier: 'lit_location_p' (1871,9)-(1871,23)
                            ->: '->' (1871,23)-(1871,25)
                            field_identifier: 'type' (1871,25)-(1871,29)
                          |=: '|=' (1871,30)-(1871,32)
                          identifier: 'SCANNER_LITERAL_NO_REG' (1871,33)-(1871,55)
                        ;: ';' (1871,55)-(1871,56)
                      }: '}' (1872,7)-(1872,8)
                  expression_statement (1874,7)-(1874,67)
                    assignment_expression (1874,7)-(1874,66)
                      field_expression (1874,7)-(1874,30)
                        identifier: 'scanner_context_p' (1874,7)-(1874,24)
                        ->: '->' (1874,24)-(1874,26)
                        field_identifier: 'mode' (1874,26)-(1874,30)
                      =: '=' (1874,31)-(1874,32)
                      identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (1874,33)-(1874,66)
                    ;: ';' (1874,66)-(1874,67)
                  return_statement (1875,7)-(1875,30)
                    return: 'return' (1875,7)-(1875,13)
                    identifier: 'SCAN_KEEP_TOKEN' (1875,14)-(1875,29)
                    ;: ';' (1875,29)-(1875,30)
                  }: '}' (1876,5)-(1876,6)
              if_statement (1878,5)-(1887,6)
                if: 'if' (1878,5)-(1878,7)
                parenthesized_expression (1878,8)-(1878,59)
                  (: '(' (1878,8)-(1878,9)
                  call_expression (1878,9)-(1878,58)
                    identifier: 'JERRY_UNLIKELY' (1878,9)-(1878,23)
                    argument_list (1878,24)-(1878,58)
                      (: '(' (1878,24)-(1878,25)
                      call_expression (1878,25)-(1878,57)
                        identifier: 'lexer_token_is_async' (1878,25)-(1878,45)
                        argument_list (1878,46)-(1878,57)
                          (: '(' (1878,46)-(1878,47)
                          identifier: 'context_p' (1878,47)-(1878,56)
                          ): ')' (1878,56)-(1878,57)
                      ): ')' (1878,57)-(1878,58)
                  ): ')' (1878,58)-(1878,59)
                compound_statement (1879,5)-(1887,6)
                  {: '{' (1879,5)-(1879,6)
                  expression_statement (1880,7)-(1880,63)
                    assignment_expression (1880,7)-(1880,62)
                      field_expression (1880,7)-(1880,40)
                        identifier: 'scanner_context_p' (1880,7)-(1880,24)
                        ->: '->' (1880,24)-(1880,26)
                        field_identifier: 'async_source_p' (1880,26)-(1880,40)
                      =: '=' (1880,41)-(1880,42)
                      field_expression (1880,43)-(1880,62)
                        identifier: 'context_p' (1880,43)-(1880,52)
                        ->: '->' (1880,52)-(1880,54)
                        field_identifier: 'source_p' (1880,54)-(1880,62)
                    ;: ';' (1880,62)-(1880,63)
                  if_statement (1882,7)-(1885,8)
                    if: 'if' (1882,7)-(1882,9)
                    parenthesized_expression (1882,10)-(1882,71)
                      (: '(' (1882,10)-(1882,11)
                      call_expression (1882,11)-(1882,70)
                        identifier: 'scanner_check_async_function' (1882,11)-(1882,39)
                        argument_list (1882,40)-(1882,70)
                          (: '(' (1882,40)-(1882,41)
                          identifier: 'context_p' (1882,41)-(1882,50)
                          ,: ',' (1882,50)-(1882,51)
                          identifier: 'scanner_context_p' (1882,52)-(1882,69)
                          ): ')' (1882,69)-(1882,70)
                      ): ')' (1882,70)-(1882,71)
                    compound_statement (1883,7)-(1885,8)
                      {: '{' (1883,7)-(1883,8)
                      expression_statement (1884,9)-(1884,55)
                        assignment_expression (1884,9)-(1884,54)
                          field_expression (1884,9)-(1884,32)
                            identifier: 'scanner_context_p' (1884,9)-(1884,26)
                            ->: '->' (1884,26)-(1884,28)
                            field_identifier: 'mode' (1884,28)-(1884,32)
                          =: '=' (1884,33)-(1884,34)
                          identifier: 'SCAN_MODE_STATEMENT' (1884,35)-(1884,54)
                        ;: ';' (1884,54)-(1884,55)
                      }: '}' (1885,7)-(1885,8)
                  return_statement (1886,7)-(1886,30)
                    return: 'return' (1886,7)-(1886,13)
                    identifier: 'SCAN_KEEP_TOKEN' (1886,14)-(1886,29)
                    ;: ';' (1886,29)-(1886,30)
                  }: '}' (1887,5)-(1887,6)
              #endif: '#endif' (1888,1)-(1888,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (1888,8)-(1888,36)
            expression_statement (1890,5)-(1890,58)
              call_expression (1890,5)-(1890,57)
                identifier: 'scanner_add_reference' (1890,5)-(1890,26)
                argument_list (1890,27)-(1890,57)
                  (: '(' (1890,27)-(1890,28)
                  identifier: 'context_p' (1890,28)-(1890,37)
                  ,: ',' (1890,37)-(1890,38)
                  identifier: 'scanner_context_p' (1890,39)-(1890,56)
                  ): ')' (1890,56)-(1890,57)
              ;: ';' (1890,57)-(1890,58)
            expression_statement (1892,5)-(1892,65)
              assignment_expression (1892,5)-(1892,64)
                field_expression (1892,5)-(1892,28)
                  identifier: 'scanner_context_p' (1892,5)-(1892,22)
                  ->: '->' (1892,22)-(1892,24)
                  field_identifier: 'mode' (1892,24)-(1892,28)
                =: '=' (1892,29)-(1892,30)
                identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (1892,31)-(1892,64)
              ;: ';' (1892,64)-(1892,65)
            return_statement (1893,5)-(1893,28)
              return: 'return' (1893,5)-(1893,11)
              identifier: 'SCAN_NEXT_TOKEN' (1893,12)-(1893,27)
              ;: ';' (1893,27)-(1893,28)
            }: '}' (1894,3)-(1894,4)
        return_statement (1896,3)-(1896,26)
          return: 'return' (1896,3)-(1896,9)
          identifier: 'SCAN_KEEP_TOKEN' (1896,10)-(1896,25)
          ;: ';' (1896,25)-(1896,26)
        }: '}' (1897,1)-(1897,2)
    comment: '/* scanner_scan_statement */' (1897,3)-(1897,31)
    comment: '/**
 * Scan statement terminator.
 *
 * @return SCAN_NEXT_TOKEN to read the next token, or SCAN_KEEP_TOKEN to do nothing
 */' (1899,1)-(1903,4)
    function_definition (1904,1)-(2251,2)
      storage_class_specifier (1904,1)-(1904,7)
        static: 'static' (1904,1)-(1904,7)
      type_identifier: 'scan_return_types_t' (1904,8)-(1904,27)
      function_declarator (1905,1)-(1907,53)
        identifier: 'scanner_scan_statement_end' (1905,1)-(1905,27)
        parameter_list (1905,28)-(1907,53)
          (: '(' (1905,28)-(1905,29)
          parameter_declaration (1905,29)-(1905,56)
            type_identifier: 'parser_context_t' (1905,29)-(1905,45)
            pointer_declarator (1905,46)-(1905,56)
              *: '*' (1905,46)-(1905,47)
              identifier: 'context_p' (1905,47)-(1905,56)
          ,: ',' (1905,56)-(1905,57)
          comment: '/**< context */' (1905,58)-(1905,73)
          parameter_declaration (1906,29)-(1906,65)
            type_identifier: 'scanner_context_t' (1906,29)-(1906,46)
            pointer_declarator (1906,47)-(1906,65)
              *: '*' (1906,47)-(1906,48)
              identifier: 'scanner_context_p' (1906,48)-(1906,65)
          ,: ',' (1906,65)-(1906,66)
          comment: '/**< scanner context */' (1906,67)-(1906,90)
          parameter_declaration (1907,29)-(1907,52)
            type_identifier: 'lexer_token_type_t' (1907,29)-(1907,47)
            identifier: 'type' (1907,48)-(1907,52)
          ): ')' (1907,52)-(1907,53)
      comment: '/**< current token type */' (1907,54)-(1907,80)
      compound_statement (1908,1)-(2251,2)
        {: '{' (1908,1)-(1908,2)
        declaration (1909,3)-(1909,33)
          primitive_type: 'bool' (1909,3)-(1909,7)
          init_declarator (1909,8)-(1909,32)
            identifier: 'terminator_found' (1909,8)-(1909,24)
            =: '=' (1909,25)-(1909,26)
            false: 'false' (1909,27)-(1909,32)
          ;: ';' (1909,32)-(1909,33)
        if_statement (1911,3)-(1915,4)
          if: 'if' (1911,3)-(1911,5)
          parenthesized_expression (1911,6)-(1911,31)
            (: '(' (1911,6)-(1911,7)
            binary_expression (1911,7)-(1911,30)
              identifier: 'type' (1911,7)-(1911,11)
              ==: '==' (1911,12)-(1911,14)
              identifier: 'LEXER_SEMICOLON' (1911,15)-(1911,30)
            ): ')' (1911,30)-(1911,31)
          compound_statement (1912,3)-(1915,4)
            {: '{' (1912,3)-(1912,4)
            expression_statement (1913,5)-(1913,34)
              call_expression (1913,5)-(1913,33)
                identifier: 'lexer_next_token' (1913,5)-(1913,21)
                argument_list (1913,22)-(1913,33)
                  (: '(' (1913,22)-(1913,23)
                  identifier: 'context_p' (1913,23)-(1913,32)
                  ): ')' (1913,32)-(1913,33)
              ;: ';' (1913,33)-(1913,34)
            expression_statement (1914,5)-(1914,29)
              assignment_expression (1914,5)-(1914,28)
                identifier: 'terminator_found' (1914,5)-(1914,21)
                =: '=' (1914,22)-(1914,23)
                true: 'true' (1914,24)-(1914,28)
              ;: ';' (1914,28)-(1914,29)
            }: '}' (1915,3)-(1915,4)
        while_statement (1917,3)-(2250,4)
          while: 'while' (1917,3)-(1917,8)
          parenthesized_expression (1917,9)-(1917,15)
            (: '(' (1917,9)-(1917,10)
            true: 'true' (1917,10)-(1917,14)
            ): ')' (1917,14)-(1917,15)
          compound_statement (1918,3)-(2250,4)
            {: '{' (1918,3)-(1918,4)
            expression_statement (1919,5)-(1919,55)
              assignment_expression (1919,5)-(1919,54)
                identifier: 'type' (1919,5)-(1919,9)
                =: '=' (1919,10)-(1919,11)
                cast_expression (1919,12)-(1919,54)
                  (: '(' (1919,12)-(1919,13)
                  type_descriptor (1919,13)-(1919,31)
                    type_identifier: 'lexer_token_type_t' (1919,13)-(1919,31)
                  ): ')' (1919,31)-(1919,32)
                  field_expression (1919,33)-(1919,54)
                    field_expression (1919,33)-(1919,49)
                      identifier: 'context_p' (1919,33)-(1919,42)
                      ->: '->' (1919,42)-(1919,44)
                      field_identifier: 'token' (1919,44)-(1919,49)
                    .: '.' (1919,49)-(1919,50)
                    field_identifier: 'type' (1919,50)-(1919,54)
              ;: ';' (1919,54)-(1919,55)
            switch_statement (1921,5)-(2241,6)
              switch: 'switch' (1921,5)-(1921,11)
              parenthesized_expression (1921,12)-(1921,40)
                (: '(' (1921,12)-(1921,13)
                field_expression (1921,13)-(1921,39)
                  identifier: 'context_p' (1921,13)-(1921,22)
                  ->: '->' (1921,22)-(1921,24)
                  field_identifier: 'stack_top_uint8' (1921,24)-(1921,39)
                ): ')' (1921,39)-(1921,40)
              compound_statement (1922,5)-(2241,6)
                {: '{' (1922,5)-(1922,6)
                case_statement (1923,7)-(1923,30)
                  case: 'case' (1923,7)-(1923,11)
                  identifier: 'SCAN_STACK_SCRIPT' (1923,12)-(1923,29)
                  :: ':' (1923,29)-(1923,30)
                case_statement (1924,7)-(1931,8)
                  case: 'case' (1924,7)-(1924,11)
                  identifier: 'SCAN_STACK_SCRIPT_FUNCTION' (1924,12)-(1924,38)
                  :: ':' (1924,38)-(1924,39)
                  compound_statement (1925,7)-(1931,8)
                    {: '{' (1925,7)-(1925,8)
                    if_statement (1926,9)-(1929,10)
                      if: 'if' (1926,9)-(1926,11)
                      parenthesized_expression (1926,12)-(1926,31)
                        (: '(' (1926,12)-(1926,13)
                        binary_expression (1926,13)-(1926,30)
                          identifier: 'type' (1926,13)-(1926,17)
                          ==: '==' (1926,18)-(1926,20)
                          identifier: 'LEXER_EOS' (1926,21)-(1926,30)
                        ): ')' (1926,30)-(1926,31)
                      compound_statement (1927,9)-(1929,10)
                        {: '{' (1927,9)-(1927,10)
                        return_statement (1928,11)-(1928,34)
                          return: 'return' (1928,11)-(1928,17)
                          identifier: 'SCAN_NEXT_TOKEN' (1928,18)-(1928,33)
                          ;: ';' (1928,33)-(1928,34)
                        }: '}' (1929,9)-(1929,10)
                    break_statement (1930,9)-(1930,15)
                      break: 'break' (1930,9)-(1930,14)
                      ;: ';' (1930,14)-(1930,15)
                    }: '}' (1931,7)-(1931,8)
                case_statement (1932,7)-(1932,39)
                  case: 'case' (1932,7)-(1932,11)
                  identifier: 'SCAN_STACK_BLOCK_STATEMENT' (1932,12)-(1932,38)
                  :: ':' (1932,38)-(1932,39)
                preproc_if (1933,1)-(1935,7)
                  #if: '#if' (1933,1)-(1933,4)
                  call_expression (1933,5)-(1933,27)
                    identifier: 'ENABLED' (1933,5)-(1933,12)
                    argument_list (1933,13)-(1933,27)
                      (: '(' (1933,13)-(1933,14)
                      identifier: 'JERRY_ES2015' (1933,14)-(1933,26)
                      ): ')' (1933,26)-(1933,27)
                  
: '
' (1933,27)-(1934,1)
                  case_statement (1934,7)-(1934,39)
                    case: 'case' (1934,7)-(1934,11)
                    identifier: 'SCAN_STACK_CLASS_STATEMENT' (1934,12)-(1934,38)
                    :: ':' (1934,38)-(1934,39)
                  #endif: '#endif' (1935,1)-(1935,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (1935,8)-(1935,36)
                case_statement (1936,7)-(1959,8)
                  case: 'case' (1936,7)-(1936,11)
                  identifier: 'SCAN_STACK_FUNCTION_STATEMENT' (1936,12)-(1936,41)
                  :: ':' (1936,41)-(1936,42)
                  compound_statement (1937,7)-(1959,8)
                    {: '{' (1937,7)-(1937,8)
                    if_statement (1938,9)-(1941,10)
                      if: 'if' (1938,9)-(1938,11)
                      parenthesized_expression (1938,12)-(1938,39)
                        (: '(' (1938,12)-(1938,13)
                        binary_expression (1938,13)-(1938,38)
                          identifier: 'type' (1938,13)-(1938,17)
                          !=: '!=' (1938,18)-(1938,20)
                          identifier: 'LEXER_RIGHT_BRACE' (1938,21)-(1938,38)
                        ): ')' (1938,38)-(1938,39)
                      compound_statement (1939,9)-(1941,10)
                        {: '{' (1939,9)-(1939,10)
                        break_statement (1940,11)-(1940,17)
                          break: 'break' (1940,11)-(1940,16)
                          ;: ';' (1940,16)-(1940,17)
                        }: '}' (1941,9)-(1941,10)
                    preproc_if (1943,1)-(1953,7)
                      #if: '#if' (1943,1)-(1943,4)
                      call_expression (1943,5)-(1943,27)
                        identifier: 'ENABLED' (1943,5)-(1943,12)
                        argument_list (1943,13)-(1943,27)
                          (: '(' (1943,13)-(1943,14)
                          identifier: 'JERRY_ES2015' (1943,14)-(1943,26)
                          ): ')' (1943,26)-(1943,27)
                      
: '
' (1943,27)-(1944,1)
                      if_statement (1944,9)-(1947,10)
                        if: 'if' (1944,9)-(1944,11)
                        parenthesized_expression (1944,12)-(1944,70)
                          (: '(' (1944,12)-(1944,13)
                          binary_expression (1944,13)-(1944,69)
                            field_expression (1944,13)-(1944,39)
                              identifier: 'context_p' (1944,13)-(1944,22)
                              ->: '->' (1944,22)-(1944,24)
                              field_identifier: 'stack_top_uint8' (1944,24)-(1944,39)
                            !=: '!=' (1944,40)-(1944,42)
                            identifier: 'SCAN_STACK_CLASS_STATEMENT' (1944,43)-(1944,69)
                          ): ')' (1944,69)-(1944,70)
                        compound_statement (1945,9)-(1947,10)
                          {: '{' (1945,9)-(1945,10)
                          expression_statement (1946,11)-(1946,67)
                            call_expression (1946,11)-(1946,66)
                              identifier: 'scanner_pop_literal_pool' (1946,11)-(1946,35)
                              argument_list (1946,36)-(1946,66)
                                (: '(' (1946,36)-(1946,37)
                                identifier: 'context_p' (1946,37)-(1946,46)
                                ,: ',' (1946,46)-(1946,47)
                                identifier: 'scanner_context_p' (1946,48)-(1946,65)
                                ): ')' (1946,65)-(1946,66)
                            ;: ';' (1946,66)-(1946,67)
                          }: '}' (1947,9)-(1947,10)
                      preproc_else (1948,1)-(1952,10)
                        #else: '#else' (1948,1)-(1948,6)
                        comment: '/* !ENABLED (JERRY_ES2015) */' (1948,7)-(1948,36)
                        if_statement (1949,9)-(1952,10)
                          if: 'if' (1949,9)-(1949,11)
                          parenthesized_expression (1949,12)-(1949,73)
                            (: '(' (1949,12)-(1949,13)
                            binary_expression (1949,13)-(1949,72)
                              field_expression (1949,13)-(1949,39)
                                identifier: 'context_p' (1949,13)-(1949,22)
                                ->: '->' (1949,22)-(1949,24)
                                field_identifier: 'stack_top_uint8' (1949,24)-(1949,39)
                              ==: '==' (1949,40)-(1949,42)
                              identifier: 'SCAN_STACK_FUNCTION_STATEMENT' (1949,43)-(1949,72)
                            ): ')' (1949,72)-(1949,73)
                          compound_statement (1950,9)-(1952,10)
                            {: '{' (1950,9)-(1950,10)
                            expression_statement (1951,11)-(1951,67)
                              call_expression (1951,11)-(1951,66)
                                identifier: 'scanner_pop_literal_pool' (1951,11)-(1951,35)
                                argument_list (1951,36)-(1951,66)
                                  (: '(' (1951,36)-(1951,37)
                                  identifier: 'context_p' (1951,37)-(1951,46)
                                  ,: ',' (1951,46)-(1951,47)
                                  identifier: 'scanner_context_p' (1951,48)-(1951,65)
                                  ): ')' (1951,65)-(1951,66)
                              ;: ';' (1951,66)-(1951,67)
                            }: '}' (1952,9)-(1952,10)
                      #endif: '#endif' (1953,1)-(1953,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (1953,8)-(1953,36)
                    expression_statement (1955,9)-(1955,33)
                      assignment_expression (1955,9)-(1955,32)
                        identifier: 'terminator_found' (1955,9)-(1955,25)
                        =: '=' (1955,26)-(1955,27)
                        true: 'true' (1955,28)-(1955,32)
                      ;: ';' (1955,32)-(1955,33)
                    expression_statement (1956,9)-(1956,44)
                      call_expression (1956,9)-(1956,43)
                        identifier: 'parser_stack_pop_uint8' (1956,9)-(1956,31)
                        argument_list (1956,32)-(1956,43)
                          (: '(' (1956,32)-(1956,33)
                          identifier: 'context_p' (1956,33)-(1956,42)
                          ): ')' (1956,42)-(1956,43)
                      ;: ';' (1956,43)-(1956,44)
                    expression_statement (1957,9)-(1957,38)
                      call_expression (1957,9)-(1957,37)
                        identifier: 'lexer_next_token' (1957,9)-(1957,25)
                        argument_list (1957,26)-(1957,37)
                          (: '(' (1957,26)-(1957,27)
                          identifier: 'context_p' (1957,27)-(1957,36)
                          ): ')' (1957,36)-(1957,37)
                      ;: ';' (1957,37)-(1957,38)
                    continue_statement (1958,9)-(1958,18)
                      continue: 'continue' (1958,9)-(1958,17)
                      ;: ';' (1958,17)-(1958,18)
                    }: '}' (1959,7)-(1959,8)
                case_statement (1960,7)-(1960,43)
                  case: 'case' (1960,7)-(1960,11)
                  identifier: 'SCAN_STACK_FUNCTION_EXPRESSION' (1960,12)-(1960,42)
                  :: ':' (1960,42)-(1960,43)
                preproc_if (1961,1)-(1963,7)
                  #if: '#if' (1961,1)-(1961,4)
                  call_expression (1961,5)-(1961,27)
                    identifier: 'ENABLED' (1961,5)-(1961,12)
                    argument_list (1961,13)-(1961,27)
                      (: '(' (1961,13)-(1961,14)
                      identifier: 'JERRY_ES2015' (1961,14)-(1961,26)
                      ): ')' (1961,26)-(1961,27)
                  
: '
' (1961,27)-(1962,1)
                  case_statement (1962,7)-(1962,38)
                    case: 'case' (1962,7)-(1962,11)
                    identifier: 'SCAN_STACK_FUNCTION_ARROW' (1962,12)-(1962,37)
                    :: ':' (1962,37)-(1962,38)
                  #endif: '#endif' (1963,1)-(1963,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (1963,8)-(1963,36)
                compound_statement (1964,7)-(1981,8)
                  {: '{' (1964,7)-(1964,8)
                  if_statement (1965,9)-(1968,10)
                    if: 'if' (1965,9)-(1965,11)
                    parenthesized_expression (1965,12)-(1965,39)
                      (: '(' (1965,12)-(1965,13)
                      binary_expression (1965,13)-(1965,38)
                        identifier: 'type' (1965,13)-(1965,17)
                        !=: '!=' (1965,18)-(1965,20)
                        identifier: 'LEXER_RIGHT_BRACE' (1965,21)-(1965,38)
                      ): ')' (1965,38)-(1965,39)
                    compound_statement (1966,9)-(1968,10)
                      {: '{' (1966,9)-(1966,10)
                      break_statement (1967,11)-(1967,17)
                        break: 'break' (1967,11)-(1967,16)
                        ;: ';' (1967,16)-(1967,17)
                      }: '}' (1968,9)-(1968,10)
                  expression_statement (1970,9)-(1970,69)
                    assignment_expression (1970,9)-(1970,68)
                      field_expression (1970,9)-(1970,32)
                        identifier: 'scanner_context_p' (1970,9)-(1970,26)
                        ->: '->' (1970,26)-(1970,28)
                        field_identifier: 'mode' (1970,28)-(1970,32)
                      =: '=' (1970,33)-(1970,34)
                      identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (1970,35)-(1970,68)
                    ;: ';' (1970,68)-(1970,69)
                  preproc_if (1971,1)-(1976,7)
                    #if: '#if' (1971,1)-(1971,4)
                    call_expression (1971,5)-(1971,27)
                      identifier: 'ENABLED' (1971,5)-(1971,12)
                      argument_list (1971,13)-(1971,27)
                        (: '(' (1971,13)-(1971,14)
                        identifier: 'JERRY_ES2015' (1971,14)-(1971,26)
                        ): ')' (1971,26)-(1971,27)
                    
: '
' (1971,27)-(1972,1)
                    if_statement (1972,9)-(1975,10)
                      if: 'if' (1972,9)-(1972,11)
                      parenthesized_expression (1972,12)-(1972,69)
                        (: '(' (1972,12)-(1972,13)
                        binary_expression (1972,13)-(1972,68)
                          field_expression (1972,13)-(1972,39)
                            identifier: 'context_p' (1972,13)-(1972,22)
                            ->: '->' (1972,22)-(1972,24)
                            field_identifier: 'stack_top_uint8' (1972,24)-(1972,39)
                          ==: '==' (1972,40)-(1972,42)
                          identifier: 'SCAN_STACK_FUNCTION_ARROW' (1972,43)-(1972,68)
                        ): ')' (1972,68)-(1972,69)
                      compound_statement (1973,9)-(1975,10)
                        {: '{' (1973,9)-(1973,10)
                        expression_statement (1974,11)-(1974,70)
                          assignment_expression (1974,11)-(1974,69)
                            field_expression (1974,11)-(1974,34)
                              identifier: 'scanner_context_p' (1974,11)-(1974,28)
                              ->: '->' (1974,28)-(1974,30)
                              field_identifier: 'mode' (1974,30)-(1974,34)
                            =: '=' (1974,35)-(1974,36)
                            identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (1974,37)-(1974,69)
                          ;: ';' (1974,69)-(1974,70)
                        }: '}' (1975,9)-(1975,10)
                    #endif: '#endif' (1976,1)-(1976,7)
                  comment: '/* ENABLED (JERRY_ES2015) */' (1976,8)-(1976,36)
                  expression_statement (1978,9)-(1978,65)
                    call_expression (1978,9)-(1978,64)
                      identifier: 'scanner_pop_literal_pool' (1978,9)-(1978,33)
                      argument_list (1978,34)-(1978,64)
                        (: '(' (1978,34)-(1978,35)
                        identifier: 'context_p' (1978,35)-(1978,44)
                        ,: ',' (1978,44)-(1978,45)
                        identifier: 'scanner_context_p' (1978,46)-(1978,63)
                        ): ')' (1978,63)-(1978,64)
                    ;: ';' (1978,64)-(1978,65)
                  expression_statement (1979,9)-(1979,44)
                    call_expression (1979,9)-(1979,43)
                      identifier: 'parser_stack_pop_uint8' (1979,9)-(1979,31)
                      argument_list (1979,32)-(1979,43)
                        (: '(' (1979,32)-(1979,33)
                        identifier: 'context_p' (1979,33)-(1979,42)
                        ): ')' (1979,42)-(1979,43)
                    ;: ';' (1979,43)-(1979,44)
                  return_statement (1980,9)-(1980,32)
                    return: 'return' (1980,9)-(1980,15)
                    identifier: 'SCAN_NEXT_TOKEN' (1980,16)-(1980,31)
                    ;: ';' (1980,31)-(1980,32)
                  }: '}' (1981,7)-(1981,8)
                case_statement (1982,7)-(2018,8)
                  case: 'case' (1982,7)-(1982,11)
                  identifier: 'SCAN_STACK_FUNCTION_PROPERTY' (1982,12)-(1982,40)
                  :: ':' (1982,40)-(1982,41)
                  compound_statement (1983,7)-(2018,8)
                    {: '{' (1983,7)-(1983,8)
                    if_statement (1984,9)-(1987,10)
                      if: 'if' (1984,9)-(1984,11)
                      parenthesized_expression (1984,12)-(1984,39)
                        (: '(' (1984,12)-(1984,13)
                        binary_expression (1984,13)-(1984,38)
                          identifier: 'type' (1984,13)-(1984,17)
                          !=: '!=' (1984,18)-(1984,20)
                          identifier: 'LEXER_RIGHT_BRACE' (1984,21)-(1984,38)
                        ): ')' (1984,38)-(1984,39)
                      compound_statement (1985,9)-(1987,10)
                        {: '{' (1985,9)-(1985,10)
                        break_statement (1986,11)-(1986,17)
                          break: 'break' (1986,11)-(1986,16)
                          ;: ';' (1986,16)-(1986,17)
                        }: '}' (1987,9)-(1987,10)
                    expression_statement (1989,9)-(1989,65)
                      call_expression (1989,9)-(1989,64)
                        identifier: 'scanner_pop_literal_pool' (1989,9)-(1989,33)
                        argument_list (1989,34)-(1989,64)
                          (: '(' (1989,34)-(1989,35)
                          identifier: 'context_p' (1989,35)-(1989,44)
                          ,: ',' (1989,44)-(1989,45)
                          identifier: 'scanner_context_p' (1989,46)-(1989,63)
                          ): ')' (1989,63)-(1989,64)
                      ;: ';' (1989,64)-(1989,65)
                    expression_statement (1990,9)-(1990,44)
                      call_expression (1990,9)-(1990,43)
                        identifier: 'parser_stack_pop_uint8' (1990,9)-(1990,31)
                        argument_list (1990,32)-(1990,43)
                          (: '(' (1990,32)-(1990,33)
                          identifier: 'context_p' (1990,33)-(1990,42)
                          ): ')' (1990,42)-(1990,43)
                      ;: ';' (1990,43)-(1990,44)
                    preproc_if (1992,1)-(1999,7)
                      #if: '#if' (1992,1)-(1992,4)
                      call_expression (1992,5)-(1992,27)
                        identifier: 'ENABLED' (1992,5)-(1992,12)
                        argument_list (1992,13)-(1992,27)
                          (: '(' (1992,13)-(1992,14)
                          identifier: 'JERRY_ES2015' (1992,14)-(1992,26)
                          ): ')' (1992,26)-(1992,27)
                      
: '
' (1992,27)-(1993,1)
                      if_statement (1993,9)-(1998,10)
                        if: 'if' (1993,9)-(1993,11)
                        parenthesized_expression (1993,12)-(1994,84)
                          (: '(' (1993,12)-(1993,13)
                          binary_expression (1993,13)-(1994,83)
                            binary_expression (1993,13)-(1993,80)
                              field_expression (1993,13)-(1993,39)
                                identifier: 'context_p' (1993,13)-(1993,22)
                                ->: '->' (1993,22)-(1993,24)
                                field_identifier: 'stack_top_uint8' (1993,24)-(1993,39)
                              ==: '==' (1993,40)-(1993,42)
                              identifier: 'SCAN_STACK_EXPLICIT_CLASS_CONSTRUCTOR' (1993,43)-(1993,80)
                            ||: '||' (1994,13)-(1994,15)
                            binary_expression (1994,16)-(1994,83)
                              field_expression (1994,16)-(1994,42)
                                identifier: 'context_p' (1994,16)-(1994,25)
                                ->: '->' (1994,25)-(1994,27)
                                field_identifier: 'stack_top_uint8' (1994,27)-(1994,42)
                              ==: '==' (1994,43)-(1994,45)
                              identifier: 'SCAN_STACK_IMPLICIT_CLASS_CONSTRUCTOR' (1994,46)-(1994,83)
                          ): ')' (1994,83)-(1994,84)
                        compound_statement (1995,9)-(1998,10)
                          {: '{' (1995,9)-(1995,10)
                          expression_statement (1996,11)-(1996,60)
                            assignment_expression (1996,11)-(1996,59)
                              field_expression (1996,11)-(1996,34)
                                identifier: 'scanner_context_p' (1996,11)-(1996,28)
                                ->: '->' (1996,28)-(1996,30)
                                field_identifier: 'mode' (1996,30)-(1996,34)
                              =: '=' (1996,35)-(1996,36)
                              identifier: 'SCAN_MODE_CLASS_METHOD' (1996,37)-(1996,59)
                            ;: ';' (1996,59)-(1996,60)
                          return_statement (1997,11)-(1997,34)
                            return: 'return' (1997,11)-(1997,17)
                            identifier: 'SCAN_KEEP_TOKEN' (1997,18)-(1997,33)
                            ;: ';' (1997,33)-(1997,34)
                          }: '}' (1998,9)-(1998,10)
                      #endif: '#endif' (1999,1)-(1999,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (1999,8)-(1999,36)
                    expression_statement (2001,9)-(2001,80)
                      call_expression (2001,9)-(2001,79)
                        identifier: 'JERRY_ASSERT' (2001,9)-(2001,21)
                        argument_list (2001,22)-(2001,79)
                          (: '(' (2001,22)-(2001,23)
                          binary_expression (2001,23)-(2001,78)
                            field_expression (2001,23)-(2001,49)
                              identifier: 'context_p' (2001,23)-(2001,32)
                              ->: '->' (2001,32)-(2001,34)
                              field_identifier: 'stack_top_uint8' (2001,34)-(2001,49)
                            ==: '==' (2001,50)-(2001,52)
                            identifier: 'SCAN_STACK_OBJECT_LITERAL' (2001,53)-(2001,78)
                          ): ')' (2001,78)-(2001,79)
                      ;: ';' (2001,79)-(2001,80)
                    expression_statement (2003,9)-(2003,38)
                      call_expression (2003,9)-(2003,37)
                        identifier: 'lexer_next_token' (2003,9)-(2003,25)
                        argument_list (2003,26)-(2003,37)
                          (: '(' (2003,26)-(2003,27)
                          identifier: 'context_p' (2003,27)-(2003,36)
                          ): ')' (2003,36)-(2003,37)
                      ;: ';' (2003,37)-(2003,38)
                    if_statement (2005,9)-(2009,10)
                      if: 'if' (2005,9)-(2005,11)
                      parenthesized_expression (2005,12)-(2005,56)
                        (: '(' (2005,12)-(2005,13)
                        binary_expression (2005,13)-(2005,55)
                          field_expression (2005,13)-(2005,34)
                            field_expression (2005,13)-(2005,29)
                              identifier: 'context_p' (2005,13)-(2005,22)
                              ->: '->' (2005,22)-(2005,24)
                              field_identifier: 'token' (2005,24)-(2005,29)
                            .: '.' (2005,29)-(2005,30)
                            field_identifier: 'type' (2005,30)-(2005,34)
                          ==: '==' (2005,35)-(2005,37)
                          identifier: 'LEXER_RIGHT_BRACE' (2005,38)-(2005,55)
                        ): ')' (2005,55)-(2005,56)
                      compound_statement (2006,9)-(2009,10)
                        {: '{' (2006,9)-(2006,10)
                        expression_statement (2007,11)-(2007,70)
                          assignment_expression (2007,11)-(2007,69)
                            field_expression (2007,11)-(2007,34)
                              identifier: 'scanner_context_p' (2007,11)-(2007,28)
                              ->: '->' (2007,28)-(2007,30)
                              field_identifier: 'mode' (2007,30)-(2007,34)
                            =: '=' (2007,35)-(2007,36)
                            identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (2007,37)-(2007,69)
                          ;: ';' (2007,69)-(2007,70)
                        return_statement (2008,11)-(2008,34)
                          return: 'return' (2008,11)-(2008,17)
                          identifier: 'SCAN_KEEP_TOKEN' (2008,18)-(2008,33)
                          ;: ';' (2008,33)-(2008,34)
                        }: '}' (2009,9)-(2009,10)
                    if_statement (2011,9)-(2014,10)
                      if: 'if' (2011,9)-(2011,11)
                      parenthesized_expression (2011,12)-(2011,50)
                        (: '(' (2011,12)-(2011,13)
                        binary_expression (2011,13)-(2011,49)
                          field_expression (2011,13)-(2011,34)
                            field_expression (2011,13)-(2011,29)
                              identifier: 'context_p' (2011,13)-(2011,22)
                              ->: '->' (2011,22)-(2011,24)
                              field_identifier: 'token' (2011,24)-(2011,29)
                            .: '.' (2011,29)-(2011,30)
                            field_identifier: 'type' (2011,30)-(2011,34)
                          !=: '!=' (2011,35)-(2011,37)
                          identifier: 'LEXER_COMMA' (2011,38)-(2011,49)
                        ): ')' (2011,49)-(2011,50)
                      compound_statement (2012,9)-(2014,10)
                        {: '{' (2012,9)-(2012,10)
                        expression_statement (2013,11)-(2013,43)
                          call_expression (2013,11)-(2013,42)
                            identifier: 'scanner_raise_error' (2013,11)-(2013,30)
                            argument_list (2013,31)-(2013,42)
                              (: '(' (2013,31)-(2013,32)
                              identifier: 'context_p' (2013,32)-(2013,41)
                              ): ')' (2013,41)-(2013,42)
                          ;: ';' (2013,42)-(2013,43)
                        }: '}' (2014,9)-(2014,10)
                    expression_statement (2016,9)-(2016,59)
                      assignment_expression (2016,9)-(2016,58)
                        field_expression (2016,9)-(2016,32)
                          identifier: 'scanner_context_p' (2016,9)-(2016,26)
                          ->: '->' (2016,26)-(2016,28)
                          field_identifier: 'mode' (2016,28)-(2016,32)
                        =: '=' (2016,33)-(2016,34)
                        identifier: 'SCAN_MODE_PROPERTY_NAME' (2016,35)-(2016,58)
                      ;: ';' (2016,58)-(2016,59)
                    return_statement (2017,9)-(2017,32)
                      return: 'return' (2017,9)-(2017,15)
                      identifier: 'SCAN_KEEP_TOKEN' (2017,16)-(2017,31)
                      ;: ';' (2017,31)-(2017,32)
                    }: '}' (2018,7)-(2018,8)
                case_statement (2019,7)-(2040,8)
                  case: 'case' (2019,7)-(2019,11)
                  identifier: 'SCAN_STACK_SWITCH_BLOCK' (2019,12)-(2019,35)
                  :: ':' (2019,35)-(2019,36)
                  compound_statement (2020,7)-(2040,8)
                    {: '{' (2020,7)-(2020,8)
                    if_statement (2021,9)-(2024,10)
                      if: 'if' (2021,9)-(2021,11)
                      parenthesized_expression (2021,12)-(2021,39)
                        (: '(' (2021,12)-(2021,13)
                        binary_expression (2021,13)-(2021,38)
                          identifier: 'type' (2021,13)-(2021,17)
                          !=: '!=' (2021,18)-(2021,20)
                          identifier: 'LEXER_RIGHT_BRACE' (2021,21)-(2021,38)
                        ): ')' (2021,38)-(2021,39)
                      compound_statement (2022,9)-(2024,10)
                        {: '{' (2022,9)-(2022,10)
                        break_statement (2023,11)-(2023,17)
                          break: 'break' (2023,11)-(2023,16)
                          ;: ';' (2023,16)-(2023,17)
                        }: '}' (2024,9)-(2024,10)
                    declaration (2026,9)-(2026,53)
                      type_identifier: 'scanner_switch_statement_t' (2026,9)-(2026,35)
                      identifier: 'switch_statement' (2026,36)-(2026,52)
                      ;: ';' (2026,52)-(2026,53)
                    expression_statement (2028,9)-(2028,44)
                      call_expression (2028,9)-(2028,43)
                        identifier: 'parser_stack_pop_uint8' (2028,9)-(2028,31)
                        argument_list (2028,32)-(2028,43)
                          (: '(' (2028,32)-(2028,33)
                          identifier: 'context_p' (2028,33)-(2028,42)
                          ): ')' (2028,42)-(2028,43)
                      ;: ';' (2028,43)-(2028,44)
                    expression_statement (2029,9)-(2029,94)
                      call_expression (2029,9)-(2029,93)
                        identifier: 'parser_stack_pop' (2029,9)-(2029,25)
                        argument_list (2029,26)-(2029,93)
                          (: '(' (2029,26)-(2029,27)
                          identifier: 'context_p' (2029,27)-(2029,36)
                          ,: ',' (2029,36)-(2029,37)
                          pointer_expression (2029,38)-(2029,55)
                            &: '&' (2029,38)-(2029,39)
                            identifier: 'switch_statement' (2029,39)-(2029,55)
                          ,: ',' (2029,55)-(2029,56)
                          sizeof_expression (2029,57)-(2029,92)
                            sizeof: 'sizeof' (2029,57)-(2029,63)
                            parenthesized_expression (2029,64)-(2029,92)
                              (: '(' (2029,64)-(2029,65)
                              identifier: 'scanner_switch_statement_t' (2029,65)-(2029,91)
                              ): ')' (2029,91)-(2029,92)
                          ): ')' (2029,92)-(2029,93)
                      ;: ';' (2029,93)-(2029,94)
                    expression_statement (2031,9)-(2031,71)
                      assignment_expression (2031,9)-(2031,70)
                        field_expression (2031,9)-(2031,51)
                          identifier: 'scanner_context_p' (2031,9)-(2031,26)
                          ->: '->' (2031,26)-(2031,28)
                          field_identifier: 'active_switch_statement' (2031,28)-(2031,51)
                        =: '=' (2031,52)-(2031,53)
                        identifier: 'switch_statement' (2031,54)-(2031,70)
                      ;: ';' (2031,70)-(2031,71)
                    preproc_if (2033,1)-(2035,7)
                      #if: '#if' (2033,1)-(2033,4)
                      call_expression (2033,5)-(2033,27)
                        identifier: 'ENABLED' (2033,5)-(2033,12)
                        argument_list (2033,13)-(2033,27)
                          (: '(' (2033,13)-(2033,14)
                          identifier: 'JERRY_ES2015' (2033,14)-(2033,26)
                          ): ')' (2033,26)-(2033,27)
                      
: '
' (2033,27)-(2034,1)
                      expression_statement (2034,9)-(2034,65)
                        call_expression (2034,9)-(2034,64)
                          identifier: 'scanner_pop_literal_pool' (2034,9)-(2034,33)
                          argument_list (2034,34)-(2034,64)
                            (: '(' (2034,34)-(2034,35)
                            identifier: 'context_p' (2034,35)-(2034,44)
                            ,: ',' (2034,44)-(2034,45)
                            identifier: 'scanner_context_p' (2034,46)-(2034,63)
                            ): ')' (2034,63)-(2034,64)
                        ;: ';' (2034,64)-(2034,65)
                      #endif: '#endif' (2035,1)-(2035,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (2035,8)-(2035,36)
                    expression_statement (2037,9)-(2037,33)
                      assignment_expression (2037,9)-(2037,32)
                        identifier: 'terminator_found' (2037,9)-(2037,25)
                        =: '=' (2037,26)-(2037,27)
                        true: 'true' (2037,28)-(2037,32)
                      ;: ';' (2037,32)-(2037,33)
                    expression_statement (2038,9)-(2038,38)
                      call_expression (2038,9)-(2038,37)
                        identifier: 'lexer_next_token' (2038,9)-(2038,25)
                        argument_list (2038,26)-(2038,37)
                          (: '(' (2038,26)-(2038,27)
                          identifier: 'context_p' (2038,27)-(2038,36)
                          ): ')' (2038,36)-(2038,37)
                      ;: ';' (2038,37)-(2038,38)
                    continue_statement (2039,9)-(2039,18)
                      continue: 'continue' (2039,9)-(2039,17)
                      ;: ';' (2039,17)-(2039,18)
                    }: '}' (2040,7)-(2040,8)
                case_statement (2041,7)-(2057,8)
                  case: 'case' (2041,7)-(2041,11)
                  identifier: 'SCAN_STACK_IF_STATEMENT' (2041,12)-(2041,35)
                  :: ':' (2041,35)-(2041,36)
                  compound_statement (2042,7)-(2057,8)
                    {: '{' (2042,7)-(2042,8)
                    expression_statement (2043,9)-(2043,44)
                      call_expression (2043,9)-(2043,43)
                        identifier: 'parser_stack_pop_uint8' (2043,9)-(2043,31)
                        argument_list (2043,32)-(2043,43)
                          (: '(' (2043,32)-(2043,33)
                          identifier: 'context_p' (2043,33)-(2043,42)
                          ): ')' (2043,42)-(2043,43)
                      ;: ';' (2043,43)-(2043,44)
                    if_statement (2045,9)-(2055,10)
                      if: 'if' (2045,9)-(2045,11)
                      parenthesized_expression (2045,12)-(2046,83)
                        (: '(' (2045,12)-(2045,13)
                        binary_expression (2045,13)-(2046,82)
                          binary_expression (2045,13)-(2045,36)
                            identifier: 'type' (2045,13)-(2045,17)
                            ==: '==' (2045,18)-(2045,20)
                            identifier: 'LEXER_KEYW_ELSE' (2045,21)-(2045,36)
                          &&: '&&' (2046,13)-(2046,15)
                          parenthesized_expression (2046,16)-(2046,82)
                            (: '(' (2046,16)-(2046,17)
                            binary_expression (2046,17)-(2046,81)
                              identifier: 'terminator_found' (2046,17)-(2046,33)
                              ||: '||' (2046,34)-(2046,36)
                              parenthesized_expression (2046,37)-(2046,81)
                                (: '(' (2046,37)-(2046,38)
                                binary_expression (2046,38)-(2046,80)
                                  field_expression (2046,38)-(2046,60)
                                    field_expression (2046,38)-(2046,54)
                                      identifier: 'context_p' (2046,38)-(2046,47)
                                      ->: '->' (2046,47)-(2046,49)
                                      field_identifier: 'token' (2046,49)-(2046,54)
                                    .: '.' (2046,54)-(2046,55)
                                    field_identifier: 'flags' (2046,55)-(2046,60)
                                  &: '&' (2046,61)-(2046,62)
                                  identifier: 'LEXER_WAS_NEWLINE' (2046,63)-(2046,80)
                                ): ')' (2046,80)-(2046,81)
                            ): ')' (2046,81)-(2046,82)
                        ): ')' (2046,82)-(2046,83)
                      compound_statement (2047,9)-(2055,10)
                        {: '{' (2047,9)-(2047,10)
                        preproc_if (2048,1)-(2054,7)
                          #if: '#if' (2048,1)-(2048,4)
                          call_expression (2048,5)-(2048,27)
                            identifier: 'ENABLED' (2048,5)-(2048,12)
                            argument_list (2048,13)-(2048,27)
                              (: '(' (2048,13)-(2048,14)
                              identifier: 'JERRY_ES2015' (2048,14)-(2048,26)
                              ): ')' (2048,26)-(2048,27)
                          
: '
' (2048,27)-(2049,1)
                          expression_statement (2049,11)-(2049,74)
                            call_expression (2049,11)-(2049,73)
                              identifier: 'scanner_check_function_after_if' (2049,11)-(2049,42)
                              argument_list (2049,43)-(2049,73)
                                (: '(' (2049,43)-(2049,44)
                                identifier: 'context_p' (2049,44)-(2049,53)
                                ,: ',' (2049,53)-(2049,54)
                                identifier: 'scanner_context_p' (2049,55)-(2049,72)
                                ): ')' (2049,72)-(2049,73)
                            ;: ';' (2049,73)-(2049,74)
                          return_statement (2050,11)-(2050,34)
                            return: 'return' (2050,11)-(2050,17)
                            identifier: 'SCAN_KEEP_TOKEN' (2050,18)-(2050,33)
                            ;: ';' (2050,33)-(2050,34)
                          preproc_else (2051,1)-(2053,34)
                            #else: '#else' (2051,1)-(2051,6)
                            comment: '/* !ENABLED (JERRY_ES2015) */' (2051,7)-(2051,36)
                            expression_statement (2052,11)-(2052,57)
                              assignment_expression (2052,11)-(2052,56)
                                field_expression (2052,11)-(2052,34)
                                  identifier: 'scanner_context_p' (2052,11)-(2052,28)
                                  ->: '->' (2052,28)-(2052,30)
                                  field_identifier: 'mode' (2052,30)-(2052,34)
                                =: '=' (2052,35)-(2052,36)
                                identifier: 'SCAN_MODE_STATEMENT' (2052,37)-(2052,56)
                              ;: ';' (2052,56)-(2052,57)
                            return_statement (2053,11)-(2053,34)
                              return: 'return' (2053,11)-(2053,17)
                              identifier: 'SCAN_NEXT_TOKEN' (2053,18)-(2053,33)
                              ;: ';' (2053,33)-(2053,34)
                          #endif: '#endif' (2054,1)-(2054,7)
                        comment: '/* ENABLED (JERRY_ES2015) */' (2054,8)-(2054,36)
                        }: '}' (2055,9)-(2055,10)
                    continue_statement (2056,9)-(2056,18)
                      continue: 'continue' (2056,9)-(2056,17)
                      ;: ';' (2056,17)-(2056,18)
                    }: '}' (2057,7)-(2057,8)
                case_statement (2058,7)-(2073,8)
                  case: 'case' (2058,7)-(2058,11)
                  identifier: 'SCAN_STACK_WITH_STATEMENT' (2058,12)-(2058,37)
                  :: ':' (2058,37)-(2058,38)
                  compound_statement (2059,7)-(2073,8)
                    {: '{' (2059,7)-(2059,8)
                    declaration (2060,9)-(2060,91)
                      type_identifier: 'scanner_literal_pool_t' (2060,9)-(2060,31)
                      init_declarator (2060,32)-(2060,90)
                        pointer_declarator (2060,32)-(2060,47)
                          *: '*' (2060,32)-(2060,33)
                          identifier: 'literal_pool_p' (2060,33)-(2060,47)
                        =: '=' (2060,48)-(2060,49)
                        field_expression (2060,50)-(2060,90)
                          identifier: 'scanner_context_p' (2060,50)-(2060,67)
                          ->: '->' (2060,67)-(2060,69)
                          field_identifier: 'active_literal_pool_p' (2060,69)-(2060,90)
                      ;: ';' (2060,90)-(2060,91)
                    expression_statement (2062,9)-(2062,84)
                      call_expression (2062,9)-(2062,83)
                        identifier: 'JERRY_ASSERT' (2062,9)-(2062,21)
                        argument_list (2062,22)-(2062,83)
                          (: '(' (2062,22)-(2062,23)
                          binary_expression (2062,23)-(2062,82)
                            field_expression (2062,23)-(2062,51)
                              identifier: 'literal_pool_p' (2062,23)-(2062,37)
                              ->: '->' (2062,37)-(2062,39)
                              field_identifier: 'status_flags' (2062,39)-(2062,51)
                            &: '&' (2062,52)-(2062,53)
                            identifier: 'SCANNER_LITERAL_POOL_IN_WITH' (2062,54)-(2062,82)
                          ): ')' (2062,82)-(2062,83)
                      ;: ';' (2062,83)-(2062,84)
                    expression_statement (2064,9)-(2064,44)
                      call_expression (2064,9)-(2064,43)
                        identifier: 'parser_stack_pop_uint8' (2064,9)-(2064,31)
                        argument_list (2064,32)-(2064,43)
                          (: '(' (2064,32)-(2064,33)
                          identifier: 'context_p' (2064,33)-(2064,42)
                          ): ')' (2064,42)-(2064,43)
                      ;: ';' (2064,43)-(2064,44)
                    if_statement (2066,9)-(2069,10)
                      if: 'if' (2066,9)-(2066,11)
                      parenthesized_expression (2066,12)-(2066,45)
                        (: '(' (2066,12)-(2066,13)
                        binary_expression (2066,13)-(2066,44)
                          field_expression (2066,13)-(2066,39)
                            identifier: 'context_p' (2066,13)-(2066,22)
                            ->: '->' (2066,22)-(2066,24)
                            field_identifier: 'stack_top_uint8' (2066,24)-(2066,39)
                          ==: '==' (2066,40)-(2066,42)
                          number_literal: '0' (2066,43)-(2066,44)
                        ): ')' (2066,44)-(2066,45)
                      compound_statement (2067,9)-(2069,10)
                        {: '{' (2067,9)-(2067,10)
                        expression_statement (2068,11)-(2068,84)
                          assignment_expression (2068,11)-(2068,83)
                            field_expression (2068,11)-(2068,39)
                              identifier: 'literal_pool_p' (2068,11)-(2068,25)
                              ->: '->' (2068,25)-(2068,27)
                              field_identifier: 'status_flags' (2068,27)-(2068,39)
                            &=: '&=' (2068,40)-(2068,42)
                            cast_expression (2068,43)-(2068,83)
                              (: '(' (2068,43)-(2068,44)
                              type_descriptor (2068,44)-(2068,52)
                                primitive_type: 'uint16_t' (2068,44)-(2068,52)
                              ): ')' (2068,52)-(2068,53)
                              unary_expression (2068,54)-(2068,83)
                                ~: '~' (2068,54)-(2068,55)
                                identifier: 'SCANNER_LITERAL_POOL_IN_WITH' (2068,55)-(2068,83)
                          ;: ';' (2068,83)-(2068,84)
                        }: '}' (2069,9)-(2069,10)
                    expression_statement (2071,9)-(2071,44)
                      call_expression (2071,9)-(2071,43)
                        identifier: 'parser_stack_pop_uint8' (2071,9)-(2071,31)
                        argument_list (2071,32)-(2071,43)
                          (: '(' (2071,32)-(2071,33)
                          identifier: 'context_p' (2071,33)-(2071,42)
                          ): ')' (2071,42)-(2071,43)
                      ;: ';' (2071,43)-(2071,44)
                    continue_statement (2072,9)-(2072,18)
                      continue: 'continue' (2072,9)-(2072,17)
                      ;: ';' (2072,17)-(2072,18)
                    }: '}' (2073,7)-(2073,8)
                case_statement (2074,7)-(2093,8)
                  case: 'case' (2074,7)-(2074,11)
                  identifier: 'SCAN_STACK_DO_STATEMENT' (2074,12)-(2074,35)
                  :: ':' (2074,35)-(2074,36)
                  compound_statement (2075,7)-(2093,8)
                    {: '{' (2075,7)-(2075,8)
                    expression_statement (2076,9)-(2076,44)
                      call_expression (2076,9)-(2076,43)
                        identifier: 'parser_stack_pop_uint8' (2076,9)-(2076,31)
                        argument_list (2076,32)-(2076,43)
                          (: '(' (2076,32)-(2076,33)
                          identifier: 'context_p' (2076,33)-(2076,42)
                          ): ')' (2076,42)-(2076,43)
                      ;: ';' (2076,43)-(2076,44)
                    if_statement (2078,9)-(2082,10)
                      if: 'if' (2078,9)-(2078,11)
                      parenthesized_expression (2078,12)-(2079,85)
                        (: '(' (2078,12)-(2078,13)
                        binary_expression (2078,13)-(2079,84)
                          binary_expression (2078,13)-(2078,37)
                            identifier: 'type' (2078,13)-(2078,17)
                            !=: '!=' (2078,18)-(2078,20)
                            identifier: 'LEXER_KEYW_WHILE' (2078,21)-(2078,37)
                          ||: '||' (2079,13)-(2079,15)
                          parenthesized_expression (2079,16)-(2079,84)
                            (: '(' (2079,16)-(2079,17)
                            binary_expression (2079,17)-(2079,83)
                              unary_expression (2079,17)-(2079,34)
                                !: '!' (2079,17)-(2079,18)
                                identifier: 'terminator_found' (2079,18)-(2079,34)
                              &&: '&&' (2079,35)-(2079,37)
                              unary_expression (2079,38)-(2079,83)
                                !: '!' (2079,38)-(2079,39)
                                parenthesized_expression (2079,39)-(2079,83)
                                  (: '(' (2079,39)-(2079,40)
                                  binary_expression (2079,40)-(2079,82)
                                    field_expression (2079,40)-(2079,62)
                                      field_expression (2079,40)-(2079,56)
                                        identifier: 'context_p' (2079,40)-(2079,49)
                                        ->: '->' (2079,49)-(2079,51)
                                        field_identifier: 'token' (2079,51)-(2079,56)
                                      .: '.' (2079,56)-(2079,57)
                                      field_identifier: 'flags' (2079,57)-(2079,62)
                                    &: '&' (2079,63)-(2079,64)
                                    identifier: 'LEXER_WAS_NEWLINE' (2079,65)-(2079,82)
                                  ): ')' (2079,82)-(2079,83)
                            ): ')' (2079,83)-(2079,84)
                        ): ')' (2079,84)-(2079,85)
                      compound_statement (2080,9)-(2082,10)
                        {: '{' (2080,9)-(2080,10)
                        expression_statement (2081,11)-(2081,43)
                          call_expression (2081,11)-(2081,42)
                            identifier: 'scanner_raise_error' (2081,11)-(2081,30)
                            argument_list (2081,31)-(2081,42)
                              (: '(' (2081,31)-(2081,32)
                              identifier: 'context_p' (2081,32)-(2081,41)
                              ): ')' (2081,41)-(2081,42)
                          ;: ';' (2081,42)-(2081,43)
                        }: '}' (2082,9)-(2082,10)
                    expression_statement (2084,9)-(2084,38)
                      call_expression (2084,9)-(2084,37)
                        identifier: 'lexer_next_token' (2084,9)-(2084,25)
                        argument_list (2084,26)-(2084,37)
                          (: '(' (2084,26)-(2084,27)
                          identifier: 'context_p' (2084,27)-(2084,36)
                          ): ')' (2084,36)-(2084,37)
                      ;: ';' (2084,37)-(2084,38)
                    if_statement (2085,9)-(2088,10)
                      if: 'if' (2085,9)-(2085,11)
                      parenthesized_expression (2085,12)-(2085,55)
                        (: '(' (2085,12)-(2085,13)
                        binary_expression (2085,13)-(2085,54)
                          field_expression (2085,13)-(2085,34)
                            field_expression (2085,13)-(2085,29)
                              identifier: 'context_p' (2085,13)-(2085,22)
                              ->: '->' (2085,22)-(2085,24)
                              field_identifier: 'token' (2085,24)-(2085,29)
                            .: '.' (2085,29)-(2085,30)
                            field_identifier: 'type' (2085,30)-(2085,34)
                          !=: '!=' (2085,35)-(2085,37)
                          identifier: 'LEXER_LEFT_PAREN' (2085,38)-(2085,54)
                        ): ')' (2085,54)-(2085,55)
                      compound_statement (2086,9)-(2088,10)
                        {: '{' (2086,9)-(2086,10)
                        expression_statement (2087,11)-(2087,43)
                          call_expression (2087,11)-(2087,42)
                            identifier: 'scanner_raise_error' (2087,11)-(2087,30)
                            argument_list (2087,31)-(2087,42)
                              (: '(' (2087,31)-(2087,32)
                              identifier: 'context_p' (2087,32)-(2087,41)
                              ): ')' (2087,41)-(2087,42)
                          ;: ';' (2087,42)-(2087,43)
                        }: '}' (2088,9)-(2088,10)
                    expression_statement (2090,9)-(2090,71)
                      call_expression (2090,9)-(2090,70)
                        identifier: 'parser_stack_push_uint8' (2090,9)-(2090,32)
                        argument_list (2090,33)-(2090,70)
                          (: '(' (2090,33)-(2090,34)
                          identifier: 'context_p' (2090,34)-(2090,43)
                          ,: ',' (2090,43)-(2090,44)
                          identifier: 'SCAN_STACK_DO_EXPRESSION' (2090,45)-(2090,69)
                          ): ')' (2090,69)-(2090,70)
                      ;: ';' (2090,70)-(2090,71)
                    expression_statement (2091,9)-(2091,64)
                      assignment_expression (2091,9)-(2091,63)
                        field_expression (2091,9)-(2091,32)
                          identifier: 'scanner_context_p' (2091,9)-(2091,26)
                          ->: '->' (2091,26)-(2091,28)
                          field_identifier: 'mode' (2091,28)-(2091,32)
                        =: '=' (2091,33)-(2091,34)
                        identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (2091,35)-(2091,63)
                      ;: ';' (2091,63)-(2091,64)
                    return_statement (2092,9)-(2092,32)
                      return: 'return' (2092,9)-(2092,15)
                      identifier: 'SCAN_NEXT_TOKEN' (2092,16)-(2092,31)
                      ;: ';' (2092,31)-(2092,32)
                    }: '}' (2093,7)-(2093,8)
                case_statement (2094,7)-(2099,8)
                  case: 'case' (2094,7)-(2094,11)
                  identifier: 'SCAN_STACK_DO_EXPRESSION' (2094,12)-(2094,36)
                  :: ':' (2094,36)-(2094,37)
                  compound_statement (2095,7)-(2099,8)
                    {: '{' (2095,7)-(2095,8)
                    expression_statement (2096,9)-(2096,44)
                      call_expression (2096,9)-(2096,43)
                        identifier: 'parser_stack_pop_uint8' (2096,9)-(2096,31)
                        argument_list (2096,32)-(2096,43)
                          (: '(' (2096,32)-(2096,33)
                          identifier: 'context_p' (2096,33)-(2096,42)
                          ): ')' (2096,42)-(2096,43)
                      ;: ';' (2096,43)-(2096,44)
                    expression_statement (2097,9)-(2097,33)
                      assignment_expression (2097,9)-(2097,32)
                        identifier: 'terminator_found' (2097,9)-(2097,25)
                        =: '=' (2097,26)-(2097,27)
                        true: 'true' (2097,28)-(2097,32)
                      ;: ';' (2097,32)-(2097,33)
                    continue_statement (2098,9)-(2098,18)
                      continue: 'continue' (2098,9)-(2098,17)
                      ;: ';' (2098,17)-(2098,18)
                    }: '}' (2099,7)-(2099,8)
                preproc_if (2100,1)-(2124,7)
                  #if: '#if' (2100,1)-(2100,4)
                  call_expression (2100,5)-(2100,27)
                    identifier: 'ENABLED' (2100,5)-(2100,12)
                    argument_list (2100,13)-(2100,27)
                      (: '(' (2100,13)-(2100,14)
                      identifier: 'JERRY_ES2015' (2100,14)-(2100,26)
                      ): ')' (2100,26)-(2100,27)
                  
: '
' (2100,27)-(2101,1)
                  case_statement (2101,7)-(2117,8)
                    case: 'case' (2101,7)-(2101,11)
                    identifier: 'SCAN_STACK_PRIVATE_BLOCK_EARLY' (2101,12)-(2101,42)
                    :: ':' (2101,42)-(2101,43)
                    compound_statement (2102,7)-(2117,8)
                      {: '{' (2102,7)-(2102,8)
                      declaration (2103,9)-(2103,49)
                        type_identifier: 'parser_list_iterator_t' (2103,9)-(2103,31)
                        identifier: 'literal_iterator' (2103,32)-(2103,48)
                        ;: ';' (2103,48)-(2103,49)
                      declaration (2104,9)-(2104,41)
                        type_identifier: 'lexer_lit_location_t' (2104,9)-(2104,29)
                        pointer_declarator (2104,30)-(2104,40)
                          *: '*' (2104,30)-(2104,31)
                          identifier: 'literal_p' (2104,31)-(2104,40)
                        ;: ';' (2104,40)-(2104,41)
                      expression_statement (2106,9)-(2106,112)
                        call_expression (2106,9)-(2106,111)
                          identifier: 'parser_list_iterator_init' (2106,9)-(2106,34)
                          argument_list (2106,35)-(2106,111)
                            (: '(' (2106,35)-(2106,36)
                            pointer_expression (2106,36)-(2106,91)
                              &: '&' (2106,36)-(2106,37)
                              field_expression (2106,37)-(2106,91)
                                field_expression (2106,37)-(2106,77)
                                  identifier: 'scanner_context_p' (2106,37)-(2106,54)
                                  ->: '->' (2106,54)-(2106,56)
                                  field_identifier: 'active_literal_pool_p' (2106,56)-(2106,77)
                                ->: '->' (2106,77)-(2106,79)
                                field_identifier: 'literal_pool' (2106,79)-(2106,91)
                            ,: ',' (2106,91)-(2106,92)
                            pointer_expression (2106,93)-(2106,110)
                              &: '&' (2106,93)-(2106,94)
                              identifier: 'literal_iterator' (2106,94)-(2106,110)
                            ): ')' (2106,110)-(2106,111)
                        ;: ';' (2106,111)-(2106,112)
                      while_statement (2108,9)-(2115,10)
                        while: 'while' (2108,9)-(2108,14)
                        parenthesized_expression (2108,15)-(2108,109)
                          (: '(' (2108,15)-(2108,16)
                          binary_expression (2108,16)-(2108,108)
                            parenthesized_expression (2108,16)-(2108,100)
                              (: '(' (2108,16)-(2108,17)
                              assignment_expression (2108,17)-(2108,99)
                                identifier: 'literal_p' (2108,17)-(2108,26)
                                =: '=' (2108,27)-(2108,28)
                                cast_expression (2108,29)-(2108,99)
                                  (: '(' (2108,29)-(2108,30)
                                  type_descriptor (2108,30)-(2108,52)
                                    type_identifier: 'lexer_lit_location_t' (2108,30)-(2108,50)
                                    abstract_pointer_declarator (2108,51)-(2108,52)
                                      *: '*' (2108,51)-(2108,52)
                                  ): ')' (2108,52)-(2108,53)
                                  call_expression (2108,54)-(2108,99)
                                    identifier: 'parser_list_iterator_next' (2108,54)-(2108,79)
                                    argument_list (2108,80)-(2108,99)
                                      (: '(' (2108,80)-(2108,81)
                                      pointer_expression (2108,81)-(2108,98)
                                        &: '&' (2108,81)-(2108,82)
                                        identifier: 'literal_iterator' (2108,82)-(2108,98)
                                      ): ')' (2108,98)-(2108,99)
                              ): ')' (2108,99)-(2108,100)
                            !=: '!=' (2108,101)-(2108,103)
                            null (2108,104)-(2108,108)
                              NULL: 'NULL' (2108,104)-(2108,108)
                          ): ')' (2108,108)-(2108,109)
                        compound_statement (2109,9)-(2115,10)
                          {: '{' (2109,9)-(2109,10)
                          if_statement (2110,11)-(2114,12)
                            if: 'if' (2110,11)-(2110,13)
                            parenthesized_expression (2110,14)-(2111,59)
                              (: '(' (2110,14)-(2110,15)
                              binary_expression (2110,15)-(2111,58)
                                parenthesized_expression (2110,15)-(2110,86)
                                  (: '(' (2110,15)-(2110,16)
                                  binary_expression (2110,16)-(2110,85)
                                    field_expression (2110,16)-(2110,31)
                                      identifier: 'literal_p' (2110,16)-(2110,25)
                                      ->: '->' (2110,25)-(2110,27)
                                      field_identifier: 'type' (2110,27)-(2110,31)
                                    &: '&' (2110,32)-(2110,33)
                                    parenthesized_expression (2110,34)-(2110,85)
                                      (: '(' (2110,34)-(2110,35)
                                      binary_expression (2110,35)-(2110,84)
                                        identifier: 'SCANNER_LITERAL_IS_LET' (2110,35)-(2110,57)
                                        |: '|' (2110,58)-(2110,59)
                                        identifier: 'SCANNER_LITERAL_IS_CONST' (2110,60)-(2110,84)
                                      ): ')' (2110,84)-(2110,85)
                                  ): ')' (2110,85)-(2110,86)
                                &&: '&&' (2111,15)-(2111,17)
                                binary_expression (2111,18)-(2111,58)
                                  field_expression (2111,18)-(2111,33)
                                    identifier: 'literal_p' (2111,18)-(2111,27)
                                    ->: '->' (2111,27)-(2111,29)
                                    field_identifier: 'type' (2111,29)-(2111,33)
                                  &: '&' (2111,34)-(2111,35)
                                  identifier: 'SCANNER_LITERAL_NO_REG' (2111,36)-(2111,58)
                              ): ')' (2111,58)-(2111,59)
                            compound_statement (2112,11)-(2114,12)
                              {: '{' (2112,11)-(2112,12)
                              expression_statement (2113,13)-(2113,61)
                                assignment_expression (2113,13)-(2113,60)
                                  field_expression (2113,13)-(2113,28)
                                    identifier: 'literal_p' (2113,13)-(2113,22)
                                    ->: '->' (2113,22)-(2113,24)
                                    field_identifier: 'type' (2113,24)-(2113,28)
                                  |=: '|=' (2113,29)-(2113,31)
                                  identifier: 'SCANNER_LITERAL_EARLY_CREATE' (2113,32)-(2113,60)
                                ;: ';' (2113,60)-(2113,61)
                              }: '}' (2114,11)-(2114,12)
                          }: '}' (2115,9)-(2115,10)
                      comment: '/* FALLTHRU */' (2116,9)-(2116,23)
                      }: '}' (2117,7)-(2117,8)
                  case_statement (2118,7)-(2123,8)
                    case: 'case' (2118,7)-(2118,11)
                    identifier: 'SCAN_STACK_PRIVATE_BLOCK' (2118,12)-(2118,36)
                    :: ':' (2118,36)-(2118,37)
                    compound_statement (2119,7)-(2123,8)
                      {: '{' (2119,7)-(2119,8)
                      expression_statement (2120,9)-(2120,44)
                        call_expression (2120,9)-(2120,43)
                          identifier: 'parser_stack_pop_uint8' (2120,9)-(2120,31)
                          argument_list (2120,32)-(2120,43)
                            (: '(' (2120,32)-(2120,33)
                            identifier: 'context_p' (2120,33)-(2120,42)
                            ): ')' (2120,42)-(2120,43)
                        ;: ';' (2120,43)-(2120,44)
                      expression_statement (2121,9)-(2121,65)
                        call_expression (2121,9)-(2121,64)
                          identifier: 'scanner_pop_literal_pool' (2121,9)-(2121,33)
                          argument_list (2121,34)-(2121,64)
                            (: '(' (2121,34)-(2121,35)
                            identifier: 'context_p' (2121,35)-(2121,44)
                            ,: ',' (2121,44)-(2121,45)
                            identifier: 'scanner_context_p' (2121,46)-(2121,63)
                            ): ')' (2121,63)-(2121,64)
                        ;: ';' (2121,64)-(2121,65)
                      continue_statement (2122,9)-(2122,18)
                        continue: 'continue' (2122,9)-(2122,17)
                        ;: ';' (2122,17)-(2122,18)
                      }: '}' (2123,7)-(2123,8)
                  #endif: '#endif' (2124,1)-(2124,7)
                comment: '/* ENABLED (JERRY_ES2015) */' (2124,8)-(2124,36)
                case_statement (2125,7)-(2240,8)
                  default: 'default' (2125,7)-(2125,14)
                  :: ':' (2125,14)-(2125,15)
                  compound_statement (2126,7)-(2240,8)
                    {: '{' (2126,7)-(2126,8)
                    expression_statement (2127,9)-(2128,84)
                      call_expression (2127,9)-(2128,83)
                        identifier: 'JERRY_ASSERT' (2127,9)-(2127,21)
                        argument_list (2127,22)-(2128,83)
                          (: '(' (2127,22)-(2127,23)
                          binary_expression (2127,23)-(2128,82)
                            binary_expression (2127,23)-(2127,77)
                              field_expression (2127,23)-(2127,49)
                                identifier: 'context_p' (2127,23)-(2127,32)
                                ->: '->' (2127,32)-(2127,34)
                                field_identifier: 'stack_top_uint8' (2127,34)-(2127,49)
                              ==: '==' (2127,50)-(2127,52)
                              identifier: 'SCAN_STACK_TRY_STATEMENT' (2127,53)-(2127,77)
                            ||: '||' (2128,23)-(2128,25)
                            binary_expression (2128,26)-(2128,82)
                              field_expression (2128,26)-(2128,52)
                                identifier: 'context_p' (2128,26)-(2128,35)
                                ->: '->' (2128,35)-(2128,37)
                                field_identifier: 'stack_top_uint8' (2128,37)-(2128,52)
                              ==: '==' (2128,53)-(2128,55)
                              identifier: 'SCAN_STACK_CATCH_STATEMENT' (2128,56)-(2128,82)
                          ): ')' (2128,82)-(2128,83)
                      ;: ';' (2128,83)-(2128,84)
                    if_statement (2130,9)-(2133,10)
                      if: 'if' (2130,9)-(2130,11)
                      parenthesized_expression (2130,12)-(2130,39)
                        (: '(' (2130,12)-(2130,13)
                        binary_expression (2130,13)-(2130,38)
                          identifier: 'type' (2130,13)-(2130,17)
                          !=: '!=' (2130,18)-(2130,20)
                          identifier: 'LEXER_RIGHT_BRACE' (2130,21)-(2130,38)
                        ): ')' (2130,38)-(2130,39)
                      compound_statement (2131,9)-(2133,10)
                        {: '{' (2131,9)-(2131,10)
                        break_statement (2132,11)-(2132,17)
                          break: 'break' (2132,11)-(2132,16)
                          ;: ';' (2132,16)-(2132,17)
                        }: '}' (2133,9)-(2133,10)
                    declaration (2135,9)-(2135,56)
                      primitive_type: 'uint8_t' (2135,9)-(2135,16)
                      init_declarator (2135,17)-(2135,55)
                        identifier: 'stack_top' (2135,17)-(2135,26)
                        =: '=' (2135,27)-(2135,28)
                        field_expression (2135,29)-(2135,55)
                          identifier: 'context_p' (2135,29)-(2135,38)
                          ->: '->' (2135,38)-(2135,40)
                          field_identifier: 'stack_top_uint8' (2135,40)-(2135,55)
                      ;: ';' (2135,55)-(2135,56)
                    expression_statement (2136,9)-(2136,44)
                      call_expression (2136,9)-(2136,43)
                        identifier: 'parser_stack_pop_uint8' (2136,9)-(2136,31)
                        argument_list (2136,32)-(2136,43)
                          (: '(' (2136,32)-(2136,33)
                          identifier: 'context_p' (2136,33)-(2136,42)
                          ): ')' (2136,42)-(2136,43)
                      ;: ';' (2136,43)-(2136,44)
                    expression_statement (2137,9)-(2137,38)
                      call_expression (2137,9)-(2137,37)
                        identifier: 'lexer_next_token' (2137,9)-(2137,25)
                        argument_list (2137,26)-(2137,37)
                          (: '(' (2137,26)-(2137,27)
                          identifier: 'context_p' (2137,27)-(2137,36)
                          ): ')' (2137,36)-(2137,37)
                      ;: ';' (2137,37)-(2137,38)
                    preproc_if (2139,1)-(2146,7)
                      #if: '#if' (2139,1)-(2139,4)
                      call_expression (2139,5)-(2139,27)
                        identifier: 'ENABLED' (2139,5)-(2139,12)
                        argument_list (2139,13)-(2139,27)
                          (: '(' (2139,13)-(2139,14)
                          identifier: 'JERRY_ES2015' (2139,14)-(2139,26)
                          ): ')' (2139,26)-(2139,27)
                      
: '
' (2139,27)-(2140,1)
                      expression_statement (2140,9)-(2140,65)
                        call_expression (2140,9)-(2140,64)
                          identifier: 'scanner_pop_literal_pool' (2140,9)-(2140,33)
                          argument_list (2140,34)-(2140,64)
                            (: '(' (2140,34)-(2140,35)
                            identifier: 'context_p' (2140,35)-(2140,44)
                            ,: ',' (2140,44)-(2140,45)
                            identifier: 'scanner_context_p' (2140,46)-(2140,63)
                            ): ')' (2140,63)-(2140,64)
                        ;: ';' (2140,64)-(2140,65)
                      preproc_else (2141,1)-(2145,10)
                        #else: '#else' (2141,1)-(2141,6)
                        comment: '/* !ENABLED (JERRY_ES2015) */' (2141,7)-(2141,36)
                        if_statement (2142,9)-(2145,10)
                          if: 'if' (2142,9)-(2142,11)
                          parenthesized_expression (2142,12)-(2142,53)
                            (: '(' (2142,12)-(2142,13)
                            binary_expression (2142,13)-(2142,52)
                              identifier: 'stack_top' (2142,13)-(2142,22)
                              ==: '==' (2142,23)-(2142,25)
                              identifier: 'SCAN_STACK_CATCH_STATEMENT' (2142,26)-(2142,52)
                            ): ')' (2142,52)-(2142,53)
                          compound_statement (2143,9)-(2145,10)
                            {: '{' (2143,9)-(2143,10)
                            expression_statement (2144,11)-(2144,67)
                              call_expression (2144,11)-(2144,66)
                                identifier: 'scanner_pop_literal_pool' (2144,11)-(2144,35)
                                argument_list (2144,36)-(2144,66)
                                  (: '(' (2144,36)-(2144,37)
                                  identifier: 'context_p' (2144,37)-(2144,46)
                                  ,: ',' (2144,46)-(2144,47)
                                  identifier: 'scanner_context_p' (2144,48)-(2144,65)
                                  ): ')' (2144,65)-(2144,66)
                              ;: ';' (2144,66)-(2144,67)
                            }: '}' (2145,9)-(2145,10)
                      #endif: '#endif' (2146,1)-(2146,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (2146,8)-(2146,36)
                    comment: '/* A finally statement is optional after a try or catch statement. */' (2148,9)-(2148,78)
                    if_statement (2149,9)-(2169,10)
                      if: 'if' (2149,9)-(2149,11)
                      parenthesized_expression (2149,12)-(2149,57)
                        (: '(' (2149,12)-(2149,13)
                        binary_expression (2149,13)-(2149,56)
                          field_expression (2149,13)-(2149,34)
                            field_expression (2149,13)-(2149,29)
                              identifier: 'context_p' (2149,13)-(2149,22)
                              ->: '->' (2149,22)-(2149,24)
                              field_identifier: 'token' (2149,24)-(2149,29)
                            .: '.' (2149,29)-(2149,30)
                            field_identifier: 'type' (2149,30)-(2149,34)
                          ==: '==' (2149,35)-(2149,37)
                          identifier: 'LEXER_KEYW_FINALLY' (2149,38)-(2149,56)
                        ): ')' (2149,56)-(2149,57)
                      compound_statement (2150,9)-(2169,10)
                        {: '{' (2150,9)-(2150,10)
                        expression_statement (2151,11)-(2151,40)
                          call_expression (2151,11)-(2151,39)
                            identifier: 'lexer_next_token' (2151,11)-(2151,27)
                            argument_list (2151,28)-(2151,39)
                              (: '(' (2151,28)-(2151,29)
                              identifier: 'context_p' (2151,29)-(2151,38)
                              ): ')' (2151,38)-(2151,39)
                          ;: ';' (2151,39)-(2151,40)
                        if_statement (2153,11)-(2156,12)
                          if: 'if' (2153,11)-(2153,13)
                          parenthesized_expression (2153,14)-(2153,57)
                            (: '(' (2153,14)-(2153,15)
                            binary_expression (2153,15)-(2153,56)
                              field_expression (2153,15)-(2153,36)
                                field_expression (2153,15)-(2153,31)
                                  identifier: 'context_p' (2153,15)-(2153,24)
                                  ->: '->' (2153,24)-(2153,26)
                                  field_identifier: 'token' (2153,26)-(2153,31)
                                .: '.' (2153,31)-(2153,32)
                                field_identifier: 'type' (2153,32)-(2153,36)
                              !=: '!=' (2153,37)-(2153,39)
                              identifier: 'LEXER_LEFT_BRACE' (2153,40)-(2153,56)
                            ): ')' (2153,56)-(2153,57)
                          compound_statement (2154,11)-(2156,12)
                            {: '{' (2154,11)-(2154,12)
                            expression_statement (2155,13)-(2155,45)
                              call_expression (2155,13)-(2155,44)
                                identifier: 'scanner_raise_error' (2155,13)-(2155,32)
                                argument_list (2155,33)-(2155,44)
                                  (: '(' (2155,33)-(2155,34)
                                  identifier: 'context_p' (2155,34)-(2155,43)
                                  ): ')' (2155,43)-(2155,44)
                              ;: ';' (2155,44)-(2155,45)
                            }: '}' (2156,11)-(2156,12)
                        preproc_if (2158,1)-(2164,7)
                          #if: '#if' (2158,1)-(2158,4)
                          call_expression (2158,5)-(2158,27)
                            identifier: 'ENABLED' (2158,5)-(2158,12)
                            argument_list (2158,13)-(2158,27)
                              (: '(' (2158,13)-(2158,14)
                              identifier: 'JERRY_ES2015' (2158,14)-(2158,26)
                              ): ')' (2158,26)-(2158,27)
                          
: '
' (2158,27)-(2159,1)
                          declaration (2159,11)-(2159,50)
                            type_identifier: 'scanner_literal_pool_t' (2159,11)-(2159,33)
                            pointer_declarator (2159,34)-(2159,49)
                              *: '*' (2159,34)-(2159,35)
                              identifier: 'literal_pool_p' (2159,35)-(2159,49)
                            ;: ';' (2159,49)-(2159,50)
                          expression_statement (2160,11)-(2162,83)
                            assignment_expression (2160,11)-(2162,82)
                              identifier: 'literal_pool_p' (2160,11)-(2160,25)
                              =: '=' (2160,26)-(2160,27)
                              call_expression (2160,28)-(2162,82)
                                identifier: 'scanner_push_literal_pool' (2160,28)-(2160,53)
                                argument_list (2160,54)-(2162,82)
                                  (: '(' (2160,54)-(2160,55)
                                  identifier: 'context_p' (2160,55)-(2160,64)
                                  ,: ',' (2160,64)-(2160,65)
                                  identifier: 'scanner_context_p' (2161,55)-(2161,72)
                                  ,: ',' (2161,72)-(2161,73)
                                  identifier: 'SCANNER_LITERAL_POOL_BLOCK' (2162,55)-(2162,81)
                                  ): ')' (2162,81)-(2162,82)
                            ;: ';' (2162,82)-(2162,83)
                          expression_statement (2163,11)-(2163,58)
                            assignment_expression (2163,11)-(2163,57)
                              field_expression (2163,11)-(2163,35)
                                identifier: 'literal_pool_p' (2163,11)-(2163,25)
                                ->: '->' (2163,25)-(2163,27)
                                field_identifier: 'source_p' (2163,27)-(2163,35)
                              =: '=' (2163,36)-(2163,37)
                              field_expression (2163,38)-(2163,57)
                                identifier: 'context_p' (2163,38)-(2163,47)
                                ->: '->' (2163,47)-(2163,49)
                                field_identifier: 'source_p' (2163,49)-(2163,57)
                            ;: ';' (2163,57)-(2163,58)
                          #endif: '#endif' (2164,1)-(2164,7)
                        comment: '/* ENABLED (JERRY_ES2015) */' (2164,8)-(2164,36)
                        expression_statement (2166,11)-(2166,75)
                          call_expression (2166,11)-(2166,74)
                            identifier: 'parser_stack_push_uint8' (2166,11)-(2166,34)
                            argument_list (2166,35)-(2166,74)
                              (: '(' (2166,35)-(2166,36)
                              identifier: 'context_p' (2166,36)-(2166,45)
                              ,: ',' (2166,45)-(2166,46)
                              identifier: 'SCAN_STACK_BLOCK_STATEMENT' (2166,47)-(2166,73)
                              ): ')' (2166,73)-(2166,74)
                          ;: ';' (2166,74)-(2166,75)
                        expression_statement (2167,11)-(2167,71)
                          assignment_expression (2167,11)-(2167,70)
                            field_expression (2167,11)-(2167,34)
                              identifier: 'scanner_context_p' (2167,11)-(2167,28)
                              ->: '->' (2167,28)-(2167,30)
                              field_identifier: 'mode' (2167,30)-(2167,34)
                            =: '=' (2167,35)-(2167,36)
                            identifier: 'SCAN_MODE_STATEMENT_OR_TERMINATOR' (2167,37)-(2167,70)
                          ;: ';' (2167,70)-(2167,71)
                        return_statement (2168,11)-(2168,34)
                          return: 'return' (2168,11)-(2168,17)
                          identifier: 'SCAN_NEXT_TOKEN' (2168,18)-(2168,33)
                          ;: ';' (2168,33)-(2168,34)
                        }: '}' (2169,9)-(2169,10)
                    if_statement (2171,9)-(2175,10)
                      if: 'if' (2171,9)-(2171,11)
                      parenthesized_expression (2171,12)-(2171,53)
                        (: '(' (2171,12)-(2171,13)
                        binary_expression (2171,13)-(2171,52)
                          identifier: 'stack_top' (2171,13)-(2171,22)
                          ==: '==' (2171,23)-(2171,25)
                          identifier: 'SCAN_STACK_CATCH_STATEMENT' (2171,26)-(2171,52)
                        ): ')' (2171,52)-(2171,53)
                      compound_statement (2172,9)-(2175,10)
                        {: '{' (2172,9)-(2172,10)
                        expression_statement (2173,11)-(2173,35)
                          assignment_expression (2173,11)-(2173,34)
                            identifier: 'terminator_found' (2173,11)-(2173,27)
                            =: '=' (2173,28)-(2173,29)
                            true: 'true' (2173,30)-(2173,34)
                          ;: ';' (2173,34)-(2173,35)
                        continue_statement (2174,11)-(2174,20)
                          continue: 'continue' (2174,11)-(2174,19)
                          ;: ';' (2174,19)-(2174,20)
                        }: '}' (2175,9)-(2175,10)
                    comment: '/* A catch statement must be present after a try statement unless a finally is provided. */' (2177,9)-(2177,100)
                    if_statement (2178,9)-(2181,10)
                      if: 'if' (2178,9)-(2178,11)
                      parenthesized_expression (2178,12)-(2178,55)
                        (: '(' (2178,12)-(2178,13)
                        binary_expression (2178,13)-(2178,54)
                          field_expression (2178,13)-(2178,34)
                            field_expression (2178,13)-(2178,29)
                              identifier: 'context_p' (2178,13)-(2178,22)
                              ->: '->' (2178,22)-(2178,24)
                              field_identifier: 'token' (2178,24)-(2178,29)
                            .: '.' (2178,29)-(2178,30)
                            field_identifier: 'type' (2178,30)-(2178,34)
                          !=: '!=' (2178,35)-(2178,37)
                          identifier: 'LEXER_KEYW_CATCH' (2178,38)-(2178,54)
                        ): ')' (2178,54)-(2178,55)
                      compound_statement (2179,9)-(2181,10)
                        {: '{' (2179,9)-(2179,10)
                        expression_statement (2180,11)-(2180,43)
                          call_expression (2180,11)-(2180,42)
                            identifier: 'scanner_raise_error' (2180,11)-(2180,30)
                            argument_list (2180,31)-(2180,42)
                              (: '(' (2180,31)-(2180,32)
                              identifier: 'context_p' (2180,32)-(2180,41)
                              ): ')' (2180,41)-(2180,42)
                          ;: ';' (2180,42)-(2180,43)
                        }: '}' (2181,9)-(2181,10)
                    expression_statement (2183,9)-(2183,38)
                      call_expression (2183,9)-(2183,37)
                        identifier: 'lexer_next_token' (2183,9)-(2183,25)
                        argument_list (2183,26)-(2183,37)
                          (: '(' (2183,26)-(2183,27)
                          identifier: 'context_p' (2183,27)-(2183,36)
                          ): ')' (2183,36)-(2183,37)
                      ;: ';' (2183,37)-(2183,38)
                    if_statement (2185,9)-(2188,10)
                      if: 'if' (2185,9)-(2185,11)
                      parenthesized_expression (2185,12)-(2185,55)
                        (: '(' (2185,12)-(2185,13)
                        binary_expression (2185,13)-(2185,54)
                          field_expression (2185,13)-(2185,34)
                            field_expression (2185,13)-(2185,29)
                              identifier: 'context_p' (2185,13)-(2185,22)
                              ->: '->' (2185,22)-(2185,24)
                              field_identifier: 'token' (2185,24)-(2185,29)
                            .: '.' (2185,29)-(2185,30)
                            field_identifier: 'type' (2185,30)-(2185,34)
                          !=: '!=' (2185,35)-(2185,37)
                          identifier: 'LEXER_LEFT_PAREN' (2185,38)-(2185,54)
                        ): ')' (2185,54)-(2185,55)
                      compound_statement (2186,9)-(2188,10)
                        {: '{' (2186,9)-(2186,10)
                        expression_statement (2187,11)-(2187,43)
                          call_expression (2187,11)-(2187,42)
                            identifier: 'scanner_raise_error' (2187,11)-(2187,30)
                            argument_list (2187,31)-(2187,42)
                              (: '(' (2187,31)-(2187,32)
                              identifier: 'context_p' (2187,32)-(2187,41)
                              ): ')' (2187,41)-(2187,42)
                          ;: ';' (2187,42)-(2187,43)
                        }: '}' (2188,9)-(2188,10)
                    declaration (2190,9)-(2190,48)
                      type_identifier: 'scanner_literal_pool_t' (2190,9)-(2190,31)
                      pointer_declarator (2190,32)-(2190,47)
                        *: '*' (2190,32)-(2190,33)
                        identifier: 'literal_pool_p' (2190,33)-(2190,47)
                      ;: ';' (2190,47)-(2190,48)
                    expression_statement (2191,9)-(2191,111)
                      assignment_expression (2191,9)-(2191,110)
                        identifier: 'literal_pool_p' (2191,9)-(2191,23)
                        =: '=' (2191,24)-(2191,25)
                        call_expression (2191,26)-(2191,110)
                          identifier: 'scanner_push_literal_pool' (2191,26)-(2191,51)
                          argument_list (2191,52)-(2191,110)
                            (: '(' (2191,52)-(2191,53)
                            identifier: 'context_p' (2191,53)-(2191,62)
                            ,: ',' (2191,62)-(2191,63)
                            identifier: 'scanner_context_p' (2191,64)-(2191,81)
                            ,: ',' (2191,81)-(2191,82)
                            identifier: 'SCANNER_LITERAL_POOL_BLOCK' (2191,83)-(2191,109)
                            ): ')' (2191,109)-(2191,110)
                      ;: ';' (2191,110)-(2191,111)
                    expression_statement (2192,9)-(2192,56)
                      assignment_expression (2192,9)-(2192,55)
                        field_expression (2192,9)-(2192,33)
                          identifier: 'literal_pool_p' (2192,9)-(2192,23)
                          ->: '->' (2192,23)-(2192,25)
                          field_identifier: 'source_p' (2192,25)-(2192,33)
                        =: '=' (2192,34)-(2192,35)
                        field_expression (2192,36)-(2192,55)
                          identifier: 'context_p' (2192,36)-(2192,45)
                          ->: '->' (2192,45)-(2192,47)
                          field_identifier: 'source_p' (2192,47)-(2192,55)
                      ;: ';' (2192,55)-(2192,56)
                    expression_statement (2194,9)-(2194,38)
                      call_expression (2194,9)-(2194,37)
                        identifier: 'lexer_next_token' (2194,9)-(2194,25)
                        argument_list (2194,26)-(2194,37)
                          (: '(' (2194,26)-(2194,27)
                          identifier: 'context_p' (2194,27)-(2194,36)
                          ): ')' (2194,36)-(2194,37)
                      ;: ';' (2194,37)-(2194,38)
                    expression_statement (2195,9)-(2195,73)
                      call_expression (2195,9)-(2195,72)
                        identifier: 'parser_stack_push_uint8' (2195,9)-(2195,32)
                        argument_list (2195,33)-(2195,72)
                          (: '(' (2195,33)-(2195,34)
                          identifier: 'context_p' (2195,34)-(2195,43)
                          ,: ',' (2195,43)-(2195,44)
                          identifier: 'SCAN_STACK_CATCH_STATEMENT' (2195,45)-(2195,71)
                          ): ')' (2195,71)-(2195,72)
                      ;: ';' (2195,72)-(2195,73)
                    preproc_if (2197,1)-(2213,7)
                      #if: '#if' (2197,1)-(2197,4)
                      call_expression (2197,5)-(2197,27)
                        identifier: 'ENABLED' (2197,5)-(2197,12)
                        argument_list (2197,13)-(2197,27)
                          (: '(' (2197,13)-(2197,14)
                          identifier: 'JERRY_ES2015' (2197,14)-(2197,26)
                          ): ')' (2197,26)-(2197,27)
                      
: '
' (2197,27)-(2198,1)
                      if_statement (2198,9)-(2212,10)
                        if: 'if' (2198,9)-(2198,11)
                        parenthesized_expression (2198,12)-(2198,101)
                          (: '(' (2198,12)-(2198,13)
                          binary_expression (2198,13)-(2198,100)
                            binary_expression (2198,13)-(2198,55)
                              field_expression (2198,13)-(2198,34)
                                field_expression (2198,13)-(2198,29)
                                  identifier: 'context_p' (2198,13)-(2198,22)
                                  ->: '->' (2198,22)-(2198,24)
                                  field_identifier: 'token' (2198,24)-(2198,29)
                                .: '.' (2198,29)-(2198,30)
                                field_identifier: 'type' (2198,30)-(2198,34)
                              ==: '==' (2198,35)-(2198,37)
                              identifier: 'LEXER_LEFT_SQUARE' (2198,38)-(2198,55)
                            ||: '||' (2198,56)-(2198,58)
                            binary_expression (2198,59)-(2198,100)
                              field_expression (2198,59)-(2198,80)
                                field_expression (2198,59)-(2198,75)
                                  identifier: 'context_p' (2198,59)-(2198,68)
                                  ->: '->' (2198,68)-(2198,70)
                                  field_identifier: 'token' (2198,70)-(2198,75)
                                .: '.' (2198,75)-(2198,76)
                                field_identifier: 'type' (2198,76)-(2198,80)
                              ==: '==' (2198,81)-(2198,83)
                              identifier: 'LEXER_LEFT_BRACE' (2198,84)-(2198,100)
                          ): ')' (2198,100)-(2198,101)
                        compound_statement (2199,9)-(2212,10)
                          {: '{' (2199,9)-(2199,10)
                          expression_statement (2200,11)-(2200,107)
                            call_expression (2200,11)-(2200,106)
                              identifier: 'scanner_push_destructuring_pattern' (2200,11)-(2200,45)
                              argument_list (2200,46)-(2200,106)
                                (: '(' (2200,46)-(2200,47)
                                identifier: 'context_p' (2200,47)-(2200,56)
                                ,: ',' (2200,56)-(2200,57)
                                identifier: 'scanner_context_p' (2200,58)-(2200,75)
                                ,: ',' (2200,75)-(2200,76)
                                identifier: 'SCANNER_BINDING_CATCH' (2200,77)-(2200,98)
                                ,: ',' (2200,98)-(2200,99)
                                false: 'false' (2200,100)-(2200,105)
                                ): ')' (2200,105)-(2200,106)
                            ;: ';' (2200,106)-(2200,107)
                          if_statement (2202,11)-(2207,12)
                            if: 'if' (2202,11)-(2202,13)
                            parenthesized_expression (2202,14)-(2202,58)
                              (: '(' (2202,14)-(2202,15)
                              binary_expression (2202,15)-(2202,57)
                                field_expression (2202,15)-(2202,36)
                                  field_expression (2202,15)-(2202,31)
                                    identifier: 'context_p' (2202,15)-(2202,24)
                                    ->: '->' (2202,24)-(2202,26)
                                    field_identifier: 'token' (2202,26)-(2202,31)
                                  .: '.' (2202,31)-(2202,32)
                                  field_identifier: 'type' (2202,32)-(2202,36)
                                ==: '==' (2202,37)-(2202,39)
                                identifier: 'LEXER_LEFT_SQUARE' (2202,40)-(2202,57)
                              ): ')' (2202,57)-(2202,58)
                            compound_statement (2203,11)-(2207,12)
                              {: '{' (2203,11)-(2203,12)
                              expression_statement (2204,13)-(2204,75)
                                call_expression (2204,13)-(2204,74)
                                  identifier: 'parser_stack_push_uint8' (2204,13)-(2204,36)
                                  argument_list (2204,37)-(2204,74)
                                    (: '(' (2204,37)-(2204,38)
                                    identifier: 'context_p' (2204,38)-(2204,47)
                                    ,: ',' (2204,47)-(2204,48)
                                    identifier: 'SCAN_STACK_ARRAY_LITERAL' (2204,49)-(2204,73)
                                    ): ')' (2204,73)-(2204,74)
                                ;: ';' (2204,74)-(2204,75)
                              expression_statement (2205,13)-(2205,57)
                                assignment_expression (2205,13)-(2205,56)
                                  field_expression (2205,13)-(2205,36)
                                    identifier: 'scanner_context_p' (2205,13)-(2205,30)
                                    ->: '->' (2205,30)-(2205,32)
                                    field_identifier: 'mode' (2205,32)-(2205,36)
                                  =: '=' (2205,37)-(2205,38)
                                  identifier: 'SCAN_MODE_BINDING' (2205,39)-(2205,56)
                                ;: ';' (2205,56)-(2205,57)
                              return_statement (2206,13)-(2206,36)
                                return: 'return' (2206,13)-(2206,19)
                                identifier: 'SCAN_NEXT_TOKEN' (2206,20)-(2206,35)
                                ;: ';' (2206,35)-(2206,36)
                              }: '}' (2207,11)-(2207,12)
                          expression_statement (2209,11)-(2209,74)
                            call_expression (2209,11)-(2209,73)
                              identifier: 'parser_stack_push_uint8' (2209,11)-(2209,34)
                              argument_list (2209,35)-(2209,73)
                                (: '(' (2209,35)-(2209,36)
                                identifier: 'context_p' (2209,36)-(2209,45)
                                ,: ',' (2209,45)-(2209,46)
                                identifier: 'SCAN_STACK_OBJECT_LITERAL' (2209,47)-(2209,72)
                                ): ')' (2209,72)-(2209,73)
                            ;: ';' (2209,73)-(2209,74)
                          expression_statement (2210,11)-(2210,61)
                            assignment_expression (2210,11)-(2210,60)
                              field_expression (2210,11)-(2210,34)
                                identifier: 'scanner_context_p' (2210,11)-(2210,28)
                                ->: '->' (2210,28)-(2210,30)
                                field_identifier: 'mode' (2210,30)-(2210,34)
                              =: '=' (2210,35)-(2210,36)
                              identifier: 'SCAN_MODE_PROPERTY_NAME' (2210,37)-(2210,60)
                            ;: ';' (2210,60)-(2210,61)
                          return_statement (2211,11)-(2211,34)
                            return: 'return' (2211,11)-(2211,17)
                            identifier: 'SCAN_KEEP_TOKEN' (2211,18)-(2211,33)
                            ;: ';' (2211,33)-(2211,34)
                          }: '}' (2212,9)-(2212,10)
                      #endif: '#endif' (2213,1)-(2213,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (2213,8)-(2213,36)
                    if_statement (2215,9)-(2219,10)
                      if: 'if' (2215,9)-(2215,11)
                      parenthesized_expression (2215,12)-(2216,74)
                        (: '(' (2215,12)-(2215,13)
                        binary_expression (2215,13)-(2216,73)
                          binary_expression (2215,13)-(2215,51)
                            field_expression (2215,13)-(2215,34)
                              field_expression (2215,13)-(2215,29)
                                identifier: 'context_p' (2215,13)-(2215,22)
                                ->: '->' (2215,22)-(2215,24)
                                field_identifier: 'token' (2215,24)-(2215,29)
                              .: '.' (2215,29)-(2215,30)
                              field_identifier: 'type' (2215,30)-(2215,34)
                            !=: '!=' (2215,35)-(2215,37)
                            identifier: 'LEXER_LITERAL' (2215,38)-(2215,51)
                          ||: '||' (2216,13)-(2216,15)
                          binary_expression (2216,16)-(2216,73)
                            field_expression (2216,16)-(2216,50)
                              field_expression (2216,16)-(2216,45)
                                field_expression (2216,16)-(2216,32)
                                  identifier: 'context_p' (2216,16)-(2216,25)
                                  ->: '->' (2216,25)-(2216,27)
                                  field_identifier: 'token' (2216,27)-(2216,32)
                                .: '.' (2216,32)-(2216,33)
                                field_identifier: 'lit_location' (2216,33)-(2216,45)
                              .: '.' (2216,45)-(2216,46)
                              field_identifier: 'type' (2216,46)-(2216,50)
                            !=: '!=' (2216,51)-(2216,53)
                            identifier: 'LEXER_IDENT_LITERAL' (2216,54)-(2216,73)
                        ): ')' (2216,73)-(2216,74)
                      compound_statement (2217,9)-(2219,10)
                        {: '{' (2217,9)-(2217,10)
                        expression_statement (2218,11)-(2218,43)
                          call_expression (2218,11)-(2218,42)
                            identifier: 'scanner_raise_error' (2218,11)-(2218,30)
                            argument_list (2218,31)-(2218,42)
                              (: '(' (2218,31)-(2218,32)
                              identifier: 'context_p' (2218,32)-(2218,41)
                              ): ')' (2218,41)-(2218,42)
                          ;: ';' (2218,42)-(2218,43)
                        }: '}' (2219,9)-(2219,10)
                    declaration (2221,9)-(2221,99)
                      type_identifier: 'lexer_lit_location_t' (2221,9)-(2221,29)
                      init_declarator (2221,30)-(2221,98)
                        pointer_declarator (2221,30)-(2221,45)
                          *: '*' (2221,30)-(2221,31)
                          identifier: 'lit_location_p' (2221,31)-(2221,45)
                        =: '=' (2221,46)-(2221,47)
                        call_expression (2221,48)-(2221,98)
                          identifier: 'scanner_add_literal' (2221,48)-(2221,67)
                          argument_list (2221,68)-(2221,98)
                            (: '(' (2221,68)-(2221,69)
                            identifier: 'context_p' (2221,69)-(2221,78)
                            ,: ',' (2221,78)-(2221,79)
                            identifier: 'scanner_context_p' (2221,80)-(2221,97)
                            ): ')' (2221,97)-(2221,98)
                      ;: ';' (2221,98)-(2221,99)
                    expression_statement (2222,9)-(2222,58)
                      assignment_expression (2222,9)-(2222,57)
                        field_expression (2222,9)-(2222,29)
                          identifier: 'lit_location_p' (2222,9)-(2222,23)
                          ->: '->' (2222,23)-(2222,25)
                          field_identifier: 'type' (2222,25)-(2222,29)
                        |=: '|=' (2222,30)-(2222,32)
                        identifier: 'SCANNER_LITERAL_IS_LOCAL' (2222,33)-(2222,57)
                      ;: ';' (2222,57)-(2222,58)
                    expression_statement (2224,9)-(2224,38)
                      call_expression (2224,9)-(2224,37)
                        identifier: 'lexer_next_token' (2224,9)-(2224,25)
                        argument_list (2224,26)-(2224,37)
                          (: '(' (2224,26)-(2224,27)
                          identifier: 'context_p' (2224,27)-(2224,36)
                          ): ')' (2224,36)-(2224,37)
                      ;: ';' (2224,37)-(2224,38)
                    if_statement (2226,9)-(2229,10)
                      if: 'if' (2226,9)-(2226,11)
                      parenthesized_expression (2226,12)-(2226,56)
                        (: '(' (2226,12)-(2226,13)
                        binary_expression (2226,13)-(2226,55)
                          field_expression (2226,13)-(2226,34)
                            field_expression (2226,13)-(2226,29)
                              identifier: 'context_p' (2226,13)-(2226,22)
                              ->: '->' (2226,22)-(2226,24)
                              field_identifier: 'token' (2226,24)-(2226,29)
                            .: '.' (2226,29)-(2226,30)
                            field_identifier: 'type' (2226,30)-(2226,34)
                          !=: '!=' (2226,35)-(2226,37)
                          identifier: 'LEXER_RIGHT_PAREN' (2226,38)-(2226,55)
                        ): ')' (2226,55)-(2226,56)
                      compound_statement (2227,9)-(2229,10)
                        {: '{' (2227,9)-(2227,10)
                        expression_statement (2228,11)-(2228,43)
                          call_expression (2228,11)-(2228,42)
                            identifier: 'scanner_raise_error' (2228,11)-(2228,30)
                            argument_list (2228,31)-(2228,42)
                              (: '(' (2228,31)-(2228,32)
                              identifier: 'context_p' (2228,32)-(2228,41)
                              ): ')' (2228,41)-(2228,42)
                          ;: ';' (2228,42)-(2228,43)
                        }: '}' (2229,9)-(2229,10)
                    expression_statement (2231,9)-(2231,38)
                      call_expression (2231,9)-(2231,37)
                        identifier: 'lexer_next_token' (2231,9)-(2231,25)
                        argument_list (2231,26)-(2231,37)
                          (: '(' (2231,26)-(2231,27)
                          identifier: 'context_p' (2231,27)-(2231,36)
                          ): ')' (2231,36)-(2231,37)
                      ;: ';' (2231,37)-(2231,38)
                    if_statement (2233,9)-(2236,10)
                      if: 'if' (2233,9)-(2233,11)
                      parenthesized_expression (2233,12)-(2233,55)
                        (: '(' (2233,12)-(2233,13)
                        binary_expression (2233,13)-(2233,54)
                          field_expression (2233,13)-(2233,34)
                            field_expression (2233,13)-(2233,29)
                              identifier: 'context_p' (2233,13)-(2233,22)
                              ->: '->' (2233,22)-(2233,24)
                              field_identifier: 'token' (2233,24)-(2233,29)
                            .: '.' (2233,29)-(2233,30)
                            field_identifier: 'type' (2233,30)-(2233,34)
                          !=: '!=' (2233,35)-(2233,37)
                          identifier: 'LEXER_LEFT_BRACE' (2233,38)-(2233,54)
                        ): ')' (2233,54)-(2233,55)
                      compound_statement (2234,9)-(2236,10)
                        {: '{' (2234,9)-(2234,10)
                        expression_statement (2235,11)-(2235,43)
                          call_expression (2235,11)-(2235,42)
                            identifier: 'scanner_raise_error' (2235,11)-(2235,30)
                            argument_list (2235,31)-(2235,42)
                              (: '(' (2235,31)-(2235,32)
                              identifier: 'context_p' (2235,32)-(2235,41)
                              ): ')' (2235,41)-(2235,42)
                          ;: ';' (2235,42)-(2235,43)
                        }: '}' (2236,9)-(2236,10)
                    expression_statement (2238,9)-(2238,69)
                      assignment_expression (2238,9)-(2238,68)
                        field_expression (2238,9)-(2238,32)
                          identifier: 'scanner_context_p' (2238,9)-(2238,26)
                          ->: '->' (2238,26)-(2238,28)
                          field_identifier: 'mode' (2238,28)-(2238,32)
                        =: '=' (2238,33)-(2238,34)
                        identifier: 'SCAN_MODE_STATEMENT_OR_TERMINATOR' (2238,35)-(2238,68)
                      ;: ';' (2238,68)-(2238,69)
                    return_statement (2239,9)-(2239,32)
                      return: 'return' (2239,9)-(2239,15)
                      identifier: 'SCAN_NEXT_TOKEN' (2239,16)-(2239,31)
                      ;: ';' (2239,31)-(2239,32)
                    }: '}' (2240,7)-(2240,8)
                }: '}' (2241,5)-(2241,6)
            if_statement (2243,5)-(2246,6)
              if: 'if' (2243,5)-(2243,7)
              parenthesized_expression (2243,8)-(2243,76)
                (: '(' (2243,8)-(2243,9)
                binary_expression (2243,9)-(2243,75)
                  unary_expression (2243,9)-(2243,26)
                    !: '!' (2243,9)-(2243,10)
                    identifier: 'terminator_found' (2243,10)-(2243,26)
                  &&: '&&' (2243,27)-(2243,29)
                  unary_expression (2243,30)-(2243,75)
                    !: '!' (2243,30)-(2243,31)
                    parenthesized_expression (2243,31)-(2243,75)
                      (: '(' (2243,31)-(2243,32)
                      binary_expression (2243,32)-(2243,74)
                        field_expression (2243,32)-(2243,54)
                          field_expression (2243,32)-(2243,48)
                            identifier: 'context_p' (2243,32)-(2243,41)
                            ->: '->' (2243,41)-(2243,43)
                            field_identifier: 'token' (2243,43)-(2243,48)
                          .: '.' (2243,48)-(2243,49)
                          field_identifier: 'flags' (2243,49)-(2243,54)
                        &: '&' (2243,55)-(2243,56)
                        identifier: 'LEXER_WAS_NEWLINE' (2243,57)-(2243,74)
                      ): ')' (2243,74)-(2243,75)
                ): ')' (2243,75)-(2243,76)
              compound_statement (2244,5)-(2246,6)
                {: '{' (2244,5)-(2244,6)
                expression_statement (2245,7)-(2245,39)
                  call_expression (2245,7)-(2245,38)
                    identifier: 'scanner_raise_error' (2245,7)-(2245,26)
                    argument_list (2245,27)-(2245,38)
                      (: '(' (2245,27)-(2245,28)
                      identifier: 'context_p' (2245,28)-(2245,37)
                      ): ')' (2245,37)-(2245,38)
                  ;: ';' (2245,38)-(2245,39)
                }: '}' (2246,5)-(2246,6)
            expression_statement (2248,5)-(2248,51)
              assignment_expression (2248,5)-(2248,50)
                field_expression (2248,5)-(2248,28)
                  identifier: 'scanner_context_p' (2248,5)-(2248,22)
                  ->: '->' (2248,22)-(2248,24)
                  field_identifier: 'mode' (2248,24)-(2248,28)
                =: '=' (2248,29)-(2248,30)
                identifier: 'SCAN_MODE_STATEMENT' (2248,31)-(2248,50)
              ;: ';' (2248,50)-(2248,51)
            return_statement (2249,5)-(2249,28)
              return: 'return' (2249,5)-(2249,11)
              identifier: 'SCAN_KEEP_TOKEN' (2249,12)-(2249,27)
              ;: ';' (2249,27)-(2249,28)
            }: '}' (2250,3)-(2250,4)
        }: '}' (2251,1)-(2251,2)
    comment: '/* scanner_scan_statement_end */' (2251,3)-(2251,35)
    comment: '/**
 * Scan the whole source code.
 */' (2253,1)-(2255,4)
    primitive_type: 'void' (2256,1)-(2256,5)
    function_declarator (2256,6)-(2261,47)
      identifier: 'JERRY_ATTR_NOINLINE' (2256,6)-(2256,25)
      ERROR (2257,1)-(2257,17)
        identifier: 'scanner_scan_all' (2257,1)-(2257,17)
      parameter_list (2257,18)-(2261,47)
        (: '(' (2257,18)-(2257,19)
        parameter_declaration (2257,19)-(2257,46)
          type_identifier: 'parser_context_t' (2257,19)-(2257,35)
          pointer_declarator (2257,36)-(2257,46)
            *: '*' (2257,36)-(2257,37)
            identifier: 'context_p' (2257,37)-(2257,46)
        ,: ',' (2257,46)-(2257,47)
        comment: '/**< context */' (2257,48)-(2257,63)
        parameter_declaration (2258,19)-(2258,44)
          type_qualifier (2258,19)-(2258,24)
            const: 'const' (2258,19)-(2258,24)
          primitive_type: 'uint8_t' (2258,25)-(2258,32)
          pointer_declarator (2258,33)-(2258,44)
            *: '*' (2258,33)-(2258,34)
            identifier: 'arg_list_p' (2258,34)-(2258,44)
        ,: ',' (2258,44)-(2258,45)
        comment: '/**< function argument list */' (2258,46)-(2258,76)
        parameter_declaration (2259,19)-(2259,48)
          type_qualifier (2259,19)-(2259,24)
            const: 'const' (2259,19)-(2259,24)
          primitive_type: 'uint8_t' (2259,25)-(2259,32)
          pointer_declarator (2259,33)-(2259,48)
            *: '*' (2259,33)-(2259,34)
            identifier: 'arg_list_end_p' (2259,34)-(2259,48)
        ,: ',' (2259,48)-(2259,49)
        comment: '/**< end of argument list */' (2259,50)-(2259,78)
        parameter_declaration (2260,19)-(2260,42)
          type_qualifier (2260,19)-(2260,24)
            const: 'const' (2260,19)-(2260,24)
          primitive_type: 'uint8_t' (2260,25)-(2260,32)
          pointer_declarator (2260,33)-(2260,42)
            *: '*' (2260,33)-(2260,34)
            identifier: 'source_p' (2260,34)-(2260,42)
        ,: ',' (2260,42)-(2260,43)
        comment: '/**< valid UTF-8 source code */' (2260,44)-(2260,75)
        parameter_declaration (2261,19)-(2261,46)
          type_qualifier (2261,19)-(2261,24)
            const: 'const' (2261,19)-(2261,24)
          primitive_type: 'uint8_t' (2261,25)-(2261,32)
          pointer_declarator (2261,33)-(2261,46)
            *: '*' (2261,33)-(2261,34)
            identifier: 'source_end_p' (2261,34)-(2261,46)
        ): ')' (2261,46)-(2261,47)
    comment: '/**< end of source code */' (2261,48)-(2261,74)
    {: '{' (2262,1)-(2262,2)
    declaration (2263,3)-(2263,37)
      type_identifier: 'scanner_context_t' (2263,3)-(2263,20)
      identifier: 'scanner_context' (2263,21)-(2263,36)
      ;: ';' (2263,36)-(2263,37)
    preproc_if (2265,1)-(2270,7)
      #if: '#if' (2265,1)-(2265,4)
      call_expression (2265,5)-(2265,42)
        identifier: 'ENABLED' (2265,5)-(2265,12)
        argument_list (2265,13)-(2265,42)
          (: '(' (2265,13)-(2265,14)
          identifier: 'JERRY_PARSER_DUMP_BYTE_CODE' (2265,14)-(2265,41)
          ): ')' (2265,41)-(2265,42)
      
: '
' (2265,42)-(2266,1)
      if_statement (2266,3)-(2269,4)
        if: 'if' (2266,3)-(2266,5)
        parenthesized_expression (2266,6)-(2266,34)
          (: '(' (2266,6)-(2266,7)
          field_expression (2266,7)-(2266,33)
            identifier: 'context_p' (2266,7)-(2266,16)
            ->: '->' (2266,16)-(2266,18)
            field_identifier: 'is_show_opcodes' (2266,18)-(2266,33)
          ): ')' (2266,33)-(2266,34)
        compound_statement (2267,3)-(2269,4)
          {: '{' (2267,3)-(2267,4)
          expression_statement (2268,5)-(2268,54)
            call_expression (2268,5)-(2268,53)
              identifier: 'JERRY_DEBUG_MSG' (2268,5)-(2268,20)
              argument_list (2268,21)-(2268,53)
                (: '(' (2268,21)-(2268,22)
                string_literal (2268,22)-(2268,52)
                  ": '"' (2268,22)-(2268,23)
                  escape_sequence: '\n' (2268,23)-(2268,25)
                  string_content: '--- Scanning start ---' (2268,25)-(2268,47)
                  escape_sequence: '\n' (2268,47)-(2268,49)
                  escape_sequence: '\n' (2268,49)-(2268,51)
                  ": '"' (2268,51)-(2268,52)
                ): ')' (2268,52)-(2268,53)
            ;: ';' (2268,53)-(2268,54)
          }: '}' (2269,3)-(2269,4)
      #endif: '#endif' (2270,1)-(2270,7)
    comment: '/* ENABLED (JERRY_PARSER_DUMP_BYTE_CODE) */' (2270,8)-(2270,51)
    expression_statement (2272,3)-(2272,66)
      assignment_expression (2272,3)-(2272,65)
        field_expression (2272,3)-(2272,39)
          identifier: 'scanner_context' (2272,3)-(2272,18)
          .: '.' (2272,18)-(2272,19)
          field_identifier: 'context_status_flags' (2272,19)-(2272,39)
        =: '=' (2272,40)-(2272,41)
        field_expression (2272,42)-(2272,65)
          identifier: 'context_p' (2272,42)-(2272,51)
          ->: '->' (2272,51)-(2272,53)
          field_identifier: 'status_flags' (2272,53)-(2272,65)
      ;: ';' (2272,65)-(2272,66)
    expression_statement (2273,3)-(2273,59)
      assignment_expression (2273,3)-(2273,58)
        field_expression (2273,3)-(2273,31)
          identifier: 'scanner_context' (2273,3)-(2273,18)
          .: '.' (2273,18)-(2273,19)
          field_identifier: 'status_flags' (2273,19)-(2273,31)
        =: '=' (2273,32)-(2273,33)
        identifier: 'SCANNER_CONTEXT_NO_FLAGS' (2273,34)-(2273,58)
      ;: ';' (2273,58)-(2273,59)
    preproc_if (2274,1)-(2279,7)
      #if: '#if' (2274,1)-(2274,4)
      call_expression (2274,5)-(2274,29)
        identifier: 'ENABLED' (2274,5)-(2274,12)
        argument_list (2274,13)-(2274,29)
          (: '(' (2274,13)-(2274,14)
          identifier: 'JERRY_DEBUGGER' (2274,14)-(2274,28)
          ): ')' (2274,28)-(2274,29)
      
: '
' (2274,29)-(2275,1)
      if_statement (2275,3)-(2278,4)
        if: 'if' (2275,3)-(2275,5)
        parenthesized_expression (2275,6)-(2275,65)
          (: '(' (2275,6)-(2275,7)
          binary_expression (2275,7)-(2275,64)
            call_expression (2275,7)-(2275,37)
              identifier: 'JERRY_CONTEXT' (2275,7)-(2275,20)
              argument_list (2275,21)-(2275,37)
                (: '(' (2275,21)-(2275,22)
                identifier: 'debugger_flags' (2275,22)-(2275,36)
                ): ')' (2275,36)-(2275,37)
            &: '&' (2275,38)-(2275,39)
            identifier: 'JERRY_DEBUGGER_CONNECTED' (2275,40)-(2275,64)
          ): ')' (2275,64)-(2275,65)
        compound_statement (2276,3)-(2278,4)
          {: '{' (2276,3)-(2276,4)
          expression_statement (2277,5)-(2277,70)
            assignment_expression (2277,5)-(2277,69)
              field_expression (2277,5)-(2277,33)
                identifier: 'scanner_context' (2277,5)-(2277,20)
                .: '.' (2277,20)-(2277,21)
                field_identifier: 'status_flags' (2277,21)-(2277,33)
              |=: '|=' (2277,34)-(2277,36)
              identifier: 'SCANNER_CONTEXT_DEBUGGER_ENABLED' (2277,37)-(2277,69)
            ;: ';' (2277,69)-(2277,70)
          }: '}' (2278,3)-(2278,4)
      #endif: '#endif' (2279,1)-(2279,7)
    comment: '/* ENABLED (JERRY_DEBUGGER) */' (2279,8)-(2279,38)
    preproc_if (2280,1)-(2283,7)
      #if: '#if' (2280,1)-(2280,4)
      call_expression (2280,5)-(2280,27)
        identifier: 'ENABLED' (2280,5)-(2280,12)
        argument_list (2280,13)-(2280,27)
          (: '(' (2280,13)-(2280,14)
          identifier: 'JERRY_ES2015' (2280,14)-(2280,26)
          ): ')' (2280,26)-(2280,27)
      
: '
' (2280,27)-(2281,1)
      expression_statement (2281,3)-(2281,55)
        assignment_expression (2281,3)-(2281,54)
          field_expression (2281,3)-(2281,31)
            identifier: 'scanner_context' (2281,3)-(2281,18)
            .: '.' (2281,18)-(2281,19)
            field_identifier: 'binding_type' (2281,19)-(2281,31)
          =: '=' (2281,32)-(2281,33)
          identifier: 'SCANNER_BINDING_NONE' (2281,34)-(2281,54)
        ;: ';' (2281,54)-(2281,55)
      expression_statement (2282,3)-(2282,48)
        assignment_expression (2282,3)-(2282,47)
          field_expression (2282,3)-(2282,40)
            identifier: 'scanner_context' (2282,3)-(2282,18)
            .: '.' (2282,18)-(2282,19)
            field_identifier: 'active_binding_list_p' (2282,19)-(2282,40)
          =: '=' (2282,41)-(2282,42)
          null (2282,43)-(2282,47)
            NULL: 'NULL' (2282,43)-(2282,47)
        ;: ';' (2282,47)-(2282,48)
      #endif: '#endif' (2283,1)-(2283,7)
    comment: '/* ENABLED (JERRY_ES2015) */' (2283,8)-(2283,36)
    expression_statement (2284,3)-(2284,48)
      assignment_expression (2284,3)-(2284,47)
        field_expression (2284,3)-(2284,40)
          identifier: 'scanner_context' (2284,3)-(2284,18)
          .: '.' (2284,18)-(2284,19)
          field_identifier: 'active_literal_pool_p' (2284,19)-(2284,40)
        =: '=' (2284,41)-(2284,42)
        null (2284,43)-(2284,47)
          NULL: 'NULL' (2284,43)-(2284,47)
      ;: ';' (2284,47)-(2284,48)
    expression_statement (2285,3)-(2285,62)
      assignment_expression (2285,3)-(2285,61)
        field_expression (2285,3)-(2285,54)
          field_expression (2285,3)-(2285,42)
            identifier: 'scanner_context' (2285,3)-(2285,18)
            .: '.' (2285,18)-(2285,19)
            field_identifier: 'active_switch_statement' (2285,19)-(2285,42)
          .: '.' (2285,42)-(2285,43)
          field_identifier: 'last_case_p' (2285,43)-(2285,54)
        =: '=' (2285,55)-(2285,56)
        null (2285,57)-(2285,61)
          NULL: 'NULL' (2285,57)-(2285,61)
      ;: ';' (2285,61)-(2285,62)
    expression_statement (2286,3)-(2286,42)
      assignment_expression (2286,3)-(2286,41)
        field_expression (2286,3)-(2286,34)
          identifier: 'scanner_context' (2286,3)-(2286,18)
          .: '.' (2286,18)-(2286,19)
          field_identifier: 'end_arguments_p' (2286,19)-(2286,34)
        =: '=' (2286,35)-(2286,36)
        null (2286,37)-(2286,41)
          NULL: 'NULL' (2286,37)-(2286,41)
      ;: ';' (2286,41)-(2286,42)
    preproc_if (2287,1)-(2289,7)
      #if: '#if' (2287,1)-(2287,4)
      call_expression (2287,5)-(2287,27)
        identifier: 'ENABLED' (2287,5)-(2287,12)
        argument_list (2287,13)-(2287,27)
          (: '(' (2287,13)-(2287,14)
          identifier: 'JERRY_ES2015' (2287,14)-(2287,26)
          ): ')' (2287,26)-(2287,27)
      
: '
' (2287,27)-(2288,1)
      expression_statement (2288,3)-(2288,41)
        assignment_expression (2288,3)-(2288,40)
          field_expression (2288,3)-(2288,33)
            identifier: 'scanner_context' (2288,3)-(2288,18)
            .: '.' (2288,18)-(2288,19)
            field_identifier: 'async_source_p' (2288,19)-(2288,33)
          =: '=' (2288,34)-(2288,35)
          null (2288,36)-(2288,40)
            NULL: 'NULL' (2288,36)-(2288,40)
        ;: ';' (2288,40)-(2288,41)
      #endif: '#endif' (2289,1)-(2289,7)
    comment: '/* ENABLED (JERRY_ES2015) */' (2289,8)-(2289,36)
    comment: '/* This assignment must be here because of Apple compilers. */' (2291,3)-(2291,65)
    expression_statement (2292,3)-(2292,53)
      assignment_expression (2292,3)-(2292,52)
        field_expression (2292,3)-(2292,33)
          field_expression (2292,3)-(2292,15)
            identifier: 'context_p' (2292,3)-(2292,12)
            ->: '->' (2292,12)-(2292,14)
            field_identifier: 'u' (2292,14)-(2292,15)
          .: '.' (2292,15)-(2292,16)
          field_identifier: 'scanner_context_p' (2292,16)-(2292,33)
        =: '=' (2292,34)-(2292,35)
        pointer_expression (2292,36)-(2292,52)
          &: '&' (2292,36)-(2292,37)
          identifier: 'scanner_context' (2292,37)-(2292,52)
      ;: ';' (2292,52)-(2292,53)
    expression_statement (2294,3)-(2294,33)
      call_expression (2294,3)-(2294,32)
        identifier: 'parser_stack_init' (2294,3)-(2294,20)
        argument_list (2294,21)-(2294,32)
          (: '(' (2294,21)-(2294,22)
          identifier: 'context_p' (2294,22)-(2294,31)
          ): ')' (2294,31)-(2294,32)
      ;: ';' (2294,32)-(2294,33)
    expression_statement (2296,3)-(2296,37)
      call_expression (2296,3)-(2296,37)
        identifier: 'PARSER_TRY' (2296,3)-(2296,13)
        argument_list (2296,14)-(2296,37)
          (: '(' (2296,14)-(2296,15)
          field_expression (2296,15)-(2296,36)
            identifier: 'context_p' (2296,15)-(2296,24)
            ->: '->' (2296,24)-(2296,26)
            field_identifier: 'try_buffer' (2296,26)-(2296,36)
          ): ')' (2296,36)-(2296,37)
    compound_statement (2297,3)-(3494,2)
      {: '{' (2297,3)-(2297,4)
      expression_statement (2298,5)-(2298,25)
        assignment_expression (2298,5)-(2298,24)
          field_expression (2298,5)-(2298,20)
            identifier: 'context_p' (2298,5)-(2298,14)
            ->: '->' (2298,14)-(2298,16)
            field_identifier: 'line' (2298,16)-(2298,20)
          =: '=' (2298,21)-(2298,22)
          number_literal: '1' (2298,23)-(2298,24)
        ;: ';' (2298,24)-(2298,25)
      expression_statement (2299,5)-(2299,27)
        assignment_expression (2299,5)-(2299,26)
          field_expression (2299,5)-(2299,22)
            identifier: 'context_p' (2299,5)-(2299,14)
            ->: '->' (2299,14)-(2299,16)
            field_identifier: 'column' (2299,16)-(2299,22)
          =: '=' (2299,23)-(2299,24)
          number_literal: '1' (2299,25)-(2299,26)
        ;: ';' (2299,26)-(2299,27)
      if_statement (2301,5)-(2346,6)
        if: 'if' (2301,5)-(2301,7)
        parenthesized_expression (2301,8)-(2301,28)
          (: '(' (2301,8)-(2301,9)
          binary_expression (2301,9)-(2301,27)
            identifier: 'arg_list_p' (2301,9)-(2301,19)
            ==: '==' (2301,20)-(2301,22)
            null (2301,23)-(2301,27)
              NULL: 'NULL' (2301,23)-(2301,27)
          ): ')' (2301,27)-(2301,28)
        compound_statement (2302,5)-(2320,6)
          {: '{' (2302,5)-(2302,6)
          expression_statement (2303,7)-(2303,38)
            assignment_expression (2303,7)-(2303,37)
              field_expression (2303,7)-(2303,26)
                identifier: 'context_p' (2303,7)-(2303,16)
                ->: '->' (2303,16)-(2303,18)
                field_identifier: 'source_p' (2303,18)-(2303,26)
              =: '=' (2303,27)-(2303,28)
              identifier: 'source_p' (2303,29)-(2303,37)
            ;: ';' (2303,37)-(2303,38)
          expression_statement (2304,7)-(2304,46)
            assignment_expression (2304,7)-(2304,45)
              field_expression (2304,7)-(2304,30)
                identifier: 'context_p' (2304,7)-(2304,16)
                ->: '->' (2304,16)-(2304,18)
                field_identifier: 'source_end_p' (2304,18)-(2304,30)
              =: '=' (2304,31)-(2304,32)
              identifier: 'source_end_p' (2304,33)-(2304,45)
            ;: ';' (2304,45)-(2304,46)
          declaration (2306,7)-(2306,111)
            primitive_type: 'uint16_t' (2306,7)-(2306,15)
            init_declarator (2306,16)-(2306,110)
              identifier: 'status_flags' (2306,16)-(2306,28)
              =: '=' (2306,29)-(2306,30)
              binary_expression (2306,31)-(2306,110)
                identifier: 'SCANNER_LITERAL_POOL_FUNCTION_WITHOUT_ARGUMENTS' (2306,31)-(2306,78)
                |: '|' (2306,79)-(2306,80)
                identifier: 'SCANNER_LITERAL_POOL_CAN_EVAL' (2306,81)-(2306,110)
            ;: ';' (2306,110)-(2306,111)
          if_statement (2308,7)-(2311,8)
            if: 'if' (2308,7)-(2308,9)
            parenthesized_expression (2308,10)-(2308,54)
              (: '(' (2308,10)-(2308,11)
              binary_expression (2308,11)-(2308,53)
                field_expression (2308,11)-(2308,34)
                  identifier: 'context_p' (2308,11)-(2308,20)
                  ->: '->' (2308,20)-(2308,22)
                  field_identifier: 'status_flags' (2308,22)-(2308,34)
                &: '&' (2308,35)-(2308,36)
                identifier: 'PARSER_IS_STRICT' (2308,37)-(2308,53)
              ): ')' (2308,53)-(2308,54)
            compound_statement (2309,7)-(2311,8)
              {: '{' (2309,7)-(2309,8)
              expression_statement (2310,9)-(2310,56)
                assignment_expression (2310,9)-(2310,55)
                  identifier: 'status_flags' (2310,9)-(2310,21)
                  |=: '|=' (2310,22)-(2310,24)
                  identifier: 'SCANNER_LITERAL_POOL_IS_STRICT' (2310,25)-(2310,55)
                ;: ';' (2310,55)-(2310,56)
              }: '}' (2311,7)-(2311,8)
          declaration (2313,7)-(2313,118)
            type_identifier: 'scanner_literal_pool_t' (2313,7)-(2313,29)
            init_declarator (2313,30)-(2313,117)
              pointer_declarator (2313,30)-(2313,45)
                *: '*' (2313,30)-(2313,31)
                identifier: 'literal_pool_p' (2313,31)-(2313,45)
              =: '=' (2313,46)-(2313,47)
              call_expression (2313,48)-(2313,117)
                identifier: 'scanner_push_literal_pool' (2313,48)-(2313,73)
                argument_list (2313,74)-(2313,117)
                  (: '(' (2313,74)-(2313,75)
                  identifier: 'context_p' (2313,75)-(2313,84)
                  ,: ',' (2313,84)-(2313,85)
                  pointer_expression (2313,86)-(2313,102)
                    &: '&' (2313,86)-(2313,87)
                    identifier: 'scanner_context' (2313,87)-(2313,102)
                  ,: ',' (2313,102)-(2313,103)
                  identifier: 'status_flags' (2313,104)-(2313,116)
                  ): ')' (2313,116)-(2313,117)
            ;: ';' (2313,117)-(2313,118)
          expression_statement (2314,7)-(2314,43)
            assignment_expression (2314,7)-(2314,42)
              field_expression (2314,7)-(2314,31)
                identifier: 'literal_pool_p' (2314,7)-(2314,21)
                ->: '->' (2314,21)-(2314,23)
                field_identifier: 'source_p' (2314,23)-(2314,31)
              =: '=' (2314,32)-(2314,33)
              identifier: 'source_p' (2314,34)-(2314,42)
            ;: ';' (2314,42)-(2314,43)
          expression_statement (2316,7)-(2316,62)
            call_expression (2316,7)-(2316,61)
              identifier: 'parser_stack_push_uint8' (2316,7)-(2316,30)
              argument_list (2316,31)-(2316,61)
                (: '(' (2316,31)-(2316,32)
                identifier: 'context_p' (2316,32)-(2316,41)
                ,: ',' (2316,41)-(2316,42)
                identifier: 'SCAN_STACK_SCRIPT' (2316,43)-(2316,60)
                ): ')' (2316,60)-(2316,61)
            ;: ';' (2316,61)-(2316,62)
          expression_statement (2318,7)-(2318,36)
            call_expression (2318,7)-(2318,35)
              identifier: 'lexer_next_token' (2318,7)-(2318,23)
              argument_list (2318,24)-(2318,35)
                (: '(' (2318,24)-(2318,25)
                identifier: 'context_p' (2318,25)-(2318,34)
                ): ')' (2318,34)-(2318,35)
            ;: ';' (2318,35)-(2318,36)
          expression_statement (2319,7)-(2319,62)
            call_expression (2319,7)-(2319,61)
              identifier: 'scanner_check_directives' (2319,7)-(2319,31)
              argument_list (2319,32)-(2319,61)
                (: '(' (2319,32)-(2319,33)
                identifier: 'context_p' (2319,33)-(2319,42)
                ,: ',' (2319,42)-(2319,43)
                pointer_expression (2319,44)-(2319,60)
                  &: '&' (2319,44)-(2319,45)
                  identifier: 'scanner_context' (2319,45)-(2319,60)
                ): ')' (2319,60)-(2319,61)
            ;: ';' (2319,61)-(2319,62)
          }: '}' (2320,5)-(2320,6)
        else_clause (2321,5)-(2346,6)
          else: 'else' (2321,5)-(2321,9)
          compound_statement (2322,5)-(2346,6)
            {: '{' (2322,5)-(2322,6)
            expression_statement (2323,7)-(2323,40)
              assignment_expression (2323,7)-(2323,39)
                field_expression (2323,7)-(2323,26)
                  identifier: 'context_p' (2323,7)-(2323,16)
                  ->: '->' (2323,16)-(2323,18)
                  field_identifier: 'source_p' (2323,18)-(2323,26)
                =: '=' (2323,27)-(2323,28)
                identifier: 'arg_list_p' (2323,29)-(2323,39)
              ;: ';' (2323,39)-(2323,40)
            expression_statement (2324,7)-(2324,48)
              assignment_expression (2324,7)-(2324,47)
                field_expression (2324,7)-(2324,30)
                  identifier: 'context_p' (2324,7)-(2324,16)
                  ->: '->' (2324,16)-(2324,18)
                  field_identifier: 'source_end_p' (2324,18)-(2324,30)
                =: '=' (2324,31)-(2324,32)
                identifier: 'arg_list_end_p' (2324,33)-(2324,47)
              ;: ';' (2324,47)-(2324,48)
            declaration (2326,7)-(2326,61)
              primitive_type: 'uint16_t' (2326,7)-(2326,15)
              init_declarator (2326,16)-(2326,60)
                identifier: 'status_flags' (2326,16)-(2326,28)
                =: '=' (2326,29)-(2326,30)
                identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (2326,31)-(2326,60)
              ;: ';' (2326,60)-(2326,61)
            if_statement (2328,7)-(2331,8)
              if: 'if' (2328,7)-(2328,9)
              parenthesized_expression (2328,10)-(2328,54)
                (: '(' (2328,10)-(2328,11)
                binary_expression (2328,11)-(2328,53)
                  field_expression (2328,11)-(2328,34)
                    identifier: 'context_p' (2328,11)-(2328,20)
                    ->: '->' (2328,20)-(2328,22)
                    field_identifier: 'status_flags' (2328,22)-(2328,34)
                  &: '&' (2328,35)-(2328,36)
                  identifier: 'PARSER_IS_STRICT' (2328,37)-(2328,53)
                ): ')' (2328,53)-(2328,54)
              compound_statement (2329,7)-(2331,8)
                {: '{' (2329,7)-(2329,8)
                expression_statement (2330,9)-(2330,56)
                  assignment_expression (2330,9)-(2330,55)
                    identifier: 'status_flags' (2330,9)-(2330,21)
                    |=: '|=' (2330,22)-(2330,24)
                    identifier: 'SCANNER_LITERAL_POOL_IS_STRICT' (2330,25)-(2330,55)
                  ;: ';' (2330,55)-(2330,56)
                }: '}' (2331,7)-(2331,8)
            preproc_if (2333,1)-(2338,7)
              #if: '#if' (2333,1)-(2333,4)
              call_expression (2333,5)-(2333,27)
                identifier: 'ENABLED' (2333,5)-(2333,12)
                argument_list (2333,13)-(2333,27)
                  (: '(' (2333,13)-(2333,14)
                  identifier: 'JERRY_ES2015' (2333,14)-(2333,26)
                  ): ')' (2333,26)-(2333,27)
              
: '
' (2333,27)-(2334,1)
              if_statement (2334,7)-(2337,8)
                if: 'if' (2334,7)-(2334,9)
                parenthesized_expression (2334,10)-(2334,66)
                  (: '(' (2334,10)-(2334,11)
                  binary_expression (2334,11)-(2334,65)
                    field_expression (2334,11)-(2334,34)
                      identifier: 'context_p' (2334,11)-(2334,20)
                      ->: '->' (2334,20)-(2334,22)
                      field_identifier: 'status_flags' (2334,22)-(2334,34)
                    &: '&' (2334,35)-(2334,36)
                    identifier: 'PARSER_IS_GENERATOR_FUNCTION' (2334,37)-(2334,65)
                  ): ')' (2334,65)-(2334,66)
                compound_statement (2335,7)-(2337,8)
                  {: '{' (2335,7)-(2335,8)
                  expression_statement (2336,9)-(2336,56)
                    assignment_expression (2336,9)-(2336,55)
                      identifier: 'status_flags' (2336,9)-(2336,21)
                      |=: '|=' (2336,22)-(2336,24)
                      identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (2336,25)-(2336,55)
                    ;: ';' (2336,55)-(2336,56)
                  }: '}' (2337,7)-(2337,8)
              #endif: '#endif' (2338,1)-(2338,7)
            comment: '/* ENABLED (JERRY_ES2015) */' (2338,8)-(2338,36)
            expression_statement (2340,7)-(2340,77)
              call_expression (2340,7)-(2340,76)
                identifier: 'scanner_push_literal_pool' (2340,7)-(2340,32)
                argument_list (2340,33)-(2340,76)
                  (: '(' (2340,33)-(2340,34)
                  identifier: 'context_p' (2340,34)-(2340,43)
                  ,: ',' (2340,43)-(2340,44)
                  pointer_expression (2340,45)-(2340,61)
                    &: '&' (2340,45)-(2340,46)
                    identifier: 'scanner_context' (2340,46)-(2340,61)
                  ,: ',' (2340,61)-(2340,62)
                  identifier: 'status_flags' (2340,63)-(2340,75)
                  ): ')' (2340,75)-(2340,76)
              ;: ';' (2340,76)-(2340,77)
            expression_statement (2341,7)-(2341,59)
              assignment_expression (2341,7)-(2341,58)
                field_expression (2341,7)-(2341,27)
                  identifier: 'scanner_context' (2341,7)-(2341,22)
                  .: '.' (2341,22)-(2341,23)
                  field_identifier: 'mode' (2341,23)-(2341,27)
                =: '=' (2341,28)-(2341,29)
                identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (2341,30)-(2341,58)
              ;: ';' (2341,58)-(2341,59)
            expression_statement (2342,7)-(2342,71)
              call_expression (2342,7)-(2342,70)
                identifier: 'parser_stack_push_uint8' (2342,7)-(2342,30)
                argument_list (2342,31)-(2342,70)
                  (: '(' (2342,31)-(2342,32)
                  identifier: 'context_p' (2342,32)-(2342,41)
                  ,: ',' (2342,41)-(2342,42)
                  identifier: 'SCAN_STACK_SCRIPT_FUNCTION' (2342,43)-(2342,69)
                  ): ')' (2342,69)-(2342,70)
              ;: ';' (2342,70)-(2342,71)
            comment: '/* Faking the first token. */' (2344,7)-(2344,36)
            expression_statement (2345,7)-(2345,48)
              assignment_expression (2345,7)-(2345,47)
                field_expression (2345,7)-(2345,28)
                  field_expression (2345,7)-(2345,23)
                    identifier: 'context_p' (2345,7)-(2345,16)
                    ->: '->' (2345,16)-(2345,18)
                    field_identifier: 'token' (2345,18)-(2345,23)
                  .: '.' (2345,23)-(2345,24)
                  field_identifier: 'type' (2345,24)-(2345,28)
                =: '=' (2345,29)-(2345,30)
                identifier: 'LEXER_LEFT_PAREN' (2345,31)-(2345,47)
              ;: ';' (2345,47)-(2345,48)
            }: '}' (2346,5)-(2346,6)
      while_statement (2348,5)-(3159,4)
        while: 'while' (2348,5)-(2348,10)
        parenthesized_expression (2348,11)-(2348,17)
          (: '(' (2348,11)-(2348,12)
          true: 'true' (2348,12)-(2348,16)
          ): ')' (2348,16)-(2348,17)
        compound_statement (2349,5)-(3159,4)
          {: '{' (2349,5)-(2349,6)
          declaration (2350,7)-(2350,76)
            type_identifier: 'lexer_token_type_t' (2350,7)-(2350,25)
            init_declarator (2350,26)-(2350,75)
              identifier: 'type' (2350,26)-(2350,30)
              =: '=' (2350,31)-(2350,32)
              cast_expression (2350,33)-(2350,75)
                (: '(' (2350,33)-(2350,34)
                type_descriptor (2350,34)-(2350,52)
                  type_identifier: 'lexer_token_type_t' (2350,34)-(2350,52)
                ): ')' (2350,52)-(2350,53)
                field_expression (2350,54)-(2350,75)
                  field_expression (2350,54)-(2350,70)
                    identifier: 'context_p' (2350,54)-(2350,63)
                    ->: '->' (2350,63)-(2350,65)
                    field_identifier: 'token' (2350,65)-(2350,70)
                  .: '.' (2350,70)-(2350,71)
                  field_identifier: 'type' (2350,71)-(2350,75)
            ;: ';' (2350,75)-(2350,76)
          declaration (2351,7)-(2351,86)
            type_identifier: 'scan_stack_modes_t' (2351,7)-(2351,25)
            init_declarator (2351,26)-(2351,85)
              identifier: 'stack_top' (2351,26)-(2351,35)
              =: '=' (2351,36)-(2351,37)
              cast_expression (2351,38)-(2351,85)
                (: '(' (2351,38)-(2351,39)
                type_descriptor (2351,39)-(2351,57)
                  type_identifier: 'scan_stack_modes_t' (2351,39)-(2351,57)
                ): ')' (2351,57)-(2351,58)
                field_expression (2351,59)-(2351,85)
                  identifier: 'context_p' (2351,59)-(2351,68)
                  ->: '->' (2351,68)-(2351,70)
                  field_identifier: 'stack_top_uint8' (2351,70)-(2351,85)
            ;: ';' (2351,85)-(2351,86)
          switch_statement (2353,7)-(3140,6)
            switch: 'switch' (2353,7)-(2353,13)
            parenthesized_expression (2353,14)-(2353,36)
              (: '(' (2353,14)-(2353,15)
              field_expression (2353,15)-(2353,35)
                identifier: 'scanner_context' (2353,15)-(2353,30)
                .: '.' (2353,30)-(2353,31)
                field_identifier: 'mode' (2353,31)-(2353,35)
              ): ')' (2353,35)-(2353,36)
            compound_statement (2354,7)-(3140,6)
              {: '{' (2354,7)-(2354,8)
              case_statement (2355,9)-(2364,10)
                case: 'case' (2355,9)-(2355,13)
                identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (2355,14)-(2355,42)
                :: ':' (2355,42)-(2355,43)
                compound_statement (2356,9)-(2364,10)
                  {: '{' (2356,9)-(2356,10)
                  if_statement (2357,11)-(2362,12)
                    if: 'if' (2357,11)-(2357,13)
                    parenthesized_expression (2357,14)-(2359,49)
                      (: '(' (2357,14)-(2357,15)
                      binary_expression (2357,15)-(2359,48)
                        binary_expression (2357,15)-(2358,40)
                          binary_expression (2357,15)-(2357,32)
                            identifier: 'type' (2357,15)-(2357,19)
                            ==: '==' (2357,20)-(2357,22)
                            identifier: 'LEXER_ADD' (2357,23)-(2357,32)
                          ||: '||' (2358,15)-(2358,17)
                          binary_expression (2358,18)-(2358,40)
                            identifier: 'type' (2358,18)-(2358,22)
                            ==: '==' (2358,23)-(2358,25)
                            identifier: 'LEXER_SUBTRACT' (2358,26)-(2358,40)
                        ||: '||' (2359,15)-(2359,17)
                        call_expression (2359,18)-(2359,48)
                          identifier: 'LEXER_IS_UNARY_OP_TOKEN' (2359,18)-(2359,41)
                          argument_list (2359,42)-(2359,48)
                            (: '(' (2359,42)-(2359,43)
                            identifier: 'type' (2359,43)-(2359,47)
                            ): ')' (2359,47)-(2359,48)
                      ): ')' (2359,48)-(2359,49)
                    compound_statement (2360,11)-(2362,12)
                      {: '{' (2360,11)-(2360,12)
                      break_statement (2361,13)-(2361,19)
                        break: 'break' (2361,13)-(2361,18)
                        ;: ';' (2361,18)-(2361,19)
                      }: '}' (2362,11)-(2362,12)
                  comment: '/* FALLTHRU */' (2363,11)-(2363,25)
                  }: '}' (2364,9)-(2364,10)
              case_statement (2365,9)-(2372,10)
                case: 'case' (2365,9)-(2365,13)
                identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_AFTER_NEW' (2365,14)-(2365,52)
                :: ':' (2365,52)-(2365,53)
                compound_statement (2366,9)-(2372,10)
                  {: '{' (2366,9)-(2366,10)
                  if_statement (2367,11)-(2370,12)
                    if: 'if' (2367,11)-(2367,13)
                    parenthesized_expression (2367,14)-(2367,113)
                      (: '(' (2367,14)-(2367,15)
                      binary_expression (2367,15)-(2367,112)
                        call_expression (2367,15)-(2367,93)
                          identifier: 'scanner_scan_primary_expression' (2367,15)-(2367,46)
                          argument_list (2367,47)-(2367,93)
                            (: '(' (2367,47)-(2367,48)
                            identifier: 'context_p' (2367,48)-(2367,57)
                            ,: ',' (2367,57)-(2367,58)
                            pointer_expression (2367,59)-(2367,75)
                              &: '&' (2367,59)-(2367,60)
                              identifier: 'scanner_context' (2367,60)-(2367,75)
                            ,: ',' (2367,75)-(2367,76)
                            identifier: 'type' (2367,77)-(2367,81)
                            ,: ',' (2367,81)-(2367,82)
                            identifier: 'stack_top' (2367,83)-(2367,92)
                            ): ')' (2367,92)-(2367,93)
                        !=: '!=' (2367,94)-(2367,96)
                        identifier: 'SCAN_NEXT_TOKEN' (2367,97)-(2367,112)
                      ): ')' (2367,112)-(2367,113)
                    compound_statement (2368,11)-(2370,12)
                      {: '{' (2368,11)-(2368,12)
                      continue_statement (2369,13)-(2369,22)
                        continue: 'continue' (2369,13)-(2369,21)
                        ;: ';' (2369,21)-(2369,22)
                      }: '}' (2370,11)-(2370,12)
                  break_statement (2371,11)-(2371,17)
                    break: 'break' (2371,11)-(2371,16)
                    ;: ';' (2371,16)-(2371,17)
                  }: '}' (2372,9)-(2372,10)
              preproc_if (2373,1)-(2508,7)
                #if: '#if' (2373,1)-(2373,4)
                call_expression (2373,5)-(2373,27)
                  identifier: 'ENABLED' (2373,5)-(2373,12)
                  argument_list (2373,13)-(2373,27)
                    (: '(' (2373,13)-(2373,14)
                    identifier: 'JERRY_ES2015' (2373,14)-(2373,26)
                    ): ')' (2373,26)-(2373,27)
                
: '
' (2373,27)-(2374,1)
                case_statement (2374,9)-(2389,10)
                  case: 'case' (2374,9)-(2374,13)
                  identifier: 'SCAN_MODE_CLASS_DECLARATION' (2374,14)-(2374,41)
                  :: ':' (2374,41)-(2374,42)
                  compound_statement (2375,9)-(2389,10)
                    {: '{' (2375,9)-(2375,10)
                    if_statement (2376,11)-(2385,12)
                      if: 'if' (2376,11)-(2376,13)
                      parenthesized_expression (2376,14)-(2376,59)
                        (: '(' (2376,14)-(2376,15)
                        binary_expression (2376,15)-(2376,58)
                          field_expression (2376,15)-(2376,36)
                            field_expression (2376,15)-(2376,31)
                              identifier: 'context_p' (2376,15)-(2376,24)
                              ->: '->' (2376,24)-(2376,26)
                              field_identifier: 'token' (2376,26)-(2376,31)
                            .: '.' (2376,31)-(2376,32)
                            field_identifier: 'type' (2376,32)-(2376,36)
                          ==: '==' (2376,37)-(2376,39)
                          identifier: 'LEXER_KEYW_EXTENDS' (2376,40)-(2376,58)
                        ): ')' (2376,58)-(2376,59)
                      compound_statement (2377,11)-(2381,12)
                        {: '{' (2377,11)-(2377,12)
                        expression_statement (2378,13)-(2378,75)
                          call_expression (2378,13)-(2378,74)
                            identifier: 'parser_stack_push_uint8' (2378,13)-(2378,36)
                            argument_list (2378,37)-(2378,74)
                              (: '(' (2378,37)-(2378,38)
                              identifier: 'context_p' (2378,38)-(2378,47)
                              ,: ',' (2378,47)-(2378,48)
                              identifier: 'SCAN_STACK_CLASS_EXTENDS' (2378,49)-(2378,73)
                              ): ')' (2378,73)-(2378,74)
                          ;: ';' (2378,74)-(2378,75)
                        expression_statement (2379,13)-(2379,65)
                          assignment_expression (2379,13)-(2379,64)
                            field_expression (2379,13)-(2379,33)
                              identifier: 'scanner_context' (2379,13)-(2379,28)
                              .: '.' (2379,28)-(2379,29)
                              field_identifier: 'mode' (2379,29)-(2379,33)
                            =: '=' (2379,34)-(2379,35)
                            identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (2379,36)-(2379,64)
                          ;: ';' (2379,64)-(2379,65)
                        break_statement (2380,13)-(2380,19)
                          break: 'break' (2380,13)-(2380,18)
                          ;: ';' (2380,18)-(2380,19)
                        }: '}' (2381,11)-(2381,12)
                      else_clause (2382,11)-(2385,12)
                        else: 'else' (2382,11)-(2382,15)
                        if_statement (2382,16)-(2385,12)
                          if: 'if' (2382,16)-(2382,18)
                          parenthesized_expression (2382,19)-(2382,62)
                            (: '(' (2382,19)-(2382,20)
                            binary_expression (2382,20)-(2382,61)
                              field_expression (2382,20)-(2382,41)
                                field_expression (2382,20)-(2382,36)
                                  identifier: 'context_p' (2382,20)-(2382,29)
                                  ->: '->' (2382,29)-(2382,31)
                                  field_identifier: 'token' (2382,31)-(2382,36)
                                .: '.' (2382,36)-(2382,37)
                                field_identifier: 'type' (2382,37)-(2382,41)
                              !=: '!=' (2382,42)-(2382,44)
                              identifier: 'LEXER_LEFT_BRACE' (2382,45)-(2382,61)
                            ): ')' (2382,61)-(2382,62)
                          compound_statement (2383,11)-(2385,12)
                            {: '{' (2383,11)-(2383,12)
                            expression_statement (2384,13)-(2384,45)
                              call_expression (2384,13)-(2384,44)
                                identifier: 'scanner_raise_error' (2384,13)-(2384,32)
                                argument_list (2384,33)-(2384,44)
                                  (: '(' (2384,33)-(2384,34)
                                  identifier: 'context_p' (2384,34)-(2384,43)
                                  ): ')' (2384,43)-(2384,44)
                              ;: ';' (2384,44)-(2384,45)
                            }: '}' (2385,11)-(2385,12)
                    expression_statement (2387,11)-(2387,57)
                      assignment_expression (2387,11)-(2387,56)
                        field_expression (2387,11)-(2387,31)
                          identifier: 'scanner_context' (2387,11)-(2387,26)
                          .: '.' (2387,26)-(2387,27)
                          field_identifier: 'mode' (2387,27)-(2387,31)
                        =: '=' (2387,32)-(2387,33)
                        identifier: 'SCAN_MODE_CLASS_METHOD' (2387,34)-(2387,56)
                      ;: ';' (2387,56)-(2387,57)
                    comment: '/* FALLTHRU */' (2388,11)-(2388,25)
                    }: '}' (2389,9)-(2389,10)
                case_statement (2390,9)-(2507,10)
                  case: 'case' (2390,9)-(2390,13)
                  identifier: 'SCAN_MODE_CLASS_METHOD' (2390,14)-(2390,36)
                  :: ':' (2390,36)-(2390,37)
                  compound_statement (2391,9)-(2507,10)
                    {: '{' (2391,9)-(2391,10)
                    expression_statement (2392,11)-(2393,80)
                      call_expression (2392,11)-(2393,79)
                        identifier: 'JERRY_ASSERT' (2392,11)-(2392,23)
                        argument_list (2392,24)-(2393,79)
                          (: '(' (2392,24)-(2392,25)
                          binary_expression (2392,25)-(2393,78)
                            binary_expression (2392,25)-(2392,75)
                              identifier: 'stack_top' (2392,25)-(2392,34)
                              ==: '==' (2392,35)-(2392,37)
                              identifier: 'SCAN_STACK_IMPLICIT_CLASS_CONSTRUCTOR' (2392,38)-(2392,75)
                            ||: '||' (2393,25)-(2393,27)
                            binary_expression (2393,28)-(2393,78)
                              identifier: 'stack_top' (2393,28)-(2393,37)
                              ==: '==' (2393,38)-(2393,40)
                              identifier: 'SCAN_STACK_EXPLICIT_CLASS_CONSTRUCTOR' (2393,41)-(2393,78)
                          ): ')' (2393,78)-(2393,79)
                      ;: ';' (2393,79)-(2393,80)
                    expression_statement (2395,11)-(2395,51)
                      call_expression (2395,11)-(2395,50)
                        identifier: 'lexer_skip_empty_statements' (2395,11)-(2395,38)
                        argument_list (2395,39)-(2395,50)
                          (: '(' (2395,39)-(2395,40)
                          identifier: 'context_p' (2395,40)-(2395,49)
                          ): ')' (2395,49)-(2395,50)
                      ;: ';' (2395,50)-(2395,51)
                    expression_statement (2397,11)-(2397,45)
                      call_expression (2397,11)-(2397,44)
                        identifier: 'lexer_scan_identifier' (2397,11)-(2397,32)
                        argument_list (2397,33)-(2397,44)
                          (: '(' (2397,33)-(2397,34)
                          identifier: 'context_p' (2397,34)-(2397,43)
                          ): ')' (2397,43)-(2397,44)
                      ;: ';' (2397,44)-(2397,45)
                    if_statement (2399,11)-(2424,12)
                      if: 'if' (2399,11)-(2399,13)
                      parenthesized_expression (2399,14)-(2399,58)
                        (: '(' (2399,14)-(2399,15)
                        binary_expression (2399,15)-(2399,57)
                          field_expression (2399,15)-(2399,36)
                            field_expression (2399,15)-(2399,31)
                              identifier: 'context_p' (2399,15)-(2399,24)
                              ->: '->' (2399,24)-(2399,26)
                              field_identifier: 'token' (2399,26)-(2399,31)
                            .: '.' (2399,31)-(2399,32)
                            field_identifier: 'type' (2399,32)-(2399,36)
                          ==: '==' (2399,37)-(2399,39)
                          identifier: 'LEXER_RIGHT_BRACE' (2399,40)-(2399,57)
                        ): ')' (2399,57)-(2399,58)
                      compound_statement (2400,11)-(2424,12)
                        {: '{' (2400,11)-(2400,12)
                        declaration (2401,13)-(2401,49)
                          type_identifier: 'scanner_source_start_t' (2401,13)-(2401,35)
                          identifier: 'source_start' (2401,36)-(2401,48)
                          ;: ';' (2401,48)-(2401,49)
                        expression_statement (2403,13)-(2403,48)
                          call_expression (2403,13)-(2403,47)
                            identifier: 'parser_stack_pop_uint8' (2403,13)-(2403,35)
                            argument_list (2403,36)-(2403,47)
                              (: '(' (2403,36)-(2403,37)
                              identifier: 'context_p' (2403,37)-(2403,46)
                              ): ')' (2403,46)-(2403,47)
                          ;: ';' (2403,47)-(2403,48)
                        if_statement (2405,13)-(2408,14)
                          if: 'if' (2405,13)-(2405,15)
                          parenthesized_expression (2405,16)-(2405,68)
                            (: '(' (2405,16)-(2405,17)
                            binary_expression (2405,17)-(2405,67)
                              identifier: 'stack_top' (2405,17)-(2405,26)
                              ==: '==' (2405,27)-(2405,29)
                              identifier: 'SCAN_STACK_IMPLICIT_CLASS_CONSTRUCTOR' (2405,30)-(2405,67)
                            ): ')' (2405,67)-(2405,68)
                          compound_statement (2406,13)-(2408,14)
                            {: '{' (2406,13)-(2406,14)
                            expression_statement (2407,15)-(2407,92)
                              call_expression (2407,15)-(2407,91)
                                identifier: 'parser_stack_pop' (2407,15)-(2407,31)
                                argument_list (2407,32)-(2407,91)
                                  (: '(' (2407,32)-(2407,33)
                                  identifier: 'context_p' (2407,33)-(2407,42)
                                  ,: ',' (2407,42)-(2407,43)
                                  pointer_expression (2407,44)-(2407,57)
                                    &: '&' (2407,44)-(2407,45)
                                    identifier: 'source_start' (2407,45)-(2407,57)
                                  ,: ',' (2407,57)-(2407,58)
                                  sizeof_expression (2407,59)-(2407,90)
                                    sizeof: 'sizeof' (2407,59)-(2407,65)
                                    parenthesized_expression (2407,66)-(2407,90)
                                      (: '(' (2407,66)-(2407,67)
                                      identifier: 'scanner_source_start_t' (2407,67)-(2407,89)
                                      ): ')' (2407,89)-(2407,90)
                                  ): ')' (2407,90)-(2407,91)
                              ;: ';' (2407,91)-(2407,92)
                            }: '}' (2408,13)-(2408,14)
                        expression_statement (2410,13)-(2410,52)
                          assignment_expression (2410,13)-(2410,51)
                            identifier: 'stack_top' (2410,13)-(2410,22)
                            =: '=' (2410,23)-(2410,24)
                            field_expression (2410,25)-(2410,51)
                              identifier: 'context_p' (2410,25)-(2410,34)
                              ->: '->' (2410,34)-(2410,36)
                              field_identifier: 'stack_top_uint8' (2410,36)-(2410,51)
                          ;: ';' (2410,51)-(2410,52)
                        expression_statement (2412,13)-(2412,112)
                          call_expression (2412,13)-(2412,111)
                            identifier: 'JERRY_ASSERT' (2412,13)-(2412,25)
                            argument_list (2412,26)-(2412,111)
                              (: '(' (2412,26)-(2412,27)
                              binary_expression (2412,27)-(2412,110)
                                binary_expression (2412,27)-(2412,66)
                                  identifier: 'stack_top' (2412,27)-(2412,36)
                                  ==: '==' (2412,37)-(2412,39)
                                  identifier: 'SCAN_STACK_CLASS_STATEMENT' (2412,40)-(2412,66)
                                ||: '||' (2412,67)-(2412,69)
                                binary_expression (2412,70)-(2412,110)
                                  identifier: 'stack_top' (2412,70)-(2412,79)
                                  ==: '==' (2412,80)-(2412,82)
                                  identifier: 'SCAN_STACK_CLASS_EXPRESSION' (2412,83)-(2412,110)
                              ): ')' (2412,110)-(2412,111)
                          ;: ';' (2412,111)-(2412,112)
                        if_statement (2414,13)-(2419,14)
                          if: 'if' (2414,13)-(2414,15)
                          parenthesized_expression (2414,16)-(2414,57)
                            (: '(' (2414,16)-(2414,17)
                            binary_expression (2414,17)-(2414,56)
                              identifier: 'stack_top' (2414,17)-(2414,26)
                              ==: '==' (2414,27)-(2414,29)
                              identifier: 'SCAN_STACK_CLASS_STATEMENT' (2414,30)-(2414,56)
                            ): ')' (2414,56)-(2414,57)
                          compound_statement (2415,13)-(2419,14)
                            {: '{' (2415,13)-(2415,14)
                            comment: '/* The token is kept to disallow consuming a semicolon after it. */' (2416,15)-(2416,82)
                            expression_statement (2417,15)-(2417,62)
                              assignment_expression (2417,15)-(2417,61)
                                field_expression (2417,15)-(2417,35)
                                  identifier: 'scanner_context' (2417,15)-(2417,30)
                                  .: '.' (2417,30)-(2417,31)
                                  field_identifier: 'mode' (2417,31)-(2417,35)
                                =: '=' (2417,36)-(2417,37)
                                identifier: 'SCAN_MODE_STATEMENT_END' (2417,38)-(2417,61)
                              ;: ';' (2417,61)-(2417,62)
                            continue_statement (2418,15)-(2418,24)
                              continue: 'continue' (2418,15)-(2418,23)
                              ;: ';' (2418,23)-(2418,24)
                            }: '}' (2419,13)-(2419,14)
                        expression_statement (2421,13)-(2421,70)
                          assignment_expression (2421,13)-(2421,69)
                            field_expression (2421,13)-(2421,33)
                              identifier: 'scanner_context' (2421,13)-(2421,28)
                              .: '.' (2421,28)-(2421,29)
                              field_identifier: 'mode' (2421,29)-(2421,33)
                            =: '=' (2421,34)-(2421,35)
                            identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (2421,36)-(2421,69)
                          ;: ';' (2421,69)-(2421,70)
                        expression_statement (2422,13)-(2422,48)
                          call_expression (2422,13)-(2422,47)
                            identifier: 'parser_stack_pop_uint8' (2422,13)-(2422,35)
                            argument_list (2422,36)-(2422,47)
                              (: '(' (2422,36)-(2422,37)
                              identifier: 'context_p' (2422,37)-(2422,46)
                              ): ')' (2422,46)-(2422,47)
                          ;: ';' (2422,47)-(2422,48)
                        break_statement (2423,13)-(2423,19)
                          break: 'break' (2423,13)-(2423,18)
                          ;: ';' (2423,18)-(2423,19)
                        }: '}' (2424,11)-(2424,12)
                    if_statement (2426,11)-(2440,12)
                      if: 'if' (2426,11)-(2426,13)
                      parenthesized_expression (2426,14)-(2428,81)
                        (: '(' (2426,14)-(2426,15)
                        binary_expression (2426,15)-(2428,80)
                          binary_expression (2426,15)-(2427,79)
                            binary_expression (2426,15)-(2426,53)
                              field_expression (2426,15)-(2426,36)
                                field_expression (2426,15)-(2426,31)
                                  identifier: 'context_p' (2426,15)-(2426,24)
                                  ->: '->' (2426,24)-(2426,26)
                                  field_identifier: 'token' (2426,26)-(2426,31)
                                .: '.' (2426,31)-(2426,32)
                                field_identifier: 'type' (2426,32)-(2426,36)
                              ==: '==' (2426,37)-(2426,39)
                              identifier: 'LEXER_LITERAL' (2426,40)-(2426,53)
                            &&: '&&' (2427,15)-(2427,17)
                            call_expression (2427,18)-(2427,79)
                              identifier: 'LEXER_IS_IDENT_OR_STRING' (2427,18)-(2427,42)
                              argument_list (2427,43)-(2427,79)
                                (: '(' (2427,43)-(2427,44)
                                field_expression (2427,44)-(2427,78)
                                  field_expression (2427,44)-(2427,73)
                                    field_expression (2427,44)-(2427,60)
                                      identifier: 'context_p' (2427,44)-(2427,53)
                                      ->: '->' (2427,53)-(2427,55)
                                      field_identifier: 'token' (2427,55)-(2427,60)
                                    .: '.' (2427,60)-(2427,61)
                                    field_identifier: 'lit_location' (2427,61)-(2427,73)
                                  .: '.' (2427,73)-(2427,74)
                                  field_identifier: 'type' (2427,74)-(2427,78)
                                ): ')' (2427,78)-(2427,79)
                          &&: '&&' (2428,15)-(2428,17)
                          call_expression (2428,18)-(2428,80)
                            identifier: 'lexer_compare_literal_to_string' (2428,18)-(2428,49)
                            argument_list (2428,50)-(2428,80)
                              (: '(' (2428,50)-(2428,51)
                              identifier: 'context_p' (2428,51)-(2428,60)
                              ,: ',' (2428,60)-(2428,61)
                              string_literal (2428,62)-(2428,75)
                                ": '"' (2428,62)-(2428,63)
                                string_content: 'constructor' (2428,63)-(2428,74)
                                ": '"' (2428,74)-(2428,75)
                              ,: ',' (2428,75)-(2428,76)
                              number_literal: '11' (2428,77)-(2428,79)
                              ): ')' (2428,79)-(2428,80)
                        ): ')' (2428,80)-(2428,81)
                      compound_statement (2429,11)-(2440,12)
                        {: '{' (2429,11)-(2429,12)
                        if_statement (2430,13)-(2439,14)
                          if: 'if' (2430,13)-(2430,15)
                          parenthesized_expression (2430,16)-(2430,68)
                            (: '(' (2430,16)-(2430,17)
                            binary_expression (2430,17)-(2430,67)
                              identifier: 'stack_top' (2430,17)-(2430,26)
                              ==: '==' (2430,27)-(2430,29)
                              identifier: 'SCAN_STACK_IMPLICIT_CLASS_CONSTRUCTOR' (2430,30)-(2430,67)
                            ): ')' (2430,67)-(2430,68)
                          compound_statement (2431,13)-(2439,14)
                            {: '{' (2431,13)-(2431,14)
                            declaration (2432,15)-(2432,51)
                              type_identifier: 'scanner_source_start_t' (2432,15)-(2432,37)
                              identifier: 'source_start' (2432,38)-(2432,50)
                              ;: ';' (2432,50)-(2432,51)
                            expression_statement (2433,15)-(2433,50)
                              call_expression (2433,15)-(2433,49)
                                identifier: 'parser_stack_pop_uint8' (2433,15)-(2433,37)
                                argument_list (2433,38)-(2433,49)
                                  (: '(' (2433,38)-(2433,39)
                                  identifier: 'context_p' (2433,39)-(2433,48)
                                  ): ')' (2433,48)-(2433,49)
                              ;: ';' (2433,49)-(2433,50)
                            expression_statement (2434,15)-(2434,92)
                              call_expression (2434,15)-(2434,91)
                                identifier: 'parser_stack_pop' (2434,15)-(2434,31)
                                argument_list (2434,32)-(2434,91)
                                  (: '(' (2434,32)-(2434,33)
                                  identifier: 'context_p' (2434,33)-(2434,42)
                                  ,: ',' (2434,42)-(2434,43)
                                  pointer_expression (2434,44)-(2434,57)
                                    &: '&' (2434,44)-(2434,45)
                                    identifier: 'source_start' (2434,45)-(2434,57)
                                  ,: ',' (2434,57)-(2434,58)
                                  sizeof_expression (2434,59)-(2434,90)
                                    sizeof: 'sizeof' (2434,59)-(2434,65)
                                    parenthesized_expression (2434,66)-(2434,90)
                                      (: '(' (2434,66)-(2434,67)
                                      identifier: 'scanner_source_start_t' (2434,67)-(2434,89)
                                      ): ')' (2434,89)-(2434,90)
                                  ): ')' (2434,90)-(2434,91)
                              ;: ';' (2434,91)-(2434,92)
                            declaration (2436,15)-(2436,120)
                              type_identifier: 'scanner_info_t' (2436,15)-(2436,29)
                              init_declarator (2436,30)-(2436,119)
                                pointer_declarator (2436,30)-(2436,37)
                                  *: '*' (2436,30)-(2436,31)
                                  identifier: 'info_p' (2436,31)-(2436,37)
                                =: '=' (2436,38)-(2436,39)
                                call_expression (2436,40)-(2436,119)
                                  identifier: 'scanner_insert_info' (2436,40)-(2436,59)
                                  argument_list (2436,60)-(2436,119)
                                    (: '(' (2436,60)-(2436,61)
                                    identifier: 'context_p' (2436,61)-(2436,70)
                                    ,: ',' (2436,70)-(2436,71)
                                    field_expression (2436,72)-(2436,93)
                                      identifier: 'source_start' (2436,72)-(2436,84)
                                      .: '.' (2436,84)-(2436,85)
                                      field_identifier: 'source_p' (2436,85)-(2436,93)
                                    ,: ',' (2436,93)-(2436,94)
                                    sizeof_expression (2436,95)-(2436,118)
                                      sizeof: 'sizeof' (2436,95)-(2436,101)
                                      parenthesized_expression (2436,102)-(2436,118)
                                        (: '(' (2436,102)-(2436,103)
                                        identifier: 'scanner_info_t' (2436,103)-(2436,117)
                                        ): ')' (2436,117)-(2436,118)
                                    ): ')' (2436,118)-(2436,119)
                              ;: ';' (2436,119)-(2436,120)
                            expression_statement (2437,15)-(2437,61)
                              assignment_expression (2437,15)-(2437,60)
                                field_expression (2437,15)-(2437,27)
                                  identifier: 'info_p' (2437,15)-(2437,21)
                                  ->: '->' (2437,21)-(2437,23)
                                  field_identifier: 'type' (2437,23)-(2437,27)
                                =: '=' (2437,28)-(2437,29)
                                identifier: 'SCANNER_TYPE_CLASS_CONSTRUCTOR' (2437,30)-(2437,60)
                              ;: ';' (2437,60)-(2437,61)
                            expression_statement (2438,15)-(2438,90)
                              call_expression (2438,15)-(2438,89)
                                identifier: 'parser_stack_push_uint8' (2438,15)-(2438,38)
                                argument_list (2438,39)-(2438,89)
                                  (: '(' (2438,39)-(2438,40)
                                  identifier: 'context_p' (2438,40)-(2438,49)
                                  ,: ',' (2438,49)-(2438,50)
                                  identifier: 'SCAN_STACK_EXPLICIT_CLASS_CONSTRUCTOR' (2438,51)-(2438,88)
                                  ): ')' (2438,88)-(2438,89)
                              ;: ';' (2438,89)-(2438,90)
                            }: '}' (2439,13)-(2439,14)
                        }: '}' (2440,11)-(2440,12)
                    if_statement (2442,11)-(2445,12)
                      if: 'if' (2442,11)-(2442,13)
                      parenthesized_expression (2442,14)-(2442,66)
                        (: '(' (2442,14)-(2442,15)
                        call_expression (2442,15)-(2442,65)
                          identifier: 'lexer_token_is_identifier' (2442,15)-(2442,40)
                          argument_list (2442,41)-(2442,65)
                            (: '(' (2442,41)-(2442,42)
                            identifier: 'context_p' (2442,42)-(2442,51)
                            ,: ',' (2442,51)-(2442,52)
                            string_literal (2442,53)-(2442,61)
                              ": '"' (2442,53)-(2442,54)
                              string_content: 'static' (2442,54)-(2442,60)
                              ": '"' (2442,60)-(2442,61)
                            ,: ',' (2442,61)-(2442,62)
                            number_literal: '6' (2442,63)-(2442,64)
                            ): ')' (2442,64)-(2442,65)
                        ): ')' (2442,65)-(2442,66)
                      compound_statement (2443,11)-(2445,12)
                        {: '{' (2443,11)-(2443,12)
                        expression_statement (2444,13)-(2444,47)
                          call_expression (2444,13)-(2444,46)
                            identifier: 'lexer_scan_identifier' (2444,13)-(2444,34)
                            argument_list (2444,35)-(2444,46)
                              (: '(' (2444,35)-(2444,36)
                              identifier: 'context_p' (2444,36)-(2444,45)
                              ): ')' (2444,45)-(2444,46)
                          ;: ';' (2444,46)-(2444,47)
                        }: '}' (2445,11)-(2445,12)
                    expression_statement (2447,11)-(2447,77)
                      call_expression (2447,11)-(2447,76)
                        identifier: 'parser_stack_push_uint8' (2447,11)-(2447,34)
                        argument_list (2447,35)-(2447,76)
                          (: '(' (2447,35)-(2447,36)
                          identifier: 'context_p' (2447,36)-(2447,45)
                          ,: ',' (2447,45)-(2447,46)
                          identifier: 'SCAN_STACK_FUNCTION_PROPERTY' (2447,47)-(2447,75)
                          ): ')' (2447,75)-(2447,76)
                      ;: ';' (2447,76)-(2447,77)
                    expression_statement (2448,11)-(2448,63)
                      assignment_expression (2448,11)-(2448,62)
                        field_expression (2448,11)-(2448,31)
                          identifier: 'scanner_context' (2448,11)-(2448,26)
                          .: '.' (2448,26)-(2448,27)
                          field_identifier: 'mode' (2448,27)-(2448,31)
                        =: '=' (2448,32)-(2448,33)
                        identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (2448,34)-(2448,62)
                      ;: ';' (2448,62)-(2448,63)
                    declaration (2450,11)-(2450,71)
                      primitive_type: 'uint16_t' (2450,11)-(2450,19)
                      init_declarator (2450,20)-(2450,70)
                        identifier: 'literal_pool_flags' (2450,20)-(2450,38)
                        =: '=' (2450,39)-(2450,40)
                        identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (2450,41)-(2450,70)
                      ;: ';' (2450,70)-(2450,71)
                    if_statement (2452,11)-(2485,12)
                      if: 'if' (2452,11)-(2452,13)
                      parenthesized_expression (2452,14)-(2453,66)
                        (: '(' (2452,14)-(2452,15)
                        binary_expression (2452,15)-(2453,65)
                          call_expression (2452,15)-(2452,62)
                            identifier: 'lexer_token_is_identifier' (2452,15)-(2452,40)
                            argument_list (2452,41)-(2452,62)
                              (: '(' (2452,41)-(2452,42)
                              identifier: 'context_p' (2452,42)-(2452,51)
                              ,: ',' (2452,51)-(2452,52)
                              string_literal (2452,53)-(2452,58)
                                ": '"' (2452,53)-(2452,54)
                                string_content: 'get' (2452,54)-(2452,57)
                                ": '"' (2452,57)-(2452,58)
                              ,: ',' (2452,58)-(2452,59)
                              number_literal: '3' (2452,60)-(2452,61)
                              ): ')' (2452,61)-(2452,62)
                          ||: '||' (2453,15)-(2453,17)
                          call_expression (2453,18)-(2453,65)
                            identifier: 'lexer_token_is_identifier' (2453,18)-(2453,43)
                            argument_list (2453,44)-(2453,65)
                              (: '(' (2453,44)-(2453,45)
                              identifier: 'context_p' (2453,45)-(2453,54)
                              ,: ',' (2453,54)-(2453,55)
                              string_literal (2453,56)-(2453,61)
                                ": '"' (2453,56)-(2453,57)
                                string_content: 'set' (2453,57)-(2453,60)
                                ": '"' (2453,60)-(2453,61)
                              ,: ',' (2453,61)-(2453,62)
                              number_literal: '3' (2453,63)-(2453,64)
                              ): ')' (2453,64)-(2453,65)
                        ): ')' (2453,65)-(2453,66)
                      compound_statement (2454,11)-(2462,12)
                        {: '{' (2454,11)-(2454,12)
                        expression_statement (2455,13)-(2455,47)
                          call_expression (2455,13)-(2455,46)
                            identifier: 'lexer_scan_identifier' (2455,13)-(2455,34)
                            argument_list (2455,35)-(2455,46)
                              (: '(' (2455,35)-(2455,36)
                              identifier: 'context_p' (2455,36)-(2455,45)
                              ): ')' (2455,45)-(2455,46)
                          ;: ';' (2455,46)-(2455,47)
                        if_statement (2457,13)-(2461,14)
                          if: 'if' (2457,13)-(2457,15)
                          parenthesized_expression (2457,16)-(2457,59)
                            (: '(' (2457,16)-(2457,17)
                            binary_expression (2457,17)-(2457,58)
                              field_expression (2457,17)-(2457,38)
                                field_expression (2457,17)-(2457,33)
                                  identifier: 'context_p' (2457,17)-(2457,26)
                                  ->: '->' (2457,26)-(2457,28)
                                  field_identifier: 'token' (2457,28)-(2457,33)
                                .: '.' (2457,33)-(2457,34)
                                field_identifier: 'type' (2457,34)-(2457,38)
                              ==: '==' (2457,39)-(2457,41)
                              identifier: 'LEXER_LEFT_PAREN' (2457,42)-(2457,58)
                            ): ')' (2457,58)-(2457,59)
                          compound_statement (2458,13)-(2461,14)
                            {: '{' (2458,13)-(2458,14)
                            expression_statement (2459,15)-(2459,102)
                              call_expression (2459,15)-(2459,101)
                                identifier: 'scanner_push_literal_pool' (2459,15)-(2459,40)
                                argument_list (2459,41)-(2459,101)
                                  (: '(' (2459,41)-(2459,42)
                                  identifier: 'context_p' (2459,42)-(2459,51)
                                  ,: ',' (2459,51)-(2459,52)
                                  pointer_expression (2459,53)-(2459,69)
                                    &: '&' (2459,53)-(2459,54)
                                    identifier: 'scanner_context' (2459,54)-(2459,69)
                                  ,: ',' (2459,69)-(2459,70)
                                  identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (2459,71)-(2459,100)
                                  ): ')' (2459,100)-(2459,101)
                              ;: ';' (2459,101)-(2459,102)
                            continue_statement (2460,15)-(2460,24)
                              continue: 'continue' (2460,15)-(2460,23)
                              ;: ';' (2460,23)-(2460,24)
                            }: '}' (2461,13)-(2461,14)
                        }: '}' (2462,11)-(2462,12)
                      else_clause (2463,11)-(2485,12)
                        else: 'else' (2463,11)-(2463,15)
                        if_statement (2463,16)-(2485,12)
                          if: 'if' (2463,16)-(2463,18)
                          parenthesized_expression (2463,19)-(2463,70)
                            (: '(' (2463,19)-(2463,20)
                            call_expression (2463,20)-(2463,69)
                              identifier: 'lexer_token_is_identifier' (2463,20)-(2463,45)
                              argument_list (2463,46)-(2463,69)
                                (: '(' (2463,46)-(2463,47)
                                identifier: 'context_p' (2463,47)-(2463,56)
                                ,: ',' (2463,56)-(2463,57)
                                string_literal (2463,58)-(2463,65)
                                  ": '"' (2463,58)-(2463,59)
                                  string_content: 'async' (2463,59)-(2463,64)
                                  ": '"' (2463,64)-(2463,65)
                                ,: ',' (2463,65)-(2463,66)
                                number_literal: '5' (2463,67)-(2463,68)
                                ): ')' (2463,68)-(2463,69)
                            ): ')' (2463,69)-(2463,70)
                          compound_statement (2464,11)-(2480,12)
                            {: '{' (2464,11)-(2464,12)
                            expression_statement (2465,13)-(2465,47)
                              call_expression (2465,13)-(2465,46)
                                identifier: 'lexer_scan_identifier' (2465,13)-(2465,34)
                                argument_list (2465,35)-(2465,46)
                                  (: '(' (2465,35)-(2465,36)
                                  identifier: 'context_p' (2465,36)-(2465,45)
                                  ): ')' (2465,45)-(2465,46)
                              ;: ';' (2465,46)-(2465,47)
                            if_statement (2467,13)-(2471,14)
                              if: 'if' (2467,13)-(2467,15)
                              parenthesized_expression (2467,16)-(2467,59)
                                (: '(' (2467,16)-(2467,17)
                                binary_expression (2467,17)-(2467,58)
                                  field_expression (2467,17)-(2467,38)
                                    field_expression (2467,17)-(2467,33)
                                      identifier: 'context_p' (2467,17)-(2467,26)
                                      ->: '->' (2467,26)-(2467,28)
                                      field_identifier: 'token' (2467,28)-(2467,33)
                                    .: '.' (2467,33)-(2467,34)
                                    field_identifier: 'type' (2467,34)-(2467,38)
                                  ==: '==' (2467,39)-(2467,41)
                                  identifier: 'LEXER_LEFT_PAREN' (2467,42)-(2467,58)
                                ): ')' (2467,58)-(2467,59)
                              compound_statement (2468,13)-(2471,14)
                                {: '{' (2468,13)-(2468,14)
                                expression_statement (2469,15)-(2469,102)
                                  call_expression (2469,15)-(2469,101)
                                    identifier: 'scanner_push_literal_pool' (2469,15)-(2469,40)
                                    argument_list (2469,41)-(2469,101)
                                      (: '(' (2469,41)-(2469,42)
                                      identifier: 'context_p' (2469,42)-(2469,51)
                                      ,: ',' (2469,51)-(2469,52)
                                      pointer_expression (2469,53)-(2469,69)
                                        &: '&' (2469,53)-(2469,54)
                                        identifier: 'scanner_context' (2469,54)-(2469,69)
                                      ,: ',' (2469,69)-(2469,70)
                                      identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (2469,71)-(2469,100)
                                      ): ')' (2469,100)-(2469,101)
                                  ;: ';' (2469,101)-(2469,102)
                                continue_statement (2470,15)-(2470,24)
                                  continue: 'continue' (2470,15)-(2470,23)
                                  ;: ';' (2470,23)-(2470,24)
                                }: '}' (2471,13)-(2471,14)
                            expression_statement (2473,13)-(2473,62)
                              assignment_expression (2473,13)-(2473,61)
                                identifier: 'literal_pool_flags' (2473,13)-(2473,31)
                                |=: '|=' (2473,32)-(2473,34)
                                identifier: 'SCANNER_LITERAL_POOL_ASYNC' (2473,35)-(2473,61)
                              ;: ';' (2473,61)-(2473,62)
                            if_statement (2475,13)-(2479,14)
                              if: 'if' (2475,13)-(2475,15)
                              parenthesized_expression (2475,16)-(2475,57)
                                (: '(' (2475,16)-(2475,17)
                                binary_expression (2475,17)-(2475,56)
                                  field_expression (2475,17)-(2475,38)
                                    field_expression (2475,17)-(2475,33)
                                      identifier: 'context_p' (2475,17)-(2475,26)
                                      ->: '->' (2475,26)-(2475,28)
                                      field_identifier: 'token' (2475,28)-(2475,33)
                                    .: '.' (2475,33)-(2475,34)
                                    field_identifier: 'type' (2475,34)-(2475,38)
                                  ==: '==' (2475,39)-(2475,41)
                                  identifier: 'LEXER_MULTIPLY' (2475,42)-(2475,56)
                                ): ')' (2475,56)-(2475,57)
                              compound_statement (2476,13)-(2479,14)
                                {: '{' (2476,13)-(2476,14)
                                expression_statement (2477,15)-(2477,49)
                                  call_expression (2477,15)-(2477,48)
                                    identifier: 'lexer_scan_identifier' (2477,15)-(2477,36)
                                    argument_list (2477,37)-(2477,48)
                                      (: '(' (2477,37)-(2477,38)
                                      identifier: 'context_p' (2477,38)-(2477,47)
                                      ): ')' (2477,47)-(2477,48)
                                  ;: ';' (2477,48)-(2477,49)
                                expression_statement (2478,15)-(2478,68)
                                  assignment_expression (2478,15)-(2478,67)
                                    identifier: 'literal_pool_flags' (2478,15)-(2478,33)
                                    |=: '|=' (2478,34)-(2478,36)
                                    identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (2478,37)-(2478,67)
                                  ;: ';' (2478,67)-(2478,68)
                                }: '}' (2479,13)-(2479,14)
                            }: '}' (2480,11)-(2480,12)
                          else_clause (2481,11)-(2485,12)
                            else: 'else' (2481,11)-(2481,15)
                            if_statement (2481,16)-(2485,12)
                              if: 'if' (2481,16)-(2481,18)
                              parenthesized_expression (2481,19)-(2481,60)
                                (: '(' (2481,19)-(2481,20)
                                binary_expression (2481,20)-(2481,59)
                                  field_expression (2481,20)-(2481,41)
                                    field_expression (2481,20)-(2481,36)
                                      identifier: 'context_p' (2481,20)-(2481,29)
                                      ->: '->' (2481,29)-(2481,31)
                                      field_identifier: 'token' (2481,31)-(2481,36)
                                    .: '.' (2481,36)-(2481,37)
                                    field_identifier: 'type' (2481,37)-(2481,41)
                                  ==: '==' (2481,42)-(2481,44)
                                  identifier: 'LEXER_MULTIPLY' (2481,45)-(2481,59)
                                ): ')' (2481,59)-(2481,60)
                              compound_statement (2482,11)-(2485,12)
                                {: '{' (2482,11)-(2482,12)
                                expression_statement (2483,13)-(2483,47)
                                  call_expression (2483,13)-(2483,46)
                                    identifier: 'lexer_scan_identifier' (2483,13)-(2483,34)
                                    argument_list (2483,35)-(2483,46)
                                      (: '(' (2483,35)-(2483,36)
                                      identifier: 'context_p' (2483,36)-(2483,45)
                                      ): ')' (2483,45)-(2483,46)
                                  ;: ';' (2483,46)-(2483,47)
                                expression_statement (2484,13)-(2484,66)
                                  assignment_expression (2484,13)-(2484,65)
                                    identifier: 'literal_pool_flags' (2484,13)-(2484,31)
                                    |=: '|=' (2484,32)-(2484,34)
                                    identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (2484,35)-(2484,65)
                                  ;: ';' (2484,65)-(2484,66)
                                }: '}' (2485,11)-(2485,12)
                    if_statement (2487,11)-(2492,12)
                      if: 'if' (2487,11)-(2487,13)
                      parenthesized_expression (2487,14)-(2487,58)
                        (: '(' (2487,14)-(2487,15)
                        binary_expression (2487,15)-(2487,57)
                          field_expression (2487,15)-(2487,36)
                            field_expression (2487,15)-(2487,31)
                              identifier: 'context_p' (2487,15)-(2487,24)
                              ->: '->' (2487,24)-(2487,26)
                              field_identifier: 'token' (2487,26)-(2487,31)
                            .: '.' (2487,31)-(2487,32)
                            field_identifier: 'type' (2487,32)-(2487,36)
                          ==: '==' (2487,37)-(2487,39)
                          identifier: 'LEXER_LEFT_SQUARE' (2487,40)-(2487,57)
                        ): ')' (2487,57)-(2487,58)
                      compound_statement (2488,11)-(2492,12)
                        {: '{' (2488,11)-(2488,12)
                        expression_statement (2489,13)-(2489,109)
                          call_expression (2489,13)-(2489,108)
                            identifier: 'parser_stack_push_uint8' (2489,13)-(2489,36)
                            argument_list (2489,37)-(2489,108)
                              (: '(' (2489,37)-(2489,38)
                              identifier: 'context_p' (2489,38)-(2489,47)
                              ,: ',' (2489,47)-(2489,48)
                              call_expression (2489,49)-(2489,107)
                                identifier: 'SCANNER_FROM_LITERAL_POOL_TO_COMPUTED' (2489,49)-(2489,86)
                                argument_list (2489,87)-(2489,107)
                                  (: '(' (2489,87)-(2489,88)
                                  identifier: 'literal_pool_flags' (2489,88)-(2489,106)
                                  ): ')' (2489,106)-(2489,107)
                              ): ')' (2489,107)-(2489,108)
                          ;: ';' (2489,108)-(2489,109)
                        expression_statement (2490,13)-(2490,65)
                          assignment_expression (2490,13)-(2490,64)
                            field_expression (2490,13)-(2490,33)
                              identifier: 'scanner_context' (2490,13)-(2490,28)
                              .: '.' (2490,28)-(2490,29)
                              field_identifier: 'mode' (2490,29)-(2490,33)
                            =: '=' (2490,34)-(2490,35)
                            identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (2490,36)-(2490,64)
                          ;: ';' (2490,64)-(2490,65)
                        break_statement (2491,13)-(2491,19)
                          break: 'break' (2491,13)-(2491,18)
                          ;: ';' (2491,18)-(2491,19)
                        }: '}' (2492,11)-(2492,12)
                    if_statement (2494,11)-(2497,12)
                      if: 'if' (2494,11)-(2494,13)
                      parenthesized_expression (2494,14)-(2494,54)
                        (: '(' (2494,14)-(2494,15)
                        binary_expression (2494,15)-(2494,53)
                          field_expression (2494,15)-(2494,36)
                            field_expression (2494,15)-(2494,31)
                              identifier: 'context_p' (2494,15)-(2494,24)
                              ->: '->' (2494,24)-(2494,26)
                              field_identifier: 'token' (2494,26)-(2494,31)
                            .: '.' (2494,31)-(2494,32)
                            field_identifier: 'type' (2494,32)-(2494,36)
                          !=: '!=' (2494,37)-(2494,39)
                          identifier: 'LEXER_LITERAL' (2494,40)-(2494,53)
                        ): ')' (2494,53)-(2494,54)
                      compound_statement (2495,11)-(2497,12)
                        {: '{' (2495,11)-(2495,12)
                        expression_statement (2496,13)-(2496,45)
                          call_expression (2496,13)-(2496,44)
                            identifier: 'scanner_raise_error' (2496,13)-(2496,32)
                            argument_list (2496,33)-(2496,44)
                              (: '(' (2496,33)-(2496,34)
                              identifier: 'context_p' (2496,34)-(2496,43)
                              ): ')' (2496,43)-(2496,44)
                          ;: ';' (2496,44)-(2496,45)
                        }: '}' (2497,11)-(2497,12)
                    if_statement (2499,11)-(2502,12)
                      if: 'if' (2499,11)-(2499,13)
                      parenthesized_expression (2499,14)-(2499,67)
                        (: '(' (2499,14)-(2499,15)
                        binary_expression (2499,15)-(2499,66)
                          identifier: 'literal_pool_flags' (2499,15)-(2499,33)
                          &: '&' (2499,34)-(2499,35)
                          identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (2499,36)-(2499,66)
                        ): ')' (2499,66)-(2499,67)
                      compound_statement (2500,11)-(2502,12)
                        {: '{' (2500,11)-(2500,12)
                        expression_statement (2501,13)-(2501,69)
                          assignment_expression (2501,13)-(2501,68)
                            field_expression (2501,13)-(2501,36)
                              identifier: 'context_p' (2501,13)-(2501,22)
                              ->: '->' (2501,22)-(2501,24)
                              field_identifier: 'status_flags' (2501,24)-(2501,36)
                            |=: '|=' (2501,37)-(2501,39)
                            identifier: 'PARSER_IS_GENERATOR_FUNCTION' (2501,40)-(2501,68)
                          ;: ';' (2501,68)-(2501,69)
                        }: '}' (2502,11)-(2502,12)
                    expression_statement (2504,11)-(2504,87)
                      call_expression (2504,11)-(2504,86)
                        identifier: 'scanner_push_literal_pool' (2504,11)-(2504,36)
                        argument_list (2504,37)-(2504,86)
                          (: '(' (2504,37)-(2504,38)
                          identifier: 'context_p' (2504,38)-(2504,47)
                          ,: ',' (2504,47)-(2504,48)
                          pointer_expression (2504,49)-(2504,65)
                            &: '&' (2504,49)-(2504,50)
                            identifier: 'scanner_context' (2504,50)-(2504,65)
                          ,: ',' (2504,65)-(2504,66)
                          identifier: 'literal_pool_flags' (2504,67)-(2504,85)
                          ): ')' (2504,85)-(2504,86)
                      ;: ';' (2504,86)-(2504,87)
                    expression_statement (2505,11)-(2505,40)
                      call_expression (2505,11)-(2505,39)
                        identifier: 'lexer_next_token' (2505,11)-(2505,27)
                        argument_list (2505,28)-(2505,39)
                          (: '(' (2505,28)-(2505,29)
                          identifier: 'context_p' (2505,29)-(2505,38)
                          ): ')' (2505,38)-(2505,39)
                      ;: ';' (2505,39)-(2505,40)
                    continue_statement (2506,11)-(2506,20)
                      continue: 'continue' (2506,11)-(2506,19)
                      ;: ';' (2506,19)-(2506,20)
                    }: '}' (2507,9)-(2507,10)
                #endif: '#endif' (2508,1)-(2508,7)
              comment: '/* ENABLED (JERRY_ES2015) */' (2508,8)-(2508,36)
              case_statement (2509,9)-(2517,10)
                case: 'case' (2509,9)-(2509,13)
                identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (2509,14)-(2509,47)
                :: ':' (2509,47)-(2509,48)
                compound_statement (2510,9)-(2517,10)
                  {: '{' (2510,9)-(2510,10)
                  if_statement (2511,11)-(2514,12)
                    if: 'if' (2511,11)-(2511,13)
                    parenthesized_expression (2511,14)-(2511,99)
                      (: '(' (2511,14)-(2511,15)
                      call_expression (2511,15)-(2511,98)
                        identifier: 'scanner_scan_post_primary_expression' (2511,15)-(2511,51)
                        argument_list (2511,52)-(2511,98)
                          (: '(' (2511,52)-(2511,53)
                          identifier: 'context_p' (2511,53)-(2511,62)
                          ,: ',' (2511,62)-(2511,63)
                          pointer_expression (2511,64)-(2511,80)
                            &: '&' (2511,64)-(2511,65)
                            identifier: 'scanner_context' (2511,65)-(2511,80)
                          ,: ',' (2511,80)-(2511,81)
                          identifier: 'type' (2511,82)-(2511,86)
                          ,: ',' (2511,86)-(2511,87)
                          identifier: 'stack_top' (2511,88)-(2511,97)
                          ): ')' (2511,97)-(2511,98)
                      ): ')' (2511,98)-(2511,99)
                    compound_statement (2512,11)-(2514,12)
                      {: '{' (2512,11)-(2512,12)
                      break_statement (2513,13)-(2513,19)
                        break: 'break' (2513,13)-(2513,18)
                        ;: ';' (2513,18)-(2513,19)
                      }: '}' (2514,11)-(2514,12)
                  expression_statement (2515,11)-(2515,61)
                    assignment_expression (2515,11)-(2515,60)
                      identifier: 'type' (2515,11)-(2515,15)
                      =: '=' (2515,16)-(2515,17)
                      cast_expression (2515,18)-(2515,60)
                        (: '(' (2515,18)-(2515,19)
                        type_descriptor (2515,19)-(2515,37)
                          type_identifier: 'lexer_token_type_t' (2515,19)-(2515,37)
                        ): ')' (2515,37)-(2515,38)
                        field_expression (2515,39)-(2515,60)
                          field_expression (2515,39)-(2515,55)
                            identifier: 'context_p' (2515,39)-(2515,48)
                            ->: '->' (2515,48)-(2515,50)
                            field_identifier: 'token' (2515,50)-(2515,55)
                          .: '.' (2515,55)-(2515,56)
                          field_identifier: 'type' (2515,56)-(2515,60)
                    ;: ';' (2515,60)-(2515,61)
                  comment: '/* FALLTHRU */' (2516,11)-(2516,25)
                  }: '}' (2517,9)-(2517,10)
              case_statement (2518,9)-(2525,10)
                case: 'case' (2518,9)-(2518,13)
                identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (2518,14)-(2518,46)
                :: ':' (2518,46)-(2518,47)
                compound_statement (2519,9)-(2525,10)
                  {: '{' (2519,9)-(2519,10)
                  if_statement (2520,11)-(2523,12)
                    if: 'if' (2520,11)-(2520,13)
                    parenthesized_expression (2520,14)-(2520,117)
                      (: '(' (2520,14)-(2520,15)
                      binary_expression (2520,15)-(2520,116)
                        call_expression (2520,15)-(2520,97)
                          identifier: 'scanner_scan_primary_expression_end' (2520,15)-(2520,50)
                          argument_list (2520,51)-(2520,97)
                            (: '(' (2520,51)-(2520,52)
                            identifier: 'context_p' (2520,52)-(2520,61)
                            ,: ',' (2520,61)-(2520,62)
                            pointer_expression (2520,63)-(2520,79)
                              &: '&' (2520,63)-(2520,64)
                              identifier: 'scanner_context' (2520,64)-(2520,79)
                            ,: ',' (2520,79)-(2520,80)
                            identifier: 'type' (2520,81)-(2520,85)
                            ,: ',' (2520,85)-(2520,86)
                            identifier: 'stack_top' (2520,87)-(2520,96)
                            ): ')' (2520,96)-(2520,97)
                        !=: '!=' (2520,98)-(2520,100)
                        identifier: 'SCAN_NEXT_TOKEN' (2520,101)-(2520,116)
                      ): ')' (2520,116)-(2520,117)
                    compound_statement (2521,11)-(2523,12)
                      {: '{' (2521,11)-(2521,12)
                      continue_statement (2522,13)-(2522,22)
                        continue: 'continue' (2522,13)-(2522,21)
                        ;: ';' (2522,21)-(2522,22)
                      }: '}' (2523,11)-(2523,12)
                  break_statement (2524,11)-(2524,17)
                    break: 'break' (2524,11)-(2524,16)
                    ;: ';' (2524,16)-(2524,17)
                  }: '}' (2525,9)-(2525,10)
              case_statement (2526,9)-(2534,10)
                case: 'case' (2526,9)-(2526,13)
                identifier: 'SCAN_MODE_STATEMENT_OR_TERMINATOR' (2526,14)-(2526,47)
                :: ':' (2526,47)-(2526,48)
                compound_statement (2527,9)-(2534,10)
                  {: '{' (2527,9)-(2527,10)
                  if_statement (2528,11)-(2532,12)
                    if: 'if' (2528,11)-(2528,13)
                    parenthesized_expression (2528,14)-(2528,62)
                      (: '(' (2528,14)-(2528,15)
                      binary_expression (2528,15)-(2528,61)
                        binary_expression (2528,15)-(2528,40)
                          identifier: 'type' (2528,15)-(2528,19)
                          ==: '==' (2528,20)-(2528,22)
                          identifier: 'LEXER_RIGHT_BRACE' (2528,23)-(2528,40)
                        ||: '||' (2528,41)-(2528,43)
                        binary_expression (2528,44)-(2528,61)
                          identifier: 'type' (2528,44)-(2528,48)
                          ==: '==' (2528,49)-(2528,51)
                          identifier: 'LEXER_EOS' (2528,52)-(2528,61)
                      ): ')' (2528,61)-(2528,62)
                    compound_statement (2529,11)-(2532,12)
                      {: '{' (2529,11)-(2529,12)
                      expression_statement (2530,13)-(2530,60)
                        assignment_expression (2530,13)-(2530,59)
                          field_expression (2530,13)-(2530,33)
                            identifier: 'scanner_context' (2530,13)-(2530,28)
                            .: '.' (2530,28)-(2530,29)
                            field_identifier: 'mode' (2530,29)-(2530,33)
                          =: '=' (2530,34)-(2530,35)
                          identifier: 'SCAN_MODE_STATEMENT_END' (2530,36)-(2530,59)
                        ;: ';' (2530,59)-(2530,60)
                      continue_statement (2531,13)-(2531,22)
                        continue: 'continue' (2531,13)-(2531,21)
                        ;: ';' (2531,21)-(2531,22)
                      }: '}' (2532,11)-(2532,12)
                  comment: '/* FALLTHRU */' (2533,11)-(2533,25)
                  }: '}' (2534,9)-(2534,10)
              case_statement (2535,9)-(2542,10)
                case: 'case' (2535,9)-(2535,13)
                identifier: 'SCAN_MODE_STATEMENT' (2535,14)-(2535,33)
                :: ':' (2535,33)-(2535,34)
                compound_statement (2536,9)-(2542,10)
                  {: '{' (2536,9)-(2536,10)
                  if_statement (2537,11)-(2540,12)
                    if: 'if' (2537,11)-(2537,13)
                    parenthesized_expression (2537,14)-(2537,104)
                      (: '(' (2537,14)-(2537,15)
                      binary_expression (2537,15)-(2537,103)
                        call_expression (2537,15)-(2537,84)
                          identifier: 'scanner_scan_statement' (2537,15)-(2537,37)
                          argument_list (2537,38)-(2537,84)
                            (: '(' (2537,38)-(2537,39)
                            identifier: 'context_p' (2537,39)-(2537,48)
                            ,: ',' (2537,48)-(2537,49)
                            pointer_expression (2537,50)-(2537,66)
                              &: '&' (2537,50)-(2537,51)
                              identifier: 'scanner_context' (2537,51)-(2537,66)
                            ,: ',' (2537,66)-(2537,67)
                            identifier: 'type' (2537,68)-(2537,72)
                            ,: ',' (2537,72)-(2537,73)
                            identifier: 'stack_top' (2537,74)-(2537,83)
                            ): ')' (2537,83)-(2537,84)
                        !=: '!=' (2537,85)-(2537,87)
                        identifier: 'SCAN_NEXT_TOKEN' (2537,88)-(2537,103)
                      ): ')' (2537,103)-(2537,104)
                    compound_statement (2538,11)-(2540,12)
                      {: '{' (2538,11)-(2538,12)
                      continue_statement (2539,13)-(2539,22)
                        continue: 'continue' (2539,13)-(2539,21)
                        ;: ';' (2539,21)-(2539,22)
                      }: '}' (2540,11)-(2540,12)
                  break_statement (2541,11)-(2541,17)
                    break: 'break' (2541,11)-(2541,16)
                    ;: ';' (2541,16)-(2541,17)
                  }: '}' (2542,9)-(2542,10)
              case_statement (2543,9)-(2556,10)
                case: 'case' (2543,9)-(2543,13)
                identifier: 'SCAN_MODE_STATEMENT_END' (2543,14)-(2543,37)
                :: ':' (2543,37)-(2543,38)
                compound_statement (2544,9)-(2556,10)
                  {: '{' (2544,9)-(2544,10)
                  if_statement (2545,11)-(2548,12)
                    if: 'if' (2545,11)-(2545,13)
                    parenthesized_expression (2545,14)-(2545,97)
                      (: '(' (2545,14)-(2545,15)
                      binary_expression (2545,15)-(2545,96)
                        call_expression (2545,15)-(2545,77)
                          identifier: 'scanner_scan_statement_end' (2545,15)-(2545,41)
                          argument_list (2545,42)-(2545,77)
                            (: '(' (2545,42)-(2545,43)
                            identifier: 'context_p' (2545,43)-(2545,52)
                            ,: ',' (2545,52)-(2545,53)
                            pointer_expression (2545,54)-(2545,70)
                              &: '&' (2545,54)-(2545,55)
                              identifier: 'scanner_context' (2545,55)-(2545,70)
                            ,: ',' (2545,70)-(2545,71)
                            identifier: 'type' (2545,72)-(2545,76)
                            ): ')' (2545,76)-(2545,77)
                        !=: '!=' (2545,78)-(2545,80)
                        identifier: 'SCAN_NEXT_TOKEN' (2545,81)-(2545,96)
                      ): ')' (2545,96)-(2545,97)
                    compound_statement (2546,11)-(2548,12)
                      {: '{' (2546,11)-(2546,12)
                      continue_statement (2547,13)-(2547,22)
                        continue: 'continue' (2547,13)-(2547,21)
                        ;: ';' (2547,21)-(2547,22)
                      }: '}' (2548,11)-(2548,12)
                  if_statement (2550,11)-(2553,12)
                    if: 'if' (2550,11)-(2550,13)
                    parenthesized_expression (2550,14)-(2550,50)
                      (: '(' (2550,14)-(2550,15)
                      binary_expression (2550,15)-(2550,49)
                        field_expression (2550,15)-(2550,36)
                          field_expression (2550,15)-(2550,31)
                            identifier: 'context_p' (2550,15)-(2550,24)
                            ->: '->' (2550,24)-(2550,26)
                            field_identifier: 'token' (2550,26)-(2550,31)
                          .: '.' (2550,31)-(2550,32)
                          field_identifier: 'type' (2550,32)-(2550,36)
                        ==: '==' (2550,37)-(2550,39)
                        identifier: 'LEXER_EOS' (2550,40)-(2550,49)
                      ): ')' (2550,49)-(2550,50)
                    compound_statement (2551,11)-(2553,12)
                      {: '{' (2551,11)-(2551,12)
                      goto_statement (2552,13)-(2552,33)
                        goto: 'goto' (2552,13)-(2552,17)
                        statement_identifier: 'scan_completed' (2552,18)-(2552,32)
                        ;: ';' (2552,32)-(2552,33)
                      }: '}' (2553,11)-(2553,12)
                  break_statement (2555,11)-(2555,17)
                    break: 'break' (2555,11)-(2555,16)
                    ;: ';' (2555,16)-(2555,17)
                  }: '}' (2556,9)-(2556,10)
              case_statement (2557,9)-(2703,10)
                case: 'case' (2557,9)-(2557,13)
                identifier: 'SCAN_MODE_VAR_STATEMENT' (2557,14)-(2557,37)
                :: ':' (2557,37)-(2557,38)
                compound_statement (2558,9)-(2703,10)
                  {: '{' (2558,9)-(2558,10)
                  preproc_if (2559,1)-(2586,7)
                    #if: '#if' (2559,1)-(2559,4)
                    call_expression (2559,5)-(2559,27)
                      identifier: 'ENABLED' (2559,5)-(2559,12)
                      argument_list (2559,13)-(2559,27)
                        (: '(' (2559,13)-(2559,14)
                        identifier: 'JERRY_ES2015' (2559,14)-(2559,26)
                        ): ')' (2559,26)-(2559,27)
                    
: '
' (2559,27)-(2560,1)
                    if_statement (2560,11)-(2585,12)
                      if: 'if' (2560,11)-(2560,13)
                      parenthesized_expression (2560,14)-(2560,69)
                        (: '(' (2560,14)-(2560,15)
                        binary_expression (2560,15)-(2560,68)
                          binary_expression (2560,15)-(2560,40)
                            identifier: 'type' (2560,15)-(2560,19)
                            ==: '==' (2560,20)-(2560,22)
                            identifier: 'LEXER_LEFT_SQUARE' (2560,23)-(2560,40)
                          ||: '||' (2560,41)-(2560,43)
                          binary_expression (2560,44)-(2560,68)
                            identifier: 'type' (2560,44)-(2560,48)
                            ==: '==' (2560,49)-(2560,51)
                            identifier: 'LEXER_LEFT_BRACE' (2560,52)-(2560,68)
                        ): ')' (2560,68)-(2560,69)
                      compound_statement (2561,11)-(2585,12)
                        {: '{' (2561,11)-(2561,12)
                        declaration (2562,13)-(2562,56)
                          primitive_type: 'uint8_t' (2562,13)-(2562,20)
                          init_declarator (2562,21)-(2562,55)
                            identifier: 'binding_type' (2562,21)-(2562,33)
                            =: '=' (2562,34)-(2562,35)
                            identifier: 'SCANNER_BINDING_VAR' (2562,36)-(2562,55)
                          ;: ';' (2562,55)-(2562,56)
                        if_statement (2564,13)-(2571,14)
                          if: 'if' (2564,13)-(2564,15)
                          parenthesized_expression (2564,16)-(2564,86)
                            (: '(' (2564,16)-(2564,17)
                            binary_expression (2564,17)-(2564,85)
                              binary_expression (2564,17)-(2564,44)
                                identifier: 'stack_top' (2564,17)-(2564,26)
                                ==: '==' (2564,27)-(2564,29)
                                identifier: 'SCAN_STACK_LET' (2564,30)-(2564,44)
                              ||: '||' (2564,45)-(2564,47)
                              binary_expression (2564,48)-(2564,85)
                                identifier: 'stack_top' (2564,48)-(2564,57)
                                ==: '==' (2564,58)-(2564,60)
                                identifier: 'SCAN_STACK_FOR_LET_START' (2564,61)-(2564,85)
                            ): ')' (2564,85)-(2564,86)
                          compound_statement (2565,13)-(2567,14)
                            {: '{' (2565,13)-(2565,14)
                            expression_statement (2566,15)-(2566,50)
                              assignment_expression (2566,15)-(2566,49)
                                identifier: 'binding_type' (2566,15)-(2566,27)
                                =: '=' (2566,28)-(2566,29)
                                identifier: 'SCANNER_BINDING_LET' (2566,30)-(2566,49)
                              ;: ';' (2566,49)-(2566,50)
                            }: '}' (2567,13)-(2567,14)
                          else_clause (2568,13)-(2571,14)
                            else: 'else' (2568,13)-(2568,17)
                            if_statement (2568,18)-(2571,14)
                              if: 'if' (2568,18)-(2568,20)
                              parenthesized_expression (2568,21)-(2568,95)
                                (: '(' (2568,21)-(2568,22)
                                binary_expression (2568,22)-(2568,94)
                                  binary_expression (2568,22)-(2568,51)
                                    identifier: 'stack_top' (2568,22)-(2568,31)
                                    ==: '==' (2568,32)-(2568,34)
                                    identifier: 'SCAN_STACK_CONST' (2568,35)-(2568,51)
                                  ||: '||' (2568,52)-(2568,54)
                                  binary_expression (2568,55)-(2568,94)
                                    identifier: 'stack_top' (2568,55)-(2568,64)
                                    ==: '==' (2568,65)-(2568,67)
                                    identifier: 'SCAN_STACK_FOR_CONST_START' (2568,68)-(2568,94)
                                ): ')' (2568,94)-(2568,95)
                              compound_statement (2569,13)-(2571,14)
                                {: '{' (2569,13)-(2569,14)
                                expression_statement (2570,15)-(2570,52)
                                  assignment_expression (2570,15)-(2570,51)
                                    identifier: 'binding_type' (2570,15)-(2570,27)
                                    =: '=' (2570,28)-(2570,29)
                                    identifier: 'SCANNER_BINDING_CONST' (2570,30)-(2570,51)
                                  ;: ';' (2570,51)-(2570,52)
                                }: '}' (2571,13)-(2571,14)
                        expression_statement (2573,13)-(2573,99)
                          call_expression (2573,13)-(2573,98)
                            identifier: 'scanner_push_destructuring_pattern' (2573,13)-(2573,47)
                            argument_list (2573,48)-(2573,98)
                              (: '(' (2573,48)-(2573,49)
                              identifier: 'context_p' (2573,49)-(2573,58)
                              ,: ',' (2573,58)-(2573,59)
                              pointer_expression (2573,60)-(2573,76)
                                &: '&' (2573,60)-(2573,61)
                                identifier: 'scanner_context' (2573,61)-(2573,76)
                              ,: ',' (2573,76)-(2573,77)
                              identifier: 'binding_type' (2573,78)-(2573,90)
                              ,: ',' (2573,90)-(2573,91)
                              false: 'false' (2573,92)-(2573,97)
                              ): ')' (2573,97)-(2573,98)
                          ;: ';' (2573,98)-(2573,99)
                        if_statement (2575,13)-(2580,14)
                          if: 'if' (2575,13)-(2575,15)
                          parenthesized_expression (2575,16)-(2575,43)
                            (: '(' (2575,16)-(2575,17)
                            binary_expression (2575,17)-(2575,42)
                              identifier: 'type' (2575,17)-(2575,21)
                              ==: '==' (2575,22)-(2575,24)
                              identifier: 'LEXER_LEFT_SQUARE' (2575,25)-(2575,42)
                            ): ')' (2575,42)-(2575,43)
                          compound_statement (2576,13)-(2580,14)
                            {: '{' (2576,13)-(2576,14)
                            expression_statement (2577,15)-(2577,77)
                              call_expression (2577,15)-(2577,76)
                                identifier: 'parser_stack_push_uint8' (2577,15)-(2577,38)
                                argument_list (2577,39)-(2577,76)
                                  (: '(' (2577,39)-(2577,40)
                                  identifier: 'context_p' (2577,40)-(2577,49)
                                  ,: ',' (2577,49)-(2577,50)
                                  identifier: 'SCAN_STACK_ARRAY_LITERAL' (2577,51)-(2577,75)
                                  ): ')' (2577,75)-(2577,76)
                              ;: ';' (2577,76)-(2577,77)
                            expression_statement (2578,15)-(2578,56)
                              assignment_expression (2578,15)-(2578,55)
                                field_expression (2578,15)-(2578,35)
                                  identifier: 'scanner_context' (2578,15)-(2578,30)
                                  .: '.' (2578,30)-(2578,31)
                                  field_identifier: 'mode' (2578,31)-(2578,35)
                                =: '=' (2578,36)-(2578,37)
                                identifier: 'SCAN_MODE_BINDING' (2578,38)-(2578,55)
                              ;: ';' (2578,55)-(2578,56)
                            break_statement (2579,15)-(2579,21)
                              break: 'break' (2579,15)-(2579,20)
                              ;: ';' (2579,20)-(2579,21)
                            }: '}' (2580,13)-(2580,14)
                        expression_statement (2582,13)-(2582,76)
                          call_expression (2582,13)-(2582,75)
                            identifier: 'parser_stack_push_uint8' (2582,13)-(2582,36)
                            argument_list (2582,37)-(2582,75)
                              (: '(' (2582,37)-(2582,38)
                              identifier: 'context_p' (2582,38)-(2582,47)
                              ,: ',' (2582,47)-(2582,48)
                              identifier: 'SCAN_STACK_OBJECT_LITERAL' (2582,49)-(2582,74)
                              ): ')' (2582,74)-(2582,75)
                          ;: ';' (2582,75)-(2582,76)
                        expression_statement (2583,13)-(2583,60)
                          assignment_expression (2583,13)-(2583,59)
                            field_expression (2583,13)-(2583,33)
                              identifier: 'scanner_context' (2583,13)-(2583,28)
                              .: '.' (2583,28)-(2583,29)
                              field_identifier: 'mode' (2583,29)-(2583,33)
                            =: '=' (2583,34)-(2583,35)
                            identifier: 'SCAN_MODE_PROPERTY_NAME' (2583,36)-(2583,59)
                          ;: ';' (2583,59)-(2583,60)
                        continue_statement (2584,13)-(2584,22)
                          continue: 'continue' (2584,13)-(2584,21)
                          ;: ';' (2584,21)-(2584,22)
                        }: '}' (2585,11)-(2585,12)
                    #endif: '#endif' (2586,1)-(2586,7)
                  comment: '/* ENABLED (JERRY_ES2015) */' (2586,8)-(2586,36)
                  if_statement (2588,11)-(2592,12)
                    if: 'if' (2588,11)-(2588,13)
                    parenthesized_expression (2588,14)-(2589,76)
                      (: '(' (2588,14)-(2588,15)
                      binary_expression (2588,15)-(2589,75)
                        binary_expression (2588,15)-(2588,36)
                          identifier: 'type' (2588,15)-(2588,19)
                          !=: '!=' (2588,20)-(2588,22)
                          identifier: 'LEXER_LITERAL' (2588,23)-(2588,36)
                        ||: '||' (2589,15)-(2589,17)
                        binary_expression (2589,18)-(2589,75)
                          field_expression (2589,18)-(2589,52)
                            field_expression (2589,18)-(2589,47)
                              field_expression (2589,18)-(2589,34)
                                identifier: 'context_p' (2589,18)-(2589,27)
                                ->: '->' (2589,27)-(2589,29)
                                field_identifier: 'token' (2589,29)-(2589,34)
                              .: '.' (2589,34)-(2589,35)
                              field_identifier: 'lit_location' (2589,35)-(2589,47)
                            .: '.' (2589,47)-(2589,48)
                            field_identifier: 'type' (2589,48)-(2589,52)
                          !=: '!=' (2589,53)-(2589,55)
                          identifier: 'LEXER_IDENT_LITERAL' (2589,56)-(2589,75)
                      ): ')' (2589,75)-(2589,76)
                    compound_statement (2590,11)-(2592,12)
                      {: '{' (2590,11)-(2590,12)
                      expression_statement (2591,13)-(2591,45)
                        call_expression (2591,13)-(2591,44)
                          identifier: 'scanner_raise_error' (2591,13)-(2591,32)
                          argument_list (2591,33)-(2591,44)
                            (: '(' (2591,33)-(2591,34)
                            identifier: 'context_p' (2591,34)-(2591,43)
                            ): ')' (2591,43)-(2591,44)
                        ;: ';' (2591,44)-(2591,45)
                      }: '}' (2592,11)-(2592,12)
                  declaration (2594,11)-(2594,95)
                    type_identifier: 'lexer_lit_location_t' (2594,11)-(2594,31)
                    init_declarator (2594,32)-(2594,94)
                      pointer_declarator (2594,32)-(2594,42)
                        *: '*' (2594,32)-(2594,33)
                        identifier: 'literal_p' (2594,33)-(2594,42)
                      =: '=' (2594,43)-(2594,44)
                      call_expression (2594,45)-(2594,94)
                        identifier: 'scanner_add_literal' (2594,45)-(2594,64)
                        argument_list (2594,65)-(2594,94)
                          (: '(' (2594,65)-(2594,66)
                          identifier: 'context_p' (2594,66)-(2594,75)
                          ,: ',' (2594,75)-(2594,76)
                          pointer_expression (2594,77)-(2594,93)
                            &: '&' (2594,77)-(2594,78)
                            identifier: 'scanner_context' (2594,78)-(2594,93)
                          ): ')' (2594,93)-(2594,94)
                    ;: ';' (2594,94)-(2594,95)
                  preproc_if (2596,1)-(2650,7)
                    #if: '#if' (2596,1)-(2596,4)
                    call_expression (2596,5)-(2596,27)
                      identifier: 'ENABLED' (2596,5)-(2596,12)
                      argument_list (2596,13)-(2596,27)
                        (: '(' (2596,13)-(2596,14)
                        identifier: 'JERRY_ES2015' (2596,14)-(2596,26)
                        ): ')' (2596,26)-(2596,27)
                    
: '
' (2596,27)-(2597,1)
                    if_statement (2597,11)-(2640,12)
                      if: 'if' (2597,11)-(2597,13)
                      parenthesized_expression (2597,14)-(2597,84)
                        (: '(' (2597,14)-(2597,15)
                        binary_expression (2597,15)-(2597,83)
                          binary_expression (2597,15)-(2597,42)
                            identifier: 'stack_top' (2597,15)-(2597,24)
                            !=: '!=' (2597,25)-(2597,27)
                            identifier: 'SCAN_STACK_VAR' (2597,28)-(2597,42)
                          &&: '&&' (2597,43)-(2597,45)
                          binary_expression (2597,46)-(2597,83)
                            identifier: 'stack_top' (2597,46)-(2597,55)
                            !=: '!=' (2597,56)-(2597,58)
                            identifier: 'SCAN_STACK_FOR_VAR_START' (2597,59)-(2597,83)
                        ): ')' (2597,83)-(2597,84)
                      compound_statement (2598,11)-(2625,12)
                        {: '{' (2598,11)-(2598,12)
                        expression_statement (2599,13)-(2599,63)
                          call_expression (2599,13)-(2599,62)
                            identifier: 'scanner_detect_invalid_let' (2599,13)-(2599,39)
                            argument_list (2599,40)-(2599,62)
                              (: '(' (2599,40)-(2599,41)
                              identifier: 'context_p' (2599,41)-(2599,50)
                              ,: ',' (2599,50)-(2599,51)
                              identifier: 'literal_p' (2599,52)-(2599,61)
                              ): ')' (2599,61)-(2599,62)
                          ;: ';' (2599,62)-(2599,63)
                        if_statement (2601,13)-(2609,14)
                          if: 'if' (2601,13)-(2601,15)
                          parenthesized_expression (2601,16)-(2601,86)
                            (: '(' (2601,16)-(2601,17)
                            binary_expression (2601,17)-(2601,85)
                              binary_expression (2601,17)-(2601,44)
                                identifier: 'stack_top' (2601,17)-(2601,26)
                                ==: '==' (2601,27)-(2601,29)
                                identifier: 'SCAN_STACK_LET' (2601,30)-(2601,44)
                              ||: '||' (2601,45)-(2601,47)
                              binary_expression (2601,48)-(2601,85)
                                identifier: 'stack_top' (2601,48)-(2601,57)
                                ==: '==' (2601,58)-(2601,60)
                                identifier: 'SCAN_STACK_FOR_LET_START' (2601,61)-(2601,85)
                            ): ')' (2601,85)-(2601,86)
                          compound_statement (2602,13)-(2604,14)
                            {: '{' (2602,13)-(2602,14)
                            expression_statement (2603,15)-(2603,57)
                              assignment_expression (2603,15)-(2603,56)
                                field_expression (2603,15)-(2603,30)
                                  identifier: 'literal_p' (2603,15)-(2603,24)
                                  ->: '->' (2603,24)-(2603,26)
                                  field_identifier: 'type' (2603,26)-(2603,30)
                                |=: '|=' (2603,31)-(2603,33)
                                identifier: 'SCANNER_LITERAL_IS_LET' (2603,34)-(2603,56)
                              ;: ';' (2603,56)-(2603,57)
                            }: '}' (2604,13)-(2604,14)
                          else_clause (2605,13)-(2609,14)
                            else: 'else' (2605,13)-(2605,17)
                            compound_statement (2606,13)-(2609,14)
                              {: '{' (2606,13)-(2606,14)
                              expression_statement (2607,15)-(2607,103)
                                call_expression (2607,15)-(2607,102)
                                  identifier: 'JERRY_ASSERT' (2607,15)-(2607,27)
                                  argument_list (2607,28)-(2607,102)
                                    (: '(' (2607,28)-(2607,29)
                                    binary_expression (2607,29)-(2607,101)
                                      binary_expression (2607,29)-(2607,58)
                                        identifier: 'stack_top' (2607,29)-(2607,38)
                                        ==: '==' (2607,39)-(2607,41)
                                        identifier: 'SCAN_STACK_CONST' (2607,42)-(2607,58)
                                      ||: '||' (2607,59)-(2607,61)
                                      binary_expression (2607,62)-(2607,101)
                                        identifier: 'stack_top' (2607,62)-(2607,71)
                                        ==: '==' (2607,72)-(2607,74)
                                        identifier: 'SCAN_STACK_FOR_CONST_START' (2607,75)-(2607,101)
                                    ): ')' (2607,101)-(2607,102)
                                ;: ';' (2607,102)-(2607,103)
                              expression_statement (2608,15)-(2608,59)
                                assignment_expression (2608,15)-(2608,58)
                                  field_expression (2608,15)-(2608,30)
                                    identifier: 'literal_p' (2608,15)-(2608,24)
                                    ->: '->' (2608,24)-(2608,26)
                                    field_identifier: 'type' (2608,26)-(2608,30)
                                  |=: '|=' (2608,31)-(2608,33)
                                  identifier: 'SCANNER_LITERAL_IS_CONST' (2608,34)-(2608,58)
                                ;: ';' (2608,58)-(2608,59)
                              }: '}' (2609,13)-(2609,14)
                        expression_statement (2611,13)-(2611,42)
                          call_expression (2611,13)-(2611,41)
                            identifier: 'lexer_next_token' (2611,13)-(2611,29)
                            argument_list (2611,30)-(2611,41)
                              (: '(' (2611,30)-(2611,31)
                              identifier: 'context_p' (2611,31)-(2611,40)
                              ): ')' (2611,40)-(2611,41)
                          ;: ';' (2611,41)-(2611,42)
                        if_statement (2613,13)-(2624,14)
                          if: 'if' (2613,13)-(2613,15)
                          parenthesized_expression (2613,16)-(2613,59)
                            (: '(' (2613,16)-(2613,17)
                            binary_expression (2613,17)-(2613,58)
                              field_expression (2613,17)-(2613,32)
                                identifier: 'literal_p' (2613,17)-(2613,26)
                                ->: '->' (2613,26)-(2613,28)
                                field_identifier: 'type' (2613,28)-(2613,32)
                              &: '&' (2613,33)-(2613,34)
                              identifier: 'SCANNER_LITERAL_IS_USED' (2613,35)-(2613,58)
                            ): ')' (2613,58)-(2613,59)
                          compound_statement (2614,13)-(2616,14)
                            {: '{' (2614,13)-(2614,14)
                            expression_statement (2615,15)-(2615,63)
                              assignment_expression (2615,15)-(2615,62)
                                field_expression (2615,15)-(2615,30)
                                  identifier: 'literal_p' (2615,15)-(2615,24)
                                  ->: '->' (2615,24)-(2615,26)
                                  field_identifier: 'type' (2615,26)-(2615,30)
                                |=: '|=' (2615,31)-(2615,33)
                                identifier: 'SCANNER_LITERAL_EARLY_CREATE' (2615,34)-(2615,62)
                              ;: ';' (2615,62)-(2615,63)
                            }: '}' (2616,13)-(2616,14)
                          else_clause (2617,13)-(2624,14)
                            else: 'else' (2617,13)-(2617,17)
                            if_statement (2617,18)-(2624,14)
                              if: 'if' (2617,18)-(2617,20)
                              parenthesized_expression (2617,21)-(2617,60)
                                (: '(' (2617,21)-(2617,22)
                                binary_expression (2617,22)-(2617,59)
                                  field_expression (2617,22)-(2617,43)
                                    field_expression (2617,22)-(2617,38)
                                      identifier: 'context_p' (2617,22)-(2617,31)
                                      ->: '->' (2617,31)-(2617,33)
                                      field_identifier: 'token' (2617,33)-(2617,38)
                                    .: '.' (2617,38)-(2617,39)
                                    field_identifier: 'type' (2617,39)-(2617,43)
                                  ==: '==' (2617,44)-(2617,46)
                                  identifier: 'LEXER_ASSIGN' (2617,47)-(2617,59)
                                ): ')' (2617,59)-(2617,60)
                              compound_statement (2618,13)-(2624,14)
                                {: '{' (2618,13)-(2618,14)
                                declaration (2619,15)-(2619,57)
                                  type_identifier: 'scanner_binding_literal_t' (2619,15)-(2619,40)
                                  identifier: 'binding_literal' (2619,41)-(2619,56)
                                  ;: ';' (2619,56)-(2619,57)
                                expression_statement (2620,15)-(2620,53)
                                  assignment_expression (2620,15)-(2620,52)
                                    field_expression (2620,15)-(2620,40)
                                      identifier: 'binding_literal' (2620,15)-(2620,30)
                                      .: '.' (2620,30)-(2620,31)
                                      field_identifier: 'literal_p' (2620,31)-(2620,40)
                                    =: '=' (2620,41)-(2620,42)
                                    identifier: 'literal_p' (2620,43)-(2620,52)
                                  ;: ';' (2620,52)-(2620,53)
                                expression_statement (2622,15)-(2622,99)
                                  call_expression (2622,15)-(2622,98)
                                    identifier: 'parser_stack_push' (2622,15)-(2622,32)
                                    argument_list (2622,33)-(2622,98)
                                      (: '(' (2622,33)-(2622,34)
                                      identifier: 'context_p' (2622,34)-(2622,43)
                                      ,: ',' (2622,43)-(2622,44)
                                      pointer_expression (2622,45)-(2622,61)
                                        &: '&' (2622,45)-(2622,46)
                                        identifier: 'binding_literal' (2622,46)-(2622,61)
                                      ,: ',' (2622,61)-(2622,62)
                                      sizeof_expression (2622,63)-(2622,97)
                                        sizeof: 'sizeof' (2622,63)-(2622,69)
                                        parenthesized_expression (2622,70)-(2622,97)
                                          (: '(' (2622,70)-(2622,71)
                                          identifier: 'scanner_binding_literal_t' (2622,71)-(2622,96)
                                          ): ')' (2622,96)-(2622,97)
                                      ): ')' (2622,97)-(2622,98)
                                  ;: ';' (2622,98)-(2622,99)
                                expression_statement (2623,15)-(2623,76)
                                  call_expression (2623,15)-(2623,75)
                                    identifier: 'parser_stack_push_uint8' (2623,15)-(2623,38)
                                    argument_list (2623,39)-(2623,75)
                                      (: '(' (2623,39)-(2623,40)
                                      identifier: 'context_p' (2623,40)-(2623,49)
                                      ,: ',' (2623,49)-(2623,50)
                                      identifier: 'SCAN_STACK_BINDING_INIT' (2623,51)-(2623,74)
                                      ): ')' (2623,74)-(2623,75)
                                  ;: ';' (2623,75)-(2623,76)
                                }: '}' (2624,13)-(2624,14)
                        }: '}' (2625,11)-(2625,12)
                      else_clause (2626,11)-(2640,12)
                        else: 'else' (2626,11)-(2626,15)
                        compound_statement (2627,11)-(2640,12)
                          {: '{' (2627,11)-(2627,12)
                          if_statement (2628,13)-(2637,14)
                            if: 'if' (2628,13)-(2628,15)
                            parenthesized_expression (2628,16)-(2628,61)
                              (: '(' (2628,16)-(2628,17)
                              unary_expression (2628,17)-(2628,60)
                                !: '!' (2628,17)-(2628,18)
                                parenthesized_expression (2628,18)-(2628,60)
                                  (: '(' (2628,18)-(2628,19)
                                  binary_expression (2628,19)-(2628,59)
                                    field_expression (2628,19)-(2628,34)
                                      identifier: 'literal_p' (2628,19)-(2628,28)
                                      ->: '->' (2628,28)-(2628,30)
                                      field_identifier: 'type' (2628,30)-(2628,34)
                                    &: '&' (2628,35)-(2628,36)
                                    identifier: 'SCANNER_LITERAL_IS_VAR' (2628,37)-(2628,59)
                                  ): ')' (2628,59)-(2628,60)
                              ): ')' (2628,60)-(2628,61)
                            compound_statement (2629,13)-(2637,14)
                              {: '{' (2629,13)-(2629,14)
                              expression_statement (2630,15)-(2630,83)
                                call_expression (2630,15)-(2630,82)
                                  identifier: 'scanner_detect_invalid_var' (2630,15)-(2630,41)
                                  argument_list (2630,42)-(2630,82)
                                    (: '(' (2630,42)-(2630,43)
                                    identifier: 'context_p' (2630,43)-(2630,52)
                                    ,: ',' (2630,52)-(2630,53)
                                    pointer_expression (2630,54)-(2630,70)
                                      &: '&' (2630,54)-(2630,55)
                                      identifier: 'scanner_context' (2630,55)-(2630,70)
                                    ,: ',' (2630,70)-(2630,71)
                                    identifier: 'literal_p' (2630,72)-(2630,81)
                                    ): ')' (2630,81)-(2630,82)
                                ;: ';' (2630,82)-(2630,83)
                              expression_statement (2631,15)-(2631,57)
                                assignment_expression (2631,15)-(2631,56)
                                  field_expression (2631,15)-(2631,30)
                                    identifier: 'literal_p' (2631,15)-(2631,24)
                                    ->: '->' (2631,24)-(2631,26)
                                    field_identifier: 'type' (2631,26)-(2631,30)
                                  |=: '|=' (2631,31)-(2631,33)
                                  identifier: 'SCANNER_LITERAL_IS_VAR' (2631,34)-(2631,56)
                                ;: ';' (2631,56)-(2631,57)
                              if_statement (2633,15)-(2636,16)
                                if: 'if' (2633,15)-(2633,17)
                                parenthesized_expression (2633,18)-(2633,102)
                                  (: '(' (2633,18)-(2633,19)
                                  binary_expression (2633,19)-(2633,101)
                                    field_expression (2633,19)-(2633,70)
                                      field_expression (2633,19)-(2633,56)
                                        identifier: 'scanner_context' (2633,19)-(2633,34)
                                        .: '.' (2633,34)-(2633,35)
                                        field_identifier: 'active_literal_pool_p' (2633,35)-(2633,56)
                                      ->: '->' (2633,56)-(2633,58)
                                      field_identifier: 'status_flags' (2633,58)-(2633,70)
                                    &: '&' (2633,71)-(2633,72)
                                    identifier: 'SCANNER_LITERAL_POOL_IN_WITH' (2633,73)-(2633,101)
                                  ): ')' (2633,101)-(2633,102)
                                compound_statement (2634,15)-(2636,16)
                                  {: '{' (2634,15)-(2634,16)
                                  expression_statement (2635,17)-(2635,59)
                                    assignment_expression (2635,17)-(2635,58)
                                      field_expression (2635,17)-(2635,32)
                                        identifier: 'literal_p' (2635,17)-(2635,26)
                                        ->: '->' (2635,26)-(2635,28)
                                        field_identifier: 'type' (2635,28)-(2635,32)
                                      |=: '|=' (2635,33)-(2635,35)
                                      identifier: 'SCANNER_LITERAL_NO_REG' (2635,36)-(2635,58)
                                    ;: ';' (2635,58)-(2635,59)
                                  }: '}' (2636,15)-(2636,16)
                              }: '}' (2637,13)-(2637,14)
                          expression_statement (2639,13)-(2639,42)
                            call_expression (2639,13)-(2639,41)
                              identifier: 'lexer_next_token' (2639,13)-(2639,29)
                              argument_list (2639,30)-(2639,41)
                                (: '(' (2639,30)-(2639,31)
                                identifier: 'context_p' (2639,31)-(2639,40)
                                ): ')' (2639,40)-(2639,41)
                            ;: ';' (2639,41)-(2639,42)
                          }: '}' (2640,11)-(2640,12)
                    preproc_else (2641,1)-(2649,40)
                      #else: '#else' (2641,1)-(2641,6)
                      comment: '/* !ENABLED (JERRY_ES2015) */' (2641,7)-(2641,36)
                      expression_statement (2642,11)-(2642,53)
                        assignment_expression (2642,11)-(2642,52)
                          field_expression (2642,11)-(2642,26)
                            identifier: 'literal_p' (2642,11)-(2642,20)
                            ->: '->' (2642,20)-(2642,22)
                            field_identifier: 'type' (2642,22)-(2642,26)
                          |=: '|=' (2642,27)-(2642,29)
                          identifier: 'SCANNER_LITERAL_IS_VAR' (2642,30)-(2642,52)
                        ;: ';' (2642,52)-(2642,53)
                      if_statement (2644,11)-(2647,12)
                        if: 'if' (2644,11)-(2644,13)
                        parenthesized_expression (2644,14)-(2644,98)
                          (: '(' (2644,14)-(2644,15)
                          binary_expression (2644,15)-(2644,97)
                            field_expression (2644,15)-(2644,66)
                              field_expression (2644,15)-(2644,52)
                                identifier: 'scanner_context' (2644,15)-(2644,30)
                                .: '.' (2644,30)-(2644,31)
                                field_identifier: 'active_literal_pool_p' (2644,31)-(2644,52)
                              ->: '->' (2644,52)-(2644,54)
                              field_identifier: 'status_flags' (2644,54)-(2644,66)
                            &: '&' (2644,67)-(2644,68)
                            identifier: 'SCANNER_LITERAL_POOL_IN_WITH' (2644,69)-(2644,97)
                          ): ')' (2644,97)-(2644,98)
                        compound_statement (2645,11)-(2647,12)
                          {: '{' (2645,11)-(2645,12)
                          expression_statement (2646,13)-(2646,55)
                            assignment_expression (2646,13)-(2646,54)
                              field_expression (2646,13)-(2646,28)
                                identifier: 'literal_p' (2646,13)-(2646,22)
                                ->: '->' (2646,22)-(2646,24)
                                field_identifier: 'type' (2646,24)-(2646,28)
                              |=: '|=' (2646,29)-(2646,31)
                              identifier: 'SCANNER_LITERAL_NO_REG' (2646,32)-(2646,54)
                            ;: ';' (2646,54)-(2646,55)
                          }: '}' (2647,11)-(2647,12)
                      expression_statement (2649,11)-(2649,40)
                        call_expression (2649,11)-(2649,39)
                          identifier: 'lexer_next_token' (2649,11)-(2649,27)
                          argument_list (2649,28)-(2649,39)
                            (: '(' (2649,28)-(2649,29)
                            identifier: 'context_p' (2649,29)-(2649,38)
                            ): ')' (2649,38)-(2649,39)
                        ;: ';' (2649,39)-(2649,40)
                    #endif: '#endif' (2650,1)-(2650,7)
                  comment: '/* ENABLED (JERRY_ES2015) */' (2650,8)-(2650,36)
                  preproc_if (2652,1)-(2657,7)
                    #if: '#if' (2652,1)-(2652,4)
                    call_expression (2652,5)-(2652,41)
                      identifier: 'ENABLED' (2652,5)-(2652,12)
                      argument_list (2652,13)-(2652,41)
                        (: '(' (2652,13)-(2652,14)
                        identifier: 'JERRY_ES2015_MODULE_SYSTEM' (2652,14)-(2652,40)
                        ): ')' (2652,40)-(2652,41)
                    
: '
' (2652,41)-(2653,1)
                    if_statement (2653,11)-(2656,12)
                      if: 'if' (2653,11)-(2653,13)
                      parenthesized_expression (2653,14)-(2653,100)
                        (: '(' (2653,14)-(2653,15)
                        binary_expression (2653,15)-(2653,99)
                          field_expression (2653,15)-(2653,66)
                            field_expression (2653,15)-(2653,52)
                              identifier: 'scanner_context' (2653,15)-(2653,30)
                              .: '.' (2653,30)-(2653,31)
                              field_identifier: 'active_literal_pool_p' (2653,31)-(2653,52)
                            ->: '->' (2653,52)-(2653,54)
                            field_identifier: 'status_flags' (2653,54)-(2653,66)
                          &: '&' (2653,67)-(2653,68)
                          identifier: 'SCANNER_LITERAL_POOL_IN_EXPORT' (2653,69)-(2653,99)
                        ): ')' (2653,99)-(2653,100)
                      compound_statement (2654,11)-(2656,12)
                        {: '{' (2654,11)-(2654,12)
                        expression_statement (2655,13)-(2655,55)
                          assignment_expression (2655,13)-(2655,54)
                            field_expression (2655,13)-(2655,28)
                              identifier: 'literal_p' (2655,13)-(2655,22)
                              ->: '->' (2655,22)-(2655,24)
                              field_identifier: 'type' (2655,24)-(2655,28)
                            |=: '|=' (2655,29)-(2655,31)
                            identifier: 'SCANNER_LITERAL_NO_REG' (2655,32)-(2655,54)
                          ;: ';' (2655,54)-(2655,55)
                        }: '}' (2656,11)-(2656,12)
                    #endif: '#endif' (2657,1)-(2657,7)
                  comment: '/* ENABLED (JERRY_ES2015_MODULE_SYSTEM) */' (2657,8)-(2657,50)
                  switch_statement (2659,11)-(2671,12)
                    switch: 'switch' (2659,11)-(2659,17)
                    parenthesized_expression (2659,18)-(2659,41)
                      (: '(' (2659,18)-(2659,19)
                      field_expression (2659,19)-(2659,40)
                        field_expression (2659,19)-(2659,35)
                          identifier: 'context_p' (2659,19)-(2659,28)
                          ->: '->' (2659,28)-(2659,30)
                          field_identifier: 'token' (2659,30)-(2659,35)
                        .: '.' (2659,35)-(2659,36)
                        field_identifier: 'type' (2659,36)-(2659,40)
                      ): ')' (2659,40)-(2659,41)
                    compound_statement (2660,11)-(2671,12)
                      {: '{' (2660,11)-(2660,12)
                      case_statement (2661,13)-(2665,14)
                        case: 'case' (2661,13)-(2661,17)
                        identifier: 'LEXER_ASSIGN' (2661,18)-(2661,30)
                        :: ':' (2661,30)-(2661,31)
                        compound_statement (2662,13)-(2665,14)
                          {: '{' (2662,13)-(2662,14)
                          expression_statement (2663,15)-(2663,67)
                            assignment_expression (2663,15)-(2663,66)
                              field_expression (2663,15)-(2663,35)
                                identifier: 'scanner_context' (2663,15)-(2663,30)
                                .: '.' (2663,30)-(2663,31)
                                field_identifier: 'mode' (2663,31)-(2663,35)
                              =: '=' (2663,36)-(2663,37)
                              identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (2663,38)-(2663,66)
                            ;: ';' (2663,66)-(2663,67)
                          comment: '/* FALLTHRU */' (2664,15)-(2664,29)
                          }: '}' (2665,13)-(2665,14)
                      case_statement (2666,13)-(2670,14)
                        case: 'case' (2666,13)-(2666,17)
                        identifier: 'LEXER_COMMA' (2666,18)-(2666,29)
                        :: ':' (2666,29)-(2666,30)
                        compound_statement (2667,13)-(2670,14)
                          {: '{' (2667,13)-(2667,14)
                          expression_statement (2668,15)-(2668,44)
                            call_expression (2668,15)-(2668,43)
                              identifier: 'lexer_next_token' (2668,15)-(2668,31)
                              argument_list (2668,32)-(2668,43)
                                (: '(' (2668,32)-(2668,33)
                                identifier: 'context_p' (2668,33)-(2668,42)
                                ): ')' (2668,42)-(2668,43)
                            ;: ';' (2668,43)-(2668,44)
                          continue_statement (2669,15)-(2669,24)
                            continue: 'continue' (2669,15)-(2669,23)
                            ;: ';' (2669,23)-(2669,24)
                          }: '}' (2670,13)-(2670,14)
                      }: '}' (2671,11)-(2671,12)
                  if_statement (2673,11)-(2688,12)
                    if: 'if' (2673,11)-(2673,13)
                    parenthesized_expression (2673,14)-(2673,48)
                      (: '(' (2673,14)-(2673,15)
                      call_expression (2673,15)-(2673,47)
                        identifier: 'SCANNER_IS_FOR_START' (2673,15)-(2673,35)
                        argument_list (2673,36)-(2673,47)
                          (: '(' (2673,36)-(2673,37)
                          identifier: 'stack_top' (2673,37)-(2673,46)
                          ): ')' (2673,46)-(2673,47)
                      ): ')' (2673,47)-(2673,48)
                    compound_statement (2674,11)-(2688,12)
                      {: '{' (2674,11)-(2674,12)
                      preproc_if (2675,1)-(2677,7)
                        #if: '#if' (2675,1)-(2675,4)
                        call_expression (2675,5)-(2675,41)
                          identifier: 'ENABLED' (2675,5)-(2675,12)
                          argument_list (2675,13)-(2675,41)
                            (: '(' (2675,13)-(2675,14)
                            identifier: 'JERRY_ES2015_MODULE_SYSTEM' (2675,14)-(2675,40)
                            ): ')' (2675,40)-(2675,41)
                        
: '
' (2675,41)-(2676,1)
                        expression_statement (2676,13)-(2676,116)
                          call_expression (2676,13)-(2676,115)
                            identifier: 'JERRY_ASSERT' (2676,13)-(2676,25)
                            argument_list (2676,26)-(2676,115)
                              (: '(' (2676,26)-(2676,27)
                              unary_expression (2676,27)-(2676,114)
                                !: '!' (2676,27)-(2676,28)
                                parenthesized_expression (2676,28)-(2676,114)
                                  (: '(' (2676,28)-(2676,29)
                                  binary_expression (2676,29)-(2676,113)
                                    field_expression (2676,29)-(2676,80)
                                      field_expression (2676,29)-(2676,66)
                                        identifier: 'scanner_context' (2676,29)-(2676,44)
                                        .: '.' (2676,44)-(2676,45)
                                        field_identifier: 'active_literal_pool_p' (2676,45)-(2676,66)
                                      ->: '->' (2676,66)-(2676,68)
                                      field_identifier: 'status_flags' (2676,68)-(2676,80)
                                    &: '&' (2676,81)-(2676,82)
                                    identifier: 'SCANNER_LITERAL_POOL_IN_EXPORT' (2676,83)-(2676,113)
                                  ): ')' (2676,113)-(2676,114)
                              ): ')' (2676,114)-(2676,115)
                          ;: ';' (2676,115)-(2676,116)
                        #endif: '#endif' (2677,1)-(2677,7)
                      comment: '/* ENABLED (JERRY_ES2015_MODULE_SYSTEM) */' (2677,8)-(2677,50)
                      if_statement (2679,13)-(2684,14)
                        if: 'if' (2679,13)-(2679,15)
                        parenthesized_expression (2679,16)-(2681,49)
                          (: '(' (2679,16)-(2679,17)
                          binary_expression (2679,17)-(2681,48)
                            binary_expression (2679,17)-(2680,58)
                              binary_expression (2679,17)-(2679,57)
                                field_expression (2679,17)-(2679,38)
                                  field_expression (2679,17)-(2679,33)
                                    identifier: 'context_p' (2679,17)-(2679,26)
                                    ->: '->' (2679,26)-(2679,28)
                                    field_identifier: 'token' (2679,28)-(2679,33)
                                  .: '.' (2679,33)-(2679,34)
                                  field_identifier: 'type' (2679,34)-(2679,38)
                                !=: '!=' (2679,39)-(2679,41)
                                identifier: 'LEXER_SEMICOLON' (2679,42)-(2679,57)
                              &&: '&&' (2680,17)-(2680,19)
                              binary_expression (2680,20)-(2680,58)
                                field_expression (2680,20)-(2680,41)
                                  field_expression (2680,20)-(2680,36)
                                    identifier: 'context_p' (2680,20)-(2680,29)
                                    ->: '->' (2680,29)-(2680,31)
                                    field_identifier: 'token' (2680,31)-(2680,36)
                                  .: '.' (2680,36)-(2680,37)
                                  field_identifier: 'type' (2680,37)-(2680,41)
                                !=: '!=' (2680,42)-(2680,44)
                                identifier: 'LEXER_KEYW_IN' (2680,45)-(2680,58)
                            &&: '&&' (2681,17)-(2681,19)
                            unary_expression (2681,20)-(2681,48)
                              !: '!' (2681,20)-(2681,21)
                              call_expression (2681,21)-(2681,48)
                                identifier: 'SCANNER_IDENTIFIER_IS_OF' (2681,21)-(2681,45)
                                argument_list (2681,46)-(2681,48)
                                  (: '(' (2681,46)-(2681,47)
                                  ): ')' (2681,47)-(2681,48)
                          ): ')' (2681,48)-(2681,49)
                        compound_statement (2682,13)-(2684,14)
                          {: '{' (2682,13)-(2682,14)
                          expression_statement (2683,15)-(2683,47)
                            call_expression (2683,15)-(2683,46)
                              identifier: 'scanner_raise_error' (2683,15)-(2683,34)
                              argument_list (2683,35)-(2683,46)
                                (: '(' (2683,35)-(2683,36)
                                identifier: 'context_p' (2683,36)-(2683,45)
                                ): ')' (2683,45)-(2683,46)
                            ;: ';' (2683,46)-(2683,47)
                          }: '}' (2684,13)-(2684,14)
                      expression_statement (2686,13)-(2686,69)
                        assignment_expression (2686,13)-(2686,68)
                          field_expression (2686,13)-(2686,33)
                            identifier: 'scanner_context' (2686,13)-(2686,28)
                            .: '.' (2686,28)-(2686,29)
                            field_identifier: 'mode' (2686,29)-(2686,33)
                          =: '=' (2686,34)-(2686,35)
                          identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (2686,36)-(2686,68)
                        ;: ';' (2686,68)-(2686,69)
                      continue_statement (2687,13)-(2687,22)
                        continue: 'continue' (2687,13)-(2687,21)
                        ;: ';' (2687,21)-(2687,22)
                      }: '}' (2688,11)-(2688,12)
                  preproc_if (2690,1)-(2694,7)
                    #if: '#if' (2690,1)-(2690,4)
                    call_expression (2690,5)-(2690,27)
                      identifier: 'ENABLED' (2690,5)-(2690,12)
                      argument_list (2690,13)-(2690,27)
                        (: '(' (2690,13)-(2690,14)
                        identifier: 'JERRY_ES2015' (2690,14)-(2690,26)
                        ): ')' (2690,26)-(2690,27)
                    
: '
' (2690,27)-(2691,1)
                    expression_statement (2691,11)-(2691,118)
                      call_expression (2691,11)-(2691,117)
                        identifier: 'JERRY_ASSERT' (2691,11)-(2691,23)
                        argument_list (2691,24)-(2691,117)
                          (: '(' (2691,24)-(2691,25)
                          binary_expression (2691,25)-(2691,116)
                            binary_expression (2691,25)-(2691,83)
                              binary_expression (2691,25)-(2691,52)
                                identifier: 'stack_top' (2691,25)-(2691,34)
                                ==: '==' (2691,35)-(2691,37)
                                identifier: 'SCAN_STACK_VAR' (2691,38)-(2691,52)
                              ||: '||' (2691,53)-(2691,55)
                              binary_expression (2691,56)-(2691,83)
                                identifier: 'stack_top' (2691,56)-(2691,65)
                                ==: '==' (2691,66)-(2691,68)
                                identifier: 'SCAN_STACK_LET' (2691,69)-(2691,83)
                            ||: '||' (2691,84)-(2691,86)
                            binary_expression (2691,87)-(2691,116)
                              identifier: 'stack_top' (2691,87)-(2691,96)
                              ==: '==' (2691,97)-(2691,99)
                              identifier: 'SCAN_STACK_CONST' (2691,100)-(2691,116)
                          ): ')' (2691,116)-(2691,117)
                      ;: ';' (2691,117)-(2691,118)
                    preproc_else (2692,1)-(2693,54)
                      #else: '#else' (2692,1)-(2692,6)
                      comment: '/* !ENABLED (JERRY_ES2015) */' (2692,7)-(2692,36)
                      expression_statement (2693,11)-(2693,54)
                        call_expression (2693,11)-(2693,53)
                          identifier: 'JERRY_ASSERT' (2693,11)-(2693,23)
                          argument_list (2693,24)-(2693,53)
                            (: '(' (2693,24)-(2693,25)
                            binary_expression (2693,25)-(2693,52)
                              identifier: 'stack_top' (2693,25)-(2693,34)
                              ==: '==' (2693,35)-(2693,37)
                              identifier: 'SCAN_STACK_VAR' (2693,38)-(2693,52)
                            ): ')' (2693,52)-(2693,53)
                        ;: ';' (2693,53)-(2693,54)
                    #endif: '#endif' (2694,1)-(2694,7)
                  comment: '/* ENABLED (JERRY_ES2015) */' (2694,8)-(2694,36)
                  preproc_if (2696,1)-(2698,7)
                    #if: '#if' (2696,1)-(2696,4)
                    call_expression (2696,5)-(2696,41)
                      identifier: 'ENABLED' (2696,5)-(2696,12)
                      argument_list (2696,13)-(2696,41)
                        (: '(' (2696,13)-(2696,14)
                        identifier: 'JERRY_ES2015_MODULE_SYSTEM' (2696,14)-(2696,40)
                        ): ')' (2696,40)-(2696,41)
                    
: '
' (2696,41)-(2697,1)
                    expression_statement (2697,11)-(2697,109)
                      assignment_expression (2697,11)-(2697,108)
                        field_expression (2697,11)-(2697,62)
                          field_expression (2697,11)-(2697,48)
                            identifier: 'scanner_context' (2697,11)-(2697,26)
                            .: '.' (2697,26)-(2697,27)
                            field_identifier: 'active_literal_pool_p' (2697,27)-(2697,48)
                          ->: '->' (2697,48)-(2697,50)
                          field_identifier: 'status_flags' (2697,50)-(2697,62)
                        &=: '&=' (2697,63)-(2697,65)
                        cast_expression (2697,66)-(2697,108)
                          (: '(' (2697,66)-(2697,67)
                          type_descriptor (2697,67)-(2697,75)
                            primitive_type: 'uint16_t' (2697,67)-(2697,75)
                          ): ')' (2697,75)-(2697,76)
                          unary_expression (2697,77)-(2697,108)
                            ~: '~' (2697,77)-(2697,78)
                            identifier: 'SCANNER_LITERAL_POOL_IN_EXPORT' (2697,78)-(2697,108)
                      ;: ';' (2697,108)-(2697,109)
                    #endif: '#endif' (2698,1)-(2698,7)
                  comment: '/* ENABLED (JERRY_ES2015_MODULE_SYSTEM) */' (2698,8)-(2698,50)
                  expression_statement (2700,11)-(2700,58)
                    assignment_expression (2700,11)-(2700,57)
                      field_expression (2700,11)-(2700,31)
                        identifier: 'scanner_context' (2700,11)-(2700,26)
                        .: '.' (2700,26)-(2700,27)
                        field_identifier: 'mode' (2700,27)-(2700,31)
                      =: '=' (2700,32)-(2700,33)
                      identifier: 'SCAN_MODE_STATEMENT_END' (2700,34)-(2700,57)
                    ;: ';' (2700,57)-(2700,58)
                  expression_statement (2701,11)-(2701,46)
                    call_expression (2701,11)-(2701,45)
                      identifier: 'parser_stack_pop_uint8' (2701,11)-(2701,33)
                      argument_list (2701,34)-(2701,45)
                        (: '(' (2701,34)-(2701,35)
                        identifier: 'context_p' (2701,35)-(2701,44)
                        ): ')' (2701,44)-(2701,45)
                    ;: ';' (2701,45)-(2701,46)
                  continue_statement (2702,11)-(2702,20)
                    continue: 'continue' (2702,11)-(2702,19)
                    ;: ';' (2702,19)-(2702,20)
                  }: '}' (2703,9)-(2703,10)
              case_statement (2704,9)-(3139,36)
                case: 'case' (2704,9)-(2704,13)
                identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (2704,14)-(2704,42)
                :: ':' (2704,42)-(2704,43)
                compound_statement (2705,9)-(3137,8)
                  {: '{' (2705,9)-(2705,10)
                  expression_statement (2706,11)-(2709,71)
                    call_expression (2706,11)-(2709,70)
                      identifier: 'JERRY_ASSERT' (2706,11)-(2706,23)
                      argument_list (2706,24)-(2709,70)
                        (: '(' (2706,24)-(2706,25)
                        binary_expression (2706,25)-(2709,69)
                          binary_expression (2706,25)-(2708,71)
                            binary_expression (2706,25)-(2707,70)
                              binary_expression (2706,25)-(2706,64)
                                identifier: 'stack_top' (2706,25)-(2706,34)
                                ==: '==' (2706,35)-(2706,37)
                                identifier: 'SCAN_STACK_SCRIPT_FUNCTION' (2706,38)-(2706,64)
                              ||: '||' (2707,25)-(2707,27)
                              binary_expression (2707,28)-(2707,70)
                                identifier: 'stack_top' (2707,28)-(2707,37)
                                ==: '==' (2707,38)-(2707,40)
                                identifier: 'SCAN_STACK_FUNCTION_STATEMENT' (2707,41)-(2707,70)
                            ||: '||' (2708,25)-(2708,27)
                            binary_expression (2708,28)-(2708,71)
                              identifier: 'stack_top' (2708,28)-(2708,37)
                              ==: '==' (2708,38)-(2708,40)
                              identifier: 'SCAN_STACK_FUNCTION_EXPRESSION' (2708,41)-(2708,71)
                          ||: '||' (2709,25)-(2709,27)
                          binary_expression (2709,28)-(2709,69)
                            identifier: 'stack_top' (2709,28)-(2709,37)
                            ==: '==' (2709,38)-(2709,40)
                            identifier: 'SCAN_STACK_FUNCTION_PROPERTY' (2709,41)-(2709,69)
                        ): ')' (2709,69)-(2709,70)
                    ;: ';' (2709,70)-(2709,71)
                  declaration (2711,11)-(2711,90)
                    type_identifier: 'scanner_literal_pool_t' (2711,11)-(2711,33)
                    init_declarator (2711,34)-(2711,89)
                      pointer_declarator (2711,34)-(2711,49)
                        *: '*' (2711,34)-(2711,35)
                        identifier: 'literal_pool_p' (2711,35)-(2711,49)
                      =: '=' (2711,50)-(2711,51)
                      field_expression (2711,52)-(2711,89)
                        identifier: 'scanner_context' (2711,52)-(2711,67)
                        .: '.' (2711,67)-(2711,68)
                        field_identifier: 'active_literal_pool_p' (2711,68)-(2711,89)
                    ;: ';' (2711,89)-(2711,90)
                  expression_statement (2713,11)-(2713,115)
                    call_expression (2713,11)-(2713,114)
                      identifier: 'JERRY_ASSERT' (2713,11)-(2713,23)
                      argument_list (2713,24)-(2713,114)
                        (: '(' (2713,24)-(2713,25)
                        binary_expression (2713,25)-(2713,113)
                          binary_expression (2713,25)-(2713,47)
                            identifier: 'literal_pool_p' (2713,25)-(2713,39)
                            !=: '!=' (2713,40)-(2713,42)
                            null (2713,43)-(2713,47)
                              NULL: 'NULL' (2713,43)-(2713,47)
                          &&: '&&' (2713,48)-(2713,50)
                          parenthesized_expression (2713,51)-(2713,113)
                            (: '(' (2713,51)-(2713,52)
                            binary_expression (2713,52)-(2713,112)
                              field_expression (2713,52)-(2713,80)
                                identifier: 'literal_pool_p' (2713,52)-(2713,66)
                                ->: '->' (2713,66)-(2713,68)
                                field_identifier: 'status_flags' (2713,68)-(2713,80)
                              &: '&' (2713,81)-(2713,82)
                              identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (2713,83)-(2713,112)
                            ): ')' (2713,112)-(2713,113)
                        ): ')' (2713,113)-(2713,114)
                    ;: ';' (2713,114)-(2713,115)
                  expression_statement (2715,11)-(2715,58)
                    assignment_expression (2715,11)-(2715,57)
                      field_expression (2715,11)-(2715,35)
                        identifier: 'literal_pool_p' (2715,11)-(2715,25)
                        ->: '->' (2715,25)-(2715,27)
                        field_identifier: 'source_p' (2715,27)-(2715,35)
                      =: '=' (2715,36)-(2715,37)
                      field_expression (2715,38)-(2715,57)
                        identifier: 'context_p' (2715,38)-(2715,47)
                        ->: '->' (2715,47)-(2715,49)
                        field_identifier: 'source_p' (2715,49)-(2715,57)
                    ;: ';' (2715,57)-(2715,58)
                  preproc_if (2717,1)-(2724,7)
                    #if: '#if' (2717,1)-(2717,4)
                    call_expression (2717,5)-(2717,27)
                      identifier: 'ENABLED' (2717,5)-(2717,12)
                      argument_list (2717,13)-(2717,27)
                        (: '(' (2717,13)-(2717,14)
                        identifier: 'JERRY_ES2015' (2717,14)-(2717,26)
                        ): ')' (2717,26)-(2717,27)
                    
: '
' (2717,27)-(2718,1)
                    if_statement (2718,11)-(2723,12)
                      if: 'if' (2718,11)-(2718,13)
                      parenthesized_expression (2718,14)-(2718,71)
                        (: '(' (2718,14)-(2718,15)
                        call_expression (2718,15)-(2718,70)
                          identifier: 'JERRY_UNLIKELY' (2718,15)-(2718,29)
                          argument_list (2718,30)-(2718,70)
                            (: '(' (2718,30)-(2718,31)
                            binary_expression (2718,31)-(2718,69)
                              field_expression (2718,31)-(2718,61)
                                identifier: 'scanner_context' (2718,31)-(2718,46)
                                .: '.' (2718,46)-(2718,47)
                                field_identifier: 'async_source_p' (2718,47)-(2718,61)
                              !=: '!=' (2718,62)-(2718,64)
                              null (2718,65)-(2718,69)
                                NULL: 'NULL' (2718,65)-(2718,69)
                            ): ')' (2718,69)-(2718,70)
                        ): ')' (2718,70)-(2718,71)
                      compound_statement (2719,11)-(2723,12)
                        {: '{' (2719,11)-(2719,12)
                        expression_statement (2720,13)-(2720,72)
                          assignment_expression (2720,13)-(2720,71)
                            field_expression (2720,13)-(2720,41)
                              identifier: 'literal_pool_p' (2720,13)-(2720,27)
                              ->: '->' (2720,27)-(2720,29)
                              field_identifier: 'status_flags' (2720,29)-(2720,41)
                            |=: '|=' (2720,42)-(2720,44)
                            identifier: 'SCANNER_LITERAL_POOL_ASYNC' (2720,45)-(2720,71)
                          ;: ';' (2720,71)-(2720,72)
                        expression_statement (2721,13)-(2721,71)
                          assignment_expression (2721,13)-(2721,70)
                            field_expression (2721,13)-(2721,37)
                              identifier: 'literal_pool_p' (2721,13)-(2721,27)
                              ->: '->' (2721,27)-(2721,29)
                              field_identifier: 'source_p' (2721,29)-(2721,37)
                            =: '=' (2721,38)-(2721,39)
                            field_expression (2721,40)-(2721,70)
                              identifier: 'scanner_context' (2721,40)-(2721,55)
                              .: '.' (2721,55)-(2721,56)
                              field_identifier: 'async_source_p' (2721,56)-(2721,70)
                          ;: ';' (2721,70)-(2721,71)
                        expression_statement (2722,13)-(2722,51)
                          assignment_expression (2722,13)-(2722,50)
                            field_expression (2722,13)-(2722,43)
                              identifier: 'scanner_context' (2722,13)-(2722,28)
                              .: '.' (2722,28)-(2722,29)
                              field_identifier: 'async_source_p' (2722,29)-(2722,43)
                            =: '=' (2722,44)-(2722,45)
                            null (2722,46)-(2722,50)
                              NULL: 'NULL' (2722,46)-(2722,50)
                          ;: ';' (2722,50)-(2722,51)
                        }: '}' (2723,11)-(2723,12)
                    #endif: '#endif' (2724,1)-(2724,7)
                  comment: '/* ENABLED (JERRY_ES2015) */' (2724,8)-(2724,36)
                  if_statement (2726,11)-(2729,12)
                    if: 'if' (2726,11)-(2726,13)
                    parenthesized_expression (2726,14)-(2726,40)
                      (: '(' (2726,14)-(2726,15)
                      binary_expression (2726,15)-(2726,39)
                        identifier: 'type' (2726,15)-(2726,19)
                        !=: '!=' (2726,20)-(2726,22)
                        identifier: 'LEXER_LEFT_PAREN' (2726,23)-(2726,39)
                      ): ')' (2726,39)-(2726,40)
                    compound_statement (2727,11)-(2729,12)
                      {: '{' (2727,11)-(2727,12)
                      expression_statement (2728,13)-(2728,45)
                        call_expression (2728,13)-(2728,44)
                          identifier: 'scanner_raise_error' (2728,13)-(2728,32)
                          argument_list (2728,33)-(2728,44)
                            (: '(' (2728,33)-(2728,34)
                            identifier: 'context_p' (2728,34)-(2728,43)
                            ): ')' (2728,43)-(2728,44)
                        ;: ';' (2728,44)-(2728,45)
                      }: '}' (2729,11)-(2729,12)
                  expression_statement (2730,11)-(2730,40)
                    call_expression (2730,11)-(2730,39)
                      identifier: 'lexer_next_token' (2730,11)-(2730,27)
                      argument_list (2730,28)-(2730,39)
                        (: '(' (2730,28)-(2730,29)
                        identifier: 'context_p' (2730,29)-(2730,38)
                        ): ')' (2730,38)-(2730,39)
                    ;: ';' (2730,39)-(2730,40)
                  preproc_if (2732,1)-(3136,36)
                    #if: '#if' (2732,1)-(2732,4)
                    call_expression (2732,5)-(2732,27)
                      identifier: 'ENABLED' (2732,5)-(2732,12)
                      argument_list (2732,13)-(2732,27)
                        (: '(' (2732,13)-(2732,14)
                        identifier: 'JERRY_ES2015' (2732,14)-(2732,26)
                        ): ')' (2732,26)-(2732,27)
                    
: '
' (2732,27)-(2733,1)
                    comment: '/* FALLTHRU */' (2733,11)-(2733,25)
                    ERROR (2734,9)-(2734,10)
                      }: '}' (2734,9)-(2734,10)
                    case_statement (2735,9)-(2863,10)
                      case: 'case' (2735,9)-(2735,13)
                      identifier: 'SCAN_MODE_CONTINUE_FUNCTION_ARGUMENTS' (2735,14)-(2735,51)
                      :: ':' (2735,51)-(2735,52)
                      compound_statement (2736,9)-(2863,10)
                        {: '{' (2736,9)-(2736,10)
                        preproc_call (2737,1)-(2738,1)
                          preproc_directive: '#endif' (2737,1)-(2737,7)
                          comment: '/* ENABLED (JERRY_ES2015) */' (2737,8)-(2737,36)
                        if_statement (2738,11)-(2824,12)
                          if: 'if' (2738,11)-(2738,13)
                          parenthesized_expression (2738,14)-(2738,96)
                            (: '(' (2738,14)-(2738,15)
                            binary_expression (2738,15)-(2738,95)
                              binary_expression (2738,15)-(2738,57)
                                field_expression (2738,15)-(2738,36)
                                  field_expression (2738,15)-(2738,31)
                                    identifier: 'context_p' (2738,15)-(2738,24)
                                    ->: '->' (2738,24)-(2738,26)
                                    field_identifier: 'token' (2738,26)-(2738,31)
                                  .: '.' (2738,31)-(2738,32)
                                  field_identifier: 'type' (2738,32)-(2738,36)
                                !=: '!=' (2738,37)-(2738,39)
                                identifier: 'LEXER_RIGHT_PAREN' (2738,40)-(2738,57)
                              &&: '&&' (2738,58)-(2738,60)
                              binary_expression (2738,61)-(2738,95)
                                field_expression (2738,61)-(2738,82)
                                  field_expression (2738,61)-(2738,77)
                                    identifier: 'context_p' (2738,61)-(2738,70)
                                    ->: '->' (2738,70)-(2738,72)
                                    field_identifier: 'token' (2738,72)-(2738,77)
                                  .: '.' (2738,77)-(2738,78)
                                  field_identifier: 'type' (2738,78)-(2738,82)
                                !=: '!=' (2738,83)-(2738,85)
                                identifier: 'LEXER_EOS' (2738,86)-(2738,95)
                            ): ')' (2738,95)-(2738,96)
                          compound_statement (2739,11)-(2824,12)
                            {: '{' (2739,11)-(2739,12)
                            preproc_if (2740,1)-(2742,7)
                              #if: '#if' (2740,1)-(2740,4)
                              call_expression (2740,5)-(2740,27)
                                identifier: 'ENABLED' (2740,5)-(2740,12)
                                argument_list (2740,13)-(2740,27)
                                  (: '(' (2740,13)-(2740,14)
                                  identifier: 'JERRY_ES2015' (2740,14)-(2740,26)
                                  ): ')' (2740,26)-(2740,27)
                              
: '
' (2740,27)-(2741,1)
                              declaration (2741,13)-(2741,54)
                                type_identifier: 'lexer_lit_location_t' (2741,13)-(2741,33)
                                pointer_declarator (2741,34)-(2741,53)
                                  *: '*' (2741,34)-(2741,35)
                                  identifier: 'argument_literal_p' (2741,35)-(2741,53)
                                ;: ';' (2741,53)-(2741,54)
                              #endif: '#endif' (2742,1)-(2742,7)
                            comment: '/* ENABLED (JERRY_ES2015) */' (2742,8)-(2742,36)
                            while_statement (2744,13)-(2780,14)
                              while: 'while' (2744,13)-(2744,18)
                              parenthesized_expression (2744,19)-(2744,25)
                                (: '(' (2744,19)-(2744,20)
                                true: 'true' (2744,20)-(2744,24)
                                ): ')' (2744,24)-(2744,25)
                              compound_statement (2745,13)-(2780,14)
                                {: '{' (2745,13)-(2745,14)
                                preproc_if (2746,1)-(2759,7)
                                  #if: '#if' (2746,1)-(2746,4)
                                  call_expression (2746,5)-(2746,27)
                                    identifier: 'ENABLED' (2746,5)-(2746,12)
                                    argument_list (2746,13)-(2746,27)
                                      (: '(' (2746,13)-(2746,14)
                                      identifier: 'JERRY_ES2015' (2746,14)-(2746,26)
                                      ): ')' (2746,26)-(2746,27)
                                  
: '
' (2746,27)-(2747,1)
                                  if_statement (2747,15)-(2752,16)
                                    if: 'if' (2747,15)-(2747,17)
                                    parenthesized_expression (2747,18)-(2747,61)
                                      (: '(' (2747,18)-(2747,19)
                                      binary_expression (2747,19)-(2747,60)
                                        field_expression (2747,19)-(2747,40)
                                          field_expression (2747,19)-(2747,35)
                                            identifier: 'context_p' (2747,19)-(2747,28)
                                            ->: '->' (2747,28)-(2747,30)
                                            field_identifier: 'token' (2747,30)-(2747,35)
                                          .: '.' (2747,35)-(2747,36)
                                          field_identifier: 'type' (2747,36)-(2747,40)
                                        ==: '==' (2747,41)-(2747,43)
                                        identifier: 'LEXER_THREE_DOTS' (2747,44)-(2747,60)
                                      ): ')' (2747,60)-(2747,61)
                                    compound_statement (2748,15)-(2752,16)
                                      {: '{' (2748,15)-(2748,16)
                                      expression_statement (2749,17)-(2749,112)
                                        assignment_expression (2749,17)-(2749,111)
                                          field_expression (2749,17)-(2749,68)
                                            field_expression (2749,17)-(2749,54)
                                              identifier: 'scanner_context' (2749,17)-(2749,32)
                                              .: '.' (2749,32)-(2749,33)
                                              field_identifier: 'active_literal_pool_p' (2749,33)-(2749,54)
                                            ->: '->' (2749,54)-(2749,56)
                                            field_identifier: 'status_flags' (2749,56)-(2749,68)
                                          |=: '|=' (2749,69)-(2749,71)
                                          identifier: 'SCANNER_LITERAL_POOL_ARGUMENTS_UNMAPPED' (2749,72)-(2749,111)
                                        ;: ';' (2749,111)-(2749,112)
                                      expression_statement (2751,17)-(2751,46)
                                        call_expression (2751,17)-(2751,45)
                                          identifier: 'lexer_next_token' (2751,17)-(2751,33)
                                          argument_list (2751,34)-(2751,45)
                                            (: '(' (2751,34)-(2751,35)
                                            identifier: 'context_p' (2751,35)-(2751,44)
                                            ): ')' (2751,44)-(2751,45)
                                        ;: ';' (2751,45)-(2751,46)
                                      }: '}' (2752,15)-(2752,16)
                                  if_statement (2754,15)-(2758,16)
                                    if: 'if' (2754,15)-(2754,17)
                                    parenthesized_expression (2754,18)-(2754,107)
                                      (: '(' (2754,18)-(2754,19)
                                      binary_expression (2754,19)-(2754,106)
                                        binary_expression (2754,19)-(2754,61)
                                          field_expression (2754,19)-(2754,40)
                                            field_expression (2754,19)-(2754,35)
                                              identifier: 'context_p' (2754,19)-(2754,28)
                                              ->: '->' (2754,28)-(2754,30)
                                              field_identifier: 'token' (2754,30)-(2754,35)
                                            .: '.' (2754,35)-(2754,36)
                                            field_identifier: 'type' (2754,36)-(2754,40)
                                          ==: '==' (2754,41)-(2754,43)
                                          identifier: 'LEXER_LEFT_SQUARE' (2754,44)-(2754,61)
                                        ||: '||' (2754,62)-(2754,64)
                                        binary_expression (2754,65)-(2754,106)
                                          field_expression (2754,65)-(2754,86)
                                            field_expression (2754,65)-(2754,81)
                                              identifier: 'context_p' (2754,65)-(2754,74)
                                              ->: '->' (2754,74)-(2754,76)
                                              field_identifier: 'token' (2754,76)-(2754,81)
                                            .: '.' (2754,81)-(2754,82)
                                            field_identifier: 'type' (2754,82)-(2754,86)
                                          ==: '==' (2754,87)-(2754,89)
                                          identifier: 'LEXER_LEFT_BRACE' (2754,90)-(2754,106)
                                      ): ')' (2754,106)-(2754,107)
                                    compound_statement (2755,15)-(2758,16)
                                      {: '{' (2755,15)-(2755,16)
                                      expression_statement (2756,17)-(2756,43)
                                        assignment_expression (2756,17)-(2756,42)
                                          identifier: 'argument_literal_p' (2756,17)-(2756,35)
                                          =: '=' (2756,36)-(2756,37)
                                          null (2756,38)-(2756,42)
                                            NULL: 'NULL' (2756,38)-(2756,42)
                                        ;: ';' (2756,42)-(2756,43)
                                      break_statement (2757,17)-(2757,23)
                                        break: 'break' (2757,17)-(2757,22)
                                        ;: ';' (2757,22)-(2757,23)
                                      }: '}' (2758,15)-(2758,16)
                                  #endif: '#endif' (2759,1)-(2759,7)
                                comment: '/* ENABLED (JERRY_ES2015) */' (2759,8)-(2759,36)
                                if_statement (2761,15)-(2765,16)
                                  if: 'if' (2761,15)-(2761,17)
                                  parenthesized_expression (2761,18)-(2762,80)
                                    (: '(' (2761,18)-(2761,19)
                                    binary_expression (2761,19)-(2762,79)
                                      binary_expression (2761,19)-(2761,57)
                                        field_expression (2761,19)-(2761,40)
                                          field_expression (2761,19)-(2761,35)
                                            identifier: 'context_p' (2761,19)-(2761,28)
                                            ->: '->' (2761,28)-(2761,30)
                                            field_identifier: 'token' (2761,30)-(2761,35)
                                          .: '.' (2761,35)-(2761,36)
                                          field_identifier: 'type' (2761,36)-(2761,40)
                                        !=: '!=' (2761,41)-(2761,43)
                                        identifier: 'LEXER_LITERAL' (2761,44)-(2761,57)
                                      ||: '||' (2762,19)-(2762,21)
                                      binary_expression (2762,22)-(2762,79)
                                        field_expression (2762,22)-(2762,56)
                                          field_expression (2762,22)-(2762,51)
                                            field_expression (2762,22)-(2762,38)
                                              identifier: 'context_p' (2762,22)-(2762,31)
                                              ->: '->' (2762,31)-(2762,33)
                                              field_identifier: 'token' (2762,33)-(2762,38)
                                            .: '.' (2762,38)-(2762,39)
                                            field_identifier: 'lit_location' (2762,39)-(2762,51)
                                          .: '.' (2762,51)-(2762,52)
                                          field_identifier: 'type' (2762,52)-(2762,56)
                                        !=: '!=' (2762,57)-(2762,59)
                                        identifier: 'LEXER_IDENT_LITERAL' (2762,60)-(2762,79)
                                    ): ')' (2762,79)-(2762,80)
                                  compound_statement (2763,15)-(2765,16)
                                    {: '{' (2763,15)-(2763,16)
                                    expression_statement (2764,17)-(2764,49)
                                      call_expression (2764,17)-(2764,48)
                                        identifier: 'scanner_raise_error' (2764,17)-(2764,36)
                                        argument_list (2764,37)-(2764,48)
                                          (: '(' (2764,37)-(2764,38)
                                          identifier: 'context_p' (2764,38)-(2764,47)
                                          ): ')' (2764,47)-(2764,48)
                                      ;: ';' (2764,48)-(2764,49)
                                    }: '}' (2765,15)-(2765,16)
                                preproc_if (2767,1)-(2771,7)
                                  #if: '#if' (2767,1)-(2767,4)
                                  call_expression (2767,5)-(2767,27)
                                    identifier: 'ENABLED' (2767,5)-(2767,12)
                                    argument_list (2767,13)-(2767,27)
                                      (: '(' (2767,13)-(2767,14)
                                      identifier: 'JERRY_ES2015' (2767,14)-(2767,26)
                                      ): ')' (2767,26)-(2767,27)
                                  
: '
' (2767,27)-(2768,1)
                                  expression_statement (2768,15)-(2768,90)
                                    assignment_expression (2768,15)-(2768,89)
                                      identifier: 'argument_literal_p' (2768,15)-(2768,33)
                                      =: '=' (2768,34)-(2768,35)
                                      call_expression (2768,36)-(2768,89)
                                        identifier: 'scanner_append_argument' (2768,36)-(2768,59)
                                        argument_list (2768,60)-(2768,89)
                                          (: '(' (2768,60)-(2768,61)
                                          identifier: 'context_p' (2768,61)-(2768,70)
                                          ,: ',' (2768,70)-(2768,71)
                                          pointer_expression (2768,72)-(2768,88)
                                            &: '&' (2768,72)-(2768,73)
                                            identifier: 'scanner_context' (2768,73)-(2768,88)
                                          ): ')' (2768,88)-(2768,89)
                                    ;: ';' (2768,89)-(2768,90)
                                  preproc_else (2769,1)-(2770,69)
                                    #else: '#else' (2769,1)-(2769,6)
                                    comment: '/* !ENABLED (JERRY_ES2015) */' (2769,7)-(2769,36)
                                    expression_statement (2770,15)-(2770,69)
                                      call_expression (2770,15)-(2770,68)
                                        identifier: 'scanner_append_argument' (2770,15)-(2770,38)
                                        argument_list (2770,39)-(2770,68)
                                          (: '(' (2770,39)-(2770,40)
                                          identifier: 'context_p' (2770,40)-(2770,49)
                                          ,: ',' (2770,49)-(2770,50)
                                          pointer_expression (2770,51)-(2770,67)
                                            &: '&' (2770,51)-(2770,52)
                                            identifier: 'scanner_context' (2770,52)-(2770,67)
                                          ): ')' (2770,67)-(2770,68)
                                      ;: ';' (2770,68)-(2770,69)
                                  #endif: '#endif' (2771,1)-(2771,7)
                                comment: '/* ENABLED (JERRY_ES2015) */' (2771,8)-(2771,36)
                                expression_statement (2773,15)-(2773,44)
                                  call_expression (2773,15)-(2773,43)
                                    identifier: 'lexer_next_token' (2773,15)-(2773,31)
                                    argument_list (2773,32)-(2773,43)
                                      (: '(' (2773,32)-(2773,33)
                                      identifier: 'context_p' (2773,33)-(2773,42)
                                      ): ')' (2773,42)-(2773,43)
                                  ;: ';' (2773,43)-(2773,44)
                                if_statement (2775,15)-(2778,16)
                                  if: 'if' (2775,15)-(2775,17)
                                  parenthesized_expression (2775,18)-(2775,56)
                                    (: '(' (2775,18)-(2775,19)
                                    binary_expression (2775,19)-(2775,55)
                                      field_expression (2775,19)-(2775,40)
                                        field_expression (2775,19)-(2775,35)
                                          identifier: 'context_p' (2775,19)-(2775,28)
                                          ->: '->' (2775,28)-(2775,30)
                                          field_identifier: 'token' (2775,30)-(2775,35)
                                        .: '.' (2775,35)-(2775,36)
                                        field_identifier: 'type' (2775,36)-(2775,40)
                                      !=: '!=' (2775,41)-(2775,43)
                                      identifier: 'LEXER_COMMA' (2775,44)-(2775,55)
                                    ): ')' (2775,55)-(2775,56)
                                  compound_statement (2776,15)-(2778,16)
                                    {: '{' (2776,15)-(2776,16)
                                    break_statement (2777,17)-(2777,23)
                                      break: 'break' (2777,17)-(2777,22)
                                      ;: ';' (2777,22)-(2777,23)
                                    }: '}' (2778,15)-(2778,16)
                                expression_statement (2779,15)-(2779,44)
                                  call_expression (2779,15)-(2779,43)
                                    identifier: 'lexer_next_token' (2779,15)-(2779,31)
                                    argument_list (2779,32)-(2779,43)
                                      (: '(' (2779,32)-(2779,33)
                                      identifier: 'context_p' (2779,33)-(2779,42)
                                      ): ')' (2779,42)-(2779,43)
                                  ;: ';' (2779,43)-(2779,44)
                                }: '}' (2780,13)-(2780,14)
                            preproc_if (2782,1)-(2823,7)
                              #if: '#if' (2782,1)-(2782,4)
                              call_expression (2782,5)-(2782,27)
                                identifier: 'ENABLED' (2782,5)-(2782,12)
                                argument_list (2782,13)-(2782,27)
                                  (: '(' (2782,13)-(2782,14)
                                  identifier: 'JERRY_ES2015' (2782,14)-(2782,26)
                                  ): ')' (2782,26)-(2782,27)
                              
: '
' (2782,27)-(2783,1)
                              if_statement (2783,13)-(2801,14)
                                if: 'if' (2783,13)-(2783,15)
                                parenthesized_expression (2783,16)-(2783,44)
                                  (: '(' (2783,16)-(2783,17)
                                  binary_expression (2783,17)-(2783,43)
                                    identifier: 'argument_literal_p' (2783,17)-(2783,35)
                                    ==: '==' (2783,36)-(2783,38)
                                    null (2783,39)-(2783,43)
                                      NULL: 'NULL' (2783,39)-(2783,43)
                                  ): ')' (2783,43)-(2783,44)
                                compound_statement (2784,13)-(2801,14)
                                  {: '{' (2784,13)-(2784,14)
                                  expression_statement (2785,15)-(2785,110)
                                    assignment_expression (2785,15)-(2785,109)
                                      field_expression (2785,15)-(2785,66)
                                        field_expression (2785,15)-(2785,52)
                                          identifier: 'scanner_context' (2785,15)-(2785,30)
                                          .: '.' (2785,30)-(2785,31)
                                          field_identifier: 'active_literal_pool_p' (2785,31)-(2785,52)
                                        ->: '->' (2785,52)-(2785,54)
                                        field_identifier: 'status_flags' (2785,54)-(2785,66)
                                      |=: '|=' (2785,67)-(2785,69)
                                      identifier: 'SCANNER_LITERAL_POOL_ARGUMENTS_UNMAPPED' (2785,70)-(2785,109)
                                    ;: ';' (2785,109)-(2785,110)
                                  expression_statement (2787,15)-(2787,83)
                                    call_expression (2787,15)-(2787,82)
                                      identifier: 'parser_stack_push_uint8' (2787,15)-(2787,38)
                                      argument_list (2787,39)-(2787,82)
                                        (: '(' (2787,39)-(2787,40)
                                        identifier: 'context_p' (2787,40)-(2787,49)
                                        ,: ',' (2787,49)-(2787,50)
                                        identifier: 'SCAN_STACK_FUNCTION_PARAMETERS' (2787,51)-(2787,81)
                                        ): ')' (2787,81)-(2787,82)
                                    ;: ';' (2787,82)-(2787,83)
                                  expression_statement (2788,15)-(2788,65)
                                    call_expression (2788,15)-(2788,64)
                                      identifier: 'scanner_append_hole' (2788,15)-(2788,34)
                                      argument_list (2788,35)-(2788,64)
                                        (: '(' (2788,35)-(2788,36)
                                        identifier: 'context_p' (2788,36)-(2788,45)
                                        ,: ',' (2788,45)-(2788,46)
                                        pointer_expression (2788,47)-(2788,63)
                                          &: '&' (2788,47)-(2788,48)
                                          identifier: 'scanner_context' (2788,48)-(2788,63)
                                        ): ')' (2788,63)-(2788,64)
                                    ;: ';' (2788,64)-(2788,65)
                                  expression_statement (2789,15)-(2789,108)
                                    call_expression (2789,15)-(2789,107)
                                      identifier: 'scanner_push_destructuring_pattern' (2789,15)-(2789,49)
                                      argument_list (2789,50)-(2789,107)
                                        (: '(' (2789,50)-(2789,51)
                                        identifier: 'context_p' (2789,51)-(2789,60)
                                        ,: ',' (2789,60)-(2789,61)
                                        pointer_expression (2789,62)-(2789,78)
                                          &: '&' (2789,62)-(2789,63)
                                          identifier: 'scanner_context' (2789,63)-(2789,78)
                                        ,: ',' (2789,78)-(2789,79)
                                        identifier: 'SCANNER_BINDING_ARG' (2789,80)-(2789,99)
                                        ,: ',' (2789,99)-(2789,100)
                                        false: 'false' (2789,101)-(2789,106)
                                        ): ')' (2789,106)-(2789,107)
                                    ;: ';' (2789,107)-(2789,108)
                                  if_statement (2791,15)-(2796,16)
                                    if: 'if' (2791,15)-(2791,17)
                                    parenthesized_expression (2791,18)-(2791,62)
                                      (: '(' (2791,18)-(2791,19)
                                      binary_expression (2791,19)-(2791,61)
                                        field_expression (2791,19)-(2791,40)
                                          field_expression (2791,19)-(2791,35)
                                            identifier: 'context_p' (2791,19)-(2791,28)
                                            ->: '->' (2791,28)-(2791,30)
                                            field_identifier: 'token' (2791,30)-(2791,35)
                                          .: '.' (2791,35)-(2791,36)
                                          field_identifier: 'type' (2791,36)-(2791,40)
                                        ==: '==' (2791,41)-(2791,43)
                                        identifier: 'LEXER_LEFT_SQUARE' (2791,44)-(2791,61)
                                      ): ')' (2791,61)-(2791,62)
                                    compound_statement (2792,15)-(2796,16)
                                      {: '{' (2792,15)-(2792,16)
                                      expression_statement (2793,17)-(2793,79)
                                        call_expression (2793,17)-(2793,78)
                                          identifier: 'parser_stack_push_uint8' (2793,17)-(2793,40)
                                          argument_list (2793,41)-(2793,78)
                                            (: '(' (2793,41)-(2793,42)
                                            identifier: 'context_p' (2793,42)-(2793,51)
                                            ,: ',' (2793,51)-(2793,52)
                                            identifier: 'SCAN_STACK_ARRAY_LITERAL' (2793,53)-(2793,77)
                                            ): ')' (2793,77)-(2793,78)
                                        ;: ';' (2793,78)-(2793,79)
                                      expression_statement (2794,17)-(2794,58)
                                        assignment_expression (2794,17)-(2794,57)
                                          field_expression (2794,17)-(2794,37)
                                            identifier: 'scanner_context' (2794,17)-(2794,32)
                                            .: '.' (2794,32)-(2794,33)
                                            field_identifier: 'mode' (2794,33)-(2794,37)
                                          =: '=' (2794,38)-(2794,39)
                                          identifier: 'SCAN_MODE_BINDING' (2794,40)-(2794,57)
                                        ;: ';' (2794,57)-(2794,58)
                                      break_statement (2795,17)-(2795,23)
                                        break: 'break' (2795,17)-(2795,22)
                                        ;: ';' (2795,22)-(2795,23)
                                      }: '}' (2796,15)-(2796,16)
                                  expression_statement (2798,15)-(2798,78)
                                    call_expression (2798,15)-(2798,77)
                                      identifier: 'parser_stack_push_uint8' (2798,15)-(2798,38)
                                      argument_list (2798,39)-(2798,77)
                                        (: '(' (2798,39)-(2798,40)
                                        identifier: 'context_p' (2798,40)-(2798,49)
                                        ,: ',' (2798,49)-(2798,50)
                                        identifier: 'SCAN_STACK_OBJECT_LITERAL' (2798,51)-(2798,76)
                                        ): ')' (2798,76)-(2798,77)
                                    ;: ';' (2798,77)-(2798,78)
                                  expression_statement (2799,15)-(2799,62)
                                    assignment_expression (2799,15)-(2799,61)
                                      field_expression (2799,15)-(2799,35)
                                        identifier: 'scanner_context' (2799,15)-(2799,30)
                                        .: '.' (2799,30)-(2799,31)
                                        field_identifier: 'mode' (2799,31)-(2799,35)
                                      =: '=' (2799,36)-(2799,37)
                                      identifier: 'SCAN_MODE_PROPERTY_NAME' (2799,38)-(2799,61)
                                    ;: ';' (2799,61)-(2799,62)
                                  continue_statement (2800,15)-(2800,24)
                                    continue: 'continue' (2800,15)-(2800,23)
                                    ;: ';' (2800,23)-(2800,24)
                                  }: '}' (2801,13)-(2801,14)
                              if_statement (2803,13)-(2822,14)
                                if: 'if' (2803,13)-(2803,15)
                                parenthesized_expression (2803,16)-(2803,55)
                                  (: '(' (2803,16)-(2803,17)
                                  binary_expression (2803,17)-(2803,54)
                                    field_expression (2803,17)-(2803,38)
                                      field_expression (2803,17)-(2803,33)
                                        identifier: 'context_p' (2803,17)-(2803,26)
                                        ->: '->' (2803,26)-(2803,28)
                                        field_identifier: 'token' (2803,28)-(2803,33)
                                      .: '.' (2803,33)-(2803,34)
                                      field_identifier: 'type' (2803,34)-(2803,38)
                                    ==: '==' (2803,39)-(2803,41)
                                    identifier: 'LEXER_ASSIGN' (2803,42)-(2803,54)
                                  ): ')' (2803,54)-(2803,55)
                                compound_statement (2804,13)-(2822,14)
                                  {: '{' (2804,13)-(2804,14)
                                  expression_statement (2805,15)-(2805,110)
                                    assignment_expression (2805,15)-(2805,109)
                                      field_expression (2805,15)-(2805,66)
                                        field_expression (2805,15)-(2805,52)
                                          identifier: 'scanner_context' (2805,15)-(2805,30)
                                          .: '.' (2805,30)-(2805,31)
                                          field_identifier: 'active_literal_pool_p' (2805,31)-(2805,52)
                                        ->: '->' (2805,52)-(2805,54)
                                        field_identifier: 'status_flags' (2805,54)-(2805,66)
                                      |=: '|=' (2805,67)-(2805,69)
                                      identifier: 'SCANNER_LITERAL_POOL_ARGUMENTS_UNMAPPED' (2805,70)-(2805,109)
                                    ;: ';' (2805,109)-(2805,110)
                                  expression_statement (2807,15)-(2807,83)
                                    call_expression (2807,15)-(2807,82)
                                      identifier: 'parser_stack_push_uint8' (2807,15)-(2807,38)
                                      argument_list (2807,39)-(2807,82)
                                        (: '(' (2807,39)-(2807,40)
                                        identifier: 'context_p' (2807,40)-(2807,49)
                                        ,: ',' (2807,49)-(2807,50)
                                        identifier: 'SCAN_STACK_FUNCTION_PARAMETERS' (2807,51)-(2807,81)
                                        ): ')' (2807,81)-(2807,82)
                                    ;: ';' (2807,82)-(2807,83)
                                  expression_statement (2808,15)-(2808,67)
                                    assignment_expression (2808,15)-(2808,66)
                                      field_expression (2808,15)-(2808,35)
                                        identifier: 'scanner_context' (2808,15)-(2808,30)
                                        .: '.' (2808,30)-(2808,31)
                                        field_identifier: 'mode' (2808,31)-(2808,35)
                                      =: '=' (2808,36)-(2808,37)
                                      identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (2808,38)-(2808,66)
                                    ;: ';' (2808,66)-(2808,67)
                                  if_statement (2810,15)-(2814,16)
                                    if: 'if' (2810,15)-(2810,17)
                                    parenthesized_expression (2810,18)-(2810,70)
                                      (: '(' (2810,18)-(2810,19)
                                      binary_expression (2810,19)-(2810,69)
                                        field_expression (2810,19)-(2810,43)
                                          identifier: 'argument_literal_p' (2810,19)-(2810,37)
                                          ->: '->' (2810,37)-(2810,39)
                                          field_identifier: 'type' (2810,39)-(2810,43)
                                        &: '&' (2810,44)-(2810,45)
                                        identifier: 'SCANNER_LITERAL_IS_USED' (2810,46)-(2810,69)
                                      ): ')' (2810,69)-(2810,70)
                                    compound_statement (2811,15)-(2814,16)
                                      {: '{' (2811,15)-(2811,16)
                                      expression_statement (2812,17)-(2812,88)
                                        call_expression (2812,17)-(2812,87)
                                          identifier: 'JERRY_ASSERT' (2812,17)-(2812,29)
                                          argument_list (2812,30)-(2812,87)
                                            (: '(' (2812,30)-(2812,31)
                                            binary_expression (2812,31)-(2812,86)
                                              field_expression (2812,31)-(2812,55)
                                                identifier: 'argument_literal_p' (2812,31)-(2812,49)
                                                ->: '->' (2812,49)-(2812,51)
                                                field_identifier: 'type' (2812,51)-(2812,55)
                                              &: '&' (2812,56)-(2812,57)
                                              identifier: 'SCANNER_LITERAL_EARLY_CREATE' (2812,58)-(2812,86)
                                            ): ')' (2812,86)-(2812,87)
                                        ;: ';' (2812,87)-(2812,88)
                                      break_statement (2813,17)-(2813,23)
                                        break: 'break' (2813,17)-(2813,22)
                                        ;: ';' (2813,22)-(2813,23)
                                      }: '}' (2814,15)-(2814,16)
                                  declaration (2816,15)-(2816,57)
                                    type_identifier: 'scanner_binding_literal_t' (2816,15)-(2816,40)
                                    identifier: 'binding_literal' (2816,41)-(2816,56)
                                    ;: ';' (2816,56)-(2816,57)
                                  expression_statement (2817,15)-(2817,62)
                                    assignment_expression (2817,15)-(2817,61)
                                      field_expression (2817,15)-(2817,40)
                                        identifier: 'binding_literal' (2817,15)-(2817,30)
                                        .: '.' (2817,30)-(2817,31)
                                        field_identifier: 'literal_p' (2817,31)-(2817,40)
                                      =: '=' (2817,41)-(2817,42)
                                      identifier: 'argument_literal_p' (2817,43)-(2817,61)
                                    ;: ';' (2817,61)-(2817,62)
                                  expression_statement (2819,15)-(2819,99)
                                    call_expression (2819,15)-(2819,98)
                                      identifier: 'parser_stack_push' (2819,15)-(2819,32)
                                      argument_list (2819,33)-(2819,98)
                                        (: '(' (2819,33)-(2819,34)
                                        identifier: 'context_p' (2819,34)-(2819,43)
                                        ,: ',' (2819,43)-(2819,44)
                                        pointer_expression (2819,45)-(2819,61)
                                          &: '&' (2819,45)-(2819,46)
                                          identifier: 'binding_literal' (2819,46)-(2819,61)
                                        ,: ',' (2819,61)-(2819,62)
                                        sizeof_expression (2819,63)-(2819,97)
                                          sizeof: 'sizeof' (2819,63)-(2819,69)
                                          parenthesized_expression (2819,70)-(2819,97)
                                            (: '(' (2819,70)-(2819,71)
                                            identifier: 'scanner_binding_literal_t' (2819,71)-(2819,96)
                                            ): ')' (2819,96)-(2819,97)
                                        ): ')' (2819,97)-(2819,98)
                                    ;: ';' (2819,98)-(2819,99)
                                  expression_statement (2820,15)-(2820,76)
                                    call_expression (2820,15)-(2820,75)
                                      identifier: 'parser_stack_push_uint8' (2820,15)-(2820,38)
                                      argument_list (2820,39)-(2820,75)
                                        (: '(' (2820,39)-(2820,40)
                                        identifier: 'context_p' (2820,40)-(2820,49)
                                        ,: ',' (2820,49)-(2820,50)
                                        identifier: 'SCAN_STACK_BINDING_INIT' (2820,51)-(2820,74)
                                        ): ')' (2820,74)-(2820,75)
                                    ;: ';' (2820,75)-(2820,76)
                                  break_statement (2821,15)-(2821,21)
                                    break: 'break' (2821,15)-(2821,20)
                                    ;: ';' (2821,20)-(2821,21)
                                  }: '}' (2822,13)-(2822,14)
                              #endif: '#endif' (2823,1)-(2823,7)
                            comment: '/* ENABLED (JERRY_ES2015) */' (2823,8)-(2823,36)
                            }: '}' (2824,11)-(2824,12)
                        if_statement (2826,11)-(2845,12)
                          if: 'if' (2826,11)-(2826,13)
                          parenthesized_expression (2826,14)-(2826,93)
                            (: '(' (2826,14)-(2826,15)
                            binary_expression (2826,15)-(2826,92)
                              binary_expression (2826,15)-(2826,49)
                                field_expression (2826,15)-(2826,36)
                                  field_expression (2826,15)-(2826,31)
                                    identifier: 'context_p' (2826,15)-(2826,24)
                                    ->: '->' (2826,24)-(2826,26)
                                    field_identifier: 'token' (2826,26)-(2826,31)
                                  .: '.' (2826,31)-(2826,32)
                                  field_identifier: 'type' (2826,32)-(2826,36)
                                ==: '==' (2826,37)-(2826,39)
                                identifier: 'LEXER_EOS' (2826,40)-(2826,49)
                              &&: '&&' (2826,50)-(2826,52)
                              binary_expression (2826,53)-(2826,92)
                                identifier: 'stack_top' (2826,53)-(2826,62)
                                ==: '==' (2826,63)-(2826,65)
                                identifier: 'SCAN_STACK_SCRIPT_FUNCTION' (2826,66)-(2826,92)
                            ): ')' (2826,92)-(2826,93)
                          compound_statement (2827,11)-(2845,12)
                            {: '{' (2827,11)-(2827,12)
                            comment: '/* End of argument parsing. */' (2828,13)-(2828,43)
                            declaration (2829,13)-(2829,117)
                              type_identifier: 'scanner_info_t' (2829,13)-(2829,27)
                              init_declarator (2829,28)-(2829,116)
                                pointer_declarator (2829,28)-(2829,43)
                                  *: '*' (2829,28)-(2829,29)
                                  identifier: 'scanner_info_p' (2829,29)-(2829,43)
                                =: '=' (2829,44)-(2829,45)
                                cast_expression (2829,46)-(2829,116)
                                  (: '(' (2829,46)-(2829,47)
                                  type_descriptor (2829,47)-(2829,63)
                                    type_identifier: 'scanner_info_t' (2829,47)-(2829,61)
                                    abstract_pointer_declarator (2829,62)-(2829,63)
                                      *: '*' (2829,62)-(2829,63)
                                  ): ')' (2829,63)-(2829,64)
                                  call_expression (2829,65)-(2829,116)
                                    identifier: 'scanner_malloc' (2829,65)-(2829,79)
                                    argument_list (2829,80)-(2829,116)
                                      (: '(' (2829,80)-(2829,81)
                                      identifier: 'context_p' (2829,81)-(2829,90)
                                      ,: ',' (2829,90)-(2829,91)
                                      sizeof_expression (2829,92)-(2829,115)
                                        sizeof: 'sizeof' (2829,92)-(2829,98)
                                        parenthesized_expression (2829,99)-(2829,115)
                                          (: '(' (2829,99)-(2829,100)
                                          identifier: 'scanner_info_t' (2829,100)-(2829,114)
                                          ): ')' (2829,114)-(2829,115)
                                      ): ')' (2829,115)-(2829,116)
                              ;: ';' (2829,116)-(2829,117)
                            expression_statement (2830,13)-(2830,69)
                              assignment_expression (2830,13)-(2830,68)
                                field_expression (2830,13)-(2830,35)
                                  identifier: 'scanner_info_p' (2830,13)-(2830,27)
                                  ->: '->' (2830,27)-(2830,29)
                                  field_identifier: 'next_p' (2830,29)-(2830,35)
                                =: '=' (2830,36)-(2830,37)
                                field_expression (2830,38)-(2830,68)
                                  identifier: 'context_p' (2830,38)-(2830,47)
                                  ->: '->' (2830,47)-(2830,49)
                                  field_identifier: 'next_scanner_info_p' (2830,49)-(2830,68)
                              ;: ';' (2830,68)-(2830,69)
                            expression_statement (2831,13)-(2831,45)
                              assignment_expression (2831,13)-(2831,44)
                                field_expression (2831,13)-(2831,37)
                                  identifier: 'scanner_info_p' (2831,13)-(2831,27)
                                  ->: '->' (2831,27)-(2831,29)
                                  field_identifier: 'source_p' (2831,29)-(2831,37)
                                =: '=' (2831,38)-(2831,39)
                                null (2831,40)-(2831,44)
                                  NULL: 'NULL' (2831,40)-(2831,44)
                              ;: ';' (2831,44)-(2831,45)
                            expression_statement (2832,13)-(2832,63)
                              assignment_expression (2832,13)-(2832,62)
                                field_expression (2832,13)-(2832,33)
                                  identifier: 'scanner_info_p' (2832,13)-(2832,27)
                                  ->: '->' (2832,27)-(2832,29)
                                  field_identifier: 'type' (2832,29)-(2832,33)
                                =: '=' (2832,34)-(2832,35)
                                identifier: 'SCANNER_TYPE_END_ARGUMENTS' (2832,36)-(2832,62)
                              ;: ';' (2832,62)-(2832,63)
                            expression_statement (2833,13)-(2833,62)
                              assignment_expression (2833,13)-(2833,61)
                                field_expression (2833,13)-(2833,44)
                                  identifier: 'scanner_context' (2833,13)-(2833,28)
                                  .: '.' (2833,28)-(2833,29)
                                  field_identifier: 'end_arguments_p' (2833,29)-(2833,44)
                                =: '=' (2833,45)-(2833,46)
                                identifier: 'scanner_info_p' (2833,47)-(2833,61)
                              ;: ';' (2833,61)-(2833,62)
                            expression_statement (2835,13)-(2835,61)
                              assignment_expression (2835,13)-(2835,60)
                                field_expression (2835,13)-(2835,43)
                                  identifier: 'context_p' (2835,13)-(2835,22)
                                  ->: '->' (2835,22)-(2835,24)
                                  field_identifier: 'next_scanner_info_p' (2835,24)-(2835,43)
                                =: '=' (2835,44)-(2835,45)
                                identifier: 'scanner_info_p' (2835,46)-(2835,60)
                              ;: ';' (2835,60)-(2835,61)
                            expression_statement (2836,13)-(2836,44)
                              assignment_expression (2836,13)-(2836,43)
                                field_expression (2836,13)-(2836,32)
                                  identifier: 'context_p' (2836,13)-(2836,22)
                                  ->: '->' (2836,22)-(2836,24)
                                  field_identifier: 'source_p' (2836,24)-(2836,32)
                                =: '=' (2836,33)-(2836,34)
                                identifier: 'source_p' (2836,35)-(2836,43)
                              ;: ';' (2836,43)-(2836,44)
                            expression_statement (2837,13)-(2837,52)
                              assignment_expression (2837,13)-(2837,51)
                                field_expression (2837,13)-(2837,36)
                                  identifier: 'context_p' (2837,13)-(2837,22)
                                  ->: '->' (2837,22)-(2837,24)
                                  field_identifier: 'source_end_p' (2837,24)-(2837,36)
                                =: '=' (2837,37)-(2837,38)
                                identifier: 'source_end_p' (2837,39)-(2837,51)
                              ;: ';' (2837,51)-(2837,52)
                            expression_statement (2838,13)-(2838,33)
                              assignment_expression (2838,13)-(2838,32)
                                field_expression (2838,13)-(2838,28)
                                  identifier: 'context_p' (2838,13)-(2838,22)
                                  ->: '->' (2838,22)-(2838,24)
                                  field_identifier: 'line' (2838,24)-(2838,28)
                                =: '=' (2838,29)-(2838,30)
                                number_literal: '1' (2838,31)-(2838,32)
                              ;: ';' (2838,32)-(2838,33)
                            expression_statement (2839,13)-(2839,35)
                              assignment_expression (2839,13)-(2839,34)
                                field_expression (2839,13)-(2839,30)
                                  identifier: 'context_p' (2839,13)-(2839,22)
                                  ->: '->' (2839,22)-(2839,24)
                                  field_identifier: 'column' (2839,24)-(2839,30)
                                =: '=' (2839,31)-(2839,32)
                                number_literal: '1' (2839,33)-(2839,34)
                              ;: ';' (2839,34)-(2839,35)
                            expression_statement (2841,13)-(2841,68)
                              call_expression (2841,13)-(2841,67)
                                identifier: 'scanner_filter_arguments' (2841,13)-(2841,37)
                                argument_list (2841,38)-(2841,67)
                                  (: '(' (2841,38)-(2841,39)
                                  identifier: 'context_p' (2841,39)-(2841,48)
                                  ,: ',' (2841,48)-(2841,49)
                                  pointer_expression (2841,50)-(2841,66)
                                    &: '&' (2841,50)-(2841,51)
                                    identifier: 'scanner_context' (2841,51)-(2841,66)
                                  ): ')' (2841,66)-(2841,67)
                              ;: ';' (2841,67)-(2841,68)
                            expression_statement (2842,13)-(2842,42)
                              call_expression (2842,13)-(2842,41)
                                identifier: 'lexer_next_token' (2842,13)-(2842,29)
                                argument_list (2842,30)-(2842,41)
                                  (: '(' (2842,30)-(2842,31)
                                  identifier: 'context_p' (2842,31)-(2842,40)
                                  ): ')' (2842,40)-(2842,41)
                              ;: ';' (2842,41)-(2842,42)
                            expression_statement (2843,13)-(2843,68)
                              call_expression (2843,13)-(2843,67)
                                identifier: 'scanner_check_directives' (2843,13)-(2843,37)
                                argument_list (2843,38)-(2843,67)
                                  (: '(' (2843,38)-(2843,39)
                                  identifier: 'context_p' (2843,39)-(2843,48)
                                  ,: ',' (2843,48)-(2843,49)
                                  pointer_expression (2843,50)-(2843,66)
                                    &: '&' (2843,50)-(2843,51)
                                    identifier: 'scanner_context' (2843,51)-(2843,66)
                                  ): ')' (2843,66)-(2843,67)
                              ;: ';' (2843,67)-(2843,68)
                            continue_statement (2844,13)-(2844,22)
                              continue: 'continue' (2844,13)-(2844,21)
                              ;: ';' (2844,21)-(2844,22)
                            }: '}' (2845,11)-(2845,12)
                        if_statement (2847,11)-(2850,12)
                          if: 'if' (2847,11)-(2847,13)
                          parenthesized_expression (2847,14)-(2847,58)
                            (: '(' (2847,14)-(2847,15)
                            binary_expression (2847,15)-(2847,57)
                              field_expression (2847,15)-(2847,36)
                                field_expression (2847,15)-(2847,31)
                                  identifier: 'context_p' (2847,15)-(2847,24)
                                  ->: '->' (2847,24)-(2847,26)
                                  field_identifier: 'token' (2847,26)-(2847,31)
                                .: '.' (2847,31)-(2847,32)
                                field_identifier: 'type' (2847,32)-(2847,36)
                              !=: '!=' (2847,37)-(2847,39)
                              identifier: 'LEXER_RIGHT_PAREN' (2847,40)-(2847,57)
                            ): ')' (2847,57)-(2847,58)
                          compound_statement (2848,11)-(2850,12)
                            {: '{' (2848,11)-(2848,12)
                            expression_statement (2849,13)-(2849,45)
                              call_expression (2849,13)-(2849,44)
                                identifier: 'scanner_raise_error' (2849,13)-(2849,32)
                                argument_list (2849,33)-(2849,44)
                                  (: '(' (2849,33)-(2849,34)
                                  identifier: 'context_p' (2849,34)-(2849,43)
                                  ): ')' (2849,43)-(2849,44)
                              ;: ';' (2849,44)-(2849,45)
                            }: '}' (2850,11)-(2850,12)
                        expression_statement (2852,11)-(2852,40)
                          call_expression (2852,11)-(2852,39)
                            identifier: 'lexer_next_token' (2852,11)-(2852,27)
                            argument_list (2852,28)-(2852,39)
                              (: '(' (2852,28)-(2852,29)
                              identifier: 'context_p' (2852,29)-(2852,38)
                              ): ')' (2852,38)-(2852,39)
                          ;: ';' (2852,39)-(2852,40)
                        if_statement (2854,11)-(2857,12)
                          if: 'if' (2854,11)-(2854,13)
                          parenthesized_expression (2854,14)-(2854,57)
                            (: '(' (2854,14)-(2854,15)
                            binary_expression (2854,15)-(2854,56)
                              field_expression (2854,15)-(2854,36)
                                field_expression (2854,15)-(2854,31)
                                  identifier: 'context_p' (2854,15)-(2854,24)
                                  ->: '->' (2854,24)-(2854,26)
                                  field_identifier: 'token' (2854,26)-(2854,31)
                                .: '.' (2854,31)-(2854,32)
                                field_identifier: 'type' (2854,32)-(2854,36)
                              !=: '!=' (2854,37)-(2854,39)
                              identifier: 'LEXER_LEFT_BRACE' (2854,40)-(2854,56)
                            ): ')' (2854,56)-(2854,57)
                          compound_statement (2855,11)-(2857,12)
                            {: '{' (2855,11)-(2855,12)
                            expression_statement (2856,13)-(2856,45)
                              call_expression (2856,13)-(2856,44)
                                identifier: 'scanner_raise_error' (2856,13)-(2856,32)
                                argument_list (2856,33)-(2856,44)
                                  (: '(' (2856,33)-(2856,34)
                                  identifier: 'context_p' (2856,34)-(2856,43)
                                  ): ')' (2856,43)-(2856,44)
                              ;: ';' (2856,44)-(2856,45)
                            }: '}' (2857,11)-(2857,12)
                        expression_statement (2859,11)-(2859,66)
                          call_expression (2859,11)-(2859,65)
                            identifier: 'scanner_filter_arguments' (2859,11)-(2859,35)
                            argument_list (2859,36)-(2859,65)
                              (: '(' (2859,36)-(2859,37)
                              identifier: 'context_p' (2859,37)-(2859,46)
                              ,: ',' (2859,46)-(2859,47)
                              pointer_expression (2859,48)-(2859,64)
                                &: '&' (2859,48)-(2859,49)
                                identifier: 'scanner_context' (2859,49)-(2859,64)
                              ): ')' (2859,64)-(2859,65)
                          ;: ';' (2859,65)-(2859,66)
                        expression_statement (2860,11)-(2860,40)
                          call_expression (2860,11)-(2860,39)
                            identifier: 'lexer_next_token' (2860,11)-(2860,27)
                            argument_list (2860,28)-(2860,39)
                              (: '(' (2860,28)-(2860,29)
                              identifier: 'context_p' (2860,29)-(2860,38)
                              ): ')' (2860,38)-(2860,39)
                          ;: ';' (2860,39)-(2860,40)
                        expression_statement (2861,11)-(2861,66)
                          call_expression (2861,11)-(2861,65)
                            identifier: 'scanner_check_directives' (2861,11)-(2861,35)
                            argument_list (2861,36)-(2861,65)
                              (: '(' (2861,36)-(2861,37)
                              identifier: 'context_p' (2861,37)-(2861,46)
                              ,: ',' (2861,46)-(2861,47)
                              pointer_expression (2861,48)-(2861,64)
                                &: '&' (2861,48)-(2861,49)
                                identifier: 'scanner_context' (2861,49)-(2861,64)
                              ): ')' (2861,64)-(2861,65)
                          ;: ';' (2861,65)-(2861,66)
                        continue_statement (2862,11)-(2862,20)
                          continue: 'continue' (2862,11)-(2862,19)
                          ;: ';' (2862,19)-(2862,20)
                        }: '}' (2863,9)-(2863,10)
                    case_statement (2864,9)-(3012,10)
                      case: 'case' (2864,9)-(2864,13)
                      identifier: 'SCAN_MODE_PROPERTY_NAME' (2864,14)-(2864,37)
                      :: ':' (2864,37)-(2864,38)
                      compound_statement (2865,9)-(3012,10)
                        {: '{' (2865,9)-(2865,10)
                        expression_statement (2866,11)-(2866,65)
                          call_expression (2866,11)-(2866,64)
                            identifier: 'JERRY_ASSERT' (2866,11)-(2866,23)
                            argument_list (2866,24)-(2866,64)
                              (: '(' (2866,24)-(2866,25)
                              binary_expression (2866,25)-(2866,63)
                                identifier: 'stack_top' (2866,25)-(2866,34)
                                ==: '==' (2866,35)-(2866,37)
                                identifier: 'SCAN_STACK_OBJECT_LITERAL' (2866,38)-(2866,63)
                              ): ')' (2866,63)-(2866,64)
                          ;: ';' (2866,64)-(2866,65)
                        if_statement (2868,11)-(2871,12)
                          if: 'if' (2868,11)-(2868,13)
                          parenthesized_expression (2868,14)-(2868,49)
                            (: '(' (2868,14)-(2868,15)
                            call_expression (2868,15)-(2868,48)
                              identifier: 'lexer_scan_identifier' (2868,15)-(2868,36)
                              argument_list (2868,37)-(2868,48)
                                (: '(' (2868,37)-(2868,38)
                                identifier: 'context_p' (2868,38)-(2868,47)
                                ): ')' (2868,47)-(2868,48)
                            ): ')' (2868,48)-(2868,49)
                          compound_statement (2869,11)-(2871,12)
                            {: '{' (2869,11)-(2869,12)
                            expression_statement (2870,13)-(2870,55)
                              call_expression (2870,13)-(2870,54)
                                identifier: 'lexer_check_property_modifier' (2870,13)-(2870,42)
                                argument_list (2870,43)-(2870,54)
                                  (: '(' (2870,43)-(2870,44)
                                  identifier: 'context_p' (2870,44)-(2870,53)
                                  ): ')' (2870,53)-(2870,54)
                              ;: ';' (2870,54)-(2870,55)
                            }: '}' (2871,11)-(2871,12)
                        preproc_if (2873,1)-(2880,7)
                          #if: '#if' (2873,1)-(2873,4)
                          call_expression (2873,5)-(2873,27)
                            identifier: 'ENABLED' (2873,5)-(2873,12)
                            argument_list (2873,13)-(2873,27)
                              (: '(' (2873,13)-(2873,14)
                              identifier: 'JERRY_ES2015' (2873,14)-(2873,26)
                              ): ')' (2873,26)-(2873,27)
                          
: '
' (2873,27)-(2874,1)
                          if_statement (2874,11)-(2879,12)
                            if: 'if' (2874,11)-(2874,13)
                            parenthesized_expression (2874,14)-(2874,58)
                              (: '(' (2874,14)-(2874,15)
                              binary_expression (2874,15)-(2874,57)
                                field_expression (2874,15)-(2874,36)
                                  field_expression (2874,15)-(2874,31)
                                    identifier: 'context_p' (2874,15)-(2874,24)
                                    ->: '->' (2874,24)-(2874,26)
                                    field_identifier: 'token' (2874,26)-(2874,31)
                                  .: '.' (2874,31)-(2874,32)
                                  field_identifier: 'type' (2874,32)-(2874,36)
                                ==: '==' (2874,37)-(2874,39)
                                identifier: 'LEXER_LEFT_SQUARE' (2874,40)-(2874,57)
                              ): ')' (2874,57)-(2874,58)
                            compound_statement (2875,11)-(2879,12)
                              {: '{' (2875,11)-(2875,12)
                              expression_statement (2876,13)-(2876,79)
                                call_expression (2876,13)-(2876,78)
                                  identifier: 'parser_stack_push_uint8' (2876,13)-(2876,36)
                                  argument_list (2876,37)-(2876,78)
                                    (: '(' (2876,37)-(2876,38)
                                    identifier: 'context_p' (2876,38)-(2876,47)
                                    ,: ',' (2876,47)-(2876,48)
                                    identifier: 'SCAN_STACK_COMPUTED_PROPERTY' (2876,49)-(2876,77)
                                    ): ')' (2876,77)-(2876,78)
                                ;: ';' (2876,78)-(2876,79)
                              expression_statement (2877,13)-(2877,65)
                                assignment_expression (2877,13)-(2877,64)
                                  field_expression (2877,13)-(2877,33)
                                    identifier: 'scanner_context' (2877,13)-(2877,28)
                                    .: '.' (2877,28)-(2877,29)
                                    field_identifier: 'mode' (2877,29)-(2877,33)
                                  =: '=' (2877,34)-(2877,35)
                                  identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (2877,36)-(2877,64)
                                ;: ';' (2877,64)-(2877,65)
                              break_statement (2878,13)-(2878,19)
                                break: 'break' (2878,13)-(2878,18)
                                ;: ';' (2878,18)-(2878,19)
                              }: '}' (2879,11)-(2879,12)
                          #endif: '#endif' (2880,1)-(2880,7)
                        comment: '/* ENABLED (JERRY_ES2015) */' (2880,8)-(2880,36)
                        if_statement (2882,11)-(2886,12)
                          if: 'if' (2882,11)-(2882,13)
                          parenthesized_expression (2882,14)-(2882,58)
                            (: '(' (2882,14)-(2882,15)
                            binary_expression (2882,15)-(2882,57)
                              field_expression (2882,15)-(2882,36)
                                field_expression (2882,15)-(2882,31)
                                  identifier: 'context_p' (2882,15)-(2882,24)
                                  ->: '->' (2882,24)-(2882,26)
                                  field_identifier: 'token' (2882,26)-(2882,31)
                                .: '.' (2882,31)-(2882,32)
                                field_identifier: 'type' (2882,32)-(2882,36)
                              ==: '==' (2882,37)-(2882,39)
                              identifier: 'LEXER_RIGHT_BRACE' (2882,40)-(2882,57)
                            ): ')' (2882,57)-(2882,58)
                          compound_statement (2883,11)-(2886,12)
                            {: '{' (2883,11)-(2883,12)
                            expression_statement (2884,13)-(2884,69)
                              assignment_expression (2884,13)-(2884,68)
                                field_expression (2884,13)-(2884,33)
                                  identifier: 'scanner_context' (2884,13)-(2884,28)
                                  .: '.' (2884,28)-(2884,29)
                                  field_identifier: 'mode' (2884,29)-(2884,33)
                                =: '=' (2884,34)-(2884,35)
                                identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (2884,36)-(2884,68)
                              ;: ';' (2884,68)-(2884,69)
                            continue_statement (2885,13)-(2885,22)
                              continue: 'continue' (2885,13)-(2885,21)
                              ;: ';' (2885,21)-(2885,22)
                            }: '}' (2886,11)-(2886,12)
                        if_statement (2888,11)-(2933,12)
                          if: 'if' (2888,11)-(2888,13)
                          parenthesized_expression (2888,14)-(2893,65)
                            (: '(' (2888,14)-(2888,15)
                            binary_expression (2888,15)-(2893,64)
                              binary_expression (2888,15)-(2891,57)
                                binary_expression (2888,15)-(2890,59)
                                  binary_expression (2888,15)-(2889,27)
                                    field_expression (2888,15)-(2888,36)
                                      field_expression (2888,15)-(2888,31)
                                        identifier: 'context_p' (2888,15)-(2888,24)
                                        ->: '->' (2888,24)-(2888,26)
                                        field_identifier: 'token' (2888,26)-(2888,31)
                                      .: '.' (2888,31)-(2888,32)
                                      field_identifier: 'type' (2888,32)-(2888,36)
                                    ==: '==' (2888,37)-(2888,39)
                                    call_expression (2888,40)-(2889,27)
                                      identifier: 'LEXER_PROPERTY_GETTER' (2888,40)-(2888,61)
                                      ERROR (2889,1)-(2889,12)
                                        #if: '#if' (2889,1)-(2889,4)
                                        identifier: 'ENABLED' (2889,5)-(2889,12)
                                      argument_list (2889,13)-(2889,27)
                                        (: '(' (2889,13)-(2889,14)
                                        identifier: 'JERRY_ES2015' (2889,14)-(2889,26)
                                        ): ')' (2889,26)-(2889,27)
                                  ||: '||' (2890,15)-(2890,17)
                                  binary_expression (2890,18)-(2890,59)
                                    field_expression (2890,18)-(2890,39)
                                      field_expression (2890,18)-(2890,34)
                                        identifier: 'context_p' (2890,18)-(2890,27)
                                        ->: '->' (2890,27)-(2890,29)
                                        field_identifier: 'token' (2890,29)-(2890,34)
                                      .: '.' (2890,34)-(2890,35)
                                      field_identifier: 'type' (2890,35)-(2890,39)
                                    ==: '==' (2890,40)-(2890,42)
                                    identifier: 'LEXER_KEYW_ASYNC' (2890,43)-(2890,59)
                                ||: '||' (2891,15)-(2891,17)
                                binary_expression (2891,18)-(2891,57)
                                  field_expression (2891,18)-(2891,39)
                                    field_expression (2891,18)-(2891,34)
                                      identifier: 'context_p' (2891,18)-(2891,27)
                                      ->: '->' (2891,27)-(2891,29)
                                      field_identifier: 'token' (2891,29)-(2891,34)
                                    .: '.' (2891,34)-(2891,35)
                                    field_identifier: 'type' (2891,35)-(2891,39)
                                  ==: '==' (2891,40)-(2891,42)
                                  identifier: 'LEXER_MULTIPLY' (2891,43)-(2891,57)
                              ERROR (2892,1)-(2892,7)
                                #endif: '#endif' (2892,1)-(2892,7)
                              comment: '/* ENABLED (JERRY_ES2015) */' (2892,8)-(2892,36)
                              ||: '||' (2893,15)-(2893,17)
                              binary_expression (2893,18)-(2893,64)
                                field_expression (2893,18)-(2893,39)
                                  field_expression (2893,18)-(2893,34)
                                    identifier: 'context_p' (2893,18)-(2893,27)
                                    ->: '->' (2893,27)-(2893,29)
                                    field_identifier: 'token' (2893,29)-(2893,34)
                                  .: '.' (2893,34)-(2893,35)
                                  field_identifier: 'type' (2893,35)-(2893,39)
                                ==: '==' (2893,40)-(2893,42)
                                identifier: 'LEXER_PROPERTY_SETTER' (2893,43)-(2893,64)
                            ): ')' (2893,64)-(2893,65)
                          compound_statement (2894,11)-(2933,12)
                            {: '{' (2894,11)-(2894,12)
                            declaration (2895,13)-(2895,73)
                              primitive_type: 'uint16_t' (2895,13)-(2895,21)
                              init_declarator (2895,22)-(2895,72)
                                identifier: 'literal_pool_flags' (2895,22)-(2895,40)
                                =: '=' (2895,41)-(2895,42)
                                identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (2895,43)-(2895,72)
                              ;: ';' (2895,72)-(2895,73)
                            preproc_if (2897,1)-(2911,7)
                              #if: '#if' (2897,1)-(2897,4)
                              call_expression (2897,5)-(2897,27)
                                identifier: 'ENABLED' (2897,5)-(2897,12)
                                argument_list (2897,13)-(2897,27)
                                  (: '(' (2897,13)-(2897,14)
                                  identifier: 'JERRY_ES2015' (2897,14)-(2897,26)
                                  ): ')' (2897,26)-(2897,27)
                              
: '
' (2897,27)-(2898,1)
                              if_statement (2898,13)-(2910,14)
                                if: 'if' (2898,13)-(2898,15)
                                parenthesized_expression (2898,16)-(2898,57)
                                  (: '(' (2898,16)-(2898,17)
                                  binary_expression (2898,17)-(2898,56)
                                    field_expression (2898,17)-(2898,38)
                                      field_expression (2898,17)-(2898,33)
                                        identifier: 'context_p' (2898,17)-(2898,26)
                                        ->: '->' (2898,26)-(2898,28)
                                        field_identifier: 'token' (2898,28)-(2898,33)
                                      .: '.' (2898,33)-(2898,34)
                                      field_identifier: 'type' (2898,34)-(2898,38)
                                    ==: '==' (2898,39)-(2898,41)
                                    identifier: 'LEXER_MULTIPLY' (2898,42)-(2898,56)
                                  ): ')' (2898,56)-(2898,57)
                                compound_statement (2899,13)-(2901,14)
                                  {: '{' (2899,13)-(2899,14)
                                  expression_statement (2900,15)-(2900,68)
                                    assignment_expression (2900,15)-(2900,67)
                                      identifier: 'literal_pool_flags' (2900,15)-(2900,33)
                                      |=: '|=' (2900,34)-(2900,36)
                                      identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (2900,37)-(2900,67)
                                    ;: ';' (2900,67)-(2900,68)
                                  }: '}' (2901,13)-(2901,14)
                                else_clause (2902,13)-(2910,14)
                                  else: 'else' (2902,13)-(2902,17)
                                  if_statement (2902,18)-(2910,14)
                                    if: 'if' (2902,18)-(2902,20)
                                    parenthesized_expression (2902,21)-(2902,64)
                                      (: '(' (2902,21)-(2902,22)
                                      binary_expression (2902,22)-(2902,63)
                                        field_expression (2902,22)-(2902,43)
                                          field_expression (2902,22)-(2902,38)
                                            identifier: 'context_p' (2902,22)-(2902,31)
                                            ->: '->' (2902,31)-(2902,33)
                                            field_identifier: 'token' (2902,33)-(2902,38)
                                          .: '.' (2902,38)-(2902,39)
                                          field_identifier: 'type' (2902,39)-(2902,43)
                                        ==: '==' (2902,44)-(2902,46)
                                        identifier: 'LEXER_KEYW_ASYNC' (2902,47)-(2902,63)
                                      ): ')' (2902,63)-(2902,64)
                                    compound_statement (2903,13)-(2910,14)
                                      {: '{' (2903,13)-(2903,14)
                                      expression_statement (2904,15)-(2904,64)
                                        assignment_expression (2904,15)-(2904,63)
                                          identifier: 'literal_pool_flags' (2904,15)-(2904,33)
                                          |=: '|=' (2904,34)-(2904,36)
                                          identifier: 'SCANNER_LITERAL_POOL_ASYNC' (2904,37)-(2904,63)
                                        ;: ';' (2904,63)-(2904,64)
                                      if_statement (2906,15)-(2909,16)
                                        if: 'if' (2906,15)-(2906,17)
                                        parenthesized_expression (2906,18)-(2906,55)
                                          (: '(' (2906,18)-(2906,19)
                                          call_expression (2906,19)-(2906,54)
                                            identifier: 'lexer_consume_generator' (2906,19)-(2906,42)
                                            argument_list (2906,43)-(2906,54)
                                              (: '(' (2906,43)-(2906,44)
                                              identifier: 'context_p' (2906,44)-(2906,53)
                                              ): ')' (2906,53)-(2906,54)
                                          ): ')' (2906,54)-(2906,55)
                                        compound_statement (2907,15)-(2909,16)
                                          {: '{' (2907,15)-(2907,16)
                                          expression_statement (2908,17)-(2908,70)
                                            assignment_expression (2908,17)-(2908,69)
                                              identifier: 'literal_pool_flags' (2908,17)-(2908,35)
                                              |=: '|=' (2908,36)-(2908,38)
                                              identifier: 'SCANNER_LITERAL_POOL_GENERATOR' (2908,39)-(2908,69)
                                            ;: ';' (2908,69)-(2908,70)
                                          }: '}' (2909,15)-(2909,16)
                                      }: '}' (2910,13)-(2910,14)
                              #endif: '#endif' (2911,1)-(2911,7)
                            comment: '/* ENABLED (JERRY_ES2015) */' (2911,8)-(2911,36)
                            expression_statement (2913,13)-(2913,79)
                              call_expression (2913,13)-(2913,78)
                                identifier: 'parser_stack_push_uint8' (2913,13)-(2913,36)
                                argument_list (2913,37)-(2913,78)
                                  (: '(' (2913,37)-(2913,38)
                                  identifier: 'context_p' (2913,38)-(2913,47)
                                  ,: ',' (2913,47)-(2913,48)
                                  identifier: 'SCAN_STACK_FUNCTION_PROPERTY' (2913,49)-(2913,77)
                                  ): ')' (2913,77)-(2913,78)
                              ;: ';' (2913,78)-(2913,79)
                            expression_statement (2914,13)-(2914,47)
                              call_expression (2914,13)-(2914,46)
                                identifier: 'lexer_scan_identifier' (2914,13)-(2914,34)
                                argument_list (2914,35)-(2914,46)
                                  (: '(' (2914,35)-(2914,36)
                                  identifier: 'context_p' (2914,36)-(2914,45)
                                  ): ')' (2914,45)-(2914,46)
                              ;: ';' (2914,46)-(2914,47)
                            preproc_if (2916,1)-(2923,7)
                              #if: '#if' (2916,1)-(2916,4)
                              call_expression (2916,5)-(2916,27)
                                identifier: 'ENABLED' (2916,5)-(2916,12)
                                argument_list (2916,13)-(2916,27)
                                  (: '(' (2916,13)-(2916,14)
                                  identifier: 'JERRY_ES2015' (2916,14)-(2916,26)
                                  ): ')' (2916,26)-(2916,27)
                              
: '
' (2916,27)-(2917,1)
                              if_statement (2917,13)-(2922,14)
                                if: 'if' (2917,13)-(2917,15)
                                parenthesized_expression (2917,16)-(2917,60)
                                  (: '(' (2917,16)-(2917,17)
                                  binary_expression (2917,17)-(2917,59)
                                    field_expression (2917,17)-(2917,38)
                                      field_expression (2917,17)-(2917,33)
                                        identifier: 'context_p' (2917,17)-(2917,26)
                                        ->: '->' (2917,26)-(2917,28)
                                        field_identifier: 'token' (2917,28)-(2917,33)
                                      .: '.' (2917,33)-(2917,34)
                                      field_identifier: 'type' (2917,34)-(2917,38)
                                    ==: '==' (2917,39)-(2917,41)
                                    identifier: 'LEXER_LEFT_SQUARE' (2917,42)-(2917,59)
                                  ): ')' (2917,59)-(2917,60)
                                compound_statement (2918,13)-(2922,14)
                                  {: '{' (2918,13)-(2918,14)
                                  expression_statement (2919,15)-(2919,111)
                                    call_expression (2919,15)-(2919,110)
                                      identifier: 'parser_stack_push_uint8' (2919,15)-(2919,38)
                                      argument_list (2919,39)-(2919,110)
                                        (: '(' (2919,39)-(2919,40)
                                        identifier: 'context_p' (2919,40)-(2919,49)
                                        ,: ',' (2919,49)-(2919,50)
                                        call_expression (2919,51)-(2919,109)
                                          identifier: 'SCANNER_FROM_LITERAL_POOL_TO_COMPUTED' (2919,51)-(2919,88)
                                          argument_list (2919,89)-(2919,109)
                                            (: '(' (2919,89)-(2919,90)
                                            identifier: 'literal_pool_flags' (2919,90)-(2919,108)
                                            ): ')' (2919,108)-(2919,109)
                                        ): ')' (2919,109)-(2919,110)
                                    ;: ';' (2919,110)-(2919,111)
                                  expression_statement (2920,15)-(2920,67)
                                    assignment_expression (2920,15)-(2920,66)
                                      field_expression (2920,15)-(2920,35)
                                        identifier: 'scanner_context' (2920,15)-(2920,30)
                                        .: '.' (2920,30)-(2920,31)
                                        field_identifier: 'mode' (2920,31)-(2920,35)
                                      =: '=' (2920,36)-(2920,37)
                                      identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (2920,38)-(2920,66)
                                    ;: ';' (2920,66)-(2920,67)
                                  break_statement (2921,15)-(2921,21)
                                    break: 'break' (2921,15)-(2921,20)
                                    ;: ';' (2921,20)-(2921,21)
                                  }: '}' (2922,13)-(2922,14)
                              #endif: '#endif' (2923,1)-(2923,7)
                            comment: '/* ENABLED (JERRY_ES2015) */' (2923,8)-(2923,36)
                            if_statement (2925,13)-(2928,14)
                              if: 'if' (2925,13)-(2925,15)
                              parenthesized_expression (2925,16)-(2925,56)
                                (: '(' (2925,16)-(2925,17)
                                binary_expression (2925,17)-(2925,55)
                                  field_expression (2925,17)-(2925,38)
                                    field_expression (2925,17)-(2925,33)
                                      identifier: 'context_p' (2925,17)-(2925,26)
                                      ->: '->' (2925,26)-(2925,28)
                                      field_identifier: 'token' (2925,28)-(2925,33)
                                    .: '.' (2925,33)-(2925,34)
                                    field_identifier: 'type' (2925,34)-(2925,38)
                                  !=: '!=' (2925,39)-(2925,41)
                                  identifier: 'LEXER_LITERAL' (2925,42)-(2925,55)
                                ): ')' (2925,55)-(2925,56)
                              compound_statement (2926,13)-(2928,14)
                                {: '{' (2926,13)-(2926,14)
                                expression_statement (2927,15)-(2927,47)
                                  call_expression (2927,15)-(2927,46)
                                    identifier: 'scanner_raise_error' (2927,15)-(2927,34)
                                    argument_list (2927,35)-(2927,46)
                                      (: '(' (2927,35)-(2927,36)
                                      identifier: 'context_p' (2927,36)-(2927,45)
                                      ): ')' (2927,45)-(2927,46)
                                  ;: ';' (2927,46)-(2927,47)
                                }: '}' (2928,13)-(2928,14)
                            expression_statement (2930,13)-(2930,89)
                              call_expression (2930,13)-(2930,88)
                                identifier: 'scanner_push_literal_pool' (2930,13)-(2930,38)
                                argument_list (2930,39)-(2930,88)
                                  (: '(' (2930,39)-(2930,40)
                                  identifier: 'context_p' (2930,40)-(2930,49)
                                  ,: ',' (2930,49)-(2930,50)
                                  pointer_expression (2930,51)-(2930,67)
                                    &: '&' (2930,51)-(2930,52)
                                    identifier: 'scanner_context' (2930,52)-(2930,67)
                                  ,: ',' (2930,67)-(2930,68)
                                  identifier: 'literal_pool_flags' (2930,69)-(2930,87)
                                  ): ')' (2930,87)-(2930,88)
                              ;: ';' (2930,88)-(2930,89)
                            expression_statement (2931,13)-(2931,65)
                              assignment_expression (2931,13)-(2931,64)
                                field_expression (2931,13)-(2931,33)
                                  identifier: 'scanner_context' (2931,13)-(2931,28)
                                  .: '.' (2931,28)-(2931,29)
                                  field_identifier: 'mode' (2931,29)-(2931,33)
                                =: '=' (2931,34)-(2931,35)
                                identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (2931,36)-(2931,64)
                              ;: ';' (2931,64)-(2931,65)
                            break_statement (2932,13)-(2932,19)
                              break: 'break' (2932,13)-(2932,18)
                              ;: ';' (2932,18)-(2932,19)
                            }: '}' (2933,11)-(2933,12)
                        if_statement (2935,11)-(2938,12)
                          if: 'if' (2935,11)-(2935,13)
                          parenthesized_expression (2935,14)-(2935,54)
                            (: '(' (2935,14)-(2935,15)
                            binary_expression (2935,15)-(2935,53)
                              field_expression (2935,15)-(2935,36)
                                field_expression (2935,15)-(2935,31)
                                  identifier: 'context_p' (2935,15)-(2935,24)
                                  ->: '->' (2935,24)-(2935,26)
                                  field_identifier: 'token' (2935,26)-(2935,31)
                                .: '.' (2935,31)-(2935,32)
                                field_identifier: 'type' (2935,32)-(2935,36)
                              !=: '!=' (2935,37)-(2935,39)
                              identifier: 'LEXER_LITERAL' (2935,40)-(2935,53)
                            ): ')' (2935,53)-(2935,54)
                          compound_statement (2936,11)-(2938,12)
                            {: '{' (2936,11)-(2936,12)
                            expression_statement (2937,13)-(2937,45)
                              call_expression (2937,13)-(2937,44)
                                identifier: 'scanner_raise_error' (2937,13)-(2937,32)
                                argument_list (2937,33)-(2937,44)
                                  (: '(' (2937,33)-(2937,34)
                                  identifier: 'context_p' (2937,34)-(2937,43)
                                  ): ')' (2937,43)-(2937,44)
                              ;: ';' (2937,44)-(2937,45)
                            }: '}' (2938,11)-(2938,12)
                        preproc_if (2940,1)-(2944,7)
                          #if: '#if' (2940,1)-(2940,4)
                          call_expression (2940,5)-(2940,27)
                            identifier: 'ENABLED' (2940,5)-(2940,12)
                            argument_list (2940,13)-(2940,27)
                              (: '(' (2940,13)-(2940,14)
                              identifier: 'JERRY_ES2015' (2940,14)-(2940,26)
                              ): ')' (2940,26)-(2940,27)
                          
: '
' (2940,27)-(2941,1)
                          declaration (2941,11)-(2941,68)
                            type_identifier: 'parser_line_counter_t' (2941,11)-(2941,32)
                            init_declarator (2941,33)-(2941,67)
                              identifier: 'start_line' (2941,33)-(2941,43)
                              =: '=' (2941,44)-(2941,45)
                              field_expression (2941,46)-(2941,67)
                                field_expression (2941,46)-(2941,62)
                                  identifier: 'context_p' (2941,46)-(2941,55)
                                  ->: '->' (2941,55)-(2941,57)
                                  field_identifier: 'token' (2941,57)-(2941,62)
                                .: '.' (2941,62)-(2941,63)
                                field_identifier: 'line' (2941,63)-(2941,67)
                            ;: ';' (2941,67)-(2941,68)
                          declaration (2942,11)-(2942,72)
                            type_identifier: 'parser_line_counter_t' (2942,11)-(2942,32)
                            init_declarator (2942,33)-(2942,71)
                              identifier: 'start_column' (2942,33)-(2942,45)
                              =: '=' (2942,46)-(2942,47)
                              field_expression (2942,48)-(2942,71)
                                field_expression (2942,48)-(2942,64)
                                  identifier: 'context_p' (2942,48)-(2942,57)
                                  ->: '->' (2942,57)-(2942,59)
                                  field_identifier: 'token' (2942,59)-(2942,64)
                                .: '.' (2942,64)-(2942,65)
                                field_identifier: 'column' (2942,65)-(2942,71)
                            ;: ';' (2942,71)-(2942,72)
                          declaration (2943,11)-(2943,87)
                            primitive_type: 'bool' (2943,11)-(2943,15)
                            init_declarator (2943,16)-(2943,86)
                              identifier: 'is_ident' (2943,16)-(2943,24)
                              =: '=' (2943,25)-(2943,26)
                              parenthesized_expression (2943,27)-(2943,86)
                                (: '(' (2943,27)-(2943,28)
                                binary_expression (2943,28)-(2943,85)
                                  field_expression (2943,28)-(2943,62)
                                    field_expression (2943,28)-(2943,57)
                                      field_expression (2943,28)-(2943,44)
                                        identifier: 'context_p' (2943,28)-(2943,37)
                                        ->: '->' (2943,37)-(2943,39)
                                        field_identifier: 'token' (2943,39)-(2943,44)
                                      .: '.' (2943,44)-(2943,45)
                                      field_identifier: 'lit_location' (2943,45)-(2943,57)
                                    .: '.' (2943,57)-(2943,58)
                                    field_identifier: 'type' (2943,58)-(2943,62)
                                  ==: '==' (2943,63)-(2943,65)
                                  identifier: 'LEXER_IDENT_LITERAL' (2943,66)-(2943,85)
                                ): ')' (2943,85)-(2943,86)
                            ;: ';' (2943,86)-(2943,87)
                          #endif: '#endif' (2944,1)-(2944,7)
                        comment: '/* ENABLED (JERRY_ES2015) */' (2944,8)-(2944,36)
                        expression_statement (2946,11)-(2946,40)
                          call_expression (2946,11)-(2946,39)
                            identifier: 'lexer_next_token' (2946,11)-(2946,27)
                            argument_list (2946,28)-(2946,39)
                              (: '(' (2946,28)-(2946,29)
                              identifier: 'context_p' (2946,29)-(2946,38)
                              ): ')' (2946,38)-(2946,39)
                          ;: ';' (2946,39)-(2946,40)
                        preproc_if (2948,1)-(2996,7)
                          #if: '#if' (2948,1)-(2948,4)
                          call_expression (2948,5)-(2948,27)
                            identifier: 'ENABLED' (2948,5)-(2948,12)
                            argument_list (2948,13)-(2948,27)
                              (: '(' (2948,13)-(2948,14)
                              identifier: 'JERRY_ES2015' (2948,14)-(2948,26)
                              ): ')' (2948,26)-(2948,27)
                          
: '
' (2948,27)-(2949,1)
                          if_statement (2949,11)-(2956,12)
                            if: 'if' (2949,11)-(2949,13)
                            parenthesized_expression (2949,14)-(2949,57)
                              (: '(' (2949,14)-(2949,15)
                              binary_expression (2949,15)-(2949,56)
                                field_expression (2949,15)-(2949,36)
                                  field_expression (2949,15)-(2949,31)
                                    identifier: 'context_p' (2949,15)-(2949,24)
                                    ->: '->' (2949,24)-(2949,26)
                                    field_identifier: 'token' (2949,26)-(2949,31)
                                  .: '.' (2949,31)-(2949,32)
                                  field_identifier: 'type' (2949,32)-(2949,36)
                                ==: '==' (2949,37)-(2949,39)
                                identifier: 'LEXER_LEFT_PAREN' (2949,40)-(2949,56)
                              ): ')' (2949,56)-(2949,57)
                            compound_statement (2950,11)-(2956,12)
                              {: '{' (2950,11)-(2950,12)
                              expression_statement (2951,13)-(2951,100)
                                call_expression (2951,13)-(2951,99)
                                  identifier: 'scanner_push_literal_pool' (2951,13)-(2951,38)
                                  argument_list (2951,39)-(2951,99)
                                    (: '(' (2951,39)-(2951,40)
                                    identifier: 'context_p' (2951,40)-(2951,49)
                                    ,: ',' (2951,49)-(2951,50)
                                    pointer_expression (2951,51)-(2951,67)
                                      &: '&' (2951,51)-(2951,52)
                                      identifier: 'scanner_context' (2951,52)-(2951,67)
                                    ,: ',' (2951,67)-(2951,68)
                                    identifier: 'SCANNER_LITERAL_POOL_FUNCTION' (2951,69)-(2951,98)
                                    ): ')' (2951,98)-(2951,99)
                                ;: ';' (2951,99)-(2951,100)
                              expression_statement (2953,13)-(2953,79)
                                call_expression (2953,13)-(2953,78)
                                  identifier: 'parser_stack_push_uint8' (2953,13)-(2953,36)
                                  argument_list (2953,37)-(2953,78)
                                    (: '(' (2953,37)-(2953,38)
                                    identifier: 'context_p' (2953,38)-(2953,47)
                                    ,: ',' (2953,47)-(2953,48)
                                    identifier: 'SCAN_STACK_FUNCTION_PROPERTY' (2953,49)-(2953,77)
                                    ): ')' (2953,77)-(2953,78)
                                ;: ';' (2953,78)-(2953,79)
                              expression_statement (2954,13)-(2954,65)
                                assignment_expression (2954,13)-(2954,64)
                                  field_expression (2954,13)-(2954,33)
                                    identifier: 'scanner_context' (2954,13)-(2954,28)
                                    .: '.' (2954,28)-(2954,29)
                                    field_identifier: 'mode' (2954,29)-(2954,33)
                                  =: '=' (2954,34)-(2954,35)
                                  identifier: 'SCAN_MODE_FUNCTION_ARGUMENTS' (2954,36)-(2954,64)
                                ;: ';' (2954,64)-(2954,65)
                              continue_statement (2955,13)-(2955,22)
                                continue: 'continue' (2955,13)-(2955,21)
                                ;: ';' (2955,21)-(2955,22)
                              }: '}' (2956,11)-(2956,12)
                          if_statement (2958,11)-(2995,12)
                            if: 'if' (2958,11)-(2958,13)
                            parenthesized_expression (2958,14)-(2961,61)
                              (: '(' (2958,14)-(2958,15)
                              binary_expression (2958,15)-(2961,60)
                                identifier: 'is_ident' (2958,15)-(2958,23)
                                &&: '&&' (2959,15)-(2959,17)
                                parenthesized_expression (2959,18)-(2961,60)
                                  (: '(' (2959,18)-(2959,19)
                                  binary_expression (2959,19)-(2961,59)
                                    binary_expression (2959,19)-(2960,64)
                                      binary_expression (2959,19)-(2959,55)
                                        field_expression (2959,19)-(2959,40)
                                          field_expression (2959,19)-(2959,35)
                                            identifier: 'context_p' (2959,19)-(2959,28)
                                            ->: '->' (2959,28)-(2959,30)
                                            field_identifier: 'token' (2959,30)-(2959,35)
                                          .: '.' (2959,35)-(2959,36)
                                          field_identifier: 'type' (2959,36)-(2959,40)
                                        ==: '==' (2959,41)-(2959,43)
                                        identifier: 'LEXER_COMMA' (2959,44)-(2959,55)
                                      ||: '||' (2960,19)-(2960,21)
                                      binary_expression (2960,22)-(2960,64)
                                        field_expression (2960,22)-(2960,43)
                                          field_expression (2960,22)-(2960,38)
                                            identifier: 'context_p' (2960,22)-(2960,31)
                                            ->: '->' (2960,31)-(2960,33)
                                            field_identifier: 'token' (2960,33)-(2960,38)
                                          .: '.' (2960,38)-(2960,39)
                                          field_identifier: 'type' (2960,39)-(2960,43)
                                        ==: '==' (2960,44)-(2960,46)
                                        identifier: 'LEXER_RIGHT_BRACE' (2960,47)-(2960,64)
                                    ||: '||' (2961,19)-(2961,21)
                                    binary_expression (2961,22)-(2961,59)
                                      field_expression (2961,22)-(2961,43)
                                        field_expression (2961,22)-(2961,38)
                                          identifier: 'context_p' (2961,22)-(2961,31)
                                          ->: '->' (2961,31)-(2961,33)
                                          field_identifier: 'token' (2961,33)-(2961,38)
                                        .: '.' (2961,38)-(2961,39)
                                        field_identifier: 'type' (2961,39)-(2961,43)
                                      ==: '==' (2961,44)-(2961,46)
                                      identifier: 'LEXER_ASSIGN' (2961,47)-(2961,59)
                                  ): ')' (2961,59)-(2961,60)
                              ): ')' (2961,60)-(2961,61)
                            compound_statement (2962,11)-(2995,12)
                              {: '{' (2962,11)-(2962,12)
                              expression_statement (2963,13)-(2963,72)
                                assignment_expression (2963,13)-(2963,71)
                                  field_expression (2963,13)-(2963,32)
                                    identifier: 'context_p' (2963,13)-(2963,22)
                                    ->: '->' (2963,22)-(2963,24)
                                    field_identifier: 'source_p' (2963,24)-(2963,32)
                                  =: '=' (2963,33)-(2963,34)
                                  field_expression (2963,35)-(2963,71)
                                    field_expression (2963,35)-(2963,64)
                                      field_expression (2963,35)-(2963,51)
                                        identifier: 'context_p' (2963,35)-(2963,44)
                                        ->: '->' (2963,44)-(2963,46)
                                        field_identifier: 'token' (2963,46)-(2963,51)
                                      .: '.' (2963,51)-(2963,52)
                                      field_identifier: 'lit_location' (2963,52)-(2963,64)
                                    .: '.' (2963,64)-(2963,65)
                                    field_identifier: 'char_p' (2963,65)-(2963,71)
                                ;: ';' (2963,71)-(2963,72)
                              expression_statement (2964,13)-(2964,42)
                                assignment_expression (2964,13)-(2964,41)
                                  field_expression (2964,13)-(2964,28)
                                    identifier: 'context_p' (2964,13)-(2964,22)
                                    ->: '->' (2964,22)-(2964,24)
                                    field_identifier: 'line' (2964,24)-(2964,28)
                                  =: '=' (2964,29)-(2964,30)
                                  identifier: 'start_line' (2964,31)-(2964,41)
                                ;: ';' (2964,41)-(2964,42)
                              expression_statement (2965,13)-(2965,46)
                                assignment_expression (2965,13)-(2965,45)
                                  field_expression (2965,13)-(2965,30)
                                    identifier: 'context_p' (2965,13)-(2965,22)
                                    ->: '->' (2965,22)-(2965,24)
                                    field_identifier: 'column' (2965,24)-(2965,30)
                                  =: '=' (2965,31)-(2965,32)
                                  identifier: 'start_column' (2965,33)-(2965,45)
                                ;: ';' (2965,45)-(2965,46)
                              expression_statement (2967,13)-(2967,42)
                                call_expression (2967,13)-(2967,41)
                                  identifier: 'lexer_next_token' (2967,13)-(2967,29)
                                  argument_list (2967,30)-(2967,41)
                                    (: '(' (2967,30)-(2967,31)
                                    identifier: 'context_p' (2967,31)-(2967,40)
                                    ): ')' (2967,40)-(2967,41)
                                ;: ';' (2967,41)-(2967,42)
                              expression_statement (2969,13)-(2970,89)
                                call_expression (2969,13)-(2970,88)
                                  identifier: 'JERRY_ASSERT' (2969,13)-(2969,25)
                                  argument_list (2969,26)-(2970,88)
                                    (: '(' (2969,26)-(2969,27)
                                    binary_expression (2969,27)-(2970,87)
                                      binary_expression (2969,27)-(2969,65)
                                        field_expression (2969,27)-(2969,48)
                                          field_expression (2969,27)-(2969,43)
                                            identifier: 'context_p' (2969,27)-(2969,36)
                                            ->: '->' (2969,36)-(2969,38)
                                            field_identifier: 'token' (2969,38)-(2969,43)
                                          .: '.' (2969,43)-(2969,44)
                                          field_identifier: 'type' (2969,44)-(2969,48)
                                        !=: '!=' (2969,49)-(2969,51)
                                        identifier: 'LEXER_LITERAL' (2969,52)-(2969,65)
                                      ||: '||' (2970,27)-(2970,29)
                                      binary_expression (2970,30)-(2970,87)
                                        field_expression (2970,30)-(2970,64)
                                          field_expression (2970,30)-(2970,59)
                                            field_expression (2970,30)-(2970,46)
                                              identifier: 'context_p' (2970,30)-(2970,39)
                                              ->: '->' (2970,39)-(2970,41)
                                              field_identifier: 'token' (2970,41)-(2970,46)
                                            .: '.' (2970,46)-(2970,47)
                                            field_identifier: 'lit_location' (2970,47)-(2970,59)
                                          .: '.' (2970,59)-(2970,60)
                                          field_identifier: 'type' (2970,60)-(2970,64)
                                        ==: '==' (2970,65)-(2970,67)
                                        identifier: 'LEXER_IDENT_LITERAL' (2970,68)-(2970,87)
                                    ): ')' (2970,87)-(2970,88)
                                ;: ';' (2970,88)-(2970,89)
                              if_statement (2972,13)-(2975,14)
                                if: 'if' (2972,13)-(2972,15)
                                parenthesized_expression (2972,16)-(2972,56)
                                  (: '(' (2972,16)-(2972,17)
                                  binary_expression (2972,17)-(2972,55)
                                    field_expression (2972,17)-(2972,38)
                                      field_expression (2972,17)-(2972,33)
                                        identifier: 'context_p' (2972,17)-(2972,26)
                                        ->: '->' (2972,26)-(2972,28)
                                        field_identifier: 'token' (2972,28)-(2972,33)
                                      .: '.' (2972,33)-(2972,34)
                                      field_identifier: 'type' (2972,34)-(2972,38)
                                    !=: '!=' (2972,39)-(2972,41)
                                    identifier: 'LEXER_LITERAL' (2972,42)-(2972,55)
                                  ): ')' (2972,55)-(2972,56)
                                compound_statement (2973,13)-(2975,14)
                                  {: '{' (2973,13)-(2973,14)
                                  expression_statement (2974,15)-(2974,47)
                                    call_expression (2974,15)-(2974,46)
                                      identifier: 'scanner_raise_error' (2974,15)-(2974,34)
                                      argument_list (2974,35)-(2974,46)
                                        (: '(' (2974,35)-(2974,36)
                                        identifier: 'context_p' (2974,36)-(2974,45)
                                        ): ')' (2974,45)-(2974,46)
                                    ;: ';' (2974,46)-(2974,47)
                                  }: '}' (2975,13)-(2975,14)
                              if_statement (2977,13)-(2981,14)
                                if: 'if' (2977,13)-(2977,15)
                                parenthesized_expression (2977,16)-(2977,70)
                                  (: '(' (2977,16)-(2977,17)
                                  binary_expression (2977,17)-(2977,69)
                                    field_expression (2977,17)-(2977,45)
                                      identifier: 'scanner_context' (2977,17)-(2977,32)
                                      .: '.' (2977,32)-(2977,33)
                                      field_identifier: 'binding_type' (2977,33)-(2977,45)
                                    !=: '!=' (2977,46)-(2977,48)
                                    identifier: 'SCANNER_BINDING_NONE' (2977,49)-(2977,69)
                                  ): ')' (2977,69)-(2977,70)
                                compound_statement (2978,13)-(2981,14)
                                  {: '{' (2978,13)-(2978,14)
                                  expression_statement (2979,15)-(2979,56)
                                    assignment_expression (2979,15)-(2979,55)
                                      field_expression (2979,15)-(2979,35)
                                        identifier: 'scanner_context' (2979,15)-(2979,30)
                                        .: '.' (2979,30)-(2979,31)
                                        field_identifier: 'mode' (2979,31)-(2979,35)
                                      =: '=' (2979,36)-(2979,37)
                                      identifier: 'SCAN_MODE_BINDING' (2979,38)-(2979,55)
                                    ;: ';' (2979,55)-(2979,56)
                                  continue_statement (2980,15)-(2980,24)
                                    continue: 'continue' (2980,15)-(2980,23)
                                    ;: ';' (2980,23)-(2980,24)
                                  }: '}' (2981,13)-(2981,14)
                              expression_statement (2983,13)-(2983,65)
                                call_expression (2983,13)-(2983,64)
                                  identifier: 'scanner_add_reference' (2983,13)-(2983,34)
                                  argument_list (2983,35)-(2983,64)
                                    (: '(' (2983,35)-(2983,36)
                                    identifier: 'context_p' (2983,36)-(2983,45)
                                    ,: ',' (2983,45)-(2983,46)
                                    pointer_expression (2983,47)-(2983,63)
                                      &: '&' (2983,47)-(2983,48)
                                      identifier: 'scanner_context' (2983,48)-(2983,63)
                                    ): ')' (2983,63)-(2983,64)
                                ;: ';' (2983,64)-(2983,65)
                              expression_statement (2985,13)-(2985,42)
                                call_expression (2985,13)-(2985,41)
                                  identifier: 'lexer_next_token' (2985,13)-(2985,29)
                                  argument_list (2985,30)-(2985,41)
                                    (: '(' (2985,30)-(2985,31)
                                    identifier: 'context_p' (2985,31)-(2985,40)
                                    ): ')' (2985,40)-(2985,41)
                                ;: ';' (2985,41)-(2985,42)
                              if_statement (2987,13)-(2991,14)
                                if: 'if' (2987,13)-(2987,15)
                                parenthesized_expression (2987,16)-(2987,55)
                                  (: '(' (2987,16)-(2987,17)
                                  binary_expression (2987,17)-(2987,54)
                                    field_expression (2987,17)-(2987,38)
                                      field_expression (2987,17)-(2987,33)
                                        identifier: 'context_p' (2987,17)-(2987,26)
                                        ->: '->' (2987,26)-(2987,28)
                                        field_identifier: 'token' (2987,28)-(2987,33)
                                      .: '.' (2987,33)-(2987,34)
                                      field_identifier: 'type' (2987,34)-(2987,38)
                                    ==: '==' (2987,39)-(2987,41)
                                    identifier: 'LEXER_ASSIGN' (2987,42)-(2987,54)
                                  ): ')' (2987,54)-(2987,55)
                                compound_statement (2988,13)-(2991,14)
                                  {: '{' (2988,13)-(2988,14)
                                  expression_statement (2989,15)-(2989,67)
                                    assignment_expression (2989,15)-(2989,66)
                                      field_expression (2989,15)-(2989,35)
                                        identifier: 'scanner_context' (2989,15)-(2989,30)
                                        .: '.' (2989,30)-(2989,31)
                                        field_identifier: 'mode' (2989,31)-(2989,35)
                                      =: '=' (2989,36)-(2989,37)
                                      identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (2989,38)-(2989,66)
                                    ;: ';' (2989,66)-(2989,67)
                                  break_statement (2990,15)-(2990,21)
                                    break: 'break' (2990,15)-(2990,20)
                                    ;: ';' (2990,20)-(2990,21)
                                  }: '}' (2991,13)-(2991,14)
                              expression_statement (2993,13)-(2993,69)
                                assignment_expression (2993,13)-(2993,68)
                                  field_expression (2993,13)-(2993,33)
                                    identifier: 'scanner_context' (2993,13)-(2993,28)
                                    .: '.' (2993,28)-(2993,29)
                                    field_identifier: 'mode' (2993,29)-(2993,33)
                                  =: '=' (2993,34)-(2993,35)
                                  identifier: 'SCAN_MODE_PRIMARY_EXPRESSION_END' (2993,36)-(2993,68)
                                ;: ';' (2993,68)-(2993,69)
                              continue_statement (2994,13)-(2994,22)
                                continue: 'continue' (2994,13)-(2994,21)
                                ;: ';' (2994,21)-(2994,22)
                              }: '}' (2995,11)-(2995,12)
                          #endif: '#endif' (2996,1)-(2996,7)
                        comment: '/* ENABLED (JERRY_ES2015) */' (2996,8)-(2996,36)
                        if_statement (2998,11)-(3001,12)
                          if: 'if' (2998,11)-(2998,13)
                          parenthesized_expression (2998,14)-(2998,52)
                            (: '(' (2998,14)-(2998,15)
                            binary_expression (2998,15)-(2998,51)
                              field_expression (2998,15)-(2998,36)
                                field_expression (2998,15)-(2998,31)
                                  identifier: 'context_p' (2998,15)-(2998,24)
                                  ->: '->' (2998,24)-(2998,26)
                                  field_identifier: 'token' (2998,26)-(2998,31)
                                .: '.' (2998,31)-(2998,32)
                                field_identifier: 'type' (2998,32)-(2998,36)
                              !=: '!=' (2998,37)-(2998,39)
                              identifier: 'LEXER_COLON' (2998,40)-(2998,51)
                            ): ')' (2998,51)-(2998,52)
                          compound_statement (2999,11)-(3001,12)
                            {: '{' (2999,11)-(2999,12)
                            expression_statement (3000,13)-(3000,45)
                              call_expression (3000,13)-(3000,44)
                                identifier: 'scanner_raise_error' (3000,13)-(3000,32)
                                argument_list (3000,33)-(3000,44)
                                  (: '(' (3000,33)-(3000,34)
                                  identifier: 'context_p' (3000,34)-(3000,43)
                                  ): ')' (3000,43)-(3000,44)
                              ;: ';' (3000,44)-(3000,45)
                            }: '}' (3001,11)-(3001,12)
                        expression_statement (3003,11)-(3003,63)
                          assignment_expression (3003,11)-(3003,62)
                            field_expression (3003,11)-(3003,31)
                              identifier: 'scanner_context' (3003,11)-(3003,26)
                              .: '.' (3003,26)-(3003,27)
                              field_identifier: 'mode' (3003,27)-(3003,31)
                            =: '=' (3003,32)-(3003,33)
                            identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (3003,34)-(3003,62)
                          ;: ';' (3003,62)-(3003,63)
                        preproc_if (3005,1)-(3010,7)
                          #if: '#if' (3005,1)-(3005,4)
                          call_expression (3005,5)-(3005,27)
                            identifier: 'ENABLED' (3005,5)-(3005,12)
                            argument_list (3005,13)-(3005,27)
                              (: '(' (3005,13)-(3005,14)
                              identifier: 'JERRY_ES2015' (3005,14)-(3005,26)
                              ): ')' (3005,26)-(3005,27)
                          
: '
' (3005,27)-(3006,1)
                          if_statement (3006,11)-(3009,12)
                            if: 'if' (3006,11)-(3006,13)
                            parenthesized_expression (3006,14)-(3006,68)
                              (: '(' (3006,14)-(3006,15)
                              binary_expression (3006,15)-(3006,67)
                                field_expression (3006,15)-(3006,43)
                                  identifier: 'scanner_context' (3006,15)-(3006,30)
                                  .: '.' (3006,30)-(3006,31)
                                  field_identifier: 'binding_type' (3006,31)-(3006,43)
                                !=: '!=' (3006,44)-(3006,46)
                                identifier: 'SCANNER_BINDING_NONE' (3006,47)-(3006,67)
                              ): ')' (3006,67)-(3006,68)
                            compound_statement (3007,11)-(3009,12)
                              {: '{' (3007,11)-(3007,12)
                              expression_statement (3008,13)-(3008,54)
                                assignment_expression (3008,13)-(3008,53)
                                  field_expression (3008,13)-(3008,33)
                                    identifier: 'scanner_context' (3008,13)-(3008,28)
                                    .: '.' (3008,28)-(3008,29)
                                    field_identifier: 'mode' (3008,29)-(3008,33)
                                  =: '=' (3008,34)-(3008,35)
                                  identifier: 'SCAN_MODE_BINDING' (3008,36)-(3008,53)
                                ;: ';' (3008,53)-(3008,54)
                              }: '}' (3009,11)-(3009,12)
                          #endif: '#endif' (3010,1)-(3010,7)
                        comment: '/* ENABLED (JERRY_ES2015) */' (3010,8)-(3010,36)
                        break_statement (3011,11)-(3011,17)
                          break: 'break' (3011,11)-(3011,16)
                          ;: ';' (3011,16)-(3011,17)
                        }: '}' (3012,9)-(3012,10)
                    preproc_if (3013,1)-(3136,7)
                      #if: '#if' (3013,1)-(3013,4)
                      call_expression (3013,5)-(3013,27)
                        identifier: 'ENABLED' (3013,5)-(3013,12)
                        argument_list (3013,13)-(3013,27)
                          (: '(' (3013,13)-(3013,14)
                          identifier: 'JERRY_ES2015' (3013,14)-(3013,26)
                          ): ')' (3013,26)-(3013,27)
                      
: '
' (3013,27)-(3014,1)
                      case_statement (3014,9)-(3135,10)
                        case: 'case' (3014,9)-(3014,13)
                        identifier: 'SCAN_MODE_BINDING' (3014,14)-(3014,31)
                        :: ':' (3014,31)-(3014,32)
                        compound_statement (3015,9)-(3135,10)
                          {: '{' (3015,9)-(3015,10)
                          expression_statement (3016,11)-(3021,87)
                            call_expression (3016,11)-(3021,86)
                              identifier: 'JERRY_ASSERT' (3016,11)-(3016,23)
                              argument_list (3016,24)-(3021,86)
                                (: '(' (3016,24)-(3016,25)
                                binary_expression (3016,25)-(3021,85)
                                  binary_expression (3016,25)-(3020,79)
                                    binary_expression (3016,25)-(3019,81)
                                      binary_expression (3016,25)-(3018,81)
                                        binary_expression (3016,25)-(3017,79)
                                          binary_expression (3016,25)-(3016,76)
                                            field_expression (3016,25)-(3016,53)
                                              identifier: 'scanner_context' (3016,25)-(3016,40)
                                              .: '.' (3016,40)-(3016,41)
                                              field_identifier: 'binding_type' (3016,41)-(3016,53)
                                            ==: '==' (3016,54)-(3016,56)
                                            identifier: 'SCANNER_BINDING_VAR' (3016,57)-(3016,76)
                                          ||: '||' (3017,25)-(3017,27)
                                          binary_expression (3017,28)-(3017,79)
                                            field_expression (3017,28)-(3017,56)
                                              identifier: 'scanner_context' (3017,28)-(3017,43)
                                              .: '.' (3017,43)-(3017,44)
                                              field_identifier: 'binding_type' (3017,44)-(3017,56)
                                            ==: '==' (3017,57)-(3017,59)
                                            identifier: 'SCANNER_BINDING_LET' (3017,60)-(3017,79)
                                        ||: '||' (3018,25)-(3018,27)
                                        binary_expression (3018,28)-(3018,81)
                                          field_expression (3018,28)-(3018,56)
                                            identifier: 'scanner_context' (3018,28)-(3018,43)
                                            .: '.' (3018,43)-(3018,44)
                                            field_identifier: 'binding_type' (3018,44)-(3018,56)
                                          ==: '==' (3018,57)-(3018,59)
                                          identifier: 'SCANNER_BINDING_CATCH' (3018,60)-(3018,81)
                                      ||: '||' (3019,25)-(3019,27)
                                      binary_expression (3019,28)-(3019,81)
                                        field_expression (3019,28)-(3019,56)
                                          identifier: 'scanner_context' (3019,28)-(3019,43)
                                          .: '.' (3019,43)-(3019,44)
                                          field_identifier: 'binding_type' (3019,44)-(3019,56)
                                        ==: '==' (3019,57)-(3019,59)
                                        identifier: 'SCANNER_BINDING_CONST' (3019,60)-(3019,81)
                                    ||: '||' (3020,25)-(3020,27)
                                    binary_expression (3020,28)-(3020,79)
                                      field_expression (3020,28)-(3020,56)
                                        identifier: 'scanner_context' (3020,28)-(3020,43)
                                        .: '.' (3020,43)-(3020,44)
                                        field_identifier: 'binding_type' (3020,44)-(3020,56)
                                      ==: '==' (3020,57)-(3020,59)
                                      identifier: 'SCANNER_BINDING_ARG' (3020,60)-(3020,79)
                                  ||: '||' (3021,25)-(3021,27)
                                  binary_expression (3021,28)-(3021,85)
                                    field_expression (3021,28)-(3021,56)
                                      identifier: 'scanner_context' (3021,28)-(3021,43)
                                      .: '.' (3021,43)-(3021,44)
                                      field_identifier: 'binding_type' (3021,44)-(3021,56)
                                    ==: '==' (3021,57)-(3021,59)
                                    identifier: 'SCANNER_BINDING_ARROW_ARG' (3021,60)-(3021,85)
                                ): ')' (3021,85)-(3021,86)
                            ;: ';' (3021,86)-(3021,87)
                          if_statement (3023,11)-(3027,12)
                            if: 'if' (3023,11)-(3023,13)
                            parenthesized_expression (3023,14)-(3023,40)
                              (: '(' (3023,14)-(3023,15)
                              binary_expression (3023,15)-(3023,39)
                                identifier: 'type' (3023,15)-(3023,19)
                                ==: '==' (3023,20)-(3023,22)
                                identifier: 'LEXER_THREE_DOTS' (3023,23)-(3023,39)
                              ): ')' (3023,39)-(3023,40)
                            compound_statement (3024,11)-(3027,12)
                              {: '{' (3024,11)-(3024,12)
                              expression_statement (3025,13)-(3025,42)
                                call_expression (3025,13)-(3025,41)
                                  identifier: 'lexer_next_token' (3025,13)-(3025,29)
                                  argument_list (3025,30)-(3025,41)
                                    (: '(' (3025,30)-(3025,31)
                                    identifier: 'context_p' (3025,31)-(3025,40)
                                    ): ')' (3025,40)-(3025,41)
                                ;: ';' (3025,41)-(3025,42)
                              expression_statement (3026,13)-(3026,63)
                                assignment_expression (3026,13)-(3026,62)
                                  identifier: 'type' (3026,13)-(3026,17)
                                  =: '=' (3026,18)-(3026,19)
                                  cast_expression (3026,20)-(3026,62)
                                    (: '(' (3026,20)-(3026,21)
                                    type_descriptor (3026,21)-(3026,39)
                                      type_identifier: 'lexer_token_type_t' (3026,21)-(3026,39)
                                    ): ')' (3026,39)-(3026,40)
                                    field_expression (3026,41)-(3026,62)
                                      field_expression (3026,41)-(3026,57)
                                        identifier: 'context_p' (3026,41)-(3026,50)
                                        ->: '->' (3026,50)-(3026,52)
                                        field_identifier: 'token' (3026,52)-(3026,57)
                                      .: '.' (3026,57)-(3026,58)
                                      field_identifier: 'type' (3026,58)-(3026,62)
                                ;: ';' (3026,62)-(3026,63)
                              }: '}' (3027,11)-(3027,12)
                          if_statement (3029,11)-(3042,12)
                            if: 'if' (3029,11)-(3029,13)
                            parenthesized_expression (3029,14)-(3029,69)
                              (: '(' (3029,14)-(3029,15)
                              binary_expression (3029,15)-(3029,68)
                                binary_expression (3029,15)-(3029,40)
                                  identifier: 'type' (3029,15)-(3029,19)
                                  ==: '==' (3029,20)-(3029,22)
                                  identifier: 'LEXER_LEFT_SQUARE' (3029,23)-(3029,40)
                                ||: '||' (3029,41)-(3029,43)
                                binary_expression (3029,44)-(3029,68)
                                  identifier: 'type' (3029,44)-(3029,48)
                                  ==: '==' (3029,49)-(3029,51)
                                  identifier: 'LEXER_LEFT_BRACE' (3029,52)-(3029,68)
                              ): ')' (3029,68)-(3029,69)
                            compound_statement (3030,11)-(3042,12)
                              {: '{' (3030,11)-(3030,12)
                              expression_statement (3031,13)-(3031,114)
                                call_expression (3031,13)-(3031,113)
                                  identifier: 'scanner_push_destructuring_pattern' (3031,13)-(3031,47)
                                  argument_list (3031,48)-(3031,113)
                                    (: '(' (3031,48)-(3031,49)
                                    identifier: 'context_p' (3031,49)-(3031,58)
                                    ,: ',' (3031,58)-(3031,59)
                                    pointer_expression (3031,60)-(3031,76)
                                      &: '&' (3031,60)-(3031,61)
                                      identifier: 'scanner_context' (3031,61)-(3031,76)
                                    ,: ',' (3031,76)-(3031,77)
                                    field_expression (3031,78)-(3031,106)
                                      identifier: 'scanner_context' (3031,78)-(3031,93)
                                      .: '.' (3031,93)-(3031,94)
                                      field_identifier: 'binding_type' (3031,94)-(3031,106)
                                    ,: ',' (3031,106)-(3031,107)
                                    true: 'true' (3031,108)-(3031,112)
                                    ): ')' (3031,112)-(3031,113)
                                ;: ';' (3031,113)-(3031,114)
                              if_statement (3033,13)-(3037,14)
                                if: 'if' (3033,13)-(3033,15)
                                parenthesized_expression (3033,16)-(3033,43)
                                  (: '(' (3033,16)-(3033,17)
                                  binary_expression (3033,17)-(3033,42)
                                    identifier: 'type' (3033,17)-(3033,21)
                                    ==: '==' (3033,22)-(3033,24)
                                    identifier: 'LEXER_LEFT_SQUARE' (3033,25)-(3033,42)
                                  ): ')' (3033,42)-(3033,43)
                                compound_statement (3034,13)-(3037,14)
                                  {: '{' (3034,13)-(3034,14)
                                  expression_statement (3035,15)-(3035,77)
                                    call_expression (3035,15)-(3035,76)
                                      identifier: 'parser_stack_push_uint8' (3035,15)-(3035,38)
                                      argument_list (3035,39)-(3035,76)
                                        (: '(' (3035,39)-(3035,40)
                                        identifier: 'context_p' (3035,40)-(3035,49)
                                        ,: ',' (3035,49)-(3035,50)
                                        identifier: 'SCAN_STACK_ARRAY_LITERAL' (3035,51)-(3035,75)
                                        ): ')' (3035,75)-(3035,76)
                                    ;: ';' (3035,76)-(3035,77)
                                  break_statement (3036,15)-(3036,21)
                                    break: 'break' (3036,15)-(3036,20)
                                    ;: ';' (3036,20)-(3036,21)
                                  }: '}' (3037,13)-(3037,14)
                              expression_statement (3039,13)-(3039,76)
                                call_expression (3039,13)-(3039,75)
                                  identifier: 'parser_stack_push_uint8' (3039,13)-(3039,36)
                                  argument_list (3039,37)-(3039,75)
                                    (: '(' (3039,37)-(3039,38)
                                    identifier: 'context_p' (3039,38)-(3039,47)
                                    ,: ',' (3039,47)-(3039,48)
                                    identifier: 'SCAN_STACK_OBJECT_LITERAL' (3039,49)-(3039,74)
                                    ): ')' (3039,74)-(3039,75)
                                ;: ';' (3039,75)-(3039,76)
                              expression_statement (3040,13)-(3040,60)
                                assignment_expression (3040,13)-(3040,59)
                                  field_expression (3040,13)-(3040,33)
                                    identifier: 'scanner_context' (3040,13)-(3040,28)
                                    .: '.' (3040,28)-(3040,29)
                                    field_identifier: 'mode' (3040,29)-(3040,33)
                                  =: '=' (3040,34)-(3040,35)
                                  identifier: 'SCAN_MODE_PROPERTY_NAME' (3040,36)-(3040,59)
                                ;: ';' (3040,59)-(3040,60)
                              continue_statement (3041,13)-(3041,22)
                                continue: 'continue' (3041,13)-(3041,21)
                                ;: ';' (3041,21)-(3041,22)
                              }: '}' (3042,11)-(3042,12)
                          if_statement (3044,11)-(3048,12)
                            if: 'if' (3044,11)-(3044,13)
                            parenthesized_expression (3044,14)-(3044,98)
                              (: '(' (3044,14)-(3044,15)
                              binary_expression (3044,15)-(3044,97)
                                binary_expression (3044,15)-(3044,36)
                                  identifier: 'type' (3044,15)-(3044,19)
                                  !=: '!=' (3044,20)-(3044,22)
                                  identifier: 'LEXER_LITERAL' (3044,23)-(3044,36)
                                ||: '||' (3044,37)-(3044,39)
                                binary_expression (3044,40)-(3044,97)
                                  field_expression (3044,40)-(3044,74)
                                    field_expression (3044,40)-(3044,69)
                                      field_expression (3044,40)-(3044,56)
                                        identifier: 'context_p' (3044,40)-(3044,49)
                                        ->: '->' (3044,49)-(3044,51)
                                        field_identifier: 'token' (3044,51)-(3044,56)
                                      .: '.' (3044,56)-(3044,57)
                                      field_identifier: 'lit_location' (3044,57)-(3044,69)
                                    .: '.' (3044,69)-(3044,70)
                                    field_identifier: 'type' (3044,70)-(3044,74)
                                  !=: '!=' (3044,75)-(3044,77)
                                  identifier: 'LEXER_IDENT_LITERAL' (3044,78)-(3044,97)
                              ): ')' (3044,97)-(3044,98)
                            compound_statement (3045,11)-(3048,12)
                              {: '{' (3045,11)-(3045,12)
                              expression_statement (3046,13)-(3046,65)
                                assignment_expression (3046,13)-(3046,64)
                                  field_expression (3046,13)-(3046,33)
                                    identifier: 'scanner_context' (3046,13)-(3046,28)
                                    .: '.' (3046,28)-(3046,29)
                                    field_identifier: 'mode' (3046,29)-(3046,33)
                                  =: '=' (3046,34)-(3046,35)
                                  identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (3046,36)-(3046,64)
                                ;: ';' (3046,64)-(3046,65)
                              continue_statement (3047,13)-(3047,22)
                                continue: 'continue' (3047,13)-(3047,21)
                                ;: ';' (3047,21)-(3047,22)
                              }: '}' (3048,11)-(3048,12)
                          declaration (3050,11)-(3050,95)
                            type_identifier: 'lexer_lit_location_t' (3050,11)-(3050,31)
                            init_declarator (3050,32)-(3050,94)
                              pointer_declarator (3050,32)-(3050,42)
                                *: '*' (3050,32)-(3050,33)
                                identifier: 'literal_p' (3050,33)-(3050,42)
                              =: '=' (3050,43)-(3050,44)
                              call_expression (3050,45)-(3050,94)
                                identifier: 'scanner_add_literal' (3050,45)-(3050,64)
                                argument_list (3050,65)-(3050,94)
                                  (: '(' (3050,65)-(3050,66)
                                  identifier: 'context_p' (3050,66)-(3050,75)
                                  ,: ',' (3050,75)-(3050,76)
                                  pointer_expression (3050,77)-(3050,93)
                                    &: '&' (3050,77)-(3050,78)
                                    identifier: 'scanner_context' (3050,78)-(3050,93)
                                  ): ')' (3050,93)-(3050,94)
                            ;: ';' (3050,94)-(3050,95)
                          expression_statement (3052,11)-(3052,68)
                            assignment_expression (3052,11)-(3052,67)
                              field_expression (3052,11)-(3052,31)
                                identifier: 'scanner_context' (3052,11)-(3052,26)
                                .: '.' (3052,26)-(3052,27)
                                field_identifier: 'mode' (3052,27)-(3052,31)
                              =: '=' (3052,32)-(3052,33)
                              identifier: 'SCAN_MODE_POST_PRIMARY_EXPRESSION' (3052,34)-(3052,67)
                            ;: ';' (3052,67)-(3052,68)
                          if_statement (3054,11)-(3067,12)
                            if: 'if' (3054,11)-(3054,13)
                            parenthesized_expression (3054,14)-(3054,67)
                              (: '(' (3054,14)-(3054,15)
                              binary_expression (3054,15)-(3054,66)
                                field_expression (3054,15)-(3054,43)
                                  identifier: 'scanner_context' (3054,15)-(3054,30)
                                  .: '.' (3054,30)-(3054,31)
                                  field_identifier: 'binding_type' (3054,31)-(3054,43)
                                ==: '==' (3054,44)-(3054,46)
                                identifier: 'SCANNER_BINDING_VAR' (3054,47)-(3054,66)
                              ): ')' (3054,66)-(3054,67)
                            compound_statement (3055,11)-(3067,12)
                              {: '{' (3055,11)-(3055,12)
                              if_statement (3056,13)-(3065,14)
                                if: 'if' (3056,13)-(3056,15)
                                parenthesized_expression (3056,16)-(3056,61)
                                  (: '(' (3056,16)-(3056,17)
                                  unary_expression (3056,17)-(3056,60)
                                    !: '!' (3056,17)-(3056,18)
                                    parenthesized_expression (3056,18)-(3056,60)
                                      (: '(' (3056,18)-(3056,19)
                                      binary_expression (3056,19)-(3056,59)
                                        field_expression (3056,19)-(3056,34)
                                          identifier: 'literal_p' (3056,19)-(3056,28)
                                          ->: '->' (3056,28)-(3056,30)
                                          field_identifier: 'type' (3056,30)-(3056,34)
                                        &: '&' (3056,35)-(3056,36)
                                        identifier: 'SCANNER_LITERAL_IS_VAR' (3056,37)-(3056,59)
                                      ): ')' (3056,59)-(3056,60)
                                  ): ')' (3056,60)-(3056,61)
                                compound_statement (3057,13)-(3065,14)
                                  {: '{' (3057,13)-(3057,14)
                                  expression_statement (3058,15)-(3058,83)
                                    call_expression (3058,15)-(3058,82)
                                      identifier: 'scanner_detect_invalid_var' (3058,15)-(3058,41)
                                      argument_list (3058,42)-(3058,82)
                                        (: '(' (3058,42)-(3058,43)
                                        identifier: 'context_p' (3058,43)-(3058,52)
                                        ,: ',' (3058,52)-(3058,53)
                                        pointer_expression (3058,54)-(3058,70)
                                          &: '&' (3058,54)-(3058,55)
                                          identifier: 'scanner_context' (3058,55)-(3058,70)
                                        ,: ',' (3058,70)-(3058,71)
                                        identifier: 'literal_p' (3058,72)-(3058,81)
                                        ): ')' (3058,81)-(3058,82)
                                    ;: ';' (3058,82)-(3058,83)
                                  expression_statement (3059,15)-(3059,57)
                                    assignment_expression (3059,15)-(3059,56)
                                      field_expression (3059,15)-(3059,30)
                                        identifier: 'literal_p' (3059,15)-(3059,24)
                                        ->: '->' (3059,24)-(3059,26)
                                        field_identifier: 'type' (3059,26)-(3059,30)
                                      |=: '|=' (3059,31)-(3059,33)
                                      identifier: 'SCANNER_LITERAL_IS_VAR' (3059,34)-(3059,56)
                                    ;: ';' (3059,56)-(3059,57)
                                  if_statement (3061,15)-(3064,16)
                                    if: 'if' (3061,15)-(3061,17)
                                    parenthesized_expression (3061,18)-(3061,102)
                                      (: '(' (3061,18)-(3061,19)
                                      binary_expression (3061,19)-(3061,101)
                                        field_expression (3061,19)-(3061,70)
                                          field_expression (3061,19)-(3061,56)
                                            identifier: 'scanner_context' (3061,19)-(3061,34)
                                            .: '.' (3061,34)-(3061,35)
                                            field_identifier: 'active_literal_pool_p' (3061,35)-(3061,56)
                                          ->: '->' (3061,56)-(3061,58)
                                          field_identifier: 'status_flags' (3061,58)-(3061,70)
                                        &: '&' (3061,71)-(3061,72)
                                        identifier: 'SCANNER_LITERAL_POOL_IN_WITH' (3061,73)-(3061,101)
                                      ): ')' (3061,101)-(3061,102)
                                    compound_statement (3062,15)-(3064,16)
                                      {: '{' (3062,15)-(3062,16)
                                      expression_statement (3063,17)-(3063,59)
                                        assignment_expression (3063,17)-(3063,58)
                                          field_expression (3063,17)-(3063,32)
                                            identifier: 'literal_p' (3063,17)-(3063,26)
                                            ->: '->' (3063,26)-(3063,28)
                                            field_identifier: 'type' (3063,28)-(3063,32)
                                          |=: '|=' (3063,33)-(3063,35)
                                          identifier: 'SCANNER_LITERAL_NO_REG' (3063,36)-(3063,58)
                                        ;: ';' (3063,58)-(3063,59)
                                      }: '}' (3064,15)-(3064,16)
                                  }: '}' (3065,13)-(3065,14)
                              break_statement (3066,13)-(3066,19)
                                break: 'break' (3066,13)-(3066,18)
                                ;: ';' (3066,18)-(3066,19)
                              }: '}' (3067,11)-(3067,12)
                          if_statement (3069,11)-(3111,12)
                            if: 'if' (3069,11)-(3069,13)
                            parenthesized_expression (3069,14)-(3069,73)
                              (: '(' (3069,14)-(3069,15)
                              binary_expression (3069,15)-(3069,72)
                                field_expression (3069,15)-(3069,43)
                                  identifier: 'scanner_context' (3069,15)-(3069,30)
                                  .: '.' (3069,30)-(3069,31)
                                  field_identifier: 'binding_type' (3069,31)-(3069,43)
                                ==: '==' (3069,44)-(3069,46)
                                identifier: 'SCANNER_BINDING_ARROW_ARG' (3069,47)-(3069,72)
                              ): ')' (3069,72)-(3069,73)
                            compound_statement (3070,11)-(3078,12)
                              {: '{' (3070,11)-(3070,12)
                              expression_statement (3071,13)-(3071,99)
                                assignment_expression (3071,13)-(3071,98)
                                  field_expression (3071,13)-(3071,28)
                                    identifier: 'literal_p' (3071,13)-(3071,22)
                                    ->: '->' (3071,22)-(3071,24)
                                    field_identifier: 'type' (3071,24)-(3071,28)
                                  |=: '|=' (3071,29)-(3071,31)
                                  binary_expression (3071,32)-(3071,98)
                                    identifier: 'SCANNER_LITERAL_IS_ARG' (3071,32)-(3071,54)
                                    |: '|' (3071,55)-(3071,56)
                                    identifier: 'SCANNER_LITERAL_IS_ARROW_DESTRUCTURED_ARG' (3071,57)-(3071,98)
                                ;: ';' (3071,98)-(3071,99)
                              if_statement (3073,13)-(3077,14)
                                if: 'if' (3073,13)-(3073,15)
                                parenthesized_expression (3073,16)-(3073,59)
                                  (: '(' (3073,16)-(3073,17)
                                  binary_expression (3073,17)-(3073,58)
                                    field_expression (3073,17)-(3073,32)
                                      identifier: 'literal_p' (3073,17)-(3073,26)
                                      ->: '->' (3073,26)-(3073,28)
                                      field_identifier: 'type' (3073,28)-(3073,32)
                                    &: '&' (3073,33)-(3073,34)
                                    identifier: 'SCANNER_LITERAL_IS_USED' (3073,35)-(3073,58)
                                  ): ')' (3073,58)-(3073,59)
                                compound_statement (3074,13)-(3077,14)
                                  {: '{' (3074,13)-(3074,14)
                                  expression_statement (3075,15)-(3075,63)
                                    assignment_expression (3075,15)-(3075,62)
                                      field_expression (3075,15)-(3075,30)
                                        identifier: 'literal_p' (3075,15)-(3075,24)
                                        ->: '->' (3075,24)-(3075,26)
                                        field_identifier: 'type' (3075,26)-(3075,30)
                                      |=: '|=' (3075,31)-(3075,33)
                                      identifier: 'SCANNER_LITERAL_EARLY_CREATE' (3075,34)-(3075,62)
                                    ;: ';' (3075,62)-(3075,63)
                                  break_statement (3076,15)-(3076,21)
                                    break: 'break' (3076,15)-(3076,20)
                                    ;: ';' (3076,20)-(3076,21)
                                  }: '}' (3077,13)-(3077,14)
                              }: '}' (3078,11)-(3078,12)
                            else_clause (3079,11)-(3111,12)
                              else: 'else' (3079,11)-(3079,15)
                              compound_statement (3080,11)-(3111,12)
                                {: '{' (3080,11)-(3080,12)
                                expression_statement (3081,13)-(3081,63)
                                  call_expression (3081,13)-(3081,62)
                                    identifier: 'scanner_detect_invalid_let' (3081,13)-(3081,39)
                                    argument_list (3081,40)-(3081,62)
                                      (: '(' (3081,40)-(3081,41)
                                      identifier: 'context_p' (3081,41)-(3081,50)
                                      ,: ',' (3081,50)-(3081,51)
                                      identifier: 'literal_p' (3081,52)-(3081,61)
                                      ): ')' (3081,61)-(3081,62)
                                  ;: ';' (3081,62)-(3081,63)
                                if_statement (3083,13)-(3104,14)
                                  if: 'if' (3083,13)-(3083,15)
                                  parenthesized_expression (3083,16)-(3083,71)
                                    (: '(' (3083,16)-(3083,17)
                                    binary_expression (3083,17)-(3083,70)
                                      field_expression (3083,17)-(3083,45)
                                        identifier: 'scanner_context' (3083,17)-(3083,32)
                                        .: '.' (3083,32)-(3083,33)
                                        field_identifier: 'binding_type' (3083,33)-(3083,45)
                                      <=: '<=' (3083,46)-(3083,48)
                                      identifier: 'SCANNER_BINDING_CATCH' (3083,49)-(3083,70)
                                    ): ')' (3083,70)-(3083,71)
                                  compound_statement (3084,13)-(3089,14)
                                    {: '{' (3084,13)-(3084,14)
                                    expression_statement (3085,15)-(3086,89)
                                      call_expression (3085,15)-(3086,88)
                                        identifier: 'JERRY_ASSERT' (3085,15)-(3085,27)
                                        argument_list (3085,28)-(3086,88)
                                          (: '(' (3085,28)-(3085,29)
                                          binary_expression (3085,29)-(3086,87)
                                            parenthesized_expression (3085,29)-(3085,82)
                                              (: '(' (3085,29)-(3085,30)
                                              binary_expression (3085,30)-(3085,81)
                                                field_expression (3085,30)-(3085,58)
                                                  identifier: 'scanner_context' (3085,30)-(3085,45)
                                                  .: '.' (3085,45)-(3085,46)
                                                  field_identifier: 'binding_type' (3085,46)-(3085,58)
                                                ==: '==' (3085,59)-(3085,61)
                                                identifier: 'SCANNER_BINDING_LET' (3085,62)-(3085,81)
                                              ): ')' (3085,81)-(3085,82)
                                            ||: '||' (3086,29)-(3086,31)
                                            parenthesized_expression (3086,32)-(3086,87)
                                              (: '(' (3086,32)-(3086,33)
                                              binary_expression (3086,33)-(3086,86)
                                                field_expression (3086,33)-(3086,61)
                                                  identifier: 'scanner_context' (3086,33)-(3086,48)
                                                  .: '.' (3086,48)-(3086,49)
                                                  field_identifier: 'binding_type' (3086,49)-(3086,61)
                                                ==: '==' (3086,62)-(3086,64)
                                                identifier: 'SCANNER_BINDING_CATCH' (3086,65)-(3086,86)
                                              ): ')' (3086,86)-(3086,87)
                                          ): ')' (3086,87)-(3086,88)
                                      ;: ';' (3086,88)-(3086,89)
                                    expression_statement (3088,15)-(3088,57)
                                      assignment_expression (3088,15)-(3088,56)
                                        field_expression (3088,15)-(3088,30)
                                          identifier: 'literal_p' (3088,15)-(3088,24)
                                          ->: '->' (3088,24)-(3088,26)
                                          field_identifier: 'type' (3088,26)-(3088,30)
                                        |=: '|=' (3088,31)-(3088,33)
                                        identifier: 'SCANNER_LITERAL_IS_LET' (3088,34)-(3088,56)
                                      ;: ';' (3088,56)-(3088,57)
                                    }: '}' (3089,13)-(3089,14)
                                  else_clause (3090,13)-(3104,14)
                                    else: 'else' (3090,13)-(3090,17)
                                    compound_statement (3091,13)-(3104,14)
                                      {: '{' (3091,13)-(3091,14)
                                      expression_statement (3092,15)-(3092,59)
                                        assignment_expression (3092,15)-(3092,58)
                                          field_expression (3092,15)-(3092,30)
                                            identifier: 'literal_p' (3092,15)-(3092,24)
                                            ->: '->' (3092,24)-(3092,26)
                                            field_identifier: 'type' (3092,26)-(3092,30)
                                          |=: '|=' (3092,31)-(3092,33)
                                          identifier: 'SCANNER_LITERAL_IS_CONST' (3092,34)-(3092,58)
                                        ;: ';' (3092,58)-(3092,59)
                                      if_statement (3094,15)-(3103,16)
                                        if: 'if' (3094,15)-(3094,17)
                                        parenthesized_expression (3094,18)-(3094,71)
                                          (: '(' (3094,18)-(3094,19)
                                          binary_expression (3094,19)-(3094,70)
                                            field_expression (3094,19)-(3094,47)
                                              identifier: 'scanner_context' (3094,19)-(3094,34)
                                              .: '.' (3094,34)-(3094,35)
                                              field_identifier: 'binding_type' (3094,35)-(3094,47)
                                            ==: '==' (3094,48)-(3094,50)
                                            identifier: 'SCANNER_BINDING_ARG' (3094,51)-(3094,70)
                                          ): ')' (3094,70)-(3094,71)
                                        compound_statement (3095,15)-(3103,16)
                                          {: '{' (3095,15)-(3095,16)
                                          expression_statement (3096,17)-(3096,59)
                                            assignment_expression (3096,17)-(3096,58)
                                              field_expression (3096,17)-(3096,32)
                                                identifier: 'literal_p' (3096,17)-(3096,26)
                                                ->: '->' (3096,26)-(3096,28)
                                                field_identifier: 'type' (3096,28)-(3096,32)
                                              |=: '|=' (3096,33)-(3096,35)
                                              identifier: 'SCANNER_LITERAL_IS_ARG' (3096,36)-(3096,58)
                                            ;: ';' (3096,58)-(3096,59)
                                          if_statement (3098,17)-(3102,18)
                                            if: 'if' (3098,17)-(3098,19)
                                            parenthesized_expression (3098,20)-(3098,63)
                                              (: '(' (3098,20)-(3098,21)
                                              binary_expression (3098,21)-(3098,62)
                                                field_expression (3098,21)-(3098,36)
                                                  identifier: 'literal_p' (3098,21)-(3098,30)
                                                  ->: '->' (3098,30)-(3098,32)
                                                  field_identifier: 'type' (3098,32)-(3098,36)
                                                &: '&' (3098,37)-(3098,38)
                                                identifier: 'SCANNER_LITERAL_IS_USED' (3098,39)-(3098,62)
                                              ): ')' (3098,62)-(3098,63)
                                            compound_statement (3099,17)-(3102,18)
                                              {: '{' (3099,17)-(3099,18)
                                              expression_statement (3100,19)-(3100,67)
                                                assignment_expression (3100,19)-(3100,66)
                                                  field_expression (3100,19)-(3100,34)
                                                    identifier: 'literal_p' (3100,19)-(3100,28)
                                                    ->: '->' (3100,28)-(3100,30)
                                                    field_identifier: 'type' (3100,30)-(3100,34)
                                                  |=: '|=' (3100,35)-(3100,37)
                                                  identifier: 'SCANNER_LITERAL_EARLY_CREATE' (3100,38)-(3100,66)
                                                ;: ';' (3100,66)-(3100,67)
                                              break_statement (3101,19)-(3101,25)
                                                break: 'break' (3101,19)-(3101,24)
                                                ;: ';' (3101,24)-(3101,25)
                                              }: '}' (3102,17)-(3102,18)
                                          }: '}' (3103,15)-(3103,16)
                                      }: '}' (3104,13)-(3104,14)
                                if_statement (3106,13)-(3110,14)
                                  if: 'if' (3106,13)-(3106,15)
                                  parenthesized_expression (3106,16)-(3106,59)
                                    (: '(' (3106,16)-(3106,17)
                                    binary_expression (3106,17)-(3106,58)
                                      field_expression (3106,17)-(3106,32)
                                        identifier: 'literal_p' (3106,17)-(3106,26)
                                        ->: '->' (3106,26)-(3106,28)
                                        field_identifier: 'type' (3106,28)-(3106,32)
                                      &: '&' (3106,33)-(3106,34)
                                      identifier: 'SCANNER_LITERAL_IS_USED' (3106,35)-(3106,58)
                                    ): ')' (3106,58)-(3106,59)
                                  compound_statement (3107,13)-(3110,14)
                                    {: '{' (3107,13)-(3107,14)
                                    expression_statement (3108,15)-(3108,63)
                                      assignment_expression (3108,15)-(3108,62)
                                        field_expression (3108,15)-(3108,30)
                                          identifier: 'literal_p' (3108,15)-(3108,24)
                                          ->: '->' (3108,24)-(3108,26)
                                          field_identifier: 'type' (3108,26)-(3108,30)
                                        |=: '|=' (3108,31)-(3108,33)
                                        identifier: 'SCANNER_LITERAL_EARLY_CREATE' (3108,34)-(3108,62)
                                      ;: ';' (3108,62)-(3108,63)
                                    break_statement (3109,15)-(3109,21)
                                      break: 'break' (3109,15)-(3109,20)
                                      ;: ';' (3109,20)-(3109,21)
                                    }: '}' (3110,13)-(3110,14)
                                }: '}' (3111,11)-(3111,12)
                          declaration (3113,11)-(3113,50)
                            type_identifier: 'scanner_binding_item_t' (3113,11)-(3113,33)
                            pointer_declarator (3113,34)-(3113,49)
                              *: '*' (3113,34)-(3113,35)
                              identifier: 'binding_item_p' (3113,35)-(3113,49)
                            ;: ';' (3113,49)-(3113,50)
                          expression_statement (3114,11)-(3114,115)
                            assignment_expression (3114,11)-(3114,114)
                              identifier: 'binding_item_p' (3114,11)-(3114,25)
                              =: '=' (3114,26)-(3114,27)
                              cast_expression (3114,28)-(3114,114)
                                (: '(' (3114,28)-(3114,29)
                                type_descriptor (3114,29)-(3114,53)
                                  type_identifier: 'scanner_binding_item_t' (3114,29)-(3114,51)
                                  abstract_pointer_declarator (3114,52)-(3114,53)
                                    *: '*' (3114,52)-(3114,53)
                                ): ')' (3114,53)-(3114,54)
                                call_expression (3114,55)-(3114,114)
                                  identifier: 'scanner_malloc' (3114,55)-(3114,69)
                                  argument_list (3114,70)-(3114,114)
                                    (: '(' (3114,70)-(3114,71)
                                    identifier: 'context_p' (3114,71)-(3114,80)
                                    ,: ',' (3114,80)-(3114,81)
                                    sizeof_expression (3114,82)-(3114,113)
                                      sizeof: 'sizeof' (3114,82)-(3114,88)
                                      parenthesized_expression (3114,89)-(3114,113)
                                        (: '(' (3114,89)-(3114,90)
                                        identifier: 'scanner_binding_item_t' (3114,90)-(3114,112)
                                        ): ')' (3114,112)-(3114,113)
                                    ): ')' (3114,113)-(3114,114)
                            ;: ';' (3114,114)-(3114,115)
                          expression_statement (3116,11)-(3116,83)
                            assignment_expression (3116,11)-(3116,82)
                              field_expression (3116,11)-(3116,33)
                                identifier: 'binding_item_p' (3116,11)-(3116,25)
                                ->: '->' (3116,25)-(3116,27)
                                field_identifier: 'next_p' (3116,27)-(3116,33)
                              =: '=' (3116,34)-(3116,35)
                              field_expression (3116,36)-(3116,82)
                                field_expression (3116,36)-(3116,73)
                                  identifier: 'scanner_context' (3116,36)-(3116,51)
                                  .: '.' (3116,51)-(3116,52)
                                  field_identifier: 'active_binding_list_p' (3116,52)-(3116,73)
                                ->: '->' (3116,73)-(3116,75)
                                field_identifier: 'items_p' (3116,75)-(3116,82)
                            ;: ';' (3116,82)-(3116,83)
                          expression_statement (3117,11)-(3117,49)
                            assignment_expression (3117,11)-(3117,48)
                              field_expression (3117,11)-(3117,36)
                                identifier: 'binding_item_p' (3117,11)-(3117,25)
                                ->: '->' (3117,25)-(3117,27)
                                field_identifier: 'literal_p' (3117,27)-(3117,36)
                              =: '=' (3117,37)-(3117,38)
                              identifier: 'literal_p' (3117,39)-(3117,48)
                            ;: ';' (3117,48)-(3117,49)
                          expression_statement (3119,11)-(3119,75)
                            assignment_expression (3119,11)-(3119,74)
                              field_expression (3119,11)-(3119,57)
                                field_expression (3119,11)-(3119,48)
                                  identifier: 'scanner_context' (3119,11)-(3119,26)
                                  .: '.' (3119,26)-(3119,27)
                                  field_identifier: 'active_binding_list_p' (3119,27)-(3119,48)
                                ->: '->' (3119,48)-(3119,50)
                                field_identifier: 'items_p' (3119,50)-(3119,57)
                              =: '=' (3119,58)-(3119,59)
                              identifier: 'binding_item_p' (3119,60)-(3119,74)
                            ;: ';' (3119,74)-(3119,75)
                          expression_statement (3121,11)-(3121,40)
                            call_expression (3121,11)-(3121,39)
                              identifier: 'lexer_next_token' (3121,11)-(3121,27)
                              argument_list (3121,28)-(3121,39)
                                (: '(' (3121,28)-(3121,29)
                                identifier: 'context_p' (3121,29)-(3121,38)
                                ): ')' (3121,38)-(3121,39)
                            ;: ';' (3121,39)-(3121,40)
                          if_statement (3122,11)-(3125,12)
                            if: 'if' (3122,11)-(3122,13)
                            parenthesized_expression (3122,14)-(3122,53)
                              (: '(' (3122,14)-(3122,15)
                              binary_expression (3122,15)-(3122,52)
                                field_expression (3122,15)-(3122,36)
                                  field_expression (3122,15)-(3122,31)
                                    identifier: 'context_p' (3122,15)-(3122,24)
                                    ->: '->' (3122,24)-(3122,26)
                                    field_identifier: 'token' (3122,26)-(3122,31)
                                  .: '.' (3122,31)-(3122,32)
                                  field_identifier: 'type' (3122,32)-(3122,36)
                                !=: '!=' (3122,37)-(3122,39)
                                identifier: 'LEXER_ASSIGN' (3122,40)-(3122,52)
                              ): ')' (3122,52)-(3122,53)
                            compound_statement (3123,11)-(3125,12)
                              {: '{' (3123,11)-(3123,12)
                              continue_statement (3124,13)-(3124,22)
                                continue: 'continue' (3124,13)-(3124,21)
                                ;: ';' (3124,21)-(3124,22)
                              }: '}' (3125,11)-(3125,12)
                          declaration (3127,11)-(3127,53)
                            type_identifier: 'scanner_binding_literal_t' (3127,11)-(3127,36)
                            identifier: 'binding_literal' (3127,37)-(3127,52)
                            ;: ';' (3127,52)-(3127,53)
                          expression_statement (3128,11)-(3128,49)
                            assignment_expression (3128,11)-(3128,48)
                              field_expression (3128,11)-(3128,36)
                                identifier: 'binding_literal' (3128,11)-(3128,26)
                                .: '.' (3128,26)-(3128,27)
                                field_identifier: 'literal_p' (3128,27)-(3128,36)
                              =: '=' (3128,37)-(3128,38)
                              identifier: 'literal_p' (3128,39)-(3128,48)
                            ;: ';' (3128,48)-(3128,49)
                          expression_statement (3130,11)-(3130,95)
                            call_expression (3130,11)-(3130,94)
                              identifier: 'parser_stack_push' (3130,11)-(3130,28)
                              argument_list (3130,29)-(3130,94)
                                (: '(' (3130,29)-(3130,30)
                                identifier: 'context_p' (3130,30)-(3130,39)
                                ,: ',' (3130,39)-(3130,40)
                                pointer_expression (3130,41)-(3130,57)
                                  &: '&' (3130,41)-(3130,42)
                                  identifier: 'binding_literal' (3130,42)-(3130,57)
                                ,: ',' (3130,57)-(3130,58)
                                sizeof_expression (3130,59)-(3130,93)
                                  sizeof: 'sizeof' (3130,59)-(3130,65)
                                  parenthesized_expression (3130,66)-(3130,93)
                                    (: '(' (3130,66)-(3130,67)
                                    identifier: 'scanner_binding_literal_t' (3130,67)-(3130,92)
                                    ): ')' (3130,92)-(3130,93)
                                ): ')' (3130,93)-(3130,94)
                            ;: ';' (3130,94)-(3130,95)
                          expression_statement (3131,11)-(3131,72)
                            call_expression (3131,11)-(3131,71)
                              identifier: 'parser_stack_push_uint8' (3131,11)-(3131,34)
                              argument_list (3131,35)-(3131,71)
                                (: '(' (3131,35)-(3131,36)
                                identifier: 'context_p' (3131,36)-(3131,45)
                                ,: ',' (3131,45)-(3131,46)
                                identifier: 'SCAN_STACK_BINDING_INIT' (3131,47)-(3131,70)
                                ): ')' (3131,70)-(3131,71)
                            ;: ';' (3131,71)-(3131,72)
                          expression_statement (3133,11)-(3133,63)
                            assignment_expression (3133,11)-(3133,62)
                              field_expression (3133,11)-(3133,31)
                                identifier: 'scanner_context' (3133,11)-(3133,26)
                                .: '.' (3133,26)-(3133,27)
                                field_identifier: 'mode' (3133,27)-(3133,31)
                              =: '=' (3133,32)-(3133,33)
                              identifier: 'SCAN_MODE_PRIMARY_EXPRESSION' (3133,34)-(3133,62)
                            ;: ';' (3133,62)-(3133,63)
                          break_statement (3134,11)-(3134,17)
                            break: 'break' (3134,11)-(3134,16)
                            ;: ';' (3134,16)-(3134,17)
                          }: '}' (3135,9)-(3135,10)
                      #endif: '#endif' (3136,1)-(3136,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (3136,8)-(3136,36)
                  }: '}' (3137,7)-(3137,8)
                expression_statement (3139,7)-(3139,36)
                  call_expression (3139,7)-(3139,35)
                    identifier: 'lexer_next_token' (3139,7)-(3139,23)
                    argument_list (3139,24)-(3139,35)
                      (: '(' (3139,24)-(3139,25)
                      identifier: 'context_p' (3139,25)-(3139,34)
                      ): ')' (3139,34)-(3139,35)
                  ;: ';' (3139,35)-(3139,36)
              }: '}' (3140,5)-(3140,6)
          labeled_statement (3142,1)-(3147,6)
            statement_identifier: 'scan_completed' (3142,1)-(3142,15)
            :: ':' (3142,15)-(3142,16)
            if_statement (3143,5)-(3147,6)
              if: 'if' (3143,5)-(3143,7)
              parenthesized_expression (3143,8)-(3144,69)
                (: '(' (3143,8)-(3143,9)
                binary_expression (3143,9)-(3144,68)
                  binary_expression (3143,9)-(3143,56)
                    field_expression (3143,9)-(3143,35)
                      identifier: 'context_p' (3143,9)-(3143,18)
                      ->: '->' (3143,18)-(3143,20)
                      field_identifier: 'stack_top_uint8' (3143,20)-(3143,35)
                    !=: '!=' (3143,36)-(3143,38)
                    identifier: 'SCAN_STACK_SCRIPT' (3143,39)-(3143,56)
                  &&: '&&' (3144,9)-(3144,11)
                  binary_expression (3144,12)-(3144,68)
                    field_expression (3144,12)-(3144,38)
                      identifier: 'context_p' (3144,12)-(3144,21)
                      ->: '->' (3144,21)-(3144,23)
                      field_identifier: 'stack_top_uint8' (3144,23)-(3144,38)
                    !=: '!=' (3144,39)-(3144,41)
                    identifier: 'SCAN_STACK_SCRIPT_FUNCTION' (3144,42)-(3144,68)
                ): ')' (3144,68)-(3144,69)
              compound_statement (3145,5)-(3147,6)
                {: '{' (3145,5)-(3145,6)
                expression_statement (3146,7)-(3146,39)
                  call_expression (3146,7)-(3146,38)
                    identifier: 'scanner_raise_error' (3146,7)-(3146,26)
                    argument_list (3146,27)-(3146,38)
                      (: '(' (3146,27)-(3146,28)
                      identifier: 'context_p' (3146,28)-(3146,37)
                      ): ')' (3146,37)-(3146,38)
                  ;: ';' (3146,38)-(3146,39)
                }: '}' (3147,5)-(3147,6)
          expression_statement (3149,5)-(3149,60)
            call_expression (3149,5)-(3149,59)
              identifier: 'scanner_pop_literal_pool' (3149,5)-(3149,29)
              argument_list (3149,30)-(3149,59)
                (: '(' (3149,30)-(3149,31)
                identifier: 'context_p' (3149,31)-(3149,40)
                ,: ',' (3149,40)-(3149,41)
                pointer_expression (3149,42)-(3149,58)
                  &: '&' (3149,42)-(3149,43)
                  identifier: 'scanner_context' (3149,43)-(3149,58)
                ): ')' (3149,58)-(3149,59)
            ;: ';' (3149,59)-(3149,60)
          preproc_if (3151,1)-(3153,7)
            #if: '#if' (3151,1)-(3151,4)
            call_expression (3151,5)-(3151,27)
              identifier: 'ENABLED' (3151,5)-(3151,12)
              argument_list (3151,13)-(3151,27)
                (: '(' (3151,13)-(3151,14)
                identifier: 'JERRY_ES2015' (3151,14)-(3151,26)
                ): ')' (3151,26)-(3151,27)
            
: '
' (3151,27)-(3152,1)
            expression_statement (3152,5)-(3152,66)
              call_expression (3152,5)-(3152,65)
                identifier: 'JERRY_ASSERT' (3152,5)-(3152,17)
                argument_list (3152,18)-(3152,65)
                  (: '(' (3152,18)-(3152,19)
                  binary_expression (3152,19)-(3152,64)
                    field_expression (3152,19)-(3152,56)
                      identifier: 'scanner_context' (3152,19)-(3152,34)
                      .: '.' (3152,34)-(3152,35)
                      field_identifier: 'active_binding_list_p' (3152,35)-(3152,56)
                    ==: '==' (3152,57)-(3152,59)
                    null (3152,60)-(3152,64)
                      NULL: 'NULL' (3152,60)-(3152,64)
                  ): ')' (3152,64)-(3152,65)
              ;: ';' (3152,65)-(3152,66)
            #endif: '#endif' (3153,1)-(3153,7)
          comment: '/* ENABLED (JERRY_ES2015) */' (3153,8)-(3153,36)
          expression_statement (3154,5)-(3154,66)
            call_expression (3154,5)-(3154,65)
              identifier: 'JERRY_ASSERT' (3154,5)-(3154,17)
              argument_list (3154,18)-(3154,65)
                (: '(' (3154,18)-(3154,19)
                binary_expression (3154,19)-(3154,64)
                  field_expression (3154,19)-(3154,56)
                    identifier: 'scanner_context' (3154,19)-(3154,34)
                    .: '.' (3154,34)-(3154,35)
                    field_identifier: 'active_literal_pool_p' (3154,35)-(3154,56)
                  ==: '==' (3154,57)-(3154,59)
                  null (3154,60)-(3154,64)
                    NULL: 'NULL' (3154,60)-(3154,64)
                ): ')' (3154,64)-(3154,65)
            ;: ';' (3154,65)-(3154,66)
          preproc_ifdef (3156,1)-(3158,7)
            #ifndef: '#ifndef' (3156,1)-(3156,8)
            identifier: 'JERRY_NDEBUG' (3156,9)-(3156,21)
            expression_statement (3157,5)-(3157,72)
              assignment_expression (3157,5)-(3157,71)
                field_expression (3157,5)-(3157,41)
                  identifier: 'scanner_context' (3157,5)-(3157,20)
                  .: '.' (3157,20)-(3157,21)
                  field_identifier: 'context_status_flags' (3157,21)-(3157,41)
                |=: '|=' (3157,42)-(3157,44)
                identifier: 'PARSER_SCANNING_SUCCESSFUL' (3157,45)-(3157,71)
              ;: ';' (3157,71)-(3157,72)
            #endif: '#endif' (3158,1)-(3158,7)
          comment: '/* !JERRY_NDEBUG */' (3158,8)-(3158,27)
          }: '}' (3159,3)-(3159,4)
      type_identifier: 'PARSER_CATCH' (3160,3)-(3160,15)
      compound_statement (3161,3)-(3217,4)
        {: '{' (3161,3)-(3161,4)
        preproc_if (3162,1)-(3167,7)
          #if: '#if' (3162,1)-(3162,4)
          call_expression (3162,5)-(3162,27)
            identifier: 'ENABLED' (3162,5)-(3162,12)
            argument_list (3162,13)-(3162,27)
              (: '(' (3162,13)-(3162,14)
              identifier: 'JERRY_ES2015' (3162,14)-(3162,26)
              ): ')' (3162,26)-(3162,27)
          
: '
' (3162,27)-(3163,1)
          while_statement (3163,5)-(3166,6)
            while: 'while' (3163,5)-(3163,10)
            parenthesized_expression (3163,11)-(3163,58)
              (: '(' (3163,11)-(3163,12)
              binary_expression (3163,12)-(3163,57)
                field_expression (3163,12)-(3163,49)
                  identifier: 'scanner_context' (3163,12)-(3163,27)
                  .: '.' (3163,27)-(3163,28)
                  field_identifier: 'active_binding_list_p' (3163,28)-(3163,49)
                !=: '!=' (3163,50)-(3163,52)
                null (3163,53)-(3163,57)
                  NULL: 'NULL' (3163,53)-(3163,57)
              ): ')' (3163,57)-(3163,58)
            compound_statement (3164,5)-(3166,6)
              {: '{' (3164,5)-(3164,6)
              expression_statement (3165,7)-(3165,51)
                call_expression (3165,7)-(3165,50)
                  identifier: 'scanner_pop_binding_list' (3165,7)-(3165,31)
                  argument_list (3165,32)-(3165,50)
                    (: '(' (3165,32)-(3165,33)
                    pointer_expression (3165,33)-(3165,49)
                      &: '&' (3165,33)-(3165,34)
                      identifier: 'scanner_context' (3165,34)-(3165,49)
                    ): ')' (3165,49)-(3165,50)
                ;: ';' (3165,50)-(3165,51)
              }: '}' (3166,5)-(3166,6)
          #endif: '#endif' (3167,1)-(3167,7)
        comment: '/* ENABLED (JERRY_ES2015) */' (3167,8)-(3167,36)
        if_statement (3169,5)-(3198,6)
          if: 'if' (3169,5)-(3169,7)
          parenthesized_expression (3169,8)-(3169,71)
            (: '(' (3169,8)-(3169,9)
            call_expression (3169,9)-(3169,70)
              identifier: 'JERRY_UNLIKELY' (3169,9)-(3169,23)
              argument_list (3169,24)-(3169,70)
                (: '(' (3169,24)-(3169,25)
                binary_expression (3169,25)-(3169,69)
                  field_expression (3169,25)-(3169,41)
                    identifier: 'context_p' (3169,25)-(3169,34)
                    ->: '->' (3169,34)-(3169,36)
                    field_identifier: 'error' (3169,36)-(3169,41)
                  !=: '!=' (3169,42)-(3169,44)
                  identifier: 'PARSER_ERR_OUT_OF_MEMORY' (3169,45)-(3169,69)
                ): ')' (3169,69)-(3169,70)
            ): ')' (3169,70)-(3169,71)
          compound_statement (3170,5)-(3198,6)
            {: '{' (3170,5)-(3170,6)
            comment: '/* Ignore the errors thrown by the lexer. */' (3171,7)-(3171,51)
            expression_statement (3172,7)-(3172,46)
              assignment_expression (3172,7)-(3172,45)
                field_expression (3172,7)-(3172,23)
                  identifier: 'context_p' (3172,7)-(3172,16)
                  ->: '->' (3172,16)-(3172,18)
                  field_identifier: 'error' (3172,18)-(3172,23)
                =: '=' (3172,24)-(3172,25)
                identifier: 'PARSER_ERR_NO_ERROR' (3172,26)-(3172,45)
              ;: ';' (3172,45)-(3172,46)
            comment: '/* The following code may allocate memory, so it is enclosed in a try/catch. */' (3174,7)-(3174,86)
            expression_statement (3175,7)-(3175,41)
              call_expression (3175,7)-(3175,41)
                identifier: 'PARSER_TRY' (3175,7)-(3175,17)
                argument_list (3175,18)-(3175,41)
                  (: '(' (3175,18)-(3175,19)
                  field_expression (3175,19)-(3175,40)
                    identifier: 'context_p' (3175,19)-(3175,28)
                    ->: '->' (3175,28)-(3175,30)
                    field_identifier: 'try_buffer' (3175,30)-(3175,40)
                  ): ')' (3175,40)-(3175,41)
            compound_statement (3176,7)-(3192,8)
              {: '{' (3176,7)-(3176,8)
              preproc_if (3177,3)-(3186,9)
                #if: '#if' (3177,3)-(3177,6)
                call_expression (3177,7)-(3177,29)
                  identifier: 'ENABLED' (3177,7)-(3177,14)
                  argument_list (3177,15)-(3177,29)
                    (: '(' (3177,15)-(3177,16)
                    identifier: 'JERRY_ES2015' (3177,16)-(3177,28)
                    ): ')' (3177,28)-(3177,29)
                
: '
' (3177,29)-(3178,1)
                if_statement (3178,9)-(3185,10)
                  if: 'if' (3178,9)-(3178,11)
                  parenthesized_expression (3178,12)-(3178,85)
                    (: '(' (3178,12)-(3178,13)
                    binary_expression (3178,13)-(3178,84)
                      field_expression (3178,13)-(3178,41)
                        identifier: 'scanner_context' (3178,13)-(3178,28)
                        .: '.' (3178,28)-(3178,29)
                        field_identifier: 'status_flags' (3178,29)-(3178,41)
                      &: '&' (3178,42)-(3178,43)
                      identifier: 'SCANNER_CONTEXT_THROW_ERR_ASYNC_FUNCTION' (3178,44)-(3178,84)
                    ): ')' (3178,84)-(3178,85)
                  compound_statement (3179,9)-(3185,10)
                    {: '{' (3179,9)-(3179,10)
                    expression_statement (3180,11)-(3180,65)
                      call_expression (3180,11)-(3180,64)
                        identifier: 'JERRY_ASSERT' (3180,11)-(3180,23)
                        argument_list (3180,24)-(3180,64)
                          (: '(' (3180,24)-(3180,25)
                          binary_expression (3180,25)-(3180,63)
                            field_expression (3180,25)-(3180,55)
                              identifier: 'scanner_context' (3180,25)-(3180,40)
                              .: '.' (3180,40)-(3180,41)
                              field_identifier: 'async_source_p' (3180,41)-(3180,55)
                            !=: '!=' (3180,56)-(3180,58)
                            null (3180,59)-(3180,63)
                              NULL: 'NULL' (3180,59)-(3180,63)
                          ): ')' (3180,63)-(3180,64)
                      ;: ';' (3180,64)-(3180,65)
                    declaration (3182,11)-(3182,34)
                      type_identifier: 'scanner_info_t' (3182,11)-(3182,25)
                      pointer_declarator (3182,26)-(3182,33)
                        *: '*' (3182,26)-(3182,27)
                        identifier: 'info_p' (3182,27)-(3182,33)
                      ;: ';' (3182,33)-(3182,34)
                    expression_statement (3183,11)-(3183,109)
                      assignment_expression (3183,11)-(3183,108)
                        identifier: 'info_p' (3183,11)-(3183,17)
                        =: '=' (3183,18)-(3183,19)
                        call_expression (3183,20)-(3183,108)
                          identifier: 'scanner_insert_info' (3183,20)-(3183,39)
                          argument_list (3183,40)-(3183,108)
                            (: '(' (3183,40)-(3183,41)
                            identifier: 'context_p' (3183,41)-(3183,50)
                            ,: ',' (3183,50)-(3183,51)
                            field_expression (3183,52)-(3183,82)
                              identifier: 'scanner_context' (3183,52)-(3183,67)
                              .: '.' (3183,67)-(3183,68)
                              field_identifier: 'async_source_p' (3183,68)-(3183,82)
                            ,: ',' (3183,82)-(3183,83)
                            sizeof_expression (3183,84)-(3183,107)
                              sizeof: 'sizeof' (3183,84)-(3183,90)
                              parenthesized_expression (3183,91)-(3183,107)
                                (: '(' (3183,91)-(3183,92)
                                identifier: 'scanner_info_t' (3183,92)-(3183,106)
                                ): ')' (3183,106)-(3183,107)
                            ): ')' (3183,107)-(3183,108)
                      ;: ';' (3183,108)-(3183,109)
                    expression_statement (3184,11)-(3184,58)
                      assignment_expression (3184,11)-(3184,57)
                        field_expression (3184,11)-(3184,23)
                          identifier: 'info_p' (3184,11)-(3184,17)
                          ->: '->' (3184,17)-(3184,19)
                          field_identifier: 'type' (3184,19)-(3184,23)
                        =: '=' (3184,24)-(3184,25)
                        identifier: 'SCANNER_TYPE_ERR_ASYNC_FUNCTION' (3184,26)-(3184,57)
                      ;: ';' (3184,57)-(3184,58)
                    }: '}' (3185,9)-(3185,10)
                #endif: '#endif' (3186,3)-(3186,9)
              comment: '/* ENABLED (JERRY_ES2015) */' (3186,10)-(3186,38)
              while_statement (3188,9)-(3191,10)
                while: 'while' (3188,9)-(3188,14)
                parenthesized_expression (3188,15)-(3188,62)
                  (: '(' (3188,15)-(3188,16)
                  binary_expression (3188,16)-(3188,61)
                    field_expression (3188,16)-(3188,53)
                      identifier: 'scanner_context' (3188,16)-(3188,31)
                      .: '.' (3188,31)-(3188,32)
                      field_identifier: 'active_literal_pool_p' (3188,32)-(3188,53)
                    !=: '!=' (3188,54)-(3188,56)
                    null (3188,57)-(3188,61)
                      NULL: 'NULL' (3188,57)-(3188,61)
                  ): ')' (3188,61)-(3188,62)
                compound_statement (3189,9)-(3191,10)
                  {: '{' (3189,9)-(3189,10)
                  expression_statement (3190,11)-(3190,66)
                    call_expression (3190,11)-(3190,65)
                      identifier: 'scanner_pop_literal_pool' (3190,11)-(3190,35)
                      argument_list (3190,36)-(3190,65)
                        (: '(' (3190,36)-(3190,37)
                        identifier: 'context_p' (3190,37)-(3190,46)
                        ,: ',' (3190,46)-(3190,47)
                        pointer_expression (3190,48)-(3190,64)
                          &: '&' (3190,48)-(3190,49)
                          identifier: 'scanner_context' (3190,49)-(3190,64)
                        ): ')' (3190,64)-(3190,65)
                    ;: ';' (3190,65)-(3190,66)
                  }: '}' (3191,9)-(3191,10)
              }: '}' (3192,7)-(3192,8)
            type_identifier: 'PARSER_CATCH' (3193,7)-(3193,19)
            compound_statement (3194,7)-(3196,8)
              {: '{' (3194,7)-(3194,8)
              expression_statement (3195,9)-(3195,69)
                call_expression (3195,9)-(3195,68)
                  identifier: 'JERRY_ASSERT' (3195,9)-(3195,21)
                  argument_list (3195,22)-(3195,68)
                    (: '(' (3195,22)-(3195,23)
                    binary_expression (3195,23)-(3195,67)
                      field_expression (3195,23)-(3195,39)
                        identifier: 'context_p' (3195,23)-(3195,32)
                        ->: '->' (3195,32)-(3195,34)
                        field_identifier: 'error' (3195,34)-(3195,39)
                      ==: '==' (3195,40)-(3195,42)
                      identifier: 'PARSER_ERR_OUT_OF_MEMORY' (3195,43)-(3195,67)
                    ): ')' (3195,67)-(3195,68)
                ;: ';' (3195,68)-(3195,69)
              }: '}' (3196,7)-(3196,8)
            type_identifier: 'PARSER_TRY_END' (3197,7)-(3197,21)
            }: '}' (3198,5)-(3198,6)
        expression_statement (3200,5)-(3200,108)
          call_expression (3200,5)-(3200,107)
            identifier: 'JERRY_ASSERT' (3200,5)-(3200,17)
            argument_list (3200,18)-(3200,107)
              (: '(' (3200,18)-(3200,19)
              binary_expression (3200,19)-(3200,106)
                binary_expression (3200,19)-(3200,58)
                  field_expression (3200,19)-(3200,35)
                    identifier: 'context_p' (3200,19)-(3200,28)
                    ->: '->' (3200,28)-(3200,30)
                    field_identifier: 'error' (3200,30)-(3200,35)
                  ==: '==' (3200,36)-(3200,38)
                  identifier: 'PARSER_ERR_NO_ERROR' (3200,39)-(3200,58)
                ||: '||' (3200,59)-(3200,61)
                binary_expression (3200,62)-(3200,106)
                  field_expression (3200,62)-(3200,78)
                    identifier: 'context_p' (3200,62)-(3200,71)
                    ->: '->' (3200,71)-(3200,73)
                    field_identifier: 'error' (3200,73)-(3200,78)
                  ==: '==' (3200,79)-(3200,81)
                  identifier: 'PARSER_ERR_OUT_OF_MEMORY' (3200,82)-(3200,106)
              ): ')' (3200,106)-(3200,107)
          ;: ';' (3200,107)-(3200,108)
        if_statement (3202,5)-(3216,6)
          if: 'if' (3202,5)-(3202,7)
          parenthesized_expression (3202,8)-(3202,54)
            (: '(' (3202,8)-(3202,9)
            binary_expression (3202,9)-(3202,53)
              field_expression (3202,9)-(3202,25)
                identifier: 'context_p' (3202,9)-(3202,18)
                ->: '->' (3202,18)-(3202,20)
                field_identifier: 'error' (3202,20)-(3202,25)
              ==: '==' (3202,26)-(3202,28)
              identifier: 'PARSER_ERR_OUT_OF_MEMORY' (3202,29)-(3202,53)
            ): ')' (3202,53)-(3202,54)
          compound_statement (3203,5)-(3216,6)
            {: '{' (3203,5)-(3203,6)
            while_statement (3204,7)-(3212,8)
              while: 'while' (3204,7)-(3204,12)
              parenthesized_expression (3204,13)-(3204,60)
                (: '(' (3204,13)-(3204,14)
                binary_expression (3204,14)-(3204,59)
                  field_expression (3204,14)-(3204,51)
                    identifier: 'scanner_context' (3204,14)-(3204,29)
                    .: '.' (3204,29)-(3204,30)
                    field_identifier: 'active_literal_pool_p' (3204,30)-(3204,51)
                  !=: '!=' (3204,52)-(3204,54)
                  null (3204,55)-(3204,59)
                    NULL: 'NULL' (3204,55)-(3204,59)
                ): ')' (3204,59)-(3204,60)
              compound_statement (3205,7)-(3212,8)
                {: '{' (3205,7)-(3205,8)
                declaration (3206,9)-(3206,88)
                  type_identifier: 'scanner_literal_pool_t' (3206,9)-(3206,31)
                  init_declarator (3206,32)-(3206,87)
                    pointer_declarator (3206,32)-(3206,47)
                      *: '*' (3206,32)-(3206,33)
                      identifier: 'literal_pool_p' (3206,33)-(3206,47)
                    =: '=' (3206,48)-(3206,49)
                    field_expression (3206,50)-(3206,87)
                      identifier: 'scanner_context' (3206,50)-(3206,65)
                      .: '.' (3206,65)-(3206,66)
                      field_identifier: 'active_literal_pool_p' (3206,66)-(3206,87)
                  ;: ';' (3206,87)-(3206,88)
                expression_statement (3208,9)-(3208,72)
                  assignment_expression (3208,9)-(3208,71)
                    field_expression (3208,9)-(3208,46)
                      identifier: 'scanner_context' (3208,9)-(3208,24)
                      .: '.' (3208,24)-(3208,25)
                      field_identifier: 'active_literal_pool_p' (3208,25)-(3208,46)
                    =: '=' (3208,47)-(3208,48)
                    field_expression (3208,49)-(3208,71)
                      identifier: 'literal_pool_p' (3208,49)-(3208,63)
                      ->: '->' (3208,63)-(3208,65)
                      field_identifier: 'prev_p' (3208,65)-(3208,71)
                  ;: ';' (3208,71)-(3208,72)
                expression_statement (3210,9)-(3210,58)
                  call_expression (3210,9)-(3210,57)
                    identifier: 'parser_list_free' (3210,9)-(3210,25)
                    argument_list (3210,26)-(3210,57)
                      (: '(' (3210,26)-(3210,27)
                      pointer_expression (3210,27)-(3210,56)
                        &: '&' (3210,27)-(3210,28)
                        field_expression (3210,28)-(3210,56)
                          identifier: 'literal_pool_p' (3210,28)-(3210,42)
                          ->: '->' (3210,42)-(3210,44)
                          field_identifier: 'literal_pool' (3210,44)-(3210,56)
                      ): ')' (3210,56)-(3210,57)
                  ;: ';' (3210,57)-(3210,58)
                expression_statement (3211,9)-(3211,72)
                  call_expression (3211,9)-(3211,71)
                    identifier: 'scanner_free' (3211,9)-(3211,21)
                    argument_list (3211,22)-(3211,71)
                      (: '(' (3211,22)-(3211,23)
                      identifier: 'literal_pool_p' (3211,23)-(3211,37)
                      ,: ',' (3211,37)-(3211,38)
                      sizeof_expression (3211,39)-(3211,70)
                        sizeof: 'sizeof' (3211,39)-(3211,45)
                        parenthesized_expression (3211,46)-(3211,70)
                          (: '(' (3211,46)-(3211,47)
                          identifier: 'scanner_literal_pool_t' (3211,47)-(3211,69)
                          ): ')' (3211,69)-(3211,70)
                      ): ')' (3211,70)-(3211,71)
                  ;: ';' (3211,71)-(3211,72)
                }: '}' (3212,7)-(3212,8)
            expression_statement (3214,7)-(3214,37)
              call_expression (3214,7)-(3214,36)
                identifier: 'parser_stack_free' (3214,7)-(3214,24)
                argument_list (3214,25)-(3214,36)
                  (: '(' (3214,25)-(3214,26)
                  identifier: 'context_p' (3214,26)-(3214,35)
                  ): ')' (3214,35)-(3214,36)
              ;: ';' (3214,36)-(3214,37)
            return_statement (3215,7)-(3215,14)
              return: 'return' (3215,7)-(3215,13)
              ;: ';' (3215,13)-(3215,14)
            }: '}' (3216,5)-(3216,6)
        }: '}' (3217,3)-(3217,4)
      declaration (3218,3)-(3220,66)
        type_identifier: 'PARSER_TRY_END' (3218,3)-(3218,17)
        ERROR (3220,3)-(3220,14)
          identifier: 'context_p' (3220,3)-(3220,12)
          ->: '->' (3220,12)-(3220,14)
        init_declarator (3220,14)-(3220,65)
          identifier: 'status_flags' (3220,14)-(3220,26)
          =: '=' (3220,27)-(3220,28)
          field_expression (3220,29)-(3220,65)
            identifier: 'scanner_context' (3220,29)-(3220,44)
            .: '.' (3220,44)-(3220,45)
            field_identifier: 'context_status_flags' (3220,45)-(3220,65)
        ;: ';' (3220,65)-(3220,66)
      expression_statement (3221,3)-(3221,41)
        call_expression (3221,3)-(3221,40)
          identifier: 'scanner_reverse_info_list' (3221,3)-(3221,28)
          argument_list (3221,29)-(3221,40)
            (: '(' (3221,29)-(3221,30)
            identifier: 'context_p' (3221,30)-(3221,39)
            ): ')' (3221,39)-(3221,40)
        ;: ';' (3221,40)-(3221,41)
      preproc_if (3223,1)-(3491,7)
        #if: '#if' (3223,1)-(3223,4)
        call_expression (3223,5)-(3223,42)
          identifier: 'ENABLED' (3223,5)-(3223,12)
          argument_list (3223,13)-(3223,42)
            (: '(' (3223,13)-(3223,14)
            identifier: 'JERRY_PARSER_DUMP_BYTE_CODE' (3223,14)-(3223,41)
            ): ')' (3223,41)-(3223,42)
        
: '
' (3223,42)-(3224,1)
        if_statement (3224,3)-(3490,4)
          if: 'if' (3224,3)-(3224,5)
          parenthesized_expression (3224,6)-(3224,34)
            (: '(' (3224,6)-(3224,7)
            field_expression (3224,7)-(3224,33)
              identifier: 'context_p' (3224,7)-(3224,16)
              ->: '->' (3224,16)-(3224,18)
              field_identifier: 'is_show_opcodes' (3224,18)-(3224,33)
            ): ')' (3224,33)-(3224,34)
          compound_statement (3225,3)-(3490,4)
            {: '{' (3225,3)-(3225,4)
            declaration (3226,5)-(3226,61)
              type_identifier: 'scanner_info_t' (3226,5)-(3226,19)
              init_declarator (3226,20)-(3226,60)
                pointer_declarator (3226,20)-(3226,27)
                  *: '*' (3226,20)-(3226,21)
                  identifier: 'info_p' (3226,21)-(3226,27)
                =: '=' (3226,28)-(3226,29)
                field_expression (3226,30)-(3226,60)
                  identifier: 'context_p' (3226,30)-(3226,39)
                  ->: '->' (3226,39)-(3226,41)
                  field_identifier: 'next_scanner_info_p' (3226,41)-(3226,60)
              ;: ';' (3226,60)-(3226,61)
            declaration (3227,5)-(3227,82)
              type_qualifier (3227,5)-(3227,10)
                const: 'const' (3227,5)-(3227,10)
              primitive_type: 'uint8_t' (3227,11)-(3227,18)
              init_declarator (3227,19)-(3227,81)
                pointer_declarator (3227,19)-(3227,34)
                  *: '*' (3227,19)-(3227,20)
                  identifier: 'source_start_p' (3227,20)-(3227,34)
                =: '=' (3227,35)-(3227,36)
                conditional_expression (3227,37)-(3227,81)
                  parenthesized_expression (3227,37)-(3227,57)
                    (: '(' (3227,37)-(3227,38)
                    binary_expression (3227,38)-(3227,56)
                      identifier: 'arg_list_p' (3227,38)-(3227,48)
                      ==: '==' (3227,49)-(3227,51)
                      null (3227,52)-(3227,56)
                        NULL: 'NULL' (3227,52)-(3227,56)
                    ): ')' (3227,56)-(3227,57)
                  ?: '?' (3227,58)-(3227,59)
                  identifier: 'source_p' (3227,60)-(3227,68)
                  :: ':' (3227,69)-(3227,70)
                  identifier: 'arg_list_p' (3227,71)-(3227,81)
              ;: ';' (3227,81)-(3227,82)
            while_statement (3229,5)-(3487,6)
              while: 'while' (3229,5)-(3229,10)
              parenthesized_expression (3229,11)-(3229,45)
                (: '(' (3229,11)-(3229,12)
                binary_expression (3229,12)-(3229,44)
                  field_expression (3229,12)-(3229,24)
                    identifier: 'info_p' (3229,12)-(3229,18)
                    ->: '->' (3229,18)-(3229,20)
                    field_identifier: 'type' (3229,20)-(3229,24)
                  !=: '!=' (3229,25)-(3229,27)
                  identifier: 'SCANNER_TYPE_END' (3229,28)-(3229,44)
                ): ')' (3229,44)-(3229,45)
              compound_statement (3230,5)-(3487,6)
                {: '{' (3230,5)-(3230,6)
                declaration (3231,7)-(3231,33)
                  type_qualifier (3231,7)-(3231,12)
                    const: 'const' (3231,7)-(3231,12)
                  primitive_type: 'char' (3231,13)-(3231,17)
                  init_declarator (3231,18)-(3231,32)
                    pointer_declarator (3231,18)-(3231,25)
                      *: '*' (3231,18)-(3231,19)
                      identifier: 'name_p' (3231,19)-(3231,25)
                    =: '=' (3231,26)-(3231,27)
                    null (3231,28)-(3231,32)
                      NULL: 'NULL' (3231,28)-(3231,32)
                  ;: ';' (3231,32)-(3231,33)
                declaration (3232,7)-(3232,35)
                  primitive_type: 'bool' (3232,7)-(3232,11)
                  init_declarator (3232,12)-(3232,34)
                    identifier: 'print_location' (3232,12)-(3232,26)
                    =: '=' (3232,27)-(3232,28)
                    false: 'false' (3232,29)-(3232,34)
                  ;: ';' (3232,34)-(3232,35)
                switch_statement (3234,7)-(3473,8)
                  switch: 'switch' (3234,7)-(3234,13)
                  parenthesized_expression (3234,14)-(3234,28)
                    (: '(' (3234,14)-(3234,15)
                    field_expression (3234,15)-(3234,27)
                      identifier: 'info_p' (3234,15)-(3234,21)
                      ->: '->' (3234,21)-(3234,23)
                      field_identifier: 'type' (3234,23)-(3234,27)
                    ): ')' (3234,27)-(3234,28)
                  compound_statement (3235,7)-(3473,8)
                    {: '{' (3235,7)-(3235,8)
                    case_statement (3236,9)-(3241,10)
                      case: 'case' (3236,9)-(3236,13)
                      identifier: 'SCANNER_TYPE_END_ARGUMENTS' (3236,14)-(3236,40)
                      :: ':' (3236,40)-(3236,41)
                      compound_statement (3237,9)-(3241,10)
                        {: '{' (3237,9)-(3237,10)
                        expression_statement (3238,11)-(3238,49)
                          call_expression (3238,11)-(3238,48)
                            identifier: 'JERRY_DEBUG_MSG' (3238,11)-(3238,26)
                            argument_list (3238,27)-(3238,48)
                              (: '(' (3238,27)-(3238,28)
                              string_literal (3238,28)-(3238,47)
                                ": '"' (3238,28)-(3238,29)
                                string_content: '  END_ARGUMENTS' (3238,29)-(3238,44)
                                escape_sequence: '\n' (3238,44)-(3238,46)
                                ": '"' (3238,46)-(3238,47)
                              ): ')' (3238,47)-(3238,48)
                          ;: ';' (3238,48)-(3238,49)
                        expression_statement (3239,11)-(3239,37)
                          assignment_expression (3239,11)-(3239,36)
                            identifier: 'source_start_p' (3239,11)-(3239,25)
                            =: '=' (3239,26)-(3239,27)
                            identifier: 'source_p' (3239,28)-(3239,36)
                          ;: ';' (3239,36)-(3239,37)
                        break_statement (3240,11)-(3240,17)
                          break: 'break' (3240,11)-(3240,16)
                          ;: ';' (3240,16)-(3240,17)
                        }: '}' (3241,9)-(3241,10)
                    case_statement (3242,9)-(3242,36)
                      case: 'case' (3242,9)-(3242,13)
                      identifier: 'SCANNER_TYPE_FUNCTION' (3242,14)-(3242,35)
                      :: ':' (3242,35)-(3242,36)
                    case_statement (3243,9)-(3382,10)
                      case: 'case' (3243,9)-(3243,13)
                      identifier: 'SCANNER_TYPE_BLOCK' (3243,14)-(3243,32)
                      :: ':' (3243,32)-(3243,33)
                      compound_statement (3244,9)-(3382,10)
                        {: '{' (3244,9)-(3244,10)
                        declaration (3245,11)-(3245,63)
                          type_qualifier (3245,11)-(3245,16)
                            const: 'const' (3245,11)-(3245,16)
                          primitive_type: 'uint8_t' (3245,17)-(3245,24)
                          init_declarator (3245,25)-(3245,62)
                            pointer_declarator (3245,25)-(3245,39)
                              *: '*' (3245,25)-(3245,26)
                              identifier: 'prev_source_p' (3245,26)-(3245,39)
                            =: '=' (3245,40)-(3245,41)
                            binary_expression (3245,42)-(3245,62)
                              field_expression (3245,42)-(3245,58)
                                identifier: 'info_p' (3245,42)-(3245,48)
                                ->: '->' (3245,48)-(3245,50)
                                field_identifier: 'source_p' (3245,50)-(3245,58)
                              -: '-' (3245,59)-(3245,60)
                              number_literal: '1' (3245,61)-(3245,62)
                          ;: ';' (3245,62)-(3245,63)
                        declaration (3246,11)-(3246,33)
                          type_qualifier (3246,11)-(3246,16)
                            const: 'const' (3246,11)-(3246,16)
                          primitive_type: 'uint8_t' (3246,17)-(3246,24)
                          pointer_declarator (3246,25)-(3246,32)
                            *: '*' (3246,25)-(3246,26)
                            identifier: 'data_p' (3246,26)-(3246,32)
                          ;: ';' (3246,32)-(3246,33)
                        if_statement (3248,11)-(3261,12)
                          if: 'if' (3248,11)-(3248,13)
                          parenthesized_expression (3248,14)-(3248,53)
                            (: '(' (3248,14)-(3248,15)
                            binary_expression (3248,15)-(3248,52)
                              field_expression (3248,15)-(3248,27)
                                identifier: 'info_p' (3248,15)-(3248,21)
                                ->: '->' (3248,21)-(3248,23)
                                field_identifier: 'type' (3248,23)-(3248,27)
                              ==: '==' (3248,28)-(3248,30)
                              identifier: 'SCANNER_TYPE_FUNCTION' (3248,31)-(3248,52)
                            ): ')' (3248,52)-(3248,53)
                          compound_statement (3249,11)-(3255,12)
                            {: '{' (3249,11)-(3249,12)
                            expression_statement (3250,13)-(3250,53)
                              assignment_expression (3250,13)-(3250,52)
                                identifier: 'data_p' (3250,13)-(3250,19)
                                =: '=' (3250,20)-(3250,21)
                                cast_expression (3250,22)-(3250,52)
                                  (: '(' (3250,22)-(3250,23)
                                  type_descriptor (3250,23)-(3250,38)
                                    type_qualifier (3250,23)-(3250,28)
                                      const: 'const' (3250,23)-(3250,28)
                                    primitive_type: 'uint8_t' (3250,29)-(3250,36)
                                    abstract_pointer_declarator (3250,37)-(3250,38)
                                      *: '*' (3250,37)-(3250,38)
                                  ): ')' (3250,38)-(3250,39)
                                  parenthesized_expression (3250,40)-(3250,52)
                                    (: '(' (3250,40)-(3250,41)
                                    binary_expression (3250,41)-(3250,51)
                                      identifier: 'info_p' (3250,41)-(3250,47)
                                      +: '+' (3250,48)-(3250,49)
                                      number_literal: '1' (3250,50)-(3250,51)
                                    ): ')' (3250,51)-(3250,52)
                              ;: ';' (3250,52)-(3250,53)
                            expression_statement (3252,13)-(3254,53)
                              call_expression (3252,13)-(3254,52)
                                identifier: 'JERRY_DEBUG_MSG' (3252,13)-(3252,28)
                                argument_list (3252,29)-(3254,52)
                                  (: '(' (3252,29)-(3252,30)
                                  string_literal (3252,30)-(3252,72)
                                    ": '"' (3252,30)-(3252,31)
                                    string_content: '  FUNCTION: flags: 0x%x declarations: %d' (3252,31)-(3252,71)
                                    ": '"' (3252,71)-(3252,72)
                                  ,: ',' (3252,72)-(3252,73)
                                  cast_expression (3253,30)-(3253,50)
                                    (: '(' (3253,30)-(3253,31)
                                    type_descriptor (3253,31)-(3253,34)
                                      primitive_type: 'int' (3253,31)-(3253,34)
                                    ): ')' (3253,34)-(3253,35)
                                    field_expression (3253,36)-(3253,50)
                                      identifier: 'info_p' (3253,36)-(3253,42)
                                      ->: '->' (3253,42)-(3253,44)
                                      field_identifier: 'u8_arg' (3253,44)-(3253,50)
                                  ,: ',' (3253,50)-(3253,51)
                                  cast_expression (3254,30)-(3254,51)
                                    (: '(' (3254,30)-(3254,31)
                                    type_descriptor (3254,31)-(3254,34)
                                      primitive_type: 'int' (3254,31)-(3254,34)
                                    ): ')' (3254,34)-(3254,35)
                                    field_expression (3254,36)-(3254,51)
                                      identifier: 'info_p' (3254,36)-(3254,42)
                                      ->: '->' (3254,42)-(3254,44)
                                      field_identifier: 'u16_arg' (3254,44)-(3254,51)
                                  ): ')' (3254,51)-(3254,52)
                              ;: ';' (3254,52)-(3254,53)
                            }: '}' (3255,11)-(3255,12)
                          else_clause (3256,11)-(3261,12)
                            else: 'else' (3256,11)-(3256,15)
                            compound_statement (3257,11)-(3261,12)
                              {: '{' (3257,11)-(3257,12)
                              expression_statement (3258,13)-(3258,53)
                                assignment_expression (3258,13)-(3258,52)
                                  identifier: 'data_p' (3258,13)-(3258,19)
                                  =: '=' (3258,20)-(3258,21)
                                  cast_expression (3258,22)-(3258,52)
                                    (: '(' (3258,22)-(3258,23)
                                    type_descriptor (3258,23)-(3258,38)
                                      type_qualifier (3258,23)-(3258,28)
                                        const: 'const' (3258,23)-(3258,28)
                                      primitive_type: 'uint8_t' (3258,29)-(3258,36)
                                      abstract_pointer_declarator (3258,37)-(3258,38)
                                        *: '*' (3258,37)-(3258,38)
                                    ): ')' (3258,38)-(3258,39)
                                    parenthesized_expression (3258,40)-(3258,52)
                                      (: '(' (3258,40)-(3258,41)
                                      binary_expression (3258,41)-(3258,51)
                                        identifier: 'info_p' (3258,41)-(3258,47)
                                        +: '+' (3258,48)-(3258,49)
                                        number_literal: '1' (3258,50)-(3258,51)
                                      ): ')' (3258,51)-(3258,52)
                                ;: ';' (3258,52)-(3258,53)
                              expression_statement (3260,13)-(3260,42)
                                call_expression (3260,13)-(3260,41)
                                  identifier: 'JERRY_DEBUG_MSG' (3260,13)-(3260,28)
                                  argument_list (3260,29)-(3260,41)
                                    (: '(' (3260,29)-(3260,30)
                                    string_literal (3260,30)-(3260,40)
                                      ": '"' (3260,30)-(3260,31)
                                      string_content: '  BLOCK:' (3260,31)-(3260,39)
                                      ": '"' (3260,39)-(3260,40)
                                    ): ')' (3260,40)-(3260,41)
                                ;: ';' (3260,41)-(3260,42)
                              }: '}' (3261,11)-(3261,12)
                        expression_statement (3263,11)-(3263,87)
                          call_expression (3263,11)-(3263,86)
                            identifier: 'JERRY_DEBUG_MSG' (3263,11)-(3263,26)
                            argument_list (3263,27)-(3263,86)
                              (: '(' (3263,27)-(3263,28)
                              string_literal (3263,28)-(3263,42)
                                ": '"' (3263,28)-(3263,29)
                                string_content: ' source:%d' (3263,29)-(3263,39)
                                escape_sequence: '\n' (3263,39)-(3263,41)
                                ": '"' (3263,41)-(3263,42)
                              ,: ',' (3263,42)-(3263,43)
                              cast_expression (3263,44)-(3263,85)
                                (: '(' (3263,44)-(3263,45)
                                type_descriptor (3263,45)-(3263,48)
                                  primitive_type: 'int' (3263,45)-(3263,48)
                                ): ')' (3263,48)-(3263,49)
                                parenthesized_expression (3263,50)-(3263,85)
                                  (: '(' (3263,50)-(3263,51)
                                  binary_expression (3263,51)-(3263,84)
                                    field_expression (3263,51)-(3263,67)
                                      identifier: 'info_p' (3263,51)-(3263,57)
                                      ->: '->' (3263,57)-(3263,59)
                                      field_identifier: 'source_p' (3263,59)-(3263,67)
                                    -: '-' (3263,68)-(3263,69)
                                    identifier: 'source_start_p' (3263,70)-(3263,84)
                                  ): ')' (3263,84)-(3263,85)
                              ): ')' (3263,85)-(3263,86)
                          ;: ';' (3263,86)-(3263,87)
                        while_statement (3265,11)-(3380,12)
                          while: 'while' (3265,11)-(3265,16)
                          parenthesized_expression (3265,17)-(3265,55)
                            (: '(' (3265,17)-(3265,18)
                            binary_expression (3265,18)-(3265,54)
                              subscript_expression (3265,18)-(3265,27)
                                identifier: 'data_p' (3265,18)-(3265,24)
                                [: '[' (3265,24)-(3265,25)
                                number_literal: '0' (3265,25)-(3265,26)
                                ]: ']' (3265,26)-(3265,27)
                              !=: '!=' (3265,28)-(3265,30)
                              identifier: 'SCANNER_STREAM_TYPE_END' (3265,31)-(3265,54)
                            ): ')' (3265,54)-(3265,55)
                          compound_statement (3266,11)-(3380,12)
                            {: '{' (3266,11)-(3266,12)
                            switch_statement (3267,13)-(3334,14)
                              switch: 'switch' (3267,13)-(3267,19)
                              parenthesized_expression (3267,20)-(3267,58)
                                (: '(' (3267,20)-(3267,21)
                                binary_expression (3267,21)-(3267,57)
                                  subscript_expression (3267,21)-(3267,30)
                                    identifier: 'data_p' (3267,21)-(3267,27)
                                    [: '[' (3267,27)-(3267,28)
                                    number_literal: '0' (3267,28)-(3267,29)
                                    ]: ']' (3267,29)-(3267,30)
                                  &: '&' (3267,31)-(3267,32)
                                  identifier: 'SCANNER_STREAM_TYPE_MASK' (3267,33)-(3267,57)
                                ): ')' (3267,57)-(3267,58)
                              compound_statement (3268,13)-(3334,14)
                                {: '{' (3268,13)-(3268,14)
                                case_statement (3269,15)-(3273,16)
                                  case: 'case' (3269,15)-(3269,19)
                                  identifier: 'SCANNER_STREAM_TYPE_VAR' (3269,20)-(3269,43)
                                  :: ':' (3269,43)-(3269,44)
                                  compound_statement (3270,15)-(3273,16)
                                    {: '{' (3270,15)-(3270,16)
                                    expression_statement (3271,17)-(3271,46)
                                      call_expression (3271,17)-(3271,45)
                                        identifier: 'JERRY_DEBUG_MSG' (3271,17)-(3271,32)
                                        argument_list (3271,33)-(3271,45)
                                          (: '(' (3271,33)-(3271,34)
                                          string_literal (3271,34)-(3271,44)
                                            ": '"' (3271,34)-(3271,35)
                                            string_content: '    VAR ' (3271,35)-(3271,43)
                                            ": '"' (3271,43)-(3271,44)
                                          ): ')' (3271,44)-(3271,45)
                                      ;: ';' (3271,45)-(3271,46)
                                    break_statement (3272,17)-(3272,23)
                                      break: 'break' (3272,17)-(3272,22)
                                      ;: ';' (3272,22)-(3272,23)
                                    }: '}' (3273,15)-(3273,16)
                                preproc_if (3274,1)-(3290,7)
                                  #if: '#if' (3274,1)-(3274,4)
                                  call_expression (3274,5)-(3274,27)
                                    identifier: 'ENABLED' (3274,5)-(3274,12)
                                    argument_list (3274,13)-(3274,27)
                                      (: '(' (3274,13)-(3274,14)
                                      identifier: 'JERRY_ES2015' (3274,14)-(3274,26)
                                      ): ')' (3274,26)-(3274,27)
                                  
: '
' (3274,27)-(3275,1)
                                  case_statement (3275,15)-(3279,16)
                                    case: 'case' (3275,15)-(3275,19)
                                    identifier: 'SCANNER_STREAM_TYPE_LET' (3275,20)-(3275,43)
                                    :: ':' (3275,43)-(3275,44)
                                    compound_statement (3276,15)-(3279,16)
                                      {: '{' (3276,15)-(3276,16)
                                      expression_statement (3277,17)-(3277,46)
                                        call_expression (3277,17)-(3277,45)
                                          identifier: 'JERRY_DEBUG_MSG' (3277,17)-(3277,32)
                                          argument_list (3277,33)-(3277,45)
                                            (: '(' (3277,33)-(3277,34)
                                            string_literal (3277,34)-(3277,44)
                                              ": '"' (3277,34)-(3277,35)
                                              string_content: '    LET ' (3277,35)-(3277,43)
                                              ": '"' (3277,43)-(3277,44)
                                            ): ')' (3277,44)-(3277,45)
                                        ;: ';' (3277,45)-(3277,46)
                                      break_statement (3278,17)-(3278,23)
                                        break: 'break' (3278,17)-(3278,22)
                                        ;: ';' (3278,22)-(3278,23)
                                      }: '}' (3279,15)-(3279,16)
                                  case_statement (3280,15)-(3284,16)
                                    case: 'case' (3280,15)-(3280,19)
                                    identifier: 'SCANNER_STREAM_TYPE_CONST' (3280,20)-(3280,45)
                                    :: ':' (3280,45)-(3280,46)
                                    compound_statement (3281,15)-(3284,16)
                                      {: '{' (3281,15)-(3281,16)
                                      expression_statement (3282,17)-(3282,48)
                                        call_expression (3282,17)-(3282,47)
                                          identifier: 'JERRY_DEBUG_MSG' (3282,17)-(3282,32)
                                          argument_list (3282,33)-(3282,47)
                                            (: '(' (3282,33)-(3282,34)
                                            string_literal (3282,34)-(3282,46)
                                              ": '"' (3282,34)-(3282,35)
                                              string_content: '    CONST ' (3282,35)-(3282,45)
                                              ": '"' (3282,45)-(3282,46)
                                            ): ')' (3282,46)-(3282,47)
                                        ;: ';' (3282,47)-(3282,48)
                                      break_statement (3283,17)-(3283,23)
                                        break: 'break' (3283,17)-(3283,22)
                                        ;: ';' (3283,22)-(3283,23)
                                      }: '}' (3284,15)-(3284,16)
                                  case_statement (3285,15)-(3289,16)
                                    case: 'case' (3285,15)-(3285,19)
                                    identifier: 'SCANNER_STREAM_TYPE_LOCAL' (3285,20)-(3285,45)
                                    :: ':' (3285,45)-(3285,46)
                                    compound_statement (3286,15)-(3289,16)
                                      {: '{' (3286,15)-(3286,16)
                                      expression_statement (3287,17)-(3287,48)
                                        call_expression (3287,17)-(3287,47)
                                          identifier: 'JERRY_DEBUG_MSG' (3287,17)-(3287,32)
                                          argument_list (3287,33)-(3287,47)
                                            (: '(' (3287,33)-(3287,34)
                                            string_literal (3287,34)-(3287,46)
                                              ": '"' (3287,34)-(3287,35)
                                              string_content: '    LOCAL ' (3287,35)-(3287,45)
                                              ": '"' (3287,45)-(3287,46)
                                            ): ')' (3287,46)-(3287,47)
                                        ;: ';' (3287,47)-(3287,48)
                                      break_statement (3288,17)-(3288,23)
                                        break: 'break' (3288,17)-(3288,22)
                                        ;: ';' (3288,22)-(3288,23)
                                      }: '}' (3289,15)-(3289,16)
                                  #endif: '#endif' (3290,1)-(3290,7)
                                comment: '/* ENABLED (JERRY_ES2015) */' (3290,8)-(3290,36)
                                preproc_if (3291,1)-(3297,7)
                                  #if: '#if' (3291,1)-(3291,4)
                                  call_expression (3291,5)-(3291,41)
                                    identifier: 'ENABLED' (3291,5)-(3291,12)
                                    argument_list (3291,13)-(3291,41)
                                      (: '(' (3291,13)-(3291,14)
                                      identifier: 'JERRY_ES2015_MODULE_SYSTEM' (3291,14)-(3291,40)
                                      ): ')' (3291,40)-(3291,41)
                                  
: '
' (3291,41)-(3292,1)
                                  case_statement (3292,15)-(3296,16)
                                    case: 'case' (3292,15)-(3292,19)
                                    identifier: 'SCANNER_STREAM_TYPE_IMPORT' (3292,20)-(3292,46)
                                    :: ':' (3292,46)-(3292,47)
                                    compound_statement (3293,15)-(3296,16)
                                      {: '{' (3293,15)-(3293,16)
                                      expression_statement (3294,17)-(3294,49)
                                        call_expression (3294,17)-(3294,48)
                                          identifier: 'JERRY_DEBUG_MSG' (3294,17)-(3294,32)
                                          argument_list (3294,33)-(3294,48)
                                            (: '(' (3294,33)-(3294,34)
                                            string_literal (3294,34)-(3294,47)
                                              ": '"' (3294,34)-(3294,35)
                                              string_content: '    IMPORT ' (3294,35)-(3294,46)
                                              ": '"' (3294,46)-(3294,47)
                                            ): ')' (3294,47)-(3294,48)
                                        ;: ';' (3294,48)-(3294,49)
                                      break_statement (3295,17)-(3295,23)
                                        break: 'break' (3295,17)-(3295,22)
                                        ;: ';' (3295,22)-(3295,23)
                                      }: '}' (3296,15)-(3296,16)
                                  #endif: '#endif' (3297,1)-(3297,7)
                                comment: '/* ENABLED (JERRY_ES2015_MODULE_SYSTEM) */' (3297,8)-(3297,50)
                                case_statement (3298,15)-(3302,16)
                                  case: 'case' (3298,15)-(3298,19)
                                  identifier: 'SCANNER_STREAM_TYPE_ARG' (3298,20)-(3298,43)
                                  :: ':' (3298,43)-(3298,44)
                                  compound_statement (3299,15)-(3302,16)
                                    {: '{' (3299,15)-(3299,16)
                                    expression_statement (3300,17)-(3300,46)
                                      call_expression (3300,17)-(3300,45)
                                        identifier: 'JERRY_DEBUG_MSG' (3300,17)-(3300,32)
                                        argument_list (3300,33)-(3300,45)
                                          (: '(' (3300,33)-(3300,34)
                                          string_literal (3300,34)-(3300,44)
                                            ": '"' (3300,34)-(3300,35)
                                            string_content: '    ARG ' (3300,35)-(3300,43)
                                            ": '"' (3300,43)-(3300,44)
                                          ): ')' (3300,44)-(3300,45)
                                      ;: ';' (3300,45)-(3300,46)
                                    break_statement (3301,17)-(3301,23)
                                      break: 'break' (3301,17)-(3301,22)
                                      ;: ';' (3301,22)-(3301,23)
                                    }: '}' (3302,15)-(3302,16)
                                preproc_if (3303,1)-(3309,7)
                                  #if: '#if' (3303,1)-(3303,4)
                                  call_expression (3303,5)-(3303,27)
                                    identifier: 'ENABLED' (3303,5)-(3303,12)
                                    argument_list (3303,13)-(3303,27)
                                      (: '(' (3303,13)-(3303,14)
                                      identifier: 'JERRY_ES2015' (3303,14)-(3303,26)
                                      ): ')' (3303,26)-(3303,27)
                                  
: '
' (3303,27)-(3304,1)
                                  case_statement (3304,15)-(3308,16)
                                    case: 'case' (3304,15)-(3304,19)
                                    identifier: 'SCANNER_STREAM_TYPE_DESTRUCTURED_ARG' (3304,20)-(3304,56)
                                    :: ':' (3304,56)-(3304,57)
                                    compound_statement (3305,15)-(3308,16)
                                      {: '{' (3305,15)-(3305,16)
                                      expression_statement (3306,17)-(3306,59)
                                        call_expression (3306,17)-(3306,58)
                                          identifier: 'JERRY_DEBUG_MSG' (3306,17)-(3306,32)
                                          argument_list (3306,33)-(3306,58)
                                            (: '(' (3306,33)-(3306,34)
                                            string_literal (3306,34)-(3306,57)
                                              ": '"' (3306,34)-(3306,35)
                                              string_content: '    DESTRUCTURED_ARG ' (3306,35)-(3306,56)
                                              ": '"' (3306,56)-(3306,57)
                                            ): ')' (3306,57)-(3306,58)
                                        ;: ';' (3306,58)-(3306,59)
                                      break_statement (3307,17)-(3307,23)
                                        break: 'break' (3307,17)-(3307,22)
                                        ;: ';' (3307,22)-(3307,23)
                                      }: '}' (3308,15)-(3308,16)
                                  #endif: '#endif' (3309,1)-(3309,7)
                                comment: '/* ENABLED (JERRY_ES2015) */' (3309,8)-(3309,36)
                                case_statement (3310,15)-(3314,16)
                                  case: 'case' (3310,15)-(3310,19)
                                  identifier: 'SCANNER_STREAM_TYPE_ARG_FUNC' (3310,20)-(3310,48)
                                  :: ':' (3310,48)-(3310,49)
                                  compound_statement (3311,15)-(3314,16)
                                    {: '{' (3311,15)-(3311,16)
                                    expression_statement (3312,17)-(3312,51)
                                      call_expression (3312,17)-(3312,50)
                                        identifier: 'JERRY_DEBUG_MSG' (3312,17)-(3312,32)
                                        argument_list (3312,33)-(3312,50)
                                          (: '(' (3312,33)-(3312,34)
                                          string_literal (3312,34)-(3312,49)
                                            ": '"' (3312,34)-(3312,35)
                                            string_content: '    ARG_FUNC ' (3312,35)-(3312,48)
                                            ": '"' (3312,48)-(3312,49)
                                          ): ')' (3312,49)-(3312,50)
                                      ;: ';' (3312,50)-(3312,51)
                                    break_statement (3313,17)-(3313,23)
                                      break: 'break' (3313,17)-(3313,22)
                                      ;: ';' (3313,22)-(3313,23)
                                    }: '}' (3314,15)-(3314,16)
                                preproc_if (3315,1)-(3321,7)
                                  #if: '#if' (3315,1)-(3315,4)
                                  call_expression (3315,5)-(3315,27)
                                    identifier: 'ENABLED' (3315,5)-(3315,12)
                                    argument_list (3315,13)-(3315,27)
                                      (: '(' (3315,13)-(3315,14)
                                      identifier: 'JERRY_ES2015' (3315,14)-(3315,26)
                                      ): ')' (3315,26)-(3315,27)
                                  
: '
' (3315,27)-(3316,1)
                                  case_statement (3316,15)-(3320,16)
                                    case: 'case' (3316,15)-(3316,19)
                                    identifier: 'SCANNER_STREAM_TYPE_DESTRUCTURED_ARG_FUNC' (3316,20)-(3316,61)
                                    :: ':' (3316,61)-(3316,62)
                                    compound_statement (3317,15)-(3320,16)
                                      {: '{' (3317,15)-(3317,16)
                                      expression_statement (3318,17)-(3318,64)
                                        call_expression (3318,17)-(3318,63)
                                          identifier: 'JERRY_DEBUG_MSG' (3318,17)-(3318,32)
                                          argument_list (3318,33)-(3318,63)
                                            (: '(' (3318,33)-(3318,34)
                                            string_literal (3318,34)-(3318,62)
                                              ": '"' (3318,34)-(3318,35)
                                              string_content: '    DESTRUCTURED_ARG_FUNC ' (3318,35)-(3318,61)
                                              ": '"' (3318,61)-(3318,62)
                                            ): ')' (3318,62)-(3318,63)
                                        ;: ';' (3318,63)-(3318,64)
                                      break_statement (3319,17)-(3319,23)
                                        break: 'break' (3319,17)-(3319,22)
                                        ;: ';' (3319,22)-(3319,23)
                                      }: '}' (3320,15)-(3320,16)
                                  #endif: '#endif' (3321,1)-(3321,7)
                                comment: '/* ENABLED (JERRY_ES2015) */' (3321,8)-(3321,36)
                                case_statement (3322,15)-(3326,16)
                                  case: 'case' (3322,15)-(3322,19)
                                  identifier: 'SCANNER_STREAM_TYPE_FUNC' (3322,20)-(3322,44)
                                  :: ':' (3322,44)-(3322,45)
                                  compound_statement (3323,15)-(3326,16)
                                    {: '{' (3323,15)-(3323,16)
                                    expression_statement (3324,17)-(3324,47)
                                      call_expression (3324,17)-(3324,46)
                                        identifier: 'JERRY_DEBUG_MSG' (3324,17)-(3324,32)
                                        argument_list (3324,33)-(3324,46)
                                          (: '(' (3324,33)-(3324,34)
                                          string_literal (3324,34)-(3324,45)
                                            ": '"' (3324,34)-(3324,35)
                                            string_content: '    FUNC ' (3324,35)-(3324,44)
                                            ": '"' (3324,44)-(3324,45)
                                          ): ')' (3324,45)-(3324,46)
                                      ;: ';' (3324,46)-(3324,47)
                                    break_statement (3325,17)-(3325,23)
                                      break: 'break' (3325,17)-(3325,22)
                                      ;: ';' (3325,22)-(3325,23)
                                    }: '}' (3326,15)-(3326,16)
                                case_statement (3327,15)-(3333,16)
                                  default: 'default' (3327,15)-(3327,22)
                                  :: ':' (3327,22)-(3327,23)
                                  compound_statement (3328,15)-(3333,16)
                                    {: '{' (3328,15)-(3328,16)
                                    expression_statement (3329,17)-(3329,99)
                                      call_expression (3329,17)-(3329,98)
                                        identifier: 'JERRY_ASSERT' (3329,17)-(3329,29)
                                        argument_list (3329,30)-(3329,98)
                                          (: '(' (3329,30)-(3329,31)
                                          binary_expression (3329,31)-(3329,97)
                                            parenthesized_expression (3329,31)-(3329,69)
                                              (: '(' (3329,31)-(3329,32)
                                              binary_expression (3329,32)-(3329,68)
                                                subscript_expression (3329,32)-(3329,41)
                                                  identifier: 'data_p' (3329,32)-(3329,38)
                                                  [: '[' (3329,38)-(3329,39)
                                                  number_literal: '0' (3329,39)-(3329,40)
                                                  ]: ']' (3329,40)-(3329,41)
                                                &: '&' (3329,42)-(3329,43)
                                                identifier: 'SCANNER_STREAM_TYPE_MASK' (3329,44)-(3329,68)
                                              ): ')' (3329,68)-(3329,69)
                                            ==: '==' (3329,70)-(3329,72)
                                            identifier: 'SCANNER_STREAM_TYPE_HOLE' (3329,73)-(3329,97)
                                          ): ')' (3329,97)-(3329,98)
                                      ;: ';' (3329,98)-(3329,99)
                                    expression_statement (3330,17)-(3330,48)
                                      call_expression (3330,17)-(3330,47)
                                        identifier: 'JERRY_DEBUG_MSG' (3330,17)-(3330,32)
                                        argument_list (3330,33)-(3330,47)
                                          (: '(' (3330,33)-(3330,34)
                                          string_literal (3330,34)-(3330,46)
                                            ": '"' (3330,34)-(3330,35)
                                            string_content: '    HOLE' (3330,35)-(3330,43)
                                            escape_sequence: '\n' (3330,43)-(3330,45)
                                            ": '"' (3330,45)-(3330,46)
                                          ): ')' (3330,46)-(3330,47)
                                      ;: ';' (3330,47)-(3330,48)
                                    expression_statement (3331,17)-(3331,26)
                                      update_expression (3331,17)-(3331,25)
                                        identifier: 'data_p' (3331,17)-(3331,23)
                                        ++: '++' (3331,23)-(3331,25)
                                      ;: ';' (3331,25)-(3331,26)
                                    continue_statement (3332,17)-(3332,26)
                                      continue: 'continue' (3332,17)-(3332,25)
                                      ;: ';' (3332,25)-(3332,26)
                                    }: '}' (3333,15)-(3333,16)
                                }: '}' (3334,13)-(3334,14)
                            declaration (3336,13)-(3336,27)
                              primitive_type: 'size_t' (3336,13)-(3336,19)
                              identifier: 'length' (3336,20)-(3336,26)
                              ;: ';' (3336,26)-(3336,27)
                            if_statement (3338,13)-(3362,14)
                              if: 'if' (3338,13)-(3338,15)
                              parenthesized_expression (3338,16)-(3338,59)
                                (: '(' (3338,16)-(3338,17)
                                unary_expression (3338,17)-(3338,58)
                                  !: '!' (3338,17)-(3338,18)
                                  parenthesized_expression (3338,18)-(3338,58)
                                    (: '(' (3338,18)-(3338,19)
                                    binary_expression (3338,19)-(3338,57)
                                      subscript_expression (3338,19)-(3338,28)
                                        identifier: 'data_p' (3338,19)-(3338,25)
                                        [: '[' (3338,25)-(3338,26)
                                        number_literal: '0' (3338,26)-(3338,27)
                                        ]: ']' (3338,27)-(3338,28)
                                      &: '&' (3338,29)-(3338,30)
                                      identifier: 'SCANNER_STREAM_UINT16_DIFF' (3338,31)-(3338,57)
                                    ): ')' (3338,57)-(3338,58)
                                ): ')' (3338,58)-(3338,59)
                              compound_statement (3339,13)-(3350,14)
                                {: '{' (3339,13)-(3339,14)
                                if_statement (3340,15)-(3349,16)
                                  if: 'if' (3340,15)-(3340,17)
                                  parenthesized_expression (3340,18)-(3340,34)
                                    (: '(' (3340,18)-(3340,19)
                                    binary_expression (3340,19)-(3340,33)
                                      subscript_expression (3340,19)-(3340,28)
                                        identifier: 'data_p' (3340,19)-(3340,25)
                                        [: '[' (3340,25)-(3340,26)
                                        number_literal: '2' (3340,26)-(3340,27)
                                        ]: ']' (3340,27)-(3340,28)
                                      !=: '!=' (3340,29)-(3340,31)
                                      number_literal: '0' (3340,32)-(3340,33)
                                    ): ')' (3340,33)-(3340,34)
                                  compound_statement (3341,15)-(3344,16)
                                    {: '{' (3341,15)-(3341,16)
                                    expression_statement (3342,17)-(3342,44)
                                      assignment_expression (3342,17)-(3342,43)
                                        identifier: 'prev_source_p' (3342,17)-(3342,30)
                                        +=: '+=' (3342,31)-(3342,33)
                                        subscript_expression (3342,34)-(3342,43)
                                          identifier: 'data_p' (3342,34)-(3342,40)
                                          [: '[' (3342,40)-(3342,41)
                                          number_literal: '2' (3342,41)-(3342,42)
                                          ]: ']' (3342,42)-(3342,43)
                                      ;: ';' (3342,43)-(3342,44)
                                    expression_statement (3343,17)-(3343,32)
                                      assignment_expression (3343,17)-(3343,31)
                                        identifier: 'length' (3343,17)-(3343,23)
                                        =: '=' (3343,24)-(3343,25)
                                        binary_expression (3343,26)-(3343,31)
                                          number_literal: '2' (3343,26)-(3343,27)
                                          +: '+' (3343,28)-(3343,29)
                                          number_literal: '1' (3343,30)-(3343,31)
                                      ;: ';' (3343,31)-(3343,32)
                                    }: '}' (3344,15)-(3344,16)
                                  else_clause (3345,15)-(3349,16)
                                    else: 'else' (3345,15)-(3345,19)
                                    compound_statement (3346,15)-(3349,16)
                                      {: '{' (3346,15)-(3346,16)
                                      expression_statement (3347,17)-(3347,83)
                                        call_expression (3347,17)-(3347,82)
                                          identifier: 'memcpy' (3347,17)-(3347,23)
                                          argument_list (3347,24)-(3347,82)
                                            (: '(' (3347,24)-(3347,25)
                                            pointer_expression (3347,25)-(3347,39)
                                              &: '&' (3347,25)-(3347,26)
                                              identifier: 'prev_source_p' (3347,26)-(3347,39)
                                            ,: ',' (3347,39)-(3347,40)
                                            binary_expression (3347,41)-(3347,55)
                                              binary_expression (3347,41)-(3347,51)
                                                identifier: 'data_p' (3347,41)-(3347,47)
                                                +: '+' (3347,48)-(3347,49)
                                                number_literal: '2' (3347,50)-(3347,51)
                                              +: '+' (3347,52)-(3347,53)
                                              number_literal: '1' (3347,54)-(3347,55)
                                            ,: ',' (3347,55)-(3347,56)
                                            sizeof_expression (3347,57)-(3347,81)
                                              sizeof: 'sizeof' (3347,57)-(3347,63)
                                              (: '(' (3347,64)-(3347,65)
                                              type_descriptor (3347,65)-(3347,80)
                                                type_qualifier (3347,65)-(3347,70)
                                                  const: 'const' (3347,65)-(3347,70)
                                                primitive_type: 'uint8_t' (3347,71)-(3347,78)
                                                abstract_pointer_declarator (3347,79)-(3347,80)
                                                  *: '*' (3347,79)-(3347,80)
                                              ): ')' (3347,80)-(3347,81)
                                            ): ')' (3347,81)-(3347,82)
                                        ;: ';' (3347,82)-(3347,83)
                                      expression_statement (3348,17)-(3348,59)
                                        assignment_expression (3348,17)-(3348,58)
                                          identifier: 'length' (3348,17)-(3348,23)
                                          =: '=' (3348,24)-(3348,25)
                                          binary_expression (3348,26)-(3348,58)
                                            binary_expression (3348,26)-(3348,31)
                                              number_literal: '2' (3348,26)-(3348,27)
                                              +: '+' (3348,28)-(3348,29)
                                              number_literal: '1' (3348,30)-(3348,31)
                                            +: '+' (3348,32)-(3348,33)
                                            sizeof_expression (3348,34)-(3348,58)
                                              sizeof: 'sizeof' (3348,34)-(3348,40)
                                              (: '(' (3348,41)-(3348,42)
                                              type_descriptor (3348,42)-(3348,57)
                                                type_qualifier (3348,42)-(3348,47)
                                                  const: 'const' (3348,42)-(3348,47)
                                                primitive_type: 'uint8_t' (3348,48)-(3348,55)
                                                abstract_pointer_declarator (3348,56)-(3348,57)
                                                  *: '*' (3348,56)-(3348,57)
                                              ): ')' (3348,57)-(3348,58)
                                        ;: ';' (3348,58)-(3348,59)
                                      }: '}' (3349,15)-(3349,16)
                                }: '}' (3350,13)-(3350,14)
                              else_clause (3351,13)-(3362,14)
                                else: 'else' (3351,13)-(3351,17)
                                compound_statement (3352,13)-(3362,14)
                                  {: '{' (3352,13)-(3352,14)
                                  declaration (3353,15)-(3353,81)
                                    primitive_type: 'int32_t' (3353,15)-(3353,22)
                                    init_declarator (3353,23)-(3353,80)
                                      identifier: 'diff' (3353,23)-(3353,27)
                                      =: '=' (3353,28)-(3353,29)
                                      binary_expression (3353,30)-(3353,80)
                                        parenthesized_expression (3353,30)-(3353,51)
                                          (: '(' (3353,30)-(3353,31)
                                          cast_expression (3353,31)-(3353,50)
                                            (: '(' (3353,31)-(3353,32)
                                            type_descriptor (3353,32)-(3353,39)
                                              primitive_type: 'int32_t' (3353,32)-(3353,39)
                                            ): ')' (3353,39)-(3353,40)
                                            subscript_expression (3353,41)-(3353,50)
                                              identifier: 'data_p' (3353,41)-(3353,47)
                                              [: '[' (3353,47)-(3353,48)
                                              number_literal: '2' (3353,48)-(3353,49)
                                              ]: ']' (3353,49)-(3353,50)
                                          ): ')' (3353,50)-(3353,51)
                                        |: '|' (3353,52)-(3353,53)
                                        binary_expression (3353,54)-(3353,80)
                                          parenthesized_expression (3353,54)-(3353,75)
                                            (: '(' (3353,54)-(3353,55)
                                            cast_expression (3353,55)-(3353,74)
                                              (: '(' (3353,55)-(3353,56)
                                              type_descriptor (3353,56)-(3353,63)
                                                primitive_type: 'int32_t' (3353,56)-(3353,63)
                                              ): ')' (3353,63)-(3353,64)
                                              subscript_expression (3353,65)-(3353,74)
                                                identifier: 'data_p' (3353,65)-(3353,71)
                                                [: '[' (3353,71)-(3353,72)
                                                number_literal: '3' (3353,72)-(3353,73)
                                                ]: ']' (3353,73)-(3353,74)
                                            ): ')' (3353,74)-(3353,75)
                                          <<: '<<' (3353,76)-(3353,78)
                                          number_literal: '8' (3353,79)-(3353,80)
                                    ;: ';' (3353,80)-(3353,81)
                                  if_statement (3355,15)-(3358,16)
                                    if: 'if' (3355,15)-(3355,17)
                                    parenthesized_expression (3355,18)-(3355,37)
                                      (: '(' (3355,18)-(3355,19)
                                      binary_expression (3355,19)-(3355,36)
                                        identifier: 'diff' (3355,19)-(3355,23)
                                        <=: '<=' (3355,24)-(3355,26)
                                        identifier: 'UINT8_MAX' (3355,27)-(3355,36)
                                      ): ')' (3355,36)-(3355,37)
                                    compound_statement (3356,15)-(3358,16)
                                      {: '{' (3356,15)-(3356,16)
                                      expression_statement (3357,17)-(3357,30)
                                        assignment_expression (3357,17)-(3357,29)
                                          identifier: 'diff' (3357,17)-(3357,21)
                                          =: '=' (3357,22)-(3357,23)
                                          unary_expression (3357,24)-(3357,29)
                                            -: '-' (3357,24)-(3357,25)
                                            identifier: 'diff' (3357,25)-(3357,29)
                                        ;: ';' (3357,29)-(3357,30)
                                      }: '}' (3358,15)-(3358,16)
                                  expression_statement (3360,15)-(3360,37)
                                    assignment_expression (3360,15)-(3360,36)
                                      identifier: 'prev_source_p' (3360,15)-(3360,28)
                                      +=: '+=' (3360,29)-(3360,31)
                                      identifier: 'diff' (3360,32)-(3360,36)
                                    ;: ';' (3360,36)-(3360,37)
                                  expression_statement (3361,15)-(3361,30)
                                    assignment_expression (3361,15)-(3361,29)
                                      identifier: 'length' (3361,15)-(3361,21)
                                      =: '=' (3361,22)-(3361,23)
                                      binary_expression (3361,24)-(3361,29)
                                        number_literal: '2' (3361,24)-(3361,25)
                                        +: '+' (3361,26)-(3361,27)
                                        number_literal: '2' (3361,28)-(3361,29)
                                    ;: ';' (3361,29)-(3361,30)
                                  }: '}' (3362,13)-(3362,14)
                            preproc_if (3364,1)-(3370,7)
                              #if: '#if' (3364,1)-(3364,4)
                              call_expression (3364,5)-(3364,27)
                                identifier: 'ENABLED' (3364,5)-(3364,12)
                                argument_list (3364,13)-(3364,27)
                                  (: '(' (3364,13)-(3364,14)
                                  identifier: 'JERRY_ES2015' (3364,14)-(3364,26)
                                  ): ')' (3364,26)-(3364,27)
                              
: '
' (3364,27)-(3365,1)
                              if_statement (3365,13)-(3369,14)
                                if: 'if' (3365,13)-(3365,15)
                                parenthesized_expression (3365,16)-(3365,57)
                                  (: '(' (3365,16)-(3365,17)
                                  binary_expression (3365,17)-(3365,56)
                                    subscript_expression (3365,17)-(3365,26)
                                      identifier: 'data_p' (3365,17)-(3365,23)
                                      [: '[' (3365,23)-(3365,24)
                                      number_literal: '0' (3365,24)-(3365,25)
                                      ]: ']' (3365,25)-(3365,26)
                                    &: '&' (3365,27)-(3365,28)
                                    identifier: 'SCANNER_STREAM_EARLY_CREATE' (3365,29)-(3365,56)
                                  ): ')' (3365,56)-(3365,57)
                                compound_statement (3366,13)-(3369,14)
                                  {: '{' (3366,13)-(3366,14)
                                  expression_statement (3367,15)-(3367,64)
                                    call_expression (3367,15)-(3367,63)
                                      identifier: 'JERRY_ASSERT' (3367,15)-(3367,27)
                                      argument_list (3367,28)-(3367,63)
                                        (: '(' (3367,28)-(3367,29)
                                        binary_expression (3367,29)-(3367,62)
                                          subscript_expression (3367,29)-(3367,38)
                                            identifier: 'data_p' (3367,29)-(3367,35)
                                            [: '[' (3367,35)-(3367,36)
                                            number_literal: '0' (3367,36)-(3367,37)
                                            ]: ']' (3367,37)-(3367,38)
                                          &: '&' (3367,39)-(3367,40)
                                          identifier: 'SCANNER_STREAM_NO_REG' (3367,41)-(3367,62)
                                        ): ')' (3367,62)-(3367,63)
                                    ;: ';' (3367,63)-(3367,64)
                                  expression_statement (3368,15)-(3368,37)
                                    call_expression (3368,15)-(3368,36)
                                      identifier: 'JERRY_DEBUG_MSG' (3368,15)-(3368,30)
                                      argument_list (3368,31)-(3368,36)
                                        (: '(' (3368,31)-(3368,32)
                                        string_literal (3368,32)-(3368,35)
                                          ": '"' (3368,32)-(3368,33)
                                          string_content: '*' (3368,33)-(3368,34)
                                          ": '"' (3368,34)-(3368,35)
                                        ): ')' (3368,35)-(3368,36)
                                    ;: ';' (3368,36)-(3368,37)
                                  }: '}' (3369,13)-(3369,14)
                              #endif: '#endif' (3370,1)-(3370,7)
                            comment: '/* ENABLED (JERRY_ES2015) */' (3370,8)-(3370,36)
                            if_statement (3372,13)-(3375,14)
                              if: 'if' (3372,13)-(3372,15)
                              parenthesized_expression (3372,16)-(3372,51)
                                (: '(' (3372,16)-(3372,17)
                                binary_expression (3372,17)-(3372,50)
                                  subscript_expression (3372,17)-(3372,26)
                                    identifier: 'data_p' (3372,17)-(3372,23)
                                    [: '[' (3372,23)-(3372,24)
                                    number_literal: '0' (3372,24)-(3372,25)
                                    ]: ']' (3372,25)-(3372,26)
                                  &: '&' (3372,27)-(3372,28)
                                  identifier: 'SCANNER_STREAM_NO_REG' (3372,29)-(3372,50)
                                ): ')' (3372,50)-(3372,51)
                              compound_statement (3373,13)-(3375,14)
                                {: '{' (3373,13)-(3373,14)
                                expression_statement (3374,15)-(3374,38)
                                  call_expression (3374,15)-(3374,37)
                                    identifier: 'JERRY_DEBUG_MSG' (3374,15)-(3374,30)
                                    argument_list (3374,31)-(3374,37)
                                      (: '(' (3374,31)-(3374,32)
                                      string_literal (3374,32)-(3374,36)
                                        ": '"' (3374,32)-(3374,33)
                                        string_content: '* ' (3374,33)-(3374,35)
                                        ": '"' (3374,35)-(3374,36)
                                      ): ')' (3374,36)-(3374,37)
                                  ;: ';' (3374,37)-(3374,38)
                                }: '}' (3375,13)-(3375,14)
                            expression_statement (3377,13)-(3377,77)
                              call_expression (3377,13)-(3377,76)
                                identifier: 'JERRY_DEBUG_MSG' (3377,13)-(3377,28)
                                argument_list (3377,29)-(3377,76)
                                  (: '(' (3377,29)-(3377,30)
                                  string_literal (3377,30)-(3377,40)
                                    ": '"' (3377,30)-(3377,31)
                                    string_content: ''%.*s'' (3377,31)-(3377,37)
                                    escape_sequence: '\n' (3377,37)-(3377,39)
                                    ": '"' (3377,39)-(3377,40)
                                  ,: ',' (3377,40)-(3377,41)
                                  subscript_expression (3377,42)-(3377,51)
                                    identifier: 'data_p' (3377,42)-(3377,48)
                                    [: '[' (3377,48)-(3377,49)
                                    number_literal: '1' (3377,49)-(3377,50)
                                    ]: ']' (3377,50)-(3377,51)
                                  ,: ',' (3377,51)-(3377,52)
                                  cast_expression (3377,53)-(3377,75)
                                    (: '(' (3377,53)-(3377,54)
                                    type_descriptor (3377,54)-(3377,60)
                                      primitive_type: 'char' (3377,54)-(3377,58)
                                      abstract_pointer_declarator (3377,59)-(3377,60)
                                        *: '*' (3377,59)-(3377,60)
                                    ): ')' (3377,60)-(3377,61)
                                    identifier: 'prev_source_p' (3377,62)-(3377,75)
                                  ): ')' (3377,75)-(3377,76)
                              ;: ';' (3377,76)-(3377,77)
                            expression_statement (3378,13)-(3378,40)
                              assignment_expression (3378,13)-(3378,39)
                                identifier: 'prev_source_p' (3378,13)-(3378,26)
                                +=: '+=' (3378,27)-(3378,29)
                                subscript_expression (3378,30)-(3378,39)
                                  identifier: 'data_p' (3378,30)-(3378,36)
                                  [: '[' (3378,36)-(3378,37)
                                  number_literal: '1' (3378,37)-(3378,38)
                                  ]: ']' (3378,38)-(3378,39)
                              ;: ';' (3378,39)-(3378,40)
                            expression_statement (3379,13)-(3379,30)
                              assignment_expression (3379,13)-(3379,29)
                                identifier: 'data_p' (3379,13)-(3379,19)
                                +=: '+=' (3379,20)-(3379,22)
                                identifier: 'length' (3379,23)-(3379,29)
                              ;: ';' (3379,29)-(3379,30)
                            }: '}' (3380,11)-(3380,12)
                        break_statement (3381,11)-(3381,17)
                          break: 'break' (3381,11)-(3381,16)
                          ;: ';' (3381,16)-(3381,17)
                        }: '}' (3382,9)-(3382,10)
                    case_statement (3383,9)-(3388,10)
                      case: 'case' (3383,9)-(3383,13)
                      identifier: 'SCANNER_TYPE_WHILE' (3383,14)-(3383,32)
                      :: ':' (3383,32)-(3383,33)
                      compound_statement (3384,9)-(3388,10)
                        {: '{' (3384,9)-(3384,10)
                        expression_statement (3385,11)-(3385,28)
                          assignment_expression (3385,11)-(3385,27)
                            identifier: 'name_p' (3385,11)-(3385,17)
                            =: '=' (3385,18)-(3385,19)
                            string_literal (3385,20)-(3385,27)
                              ": '"' (3385,20)-(3385,21)
                              string_content: 'WHILE' (3385,21)-(3385,26)
                              ": '"' (3385,26)-(3385,27)
                          ;: ';' (3385,27)-(3385,28)
                        expression_statement (3386,11)-(3386,33)
                          assignment_expression (3386,11)-(3386,32)
                            identifier: 'print_location' (3386,11)-(3386,25)
                            =: '=' (3386,26)-(3386,27)
                            true: 'true' (3386,28)-(3386,32)
                          ;: ';' (3386,32)-(3386,33)
                        break_statement (3387,11)-(3387,17)
                          break: 'break' (3387,11)-(3387,16)
                          ;: ';' (3387,16)-(3387,17)
                        }: '}' (3388,9)-(3388,10)
                    case_statement (3389,9)-(3401,10)
                      case: 'case' (3389,9)-(3389,13)
                      identifier: 'SCANNER_TYPE_FOR' (3389,14)-(3389,30)
                      :: ':' (3389,30)-(3389,31)
                      compound_statement (3390,9)-(3401,10)
                        {: '{' (3390,9)-(3390,10)
                        declaration (3391,11)-(3391,74)
                          type_identifier: 'scanner_for_info_t' (3391,11)-(3391,29)
                          init_declarator (3391,30)-(3391,73)
                            pointer_declarator (3391,30)-(3391,41)
                              *: '*' (3391,30)-(3391,31)
                              identifier: 'for_info_p' (3391,31)-(3391,41)
                            =: '=' (3391,42)-(3391,43)
                            cast_expression (3391,44)-(3391,73)
                              (: '(' (3391,44)-(3391,45)
                              type_descriptor (3391,45)-(3391,65)
                                type_identifier: 'scanner_for_info_t' (3391,45)-(3391,63)
                                abstract_pointer_declarator (3391,64)-(3391,65)
                                  *: '*' (3391,64)-(3391,65)
                              ): ')' (3391,65)-(3391,66)
                              identifier: 'info_p' (3391,67)-(3391,73)
                          ;: ';' (3391,73)-(3391,74)
                        expression_statement (3392,11)-(3399,67)
                          call_expression (3392,11)-(3399,66)
                            identifier: 'JERRY_DEBUG_MSG' (3392,11)-(3392,26)
                            argument_list (3392,27)-(3399,66)
                              (: '(' (3392,27)-(3392,28)
                              string_literal (3392,28)-(3392,83)
                                ": '"' (3392,28)-(3392,29)
                                string_content: '  FOR: source:%d expression:%d[%d:%d] end:%d[%d:%d]' (3392,29)-(3392,80)
                                escape_sequence: '\n' (3392,80)-(3392,82)
                                ": '"' (3392,82)-(3392,83)
                              ,: ',' (3392,83)-(3392,84)
                              cast_expression (3393,28)-(3393,78)
                                (: '(' (3393,28)-(3393,29)
                                type_descriptor (3393,29)-(3393,32)
                                  primitive_type: 'int' (3393,29)-(3393,32)
                                ): ')' (3393,32)-(3393,33)
                                parenthesized_expression (3393,34)-(3393,78)
                                  (: '(' (3393,34)-(3393,35)
                                  binary_expression (3393,35)-(3393,77)
                                    field_expression (3393,35)-(3393,60)
                                      field_expression (3393,35)-(3393,51)
                                        identifier: 'for_info_p' (3393,35)-(3393,45)
                                        ->: '->' (3393,45)-(3393,47)
                                        field_identifier: 'info' (3393,47)-(3393,51)
                                      .: '.' (3393,51)-(3393,52)
                                      field_identifier: 'source_p' (3393,52)-(3393,60)
                                    -: '-' (3393,61)-(3393,62)
                                    identifier: 'source_start_p' (3393,63)-(3393,77)
                                  ): ')' (3393,77)-(3393,78)
                              ,: ',' (3393,78)-(3393,79)
                              cast_expression (3394,28)-(3394,93)
                                (: '(' (3394,28)-(3394,29)
                                type_descriptor (3394,29)-(3394,32)
                                  primitive_type: 'int' (3394,29)-(3394,32)
                                ): ')' (3394,32)-(3394,33)
                                parenthesized_expression (3394,34)-(3394,93)
                                  (: '(' (3394,34)-(3394,35)
                                  binary_expression (3394,35)-(3394,92)
                                    field_expression (3394,35)-(3394,75)
                                      field_expression (3394,35)-(3394,66)
                                        identifier: 'for_info_p' (3394,35)-(3394,45)
                                        ->: '->' (3394,45)-(3394,47)
                                        field_identifier: 'expression_location' (3394,47)-(3394,66)
                                      .: '.' (3394,66)-(3394,67)
                                      field_identifier: 'source_p' (3394,67)-(3394,75)
                                    -: '-' (3394,76)-(3394,77)
                                    identifier: 'source_start_p' (3394,78)-(3394,92)
                                  ): ')' (3394,92)-(3394,93)
                              ,: ',' (3394,93)-(3394,94)
                              cast_expression (3395,28)-(3395,70)
                                (: '(' (3395,28)-(3395,29)
                                type_descriptor (3395,29)-(3395,32)
                                  primitive_type: 'int' (3395,29)-(3395,32)
                                ): ')' (3395,32)-(3395,33)
                                field_expression (3395,34)-(3395,70)
                                  field_expression (3395,34)-(3395,65)
                                    identifier: 'for_info_p' (3395,34)-(3395,44)
                                    ->: '->' (3395,44)-(3395,46)
                                    field_identifier: 'expression_location' (3395,46)-(3395,65)
                                  .: '.' (3395,65)-(3395,66)
                                  field_identifier: 'line' (3395,66)-(3395,70)
                              ,: ',' (3395,70)-(3395,71)
                              cast_expression (3396,28)-(3396,72)
                                (: '(' (3396,28)-(3396,29)
                                type_descriptor (3396,29)-(3396,32)
                                  primitive_type: 'int' (3396,29)-(3396,32)
                                ): ')' (3396,32)-(3396,33)
                                field_expression (3396,34)-(3396,72)
                                  field_expression (3396,34)-(3396,65)
                                    identifier: 'for_info_p' (3396,34)-(3396,44)
                                    ->: '->' (3396,44)-(3396,46)
                                    field_identifier: 'expression_location' (3396,46)-(3396,65)
                                  .: '.' (3396,65)-(3396,66)
                                  field_identifier: 'column' (3396,66)-(3396,72)
                              ,: ',' (3396,72)-(3396,73)
                              cast_expression (3397,28)-(3397,86)
                                (: '(' (3397,28)-(3397,29)
                                type_descriptor (3397,29)-(3397,32)
                                  primitive_type: 'int' (3397,29)-(3397,32)
                                ): ')' (3397,32)-(3397,33)
                                parenthesized_expression (3397,34)-(3397,86)
                                  (: '(' (3397,34)-(3397,35)
                                  binary_expression (3397,35)-(3397,85)
                                    field_expression (3397,35)-(3397,68)
                                      field_expression (3397,35)-(3397,59)
                                        identifier: 'for_info_p' (3397,35)-(3397,45)
                                        ->: '->' (3397,45)-(3397,47)
                                        field_identifier: 'end_location' (3397,47)-(3397,59)
                                      .: '.' (3397,59)-(3397,60)
                                      field_identifier: 'source_p' (3397,60)-(3397,68)
                                    -: '-' (3397,69)-(3397,70)
                                    identifier: 'source_start_p' (3397,71)-(3397,85)
                                  ): ')' (3397,85)-(3397,86)
                              ,: ',' (3397,86)-(3397,87)
                              cast_expression (3398,28)-(3398,63)
                                (: '(' (3398,28)-(3398,29)
                                type_descriptor (3398,29)-(3398,32)
                                  primitive_type: 'int' (3398,29)-(3398,32)
                                ): ')' (3398,32)-(3398,33)
                                field_expression (3398,34)-(3398,63)
                                  field_expression (3398,34)-(3398,58)
                                    identifier: 'for_info_p' (3398,34)-(3398,44)
                                    ->: '->' (3398,44)-(3398,46)
                                    field_identifier: 'end_location' (3398,46)-(3398,58)
                                  .: '.' (3398,58)-(3398,59)
                                  field_identifier: 'line' (3398,59)-(3398,63)
                              ,: ',' (3398,63)-(3398,64)
                              cast_expression (3399,28)-(3399,65)
                                (: '(' (3399,28)-(3399,29)
                                type_descriptor (3399,29)-(3399,32)
                                  primitive_type: 'int' (3399,29)-(3399,32)
                                ): ')' (3399,32)-(3399,33)
                                field_expression (3399,34)-(3399,65)
                                  field_expression (3399,34)-(3399,58)
                                    identifier: 'for_info_p' (3399,34)-(3399,44)
                                    ->: '->' (3399,44)-(3399,46)
                                    field_identifier: 'end_location' (3399,46)-(3399,58)
                                  .: '.' (3399,58)-(3399,59)
                                  field_identifier: 'column' (3399,59)-(3399,65)
                              ): ')' (3399,65)-(3399,66)
                          ;: ';' (3399,66)-(3399,67)
                        break_statement (3400,11)-(3400,17)
                          break: 'break' (3400,11)-(3400,16)
                          ;: ';' (3400,16)-(3400,17)
                        }: '}' (3401,9)-(3401,10)
                    case_statement (3402,9)-(3407,10)
                      case: 'case' (3402,9)-(3402,13)
                      identifier: 'SCANNER_TYPE_FOR_IN' (3402,14)-(3402,33)
                      :: ':' (3402,33)-(3402,34)
                      compound_statement (3403,9)-(3407,10)
                        {: '{' (3403,9)-(3403,10)
                        expression_statement (3404,11)-(3404,29)
                          assignment_expression (3404,11)-(3404,28)
                            identifier: 'name_p' (3404,11)-(3404,17)
                            =: '=' (3404,18)-(3404,19)
                            string_literal (3404,20)-(3404,28)
                              ": '"' (3404,20)-(3404,21)
                              string_content: 'FOR-IN' (3404,21)-(3404,27)
                              ": '"' (3404,27)-(3404,28)
                          ;: ';' (3404,28)-(3404,29)
                        expression_statement (3405,11)-(3405,33)
                          assignment_expression (3405,11)-(3405,32)
                            identifier: 'print_location' (3405,11)-(3405,25)
                            =: '=' (3405,26)-(3405,27)
                            true: 'true' (3405,28)-(3405,32)
                          ;: ';' (3405,32)-(3405,33)
                        break_statement (3406,11)-(3406,17)
                          break: 'break' (3406,11)-(3406,16)
                          ;: ';' (3406,16)-(3406,17)
                        }: '}' (3407,9)-(3407,10)
                    preproc_if (3408,1)-(3415,7)
                      #if: '#if' (3408,1)-(3408,4)
                      call_expression (3408,5)-(3408,27)
                        identifier: 'ENABLED' (3408,5)-(3408,12)
                        argument_list (3408,13)-(3408,27)
                          (: '(' (3408,13)-(3408,14)
                          identifier: 'JERRY_ES2015' (3408,14)-(3408,26)
                          ): ')' (3408,26)-(3408,27)
                      
: '
' (3408,27)-(3409,1)
                      case_statement (3409,9)-(3414,10)
                        case: 'case' (3409,9)-(3409,13)
                        identifier: 'SCANNER_TYPE_FOR_OF' (3409,14)-(3409,33)
                        :: ':' (3409,33)-(3409,34)
                        compound_statement (3410,9)-(3414,10)
                          {: '{' (3410,9)-(3410,10)
                          expression_statement (3411,11)-(3411,29)
                            assignment_expression (3411,11)-(3411,28)
                              identifier: 'name_p' (3411,11)-(3411,17)
                              =: '=' (3411,18)-(3411,19)
                              string_literal (3411,20)-(3411,28)
                                ": '"' (3411,20)-(3411,21)
                                string_content: 'FOR-OF' (3411,21)-(3411,27)
                                ": '"' (3411,27)-(3411,28)
                            ;: ';' (3411,28)-(3411,29)
                          expression_statement (3412,11)-(3412,33)
                            assignment_expression (3412,11)-(3412,32)
                              identifier: 'print_location' (3412,11)-(3412,25)
                              =: '=' (3412,26)-(3412,27)
                              true: 'true' (3412,28)-(3412,32)
                            ;: ';' (3412,32)-(3412,33)
                          break_statement (3413,11)-(3413,17)
                            break: 'break' (3413,11)-(3413,16)
                            ;: ';' (3413,16)-(3413,17)
                          }: '}' (3414,9)-(3414,10)
                      #endif: '#endif' (3415,1)-(3415,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (3415,8)-(3415,36)
                    case_statement (3416,9)-(3433,10)
                      case: 'case' (3416,9)-(3416,13)
                      identifier: 'SCANNER_TYPE_SWITCH' (3416,14)-(3416,33)
                      :: ':' (3416,33)-(3416,34)
                      compound_statement (3417,9)-(3433,10)
                        {: '{' (3417,9)-(3417,10)
                        expression_statement (3418,11)-(3419,71)
                          call_expression (3418,11)-(3419,70)
                            identifier: 'JERRY_DEBUG_MSG' (3418,11)-(3418,26)
                            argument_list (3418,27)-(3419,70)
                              (: '(' (3418,27)-(3418,28)
                              string_literal (3418,28)-(3418,51)
                                ": '"' (3418,28)-(3418,29)
                                string_content: '  SWITCH: source:%d' (3418,29)-(3418,48)
                                escape_sequence: '\n' (3418,48)-(3418,50)
                                ": '"' (3418,50)-(3418,51)
                              ,: ',' (3418,51)-(3418,52)
                              cast_expression (3419,28)-(3419,69)
                                (: '(' (3419,28)-(3419,29)
                                type_descriptor (3419,29)-(3419,32)
                                  primitive_type: 'int' (3419,29)-(3419,32)
                                ): ')' (3419,32)-(3419,33)
                                parenthesized_expression (3419,34)-(3419,69)
                                  (: '(' (3419,34)-(3419,35)
                                  binary_expression (3419,35)-(3419,68)
                                    field_expression (3419,35)-(3419,51)
                                      identifier: 'info_p' (3419,35)-(3419,41)
                                      ->: '->' (3419,41)-(3419,43)
                                      field_identifier: 'source_p' (3419,43)-(3419,51)
                                    -: '-' (3419,52)-(3419,53)
                                    identifier: 'source_start_p' (3419,54)-(3419,68)
                                  ): ')' (3419,68)-(3419,69)
                              ): ')' (3419,69)-(3419,70)
                          ;: ';' (3419,70)-(3419,71)
                        declaration (3421,11)-(3421,92)
                          type_identifier: 'scanner_case_info_t' (3421,11)-(3421,30)
                          init_declarator (3421,31)-(3421,91)
                            pointer_declarator (3421,31)-(3421,46)
                              *: '*' (3421,31)-(3421,32)
                              identifier: 'current_case_p' (3421,32)-(3421,46)
                            =: '=' (3421,47)-(3421,48)
                            field_expression (3421,49)-(3421,91)
                              parenthesized_expression (3421,49)-(3421,83)
                                (: '(' (3421,49)-(3421,50)
                                cast_expression (3421,50)-(3421,82)
                                  (: '(' (3421,50)-(3421,51)
                                  type_descriptor (3421,51)-(3421,74)
                                    type_identifier: 'scanner_switch_info_t' (3421,51)-(3421,72)
                                    abstract_pointer_declarator (3421,73)-(3421,74)
                                      *: '*' (3421,73)-(3421,74)
                                  ): ')' (3421,74)-(3421,75)
                                  identifier: 'info_p' (3421,76)-(3421,82)
                                ): ')' (3421,82)-(3421,83)
                              ->: '->' (3421,83)-(3421,85)
                              field_identifier: 'case_p' (3421,85)-(3421,91)
                          ;: ';' (3421,91)-(3421,92)
                        while_statement (3423,11)-(3431,12)
                          while: 'while' (3423,11)-(3423,16)
                          parenthesized_expression (3423,17)-(3423,41)
                            (: '(' (3423,17)-(3423,18)
                            binary_expression (3423,18)-(3423,40)
                              identifier: 'current_case_p' (3423,18)-(3423,32)
                              !=: '!=' (3423,33)-(3423,35)
                              null (3423,36)-(3423,40)
                                NULL: 'NULL' (3423,36)-(3423,40)
                            ): ')' (3423,40)-(3423,41)
                          compound_statement (3424,11)-(3431,12)
                            {: '{' (3424,11)-(3424,12)
                            expression_statement (3425,13)-(3428,69)
                              call_expression (3425,13)-(3428,68)
                                identifier: 'JERRY_DEBUG_MSG' (3425,13)-(3425,28)
                                argument_list (3425,29)-(3428,68)
                                  (: '(' (3425,29)-(3425,30)
                                  string_literal (3425,30)-(3425,62)
                                    ": '"' (3425,30)-(3425,31)
                                    string_content: '    CASE: location:%d[%d:%d]' (3425,31)-(3425,59)
                                    escape_sequence: '\n' (3425,59)-(3425,61)
                                    ": '"' (3425,61)-(3425,62)
                                  ,: ',' (3425,62)-(3425,63)
                                  cast_expression (3426,30)-(3426,88)
                                    (: '(' (3426,30)-(3426,31)
                                    type_descriptor (3426,31)-(3426,34)
                                      primitive_type: 'int' (3426,31)-(3426,34)
                                    ): ')' (3426,34)-(3426,35)
                                    parenthesized_expression (3426,36)-(3426,88)
                                      (: '(' (3426,36)-(3426,37)
                                      binary_expression (3426,37)-(3426,87)
                                        field_expression (3426,37)-(3426,70)
                                          field_expression (3426,37)-(3426,61)
                                            identifier: 'current_case_p' (3426,37)-(3426,51)
                                            ->: '->' (3426,51)-(3426,53)
                                            field_identifier: 'location' (3426,53)-(3426,61)
                                          .: '.' (3426,61)-(3426,62)
                                          field_identifier: 'source_p' (3426,62)-(3426,70)
                                        -: '-' (3426,71)-(3426,72)
                                        identifier: 'source_start_p' (3426,73)-(3426,87)
                                      ): ')' (3426,87)-(3426,88)
                                  ,: ',' (3426,88)-(3426,89)
                                  cast_expression (3427,30)-(3427,65)
                                    (: '(' (3427,30)-(3427,31)
                                    type_descriptor (3427,31)-(3427,34)
                                      primitive_type: 'int' (3427,31)-(3427,34)
                                    ): ')' (3427,34)-(3427,35)
                                    field_expression (3427,36)-(3427,65)
                                      field_expression (3427,36)-(3427,60)
                                        identifier: 'current_case_p' (3427,36)-(3427,50)
                                        ->: '->' (3427,50)-(3427,52)
                                        field_identifier: 'location' (3427,52)-(3427,60)
                                      .: '.' (3427,60)-(3427,61)
                                      field_identifier: 'line' (3427,61)-(3427,65)
                                  ,: ',' (3427,65)-(3427,66)
                                  cast_expression (3428,30)-(3428,67)
                                    (: '(' (3428,30)-(3428,31)
                                    type_descriptor (3428,31)-(3428,34)
                                      primitive_type: 'int' (3428,31)-(3428,34)
                                    ): ')' (3428,34)-(3428,35)
                                    field_expression (3428,36)-(3428,67)
                                      field_expression (3428,36)-(3428,60)
                                        identifier: 'current_case_p' (3428,36)-(3428,50)
                                        ->: '->' (3428,50)-(3428,52)
                                        field_identifier: 'location' (3428,52)-(3428,60)
                                      .: '.' (3428,60)-(3428,61)
                                      field_identifier: 'column' (3428,61)-(3428,67)
                                  ): ')' (3428,67)-(3428,68)
                              ;: ';' (3428,68)-(3428,69)
                            expression_statement (3430,13)-(3430,53)
                              assignment_expression (3430,13)-(3430,52)
                                identifier: 'current_case_p' (3430,13)-(3430,27)
                                =: '=' (3430,28)-(3430,29)
                                field_expression (3430,30)-(3430,52)
                                  identifier: 'current_case_p' (3430,30)-(3430,44)
                                  ->: '->' (3430,44)-(3430,46)
                                  field_identifier: 'next_p' (3430,46)-(3430,52)
                              ;: ';' (3430,52)-(3430,53)
                            }: '}' (3431,11)-(3431,12)
                        break_statement (3432,11)-(3432,17)
                          break: 'break' (3432,11)-(3432,16)
                          ;: ';' (3432,16)-(3432,17)
                        }: '}' (3433,9)-(3433,10)
                    case_statement (3434,9)-(3439,10)
                      case: 'case' (3434,9)-(3434,13)
                      identifier: 'SCANNER_TYPE_CASE' (3434,14)-(3434,31)
                      :: ':' (3434,31)-(3434,32)
                      compound_statement (3435,9)-(3439,10)
                        {: '{' (3435,9)-(3435,10)
                        expression_statement (3436,11)-(3436,27)
                          assignment_expression (3436,11)-(3436,26)
                            identifier: 'name_p' (3436,11)-(3436,17)
                            =: '=' (3436,18)-(3436,19)
                            string_literal (3436,20)-(3436,26)
                              ": '"' (3436,20)-(3436,21)
                              string_content: 'CASE' (3436,21)-(3436,25)
                              ": '"' (3436,25)-(3436,26)
                          ;: ';' (3436,26)-(3436,27)
                        expression_statement (3437,11)-(3437,33)
                          assignment_expression (3437,11)-(3437,32)
                            identifier: 'print_location' (3437,11)-(3437,25)
                            =: '=' (3437,26)-(3437,27)
                            true: 'true' (3437,28)-(3437,32)
                          ;: ';' (3437,32)-(3437,33)
                        break_statement (3438,11)-(3438,17)
                          break: 'break' (3438,11)-(3438,16)
                          ;: ';' (3438,16)-(3438,17)
                        }: '}' (3439,9)-(3439,10)
                    preproc_if (3440,1)-(3472,7)
                      #if: '#if' (3440,1)-(3440,4)
                      call_expression (3440,5)-(3440,27)
                        identifier: 'ENABLED' (3440,5)-(3440,12)
                        argument_list (3440,13)-(3440,27)
                          (: '(' (3440,13)-(3440,14)
                          identifier: 'JERRY_ES2015' (3440,14)-(3440,26)
                          ): ')' (3440,26)-(3440,27)
                      
: '
' (3440,27)-(3441,1)
                      case_statement (3441,9)-(3446,10)
                        case: 'case' (3441,9)-(3441,13)
                        identifier: 'SCANNER_TYPE_INITIALIZER' (3441,14)-(3441,38)
                        :: ':' (3441,38)-(3441,39)
                        compound_statement (3442,9)-(3446,10)
                          {: '{' (3442,9)-(3442,10)
                          expression_statement (3443,11)-(3443,34)
                            assignment_expression (3443,11)-(3443,33)
                              identifier: 'name_p' (3443,11)-(3443,17)
                              =: '=' (3443,18)-(3443,19)
                              string_literal (3443,20)-(3443,33)
                                ": '"' (3443,20)-(3443,21)
                                string_content: 'INITIALIZER' (3443,21)-(3443,32)
                                ": '"' (3443,32)-(3443,33)
                            ;: ';' (3443,33)-(3443,34)
                          expression_statement (3444,11)-(3444,33)
                            assignment_expression (3444,11)-(3444,32)
                              identifier: 'print_location' (3444,11)-(3444,25)
                              =: '=' (3444,26)-(3444,27)
                              true: 'true' (3444,28)-(3444,32)
                            ;: ';' (3444,32)-(3444,33)
                          break_statement (3445,11)-(3445,17)
                            break: 'break' (3445,11)-(3445,16)
                            ;: ';' (3445,16)-(3445,17)
                          }: '}' (3446,9)-(3446,10)
                      case_statement (3447,9)-(3453,10)
                        case: 'case' (3447,9)-(3447,13)
                        identifier: 'SCANNER_TYPE_CLASS_CONSTRUCTOR' (3447,14)-(3447,44)
                        :: ':' (3447,44)-(3447,45)
                        compound_statement (3448,9)-(3453,10)
                          {: '{' (3448,9)-(3448,10)
                          expression_statement (3449,11)-(3450,71)
                            call_expression (3449,11)-(3450,70)
                              identifier: 'JERRY_DEBUG_MSG' (3449,11)-(3449,26)
                              argument_list (3449,27)-(3450,70)
                                (: '(' (3449,27)-(3449,28)
                                string_literal (3449,28)-(3449,62)
                                  ": '"' (3449,28)-(3449,29)
                                  string_content: '  CLASS-CONSTRUCTOR: source:%d' (3449,29)-(3449,59)
                                  escape_sequence: '\n' (3449,59)-(3449,61)
                                  ": '"' (3449,61)-(3449,62)
                                ,: ',' (3449,62)-(3449,63)
                                cast_expression (3450,28)-(3450,69)
                                  (: '(' (3450,28)-(3450,29)
                                  type_descriptor (3450,29)-(3450,32)
                                    primitive_type: 'int' (3450,29)-(3450,32)
                                  ): ')' (3450,32)-(3450,33)
                                  parenthesized_expression (3450,34)-(3450,69)
                                    (: '(' (3450,34)-(3450,35)
                                    binary_expression (3450,35)-(3450,68)
                                      field_expression (3450,35)-(3450,51)
                                        identifier: 'info_p' (3450,35)-(3450,41)
                                        ->: '->' (3450,41)-(3450,43)
                                        field_identifier: 'source_p' (3450,43)-(3450,51)
                                      -: '-' (3450,52)-(3450,53)
                                      identifier: 'source_start_p' (3450,54)-(3450,68)
                                    ): ')' (3450,68)-(3450,69)
                                ): ')' (3450,69)-(3450,70)
                            ;: ';' (3450,70)-(3450,71)
                          expression_statement (3451,11)-(3451,34)
                            assignment_expression (3451,11)-(3451,33)
                              identifier: 'print_location' (3451,11)-(3451,25)
                              =: '=' (3451,26)-(3451,27)
                              false: 'false' (3451,28)-(3451,33)
                            ;: ';' (3451,33)-(3451,34)
                          break_statement (3452,11)-(3452,17)
                            break: 'break' (3452,11)-(3452,16)
                            ;: ';' (3452,16)-(3452,17)
                          }: '}' (3453,9)-(3453,10)
                      case_statement (3454,9)-(3459,10)
                        case: 'case' (3454,9)-(3454,13)
                        identifier: 'SCANNER_TYPE_LET_EXPRESSION' (3454,14)-(3454,41)
                        :: ':' (3454,41)-(3454,42)
                        compound_statement (3455,9)-(3459,10)
                          {: '{' (3455,9)-(3455,10)
                          expression_statement (3456,11)-(3457,71)
                            call_expression (3456,11)-(3457,70)
                              identifier: 'JERRY_DEBUG_MSG' (3456,11)-(3456,26)
                              argument_list (3456,27)-(3457,70)
                                (: '(' (3456,27)-(3456,28)
                                string_literal (3456,28)-(3456,59)
                                  ": '"' (3456,28)-(3456,29)
                                  string_content: '  LET_EXPRESSION: source:%d' (3456,29)-(3456,56)
                                  escape_sequence: '\n' (3456,56)-(3456,58)
                                  ": '"' (3456,58)-(3456,59)
                                ,: ',' (3456,59)-(3456,60)
                                cast_expression (3457,28)-(3457,69)
                                  (: '(' (3457,28)-(3457,29)
                                  type_descriptor (3457,29)-(3457,32)
                                    primitive_type: 'int' (3457,29)-(3457,32)
                                  ): ')' (3457,32)-(3457,33)
                                  parenthesized_expression (3457,34)-(3457,69)
                                    (: '(' (3457,34)-(3457,35)
                                    binary_expression (3457,35)-(3457,68)
                                      field_expression (3457,35)-(3457,51)
                                        identifier: 'info_p' (3457,35)-(3457,41)
                                        ->: '->' (3457,41)-(3457,43)
                                        field_identifier: 'source_p' (3457,43)-(3457,51)
                                      -: '-' (3457,52)-(3457,53)
                                      identifier: 'source_start_p' (3457,54)-(3457,68)
                                    ): ')' (3457,68)-(3457,69)
                                ): ')' (3457,69)-(3457,70)
                            ;: ';' (3457,70)-(3457,71)
                          break_statement (3458,11)-(3458,17)
                            break: 'break' (3458,11)-(3458,16)
                            ;: ';' (3458,16)-(3458,17)
                          }: '}' (3459,9)-(3459,10)
                      case_statement (3460,9)-(3465,10)
                        case: 'case' (3460,9)-(3460,13)
                        identifier: 'SCANNER_TYPE_ERR_REDECLARED' (3460,14)-(3460,41)
                        :: ':' (3460,41)-(3460,42)
                        compound_statement (3461,9)-(3465,10)
                          {: '{' (3461,9)-(3461,10)
                          expression_statement (3462,11)-(3463,71)
                            call_expression (3462,11)-(3463,70)
                              identifier: 'JERRY_DEBUG_MSG' (3462,11)-(3462,26)
                              argument_list (3462,27)-(3463,70)
                                (: '(' (3462,27)-(3462,28)
                                string_literal (3462,28)-(3462,59)
                                  ": '"' (3462,28)-(3462,29)
                                  string_content: '  ERR_REDECLARED: source:%d' (3462,29)-(3462,56)
                                  escape_sequence: '\n' (3462,56)-(3462,58)
                                  ": '"' (3462,58)-(3462,59)
                                ,: ',' (3462,59)-(3462,60)
                                cast_expression (3463,28)-(3463,69)
                                  (: '(' (3463,28)-(3463,29)
                                  type_descriptor (3463,29)-(3463,32)
                                    primitive_type: 'int' (3463,29)-(3463,32)
                                  ): ')' (3463,32)-(3463,33)
                                  parenthesized_expression (3463,34)-(3463,69)
                                    (: '(' (3463,34)-(3463,35)
                                    binary_expression (3463,35)-(3463,68)
                                      field_expression (3463,35)-(3463,51)
                                        identifier: 'info_p' (3463,35)-(3463,41)
                                        ->: '->' (3463,41)-(3463,43)
                                        field_identifier: 'source_p' (3463,43)-(3463,51)
                                      -: '-' (3463,52)-(3463,53)
                                      identifier: 'source_start_p' (3463,54)-(3463,68)
                                    ): ')' (3463,68)-(3463,69)
                                ): ')' (3463,69)-(3463,70)
                            ;: ';' (3463,70)-(3463,71)
                          break_statement (3464,11)-(3464,17)
                            break: 'break' (3464,11)-(3464,16)
                            ;: ';' (3464,16)-(3464,17)
                          }: '}' (3465,9)-(3465,10)
                      case_statement (3466,9)-(3471,10)
                        case: 'case' (3466,9)-(3466,13)
                        identifier: 'SCANNER_TYPE_ERR_ASYNC_FUNCTION' (3466,14)-(3466,45)
                        :: ':' (3466,45)-(3466,46)
                        compound_statement (3467,9)-(3471,10)
                          {: '{' (3467,9)-(3467,10)
                          expression_statement (3468,11)-(3469,71)
                            call_expression (3468,11)-(3469,70)
                              identifier: 'JERRY_DEBUG_MSG' (3468,11)-(3468,26)
                              argument_list (3468,27)-(3469,70)
                                (: '(' (3468,27)-(3468,28)
                                string_literal (3468,28)-(3468,63)
                                  ": '"' (3468,28)-(3468,29)
                                  string_content: '  ERR_ASYNC_FUNCTION: source:%d' (3468,29)-(3468,60)
                                  escape_sequence: '\n' (3468,60)-(3468,62)
                                  ": '"' (3468,62)-(3468,63)
                                ,: ',' (3468,63)-(3468,64)
                                cast_expression (3469,28)-(3469,69)
                                  (: '(' (3469,28)-(3469,29)
                                  type_descriptor (3469,29)-(3469,32)
                                    primitive_type: 'int' (3469,29)-(3469,32)
                                  ): ')' (3469,32)-(3469,33)
                                  parenthesized_expression (3469,34)-(3469,69)
                                    (: '(' (3469,34)-(3469,35)
                                    binary_expression (3469,35)-(3469,68)
                                      field_expression (3469,35)-(3469,51)
                                        identifier: 'info_p' (3469,35)-(3469,41)
                                        ->: '->' (3469,41)-(3469,43)
                                        field_identifier: 'source_p' (3469,43)-(3469,51)
                                      -: '-' (3469,52)-(3469,53)
                                      identifier: 'source_start_p' (3469,54)-(3469,68)
                                    ): ')' (3469,68)-(3469,69)
                                ): ')' (3469,69)-(3469,70)
                            ;: ';' (3469,70)-(3469,71)
                          break_statement (3470,11)-(3470,17)
                            break: 'break' (3470,11)-(3470,16)
                            ;: ';' (3470,16)-(3470,17)
                          }: '}' (3471,9)-(3471,10)
                      #endif: '#endif' (3472,1)-(3472,7)
                    comment: '/* ENABLED (JERRY_ES2015) */' (3472,8)-(3472,36)
                    }: '}' (3473,7)-(3473,8)
                if_statement (3475,7)-(3484,8)
                  if: 'if' (3475,7)-(3475,9)
                  parenthesized_expression (3475,10)-(3475,26)
                    (: '(' (3475,10)-(3475,11)
                    identifier: 'print_location' (3475,11)-(3475,25)
                    ): ')' (3475,25)-(3475,26)
                  compound_statement (3476,7)-(3484,8)
                    {: '{' (3476,7)-(3476,8)
                    declaration (3477,9)-(3477,87)
                      type_identifier: 'scanner_location_info_t' (3477,9)-(3477,32)
                      init_declarator (3477,33)-(3477,86)
                        pointer_declarator (3477,33)-(3477,49)
                          *: '*' (3477,33)-(3477,34)
                          identifier: 'location_info_p' (3477,34)-(3477,49)
                        =: '=' (3477,50)-(3477,51)
                        cast_expression (3477,52)-(3477,86)
                          (: '(' (3477,52)-(3477,53)
                          type_descriptor (3477,53)-(3477,78)
                            type_identifier: 'scanner_location_info_t' (3477,53)-(3477,76)
                            abstract_pointer_declarator (3477,77)-(3477,78)
                              *: '*' (3477,77)-(3477,78)
                          ): ')' (3477,78)-(3477,79)
                          identifier: 'info_p' (3477,80)-(3477,86)
                      ;: ';' (3477,86)-(3477,87)
                    expression_statement (3478,9)-(3483,66)
                      call_expression (3478,9)-(3483,65)
                        identifier: 'JERRY_DEBUG_MSG' (3478,9)-(3478,24)
                        argument_list (3478,25)-(3483,65)
                          (: '(' (3478,25)-(3478,26)
                          string_literal (3478,26)-(3478,64)
                            ": '"' (3478,26)-(3478,27)
                            string_content: '  %s: source:%d location:%d[%d:%d]' (3478,27)-(3478,61)
                            escape_sequence: '\n' (3478,61)-(3478,63)
                            ": '"' (3478,63)-(3478,64)
                          ,: ',' (3478,64)-(3478,65)
                          identifier: 'name_p' (3479,26)-(3479,32)
                          ,: ',' (3479,32)-(3479,33)
                          cast_expression (3480,26)-(3480,81)
                            (: '(' (3480,26)-(3480,27)
                            type_descriptor (3480,27)-(3480,30)
                              primitive_type: 'int' (3480,27)-(3480,30)
                            ): ')' (3480,30)-(3480,31)
                            parenthesized_expression (3480,32)-(3480,81)
                              (: '(' (3480,32)-(3480,33)
                              binary_expression (3480,33)-(3480,80)
                                field_expression (3480,33)-(3480,63)
                                  field_expression (3480,33)-(3480,54)
                                    identifier: 'location_info_p' (3480,33)-(3480,48)
                                    ->: '->' (3480,48)-(3480,50)
                                    field_identifier: 'info' (3480,50)-(3480,54)
                                  .: '.' (3480,54)-(3480,55)
                                  field_identifier: 'source_p' (3480,55)-(3480,63)
                                -: '-' (3480,64)-(3480,65)
                                identifier: 'source_start_p' (3480,66)-(3480,80)
                              ): ')' (3480,80)-(3480,81)
                          ,: ',' (3480,81)-(3480,82)
                          cast_expression (3481,26)-(3481,85)
                            (: '(' (3481,26)-(3481,27)
                            type_descriptor (3481,27)-(3481,30)
                              primitive_type: 'int' (3481,27)-(3481,30)
                            ): ')' (3481,30)-(3481,31)
                            parenthesized_expression (3481,32)-(3481,85)
                              (: '(' (3481,32)-(3481,33)
                              binary_expression (3481,33)-(3481,84)
                                field_expression (3481,33)-(3481,67)
                                  field_expression (3481,33)-(3481,58)
                                    identifier: 'location_info_p' (3481,33)-(3481,48)
                                    ->: '->' (3481,48)-(3481,50)
                                    field_identifier: 'location' (3481,50)-(3481,58)
                                  .: '.' (3481,58)-(3481,59)
                                  field_identifier: 'source_p' (3481,59)-(3481,67)
                                -: '-' (3481,68)-(3481,69)
                                identifier: 'source_start_p' (3481,70)-(3481,84)
                              ): ')' (3481,84)-(3481,85)
                          ,: ',' (3481,85)-(3481,86)
                          cast_expression (3482,26)-(3482,62)
                            (: '(' (3482,26)-(3482,27)
                            type_descriptor (3482,27)-(3482,30)
                              primitive_type: 'int' (3482,27)-(3482,30)
                            ): ')' (3482,30)-(3482,31)
                            field_expression (3482,32)-(3482,62)
                              field_expression (3482,32)-(3482,57)
                                identifier: 'location_info_p' (3482,32)-(3482,47)
                                ->: '->' (3482,47)-(3482,49)
                                field_identifier: 'location' (3482,49)-(3482,57)
                              .: '.' (3482,57)-(3482,58)
                              field_identifier: 'line' (3482,58)-(3482,62)
                          ,: ',' (3482,62)-(3482,63)
                          cast_expression (3483,26)-(3483,64)
                            (: '(' (3483,26)-(3483,27)
                            type_descriptor (3483,27)-(3483,30)
                              primitive_type: 'int' (3483,27)-(3483,30)
                            ): ')' (3483,30)-(3483,31)
                            field_expression (3483,32)-(3483,64)
                              field_expression (3483,32)-(3483,57)
                                identifier: 'location_info_p' (3483,32)-(3483,47)
                                ->: '->' (3483,47)-(3483,49)
                                field_identifier: 'location' (3483,49)-(3483,57)
                              .: '.' (3483,57)-(3483,58)
                              field_identifier: 'column' (3483,58)-(3483,64)
                          ): ')' (3483,64)-(3483,65)
                      ;: ';' (3483,65)-(3483,66)
                    }: '}' (3484,7)-(3484,8)
                expression_statement (3486,7)-(3486,31)
                  assignment_expression (3486,7)-(3486,30)
                    identifier: 'info_p' (3486,7)-(3486,13)
                    =: '=' (3486,14)-(3486,15)
                    field_expression (3486,16)-(3486,30)
                      identifier: 'info_p' (3486,16)-(3486,22)
                      ->: '->' (3486,22)-(3486,24)
                      field_identifier: 'next_p' (3486,24)-(3486,30)
                  ;: ';' (3486,30)-(3486,31)
                }: '}' (3487,5)-(3487,6)
            expression_statement (3489,5)-(3489,52)
              call_expression (3489,5)-(3489,51)
                identifier: 'JERRY_DEBUG_MSG' (3489,5)-(3489,20)
                argument_list (3489,21)-(3489,51)
                  (: '(' (3489,21)-(3489,22)
                  string_literal (3489,22)-(3489,50)
                    ": '"' (3489,22)-(3489,23)
                    escape_sequence: '\n' (3489,23)-(3489,25)
                    string_content: '--- Scanning end ---' (3489,25)-(3489,45)
                    escape_sequence: '\n' (3489,45)-(3489,47)
                    escape_sequence: '\n' (3489,47)-(3489,49)
                    ": '"' (3489,49)-(3489,50)
                  ): ')' (3489,50)-(3489,51)
              ;: ';' (3489,51)-(3489,52)
            }: '}' (3490,3)-(3490,4)
        #endif: '#endif' (3491,1)-(3491,7)
      comment: '/* ENABLED (JERRY_PARSER_DUMP_BYTE_CODE) */' (3491,8)-(3491,51)
      expression_statement (3493,3)-(3493,33)
        call_expression (3493,3)-(3493,32)
          identifier: 'parser_stack_free' (3493,3)-(3493,20)
          argument_list (3493,21)-(3493,32)
            (: '(' (3493,21)-(3493,22)
            identifier: 'context_p' (3493,22)-(3493,31)
            ): ')' (3493,31)-(3493,32)
        ;: ';' (3493,32)-(3493,33)
      }: '}' (3494,1)-(3494,2)
    comment: '/* scanner_scan_all */' (3494,3)-(3494,25)
    comment: '/**
 * @}
 * @}
 * @}
 */' (3496,1)-(3500,4)
    preproc_call (3502,1)-(3503,1)
      preproc_directive: '#endif' (3502,1)-(3502,7)
      comment: '/* ENABLED (JERRY_PARSER) */' (3502,8)-(3502,36)
