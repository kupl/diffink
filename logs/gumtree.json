{
  "matches": [
    {
      "src": "identifier: outputLength [175575,175587]",
      "dest": "identifier: outputLength [177069,177081]"
    },
    {
      "src": "identifier: add [123821,123824]",
      "dest": "identifier: add [125315,125318]"
    },
    {
      "src": "block [123966,124086]",
      "dest": "block [125460,125580]"
    },
    {
      "src": "null_literal: null [91599,91603]",
      "dest": "null_literal: null [93093,93097]"
    },
    {
      "src": "identifier: c [124004,124005]",
      "dest": "identifier: c [125498,125499]"
    },
    {
      "src": "null_literal: null [181414,181418]",
      "dest": "null_literal: null [182908,182912]"
    },
    {
      "src": "affectation_operator: = [123280,123281]",
      "dest": "affectation_operator: = [124774,124775]"
    },
    {
      "src": "identifier: pads [185536,185540]",
      "dest": "identifier: pads [187030,187034]"
    },
    {
      "src": "affectation_operator: = [134505,134506]",
      "dest": "affectation_operator: = [135999,136000]"
    },
    {
      "src": "binary_expression [180052,180071]",
      "dest": "binary_expression [181546,181565]"
    },
    {
      "src": "identifier: length [49517,49523]",
      "dest": "identifier: length [49517,49523]"
    },
    {
      "src": "variable_declarator [184004,184030]",
      "dest": "variable_declarator [185498,185524]"
    },
    {
      "src": "parenthesized_expression [219737,219779]",
      "dest": "parenthesized_expression [221231,221273]"
    },
    {
      "src": "identifier: ret [71948,71951]",
      "dest": "identifier: ret [73442,73445]"
    },
    {
      "src": "identifier: str [80078,80081]",
      "dest": "identifier: str [81572,81575]"
    },
    {
      "src": "type: CharSequence [211174,211186]",
      "dest": "type: CharSequence [212668,212680]"
    },
    {
      "src": "local_variable_declaration [158554,158591]",
      "dest": "local_variable_declaration [160048,160085]"
    },
    {
      "src": "identifier: buf [131558,131561]",
      "dest": "identifier: buf [133052,133055]"
    },
    {
      "src": "argument_list [132915,132917]",
      "dest": "argument_list [134409,134411]"
    },
    {
      "src": "logical_operator: || [158201,158203]",
      "dest": "logical_operator: || [159695,159697]"
    },
    {
      "src": "true: true [241284,241288]",
      "dest": "true: true [242778,242782]"
    },
    {
      "src": "parenthesized_expression [130759,130774]",
      "dest": "parenthesized_expression [132253,132268]"
    },
    {
      "src": "identifier: trimToNull [11637,11647]",
      "dest": "identifier: trimToNull [11637,11647]"
    },
    {
      "src": "false: false [241329,241334]",
      "dest": "false: false [242823,242828]"
    },
    {
      "src": "identifier: isLowerCase [198666,198677]",
      "dest": "identifier: isLowerCase [200160,200171]"
    },
    {
      "src": "formal_parameter [15808,15818]",
      "dest": "formal_parameter [15808,15818]"
    },
    {
      "src": "arithmetic_operator: - [180057,180058]",
      "dest": "arithmetic_operator: - [181551,181552]"
    },
    {
      "src": "variable_declarator [182092,182123]",
      "dest": "variable_declarator [183586,183617]"
    },
    {
      "src": "identifier: isEmpty [62338,62345]",
      "dest": "identifier: isEmpty [63077,63084]"
    },
    {
      "src": "increment_operator: -- [150579,150581]",
      "dest": "increment_operator: -- [152073,152075]"
    },
    {
      "src": "identifier: end [89360,89363]",
      "dest": "identifier: end [90854,90857]"
    },
    {
      "src": "identifier: padStr [181500,181506]",
      "dest": "identifier: padStr [182994,183000]"
    },
    {
      "src": "arithmetic_operator: + [86640,86641]",
      "dest": "arithmetic_operator: + [88134,88135]"
    },
    {
      "src": "if_statement [89312,89540]",
      "dest": "if_statement [90806,91034]"
    },
    {
      "src": "identifier: str [104761,104764]",
      "dest": "identifier: str [106255,106258]"
    },
    {
      "src": "parenthesized_expression [183941,183954]",
      "dest": "parenthesized_expression [185435,185448]"
    },
    {
      "src": "formal_parameter [47756,47766]",
      "dest": "formal_parameter [47756,47766]"
    },
    {
      "src": "formal_parameter [144537,144547]",
      "dest": "formal_parameter [146031,146041]"
    },
    {
      "src": "identifier: searchString [147156,147168]",
      "dest": "identifier: searchString [148650,148662]"
    },
    {
      "src": "argument_list [77490,77498]",
      "dest": "argument_list [78984,78992]"
    },
    {
      "src": "type: char[] [63768,63774]",
      "dest": "type: char[] [64815,64821]"
    },
    {
      "src": "type: CharSequence [66423,66435]",
      "dest": "type: CharSequence [67470,67482]"
    },
    {
      "src": "identifier: valid [64106,64111]",
      "dest": "identifier: valid [65153,65158]"
    },
    {
      "src": "binary_expression [158474,158503]",
      "dest": "binary_expression [159968,159997]"
    },
    {
      "src": "parenthesized_expression [163664,163677]",
      "dest": "parenthesized_expression [165158,165171]"
    },
    {
      "src": "expression_statement [222447,222488]",
      "dest": "expression_statement [223941,223982]"
    },
    {
      "src": "null_literal: null [20296,20300]",
      "dest": "null_literal: null [20296,20300]"
    },
    {
      "src": "return_statement [59583,59596]",
      "dest": "return_statement [59970,59983]"
    },
    {
      "src": "arithmetic_operator: - [162571,162572]",
      "dest": "arithmetic_operator: - [164065,164066]"
    },
    {
      "src": "method_invocation [131619,131633]",
      "dest": "method_invocation [133113,133127]"
    },
    {
      "src": "assignment_expression [236241,236298]",
      "dest": "assignment_expression [237735,237792]"
    },
    {
      "src": "parenthesized_expression [110472,110485]",
      "dest": "parenthesized_expression [111966,111979]"
    },
    {
      "src": "identifier: str [50947,50950]",
      "dest": "identifier: str [50947,50950]"
    },
    {
      "src": "identifier: lastIndex [36082,36091]",
      "dest": "identifier: lastIndex [36082,36091]"
    },
    {
      "src": "identifier: stripAll [21645,21653]",
      "dest": "identifier: stripAll [21645,21653]"
    },
    {
      "src": "identifier: t_j [236119,236122]",
      "dest": "identifier: t_j [237613,237616]"
    },
    {
      "src": "method_invocation [17241,17266]",
      "dest": "method_invocation [17241,17266]"
    },
    {
      "src": "comparison_operator: <= [184049,184051]",
      "dest": "comparison_operator: <= [185543,185545]"
    },
    {
      "src": "argument_list [143466,143468]",
      "dest": "argument_list [144960,144962]"
    },
    {
      "src": "argument_list [78636,78638]",
      "dest": "argument_list [80130,80132]"
    },
    {
      "src": "decimal_integer_literal: 0 [185915,185916]",
      "dest": "decimal_integer_literal: 0 [187409,187410]"
    },
    {
      "src": "identifier: i [70011,70012]",
      "dest": "identifier: i [71505,71506]"
    },
    {
      "src": "type: String [212938,212944]",
      "dest": "type: String [214432,214438]"
    },
    {
      "src": "assignment_expression [219693,219714]",
      "dest": "assignment_expression [221187,221208]"
    },
    {
      "src": "method_declaration [73398,73857]",
      "dest": "method_declaration [74892,75351]"
    },
    {
      "src": "update_expression [175024,175027]",
      "dest": "update_expression [176518,176521]"
    },
    {
      "src": "variable_declarator [235408,235415]",
      "dest": "variable_declarator [236902,236909]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [171991,172064]",
      "dest": "line_comment: //----------------------------------------------------------------------- [173485,173558]"
    },
    {
      "src": "false: false [51931,51936]",
      "dest": "false: false [51931,51936]"
    },
    {
      "src": "method_invocation [161109,161123]",
      "dest": "method_invocation [162603,162617]"
    },
    {
      "src": "identifier: separatorChars [95179,95193]",
      "dest": "identifier: separatorChars [96673,96687]"
    },
    {
      "src": "affectation_operator: = [219801,219802]",
      "dest": "affectation_operator: = [221295,221296]"
    },
    {
      "src": "argument_list [173390,173406]",
      "dest": "argument_list [174884,174900]"
    },
    {
      "src": "method_declaration [132277,133123]",
      "dest": "method_declaration [133771,134617]"
    },
    {
      "src": "identifier: substringBetween [89112,89128]",
      "dest": "identifier: substringBetween [90606,90622]"
    },
    {
      "src": "update_expression [23200,23203]",
      "dest": "update_expression [23200,23203]"
    },
    {
      "src": "parenthesized_expression [185569,185580]",
      "dest": "parenthesized_expression [187063,187074]"
    },
    {
      "src": "identifier: str [45127,45130]",
      "dest": "identifier: str [45127,45130]"
    },
    {
      "src": "visibility: public [122012,122018]",
      "dest": "visibility: public [123506,123512]"
    },
    {
      "src": "type: int [179945,179948]",
      "dest": "type: int [181439,181442]"
    },
    {
      "src": "type: int [231195,231198]",
      "dest": "type: int [232689,232692]"
    },
    {
      "src": "argument_list [17140,17145]",
      "dest": "argument_list [17140,17145]"
    },
    {
      "src": "null_literal: null [227175,227179]",
      "dest": "null_literal: null [228669,228673]"
    },
    {
      "src": "if_statement [73584,73682]",
      "dest": "if_statement [75078,75176]"
    },
    {
      "src": "identifier: searchList [155277,155287]",
      "dest": "identifier: searchList [156771,156781]"
    },
    {
      "src": "type: String[] [23124,23132]",
      "dest": "type: String[] [23124,23132]"
    },
    {
      "src": "argument_list [116783,116785]",
      "dest": "argument_list [118277,118279]"
    },
    {
      "src": "identifier: str [73466,73469]",
      "dest": "identifier: str [74960,74963]"
    },
    {
      "src": "object_creation_expression [26362,26462]",
      "dest": "object_creation_expression [26362,26462]"
    },
    {
      "src": "static: static [239716,239722]",
      "dest": "static: static [241210,241216]"
    },
    {
      "src": "identifier: str [191879,191882]",
      "dest": "identifier: str [193373,193376]"
    },
    {
      "src": "argument_list [198239,198241]",
      "dest": "argument_list [199733,199735]"
    },
    {
      "src": "identifier: substring [222380,222389]",
      "dest": "identifier: substring [223874,223883]"
    },
    {
      "src": "parenthesized_expression [204420,204470]",
      "dest": "parenthesized_expression [205914,205964]"
    },
    {
      "src": "identifier: sz [200933,200935]",
      "dest": "identifier: sz [202427,202429]"
    },
    {
      "src": "identifier: str [33608,33611]",
      "dest": "identifier: str [33608,33611]"
    },
    {
      "src": "affectation_operator: = [118083,118084]",
      "dest": "affectation_operator: = [119577,119578]"
    },
    {
      "src": "visibility: public [203053,203059]",
      "dest": "visibility: public [204547,204553]"
    },
    {
      "src": "affectation_operator: = [159215,159216]",
      "dest": "affectation_operator: = [160709,160710]"
    },
    {
      "src": "identifier: append [198766,198772]",
      "dest": "identifier: append [200260,200266]"
    },
    {
      "src": "local_variable_declaration [209233,209243]",
      "dest": "local_variable_declaration [210727,210737]"
    },
    {
      "src": "variable_declarator [145623,145648]",
      "dest": "variable_declarator [147117,147142]"
    },
    {
      "src": "comparison_operator: == [150066,150068]",
      "dest": "comparison_operator: == [151560,151562]"
    },
    {
      "src": "modifiers [143222,143235]",
      "dest": "modifiers [144716,144729]"
    },
    {
      "src": "false: false [8924,8929]",
      "dest": "false: false [8924,8929]"
    },
    {
      "src": "expression_statement [198420,198439]",
      "dest": "expression_statement [199914,199933]"
    },
    {
      "src": "identifier: iterator [132981,132989]",
      "dest": "identifier: iterator [134475,134483]"
    },
    {
      "src": "comparison_operator: == [236117,236119]",
      "dest": "comparison_operator: == [237611,237613]"
    },
    {
      "src": "identifier: toString [128107,128115]",
      "dest": "identifier: toString [129601,129609]"
    },
    {
      "src": "decimal_integer_literal: 0 [39520,39521]",
      "dest": "decimal_integer_literal: 0 [39520,39521]"
    },
    {
      "src": "identifier: length [75843,75849]",
      "dest": "identifier: length [77337,77343]"
    },
    {
      "src": "type: char [174893,174897]",
      "dest": "type: char [176387,176391]"
    },
    {
      "src": "identifier: size [179084,179088]",
      "dest": "identifier: size [180578,180582]"
    },
    {
      "src": "if_statement [117982,118117]",
      "dest": "if_statement [119476,119611]"
    },
    {
      "src": "identifier: Math [236257,236261]",
      "dest": "identifier: Math [237751,237755]"
    },
    {
      "src": "identifier: offset [220229,220235]",
      "dest": "identifier: offset [221723,221729]"
    },
    {
      "src": "type: String [133760,133766]",
      "dest": "type: String [135254,135260]"
    },
    {
      "src": "identifier: start [91492,91497]",
      "dest": "identifier: start [92986,92991]"
    },
    {
      "src": "identifier: m [235261,235262]",
      "dest": "identifier: m [236755,236756]"
    },
    {
      "src": "identifier: PAD_LIMIT [184151,184160]",
      "dest": "identifier: PAD_LIMIT [185645,185654]"
    },
    {
      "src": "binary_expression [47800,47811]",
      "dest": "binary_expression [47800,47811]"
    },
    {
      "src": "identifier: searchLength [57763,57775]",
      "dest": "identifier: searchLength [58103,58115]"
    },
    {
      "src": "null_literal: null [36135,36139]",
      "dest": "null_literal: null [36135,36139]"
    },
    {
      "src": "method_invocation [86321,86333]",
      "dest": "method_invocation [87815,87827]"
    },
    {
      "src": "identifier: ignoreCase [240013,240023]",
      "dest": "identifier: ignoreCase [241507,241517]"
    },
    {
      "src": "argument_list [198435,198438]",
      "dest": "argument_list [199929,199932]"
    },
    {
      "src": "affectation_operator: = [235431,235432]",
      "dest": "affectation_operator: = [236925,236926]"
    },
    {
      "src": "formal_parameters [123027,123058]",
      "dest": "formal_parameters [124521,124552]"
    },
    {
      "src": "assignment_expression [110989,111002]",
      "dest": "assignment_expression [112483,112496]"
    },
    {
      "src": "identifier: buf [178294,178297]",
      "dest": "identifier: buf [179788,179791]"
    },
    {
      "src": "method_declaration [45015,45164]",
      "dest": "method_declaration [45015,45164]"
    },
    {
      "src": "arithmetic_operator: - [244342,244343]",
      "dest": "arithmetic_operator: - [245836,245837]"
    },
    {
      "src": "method_invocation [243517,243544]",
      "dest": "method_invocation [245011,245038]"
    },
    {
      "src": "binary_expression [143456,143486]",
      "dest": "binary_expression [144950,144980]"
    },
    {
      "src": "identifier: upperCase [192664,192673]",
      "dest": "identifier: upperCase [194158,194167]"
    },
    {
      "src": "argument_list [161120,161123]",
      "dest": "argument_list [162614,162617]"
    },
    {
      "src": "identifier: EMPTY [170148,170153]",
      "dest": "identifier: EMPTY [171642,171647]"
    },
    {
      "src": "block [92806,92850]",
      "dest": "block [94300,94344]"
    },
    {
      "src": "new: new [175268,175271]",
      "dest": "new: new [176762,176765]"
    },
    {
      "src": "type: String[] [22964,22972]",
      "dest": "type: String[] [22964,22972]"
    },
    {
      "src": ":: : [36288,36289]",
      "dest": ":: : [36288,36289]"
    },
    {
      "src": "argument_list [132864,132871]",
      "dest": "argument_list [134358,134365]"
    },
    {
      "src": "catch_type [25673,25695]",
      "dest": "catch_type [25673,25695]"
    },
    {
      "src": "argument_list [133982,133984]",
      "dest": "argument_list [135476,135478]"
    },
    {
      "src": "identifier: searchList [160651,160661]",
      "dest": "identifier: searchList [162145,162155]"
    },
    {
      "src": "argument_list [173248,173257]",
      "dest": "argument_list [174742,174751]"
    },
    {
      "src": "identifier: str [144586,144589]",
      "dest": "identifier: str [146080,146083]"
    },
    {
      "src": "import_declaration [895,917]",
      "dest": "import_declaration [895,917]"
    },
    {
      "src": "line_comment: // String decomposed = Normalizer.normalize(input, Normalizer.Form.NFD); [24026,24098]",
      "dest": "line_comment: // String decomposed = Normalizer.normalize(input, Normalizer.Form.NFD); [24026,24098]"
    },
    {
      "src": "method_invocation [131469,131490]",
      "dest": "method_invocation [132963,132984]"
    },
    {
      "src": "block [161025,162245]",
      "dest": "block [162519,163739]"
    },
    {
      "src": "local_variable_declaration [225154,225160]",
      "dest": "local_variable_declaration [226648,226654]"
    },
    {
      "src": "formal_parameters [84647,84677]",
      "dest": "formal_parameters [86141,86171]"
    },
    {
      "src": "identifier: cs2 [225099,225102]",
      "dest": "identifier: cs2 [226593,226596]"
    },
    {
      "src": "return_statement [62648,62671]",
      "dest": "return_statement [63695,63718]"
    },
    {
      "src": "variable_declarator [69858,69880]",
      "dest": "variable_declarator [71352,71374]"
    },
    {
      "src": "increment_operator: -- [175025,175027]",
      "dest": "increment_operator: -- [176519,176521]"
    },
    {
      "src": "variable_declarator [91057,91080]",
      "dest": "variable_declarator [92551,92574]"
    },
    {
      "src": "line_comment: // String's can't have a MAX_VALUEth index. [69891,69934]",
      "dest": "line_comment: // String's can't have a MAX_VALUEth index. [71385,71428]"
    },
    {
      "src": "false: false [210218,210223]",
      "dest": "false: false [211712,211717]"
    },
    {
      "src": "identifier: str [242377,242380]",
      "dest": "identifier: str [243871,243874]"
    },
    {
      "src": "new: new [175109,175112]",
      "dest": "new: new [176603,176606]"
    },
    {
      "src": "identifier: buf [150465,150468]",
      "dest": "identifier: buf [151959,151962]"
    },
    {
      "src": "argument_list [222461,222487]",
      "dest": "argument_list [223955,223981]"
    },
    {
      "src": "identifier: str [239995,239998]",
      "dest": "identifier: str [241489,241492]"
    },
    {
      "src": "variable_declarator [123275,123305]",
      "dest": "variable_declarator [124769,124799]"
    },
    {
      "src": "identifier: padLen [181743,181749]",
      "dest": "identifier: padLen [183237,183243]"
    },
    {
      "src": "comparison_operator: == [43380,43382]",
      "dest": "comparison_operator: == [43380,43382]"
    },
    {
      "src": "if_statement [223775,223829]",
      "dest": "if_statement [225269,225323]"
    },
    {
      "src": "comparison_operator: < [91413,91414]",
      "dest": "comparison_operator: < [92907,92908]"
    },
    {
      "src": "identifier: str [30694,30697]",
      "dest": "identifier: str [30694,30697]"
    },
    {
      "src": "parenthesized_expression [131113,131127]",
      "dest": "parenthesized_expression [132607,132621]"
    },
    {
      "src": "identifier: str [192715,192718]",
      "dest": "identifier: str [194209,194212]"
    },
    {
      "src": "assignment_expression [175415,175435]",
      "dest": "assignment_expression [176909,176929]"
    },
    {
      "src": "block [145718,145822]",
      "dest": "block [147212,147316]"
    },
    {
      "src": "identifier: i [61273,61274]",
      "dest": "identifier: i [62012,62013]"
    },
    {
      "src": "identifier: i [53207,53208]",
      "dest": "identifier: i [53207,53208]"
    },
    {
      "src": "return_statement [141706,141717]",
      "dest": "return_statement [143200,143211]"
    },
    {
      "src": "formal_parameter [179955,179967]",
      "dest": "formal_parameter [181449,181461]"
    },
    {
      "src": "comparison_operator: <= [219595,219597]",
      "dest": "comparison_operator: <= [221089,221091]"
    },
    {
      "src": "identifier: charAt [228677,228683]",
      "dest": "identifier: charAt [230171,230177]"
    },
    {
      "src": "block [134311,134353]",
      "dest": "block [135805,135847]"
    },
    {
      "src": "binary_expression [131398,131410]",
      "dest": "binary_expression [132892,132904]"
    },
    {
      "src": "assignment_expression [227856,227914]",
      "dest": "assignment_expression [229350,229408]"
    },
    {
      "src": "identifier: index [36447,36452]",
      "dest": "identifier: index [36447,36452]"
    },
    {
      "src": "identifier: firstDiff [228913,228922]",
      "dest": "identifier: firstDiff [230407,230416]"
    },
    {
      "src": "identifier: i [110841,110842]",
      "dest": "identifier: i [112335,112336]"
    },
    {
      "src": "identifier: str1 [223683,223687]",
      "dest": "identifier: str1 [225177,225181]"
    },
    {
      "src": "identifier: csLen [54717,54722]",
      "dest": "identifier: csLen [54789,54794]"
    },
    {
      "src": "null_literal: null [11722,11726]",
      "dest": "null_literal: null [11722,11726]"
    },
    {
      "src": "identifier: length [141804,141810]",
      "dest": "identifier: length [143298,143304]"
    },
    {
      "src": "argument_list [140302,140307]",
      "dest": "argument_list [141796,141801]"
    },
    {
      "src": "type: int [233717,233720]",
      "dest": "type: int [235211,235214]"
    },
    {
      "src": "logical_operator: || [158179,158181]",
      "dest": "logical_operator: || [159673,159675]"
    },
    {
      "src": "identifier: i [178205,178206]",
      "dest": "identifier: i [179699,179700]"
    },
    {
      "src": "line_comment: // Set the starting point for the next search. [105323,105369]",
      "dest": "line_comment: // Set the starting point for the next search. [106817,106863]"
    },
    {
      "src": "return_statement [77470,77499]",
      "dest": "return_statement [78964,78993]"
    },
    {
      "src": "identifier: separator [104773,104782]",
      "dest": "identifier: separator [106267,106276]"
    },
    {
      "src": "modifiers [6610,6616]",
      "dest": "modifiers [6610,6616]"
    },
    {
      "src": "identifier: output2 [175377,175384]",
      "dest": "identifier: output2 [176871,176878]"
    },
    {
      "src": "type: int [202073,202076]",
      "dest": "type: int [203567,203570]"
    },
    {
      "src": "identifier: temp [168507,168511]",
      "dest": "identifier: temp [170001,170005]"
    },
    {
      "src": "identifier: close [91029,91034]",
      "dest": "identifier: close [92523,92528]"
    },
    {
      "src": "line_comment: // Contains [49991,50002]",
      "dest": "line_comment: // Contains [49991,50002]"
    },
    {
      "src": "argument_list [47945,47947]",
      "dest": "argument_list [47945,47947]"
    },
    {
      "src": "update_expression [175345,175348]",
      "dest": "update_expression [176839,176842]"
    },
    {
      "src": "block [183041,183088]",
      "dest": "block [184535,184582]"
    },
    {
      "src": "formal_parameter [83061,83077]",
      "dest": "formal_parameter [84555,84571]"
    },
    {
      "src": "argument_list [11715,11719]",
      "dest": "argument_list [11715,11719]"
    },
    {
      "src": "identifier: ordinalIndexOf [36016,36030]",
      "dest": "identifier: ordinalIndexOf [36016,36030]"
    },
    {
      "src": "binary_expression [165946,165959]",
      "dest": "binary_expression [167440,167453]"
    },
    {
      "src": "\": \" [24621,24622]",
      "dest": "\": \" [24621,24622]"
    },
    {
      "src": "argument_list [143311,143316]",
      "dest": "argument_list [144805,144810]"
    },
    {
      "src": "type: int [91014,91017]",
      "dest": "type: int [92508,92511]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets the substring before the first occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * A <code>null</code> separator will return the input string.</p>\n     *\n     * <p>If nothing is found, the string input is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringBefore(null, *)      = null\n     * StringUtils.substringBefore(\"\", *)        = \"\"\n     * StringUtils.substringBefore(\"abc\", \"a\")   = \"\"\n     * StringUtils.substringBefore(\"abcba\", \"b\") = \"a\"\n     * StringUtils.substringBefore(\"abc\", \"c\")   = \"ab\"\n     * StringUtils.substringBefore(\"abc\", \"d\")   = \"abc\"\n     * StringUtils.substringBefore(\"abc\", \"\")    = \"\"\n     * StringUtils.substringBefore(\"abc\", null)  = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring before the first occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [80236,81404]",
      "dest": "block_comment:     \n     * <p>Gets the substring before the first occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * A <code>null</code> separator will return the input string.</p>\n     *\n     * <p>If nothing is found, the string input is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringBefore(null, *)      = null\n     * StringUtils.substringBefore(\"\", *)        = \"\"\n     * StringUtils.substringBefore(\"abc\", \"a\")   = \"\"\n     * StringUtils.substringBefore(\"abcba\", \"b\") = \"a\"\n     * StringUtils.substringBefore(\"abc\", \"c\")   = \"ab\"\n     * StringUtils.substringBefore(\"abc\", \"d\")   = \"abc\"\n     * StringUtils.substringBefore(\"abc\", \"\")    = \"\"\n     * StringUtils.substringBefore(\"abc\", null)  = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring before the first occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [81730,82898]"
    },
    {
      "src": "logical_operator: && [111253,111255]",
      "dest": "logical_operator: && [112747,112749]"
    },
    {
      "src": "method_invocation [66687,66699]",
      "dest": "method_invocation [67806,67818]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the n-th index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param ordinal  the n-th <code>searchStr</code> to find\n     * @param lastIndex true if lastOrdinalIndexOf() otherwise false if ordinalIndexOf()\n     * @return the n-th index of the search String,\n     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n     */ [35244,35889]",
      "dest": "block_comment:     \n     * <p>Finds the n-th index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param ordinal  the n-th <code>searchStr</code> to find\n     * @param lastIndex true if lastOrdinalIndexOf() otherwise false if ordinalIndexOf()\n     * @return the n-th index of the search String,\n     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n     */ [35244,35889]"
    },
    {
      "src": "decimal_integer_literal: 0 [39890,39891]",
      "dest": "decimal_integer_literal: 0 [39890,39891]"
    },
    {
      "src": "identifier: str [119206,119209]",
      "dest": "identifier: str [120700,120703]"
    },
    {
      "src": "break_statement [150609,150615]",
      "dest": "break_statement [152103,152109]"
    },
    {
      "src": "type: String [181356,181362]",
      "dest": "type: String [182850,182856]"
    },
    {
      "src": "formal_parameter [22964,22977]",
      "dest": "formal_parameter [22964,22977]"
    },
    {
      "src": "if_statement [54512,54611]",
      "dest": "if_statement [54512,54611]"
    },
    {
      "src": "identifier: str [49356,49359]",
      "dest": "identifier: str [49356,49359]"
    },
    {
      "src": "continue_statement [118291,118300]",
      "dest": "continue_statement [119785,119794]"
    },
    {
      "src": "formal_parameter [110353,110363]",
      "dest": "formal_parameter [111847,111857]"
    },
    {
      "src": "identifier: separator [84667,84676]",
      "dest": "identifier: separator [86161,86170]"
    },
    {
      "src": "identifier: str [144632,144635]",
      "dest": "identifier: str [146126,146129]"
    },
    {
      "src": "identifier: ch [66789,66791]",
      "dest": "identifier: ch [67908,67910]"
    },
    {
      "src": "return_statement [91624,91670]",
      "dest": "return_statement [93118,93164]"
    },
    {
      "src": "type: Iterator<?> [132303,132314]",
      "dest": "type: Iterator<?> [133797,133808]"
    },
    {
      "src": "new: new [174951,174954]",
      "dest": "new: new [176445,176448]"
    },
    {
      "src": "identifier: EMPTY [127675,127680]",
      "dest": "identifier: EMPTY [129169,129174]"
    },
    {
      "src": "argument_list [104772,104788]",
      "dest": "argument_list [106266,106282]"
    },
    {
      "src": "identifier: isEmpty [190588,190595]",
      "dest": "identifier: isEmpty [192082,192089]"
    },
    {
      "src": "type: char [175209,175213]",
      "dest": "type: char [176703,176707]"
    },
    {
      "src": "binary_expression [190514,190538]",
      "dest": "binary_expression [192008,192032]"
    },
    {
      "src": "identifier: startPos [49793,49801]",
      "dest": "identifier: startPos [49793,49801]"
    },
    {
      "src": "binary_expression [159837,159852]",
      "dest": "binary_expression [161331,161346]"
    },
    {
      "src": "for_statement [57658,58379]",
      "dest": "for_statement [54769,55341]"
    },
    {
      "src": "block [20160,20696]",
      "dest": "block [20160,20696]"
    },
    {
      "src": "increment_operator: ++ [137217,137219]",
      "dest": "increment_operator: ++ [138711,138713]"
    },
    {
      "src": "identifier: len [53281,53284]",
      "dest": "identifier: len [53281,53284]"
    },
    {
      "src": "type: int [91356,91359]",
      "dest": "type: int [92850,92853]"
    },
    {
      "src": "field_access [173279,173291]",
      "dest": "field_access [174773,174785]"
    },
    {
      "src": "if_statement [215512,215565]",
      "dest": "if_statement [217006,217059]"
    },
    {
      "src": "identifier: length [206936,206942]",
      "dest": "identifier: length [208430,208436]"
    },
    {
      "src": "argument_list [123835,123878]",
      "dest": "argument_list [125329,125372]"
    },
    {
      "src": "identifier: cs1 [225012,225015]",
      "dest": "identifier: cs1 [226506,226509]"
    },
    {
      "src": "variable_declarator [173051,173072]",
      "dest": "variable_declarator [174545,174566]"
    },
    {
      "src": "local_variable_declaration [185459,185488]",
      "dest": "local_variable_declaration [186953,186982]"
    },
    {
      "src": "binary_expression [132427,132443]",
      "dest": "binary_expression [133921,133937]"
    },
    {
      "src": "identifier: i [208187,208188]",
      "dest": "identifier: i [209681,209682]"
    },
    {
      "src": "identifier: length [160970,160976]",
      "dest": "identifier: length [162464,162470]"
    },
    {
      "src": "argument_list [24897,24927]",
      "dest": "argument_list [24897,24927]"
    },
    {
      "src": "if_statement [73462,73515]",
      "dest": "if_statement [74956,75009]"
    },
    {
      "src": "return_statement [173440,173451]",
      "dest": "return_statement [174934,174945]"
    },
    {
      "src": "argument_list [150711,150734]",
      "dest": "argument_list [152205,152228]"
    },
    {
      "src": "identifier: i [117628,117629]",
      "dest": "identifier: i [119122,119123]"
    },
    {
      "src": "modifiers [103050,103063]",
      "dest": "modifiers [104544,104557]"
    },
    {
      "src": "type: int [182142,182145]",
      "dest": "type: int [183636,183639]"
    },
    {
      "src": "argument_list [119205,119230]",
      "dest": "argument_list [120699,120724]"
    },
    {
      "src": "decimal_integer_literal: 0 [54792,54793]",
      "dest": "decimal_integer_literal: 0 [58096,58097]"
    },
    {
      "src": "identifier: str [198425,198428]",
      "dest": "identifier: str [199919,199922]"
    },
    {
      "src": "method_invocation [198229,198241]",
      "dest": "method_invocation [199723,199735]"
    },
    {
      "src": "type: char [182061,182065]",
      "dest": "type: char [183555,183559]"
    },
    {
      "src": "block [231101,231731]",
      "dest": "block [232595,233225]"
    },
    {
      "src": "block [68080,68233]",
      "dest": "block [69574,69727]"
    },
    {
      "src": "variable_declarator [160172,160181]",
      "dest": "variable_declarator [161666,161675]"
    },
    {
      "src": "method_invocation [143304,143316]",
      "dest": "method_invocation [144798,144810]"
    },
    {
      "src": "parenthesized_expression [180084,180095]",
      "dest": "parenthesized_expression [181578,181589]"
    },
    {
      "src": "type: String [92794,92800]",
      "dest": "type: String [94288,94294]"
    },
    {
      "src": "binary_expression [160454,160475]",
      "dest": "binary_expression [161948,161969]"
    },
    {
      "src": "arithmetic_operator: - [53176,53177]",
      "dest": "arithmetic_operator: - [53176,53177]"
    },
    {
      "src": "identifier: len [168280,168283]",
      "dest": "identifier: len [169774,169777]"
    },
    {
      "src": "type: int [39335,39338]",
      "dest": "type: int [39335,39338]"
    },
    {
      "src": "identifier: inputLength [174671,174682]",
      "dest": "identifier: inputLength [176165,176176]"
    },
    {
      "src": "assignment_expression [150237,150277]",
      "dest": "assignment_expression [151731,151771]"
    },
    {
      "src": "line_comment: // Performance testing notes (JDK 1.4, Jul03, scolebourne) [5248,5306]",
      "dest": "line_comment: // Performance testing notes (JDK 1.4, Jul03, scolebourne) [5248,5306]"
    },
    {
      "src": "identifier: ClassUtils [24441,24451]",
      "dest": "identifier: ClassUtils [24441,24451]"
    },
    {
      "src": "block [181486,181523]",
      "dest": "block [182980,183017]"
    },
    {
      "src": "binary_expression [91264,91273]",
      "dest": "binary_expression [92758,92767]"
    },
    {
      "src": "argument_list [136311,136313]",
      "dest": "argument_list [137805,137807]"
    },
    {
      "src": "argument_list [161623,161625]",
      "dest": "argument_list [163117,163119]"
    },
    {
      "src": "block_comment:     \n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. \n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *, *) = null\n     *  StringUtils.replaceEach(\"\", *, *, *) = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0], *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}, *) = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}, *) = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}, *) = \"wcte\"\n     *  (example of how it repeats)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, false) = \"dcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, true) = \"tcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, *) = IllegalArgumentException\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @param repeat if true, then replace repeatedly \n     *       until there are no more possible replacements or timeToLive < 0\n     * @param timeToLive\n     *            if less than 0 then there is a circular reference and endless\n     *            loop\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IllegalArgumentException\n     *             if the search is repeating and there is an endless loop due\n     *             to outputs of one being inputs to another\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */ [155413,157772]",
      "dest": "block_comment:     \n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. \n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *, *) = null\n     *  StringUtils.replaceEach(\"\", *, *, *) = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0], *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}, *) = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}, *) = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}, *) = \"wcte\"\n     *  (example of how it repeats)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, false) = \"dcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, true) = \"tcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, *) = IllegalArgumentException\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @param repeat if true, then replace repeatedly \n     *       until there are no more possible replacements or timeToLive < 0\n     * @param timeToLive\n     *            if less than 0 then there is a circular reference and endless\n     *            loop\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IllegalArgumentException\n     *             if the search is repeating and there is an endless loop due\n     *             to outputs of one being inputs to another\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */ [156907,159266]"
    },
    {
      "src": "block_comment:     \n     * <p>Right pad a String with spaces (' ').</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *)   = null\n     * StringUtils.rightPad(\"\", 3)     = \"   \"\n     * StringUtils.rightPad(\"bat\", 3)  = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5)  = \"bat  \"\n     * StringUtils.rightPad(\"bat\", 1)  = \"bat\"\n     * StringUtils.rightPad(\"bat\", -1) = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @return right padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     */ [178311,178996]",
      "dest": "block_comment:     \n     * <p>Right pad a String with spaces (' ').</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *)   = null\n     * StringUtils.rightPad(\"\", 3)     = \"   \"\n     * StringUtils.rightPad(\"bat\", 3)  = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5)  = \"bat  \"\n     * StringUtils.rightPad(\"bat\", 1)  = \"bat\"\n     * StringUtils.rightPad(\"bat\", -1) = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @return right padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     */ [179805,180490]"
    },
    {
      "src": "identifier: Character [196900,196909]",
      "dest": "identifier: Character [198394,198403]"
    },
    {
      "src": "if_statement [161996,162154]",
      "dest": "if_statement [163490,163648]"
    },
    {
      "src": "binary_expression [73588,73597]",
      "dest": "binary_expression [75082,75091]"
    },
    {
      "src": "object_creation_expression [178052,178124]",
      "dest": "object_creation_expression [179546,179618]"
    },
    {
      "src": "object_creation_expression [160947,160990]",
      "dest": "object_creation_expression [162441,162484]"
    },
    {
      "src": "block_comment:     \n     * <p>Deletes all whitespaces from a String as defined by\n     * {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.deleteWhitespace(null)         = null\n     * StringUtils.deleteWhitespace(\"\")           = \"\"\n     * StringUtils.deleteWhitespace(\"abc\")        = \"abc\"\n     * StringUtils.deleteWhitespace(\"   ab  c  \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to delete whitespace from, may be null\n     * @return the String without whitespaces, <code>null</code> if null String input\n     */ [136430,136976]",
      "dest": "block_comment:     \n     * <p>Deletes all whitespaces from a String as defined by\n     * {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.deleteWhitespace(null)         = null\n     * StringUtils.deleteWhitespace(\"\")           = \"\"\n     * StringUtils.deleteWhitespace(\"abc\")        = \"abc\"\n     * StringUtils.deleteWhitespace(\"   ab  c  \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to delete whitespace from, may be null\n     * @return the String without whitespaces, <code>null</code> if null String input\n     */ [137924,138470]"
    },
    {
      "src": "identifier: start [91326,91331]",
      "dest": "identifier: start [92820,92825]"
    },
    {
      "src": "block [198249,198284]",
      "dest": "block [199743,199778]"
    },
    {
      "src": "binary_expression [174425,174436]",
      "dest": "binary_expression [175919,175930]"
    },
    {
      "src": "identifier: i [236268,236269]",
      "dest": "identifier: i [237762,237763]"
    },
    {
      "src": "block [15820,15882]",
      "dest": "block [15820,15882]"
    },
    {
      "src": "method_declaration [240907,241341]",
      "dest": "method_declaration [242401,242835]"
    },
    {
      "src": "line_comment: // Misc [231743,231750]",
      "dest": "line_comment: // Misc [233237,233244]"
    },
    {
      "src": "comparison_operator: == [195572,195574]",
      "dest": "comparison_operator: == [197066,197068]"
    },
    {
      "src": "comparison_operator: == [137369,137371]",
      "dest": "comparison_operator: == [138863,138865]"
    },
    {
      "src": "identifier: middle [222430,222436]",
      "dest": "identifier: middle [223924,223930]"
    },
    {
      "src": "return_statement [15830,15876]",
      "dest": "return_statement [15830,15876]"
    },
    {
      "src": "return_statement [83304,83317]",
      "dest": "return_statement [84798,84811]"
    },
    {
      "src": "method_invocation [134047,134062]",
      "dest": "method_invocation [135541,135556]"
    },
    {
      "src": "identifier: length [231136,231142]",
      "dest": "identifier: length [232630,232636]"
    },
    {
      "src": "modifiers [95131,95144]",
      "dest": "modifiers [96625,96638]"
    },
    {
      "src": "decimal_integer_literal: 0 [79935,79936]",
      "dest": "decimal_integer_literal: 0 [81429,81430]"
    },
    {
      "src": "if_statement [166133,166244]",
      "dest": "if_statement [167627,167738]"
    },
    {
      "src": "modifiers [239708,239722]",
      "dest": "modifiers [241202,241216]"
    },
    {
      "src": "method_invocation [89474,89515]",
      "dest": "method_invocation [90968,91009]"
    },
    {
      "src": "comparison_operator: == [158235,158237]",
      "dest": "comparison_operator: == [159729,159731]"
    },
    {
      "src": "identifier: abbreviate [217319,217329]",
      "dest": "identifier: abbreviate [218813,218823]"
    },
    {
      "src": "identifier: i [159435,159436]",
      "dest": "identifier: i [160929,160930]"
    },
    {
      "src": "argument_list [76264,76276]",
      "dest": "argument_list [77758,77770]"
    },
    {
      "src": "method_invocation [181972,182009]",
      "dest": "method_invocation [183466,183503]"
    },
    {
      "src": "comparison_operator: == [110571,110573]",
      "dest": "comparison_operator: == [112065,112067]"
    },
    {
      "src": "method_declaration [194458,194625]",
      "dest": "method_declaration [195952,196119]"
    },
    {
      "src": "static: static [37760,37766]",
      "dest": "static: static [37760,37766]"
    },
    {
      "src": "argument_list [42299,42304]",
      "dest": "argument_list [42299,42304]"
    },
    {
      "src": "comparison_operator: == [228923,228925]",
      "dest": "comparison_operator: == [230417,230419]"
    },
    {
      "src": "local_variable_declaration [159357,159367]",
      "dest": "local_variable_declaration [160851,160861]"
    },
    {
      "src": "type: CharSequence [9593,9605]",
      "dest": "type: CharSequence [9593,9605]"
    },
    {
      "src": "parenthesized_expression [89424,89448]",
      "dest": "parenthesized_expression [90918,90942]"
    },
    {
      "src": "return_statement [127558,127570]",
      "dest": "return_statement [129052,129064]"
    },
    {
      "src": "parenthesized_expression [137362,137375]",
      "dest": "parenthesized_expression [138856,138869]"
    },
    {
      "src": "return_statement [86615,86662]",
      "dest": "return_statement [88109,88156]"
    },
    {
      "src": "identifier: str [243480,243483]",
      "dest": "identifier: str [244974,244977]"
    },
    {
      "src": "identifier: cs [205685,205687]",
      "dest": "identifier: cs [207179,207181]"
    },
    {
      "src": "arithmetic_operator: * [174815,174816]",
      "dest": "arithmetic_operator: * [176309,176310]"
    },
    {
      "src": "null_literal: null [133937,133941]",
      "dest": "null_literal: null [135431,135435]"
    },
    {
      "src": "true: true [53258,53262]",
      "dest": "true: true [53258,53262]"
    },
    {
      "src": "parenthesized_expression [145515,145571]",
      "dest": "parenthesized_expression [147009,147065]"
    },
    {
      "src": "\": \" [233888,233889]",
      "dest": "\": \" [235382,235383]"
    },
    {
      "src": "identifier: separator [130857,130866]",
      "dest": "identifier: separator [132351,132360]"
    },
    {
      "src": "affectation_operator: = [222152,222153]",
      "dest": "affectation_operator: = [223646,223647]"
    },
    {
      "src": "comparison_operator: == [69767,69769]",
      "dest": "comparison_operator: == [71261,71263]"
    },
    {
      "src": "identifier: max [115553,115556]",
      "dest": "identifier: max [117047,117050]"
    },
    {
      "src": "comparison_operator: == [200874,200876]",
      "dest": "comparison_operator: == [202368,202370]"
    },
    {
      "src": "return_statement [66972,66985]",
      "dest": "return_statement [68444,68457]"
    },
    {
      "src": "method_declaration [239095,239218]",
      "dest": "method_declaration [240589,240712]"
    },
    {
      "src": "return_statement [191956,191981]",
      "dest": "return_statement [193450,193475]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [186704,186777]",
      "dest": "line_comment: //----------------------------------------------------------------------- [188198,188271]"
    },
    {
      "src": "decimal_integer_literal: 16 [127742,127744]",
      "dest": "decimal_integer_literal: 16 [129236,129238]"
    },
    {
      "src": "line_comment: // We found a consecutive occurrence of the separator, so skip it. [105646,105712]",
      "dest": "line_comment: // We found a consecutive occurrence of the separator, so skip it. [107140,107206]"
    },
    {
      "src": "identifier: tempIndex [159856,159865]",
      "dest": "identifier: tempIndex [161350,161359]"
    },
    {
      "src": "parenthesized_expression [118483,118492]",
      "dest": "parenthesized_expression [119977,119986]"
    },
    {
      "src": "block [214584,214620]",
      "dest": "block [216078,216114]"
    },
    {
      "src": "parenthesized_expression [138808,138832]",
      "dest": "parenthesized_expression [140302,140326]"
    },
    {
      "src": "formal_parameter [209109,209124]",
      "dest": "formal_parameter [210603,210618]"
    },
    {
      "src": "type: int [137169,137172]",
      "dest": "type: int [138663,138666]"
    },
    {
      "src": "decimal_integer_literal: 0 [228467,228468]",
      "dest": "decimal_integer_literal: 0 [229961,229962]"
    },
    {
      "src": "identifier: start [18630,18635]",
      "dest": "identifier: start [18630,18635]"
    },
    {
      "src": "binary_expression [117666,117694]",
      "dest": "binary_expression [119160,119188]"
    },
    {
      "src": "decimal_integer_literal: 1 [161889,161890]",
      "dest": "decimal_integer_literal: 1 [163383,163384]"
    },
    {
      "src": "type: char [198352,198356]",
      "dest": "type: char [199846,199850]"
    },
    {
      "src": "affectation_operator: = [137179,137180]",
      "dest": "affectation_operator: = [138673,138674]"
    },
    {
      "src": "binary_expression [181758,181775]",
      "dest": "binary_expression [183252,183269]"
    },
    {
      "src": "parenthesized_expression [228092,228150]",
      "dest": "parenthesized_expression [229586,229644]"
    },
    {
      "src": "identifier: length [66569,66575]",
      "dest": "identifier: length [67616,67622]"
    },
    {
      "src": "method_invocation [127747,127775]",
      "dest": "method_invocation [129241,129269]"
    },
    {
      "src": "method_invocation [150751,150765]",
      "dest": "method_invocation [152245,152259]"
    },
    {
      "src": "true: true [63988,63992]",
      "dest": "true: true [65035,65039]"
    },
    {
      "src": "for_statement [161040,161139]",
      "dest": "for_statement [162534,162633]"
    },
    {
      "src": "method_invocation [137112,137124]",
      "dest": "method_invocation [138606,138618]"
    },
    {
      "src": "string_literal [158805,158853]",
      "dest": "string_literal [160299,160347]"
    },
    {
      "src": "if_statement [171748,171822]",
      "dest": "if_statement [173242,173316]"
    },
    {
      "src": "static: static [163577,163583]",
      "dest": "static: static [165071,165077]"
    },
    {
      "src": "identifier: str [79749,79752]",
      "dest": "identifier: str [81243,81246]"
    },
    {
      "src": "comparison_operator: == [65213,65215]",
      "dest": "comparison_operator: == [66260,66262]"
    },
    {
      "src": "variable_declarator [241164,241195]",
      "dest": "variable_declarator [242658,242689]"
    },
    {
      "src": "identifier: size [111371,111375]",
      "dest": "identifier: size [112865,112869]"
    },
    {
      "src": "local_variable_declaration [165778,165825]",
      "dest": "local_variable_declaration [167272,167319]"
    },
    {
      "src": "identifier: length [173064,173070]",
      "dest": "identifier: length [174558,174564]"
    },
    {
      "src": "logical_operator: && [202159,202161]",
      "dest": "logical_operator: && [203653,203655]"
    },
    {
      "src": "identifier: isEmpty [199792,199799]",
      "dest": "identifier: isEmpty [201286,201293]"
    },
    {
      "src": "identifier: separator [176945,176954]",
      "dest": "identifier: separator [178439,178448]"
    },
    {
      "src": "identifier: length [143460,143466]",
      "dest": "identifier: length [144954,144960]"
    },
    {
      "src": "formal_parameters [18406,18437]",
      "dest": "formal_parameters [18406,18437]"
    },
    {
      "src": "comparison_operator: > [168251,168252]",
      "dest": "comparison_operator: > [169745,169746]"
    },
    {
      "src": "identifier: lastIndexOf [42223,42234]",
      "dest": "identifier: lastIndexOf [42223,42234]"
    },
    {
      "src": "identifier: j [57777,57778]",
      "dest": "identifier: j [54882,54883]"
    },
    {
      "src": "method_declaration [244037,244451]",
      "dest": "method_declaration [245531,245945]"
    },
    {
      "src": "line_comment: // mchyzer Performance note: This creates very few new objects (one major goal) [157958,158037]",
      "dest": "line_comment: // mchyzer Performance note: This creates very few new objects (one major goal) [159452,159531]"
    },
    {
      "src": "assignment_expression [235448,235455]",
      "dest": "assignment_expression [236942,236949]"
    },
    {
      "src": "formal_parameter [113329,113350]",
      "dest": "formal_parameter [114823,114844]"
    },
    {
      "src": "comparison_operator: > [49510,49511]",
      "dest": "comparison_operator: > [49510,49511]"
    },
    {
      "src": "return_statement [96786,96838]",
      "dest": "return_statement [98280,98332]"
    },
    {
      "src": "binary_expression [236113,236116]",
      "dest": "binary_expression [237607,237610]"
    },
    {
      "src": "identifier: searchStr [33472,33481]",
      "dest": "identifier: searchStr [33472,33481]"
    },
    {
      "src": "block [159741,159809]",
      "dest": "block [161235,161303]"
    },
    {
      "src": "method_invocation [219803,219815]",
      "dest": "method_invocation [221297,221309]"
    },
    {
      "src": "identifier: isEmpty [90814,90821]",
      "dest": "identifier: isEmpty [92308,92315]"
    },
    {
      "src": "identifier: searchLen [54799,54808]",
      "dest": "identifier: searchLen [54871,54880]"
    },
    {
      "src": "line_comment: // if recursing, this shouldnt be less than 0 [158354,158399]",
      "dest": "line_comment: // if recursing, this shouldnt be less than 0 [159848,159893]"
    },
    {
      "src": "null_literal: null [39422,39426]",
      "dest": "null_literal: null [39422,39426]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [173481,173554]",
      "dest": "line_comment: //----------------------------------------------------------------------- [174975,175048]"
    },
    {
      "src": "identifier: charAt [66690,66696]",
      "dest": "identifier: charAt [67809,67815]"
    },
    {
      "src": "decimal_integer_literal: 0 [62581,62582]",
      "dest": "decimal_integer_literal: 0 [63335,63336]"
    },
    {
      "src": "type: int [160607,160610]",
      "dest": "type: int [162101,162104]"
    },
    {
      "src": "block [54564,54611]",
      "dest": "block [54564,54611]"
    },
    {
      "src": "parenthesized_expression [209275,209322]",
      "dest": "parenthesized_expression [210769,210816]"
    },
    {
      "src": "method_invocation [54516,54527]",
      "dest": "method_invocation [54516,54527]"
    },
    {
      "src": "identifier: i [198436,198437]",
      "dest": "identifier: i [199930,199931]"
    },
    {
      "src": "assignment_expression [75730,75754]",
      "dest": "assignment_expression [77224,77248]"
    },
    {
      "src": "block [155128,155407]",
      "dest": "block [156622,156901]"
    },
    {
      "src": "arithmetic_operator: + [220135,220136]",
      "dest": "arithmetic_operator: + [221629,221630]"
    },
    {
      "src": "\": \" [24482,24483]",
      "dest": "\": \" [24482,24483]"
    },
    {
      "src": "argument_list [62534,62537]",
      "dest": "argument_list [63273,63276]"
    },
    {
      "src": "identifier: str [86622,86625]",
      "dest": "identifier: str [88116,88119]"
    },
    {
      "src": "identifier: newArr [23284,23290]",
      "dest": "identifier: newArr [23284,23290]"
    },
    {
      "src": "identifier: append [162353,162359]",
      "dest": "identifier: append [163847,163853]"
    },
    {
      "src": "return_statement [205729,205742]",
      "dest": "return_statement [207223,207236]"
    },
    {
      "src": "argument_list [150027,150048]",
      "dest": "argument_list [151521,151542]"
    },
    {
      "src": "identifier: regionMatches [53244,53257]",
      "dest": "identifier: regionMatches [53244,53257]"
    },
    {
      "src": "identifier: increase [150249,150257]",
      "dest": "identifier: increase [151743,151751]"
    },
    {
      "src": "new: new [235533,235536]",
      "dest": "new: new [237027,237030]"
    },
    {
      "src": "identifier: str [47763,47766]",
      "dest": "identifier: str [47763,47766]"
    },
    {
      "src": "method_declaration [81409,81793]",
      "dest": "method_declaration [82903,83287]"
    },
    {
      "src": "comparison_operator: == [68121,68123]",
      "dest": "comparison_operator: == [69615,69617]"
    },
    {
      "src": "local_variable_declaration [235162,235181]",
      "dest": "local_variable_declaration [236656,236675]"
    },
    {
      "src": "identifier: i [175337,175338]",
      "dest": "identifier: i [176831,176832]"
    },
    {
      "src": "identifier: stringPos [228498,228507]",
      "dest": "identifier: stringPos [229992,230001]"
    },
    {
      "src": "identifier: str2 [223779,223783]",
      "dest": "identifier: str2 [225273,225277]"
    },
    {
      "src": "string_literal [178082,178114]",
      "dest": "string_literal [179576,179608]"
    },
    {
      "src": "identifier: buf [134627,134630]",
      "dest": "identifier: buf [136121,136124]"
    },
    {
      "src": "type: int [72005,72008]",
      "dest": "type: int [73499,73502]"
    },
    {
      "src": "identifier: text [161757,161761]",
      "dest": "identifier: text [163251,163255]"
    },
    {
      "src": "decimal_integer_literal: 1 [95246,95247]",
      "dest": "decimal_integer_literal: 1 [96740,96741]"
    },
    {
      "src": "null_literal: null [231123,231127]",
      "dest": "null_literal: null [232617,232621]"
    },
    {
      "src": "unary_expression [159217,159219]",
      "dest": "unary_expression [160711,160713]"
    },
    {
      "src": "type: String [20129,20135]",
      "dest": "type: String [20129,20135]"
    },
    {
      "src": "identifier: list [91103,91107]",
      "dest": "identifier: list [92597,92601]"
    },
    {
      "src": "binary_expression [76135,76144]",
      "dest": "binary_expression [77629,77638]"
    },
    {
      "src": "method_declaration [135296,135487]",
      "dest": "method_declaration [136790,136981]"
    },
    {
      "src": "identifier: str [199906,199909]",
      "dest": "identifier: str [201400,201403]"
    },
    {
      "src": "parenthesized_expression [160499,160552]",
      "dest": "parenthesized_expression [161993,162046]"
    },
    {
      "src": "identifier: cs [55998,56000]",
      "dest": "identifier: cs [56344,56346]"
    },
    {
      "src": "block [239942,239979]",
      "dest": "block [241436,241473]"
    },
    {
      "src": "logical_operator: || [20203,20205]",
      "dest": "logical_operator: || [20203,20205]"
    },
    {
      "src": "identifier: close [90778,90783]",
      "dest": "identifier: close [92272,92277]"
    },
    {
      "src": "identifier: sz [211328,211330]",
      "dest": "identifier: sz [212822,212824]"
    },
    {
      "src": "variable_declarator [117756,117786]",
      "dest": "variable_declarator [119250,119280]"
    },
    {
      "src": "argument_list [73772,73774]",
      "dest": "argument_list [75266,75268]"
    },
    {
      "src": "identifier: searchStr [45071,45080]",
      "dest": "identifier: searchStr [45071,45080]"
    },
    {
      "src": "expression_statement [118772,118790]",
      "dest": "expression_statement [120266,120284]"
    },
    {
      "src": "identifier: cs2 [27501,27504]",
      "dest": "identifier: cs2 [27501,27504]"
    },
    {
      "src": "block [133027,133075]",
      "dest": "block [134521,134569]"
    },
    {
      "src": "binary_expression [195467,195477]",
      "dest": "binary_expression [196961,196971]"
    },
    {
      "src": "return_statement [171952,171963]",
      "dest": "return_statement [173446,173457]"
    },
    {
      "src": "binary_expression [39585,39618]",
      "dest": "binary_expression [39585,39618]"
    },
    {
      "src": "identifier: searchStr [43351,43360]",
      "dest": "identifier: searchStr [43351,43360]"
    },
    {
      "src": "\": \" [24801,24802]",
      "dest": "\": \" [24801,24802]"
    },
    {
      "src": "affectation_operator: = [11680,11681]",
      "dest": "affectation_operator: = [11680,11681]"
    },
    {
      "src": "modifiers [27405,27418]",
      "dest": "modifiers [27405,27418]"
    },
    {
      "src": "method_invocation [185472,185487]",
      "dest": "method_invocation [186966,186981]"
    },
    {
      "src": "identifier: tokenStart [124160,124170]",
      "dest": "identifier: tokenStart [125654,125664]"
    },
    {
      "src": "decimal_integer_literal: 0 [57756,57757]",
      "dest": "decimal_integer_literal: 0 [54864,54865]"
    },
    {
      "src": "identifier: searchString [241164,241176]",
      "dest": "identifier: searchString [242658,242670]"
    },
    {
      "src": "identifier: str [46581,46584]",
      "dest": "identifier: str [46581,46584]"
    },
    {
      "src": "affectation_operator: = [104710,104711]",
      "dest": "affectation_operator: = [106204,106205]"
    },
    {
      "src": "identifier: abbreviate [217373,217383]",
      "dest": "identifier: abbreviate [218867,218877]"
    },
    {
      "src": "identifier: compile [25051,25058]",
      "dest": "identifier: compile [25051,25058]"
    },
    {
      "src": "identifier: j [54810,54811]",
      "dest": "identifier: j [58117,58118]"
    },
    {
      "src": "return_statement [211419,211432]",
      "dest": "return_statement [212913,212926]"
    },
    {
      "src": "formal_parameter [28479,28490]",
      "dest": "formal_parameter [28479,28490]"
    },
    {
      "src": "ternary_expression [212182,212207]",
      "dest": "ternary_expression [213676,213701]"
    },
    {
      "src": "arithmetic_operator: - [150215,150216]",
      "dest": "arithmetic_operator: - [151709,151710]"
    },
    {
      "src": "identifier: length [190668,190674]",
      "dest": "identifier: length [192162,192168]"
    },
    {
      "src": "identifier: length [161253,161259]",
      "dest": "identifier: length [162747,162753]"
    },
    {
      "src": "identifier: java.util.ArrayList [847,866]",
      "dest": "identifier: java.util.ArrayList [847,866]"
    },
    {
      "src": "formal_parameter [149839,149846]",
      "dest": "formal_parameter [151333,151340]"
    },
    {
      "src": "if_statement [50876,50931]",
      "dest": "if_statement [50876,50931]"
    },
    {
      "src": "formal_parameter [101254,101264]",
      "dest": "formal_parameter [102748,102758]"
    },
    {
      "src": "identifier: i [127896,127897]",
      "dest": "identifier: i [129390,129391]"
    },
    {
      "src": "identifier: str [242423,242426]",
      "dest": "identifier: str [243917,243920]"
    },
    {
      "src": "comparison_operator: == [235212,235214]",
      "dest": "comparison_operator: == [236706,236708]"
    },
    {
      "src": "variable_declarator [24762,24803]",
      "dest": "variable_declarator [24762,24803]"
    },
    {
      "src": "local_variable_declaration [104681,104693]",
      "dest": "local_variable_declaration [106175,106187]"
    },
    {
      "src": "identifier: padChar [178249,178256]",
      "dest": "identifier: padChar [179743,179750]"
    },
    {
      "src": "formal_parameter [244069,244079]",
      "dest": "formal_parameter [245563,245573]"
    },
    {
      "src": "formal_parameter [103142,103149]",
      "dest": "formal_parameter [104636,104643]"
    },
    {
      "src": "method_invocation [81765,81786]",
      "dest": "method_invocation [83259,83280]"
    },
    {
      "src": "identifier: chs [137141,137144]",
      "dest": "identifier: chs [138635,138638]"
    },
    {
      "src": "method_invocation [134077,134095]",
      "dest": "method_invocation [135571,135589]"
    },
    {
      "src": "return_statement [46629,46652]",
      "dest": "return_statement [46629,46652]"
    },
    {
      "src": "identifier: pads [181643,181647]",
      "dest": "identifier: pads [183137,183141]"
    },
    {
      "src": "identifier: stripChars [20148,20158]",
      "dest": "identifier: stripChars [20148,20158]"
    },
    {
      "src": "binary_expression [106125,106146]",
      "dest": "binary_expression [107619,107640]"
    },
    {
      "src": "argument_list [149869,149875]",
      "dest": "argument_list [151363,151369]"
    },
    {
      "src": "identifier: i [159386,159387]",
      "dest": "identifier: i [160880,160881]"
    },
    {
      "src": "arithmetic_operator: + [58110,58111]",
      "dest": "arithmetic_operator: + [55143,55144]"
    },
    {
      "src": "modifiers [63716,63729]",
      "dest": "modifiers [64763,64776]"
    },
    {
      "src": "assignment_expression [235970,235975]",
      "dest": "assignment_expression [237464,237469]"
    },
    {
      "src": "assignment_expression [23050,23071]",
      "dest": "assignment_expression [23050,23071]"
    },
    {
      "src": "identifier: searchStr [53050,53059]",
      "dest": "identifier: searchStr [53050,53059]"
    },
    {
      "src": "binary_expression [225084,225095]",
      "dest": "binary_expression [226578,226589]"
    },
    {
      "src": "array_creation_expression [185983,185997]",
      "dest": "array_creation_expression [187477,187491]"
    },
    {
      "src": "return_statement [186638,186674]",
      "dest": "return_statement [188132,188168]"
    },
    {
      "src": "identifier: str [50844,50847]",
      "dest": "identifier: str [50844,50847]"
    },
    {
      "src": "argument_list [185403,185411]",
      "dest": "argument_list [186897,186905]"
    },
    {
      "src": "modifiers [127427,127440]",
      "dest": "modifiers [128921,128934]"
    },
    {
      "src": "method_invocation [138744,138759]",
      "dest": "method_invocation [140238,140253]"
    },
    {
      "src": "binary_expression [118585,118611]",
      "dest": "binary_expression [120079,120105]"
    },
    {
      "src": "argument_list [111304,111314]",
      "dest": "argument_list [112798,112808]"
    },
    {
      "src": "identifier: charAt [198429,198435]",
      "dest": "identifier: charAt [199923,199929]"
    },
    {
      "src": "line_comment: // ContainsOnly [62683,62698]",
      "dest": "line_comment: // ContainsOnly [63730,63745]"
    },
    {
      "src": "comparison_operator: == [33515,33517]",
      "dest": "comparison_operator: == [33515,33517]"
    },
    {
      "src": "affectation_operator: = [66564,66565]",
      "dest": "affectation_operator: = [67611,67612]"
    },
    {
      "src": "line_comment: // START of 1.5 reflection - in 1.6 use the line commented out above [24112,24180]",
      "dest": "line_comment: // START of 1.5 reflection - in 1.6 use the line commented out above [24112,24180]"
    },
    {
      "src": "assignment_expression [235904,235909]",
      "dest": "assignment_expression [237398,237403]"
    },
    {
      "src": "method_declaration [71737,72296]",
      "dest": "method_declaration [73231,73790]"
    },
    {
      "src": "identifier: end [150498,150501]",
      "dest": "identifier: end [151992,151995]"
    },
    {
      "src": "return_statement [189194,189205]",
      "dest": "return_statement [190688,190699]"
    },
    {
      "src": "variable_declarator [131067,131100]",
      "dest": "variable_declarator [132561,132594]"
    },
    {
      "src": "identifier: endIndex [127604,127612]",
      "dest": "identifier: endIndex [129098,129106]"
    },
    {
      "src": "identifier: str [15865,15868]",
      "dest": "identifier: str [15865,15868]"
    },
    {
      "src": ":: : [15857,15858]",
      "dest": ":: : [15857,15858]"
    },
    {
      "src": "method_declaration [60739,61323]",
      "dest": "method_declaration [61126,62062]"
    },
    {
      "src": "comparison_operator: < [39518,39519]",
      "dest": "comparison_operator: < [39518,39519]"
    },
    {
      "src": "logical_operator: || [199789,199791]",
      "dest": "logical_operator: || [201283,201285]"
    },
    {
      "src": "identifier: length [73625,73631]",
      "dest": "identifier: length [75119,75125]"
    },
    {
      "src": "identifier: isEmpty [241026,241033]",
      "dest": "identifier: isEmpty [242520,242527]"
    },
    {
      "src": "type: boolean[] [159017,159026]",
      "dest": "type: boolean[] [160511,160520]"
    },
    {
      "src": "return_statement [81539,81550]",
      "dest": "return_statement [83033,83044]"
    },
    {
      "src": "block [36615,36660]",
      "dest": "block [36615,36660]"
    },
    {
      "src": "identifier: temp [168450,168454]",
      "dest": "identifier: temp [169944,169948]"
    },
    {
      "src": "update_expression [137301,137308]",
      "dest": "update_expression [138795,138802]"
    },
    {
      "src": "null_literal: null [14770,14774]",
      "dest": "null_literal: null [14770,14774]"
    },
    {
      "src": "identifier: str [199784,199787]",
      "dest": "identifier: str [201278,201281]"
    },
    {
      "src": "identifier: start [117486,117491]",
      "dest": "identifier: start [118980,118985]"
    },
    {
      "src": "affectation_operator: = [6273,6274]",
      "dest": "affectation_operator: = [6273,6274]"
    },
    {
      "src": "argument_list [138735,138740]",
      "dest": "argument_list [140229,140234]"
    },
    {
      "src": "decimal_integer_literal: 1 [161348,161349]",
      "dest": "decimal_integer_literal: 1 [162842,162843]"
    },
    {
      "src": "binary_expression [201980,201990]",
      "dest": "binary_expression [203474,203484]"
    },
    {
      "src": "identifier: str [17208,17211]",
      "dest": "identifier: str [17208,17211]"
    },
    {
      "src": "type: String [163584,163590]",
      "dest": "type: String [165078,165084]"
    },
    {
      "src": "identifier: append [161102,161108]",
      "dest": "identifier: append [162596,162602]"
    },
    {
      "src": "identifier: size [183908,183912]",
      "dest": "identifier: size [185402,185406]"
    },
    {
      "src": "object_creation_expression [127820,127846]",
      "dest": "object_creation_expression [129314,129340]"
    },
    {
      "src": "binary_expression [196764,196791]",
      "dest": "binary_expression [198258,198285]"
    },
    {
      "src": "parenthesized_expression [77345,77354]",
      "dest": "parenthesized_expression [78839,78848]"
    },
    {
      "src": "formal_parameters [7427,7444]",
      "dest": "formal_parameters [7427,7444]"
    },
    {
      "src": "formal_parameter [157910,157924]",
      "dest": "formal_parameter [159404,159418]"
    },
    {
      "src": "variable_declarator [70052,70074]",
      "dest": "variable_declarator [71546,71568]"
    },
    {
      "src": "do_statement [36398,36716]",
      "dest": "do_statement [36398,36716]"
    },
    {
      "src": "return_statement [71866,71889]",
      "dest": "return_statement [73360,73383]"
    },
    {
      "src": "type: CharSequence [233744,233756]",
      "dest": "type: CharSequence [235238,235250]"
    },
    {
      "src": "identifier: str [39585,39588]",
      "dest": "identifier: str [39585,39588]"
    },
    {
      "src": "type: StringBuilder [127824,127837]",
      "dest": "type: StringBuilder [129318,129331]"
    },
    {
      "src": "identifier: i [131575,131576]",
      "dest": "identifier: i [133069,133070]"
    },
    {
      "src": "identifier: substring [168696,168705]",
      "dest": "identifier: substring [170190,170199]"
    },
    {
      "src": "formal_parameter [219347,219357]",
      "dest": "formal_parameter [220841,220851]"
    },
    {
      "src": "identifier: last [170441,170445]",
      "dest": "identifier: last [171935,171939]"
    },
    {
      "src": "identifier: len [168392,168395]",
      "dest": "identifier: len [169886,169889]"
    },
    {
      "src": "return_statement [111335,111380]",
      "dest": "return_statement [112829,112874]"
    },
    {
      "src": "affectation_operator: = [118376,118377]",
      "dest": "affectation_operator: = [119870,119871]"
    },
    {
      "src": "identifier: searchStr [33526,33535]",
      "dest": "identifier: searchStr [33526,33535]"
    },
    {
      "src": "type: String [78384,78390]",
      "dest": "type: String [79878,79884]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"\", *)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [30867,31786]",
      "dest": "block_comment:     \n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)          = -1\n     * StringUtils.indexOf(*, null)          = -1\n     * StringUtils.indexOf(\"\", \"\")           = 0\n     * StringUtils.indexOf(\"\", *)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"\")   = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [30867,31786]"
    },
    {
      "src": "identifier: i [236074,236075]",
      "dest": "identifier: i [237568,237569]"
    },
    {
      "src": "identifier: lastIdx [170216,170223]",
      "dest": "identifier: lastIdx [171710,171717]"
    },
    {
      "src": "method_invocation [181897,181915]",
      "dest": "method_invocation [183391,183409]"
    },
    {
      "src": "affectation_operator: = [111151,111152]",
      "dest": "affectation_operator: = [112645,112646]"
    },
    {
      "src": "identifier: center [190456,190462]",
      "dest": "identifier: center [191950,191956]"
    },
    {
      "src": "binary_expression [46581,46592]",
      "dest": "binary_expression [46581,46592]"
    },
    {
      "src": "identifier: isEmpty [7420,7427]",
      "dest": "identifier: isEmpty [7420,7427]"
    },
    {
      "src": "argument_list [198677,198681]",
      "dest": "argument_list [200171,200175]"
    },
    {
      "src": "identifier: abbreviate [219336,219346]",
      "dest": "identifier: abbreviate [220830,220840]"
    },
    {
      "src": "identifier: str [117379,117382]",
      "dest": "identifier: str [118873,118876]"
    },
    {
      "src": "affectation_operator: = [76166,76167]",
      "dest": "affectation_operator: = [77660,77661]"
    },
    {
      "src": "block_comment:     \n     * <p>Compares two CharSequences, and returns the index at which the\n     * CharSequences begin to differ.</p>\n     *\n     * <p>For example,\n     * <code>indexOfDifference(\"i am a machine\", \"i am a robot\") -> 7</code></p>\n     *\n     * <pre>\n     * StringUtils.indexOfDifference(null, null) = -1\n     * StringUtils.indexOfDifference(\"\", \"\") = -1\n     * StringUtils.indexOfDifference(\"\", \"abc\") = 0\n     * StringUtils.indexOfDifference(\"abc\", \"\") = 0\n     * StringUtils.indexOfDifference(\"abc\", \"abc\") = -1\n     * StringUtils.indexOfDifference(\"ab\", \"abxyz\") = 2\n     * StringUtils.indexOfDifference(\"abcde\", \"abxyz\") = 2\n     * StringUtils.indexOfDifference(\"abcde\", \"xyz\") = 0\n     * </pre>\n     *\n     * @param cs1  the first CharSequence, may be null\n     * @param cs2  the second CharSequence, may be null\n     * @return the index where cs1 and cs2 begin to differ; -1 if they are equal\n     * @since 2.0\n     */ [223997,224921]",
      "dest": "block_comment:     \n     * <p>Compares two CharSequences, and returns the index at which the\n     * CharSequences begin to differ.</p>\n     *\n     * <p>For example,\n     * <code>indexOfDifference(\"i am a machine\", \"i am a robot\") -> 7</code></p>\n     *\n     * <pre>\n     * StringUtils.indexOfDifference(null, null) = -1\n     * StringUtils.indexOfDifference(\"\", \"\") = -1\n     * StringUtils.indexOfDifference(\"\", \"abc\") = 0\n     * StringUtils.indexOfDifference(\"abc\", \"\") = 0\n     * StringUtils.indexOfDifference(\"abc\", \"abc\") = -1\n     * StringUtils.indexOfDifference(\"ab\", \"abxyz\") = 2\n     * StringUtils.indexOfDifference(\"abcde\", \"abxyz\") = 2\n     * StringUtils.indexOfDifference(\"abcde\", \"xyz\") = 0\n     * </pre>\n     *\n     * @param cs1  the first CharSequence, may be null\n     * @param cs2  the second CharSequence, may be null\n     * @return the index where cs1 and cs2 begin to differ; -1 if they are equal\n     * @since 2.0\n     */ [225491,226415]"
    },
    {
      "src": "line_comment: // have upper-bound at 20% increase, then let Java take over [160799,160859]",
      "dest": "line_comment: // have upper-bound at 20% increase, then let Java take over [162293,162353]"
    },
    {
      "src": "argument_list [150396,150398]",
      "dest": "argument_list [151890,151892]"
    },
    {
      "src": "type: char [50849,50853]",
      "dest": "type: char [50849,50853]"
    },
    {
      "src": "if_statement [219578,219643]",
      "dest": "if_statement [221072,221137]"
    },
    {
      "src": "return_statement [209342,209355]",
      "dest": "return_statement [210836,210849]"
    },
    {
      "src": "identifier: isEmpty [165582,165589]",
      "dest": "identifier: isEmpty [167076,167083]"
    },
    {
      "src": "return_statement [206892,206905]",
      "dest": "return_statement [208386,208399]"
    },
    {
      "src": "method_invocation [104761,104788]",
      "dest": "method_invocation [106255,106282]"
    },
    {
      "src": "decimal_integer_literal: 1 [174600,174601]",
      "dest": "decimal_integer_literal: 1 [176094,176095]"
    },
    {
      "src": "formal_parameters [113316,113351]",
      "dest": "formal_parameters [114810,114845]"
    },
    {
      "src": "affectation_operator: = [189098,189099]",
      "dest": "affectation_operator: = [190592,190593]"
    },
    {
      "src": "identifier: length [161617,161623]",
      "dest": "identifier: length [163111,163117]"
    },
    {
      "src": "comparison_operator: == [64029,64031]",
      "dest": "comparison_operator: == [65076,65078]"
    },
    {
      "src": "affectation_operator: = [190662,190663]",
      "dest": "affectation_operator: = [192156,192157]"
    },
    {
      "src": "formal_parameters [6628,6630]",
      "dest": "formal_parameters [6628,6630]"
    },
    {
      "src": "identifier: toString [132659,132667]",
      "dest": "identifier: toString [134153,134161]"
    },
    {
      "src": "logical_operator: || [225352,225354]",
      "dest": "logical_operator: || [226846,226848]"
    },
    {
      "src": "logical_operator: || [141672,141674]",
      "dest": "logical_operator: || [143166,143168]"
    },
    {
      "src": "continue_statement [70247,70256]",
      "dest": "continue_statement [71741,71750]"
    },
    {
      "src": "identifier: i [211324,211325]",
      "dest": "identifier: i [212818,212819]"
    },
    {
      "src": "null_literal: null [185341,185345]",
      "dest": "null_literal: null [186835,186839]"
    },
    {
      "src": "identifier: pads [181936,181940]",
      "dest": "identifier: pads [183430,183434]"
    },
    {
      "src": "identifier: str [18497,18500]",
      "dest": "identifier: str [18497,18500]"
    },
    {
      "src": "return_statement [208297,208310]",
      "dest": "return_statement [209791,209804]"
    },
    {
      "src": "static: static [36005,36011]",
      "dest": "static: static [36005,36011]"
    },
    {
      "src": "decimal_integer_literal: 0 [182000,182001]",
      "dest": "decimal_integer_literal: 0 [183494,183495]"
    },
    {
      "src": "arithmetic_operator: - [161347,161348]",
      "dest": "arithmetic_operator: - [162841,162842]"
    },
    {
      "src": "identifier: searchList [158573,158583]",
      "dest": "identifier: searchList [160067,160077]"
    },
    {
      "src": "identifier: charAt [181825,181831]",
      "dest": "identifier: charAt [183319,183325]"
    },
    {
      "src": "arithmetic_operator: + [222217,222218]",
      "dest": "arithmetic_operator: + [223711,223712]"
    },
    {
      "src": "type: char [61064,61068]",
      "dest": "type: char [61523,61527]"
    },
    {
      "src": "identifier: i [161049,161050]",
      "dest": "identifier: i [162543,162544]"
    },
    {
      "src": "binary_expression [219738,219778]",
      "dest": "binary_expression [221232,221272]"
    },
    {
      "src": "local_variable_declaration [195525,195536]",
      "dest": "local_variable_declaration [197019,197030]"
    },
    {
      "src": "block [239834,239897]",
      "dest": "block [241328,241391]"
    },
    {
      "src": "identifier: containsNone [66410,66422]",
      "dest": "identifier: containsNone [67457,67469]"
    },
    {
      "src": "comparison_operator: != [150431,150433]",
      "dest": "comparison_operator: != [151925,151927]"
    },
    {
      "src": "binary_expression [110884,110910]",
      "dest": "binary_expression [112378,112404]"
    },
    {
      "src": "logical_operator: || [161554,161556]",
      "dest": "logical_operator: || [163048,163050]"
    },
    {
      "src": "identifier: isEmpty [141675,141682]",
      "dest": "identifier: isEmpty [143169,143176]"
    },
    {
      "src": "identifier: str [239193,239196]",
      "dest": "identifier: str [240687,240690]"
    },
    {
      "src": "identifier: lastMatch [117563,117572]",
      "dest": "identifier: lastMatch [119057,119066]"
    },
    {
      "src": "local_variable_declaration [110730,110752]",
      "dest": "local_variable_declaration [112224,112246]"
    },
    {
      "src": "binary_expression [215516,215527]",
      "dest": "binary_expression [217010,217021]"
    },
    {
      "src": "object_creation_expression [158448,158533]",
      "dest": "object_creation_expression [159942,160027]"
    },
    {
      "src": "parenthesized_expression [220127,220152]",
      "dest": "parenthesized_expression [221621,221646]"
    },
    {
      "src": "type: String [33453,33459]",
      "dest": "type: String [33453,33459]"
    },
    {
      "src": "binary_expression [211324,211330]",
      "dest": "binary_expression [212818,212824]"
    },
    {
      "src": "identifier: ch1 [175214,175217]",
      "dest": "identifier: ch1 [176708,176711]"
    },
    {
      "src": "type: String [138699,138705]",
      "dest": "type: String [140193,140199]"
    },
    {
      "src": "type: int [235793,235796]",
      "dest": "type: int [237287,237290]"
    },
    {
      "src": "type: int [235607,235610]",
      "dest": "type: int [237101,237104]"
    },
    {
      "src": "logical_operator: || [228108,228110]",
      "dest": "logical_operator: || [229602,229604]"
    },
    {
      "src": "argument_list [105285,105295]",
      "dest": "argument_list [106779,106789]"
    },
    {
      "src": "expression_statement [145774,145798]",
      "dest": "expression_statement [147268,147292]"
    },
    {
      "src": "binary_expression [49422,49439]",
      "dest": "binary_expression [49422,49439]"
    },
    {
      "src": "type: int [104702,104705]",
      "dest": "type: int [106196,106199]"
    },
    {
      "src": "parenthesized_expression [104356,104375]",
      "dest": "parenthesized_expression [105850,105869]"
    },
    {
      "src": "if_statement [130756,130811]",
      "dest": "if_statement [132250,132305]"
    },
    {
      "src": "variable_declarator [190690,190710]",
      "dest": "variable_declarator [192184,192204]"
    },
    {
      "src": "binary_expression [220238,220250]",
      "dest": "binary_expression [221732,221744]"
    },
    {
      "src": "formal_parameter [50849,50864]",
      "dest": "formal_parameter [50849,50864]"
    },
    {
      "src": "identifier: sep [117855,117858]",
      "dest": "identifier: sep [119349,119352]"
    },
    {
      "src": "identifier: obj [132975,132978]",
      "dest": "identifier: obj [134469,134472]"
    },
    {
      "src": "\": \" [25746,25747]",
      "dest": "\": \" [25746,25747]"
    },
    {
      "src": "block [123059,124256]",
      "dest": "block [124553,125750]"
    },
    {
      "src": "if_statement [161871,162172]",
      "dest": "if_statement [163365,163666]"
    },
    {
      "src": "null_literal: null [7468,7472]",
      "dest": "null_literal: null [7468,7472]"
    },
    {
      "src": "type: int [39387,39390]",
      "dest": "type: int [39387,39390]"
    },
    {
      "src": "identifier: i [137208,137209]",
      "dest": "identifier: i [138702,138703]"
    },
    {
      "src": "formal_parameter [69716,69726]",
      "dest": "formal_parameter [71210,71220]"
    },
    {
      "src": "identifier: currentType [123347,123358]",
      "dest": "identifier: currentType [124841,124852]"
    },
    {
      "src": "argument_list [219675,219677]",
      "dest": "argument_list [221169,221171]"
    },
    {
      "src": "binary_expression [123135,123152]",
      "dest": "binary_expression [124629,124646]"
    },
    {
      "src": "identifier: j [57816,57817]",
      "dest": "identifier: j [54921,54922]"
    },
    {
      "src": "identifier: csLast [57584,57590]",
      "dest": "identifier: csLast [57924,57930]"
    },
    {
      "src": "identifier: cs [60938,60940]",
      "dest": "identifier: cs [61325,61327]"
    },
    {
      "src": "binary_expression [7476,7492]",
      "dest": "binary_expression [7476,7492]"
    },
    {
      "src": "return_statement [196847,197019]",
      "dest": "return_statement [198341,198513]"
    },
    {
      "src": "null_literal: null [71824,71828]",
      "dest": "null_literal: null [73318,73322]"
    },
    {
      "src": "identifier: tokenStart [124025,124035]",
      "dest": "identifier: tokenStart [125519,125529]"
    },
    {
      "src": "binary_expression [160734,160745]",
      "dest": "binary_expression [162228,162239]"
    },
    {
      "src": "affectation_operator: = [161051,161052]",
      "dest": "affectation_operator: = [162545,162546]"
    },
    {
      "src": "update_expression [203233,203236]",
      "dest": "update_expression [204727,204730]"
    },
    {
      "src": "logical_operator: || [69775,69777]",
      "dest": "logical_operator: || [71269,71271]"
    },
    {
      "src": "identifier: sz [70022,70024]",
      "dest": "identifier: sz [71516,71518]"
    },
    {
      "src": "identifier: searchList [155090,155100]",
      "dest": "identifier: searchList [156584,156594]"
    },
    {
      "src": "formal_parameter [130716,130730]",
      "dest": "formal_parameter [132210,132224]"
    },
    {
      "src": "block [39658,39705]",
      "dest": "block [39658,39705]"
    },
    {
      "src": "return_statement [213903,213954]",
      "dest": "return_statement [215397,215448]"
    },
    {
      "src": "type: char [132325,132329]",
      "dest": "type: char [133819,133823]"
    },
    {
      "src": "method_invocation [143456,143468]",
      "dest": "method_invocation [144950,144962]"
    },
    {
      "src": "identifier: first [132825,132830]",
      "dest": "identifier: first [134319,134324]"
    },
    {
      "src": "identifier: isEmpty [181469,181476]",
      "dest": "identifier: isEmpty [182963,182970]"
    },
    {
      "src": "affectation_operator: = [186074,186075]",
      "dest": "affectation_operator: = [187568,187569]"
    },
    {
      "src": "parenthesized_expression [143303,143336]",
      "dest": "parenthesized_expression [144797,144830]"
    },
    {
      "src": "method_invocation [119281,119292]",
      "dest": "method_invocation [120775,120786]"
    },
    {
      "src": "local_variable_declaration [123343,123394]",
      "dest": "local_variable_declaration [124837,124888]"
    },
    {
      "src": "return_statement [99744,99807]",
      "dest": "return_statement [101238,101301]"
    },
    {
      "src": "static: static [196624,196630]",
      "dest": "static: static [198118,198124]"
    },
    {
      "src": "identifier: end [76216,76219]",
      "dest": "identifier: end [77710,77713]"
    },
    {
      "src": "binary_expression [90799,90827]",
      "dest": "binary_expression [92293,92321]"
    },
    {
      "src": "parenthesized_expression [160690,160703]",
      "dest": "parenthesized_expression [162184,162197]"
    },
    {
      "src": "binary_expression [228663,228712]",
      "dest": "binary_expression [230157,230206]"
    },
    {
      "src": "if_statement [201976,202029]",
      "dest": "if_statement [203470,203523]"
    },
    {
      "src": "type: String[] [71782,71790]",
      "dest": "type: String[] [73276,73284]"
    },
    {
      "src": "identifier: text [152673,152677]",
      "dest": "identifier: text [154167,154171]"
    },
    {
      "src": "visibility: private [103981,103988]",
      "dest": "visibility: private [105475,105482]"
    },
    {
      "src": "identifier: list [91631,91635]",
      "dest": "identifier: list [93125,93129]"
    },
    {
      "src": "identifier: iterable [136294,136302]",
      "dest": "identifier: iterable [137788,137796]"
    },
    {
      "src": "type: String [73412,73418]",
      "dest": "type: String [74906,74912]"
    },
    {
      "src": "formal_parameters [137018,137030]",
      "dest": "formal_parameters [138512,138524]"
    },
    {
      "src": "null_literal: null [79820,79824]",
      "dest": "null_literal: null [81314,81318]"
    },
    {
      "src": "identifier: charAt [117076,117082]",
      "dest": "identifier: charAt [118570,118576]"
    },
    {
      "src": "arithmetic_operator: + [36568,36569]",
      "dest": "arithmetic_operator: + [36568,36569]"
    },
    {
      "src": "parenthesized_expression [215515,215528]",
      "dest": "parenthesized_expression [217009,217022]"
    },
    {
      "src": "identifier: text [149792,149796]",
      "dest": "identifier: text [151286,151290]"
    },
    {
      "src": "affectation_operator: = [198384,198385]",
      "dest": "affectation_operator: = [199878,199879]"
    },
    {
      "src": "method_invocation [11682,11691]",
      "dest": "method_invocation [11682,11691]"
    },
    {
      "src": "identifier: isEmpty [60822,60829]",
      "dest": "identifier: isEmpty [61209,61216]"
    },
    {
      "src": "identifier: append [195735,195741]",
      "dest": "identifier: append [197229,197235]"
    },
    {
      "src": "identifier: str [91224,91227]",
      "dest": "identifier: str [92718,92721]"
    },
    {
      "src": "type: String [135310,135316]",
      "dest": "type: String [136804,136810]"
    },
    {
      "src": "identifier: str [77405,77408]",
      "dest": "identifier: str [78899,78902]"
    },
    {
      "src": "type: int [71751,71754]",
      "dest": "type: int [73245,73248]"
    },
    {
      "src": "modifiers [71737,71750]",
      "dest": "modifiers [73231,73244]"
    },
    {
      "src": "comparison_operator: < [210291,210292]",
      "dest": "comparison_operator: < [211785,211786]"
    },
    {
      "src": "identifier: text [149958,149962]",
      "dest": "identifier: text [151452,151456]"
    },
    {
      "src": "return_statement [65268,65318]",
      "dest": "return_statement [66315,66365]"
    },
    {
      "src": "field_access [158217,158234]",
      "dest": "field_access [159711,159728]"
    },
    {
      "src": "expression_statement [118841,118875]",
      "dest": "expression_statement [120335,120369]"
    },
    {
      "src": "comparison_operator: == [174683,174685]",
      "dest": "comparison_operator: == [176177,176179]"
    },
    {
      "src": "type: int [161045,161048]",
      "dest": "type: int [162539,162542]"
    },
    {
      "src": "return_statement [219426,219438]",
      "dest": "return_statement [220920,220932]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [50007,50080]",
      "dest": "line_comment: //----------------------------------------------------------------------- [50007,50080]"
    },
    {
      "src": "method_declaration [177917,178305]",
      "dest": "method_declaration [179411,179799]"
    },
    {
      "src": "if_statement [105831,106076]",
      "dest": "if_statement [107325,107570]"
    },
    {
      "src": "parenthesized_expression [161999,162041]",
      "dest": "parenthesized_expression [163493,163535]"
    },
    {
      "src": "argument_list [134520,134522]",
      "dest": "argument_list [136014,136016]"
    },
    {
      "src": "type: int [66587,66590]",
      "dest": "type: int [67666,67669]"
    },
    {
      "src": "catch: catch [25828,25833]",
      "dest": "catch: catch [25828,25833]"
    },
    {
      "src": "parenthesized_expression [202114,202184]",
      "dest": "parenthesized_expression [203608,203678]"
    },
    {
      "src": "identifier: i [161551,161552]",
      "dest": "identifier: i [163045,163046]"
    },
    {
      "src": "parenthesized_expression [131434,131450]",
      "dest": "parenthesized_expression [132928,132944]"
    },
    {
      "src": "method_invocation [214630,214673]",
      "dest": "method_invocation [216124,216167]"
    },
    {
      "src": "return_statement [36256,36292]",
      "dest": "return_statement [36256,36292]"
    },
    {
      "src": "visibility: private [177917,177924]",
      "dest": "visibility: private [179411,179418]"
    },
    {
      "src": "local_variable_declaration [70045,70075]",
      "dest": "local_variable_declaration [71539,71569]"
    },
    {
      "src": "type: CharSequence [208044,208056]",
      "dest": "type: CharSequence [209538,209550]"
    },
    {
      "src": "false: false [227280,227285]",
      "dest": "false: false [228774,228779]"
    },
    {
      "src": "block [227154,229261]",
      "dest": "block [228648,230755]"
    },
    {
      "src": "identifier: upperCase [191862,191871]",
      "dest": "identifier: upperCase [193356,193365]"
    },
    {
      "src": "variable_declarator [91147,91154]",
      "dest": "variable_declarator [92641,92648]"
    },
    {
      "src": "block [76084,76121]",
      "dest": "block [77578,77615]"
    },
    {
      "src": "true: true [53312,53316]",
      "dest": "true: true [53312,53316]"
    },
    {
      "src": "formal_parameter [244081,244094]",
      "dest": "formal_parameter [245575,245588]"
    },
    {
      "src": "identifier: isEmpty [86321,86328]",
      "dest": "identifier: isEmpty [87815,87822]"
    },
    {
      "src": "if_statement [70088,70149]",
      "dest": "if_statement [71582,71643]"
    },
    {
      "src": "binary_expression [244145,244159]",
      "dest": "binary_expression [245639,245653]"
    },
    {
      "src": "null_literal: null [53042,53046]",
      "dest": "null_literal: null [53042,53046]"
    },
    {
      "src": "identifier: pads [180085,180089]",
      "dest": "identifier: pads [181579,181583]"
    },
    {
      "src": "method_declaration [127427,128124]",
      "dest": "method_declaration [128921,129618]"
    },
    {
      "src": "string_fragment: ... [219880,219883]",
      "dest": "string_fragment: ... [221374,221377]"
    },
    {
      "src": "if_statement [208071,208124]",
      "dest": "if_statement [209565,209618]"
    },
    {
      "src": "identifier: list [111342,111346]",
      "dest": "identifier: list [112836,112840]"
    },
    {
      "src": "identifier: length [83373,83379]",
      "dest": "identifier: length [84867,84873]"
    },
    {
      "src": "local_variable_declaration [57580,57606]",
      "dest": "local_variable_declaration [57920,57946]"
    },
    {
      "src": "assignment_expression [219794,219832]",
      "dest": "assignment_expression [221288,221326]"
    },
    {
      "src": "identifier: replaceEach [155336,155347]",
      "dest": "identifier: replaceEach [156830,156841]"
    },
    {
      "src": "formal_parameters [149784,149847]",
      "dest": "formal_parameters [151278,151341]"
    },
    {
      "src": "parenthesized_expression [30743,30757]",
      "dest": "parenthesized_expression [30743,30757]"
    },
    {
      "src": "identifier: shortestStrLen [228280,228294]",
      "dest": "identifier: shortestStrLen [229774,229788]"
    },
    {
      "src": "visibility: public [77223,77229]",
      "dest": "visibility: public [78717,78723]"
    },
    {
      "src": "type: CharSequence [235395,235407]",
      "dest": "type: CharSequence [236889,236901]"
    },
    {
      "src": "argument_list [169951,169956]",
      "dest": "argument_list [171445,171450]"
    },
    {
      "src": "type: int [137197,137200]",
      "dest": "type: int [138691,138694]"
    },
    {
      "src": "argument_list [62361,62374]",
      "dest": "argument_list [63100,63113]"
    },
    {
      "src": "comparison_operator: < [76197,76198]",
      "dest": "comparison_operator: < [77691,77692]"
    },
    {
      "src": "comparison_operator: > [244251,244252]",
      "dest": "comparison_operator: > [245745,245746]"
    },
    {
      "src": "argument_list [239192,239211]",
      "dest": "argument_list [240686,240705]"
    },
    {
      "src": "affectation_operator: = [159053,159054]",
      "dest": "affectation_operator: = [160547,160548]"
    },
    {
      "src": "identifier: lastIdx [170477,170484]",
      "dest": "identifier: lastIdx [171971,171978]"
    },
    {
      "src": "method_invocation [161603,161625]",
      "dest": "method_invocation [163097,163119]"
    },
    {
      "src": "decimal_integer_literal: 256 [132765,132768]",
      "dest": "decimal_integer_literal: 256 [134259,134262]"
    },
    {
      "src": "method_invocation [62524,62537]",
      "dest": "method_invocation [63263,63276]"
    },
    {
      "src": "expression_statement [18711,18719]",
      "dest": "expression_statement [18711,18719]"
    },
    {
      "src": "comparison_operator: == [174429,174431]",
      "dest": "comparison_operator: == [175923,175925]"
    },
    {
      "src": "method_declaration [101192,101361]",
      "dest": "method_declaration [102686,102855]"
    },
    {
      "src": "affectation_operator: = [91108,91109]",
      "dest": "affectation_operator: = [92602,92603]"
    },
    {
      "src": "identifier: i [203225,203226]",
      "dest": "identifier: i [204719,204720]"
    },
    {
      "src": "identifier: list [123984,123988]",
      "dest": "identifier: list [125478,125482]"
    },
    {
      "src": "identifier: indexOf [91370,91377]",
      "dest": "identifier: indexOf [92864,92871]"
    },
    {
      "src": "binary_expression [186134,186144]",
      "dest": "binary_expression [187628,187638]"
    },
    {
      "src": "block [46615,46662]",
      "dest": "block [46615,46662]"
    },
    {
      "src": "identifier: cs [60830,60832]",
      "dest": "identifier: cs [61217,61219]"
    },
    {
      "src": "identifier: strsLen [23050,23057]",
      "dest": "identifier: strsLen [23050,23057]"
    },
    {
      "src": "type: int [55970,55973]",
      "dest": "type: int [56316,56319]"
    },
    {
      "src": "formal_parameter [77261,77268]",
      "dest": "formal_parameter [78755,78762]"
    },
    {
      "src": "argument_list [134335,134342]",
      "dest": "argument_list [135829,135836]"
    },
    {
      "src": "binary_expression [23033,23045]",
      "dest": "binary_expression [23033,23045]"
    },
    {
      "src": "parenthesized_expression [76134,76145]",
      "dest": "parenthesized_expression [77628,77639]"
    },
    {
      "src": "block [241143,241313]",
      "dest": "block [242637,242807]"
    },
    {
      "src": "identifier: nsme [25487,25491]",
      "dest": "identifier: nsme [25487,25491]"
    },
    {
      "src": "variable_declarator [165985,166003]",
      "dest": "variable_declarator [167479,167497]"
    },
    {
      "src": "identifier: startsWith [239182,239192]",
      "dest": "identifier: startsWith [240676,240686]"
    },
    {
      "src": "block [202185,202230]",
      "dest": "block [203679,203724]"
    },
    {
      "src": "method_invocation [184183,184226]",
      "dest": "method_invocation [185677,185720]"
    },
    {
      "src": "array_access [236608,236612]",
      "dest": "array_access [238102,238106]"
    },
    {
      "src": "identifier: endIndex [131402,131410]",
      "dest": "identifier: endIndex [132896,132904]"
    },
    {
      "src": "identifier: i [49789,49790]",
      "dest": "identifier: i [49789,49790]"
    },
    {
      "src": "parenthesized_expression [73695,73706]",
      "dest": "parenthesized_expression [75189,75200]"
    },
    {
      "src": "argument_list [91041,91043]",
      "dest": "argument_list [92535,92537]"
    },
    {
      "src": "comparison_operator: == [81516,81518]",
      "dest": "comparison_operator: == [83010,83012]"
    },
    {
      "src": "identifier: anyStringNull [228135,228148]",
      "dest": "identifier: anyStringNull [229629,229642]"
    },
    {
      "src": "block [73707,73741]",
      "dest": "block [75201,75235]"
    },
    {
      "src": "binary_expression [223716,223728]",
      "dest": "binary_expression [225210,225222]"
    },
    {
      "src": "identifier: type [123617,123621]",
      "dest": "identifier: type [125111,125115]"
    },
    {
      "src": "expression_statement [118142,118176]",
      "dest": "expression_statement [119636,119670]"
    },
    {
      "src": "identifier: text [147150,147154]",
      "dest": "identifier: text [148644,148648]"
    },
    {
      "src": "identifier: str [105272,105275]",
      "dest": "identifier: str [106766,106769]"
    },
    {
      "src": "identifier: searchStrs [69778,69788]",
      "dest": "identifier: searchStrs [71272,71282]"
    },
    {
      "src": "comparison_operator: == [131206,131208]",
      "dest": "comparison_operator: == [132700,132702]"
    },
    {
      "src": "method_invocation [240996,241011]",
      "dest": "method_invocation [242490,242505]"
    },
    {
      "src": "return_statement [29536,29567]",
      "dest": "return_statement [29536,29567]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if a CharSequence is not empty (\"\") and not null.</p>\n     *\n     * <pre>\n     * StringUtils.isNotEmpty(null)      = false\n     * StringUtils.isNotEmpty(\"\")        = false\n     * StringUtils.isNotEmpty(\" \")       = true\n     * StringUtils.isNotEmpty(\"bob\")     = true\n     * StringUtils.isNotEmpty(\"  bob  \") = true\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if the CharSequence is not empty and not null\n     */ [7505,8006]",
      "dest": "block_comment:     \n     * <p>Checks if a CharSequence is not empty (\"\") and not null.</p>\n     *\n     * <pre>\n     * StringUtils.isNotEmpty(null)      = false\n     * StringUtils.isNotEmpty(\"\")        = false\n     * StringUtils.isNotEmpty(\" \")       = true\n     * StringUtils.isNotEmpty(\"bob\")     = true\n     * StringUtils.isNotEmpty(\"  bob  \") = true\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if the CharSequence is not empty and not null\n     */ [7505,8006]"
    },
    {
      "src": "identifier: separator [130824,130833]",
      "dest": "identifier: separator [132318,132327]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [162620,162693]",
      "dest": "line_comment: //----------------------------------------------------------------------- [164114,164187]"
    },
    {
      "src": "block [76202,76234]",
      "dest": "block [77696,77728]"
    },
    {
      "src": "block [57958,58206]",
      "dest": "block [55020,55236]"
    },
    {
      "src": "line_comment: // Chomping [168748,168759]",
      "dest": "line_comment: // Chomping [170242,170253]"
    },
    {
      "src": "expression_statement [185427,185440]",
      "dest": "expression_statement [186921,186934]"
    },
    {
      "src": "affectation_operator: = [69951,69952]",
      "dest": "affectation_operator: = [71445,71446]"
    },
    {
      "src": "visibility: public [20099,20105]",
      "dest": "visibility: public [20099,20105]"
    },
    {
      "src": "if_statement [110469,110522]",
      "dest": "if_statement [111963,112016]"
    },
    {
      "src": "block [185802,185852]",
      "dest": "block [187296,187346]"
    },
    {
      "src": "identifier: MAX_VALUE [69961,69970]",
      "dest": "identifier: MAX_VALUE [71455,71464]"
    },
    {
      "src": "identifier: length [244242,244248]",
      "dest": "identifier: length [245736,245742]"
    },
    {
      "src": "type: int [227369,227372]",
      "dest": "type: int [228863,228866]"
    },
    {
      "src": "method_invocation [225339,225351]",
      "dest": "method_invocation [226833,226845]"
    },
    {
      "src": "local_variable_declaration [81644,81677]",
      "dest": "local_variable_declaration [83138,83171]"
    },
    {
      "src": "static: static [239102,239108]",
      "dest": "static: static [240596,240602]"
    },
    {
      "src": "local_variable_declaration [159017,159081]",
      "dest": "local_variable_declaration [160511,160575]"
    },
    {
      "src": "parenthesized_expression [104270,104280]",
      "dest": "parenthesized_expression [105764,105774]"
    },
    {
      "src": "identifier: strLen [198184,198190]",
      "dest": "identifier: strLen [199678,199684]"
    },
    {
      "src": "identifier: str [137026,137029]",
      "dest": "identifier: str [138520,138523]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [70397,70412]",
      "dest": "identifier: INDEX_NOT_FOUND [71891,71906]"
    },
    {
      "src": "binary_expression [84822,84844]",
      "dest": "binary_expression [86316,86338]"
    },
    {
      "src": "identifier: len [77494,77497]",
      "dest": "identifier: len [78988,78991]"
    },
    {
      "src": "type: String [101266,101272]",
      "dest": "type: String [102760,102766]"
    },
    {
      "src": "null_literal: null [214605,214609]",
      "dest": "null_literal: null [216099,216103]"
    },
    {
      "src": "identifier: len [80006,80009]",
      "dest": "identifier: len [81500,81503]"
    },
    {
      "src": "visibility: public [5976,5982]",
      "dest": "visibility: public [5976,5982]"
    },
    {
      "src": "identifier: buf [160941,160944]",
      "dest": "identifier: buf [162435,162438]"
    },
    {
      "src": "comparison_operator: == [161653,161655]",
      "dest": "comparison_operator: == [163147,163149]"
    },
    {
      "src": "identifier: longestStrLen [228950,228963]",
      "dest": "identifier: longestStrLen [230444,230457]"
    },
    {
      "src": "type: StringBuilder [160927,160940]",
      "dest": "type: StringBuilder [162421,162434]"
    },
    {
      "src": "identifier: pos [86453,86456]",
      "dest": "identifier: pos [87947,87950]"
    },
    {
      "src": "null_literal: null [78453,78457]",
      "dest": "null_literal: null [79947,79951]"
    },
    {
      "src": "affectation_operator: = [236102,236103]",
      "dest": "affectation_operator: = [237596,237597]"
    },
    {
      "src": "variable_declarator [235797,235798]",
      "dest": "variable_declarator [237291,237292]"
    },
    {
      "src": "line_comment: // find the next earliest match [161363,161394]",
      "dest": "line_comment: // find the next earliest match [162857,162888]"
    },
    {
      "src": "affectation_operator: = [18495,18496]",
      "dest": "affectation_operator: = [18495,18496]"
    },
    {
      "src": "binary_expression [123604,123696]",
      "dest": "binary_expression [125098,125190]"
    },
    {
      "src": "assignment_expression [161914,161949]",
      "dest": "assignment_expression [163408,163443]"
    },
    {
      "src": "return_statement [14826,14864]",
      "dest": "return_statement [14826,14864]"
    },
    {
      "src": "identifier: str [91366,91369]",
      "dest": "identifier: str [92860,92863]"
    },
    {
      "src": "false: false [165763,165768]",
      "dest": "false: false [167257,167262]"
    },
    {
      "src": "comparison_operator: < [222068,222069]",
      "dest": "comparison_operator: < [223562,223563]"
    },
    {
      "src": "argument_list [68223,68225]",
      "dest": "argument_list [69717,69719]"
    },
    {
      "src": "return_statement [50940,50976]",
      "dest": "return_statement [50940,50976]"
    },
    {
      "src": "method_declaration [233703,236619]",
      "dest": "method_declaration [235197,238113]"
    },
    {
      "src": "formal_parameter [140266,140279]",
      "dest": "formal_parameter [141760,141773]"
    },
    {
      "src": "identifier: startsWith [238067,238077]",
      "dest": "identifier: startsWith [239561,239571]"
    },
    {
      "src": "decimal_integer_literal: 0 [76143,76144]",
      "dest": "decimal_integer_literal: 0 [77637,77638]"
    },
    {
      "src": "identifier: padStr [186029,186035]",
      "dest": "identifier: padStr [187523,187529]"
    },
    {
      "src": "variable_declarator [127866,127880]",
      "dest": "variable_declarator [129360,129374]"
    },
    {
      "src": "method_invocation [186180,186211]",
      "dest": "method_invocation [187674,187705]"
    },
    {
      "src": "affectation_operator: = [170048,170049]",
      "dest": "affectation_operator: = [171542,171543]"
    },
    {
      "src": "arithmetic_operator: + [80004,80005]",
      "dest": "arithmetic_operator: + [81498,81499]"
    },
    {
      "src": "identifier: lastIndexOf [46511,46522]",
      "dest": "identifier: lastIndexOf [46511,46522]"
    },
    {
      "src": "identifier: i [23200,23201]",
      "dest": "identifier: i [23200,23201]"
    },
    {
      "src": "block [170026,170202]",
      "dest": "block [171520,171696]"
    },
    {
      "src": "identifier: s [233790,233791]",
      "dest": "identifier: s [235284,235285]"
    },
    {
      "src": "null_literal: null [158152,158156]",
      "dest": "null_literal: null [159646,159650]"
    },
    {
      "src": "identifier: searchChar [29555,29565]",
      "dest": "identifier: searchChar [29555,29565]"
    },
    {
      "src": "method_invocation [141675,141690]",
      "dest": "method_invocation [143169,143184]"
    },
    {
      "src": "block [54729,54995]",
      "dest": "block [58033,58772]"
    },
    {
      "src": "identifier: isWhitespace [137250,137262]",
      "dest": "identifier: isWhitespace [138744,138756]"
    },
    {
      "src": "identifier: ArrayUtils [104302,104312]",
      "dest": "identifier: ArrayUtils [105796,105806]"
    },
    {
      "src": "identifier: start [89316,89321]",
      "dest": "identifier: start [90810,90815]"
    },
    {
      "src": "identifier: pos [145662,145665]",
      "dest": "identifier: pos [147156,147159]"
    },
    {
      "src": "local_variable_declaration [66677,66700]",
      "dest": "local_variable_declaration [67796,67819]"
    },
    {
      "src": "comparison_operator: == [209313,209315]",
      "dest": "comparison_operator: == [210807,210809]"
    },
    {
      "src": "block_comment:     \n     * <p>Case in-sensitive find of the last index within a String\n     * from the specified position.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * An empty (\"\") search String always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfIgnoreCase(null, *, *)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(*, null, *)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8)  = 7\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8)  = 5\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8) = 4\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9)  = 5\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1) = -1\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0)  = 0\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0)  = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.5\n     */ [47961,49304]",
      "dest": "block_comment:     \n     * <p>Case in-sensitive find of the last index within a String\n     * from the specified position.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * An empty (\"\") search String always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfIgnoreCase(null, *, *)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(*, null, *)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 8)  = 7\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 8)  = 5\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\", 8) = 4\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 9)  = 5\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", -1) = -1\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\", 0)  = 0\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\", 0)  = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.5\n     */ [47961,49304]"
    },
    {
      "src": "type: CharSequence [7428,7440]",
      "dest": "type: CharSequence [7428,7440]"
    },
    {
      "src": "object_creation_expression [158776,158946]",
      "dest": "object_creation_expression [160270,160440]"
    },
    {
      "src": "return_statement [28502,28567]",
      "dest": "return_statement [28502,28567]"
    },
    {
      "src": "identifier: searchChars [57552,57563]",
      "dest": "identifier: searchChars [57892,57903]"
    },
    {
      "src": "formal_parameter [212153,212163]",
      "dest": "formal_parameter [213647,213657]"
    },
    {
      "src": "type: String [81458,81464]",
      "dest": "type: String [82952,82958]"
    },
    {
      "src": "variable_declarator [228594,228606]",
      "dest": "variable_declarator [230088,230100]"
    },
    {
      "src": "local_variable_declaration [205761,205782]",
      "dest": "local_variable_declaration [207255,207276]"
    },
    {
      "src": "static: static [190442,190448]",
      "dest": "static: static [191936,191942]"
    },
    {
      "src": "affectation_operator: = [61072,61073]",
      "dest": "affectation_operator: = [61531,61532]"
    },
    {
      "src": "type: int [227112,227115]",
      "dest": "type: int [228606,228609]"
    },
    {
      "src": "variable_declarator [210247,210263]",
      "dest": "variable_declarator [211741,211757]"
    },
    {
      "src": "identifier: substring [171885,171894]",
      "dest": "identifier: substring [173379,173388]"
    },
    {
      "src": "parenthesized_expression [117213,117233]",
      "dest": "parenthesized_expression [118707,118727]"
    },
    {
      "src": "identifier: i [227886,227887]",
      "dest": "identifier: i [229380,229381]"
    },
    {
      "src": "assignment_expression [161335,161349]",
      "dest": "assignment_expression [162829,162843]"
    },
    {
      "src": "parenthesized_expression [202162,202183]",
      "dest": "parenthesized_expression [203656,203677]"
    },
    {
      "src": "update_expression [118685,118696]",
      "dest": "update_expression [120179,120190]"
    },
    {
      "src": "return_statement [228315,228324]",
      "dest": "return_statement [229809,229818]"
    },
    {
      "src": "line_comment: // [5780,5782]",
      "dest": "line_comment: // [5780,5782]"
    },
    {
      "src": "expression_statement [219693,219715]",
      "dest": "expression_statement [221187,221209]"
    },
    {
      "src": "argument_list [161162,161193]",
      "dest": "argument_list [162656,162687]"
    },
    {
      "src": "static: static [17068,17074]",
      "dest": "static: static [17068,17074]"
    },
    {
      "src": "affectation_operator: = [110539,110540]",
      "dest": "affectation_operator: = [112033,112034]"
    },
    {
      "src": "method_invocation [195707,195719]",
      "dest": "method_invocation [197201,197213]"
    },
    {
      "src": "block_comment:     \n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n     *\n     * <p>Specifically:\n     * <ul>\n     *   <li>If <code>str</code> is less than <code>maxWidth</code> characters\n     *       long, return it.</li>\n     *   <li>Else abbreviate it to <code>(substring(str, 0, max-3) + \"...\")</code>.</li>\n     *   <li>If <code>maxWidth</code> is less than <code>4</code>, throw an\n     *       <code>IllegalArgumentException</code>.</li>\n     *   <li>In no case will it return a String of length greater than\n     *       <code>maxWidth</code>.</li>\n     * </ul>\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *)      = null\n     * StringUtils.abbreviate(\"\", 4)        = \"\"\n     * StringUtils.abbreviate(\"abcdefg\", 6) = \"abc...\"\n     * StringUtils.abbreviate(\"abcdefg\", 7) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 8) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 4) = \"a...\"\n     * StringUtils.abbreviate(\"abcdefg\", 3) = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */ [215910,217293]",
      "dest": "block_comment:     \n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n     *\n     * <p>Specifically:\n     * <ul>\n     *   <li>If <code>str</code> is less than <code>maxWidth</code> characters\n     *       long, return it.</li>\n     *   <li>Else abbreviate it to <code>(substring(str, 0, max-3) + \"...\")</code>.</li>\n     *   <li>If <code>maxWidth</code> is less than <code>4</code>, throw an\n     *       <code>IllegalArgumentException</code>.</li>\n     *   <li>In no case will it return a String of length greater than\n     *       <code>maxWidth</code>.</li>\n     * </ul>\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *)      = null\n     * StringUtils.abbreviate(\"\", 4)        = \"\"\n     * StringUtils.abbreviate(\"abcdefg\", 6) = \"abc...\"\n     * StringUtils.abbreviate(\"abcdefg\", 7) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 8) = \"abcdefg\"\n     * StringUtils.abbreviate(\"abcdefg\", 4) = \"a...\"\n     * StringUtils.abbreviate(\"abcdefg\", 3) = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */ [217404,218787]"
    },
    {
      "src": "arithmetic_operator: - [143469,143470]",
      "dest": "arithmetic_operator: - [144963,144964]"
    },
    {
      "src": "type: String [89105,89111]",
      "dest": "type: String [90599,90605]"
    },
    {
      "src": "block [89449,89530]",
      "dest": "block [90943,91024]"
    },
    {
      "src": "visibility: public [213816,213822]",
      "dest": "visibility: public [215310,215316]"
    },
    {
      "src": "parenthesized_expression [58075,58115]",
      "dest": "parenthesized_expression [55108,55148]"
    },
    {
      "src": "affectation_operator: = [206965,206966]",
      "dest": "affectation_operator: = [208459,208460]"
    },
    {
      "src": "identifier: overlay [168085,168092]",
      "dest": "identifier: overlay [169579,169586]"
    },
    {
      "src": "logical_operator: || [23046,23048]",
      "dest": "logical_operator: || [23046,23048]"
    },
    {
      "src": "block [53287,53331]",
      "dest": "block [53287,53331]"
    },
    {
      "src": "type: int [79754,79757]",
      "dest": "type: int [81248,81251]"
    },
    {
      "src": "package: package [805,812]",
      "dest": "package: package [805,812]"
    },
    {
      "src": "variable_declarator [235760,235761]",
      "dest": "variable_declarator [237254,237255]"
    },
    {
      "src": "block [166264,166311]",
      "dest": "block [167758,167805]"
    },
    {
      "src": "type: String [122065,122071]",
      "dest": "type: String [123559,123565]"
    },
    {
      "src": "return_statement [176682,176709]",
      "dest": "return_statement [178176,178203]"
    },
    {
      "src": "formal_parameter [50837,50847]",
      "dest": "formal_parameter [50837,50847]"
    },
    {
      "src": "identifier: toLowerCase [194599,194610]",
      "dest": "identifier: toLowerCase [196093,196104]"
    },
    {
      "src": "method_invocation [185898,185935]",
      "dest": "method_invocation [187392,187429]"
    },
    {
      "src": "increment_operator: ++ [198402,198404]",
      "dest": "increment_operator: ++ [199896,199898]"
    },
    {
      "src": "identifier: strLen [8726,8732]",
      "dest": "identifier: strLen [8726,8732]"
    },
    {
      "src": "block [80012,80062]",
      "dest": "block [81506,81556]"
    },
    {
      "src": "return_statement [59615,59665]",
      "dest": "return_statement [60002,60052]"
    },
    {
      "src": "modifiers [125094,125107]",
      "dest": "modifiers [126588,126601]"
    },
    {
      "src": "method_invocation [231221,231244]",
      "dest": "method_invocation [232715,232738]"
    },
    {
      "src": "method_invocation [162349,162375]",
      "dest": "method_invocation [163843,163869]"
    },
    {
      "src": "visibility: public [29397,29403]",
      "dest": "visibility: public [29397,29403]"
    },
    {
      "src": "parenthesized_expression [228662,228713]",
      "dest": "parenthesized_expression [230156,230207]"
    },
    {
      "src": "formal_parameter [45082,45093]",
      "dest": "formal_parameter [45082,45093]"
    },
    {
      "src": "identifier: min [236262,236265]",
      "dest": "identifier: min [237756,237759]"
    },
    {
      "src": "binary_expression [206970,206976]",
      "dest": "binary_expression [208464,208470]"
    },
    {
      "src": "identifier: str [222112,222115]",
      "dest": "identifier: str [223606,223609]"
    },
    {
      "src": "method_invocation [84897,84918]",
      "dest": "method_invocation [86391,86412]"
    },
    {
      "src": "false: false [117575,117580]",
      "dest": "false: false [119069,119074]"
    },
    {
      "src": "parenthesized_expression [185395,185412]",
      "dest": "parenthesized_expression [186889,186906]"
    },
    {
      "src": "binary_expression [53050,53067]",
      "dest": "binary_expression [53050,53067]"
    },
    {
      "src": "if_statement [168303,168348]",
      "dest": "if_statement [169797,169842]"
    },
    {
      "src": "argument_list [192795,192803]",
      "dest": "argument_list [194289,194297]"
    },
    {
      "src": "identifier: startsWith [239731,239741]",
      "dest": "identifier: startsWith [241225,241235]"
    },
    {
      "src": "assignment_expression [111141,111158]",
      "dest": "assignment_expression [112635,112652]"
    },
    {
      "src": "argument_list [208238,208241]",
      "dest": "argument_list [209732,209735]"
    },
    {
      "src": "method_invocation [219739,219751]",
      "dest": "method_invocation [221233,221245]"
    },
    {
      "src": "identifier: i [8815,8816]",
      "dest": "identifier: i [8815,8816]"
    },
    {
      "src": "expression_statement [117370,117404]",
      "dest": "expression_statement [118864,118898]"
    },
    {
      "src": "string_literal [26251,26306]",
      "dest": "string_literal [26251,26306]"
    },
    {
      "src": "return_statement [29494,29517]",
      "dest": "return_statement [29494,29517]"
    },
    {
      "src": "type: StringBuilder [134198,134211]",
      "dest": "type: StringBuilder [135692,135705]"
    },
    {
      "src": "modifiers [195404,195417]",
      "dest": "modifiers [196898,196911]"
    },
    {
      "src": "formal_parameter [215482,215500]",
      "dest": "formal_parameter [216976,216994]"
    },
    {
      "src": "type: int [90892,90895]",
      "dest": "type: int [92386,92389]"
    },
    {
      "src": "static: static [43309,43315]",
      "dest": "static: static [43309,43315]"
    },
    {
      "src": "identifier: cs1 [27487,27490]",
      "dest": "identifier: cs1 [27487,27490]"
    },
    {
      "src": "identifier: substring [150481,150490]",
      "dest": "identifier: substring [151975,151984]"
    },
    {
      "src": "identifier: str [80033,80036]",
      "dest": "identifier: str [81527,81530]"
    },
    {
      "src": "identifier: Character [204421,204430]",
      "dest": "identifier: Character [205915,205924]"
    },
    {
      "src": "logical_operator: || [68105,68107]",
      "dest": "logical_operator: || [69599,69601]"
    },
    {
      "src": "modifiers [10624,10637]",
      "dest": "modifiers [10624,10637]"
    },
    {
      "src": "local_variable_declaration [228451,228469]",
      "dest": "local_variable_declaration [229945,229963]"
    },
    {
      "src": "expression_statement [132933,132955]",
      "dest": "expression_statement [134427,134449]"
    },
    {
      "src": "return_statement [208101,208114]",
      "dest": "return_statement [209595,209608]"
    },
    {
      "src": "identifier: tokenStart [123839,123849]",
      "dest": "identifier: tokenStart [125333,125343]"
    },
    {
      "src": "decimal_floating_point_literal: 1.6f [24004,24008]",
      "dest": "decimal_floating_point_literal: 1.6f [24004,24008]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [55011,55026]",
      "dest": "identifier: INDEX_NOT_FOUND [55357,55372]"
    },
    {
      "src": "%: % [182210,182211]",
      "dest": "%: % [183704,183705]"
    },
    {
      "src": "if_statement [51872,51947]",
      "dest": "if_statement [51872,51947]"
    },
    {
      "src": "identifier: contains [50828,50836]",
      "dest": "identifier: contains [50828,50836]"
    },
    {
      "src": "field_access [90965,90994]",
      "dest": "field_access [92459,92488]"
    },
    {
      "src": "formal_parameter [33483,33495]",
      "dest": "formal_parameter [33483,33495]"
    },
    {
      "src": "argument_list [202056,202058]",
      "dest": "argument_list [203550,203552]"
    },
    {
      "src": "formal_parameter [30687,30697]",
      "dest": "formal_parameter [30687,30697]"
    },
    {
      "src": "identifier: str [213013,213016]",
      "dest": "identifier: str [214507,214510]"
    },
    {
      "src": "if_statement [77342,77392]",
      "dest": "if_statement [78836,78886]"
    },
    {
      "src": "binary_expression [219739,219760]",
      "dest": "binary_expression [221233,221254]"
    },
    {
      "src": "identifier: replace [149777,149784]",
      "dest": "identifier: replace [151271,151278]"
    },
    {
      "src": "identifier: startPos [42268,42276]",
      "dest": "identifier: startPos [42268,42276]"
    },
    {
      "src": "parenthesized_expression [63869,63898]",
      "dest": "parenthesized_expression [64916,64945]"
    },
    {
      "src": "identifier: separatorLength [106131,106146]",
      "dest": "identifier: separatorLength [107625,107640]"
    },
    {
      "src": "identifier: builder [222361,222368]",
      "dest": "identifier: builder [223855,223862]"
    },
    {
      "src": "if_statement [179979,180032]",
      "dest": "if_statement [181473,181526]"
    },
    {
      "src": "affectation_operator: = [79956,79957]",
      "dest": "affectation_operator: = [81450,81451]"
    },
    {
      "src": "identifier: searchStr [51851,51860]",
      "dest": "identifier: searchStr [51851,51860]"
    },
    {
      "src": "block [145756,145812]",
      "dest": "block [147250,147306]"
    },
    {
      "src": "line_comment: // The following is equivalent to beg = end + (separatorLength - 1) + 1, [105394,105466]",
      "dest": "line_comment: // The following is equivalent to beg = end + (separatorLength - 1) + 1, [106888,106960]"
    },
    {
      "src": "method_invocation [81573,81591]",
      "dest": "method_invocation [83067,83085]"
    },
    {
      "src": "identifier: i [62613,62614]",
      "dest": "identifier: i [63642,63643]"
    },
    {
      "src": "parenthesized_expression [166136,166164]",
      "dest": "parenthesized_expression [167630,167658]"
    },
    {
      "src": "identifier: tmp [70162,70165]",
      "dest": "identifier: tmp [71656,71659]"
    },
    {
      "src": "modifiers [148227,148240]",
      "dest": "modifiers [149721,149734]"
    },
    {
      "src": "method_invocation [143471,143486]",
      "dest": "method_invocation [144965,144980]"
    },
    {
      "src": "identifier: cs [68094,68096]",
      "dest": "identifier: cs [69588,69590]"
    },
    {
      "src": "type: String [96744,96750]",
      "dest": "type: String [98238,98244]"
    },
    {
      "src": "block [72029,72270]",
      "dest": "block [73523,73764]"
    },
    {
      "src": "return_statement [225038,225061]",
      "dest": "return_statement [226532,226555]"
    },
    {
      "src": "binary_expression [47815,47832]",
      "dest": "binary_expression [47815,47832]"
    },
    {
      "src": "identifier: size [183071,183075]",
      "dest": "identifier: size [184565,184569]"
    },
    {
      "src": "string_fragment: NFD [24798,24801]",
      "dest": "string_fragment: NFD [24798,24801]"
    },
    {
      "src": "formal_parameter [36074,36091]",
      "dest": "formal_parameter [36074,36091]"
    },
    {
      "src": "parenthesized_expression [174670,174711]",
      "dest": "parenthesized_expression [176164,176205]"
    },
    {
      "src": "variable_declarator [185973,185997]",
      "dest": "variable_declarator [187467,187491]"
    },
    {
      "src": "false: false [205914,205919]",
      "dest": "false: false [207408,207413]"
    },
    {
      "src": "increment_operator: ++ [175635,175637]",
      "dest": "increment_operator: ++ [177129,177131]"
    },
    {
      "src": "binary_expression [54837,54857]",
      "dest": "binary_expression [58144,58164]"
    },
    {
      "src": "decimal_integer_literal: 0 [236037,236038]",
      "dest": "decimal_integer_literal: 0 [237531,237532]"
    },
    {
      "src": "type: String [56002,56008]",
      "dest": "type: String [56348,56354]"
    },
    {
      "src": "formal_parameter [148290,148308]",
      "dest": "formal_parameter [149784,149802]"
    },
    {
      "src": "block_comment:     \n     * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n     *\n     * @see java.lang.String#startsWith(String)\n     * @param str  the String to check, may be null\n     * @param prefix the prefix to find, may be null\n     * @param ignoreCase inidicates whether the compare should ignore case\n     *  (case insensitive) or not.\n     * @return <code>true</code> if the String starts with the prefix or\n     *  both <code>null</code>\n     */ [239224,239703]",
      "dest": "block_comment:     \n     * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n     *\n     * @see java.lang.String#startsWith(String)\n     * @param str  the String to check, may be null\n     * @param prefix the prefix to find, may be null\n     * @param ignoreCase inidicates whether the compare should ignore case\n     *  (case insensitive) or not.\n     * @return <code>true</code> if the String starts with the prefix or\n     *  both <code>null</code>\n     */ [240718,241197]"
    },
    {
      "src": "modifiers [239095,239108]",
      "dest": "modifiers [240589,240602]"
    },
    {
      "src": "method_invocation [222376,222404]",
      "dest": "method_invocation [223870,223898]"
    },
    {
      "src": "method_declaration [57318,58407]",
      "dest": "method_declaration [57664,58800]"
    },
    {
      "src": "\": \" [24797,24798]",
      "dest": "\": \" [24797,24798]"
    },
    {
      "src": "if_statement [209271,209369]",
      "dest": "if_statement [210765,210863]"
    },
    {
      "src": "method_invocation [79983,79995]",
      "dest": "method_invocation [81477,81489]"
    },
    {
      "src": "string_literal [25909,25971]",
      "dest": "string_literal [25909,25971]"
    },
    {
      "src": "identifier: length [210255,210261]",
      "dest": "identifier: length [211749,211755]"
    },
    {
      "src": "if_statement [132601,132685]",
      "dest": "if_statement [134095,134179]"
    },
    {
      "src": "identifier: length [137116,137122]",
      "dest": "identifier: length [138610,138616]"
    },
    {
      "src": "identifier: length [225363,225369]",
      "dest": "identifier: length [226857,226863]"
    },
    {
      "src": "logical_operator: && [123614,123616]",
      "dest": "logical_operator: && [125108,125110]"
    },
    {
      "src": "modifiers [176551,176564]",
      "dest": "modifiers [178045,178058]"
    },
    {
      "src": "return_statement [181791,181836]",
      "dest": "return_statement [183285,183330]"
    },
    {
      "src": "formal_parameters [192673,192700]",
      "dest": "formal_parameters [194167,194194]"
    },
    {
      "src": "type: boolean [238059,238066]",
      "dest": "type: boolean [239553,239560]"
    },
    {
      "src": "visibility: public [227098,227104]",
      "dest": "visibility: public [228592,228598]"
    },
    {
      "src": "argument_list [28560,28566]",
      "dest": "argument_list [28560,28566]"
    },
    {
      "src": "identifier: ordinal [45086,45093]",
      "dest": "identifier: ordinal [45086,45093]"
    },
    {
      "src": "identifier: lastIndexOf [72170,72181]",
      "dest": "identifier: lastIndexOf [73664,73675]"
    },
    {
      "src": "modifiers [60739,60752]",
      "dest": "modifiers [61126,61139]"
    },
    {
      "src": "identifier: chomp [169912,169917]",
      "dest": "identifier: chomp [171406,171411]"
    },
    {
      "src": "local_variable_declaration [199871,199883]",
      "dest": "local_variable_declaration [201365,201377]"
    },
    {
      "src": "identifier: length [127776,127782]",
      "dest": "identifier: length [129270,129276]"
    },
    {
      "src": "type: boolean [244096,244103]",
      "dest": "type: boolean [245590,245597]"
    },
    {
      "src": "binary_expression [20206,20231]",
      "dest": "binary_expression [20206,20231]"
    },
    {
      "src": "return_statement [37829,37873]",
      "dest": "return_statement [37829,37873]"
    },
    {
      "src": "return_statement [30772,30795]",
      "dest": "return_statement [30772,30795]"
    },
    {
      "src": "argument_list [196899,196936]",
      "dest": "argument_list [198393,198430]"
    },
    {
      "src": "binary_expression [150062,150084]",
      "dest": "binary_expression [151556,151578]"
    },
    {
      "src": "identifier: toArray [111347,111354]",
      "dest": "identifier: toArray [112841,112848]"
    },
    {
      "src": "identifier: suffix [243492,243498]",
      "dest": "identifier: suffix [244986,244992]"
    },
    {
      "src": "block [117234,117345]",
      "dest": "block [118728,118839]"
    },
    {
      "src": "binary_expression [174671,174687]",
      "dest": "binary_expression [176165,176181]"
    },
    {
      "src": "comparison_operator: == [43401,43403]",
      "dest": "comparison_operator: == [43401,43403]"
    },
    {
      "src": "update_expression [199963,199970]",
      "dest": "update_expression [201457,201464]"
    },
    {
      "src": "block [211401,211446]",
      "dest": "block [212895,212940]"
    },
    {
      "src": "continue: continue [70247,70255]",
      "dest": "continue: continue [71741,71749]"
    },
    {
      "src": "identifier: ordinalIndexOf [35110,35124]",
      "dest": "identifier: ordinalIndexOf [35110,35124]"
    },
    {
      "src": "line_comment: // ContainsAny [56190,56204]",
      "dest": "line_comment: // ContainsAny [56536,56550]"
    },
    {
      "src": "increment_operator: ++ [118266,118268]",
      "dest": "increment_operator: ++ [119760,119762]"
    },
    {
      "src": "affectation_operator: = [117178,117179]",
      "dest": "affectation_operator: = [118672,118673]"
    },
    {
      "src": "identifier: indexOf [30679,30686]",
      "dest": "identifier: indexOf [30679,30686]"
    },
    {
      "src": "formal_parameter [147105,147123]",
      "dest": "formal_parameter [148599,148617]"
    },
    {
      "src": "update_expression [111198,111201]",
      "dest": "update_expression [112692,112695]"
    },
    {
      "src": "unary_expression [144690,144692]",
      "dest": "unary_expression [146184,146186]"
    },
    {
      "src": "binary_expression [181860,181874]",
      "dest": "binary_expression [183354,183368]"
    },
    {
      "src": "method_invocation [204421,204460]",
      "dest": "method_invocation [205915,205954]"
    },
    {
      "src": "identifier: lastIndexOfIgnoreCase [47734,47755]",
      "dest": "identifier: lastIndexOfIgnoreCase [47734,47755]"
    },
    {
      "src": "identifier: start [168212,168217]",
      "dest": "identifier: start [169706,169711]"
    },
    {
      "src": "identifier: substring [168622,168631]",
      "dest": "identifier: substring [170116,170125]"
    },
    {
      "src": "static: static [217305,217311]",
      "dest": "static: static [218799,218805]"
    },
    {
      "src": "formal_parameter [147084,147103]",
      "dest": "formal_parameter [148578,148597]"
    },
    {
      "src": "update_expression [131412,131415]",
      "dest": "update_expression [132906,132909]"
    },
    {
      "src": "type: String [62292,62298]",
      "dest": "type: String [63031,63037]"
    },
    {
      "src": "binary_expression [123655,123696]",
      "dest": "binary_expression [125149,125190]"
    },
    {
      "src": "argument_list [57410,57414]",
      "dest": "argument_list [57750,57754]"
    },
    {
      "src": "identifier: i [61027,61028]",
      "dest": "identifier: i [61486,61487]"
    },
    {
      "src": "false: false [209173,209178]",
      "dest": "false: false [210667,210672]"
    },
    {
      "src": "method_declaration [223644,223991]",
      "dest": "method_declaration [225138,225485]"
    },
    {
      "src": "if_statement [193709,193762]",
      "dest": "if_statement [195203,195256]"
    },
    {
      "src": "block_comment:     \n     * <p>Strips whitespace from the start and end of a String.</p>\n     *\n     * <p>This is similar to {@link #trim(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.strip(null)     = null\n     * StringUtils.strip(\"\")       = \"\"\n     * StringUtils.strip(\"   \")    = \"\"\n     * StringUtils.strip(\"abc\")    = \"abc\"\n     * StringUtils.strip(\"  abc\")  = \"abc\"\n     * StringUtils.strip(\"abc  \")  = \"abc\"\n     * StringUtils.strip(\" abc \")  = \"abc\"\n     * StringUtils.strip(\" ab c \") = \"ab c\"\n     * </pre>\n     *\n     * @param str  the String to remove whitespace from, may be null\n     * @return the stripped String, <code>null</code> if null String input\n     */ [12811,13650]",
      "dest": "block_comment:     \n     * <p>Strips whitespace from the start and end of a String.</p>\n     *\n     * <p>This is similar to {@link #trim(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.strip(null)     = null\n     * StringUtils.strip(\"\")       = \"\"\n     * StringUtils.strip(\"   \")    = \"\"\n     * StringUtils.strip(\"abc\")    = \"abc\"\n     * StringUtils.strip(\"  abc\")  = \"abc\"\n     * StringUtils.strip(\"abc  \")  = \"abc\"\n     * StringUtils.strip(\" abc \")  = \"abc\"\n     * StringUtils.strip(\" ab c \") = \"ab c\"\n     * </pre>\n     *\n     * @param str  the String to remove whitespace from, may be null\n     * @return the stripped String, <code>null</code> if null String input\n     */ [12811,13650]"
    },
    {
      "src": "visibility: public [183863,183869]",
      "dest": "visibility: public [185357,185363]"
    },
    {
      "src": "identifier: str [185290,185293]",
      "dest": "identifier: str [186784,186787]"
    },
    {
      "src": "decimal_integer_literal: 1 [185680,185681]",
      "dest": "decimal_integer_literal: 1 [187174,187175]"
    },
    {
      "src": "local_variable_declaration [24561,24676]",
      "dest": "local_variable_declaration [24561,24676]"
    },
    {
      "src": "formal_parameter [93906,93916]",
      "dest": "formal_parameter [95400,95410]"
    },
    {
      "src": "update_expression [18711,18718]",
      "dest": "update_expression [18711,18718]"
    },
    {
      "src": "identifier: offset [219892,219898]",
      "dest": "identifier: offset [221386,221392]"
    },
    {
      "src": "binary_expression [39415,39447]",
      "dest": "binary_expression [39415,39447]"
    },
    {
      "src": "identifier: _d [236448,236450]",
      "dest": "identifier: _d [237942,237944]"
    },
    {
      "src": "identifier: Character [198506,198515]",
      "dest": "identifier: Character [200000,200009]"
    },
    {
      "src": "binary_expression [89385,89406]",
      "dest": "binary_expression [90879,90900]"
    },
    {
      "src": "identifier: anyStringNull [227264,227277]",
      "dest": "identifier: anyStringNull [228758,228771]"
    },
    {
      "src": "if_statement [132821,132882]",
      "dest": "if_statement [134315,134376]"
    },
    {
      "src": "if_statement [123069,123122]",
      "dest": "if_statement [124563,124616]"
    },
    {
      "src": "block [25381,25507]",
      "dest": "block [25381,25507]"
    },
    {
      "src": "decimal_integer_literal: 1 [173167,173168]",
      "dest": "decimal_integer_literal: 1 [174661,174662]"
    },
    {
      "src": "parenthesized_expression [86320,86334]",
      "dest": "parenthesized_expression [87814,87828]"
    },
    {
      "src": "argument_list [175488,175497]",
      "dest": "argument_list [176982,176991]"
    },
    {
      "src": "decimal_integer_literal: 1 [236065,236066]",
      "dest": "decimal_integer_literal: 1 [237559,237560]"
    },
    {
      "src": "line_comment: // NOTE: logic duplicated above END [162199,162234]",
      "dest": "line_comment: // NOTE: logic duplicated above END [163693,163728]"
    },
    {
      "src": "identifier: str [143404,143407]",
      "dest": "identifier: str [144898,144901]"
    },
    {
      "src": "!: ! [132494,132495]",
      "dest": "!: ! [133988,133989]"
    },
    {
      "src": "block [144611,144646]",
      "dest": "block [146105,146140]"
    },
    {
      "src": "return_statement [64049,64062]",
      "dest": "return_statement [65096,65109]"
    },
    {
      "src": "identifier: i [128059,128060]",
      "dest": "identifier: i [129553,129554]"
    },
    {
      "src": "while_statement [20521,20642]",
      "dest": "while_statement [20521,20642]"
    },
    {
      "src": "identifier: max [150316,150319]",
      "dest": "identifier: max [151810,151813]"
    },
    {
      "src": "argument_list [168733,168735]",
      "dest": "argument_list [170227,170229]"
    },
    {
      "src": "binary_expression [36562,36571]",
      "dest": "binary_expression [36562,36571]"
    },
    {
      "src": "method_invocation [23231,23257]",
      "dest": "method_invocation [23231,23257]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode letters, digits\n     * or space (<code>' '</code>).</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphanumeric(null)   = false\n     * StringUtils.isAlphanumeric(\"\")     = true\n     * StringUtils.isAlphanumeric(\"  \")   = true\n     * StringUtils.isAlphanumeric(\"abc\")  = true\n     * StringUtils.isAlphanumeric(\"ab c\") = true\n     * StringUtils.isAlphanumeric(\"ab2c\") = true\n     * StringUtils.isAlphanumeric(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains letters, digits or space,\n     *  and is non-null\n     */ [203394,204207]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode letters, digits\n     * or space (<code>' '</code>).</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphanumeric(null)   = false\n     * StringUtils.isAlphanumeric(\"\")     = true\n     * StringUtils.isAlphanumeric(\"  \")   = true\n     * StringUtils.isAlphanumeric(\"abc\")  = true\n     * StringUtils.isAlphanumeric(\"ab c\") = true\n     * StringUtils.isAlphanumeric(\"ab2c\") = true\n     * StringUtils.isAlphanumeric(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains letters, digits or space,\n     *  and is non-null\n     */ [204888,205701]"
    },
    {
      "src": "identifier: remove [141815,141821]",
      "dest": "identifier: remove [143309,143315]"
    },
    {
      "src": "identifier: remove [144602,144608]",
      "dest": "identifier: remove [146096,146102]"
    },
    {
      "src": "decimal_integer_literal: 1 [161320,161321]",
      "dest": "decimal_integer_literal: 1 [162814,162815]"
    },
    {
      "src": "parenthesized_expression [84691,84727]",
      "dest": "parenthesized_expression [86185,86221]"
    },
    {
      "src": "argument_list [185732,185761]",
      "dest": "argument_list [187226,187255]"
    },
    {
      "src": "affectation_operator: = [198704,198705]",
      "dest": "affectation_operator: = [200198,200199]"
    },
    {
      "src": "comparison_operator: < [70020,70021]",
      "dest": "comparison_operator: < [71514,71515]"
    },
    {
      "src": "identifier: length [14837,14843]",
      "dest": "identifier: length [14837,14843]"
    },
    {
      "src": "identifier: indexOf [62567,62574]",
      "dest": "identifier: indexOf [63320,63327]"
    },
    {
      "src": "decimal_integer_literal: 2 [222087,222088]",
      "dest": "decimal_integer_literal: 2 [223581,223582]"
    },
    {
      "src": "argument_list [91131,91133]",
      "dest": "argument_list [92625,92627]"
    },
    {
      "src": "line_comment: // handle null, zero and one elements before building a buffer [133823,133885]",
      "dest": "line_comment: // handle null, zero and one elements before building a buffer [135317,135379]"
    },
    {
      "src": "comparison_operator: == [127732,127734]",
      "dest": "comparison_operator: == [129226,129228]"
    },
    {
      "src": "binary_expression [222154,222176]",
      "dest": "binary_expression [223648,223670]"
    },
    {
      "src": "array_access [182199,182219]",
      "dest": "array_access [183693,183713]"
    },
    {
      "src": "return_statement [25113,25169]",
      "dest": "return_statement [25113,25169]"
    },
    {
      "src": "comparison_operator: == [201983,201985]",
      "dest": "comparison_operator: == [203477,203479]"
    },
    {
      "src": "identifier: padLen [185869,185875]",
      "dest": "identifier: padLen [187363,187369]"
    },
    {
      "src": "identifier: css [228663,228666]",
      "dest": "identifier: css [230157,230160]"
    },
    {
      "src": "null_literal: null [110480,110484]",
      "dest": "null_literal: null [111974,111978]"
    },
    {
      "src": "formal_parameters [127452,127514]",
      "dest": "formal_parameters [128946,129008]"
    },
    {
      "src": "decimal_integer_literal: 1 [161022,161023]",
      "dest": "decimal_integer_literal: 1 [162516,162517]"
    },
    {
      "src": "modifiers [165481,165494]",
      "dest": "modifiers [166975,166988]"
    },
    {
      "src": "identifier: toUpperCase [192784,192795]",
      "dest": "identifier: toUpperCase [194278,194289]"
    },
    {
      "src": "identifier: validChars [65202,65212]",
      "dest": "identifier: validChars [66249,66259]"
    },
    {
      "src": "argument_list [181593,181595]",
      "dest": "argument_list [183087,183089]"
    },
    {
      "src": "null_literal: null [239828,239832]",
      "dest": "null_literal: null [241322,241326]"
    },
    {
      "src": "argument_list [181907,181915]",
      "dest": "argument_list [183401,183409]"
    },
    {
      "src": "visibility: public [174312,174318]",
      "dest": "visibility: public [175806,175812]"
    },
    {
      "src": "formal_parameters [172962,172974]",
      "dest": "formal_parameters [174456,174468]"
    },
    {
      "src": "identifier: startPos [49501,49509]",
      "dest": "identifier: startPos [49501,49509]"
    },
    {
      "src": "if_statement [63945,64003]",
      "dest": "if_statement [64992,65050]"
    },
    {
      "src": "identifier: str [96739,96742]",
      "dest": "identifier: str [98233,98236]"
    },
    {
      "src": "if_statement [168241,168294]",
      "dest": "if_statement [169735,169788]"
    },
    {
      "src": "variable_declarator [185536,185556]",
      "dest": "variable_declarator [187030,187050]"
    },
    {
      "src": "identifier: i [236063,236064]",
      "dest": "identifier: i [237557,237558]"
    },
    {
      "src": "update_expression [178221,178224]",
      "dest": "update_expression [179715,179718]"
    },
    {
      "src": "decimal_integer_literal: 0 [190537,190538]",
      "dest": "decimal_integer_literal: 0 [192031,192032]"
    },
    {
      "src": "argument_list [56146,56177]",
      "dest": "argument_list [56492,56523]"
    },
    {
      "src": "local_variable_declaration [20170,20178]",
      "dest": "local_variable_declaration [20170,20178]"
    },
    {
      "src": "type: String [196631,196637]",
      "dest": "type: String [198125,198131]"
    },
    {
      "src": "assignment_expression [111024,111040]",
      "dest": "assignment_expression [112518,112534]"
    },
    {
      "src": "argument_list [199783,199788]",
      "dest": "argument_list [201277,201282]"
    },
    {
      "src": "identifier: padStr [185472,185478]",
      "dest": "identifier: padStr [186966,186972]"
    },
    {
      "src": "formal_parameters [46522,46566]",
      "dest": "formal_parameters [46522,46566]"
    },
    {
      "src": "decimal_integer_literal: 0 [231678,231679]",
      "dest": "decimal_integer_literal: 0 [233172,233173]"
    },
    {
      "src": "assignment_expression [150287,150337]",
      "dest": "assignment_expression [151781,151831]"
    },
    {
      "src": "final: final [178144,178149]",
      "dest": "final: final [179638,179643]"
    },
    {
      "src": "identifier: str [141667,141670]",
      "dest": "identifier: str [143161,143164]"
    },
    {
      "src": "identifier: str [47935,47938]",
      "dest": "identifier: str [47935,47938]"
    },
    {
      "src": "variable_declarator [62519,62537]",
      "dest": "variable_declarator [63258,63276]"
    },
    {
      "src": "return_statement [116595,116607]",
      "dest": "return_statement [118089,118101]"
    },
    {
      "src": "modifiers [35092,35105]",
      "dest": "modifiers [35092,35105]"
    },
    {
      "src": "identifier: searchStrings [241116,241129]",
      "dest": "identifier: searchStrings [242610,242623]"
    },
    {
      "src": "local_variable_declaration [132727,132770]",
      "dest": "local_variable_declaration [134221,134264]"
    },
    {
      "src": "type: String [29423,29429]",
      "dest": "type: String [29423,29429]"
    },
    {
      "src": "comparison_operator: == [202149,202151]",
      "dest": "comparison_operator: == [203643,203645]"
    },
    {
      "src": "binary_expression [176649,176666]",
      "dest": "binary_expression [178143,178160]"
    },
    {
      "src": "identifier: m [235980,235981]",
      "dest": "identifier: m [237474,237475]"
    },
    {
      "src": "identifier: i [227961,227962]",
      "dest": "identifier: i [229455,229456]"
    },
    {
      "src": "method_invocation [39718,39736]",
      "dest": "method_invocation [39718,39736]"
    },
    {
      "src": "method_invocation [25120,25153]",
      "dest": "method_invocation [25120,25153]"
    },
    {
      "src": "?: ? [11720,11721]",
      "dest": "?: ? [11720,11721]"
    },
    {
      "src": "identifier: cs [66436,66438]",
      "dest": "identifier: cs [67483,67485]"
    },
    {
      "src": "identifier: pos [80000,80003]",
      "dest": "identifier: pos [81494,81497]"
    },
    {
      "src": "modifiers [144509,144522]",
      "dest": "modifiers [146003,146016]"
    },
    {
      "src": "argument_list [12701,12703]",
      "dest": "argument_list [12701,12703]"
    },
    {
      "src": "argument_list [54523,54527]",
      "dest": "argument_list [54523,54527]"
    },
    {
      "src": "identifier: str [220292,220295]",
      "dest": "identifier: str [221786,221789]"
    },
    {
      "src": "identifier: buf [132741,132744]",
      "dest": "identifier: buf [134235,134238]"
    },
    {
      "src": "visibility: public [179903,179909]",
      "dest": "visibility: public [181397,181403]"
    },
    {
      "src": "parenthesized_expression [195548,195577]",
      "dest": "parenthesized_expression [197042,197071]"
    },
    {
      "src": "decimal_integer_literal: 1 [57604,57605]",
      "dest": "decimal_integer_literal: 1 [57944,57945]"
    },
    {
      "src": "identifier: str [184283,184286]",
      "dest": "identifier: str [185777,185780]"
    },
    {
      "src": "formal_parameter [231086,231099]",
      "dest": "formal_parameter [232580,232593]"
    },
    {
      "src": "argument_list [25263,25331]",
      "dest": "argument_list [25263,25331]"
    },
    {
      "src": "binary_expression [178082,178123]",
      "dest": "binary_expression [179576,179617]"
    },
    {
      "src": "identifier: i [117496,117497]",
      "dest": "identifier: i [118990,118991]"
    },
    {
      "src": "identifier: text [150015,150019]",
      "dest": "identifier: text [151509,151513]"
    },
    {
      "src": "identifier: isEmpty [143304,143311]",
      "dest": "identifier: isEmpty [144798,144805]"
    },
    {
      "src": "comparison_operator: == [193717,193719]",
      "dest": "comparison_operator: == [195211,195213]"
    },
    {
      "src": "formal_parameters [227133,227153]",
      "dest": "formal_parameters [228627,228647]"
    },
    {
      "src": "local_variable_declaration [175611,175621]",
      "dest": "local_variable_declaration [177105,177115]"
    },
    {
      "src": "parenthesized_expression [159408,159541]",
      "dest": "parenthesized_expression [160902,161035]"
    },
    {
      "src": "local_variable_declaration [162395,162426]",
      "dest": "local_variable_declaration [163889,163920]"
    },
    {
      "src": "variable_declarator [208137,208153]",
      "dest": "variable_declarator [209631,209647]"
    },
    {
      "src": "argument_list [119269,119294]",
      "dest": "argument_list [120763,120788]"
    },
    {
      "src": "field_access [170109,170121]",
      "dest": "field_access [171603,171615]"
    },
    {
      "src": "type: String [169905,169911]",
      "dest": "type: String [171399,171405]"
    },
    {
      "src": "false: false [65243,65248]",
      "dest": "false: false [66290,66295]"
    },
    {
      "src": "block [133916,133952]",
      "dest": "block [135410,135446]"
    },
    {
      "src": "identifier: str [78612,78615]",
      "dest": "identifier: str [80106,80109]"
    },
    {
      "src": "identifier: separator [84798,84807]",
      "dest": "identifier: separator [86292,86301]"
    },
    {
      "src": "method_declaration [93877,94000]",
      "dest": "method_declaration [95371,95494]"
    },
    {
      "src": "identifier: start [118957,118962]",
      "dest": "identifier: start [120451,120456]"
    },
    {
      "src": "expression_statement [198759,198777]",
      "dest": "expression_statement [200253,200271]"
    },
    {
      "src": "line_comment: // Padding [173560,173570]",
      "dest": "line_comment: // Padding [175054,175064]"
    },
    {
      "src": "argument_list [86390,86401]",
      "dest": "argument_list [87884,87895]"
    },
    {
      "src": "block [181393,182302]",
      "dest": "block [182887,183796]"
    },
    {
      "src": "throw_statement [158442,158534]",
      "dest": "throw_statement [159936,160028]"
    },
    {
      "src": "comparison_operator: == [46606,46608]",
      "dest": "comparison_operator: == [46606,46608]"
    },
    {
      "src": "binary_expression [58088,58093]",
      "dest": "binary_expression [55121,55126]"
    },
    {
      "src": "arithmetic_operator: + [220290,220291]",
      "dest": "arithmetic_operator: + [221784,221785]"
    },
    {
      "src": "identifier: tmp [72207,72210]",
      "dest": "identifier: tmp [73701,73704]"
    },
    {
      "src": "arithmetic_operator: + [160979,160980]",
      "dest": "arithmetic_operator: + [162473,162474]"
    },
    {
      "src": "method_invocation [205770,205781]",
      "dest": "method_invocation [207264,207275]"
    },
    {
      "src": "array_access [23237,23244]",
      "dest": "array_access [23237,23244]"
    },
    {
      "src": "identifier: i [200975,200976]",
      "dest": "identifier: i [202469,202470]"
    },
    {
      "src": "null_literal: null [233795,233799]",
      "dest": "null_literal: null [235289,235293]"
    },
    {
      "src": "logical_operator: || [221960,221962]",
      "dest": "logical_operator: || [223454,223456]"
    },
    {
      "src": "identifier: cs [207019,207021]",
      "dest": "identifier: cs [208513,208515]"
    },
    {
      "src": "arithmetic_operator: - [220147,220148]",
      "dest": "arithmetic_operator: - [221641,221642]"
    },
    {
      "src": "true: true [122120,122124]",
      "dest": "true: true [123614,123618]"
    },
    {
      "src": "identifier: size [187767,187771]",
      "dest": "identifier: size [189261,189265]"
    },
    {
      "src": "block_comment: \n    private static int min(int a, int b, int c) {\n        // Method copied from NumberUtils to avoid dependency on subpackage\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }\n*/ [236827,237082]",
      "dest": "block_comment: \n    private static int min(int a, int b, int c) {\n        // Method copied from NumberUtils to avoid dependency on subpackage\n        if (b < a) {\n            a = b;\n        }\n        if (c < a) {\n            a = c;\n        }\n        return a;\n    }\n*/ [238321,238576]"
    },
    {
      "src": "return_statement [64081,64132]",
      "dest": "return_statement [65128,65179]"
    },
    {
      "src": "type: int [53196,53199]",
      "dest": "type: int [53196,53199]"
    },
    {
      "src": "method_declaration [193656,193802]",
      "dest": "method_declaration [195150,195296]"
    },
    {
      "src": "identifier: pos [124019,124022]",
      "dest": "identifier: pos [125513,125516]"
    },
    {
      "src": "for_statement [57743,58369]",
      "dest": "for_statement [54851,55331]"
    },
    {
      "src": "update_expression [111084,111087]",
      "dest": "update_expression [112578,112581]"
    },
    {
      "src": "identifier: CharUtils [173279,173288]",
      "dest": "identifier: CharUtils [174773,174782]"
    },
    {
      "src": "identifier: defaultStr [213000,213010]",
      "dest": "identifier: defaultStr [214494,214504]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [70212,70227]",
      "dest": "identifier: INDEX_NOT_FOUND [71706,71721]"
    },
    {
      "src": "return_statement [42320,42343]",
      "dest": "return_statement [42320,42343]"
    },
    {
      "src": "identifier: searchChar [50854,50864]",
      "dest": "identifier: searchChar [50854,50864]"
    },
    {
      "src": "local_variable_declaration [158600,158647]",
      "dest": "local_variable_declaration [160094,160141]"
    },
    {
      "src": "binary_expression [202084,202090]",
      "dest": "binary_expression [203578,203584]"
    },
    {
      "src": "ternary_expression [70368,70418]",
      "dest": "ternary_expression [71862,71912]"
    },
    {
      "src": "identifier: c [123500,123501]",
      "dest": "identifier: c [124994,124995]"
    },
    {
      "src": "identifier: searchStr [45132,45141]",
      "dest": "identifier: searchStr [45132,45141]"
    },
    {
      "src": "identifier: length [225189,225195]",
      "dest": "identifier: length [226683,226689]"
    },
    {
      "src": "assignment_expression [168212,168221]",
      "dest": "assignment_expression [169706,169715]"
    },
    {
      "src": "identifier: pos [80092,80095]",
      "dest": "identifier: pos [81586,81589]"
    },
    {
      "src": "identifier: length [244351,244357]",
      "dest": "identifier: length [245845,245851]"
    },
    {
      "src": "formal_parameter [75593,75600]",
      "dest": "formal_parameter [77087,77094]"
    },
    {
      "src": "identifier: str [163730,163733]",
      "dest": "identifier: str [165224,165227]"
    },
    {
      "src": "switch_label [175511,175518]",
      "dest": "switch_label [177005,177012]"
    },
    {
      "src": "arithmetic_operator: - [144690,144691]",
      "dest": "arithmetic_operator: - [146184,146185]"
    },
    {
      "src": "affectation_operator: = [105896,105897]",
      "dest": "affectation_operator: = [107390,107391]"
    },
    {
      "src": "identifier: beg [105550,105553]",
      "dest": "identifier: beg [107044,107047]"
    },
    {
      "src": "comparison_operator: <= [227194,227196]",
      "dest": "comparison_operator: <= [228688,228690]"
    },
    {
      "src": "affectation_operator: = [118963,118964]",
      "dest": "affectation_operator: = [120457,120458]"
    },
    {
      "src": "comparison_operator: <= [174698,174700]",
      "dest": "comparison_operator: <= [176192,176194]"
    },
    {
      "src": "null_literal: null [79793,79797]",
      "dest": "null_literal: null [81287,81291]"
    },
    {
      "src": "expression_statement [159901,159923]",
      "dest": "expression_statement [161395,161417]"
    },
    {
      "src": "parenthesized_expression [18628,18692]",
      "dest": "parenthesized_expression [18628,18692]"
    },
    {
      "src": "method_invocation [106303,106321]",
      "dest": "method_invocation [107797,107815]"
    },
    {
      "src": "block [145502,145870]",
      "dest": "block [146996,147364]"
    },
    {
      "src": "block [103151,103229]",
      "dest": "block [104645,104723]"
    },
    {
      "src": "parenthesized_expression [59547,59568]",
      "dest": "parenthesized_expression [59934,59955]"
    },
    {
      "src": "\": \" [26460,26461]",
      "dest": "\": \" [26460,26461]"
    },
    {
      "src": "parenthesized_expression [117113,117141]",
      "dest": "parenthesized_expression [118607,118635]"
    },
    {
      "src": "binary_expression [220127,220167]",
      "dest": "binary_expression [221621,221661]"
    },
    {
      "src": "return_statement [58303,58315]",
      "dest": "return_statement [58696,58708]"
    },
    {
      "src": "binary_expression [162000,162040]",
      "dest": "binary_expression [163494,163534]"
    },
    {
      "src": "method_invocation [171881,171932]",
      "dest": "method_invocation [173375,173426]"
    },
    {
      "src": "argument_list [111354,111379]",
      "dest": "argument_list [112848,112873]"
    },
    {
      "src": "argument_list [203291,203294]",
      "dest": "argument_list [204785,204788]"
    },
    {
      "src": "return_statement [210384,210397]",
      "dest": "return_statement [211878,211891]"
    },
    {
      "src": "type: int [36334,36337]",
      "dest": "type: int [36334,36337]"
    },
    {
      "src": "binary_expression [222071,222088]",
      "dest": "binary_expression [223565,223582]"
    },
    {
      "src": "identifier: len [104736,104739]",
      "dest": "identifier: len [106230,106233]"
    },
    {
      "src": "identifier: j [235970,235971]",
      "dest": "identifier: j [237464,237465]"
    },
    {
      "src": "new: new [131336,131339]",
      "dest": "new: new [132830,132833]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> valid character String will return <code>false</code>.\n     * An empty String (length()=0) always returns <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsOnly(null, *)       = false\n     * StringUtils.containsOnly(*, null)       = false\n     * StringUtils.containsOnly(\"\", *)         = true\n     * StringUtils.containsOnly(\"ab\", \"\")      = false\n     * StringUtils.containsOnly(\"abab\", \"abc\") = true\n     * StringUtils.containsOnly(\"ab1\", \"abc\")  = false\n     * StringUtils.containsOnly(\"abz\", \"abc\")  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param validChars  a String of valid chars, may be null\n     * @return true if it only contains valid chars and is non-null\n     * @since 2.0\n     */ [64144,65098]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> valid character String will return <code>false</code>.\n     * An empty String (length()=0) always returns <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsOnly(null, *)       = false\n     * StringUtils.containsOnly(*, null)       = false\n     * StringUtils.containsOnly(\"\", *)         = true\n     * StringUtils.containsOnly(\"ab\", \"\")      = false\n     * StringUtils.containsOnly(\"abab\", \"abc\") = true\n     * StringUtils.containsOnly(\"ab1\", \"abc\")  = false\n     * StringUtils.containsOnly(\"abz\", \"abc\")  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param validChars  a String of valid chars, may be null\n     * @return true if it only contains valid chars and is non-null\n     * @since 2.0\n     */ [65191,66145]"
    },
    {
      "src": "variable_declarator [104534,104570]",
      "dest": "variable_declarator [106028,106064]"
    },
    {
      "src": "identifier: split [95154,95159]",
      "dest": "identifier: split [96648,96653]"
    },
    {
      "src": "update_expression [162330,162333]",
      "dest": "update_expression [163824,163827]"
    },
    {
      "src": "decimal_integer_literal: 0 [217389,217390]",
      "dest": "decimal_integer_literal: 0 [218883,218884]"
    },
    {
      "src": "parenthesized_expression [127712,127790]",
      "dest": "parenthesized_expression [129206,129284]"
    },
    {
      "src": "identifier: strLen [91178,91184]",
      "dest": "identifier: strLen [92672,92678]"
    },
    {
      "src": "method_invocation [36539,36572]",
      "dest": "method_invocation [36539,36572]"
    },
    {
      "src": "logical_operator: || [56048,56050]",
      "dest": "logical_operator: || [56394,56396]"
    },
    {
      "src": "identifier: ordinal [35216,35223]",
      "dest": "identifier: ordinal [35216,35223]"
    },
    {
      "src": "affectation_operator: *= [127709,127711]",
      "dest": "affectation_operator: *= [129203,129205]"
    },
    {
      "src": "method_declaration [167932,168742]",
      "dest": "method_declaration [169426,170236]"
    },
    {
      "src": "identifier: ch [54855,54857]",
      "dest": "identifier: ch [58162,58164]"
    },
    {
      "src": "binary_expression [105835,105860]",
      "dest": "binary_expression [107329,107354]"
    },
    {
      "src": "local_variable_declaration [91356,91392]",
      "dest": "local_variable_declaration [92850,92886]"
    },
    {
      "src": "visibility: public [28427,28433]",
      "dest": "visibility: public [28427,28433]"
    },
    {
      "src": "binary_expression [221947,221978]",
      "dest": "binary_expression [223441,223472]"
    },
    {
      "src": "identifier: n [235469,235470]",
      "dest": "identifier: n [236963,236964]"
    },
    {
      "src": "identifier: strs [231239,231243]",
      "dest": "identifier: strs [232733,232737]"
    },
    {
      "src": "identifier: concat [186200,186206]",
      "dest": "identifier: concat [187694,187700]"
    },
    {
      "src": "identifier: isEmpty [221963,221970]",
      "dest": "identifier: isEmpty [223457,223464]"
    },
    {
      "src": "type: CharSequence [205672,205684]",
      "dest": "type: CharSequence [207166,207178]"
    },
    {
      "src": "return_statement [46671,46715]",
      "dest": "return_statement [46671,46715]"
    },
    {
      "src": "increment_operator: ++ [208188,208190]",
      "dest": "increment_operator: ++ [209682,209684]"
    },
    {
      "src": "identifier: str [239145,239148]",
      "dest": "identifier: str [240639,240642]"
    },
    {
      "src": "identifier: tokenStart [123381,123391]",
      "dest": "identifier: tokenStart [124875,124885]"
    },
    {
      "src": "null_literal: null [69770,69774]",
      "dest": "null_literal: null [71264,71268]"
    },
    {
      "src": "formal_parameter [103124,103140]",
      "dest": "formal_parameter [104618,104634]"
    },
    {
      "src": "decimal_integer_literal: 0 [165943,165944]",
      "dest": "decimal_integer_literal: 0 [167437,167438]"
    },
    {
      "src": "block_comment:     \n     * Performs the logic for the <code>splitByWholeSeparatorPreserveAllTokens</code> methods.\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n     * treated as empty token separators; if <code>false</code>, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.4\n     */ [103235,103976]",
      "dest": "block_comment:     \n     * Performs the logic for the <code>splitByWholeSeparatorPreserveAllTokens</code> methods.\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n     * treated as empty token separators; if <code>false</code>, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.4\n     */ [104729,105470]"
    },
    {
      "src": "line_comment: // remember start is negative [73643,73672]",
      "dest": "line_comment: // remember start is negative [75137,75166]"
    },
    {
      "src": "parenthesized_expression [105736,105755]",
      "dest": "parenthesized_expression [107230,107249]"
    },
    {
      "src": "identifier: nfd [24762,24765]",
      "dest": "identifier: nfd [24762,24765]"
    },
    {
      "src": "assignment_expression [118258,118269]",
      "dest": "assignment_expression [119752,119763]"
    },
    {
      "src": "parenthesized_expression [46580,46614]",
      "dest": "parenthesized_expression [46580,46614]"
    },
    {
      "src": "argument_list [189164,189184]",
      "dest": "argument_list [190658,190678]"
    },
    {
      "src": "method_declaration [30661,30861]",
      "dest": "method_declaration [30661,30861]"
    },
    {
      "src": "if_statement [57848,58337]",
      "dest": "if_statement [54953,55299]"
    },
    {
      "src": "variable_declarator [227338,227359]",
      "dest": "variable_declarator [228832,228853]"
    },
    {
      "src": "formal_parameter [193687,193697]",
      "dest": "formal_parameter [195181,195191]"
    },
    {
      "src": "binary_expression [208179,208185]",
      "dest": "binary_expression [209673,209679]"
    },
    {
      "src": "type: char [57707,57711]",
      "dest": "type: char [54815,54819]"
    },
    {
      "src": "binary_expression [220278,220336]",
      "dest": "binary_expression [221772,221830]"
    },
    {
      "src": "identifier: strs [231673,231677]",
      "dest": "identifier: strs [233167,233171]"
    },
    {
      "src": "formal_parameters [221893,221932]",
      "dest": "formal_parameters [223387,223426]"
    },
    {
      "src": "identifier: stringPos [228561,228570]",
      "dest": "identifier: stringPos [230055,230064]"
    },
    {
      "src": "formal_parameter [186617,186632]",
      "dest": "formal_parameter [188111,188126]"
    },
    {
      "src": "argument_list [131353,131362]",
      "dest": "argument_list [132847,132856]"
    },
    {
      "src": "binary_expression [170081,170121]",
      "dest": "binary_expression [171575,171615]"
    },
    {
      "src": "update_expression [49811,49814]",
      "dest": "update_expression [49811,49814]"
    },
    {
      "src": "formal_parameter [27452,27468]",
      "dest": "formal_parameter [27452,27468]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [46636,46651]",
      "dest": "identifier: INDEX_NOT_FOUND [46636,46651]"
    },
    {
      "src": "identifier: str [36539,36542]",
      "dest": "identifier: str [36539,36542]"
    },
    {
      "src": "identifier: cs [66687,66689]",
      "dest": "identifier: cs [67806,67808]"
    },
    {
      "src": "decimal_integer_literal: 0 [208176,208177]",
      "dest": "decimal_integer_literal: 0 [209670,209671]"
    },
    {
      "src": "decimal_integer_literal: 1 [113403,113404]",
      "dest": "decimal_integer_literal: 1 [114897,114898]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [91707,91780]",
      "dest": "line_comment: //----------------------------------------------------------------------- [93201,93274]"
    },
    {
      "src": "method_invocation [175719,175733]",
      "dest": "method_invocation [177213,177227]"
    },
    {
      "src": "method_invocation [138728,138740]",
      "dest": "method_invocation [140222,140234]"
    },
    {
      "src": "identifier: i [57674,57675]",
      "dest": "identifier: i [58014,58015]"
    },
    {
      "src": "line_comment: // IndexOf [28579,28589]",
      "dest": "line_comment: // IndexOf [28579,28589]"
    },
    {
      "src": "identifier: len [78556,78559]",
      "dest": "identifier: len [80050,80053]"
    },
    {
      "src": "static: static [60746,60752]",
      "dest": "static: static [61133,61139]"
    },
    {
      "src": "block [220169,220262]",
      "dest": "block [221663,221756]"
    },
    {
      "src": "parenthesized_expression [119149,119181]",
      "dest": "parenthesized_expression [120643,120675]"
    },
    {
      "src": "visibility: public [6610,6616]",
      "dest": "visibility: public [6610,6616]"
    },
    {
      "src": "method_declaration [214516,214680]",
      "dest": "method_declaration [216010,216174]"
    },
    {
      "src": "identifier: charAt [20566,20572]",
      "dest": "identifier: charAt [20566,20572]"
    },
    {
      "src": "escape_sequence: \\\\ [25060,25062]",
      "dest": "escape_sequence: \\\\ [25060,25062]"
    },
    {
      "src": "affectation_operator: = [158571,158572]",
      "dest": "affectation_operator: = [160065,160066]"
    },
    {
      "src": "affectation_operator: = [182101,182102]",
      "dest": "affectation_operator: = [183595,183596]"
    },
    {
      "src": "null_literal: null [209146,209150]",
      "dest": "null_literal: null [210640,210644]"
    },
    {
      "src": "binary_expression [63870,63897]",
      "dest": "binary_expression [64917,64944]"
    },
    {
      "src": "argument_list [242422,242442]",
      "dest": "argument_list [243916,243936]"
    },
    {
      "src": "argument_list [127837,127846]",
      "dest": "argument_list [129331,129340]"
    },
    {
      "src": "method_invocation [196814,196827]",
      "dest": "method_invocation [198308,198321]"
    },
    {
      "src": "formal_parameters [205671,205688]",
      "dest": "formal_parameters [207165,207182]"
    },
    {
      "src": "visibility: public [199707,199713]",
      "dest": "visibility: public [201201,201207]"
    },
    {
      "src": "identifier: str [173191,173194]",
      "dest": "identifier: str [174685,174688]"
    },
    {
      "src": "formal_parameters [86276,86306]",
      "dest": "formal_parameters [87770,87800]"
    },
    {
      "src": "identifier: str [40868,40871]",
      "dest": "identifier: str [40868,40871]"
    },
    {
      "src": "identifier: match [117429,117434]",
      "dest": "identifier: match [118923,118928]"
    },
    {
      "src": "?: ? [150262,150263]",
      "dest": "?: ? [151756,151757]"
    },
    {
      "src": "identifier: str [14806,14809]",
      "dest": "identifier: str [14806,14809]"
    },
    {
      "src": "true: true [209395,209399]",
      "dest": "true: true [210889,210893]"
    },
    {
      "src": "type: char[] [123224,123230]",
      "dest": "type: char[] [124718,124724]"
    },
    {
      "src": "type: String [24855,24861]",
      "dest": "type: String [24855,24861]"
    },
    {
      "src": "identifier: cs [68195,68197]",
      "dest": "identifier: cs [69689,69691]"
    },
    {
      "src": "if_statement [129229,129284]",
      "dest": "if_statement [130723,130778]"
    },
    {
      "src": "identifier: maxWidth [219819,219827]",
      "dest": "identifier: maxWidth [221313,221321]"
    },
    {
      "src": "argument_list [49851,49894]",
      "dest": "argument_list [49851,49894]"
    },
    {
      "src": "identifier: array [126237,126242]",
      "dest": "identifier: array [127731,127736]"
    },
    {
      "src": "block [45095,45164]",
      "dest": "block [45095,45164]"
    },
    {
      "src": "identifier: isEmpty [165598,165605]",
      "dest": "identifier: isEmpty [167092,167099]"
    },
    {
      "src": "formal_parameter [69728,69747]",
      "dest": "formal_parameter [71222,71241]"
    },
    {
      "src": "argument_list [111290,111315]",
      "dest": "argument_list [112784,112809]"
    },
    {
      "src": "identifier: ts [11729,11731]",
      "dest": "identifier: ts [11729,11731]"
    },
    {
      "src": "comparison_operator: == [23914,23916]",
      "dest": "comparison_operator: == [23914,23916]"
    },
    {
      "src": "block [170123,170168]",
      "dest": "block [171617,171662]"
    },
    {
      "src": "identifier: str [222257,222260]",
      "dest": "identifier: str [223751,223754]"
    },
    {
      "src": "comparison_operator: == [176638,176640]",
      "dest": "comparison_operator: == [178132,178134]"
    },
    {
      "src": "new: new [165892,165895]",
      "dest": "new: new [167386,167389]"
    },
    {
      "src": "identifier: str [18414,18417]",
      "dest": "identifier: str [18414,18417]"
    },
    {
      "src": "method_invocation [103168,103222]",
      "dest": "method_invocation [104662,104716]"
    },
    {
      "src": "identifier: iterable [135449,135457]",
      "dest": "identifier: iterable [136943,136951]"
    },
    {
      "src": "local_variable_declaration [53115,53144]",
      "dest": "local_variable_declaration [53115,53144]"
    },
    {
      "src": "variable_declarator [227303,227324]",
      "dest": "variable_declarator [228797,228818]"
    },
    {
      "src": "binary_expression [90799,90810]",
      "dest": "binary_expression [92293,92304]"
    },
    {
      "src": "block_comment:     \n     * <p>Left pad a String with a specified String.</p>\n     *\n     * <p>Pad to a size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *, *)      = null\n     * StringUtils.leftPad(\"\", 3, \"z\")      = \"zzz\"\n     * StringUtils.leftPad(\"bat\", 3, \"yz\")  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, \"yz\")  = \"yzbat\"\n     * StringUtils.leftPad(\"bat\", 8, \"yz\")  = \"yzyzybat\"\n     * StringUtils.leftPad(\"bat\", 1, \"yz\")  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1, \"yz\") = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, null)  = \"  bat\"\n     * StringUtils.leftPad(\"bat\", 5, \"\")    = \"  bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padStr  the String to pad with, null or empty treated as single space\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     */ [184300,185249]",
      "dest": "block_comment:     \n     * <p>Left pad a String with a specified String.</p>\n     *\n     * <p>Pad to a size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *, *)      = null\n     * StringUtils.leftPad(\"\", 3, \"z\")      = \"zzz\"\n     * StringUtils.leftPad(\"bat\", 3, \"yz\")  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, \"yz\")  = \"yzbat\"\n     * StringUtils.leftPad(\"bat\", 8, \"yz\")  = \"yzyzybat\"\n     * StringUtils.leftPad(\"bat\", 1, \"yz\")  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1, \"yz\") = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, null)  = \"  bat\"\n     * StringUtils.leftPad(\"bat\", 5, \"\")    = \"  bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padStr  the String to pad with, null or empty treated as single space\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     */ [185794,186743]"
    },
    {
      "src": "type: String [239754,239760]",
      "dest": "type: String [241248,241254]"
    },
    {
      "src": "identifier: add [118147,118150]",
      "dest": "identifier: add [119641,119644]"
    },
    {
      "src": "if_statement [200867,200920]",
      "dest": "if_statement [202361,202414]"
    },
    {
      "src": "type: int [185295,185298]",
      "dest": "type: int [186789,186792]"
    },
    {
      "src": "argument_list [80046,80051]",
      "dest": "argument_list [81540,81545]"
    },
    {
      "src": "identifier: css [227687,227690]",
      "dest": "identifier: css [229181,229184]"
    },
    {
      "src": "method_invocation [236248,236298]",
      "dest": "method_invocation [237742,237792]"
    },
    {
      "src": "identifier: java [25027,25031]",
      "dest": "identifier: java [25027,25031]"
    },
    {
      "src": "binary_expression [219582,219606]",
      "dest": "binary_expression [221076,221100]"
    },
    {
      "src": "parenthesized_expression [39508,39522]",
      "dest": "parenthesized_expression [39508,39522]"
    },
    {
      "src": "decimal_integer_literal: 0 [76222,76223]",
      "dest": "decimal_integer_literal: 0 [77716,77717]"
    },
    {
      "src": "parenthesized_expression [168084,168101]",
      "dest": "parenthesized_expression [169578,169595]"
    },
    {
      "src": "binary_expression [181643,181652]",
      "dest": "binary_expression [183137,183146]"
    },
    {
      "src": "type: String [87703,87709]",
      "dest": "type: String [89197,89203]"
    },
    {
      "src": "identifier: splitByWholeSeparatorWorker [101301,101328]",
      "dest": "identifier: splitByWholeSeparatorWorker [102795,102822]"
    },
    {
      "src": "identifier: text [159621,159625]",
      "dest": "identifier: text [161115,161119]"
    },
    {
      "src": "binary_expression [236266,236274]",
      "dest": "binary_expression [237760,237768]"
    },
    {
      "src": "type: String [125108,125114]",
      "dest": "type: String [126602,126608]"
    },
    {
      "src": "argument_list [81665,81676]",
      "dest": "argument_list [83159,83170]"
    },
    {
      "src": "string_fragment: normalize [24622,24631]",
      "dest": "string_fragment: normalize [24622,24631]"
    },
    {
      "src": "binary_expression [27487,27498]",
      "dest": "binary_expression [27487,27498]"
    },
    {
      "src": "type: int [168446,168449]",
      "dest": "type: int [169940,169943]"
    },
    {
      "src": "decimal_integer_literal: 2 [189129,189130]",
      "dest": "decimal_integer_literal: 2 [190623,190624]"
    },
    {
      "src": "if_statement [206997,207088]",
      "dest": "if_statement [208491,208582]"
    },
    {
      "src": "return_statement [137390,137401]",
      "dest": "return_statement [138884,138895]"
    },
    {
      "src": "method_invocation [110541,110553]",
      "dest": "method_invocation [112035,112047]"
    },
    {
      "src": "identifier: length [39903,39909]",
      "dest": "identifier: length [39903,39909]"
    },
    {
      "src": "binary_expression [244130,244141]",
      "dest": "binary_expression [245624,245635]"
    },
    {
      "src": "true: true [210437,210441]",
      "dest": "true: true [211931,211935]"
    },
    {
      "src": "type: char[] [186011,186017]",
      "dest": "type: char[] [187505,187511]"
    },
    {
      "src": "block [18608,18743]",
      "dest": "block [18608,18743]"
    },
    {
      "src": "identifier: maxWidth [217346,217354]",
      "dest": "identifier: maxWidth [218840,218848]"
    },
    {
      "src": "type: char [66677,66681]",
      "dest": "type: char [67796,67800]"
    },
    {
      "src": "block [209324,209369]",
      "dest": "block [210818,210863]"
    },
    {
      "src": "identifier: i [159361,159362]",
      "dest": "identifier: i [160855,160856]"
    },
    {
      "src": "type: String [219329,219335]",
      "dest": "type: String [220823,220829]"
    },
    {
      "src": "modifiers [130656,130669]",
      "dest": "modifiers [132150,132163]"
    },
    {
      "src": "identifier: replacement [150194,150205]",
      "dest": "identifier: replacement [151688,151699]"
    },
    {
      "src": "arithmetic_operator: - [104813,104814]",
      "dest": "arithmetic_operator: - [106307,106308]"
    },
    {
      "src": "binary_expression [176634,176645]",
      "dest": "binary_expression [178128,178139]"
    },
    {
      "src": "assignment_expression [190779,190824]",
      "dest": "assignment_expression [192273,192318]"
    },
    {
      "src": "type: int [81644,81647]",
      "dest": "type: int [83138,83141]"
    },
    {
      "src": "visibility: public [90705,90711]",
      "dest": "visibility: public [92199,92205]"
    },
    {
      "src": "affectation_operator: = [174562,174563]",
      "dest": "affectation_operator: = [176056,176057]"
    },
    {
      "src": "argument_list [136293,136325]",
      "dest": "argument_list [137787,137819]"
    },
    {
      "src": "method_invocation [84692,84704]",
      "dest": "method_invocation [86186,86198]"
    },
    {
      "src": "identifier: searchChars [59548,59559]",
      "dest": "identifier: searchChars [59935,59946]"
    },
    {
      "src": "formal_parameter [165527,165545]",
      "dest": "formal_parameter [167021,167039]"
    },
    {
      "src": "null_literal: null [77291,77295]",
      "dest": "null_literal: null [78785,78789]"
    },
    {
      "src": "identifier: str [53240,53243]",
      "dest": "identifier: str [53240,53243]"
    },
    {
      "src": "array_access [231440,231447]",
      "dest": "array_access [232934,232941]"
    },
    {
      "src": "return_statement [214598,214610]",
      "dest": "return_statement [216092,216104]"
    },
    {
      "src": "formal_parameters [239741,239788]",
      "dest": "formal_parameters [241235,241282]"
    },
    {
      "src": "identifier: EMPTY [144683,144688]",
      "dest": "identifier: EMPTY [146177,146182]"
    },
    {
      "src": "comparison_operator: < [225357,225358]",
      "dest": "comparison_operator: < [226851,226852]"
    },
    {
      "src": "identifier: length [239917,239923]",
      "dest": "identifier: length [241411,241417]"
    },
    {
      "src": "identifier: i [127882,127883]",
      "dest": "identifier: i [129376,129377]"
    },
    {
      "src": "return_statement [73823,73851]",
      "dest": "return_statement [75317,75345]"
    },
    {
      "src": "affectation_operator: = [160178,160179]",
      "dest": "affectation_operator: = [161672,161673]"
    },
    {
      "src": "type: String [65155,65161]",
      "dest": "type: String [66202,66208]"
    },
    {
      "src": "identifier: length [227889,227895]",
      "dest": "identifier: length [229383,229389]"
    },
    {
      "src": "argument_list [219523,219558]",
      "dest": "argument_list [221017,221052]"
    },
    {
      "src": "update_expression [159386,159389]",
      "dest": "update_expression [160880,160883]"
    },
    {
      "src": "increment_operator: -- [170404,170406]",
      "dest": "increment_operator: -- [171898,171900]"
    },
    {
      "src": "affectation_operator: = [23182,23183]",
      "dest": "affectation_operator: = [23182,23183]"
    },
    {
      "src": "line_comment: // String.charAt(n) is about 15% worse for a 10K string [5555,5610]",
      "dest": "line_comment: // String.charAt(n) is about 15% worse for a 10K string [5555,5610]"
    },
    {
      "src": "identifier: str [137053,137056]",
      "dest": "identifier: str [138547,138550]"
    },
    {
      "src": "identifier: CR [170375,170377]",
      "dest": "identifier: CR [171869,171871]"
    },
    {
      "src": "affectation_operator: = [36344,36345]",
      "dest": "affectation_operator: = [36344,36345]"
    },
    {
      "src": "decimal_integer_literal: 0 [189047,189048]",
      "dest": "decimal_integer_literal: 0 [190541,190542]"
    },
    {
      "src": "new: new [106410,106413]",
      "dest": "new: new [107904,107907]"
    },
    {
      "src": "variable_declarator [173231,173257]",
      "dest": "variable_declarator [174725,174751]"
    },
    {
      "src": "identifier: str [181407,181410]",
      "dest": "identifier: str [182901,182904]"
    },
    {
      "src": "identifier: str [78540,78543]",
      "dest": "identifier: str [80034,80037]"
    },
    {
      "src": "identifier: length [60987,60993]",
      "dest": "identifier: length [61406,61412]"
    },
    {
      "src": "identifier: buf [133102,133105]",
      "dest": "identifier: buf [134596,134599]"
    },
    {
      "src": "parenthesized_expression [231467,231493]",
      "dest": "parenthesized_expression [232961,232987]"
    },
    {
      "src": "static: static [165488,165494]",
      "dest": "static: static [166982,166988]"
    },
    {
      "src": "method_invocation [134445,134466]",
      "dest": "method_invocation [135939,135960]"
    },
    {
      "src": "null_literal: null [90806,90810]",
      "dest": "null_literal: null [92300,92304]"
    },
    {
      "src": "formal_parameters [179932,179968]",
      "dest": "formal_parameters [181426,181462]"
    },
    {
      "src": "binary_expression [222218,222231]",
      "dest": "binary_expression [223712,223725]"
    },
    {
      "src": "comparison_operator: < [145697,145698]",
      "dest": "comparison_operator: < [147191,147192]"
    },
    {
      "src": "identifier: ArrayUtils [215733,215743]",
      "dest": "identifier: ArrayUtils [217227,217237]"
    },
    {
      "src": "local_variable_declaration [66554,66578]",
      "dest": "local_variable_declaration [67601,67625]"
    },
    {
      "src": "identifier: result [162402,162408]",
      "dest": "identifier: result [163896,163902]"
    },
    {
      "src": "!: ! [137239,137240]",
      "dest": "!: ! [138733,138734]"
    },
    {
      "src": "method_declaration [92765,92850]",
      "dest": "method_declaration [94259,94344]"
    },
    {
      "src": "identifier: str [30821,30824]",
      "dest": "identifier: str [30821,30824]"
    },
    {
      "src": "modifiers [126071,126084]",
      "dest": "modifiers [127565,127578]"
    },
    {
      "src": "update_expression [119099,119102]",
      "dest": "update_expression [120593,120596]"
    },
    {
      "src": "binary_expression [104175,104186]",
      "dest": "binary_expression [105669,105680]"
    },
    {
      "src": "identifier: p [236286,236287]",
      "dest": "identifier: p [237780,237781]"
    },
    {
      "src": "logical_operator: || [71829,71831]",
      "dest": "logical_operator: || [73323,73325]"
    },
    {
      "src": "comparison_operator: < [185867,185868]",
      "dest": "comparison_operator: < [187361,187362]"
    },
    {
      "src": "parenthesized_expression [68093,68129]",
      "dest": "parenthesized_expression [69587,69623]"
    },
    {
      "src": "affectation_operator: = [235490,235491]",
      "dest": "affectation_operator: = [236984,236985]"
    },
    {
      "src": "false: false [208108,208113]",
      "dest": "false: false [209602,209607]"
    },
    {
      "src": "parenthesized_expression [18752,18778]",
      "dest": "parenthesized_expression [18752,18778]"
    },
    {
      "src": "null_literal: null [179990,179994]",
      "dest": "null_literal: null [181484,181488]"
    },
    {
      "src": "identifier: separator [135349,135358]",
      "dest": "identifier: separator [136843,136852]"
    },
    {
      "src": "if_statement [62551,62629]",
      "dest": "if_statement [63350,63676]"
    },
    {
      "src": "binary_expression [8815,8825]",
      "dest": "binary_expression [8815,8825]"
    },
    {
      "src": "type: boolean [239723,239730]",
      "dest": "type: boolean [241217,241224]"
    },
    {
      "src": "modifiers [5976,5995]",
      "dest": "modifiers [5976,5995]"
    },
    {
      "src": "formal_parameter [190475,190483]",
      "dest": "formal_parameter [191969,191977]"
    },
    {
      "src": "identifier: padChar [184217,184224]",
      "dest": "identifier: padChar [185711,185718]"
    },
    {
      "src": "method_invocation [244253,244265]",
      "dest": "method_invocation [245747,245759]"
    },
    {
      "src": "identifier: text [161109,161113]",
      "dest": "identifier: text [162603,162607]"
    },
    {
      "src": "argument_list [110942,110967]",
      "dest": "argument_list [112436,112461]"
    },
    {
      "src": "argument_list [220228,220236]",
      "dest": "argument_list [221722,221730]"
    },
    {
      "src": "throw_statement [178046,178125]",
      "dest": "throw_statement [179540,179619]"
    },
    {
      "src": "identifier: length [39610,39616]",
      "dest": "identifier: length [39610,39616]"
    },
    {
      "src": "method_invocation [128042,128062]",
      "dest": "method_invocation [129536,129556]"
    },
    {
      "src": "identifier: str [118850,118853]",
      "dest": "identifier: str [120344,120347]"
    },
    {
      "src": "return_statement [56129,56178]",
      "dest": "return_statement [56475,56524]"
    },
    {
      "src": "local_variable_declaration [18448,18459]",
      "dest": "local_variable_declaration [18448,18459]"
    },
    {
      "src": "identifier: length [79869,79875]",
      "dest": "identifier: length [81363,81369]"
    },
    {
      "src": "object_creation_expression [25243,25331]",
      "dest": "object_creation_expression [25243,25331]"
    },
    {
      "src": "argument_list [235178,235180]",
      "dest": "argument_list [236672,236674]"
    },
    {
      "src": "argument_list [162282,162284]",
      "dest": "argument_list [163776,163778]"
    },
    {
      "src": "identifier: endIndex [130736,130744]",
      "dest": "identifier: endIndex [132230,132238]"
    },
    {
      "src": "block [138714,138920]",
      "dest": "block [140208,140414]"
    },
    {
      "src": "parenthesized_expression [169943,169957]",
      "dest": "parenthesized_expression [171437,171451]"
    },
    {
      "src": "visibility: public [73398,73404]",
      "dest": "visibility: public [74892,74898]"
    },
    {
      "src": "logical_operator: || [31873,31875]",
      "dest": "logical_operator: || [31873,31875]"
    },
    {
      "src": "variable_declarator [150361,150410]",
      "dest": "variable_declarator [151855,151904]"
    },
    {
      "src": "object_creation_expression [214630,214652]",
      "dest": "object_creation_expression [216124,216146]"
    },
    {
      "src": "block_comment:     \n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */ [61329,62255]",
      "dest": "block_comment:     \n     * <p>Search a String to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)            = -1\n     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n     * StringUtils.indexOfAnyBut(*, null)            = -1\n     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */ [62068,62994]"
    },
    {
      "src": "type: char [93918,93922]",
      "dest": "type: char [95412,95416]"
    },
    {
      "src": "block [223730,223766]",
      "dest": "block [225224,225260]"
    },
    {
      "src": "if_statement [214567,214620]",
      "dest": "if_statement [216061,216114]"
    },
    {
      "src": "decimal_integer_literal: 7 [220005,220006]",
      "dest": "decimal_integer_literal: 7 [221499,221500]"
    },
    {
      "src": "argument_list [175230,175233]",
      "dest": "argument_list [176724,176727]"
    },
    {
      "src": "identifier: tag [87771,87774]",
      "dest": "identifier: tag [89265,89268]"
    },
    {
      "src": "identifier: ch [170081,170083]",
      "dest": "identifier: ch [171575,171577]"
    },
    {
      "src": "identifier: length [205773,205779]",
      "dest": "identifier: length [207267,207273]"
    },
    {
      "src": "comparison_operator: != [18901,18903]",
      "dest": "comparison_operator: != [18901,18903]"
    },
    {
      "src": "method_invocation [204475,204487]",
      "dest": "method_invocation [205969,205981]"
    },
    {
      "src": "identifier: regex [25037,25042]",
      "dest": "identifier: regex [25037,25042]"
    },
    {
      "src": "type: int [145658,145661]",
      "dest": "type: int [147152,147155]"
    },
    {
      "src": "identifier: idx [199875,199878]",
      "dest": "identifier: idx [201369,201372]"
    },
    {
      "src": "?: ? [36273,36274]",
      "dest": "?: ? [36273,36274]"
    },
    {
      "src": "identifier: locale [192796,192802]",
      "dest": "identifier: locale [194290,194296]"
    },
    {
      "src": "argument_list [49584,49586]",
      "dest": "argument_list [49584,49586]"
    },
    {
      "src": "type: String [13669,13675]",
      "dest": "type: String [13669,13675]"
    },
    {
      "src": "binary_expression [198204,198247]",
      "dest": "binary_expression [199698,199741]"
    },
    {
      "src": "block [143290,143524]",
      "dest": "block [144784,145018]"
    },
    {
      "src": "parenthesized_expression [110829,110861]",
      "dest": "parenthesized_expression [112323,112355]"
    },
    {
      "src": "false: false [203154,203159]",
      "dest": "false: false [204648,204653]"
    },
    {
      "src": "identifier: join [126092,126096]",
      "dest": "identifier: join [127586,127590]"
    },
    {
      "src": "local_variable_declaration [165834,165863]",
      "dest": "local_variable_declaration [167328,167357]"
    },
    {
      "src": "method_invocation [179070,179094]",
      "dest": "method_invocation [180564,180588]"
    },
    {
      "src": "parenthesized_expression [90930,90943]",
      "dest": "parenthesized_expression [92424,92437]"
    },
    {
      "src": "formal_parameters [144536,144563]",
      "dest": "formal_parameters [146030,146057]"
    },
    {
      "src": "identifier: str [45059,45062]",
      "dest": "identifier: str [45059,45062]"
    },
    {
      "src": "assignment_expression [145774,145797]",
      "dest": "assignment_expression [147268,147291]"
    },
    {
      "src": "formal_parameters [89128,89167]",
      "dest": "formal_parameters [90622,90661]"
    },
    {
      "src": "identifier: CharUtils [205838,205847]",
      "dest": "identifier: CharUtils [207332,207341]"
    },
    {
      "src": "parenthesized_expression [150315,150336]",
      "dest": "parenthesized_expression [151809,151830]"
    },
    {
      "src": "argument_list [9647,9651]",
      "dest": "argument_list [9647,9651]"
    },
    {
      "src": "identifier: str [12649,12652]",
      "dest": "identifier: str [12649,12652]"
    },
    {
      "src": "increment_operator: ++ [66659,66661]",
      "dest": "increment_operator: ++ [67778,67780]"
    },
    {
      "src": "binary_expression [77405,77424]",
      "dest": "binary_expression [78899,78918]"
    },
    {
      "src": "identifier: max [104944,104947]",
      "dest": "identifier: max [106438,106441]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [54585,54600]",
      "dest": "identifier: INDEX_NOT_FOUND [54585,54600]"
    },
    {
      "src": "comparison_operator: == [170362,170364]",
      "dest": "comparison_operator: == [171856,171858]"
    },
    {
      "src": "identifier: str [221901,221904]",
      "dest": "identifier: str [223395,223398]"
    },
    {
      "src": "identifier: separator [104393,104402]",
      "dest": "identifier: separator [105887,105896]"
    },
    {
      "src": "affectation_operator: = [199858,199859]",
      "dest": "affectation_operator: = [201352,201353]"
    },
    {
      "src": "expression_statement [118370,118383]",
      "dest": "expression_statement [119864,119877]"
    },
    {
      "src": "dimensions_expr [235540,235545]",
      "dest": "dimensions_expr [237034,237039]"
    },
    {
      "src": "affectation_operator: = [23229,23230]",
      "dest": "affectation_operator: = [23229,23230]"
    },
    {
      "src": "type: String [11630,11636]",
      "dest": "type: String [11630,11636]"
    },
    {
      "src": "null_literal: null [65194,65198]",
      "dest": "null_literal: null [66241,66245]"
    },
    {
      "src": "return_statement [83188,83201]",
      "dest": "return_statement [84682,84695]"
    },
    {
      "src": "return_statement [36633,36646]",
      "dest": "return_statement [36633,36646]"
    },
    {
      "src": "identifier: str2 [28561,28565]",
      "dest": "identifier: str2 [28561,28565]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [72319,72392]",
      "dest": "line_comment: //----------------------------------------------------------------------- [73813,73886]"
    },
    {
      "src": "type: char [137151,137155]",
      "dest": "type: char [138645,138649]"
    },
    {
      "src": "expression_statement [199963,199971]",
      "dest": "expression_statement [201457,201465]"
    },
    {
      "src": "block [57451,57488]",
      "dest": "block [57791,57828]"
    },
    {
      "src": "type: int [189001,189004]",
      "dest": "type: int [190495,190498]"
    },
    {
      "src": "identifier: valueOf [184209,184216]",
      "dest": "identifier: valueOf [185703,185710]"
    },
    {
      "src": "cast_expression [24875,24927]",
      "dest": "cast_expression [24875,24927]"
    },
    {
      "src": "static: static [99655,99661]",
      "dest": "static: static [101149,101155]"
    },
    {
      "src": "identifier: j [54849,54850]",
      "dest": "identifier: j [58156,58157]"
    },
    {
      "src": "binary_expression [204421,204469]",
      "dest": "binary_expression [205915,205963]"
    },
    {
      "src": "arithmetic_operator: - [36488,36489]",
      "dest": "arithmetic_operator: - [36488,36489]"
    },
    {
      "src": "identifier: isEmpty [83093,83100]",
      "dest": "identifier: isEmpty [84587,84594]"
    },
    {
      "src": "identifier: size [188911,188915]",
      "dest": "identifier: size [190405,190409]"
    },
    {
      "src": "binary_expression [78481,78488]",
      "dest": "binary_expression [79975,79982]"
    },
    {
      "src": "identifier: match [119069,119074]",
      "dest": "identifier: match [120563,120568]"
    },
    {
      "src": "string_fragment: NoSuchMethodException occurred during 1.6 backcompat code [25427,25484]",
      "dest": "string_fragment: NoSuchMethodException occurred during 1.6 backcompat code [25427,25484]"
    },
    {
      "src": "identifier: padStr [181477,181483]",
      "dest": "identifier: padStr [182971,182977]"
    },
    {
      "src": "identifier: str [42242,42245]",
      "dest": "identifier: str [42242,42245]"
    },
    {
      "src": "variable_declarator [175214,175233]",
      "dest": "variable_declarator [176708,176727]"
    },
    {
      "src": "parenthesized_expression [219993,220007]",
      "dest": "parenthesized_expression [221487,221501]"
    },
    {
      "src": "formal_parameter [104129,104154]",
      "dest": "formal_parameter [105623,105648]"
    },
    {
      "src": "false: false [209349,209354]",
      "dest": "false: false [210843,210848]"
    },
    {
      "src": "update_expression [235917,235920]",
      "dest": "update_expression [237411,237414]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets the substring after the last occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * An empty or <code>null</code> separator will return the empty string if\n     * the input string is not <code>null</code>.</p>\n     *\n     * <p>If nothing is found, the empty string is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringAfterLast(null, *)      = null\n     * StringUtils.substringAfterLast(\"\", *)        = \"\"\n     * StringUtils.substringAfterLast(*, \"\")        = \"\"\n     * StringUtils.substringAfterLast(*, null)      = \"\"\n     * StringUtils.substringAfterLast(\"abc\", \"a\")   = \"bc\"\n     * StringUtils.substringAfterLast(\"abcba\", \"b\") = \"a\"\n     * StringUtils.substringAfterLast(\"abc\", \"c\")   = \"\"\n     * StringUtils.substringAfterLast(\"a\", \"a\")     = \"\"\n     * StringUtils.substringAfterLast(\"a\", \"z\")     = \"\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring after the last occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [84931,86232]",
      "dest": "block_comment:     \n     * <p>Gets the substring after the last occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * An empty or <code>null</code> separator will return the empty string if\n     * the input string is not <code>null</code>.</p>\n     *\n     * <p>If nothing is found, the empty string is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringAfterLast(null, *)      = null\n     * StringUtils.substringAfterLast(\"\", *)        = \"\"\n     * StringUtils.substringAfterLast(*, \"\")        = \"\"\n     * StringUtils.substringAfterLast(*, null)      = \"\"\n     * StringUtils.substringAfterLast(\"abc\", \"a\")   = \"bc\"\n     * StringUtils.substringAfterLast(\"abcba\", \"b\") = \"a\"\n     * StringUtils.substringAfterLast(\"abc\", \"c\")   = \"\"\n     * StringUtils.substringAfterLast(\"a\", \"a\")     = \"\"\n     * StringUtils.substringAfterLast(\"a\", \"z\")     = \"\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring after the last occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [86425,87726]"
    },
    {
      "src": "identifier: len [168253,168256]",
      "dest": "identifier: len [169747,169750]"
    },
    {
      "src": "binary_expression [127640,127652]",
      "dest": "binary_expression [129134,129146]"
    },
    {
      "src": "decimal_integer_literal: 0 [84911,84912]",
      "dest": "decimal_integer_literal: 0 [86405,86406]"
    },
    {
      "src": "if_statement [162435,162486]",
      "dest": "if_statement [163929,163980]"
    },
    {
      "src": "decimal_integer_literal: 0 [235908,235909]",
      "dest": "decimal_integer_literal: 0 [237402,237403]"
    },
    {
      "src": "block_comment: \n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @author Apache Software Foundation\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */ [993,5203]",
      "dest": "block_comment: \n * <p>Operations on {@link java.lang.String} that are\n * <code>null</code> safe.</p>\n *\n * <ul>\n *  <li><b>IsEmpty/IsBlank</b>\n *      - checks if a String contains text</li>\n *  <li><b>Trim/Strip</b>\n *      - removes leading and trailing whitespace</li>\n *  <li><b>Equals</b>\n *      - compares two strings null-safe</li>\n *  <li><b>startsWith</b>\n *      - check if a String starts with a prefix null-safe</li>\n *  <li><b>endsWith</b>\n *      - check if a String ends with a suffix null-safe</li>\n *  <li><b>IndexOf/LastIndexOf/Contains</b>\n *      - null-safe index-of checks\n *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n *      - index-of any of a set of Strings</li>\n *  <li><b>ContainsOnly/ContainsNone/ContainsAny</b>\n *      - does String contains only/none/any of these characters</li>\n *  <li><b>Substring/Left/Right/Mid</b>\n *      - null-safe substring extractions</li>\n *  <li><b>SubstringBefore/SubstringAfter/SubstringBetween</b>\n *      - substring extraction relative to other strings</li>\n *  <li><b>Split/Join</b>\n *      - splits a String into an array of substrings and vice versa</li>\n *  <li><b>Remove/Delete</b>\n *      - removes part of a String</li>\n *  <li><b>Replace/Overlay</b>\n *      - Searches a String and replaces one String with another</li>\n *  <li><b>Chomp/Chop</b>\n *      - removes the last part of a String</li>\n *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n *      - pads a String</li>\n *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n *      - changes the case of a String</li>\n *  <li><b>CountMatches</b>\n *      - counts the number of occurrences of one String in another</li>\n *  <li><b>IsAlpha/IsNumeric/IsWhitespace/IsAsciiPrintable</b>\n *      - checks the characters in a String</li>\n *  <li><b>DefaultString</b>\n *      - protects against a null input String</li>\n *  <li><b>Reverse/ReverseDelimited</b>\n *      - reverses a String</li>\n *  <li><b>Abbreviate</b>\n *      - abbreviates a string using ellipsis</li>\n *  <li><b>Difference</b>\n *      - compares Strings and reports on their differences</li>\n *  <li><b>LevensteinDistance</b>\n *      - the number of changes needed to change one String into another</li>\n * </ul>\n *\n * <p>The <code>StringUtils</code> class defines certain words related to\n * String handling.</p>\n *\n * <ul>\n *  <li>null - <code>null</code></li>\n *  <li>empty - a zero-length string (<code>\"\"</code>)</li>\n *  <li>space - the space character (<code>' '</code>, char 32)</li>\n *  <li>whitespace - the characters defined by {@link Character#isWhitespace(char)}</li>\n *  <li>trim - the characters &lt;= 32 as in {@link String#trim()}</li>\n * </ul>\n *\n * <p><code>StringUtils</code> handles <code>null</code> input Strings quietly.\n * That is to say that a <code>null</code> input will return <code>null</code>.\n * Where a <code>boolean</code> or <code>int</code> is being returned\n * details vary by method.</p>\n *\n * <p>A side effect of the <code>null</code> handling is that a\n * <code>NullPointerException</code> should be considered a bug in\n * <code>StringUtils</code>.</p>\n *\n * <p>Methods in this class give sample code to explain their operation.\n * The symbol <code>*</code> is used to indicate any input including <code>null</code>.</p>\n *\n * <p>#ThreadSafe#</p>\n * @see java.lang.String\n * @author Apache Software Foundation\n * @author <a href=\"http://jakarta.apache.org/turbine/\">Apache Jakarta Turbine</a>\n * @author <a href=\"mailto:jon@latchkey.com\">Jon S. Stevens</a>\n * @author Daniel L. Rall\n * @author <a href=\"mailto:gcoladonato@yahoo.com\">Greg Coladonato</a>\n * @author <a href=\"mailto:ed@apache.org\">Ed Korthof</a>\n * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n * @author Holger Krauth\n * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n * @author Arun Mammen Thomas\n * @author Gary Gregory\n * @author Phil Steitz\n * @author Al Chou\n * @author Michael Davey\n * @author Reuben Sivan\n * @author Chris Hyzer\n * @author Scott Johnson\n * @since 1.0\n * @version $Id$\n */ [993,5203]"
    },
    {
      "src": "affectation_operator: *= [150296,150298]",
      "dest": "affectation_operator: *= [151790,151792]"
    },
    {
      "src": "method_invocation [23971,24009]",
      "dest": "method_invocation [23971,24009]"
    },
    {
      "src": "identifier: ClassUtils [24301,24311]",
      "dest": "identifier: ClassUtils [24301,24311]"
    },
    {
      "src": "update_expression [20400,20405]",
      "dest": "update_expression [20400,20405]"
    },
    {
      "src": "type: String [174340,174346]",
      "dest": "type: String [175834,175840]"
    },
    {
      "src": "binary_expression [175321,175331]",
      "dest": "binary_expression [176815,176825]"
    },
    {
      "src": "identifier: indexOf [31809,31816]",
      "dest": "identifier: indexOf [31809,31816]"
    },
    {
      "src": "return_statement [115513,115564]",
      "dest": "return_statement [117007,117058]"
    },
    {
      "src": "type: StringBuilder [198293,198306]",
      "dest": "type: StringBuilder [199787,199800]"
    },
    {
      "src": "argument_list [24796,24803]",
      "dest": "argument_list [24796,24803]"
    },
    {
      "src": "affectation_operator: = [162078,162079]",
      "dest": "affectation_operator: = [163572,163573]"
    },
    {
      "src": "identifier: toString [197008,197016]",
      "dest": "identifier: toString [198502,198510]"
    },
    {
      "src": "comparison_operator: <= [36151,36153]",
      "dest": "comparison_operator: <= [36151,36153]"
    },
    {
      "src": "identifier: start [19002,19007]",
      "dest": "identifier: start [19002,19007]"
    },
    {
      "src": "null_literal: null [107785,107789]",
      "dest": "null_literal: null [109279,109283]"
    },
    {
      "src": "line_comment: // [5463,5465]",
      "dest": "line_comment: // [5463,5465]"
    },
    {
      "src": "binary_expression [20324,20332]",
      "dest": "binary_expression [20324,20332]"
    },
    {
      "src": "method_invocation [127747,127784]",
      "dest": "method_invocation [129241,129278]"
    },
    {
      "src": "identifier: i [137274,137275]",
      "dest": "identifier: i [138768,138769]"
    },
    {
      "src": "type: RuntimeException [25569,25585]",
      "dest": "type: RuntimeException [25569,25585]"
    },
    {
      "src": "decimal_integer_literal: 0 [240036,240037]",
      "dest": "decimal_integer_literal: 0 [241530,241531]"
    },
    {
      "src": "binary_expression [176882,176897]",
      "dest": "binary_expression [178376,178391]"
    },
    {
      "src": "type: String [148290,148296]",
      "dest": "type: String [149784,149790]"
    },
    {
      "src": "method_invocation [165990,166003]",
      "dest": "method_invocation [167484,167497]"
    },
    {
      "src": "block [50866,50982]",
      "dest": "block [50866,50982]"
    },
    {
      "src": "identifier: substrings [106421,106431]",
      "dest": "identifier: substrings [107915,107925]"
    },
    {
      "src": "argument_list [95223,95255]",
      "dest": "argument_list [96717,96749]"
    },
    {
      "src": "method_invocation [133045,133060]",
      "dest": "method_invocation [134539,134554]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [89325,89340]",
      "dest": "identifier: INDEX_NOT_FOUND [90819,90834]"
    },
    {
      "src": "decimal_integer_literal: 0 [199827,199828]",
      "dest": "decimal_integer_literal: 0 [201321,201322]"
    },
    {
      "src": "identifier: first [134336,134341]",
      "dest": "identifier: first [135830,135835]"
    },
    {
      "src": "identifier: max [118700,118703]",
      "dest": "identifier: max [120194,120197]"
    },
    {
      "src": "object_creation_expression [123993,124036]",
      "dest": "object_creation_expression [125487,125530]"
    },
    {
      "src": "identifier: iterator [132315,132323]",
      "dest": "identifier: iterator [133809,133817]"
    },
    {
      "src": "identifier: remove [143282,143288]",
      "dest": "identifier: remove [144776,144782]"
    },
    {
      "src": "argument_list [59661,59663]",
      "dest": "argument_list [60048,60050]"
    },
    {
      "src": "arithmetic_operator: + [158526,158527]",
      "dest": "arithmetic_operator: + [160020,160021]"
    },
    {
      "src": "identifier: end [168330,168333]",
      "dest": "identifier: end [169824,169827]"
    },
    {
      "src": "binary_expression [57593,57605]",
      "dest": "binary_expression [57933,57945]"
    },
    {
      "src": "binary_expression [123073,123084]",
      "dest": "binary_expression [124567,124578]"
    },
    {
      "src": "method_declaration [90705,91676]",
      "dest": "method_declaration [92199,93170]"
    },
    {
      "src": "static: static [215439,215445]",
      "dest": "static: static [216933,216939]"
    },
    {
      "src": "argument_list [145848,145863]",
      "dest": "argument_list [147342,147357]"
    },
    {
      "src": "method_invocation [184253,184287]",
      "dest": "method_invocation [185747,185781]"
    },
    {
      "src": "visibility: public [51801,51807]",
      "dest": "visibility: public [51801,51807]"
    },
    {
      "src": "method_invocation [91631,91669]",
      "dest": "method_invocation [93125,93163]"
    },
    {
      "src": "block [196668,197025]",
      "dest": "block [198162,198519]"
    },
    {
      "src": "if_statement [75939,76006]",
      "dest": "if_statement [77433,77500]"
    },
    {
      "src": "argument_list [123250,123252]",
      "dest": "argument_list [124744,124746]"
    },
    {
      "src": "formal_parameter [116348,116355]",
      "dest": "formal_parameter [117842,117849]"
    },
    {
      "src": "visibility: public [50806,50812]",
      "dest": "visibility: public [50806,50812]"
    },
    {
      "src": "parenthesized_expression [20527,20603]",
      "dest": "parenthesized_expression [20527,20603]"
    },
    {
      "src": "local_variable_declaration [185966,185998]",
      "dest": "local_variable_declaration [187460,187492]"
    },
    {
      "src": "identifier: str [198229,198232]",
      "dest": "identifier: str [199723,199726]"
    },
    {
      "src": "if_statement [141736,141842]",
      "dest": "if_statement [143230,143336]"
    },
    {
      "src": "type: String [91648,91654]",
      "dest": "type: String [93142,93148]"
    },
    {
      "src": "decimal_integer_literal: 0 [73729,73730]",
      "dest": "decimal_integer_literal: 0 [75223,75224]"
    },
    {
      "src": "type: String[] [152597,152605]",
      "dest": "type: String[] [154091,154099]"
    },
    {
      "src": "line_comment: // StripAll [20702,20713]",
      "dest": "line_comment: // StripAll [20702,20713]"
    },
    {
      "src": "method_invocation [35185,35231]",
      "dest": "method_invocation [35185,35231]"
    },
    {
      "src": "for_statement [145679,145822]",
      "dest": "for_statement [147173,147316]"
    },
    {
      "src": "type: int [104645,104648]",
      "dest": "type: int [106139,106142]"
    },
    {
      "src": "formal_parameters [196650,196667]",
      "dest": "formal_parameters [198144,198161]"
    },
    {
      "src": "block [173098,173135]",
      "dest": "block [174592,174629]"
    },
    {
      "src": "null_literal: null [128018,128022]",
      "dest": "null_literal: null [129512,129516]"
    },
    {
      "src": "identifier: searchStr [36551,36560]",
      "dest": "identifier: searchStr [36551,36560]"
    },
    {
      "src": "arithmetic_operator: - [39598,39599]",
      "dest": "arithmetic_operator: - [39598,39599]"
    },
    {
      "src": "identifier: separator [104052,104061]",
      "dest": "identifier: separator [105546,105555]"
    },
    {
      "src": "formal_parameter [145477,145487]",
      "dest": "formal_parameter [146971,146981]"
    },
    {
      "src": "expression_statement [119099,119103]",
      "dest": "expression_statement [120593,120597]"
    },
    {
      "src": "ternary_expression [236104,236130]",
      "dest": "ternary_expression [237598,237624]"
    },
    {
      "src": "identifier: toUpperCase [198716,198727]",
      "dest": "identifier: toUpperCase [200210,200221]"
    },
    {
      "src": "type: char [177959,177963]",
      "dest": "type: char [179453,179457]"
    },
    {
      "src": "type: String[] [215682,215690]",
      "dest": "type: String[] [217176,217184]"
    },
    {
      "src": "false: false [64056,64061]",
      "dest": "false: false [65103,65108]"
    },
    {
      "src": "method_invocation [56136,56177]",
      "dest": "method_invocation [56482,56523]"
    },
    {
      "src": "decimal_integer_literal: 1 [236270,236271]",
      "dest": "decimal_integer_literal: 1 [237764,237765]"
    },
    {
      "src": "field_access [123175,123204]",
      "dest": "field_access [124669,124698]"
    },
    {
      "src": "formal_parameter [148269,148288]",
      "dest": "formal_parameter [149763,149782]"
    },
    {
      "src": "null_literal: null [130796,130800]",
      "dest": "null_literal: null [132290,132294]"
    },
    {
      "src": "type: boolean [116883,116890]",
      "dest": "type: boolean [118377,118384]"
    },
    {
      "src": "static: static [177925,177931]",
      "dest": "static: static [179419,179425]"
    },
    {
      "src": "type: String [163604,163610]",
      "dest": "type: String [165098,165104]"
    },
    {
      "src": "identifier: substring [80037,80046]",
      "dest": "identifier: substring [81531,81540]"
    },
    {
      "src": "identifier: str [12693,12696]",
      "dest": "identifier: str [12693,12696]"
    },
    {
      "src": "false: false [93987,93992]",
      "dest": "false: false [95481,95486]"
    },
    {
      "src": "identifier: len [78641,78644]",
      "dest": "identifier: len [80135,80138]"
    },
    {
      "src": "block_comment:     \n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. This will not repeat. For repeating replaces, call the\n     * overloaded method.\n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *)        = null\n     *  StringUtils.replaceEach(\"\", *, *)          = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0]) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  = \"wcte\"\n     *  (example of how it does not repeat)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  = \"dcte\"\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */ [150778,152546]",
      "dest": "block_comment:     \n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. This will not repeat. For repeating replaces, call the\n     * overloaded method.\n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *)        = null\n     *  StringUtils.replaceEach(\"\", *, *)          = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0]) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null)  = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"})  = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"})  = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"})  = \"wcte\"\n     *  (example of how it does not repeat)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"})  = \"dcte\"\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */ [152272,154040]"
    },
    {
      "src": "logical_operator: || [36140,36142]",
      "dest": "logical_operator: || [36140,36142]"
    },
    {
      "src": "identifier: offset [220128,220134]",
      "dest": "identifier: offset [221622,221628]"
    },
    {
      "src": "affectation_operator: = [111178,111179]",
      "dest": "affectation_operator: = [112672,112673]"
    },
    {
      "src": "static: static [55963,55969]",
      "dest": "static: static [56309,56315]"
    },
    {
      "src": "identifier: CharUtils [170306,170315]",
      "dest": "identifier: CharUtils [171800,171809]"
    },
    {
      "src": "variable_declarator [202077,202082]",
      "dest": "variable_declarator [203571,203576]"
    },
    {
      "src": "formal_parameter [191872,191882]",
      "dest": "formal_parameter [193366,193376]"
    },
    {
      "src": "argument_list [204361,204363]",
      "dest": "argument_list [205855,205857]"
    },
    {
      "src": "method_invocation [244235,244250]",
      "dest": "method_invocation [245729,245744]"
    },
    {
      "src": "assignment_expression [111076,111087]",
      "dest": "assignment_expression [112570,112581]"
    },
    {
      "src": "increment_operator: ++ [118694,118696]",
      "dest": "increment_operator: ++ [120188,120190]"
    },
    {
      "src": "identifier: tempIndex [161875,161884]",
      "dest": "identifier: tempIndex [163369,163378]"
    },
    {
      "src": "if_statement [170294,170497]",
      "dest": "if_statement [171788,171991]"
    },
    {
      "src": "block [131128,131165]",
      "dest": "block [132622,132659]"
    },
    {
      "src": "return_statement [17161,17172]",
      "dest": "return_statement [17161,17172]"
    },
    {
      "src": "identifier: stripToNull [14698,14709]",
      "dest": "identifier: stripToNull [14698,14709]"
    },
    {
      "src": "identifier: length [168165,168171]",
      "dest": "identifier: length [169659,169665]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [12733,12806]",
      "dest": "line_comment: //----------------------------------------------------------------------- [12733,12806]"
    },
    {
      "src": "new: new [178163,178166]",
      "dest": "new: new [179657,179660]"
    },
    {
      "src": "parenthesized_expression [176633,176667]",
      "dest": "parenthesized_expression [178127,178161]"
    },
    {
      "src": "method_invocation [173191,173216]",
      "dest": "method_invocation [174685,174710]"
    },
    {
      "src": "argument_list [93966,93993]",
      "dest": "argument_list [95460,95487]"
    },
    {
      "src": "identifier: anyStringNull [227721,227734]",
      "dest": "identifier: anyStringNull [229215,229228]"
    },
    {
      "src": "argument_list [149886,149900]",
      "dest": "argument_list [151380,151394]"
    },
    {
      "src": "variable_declarator [66591,66621]",
      "dest": "variable_declarator [67670,67700]"
    },
    {
      "src": "identifier: str [169979,169982]",
      "dest": "identifier: str [171473,171476]"
    },
    {
      "src": "method_invocation [238122,238152]",
      "dest": "method_invocation [239616,239646]"
    },
    {
      "src": "identifier: swapCase [198149,198157]",
      "dest": "identifier: swapCase [199643,199651]"
    },
    {
      "src": "identifier: cs1 [225359,225362]",
      "dest": "identifier: cs1 [226853,226856]"
    },
    {
      "src": "local_variable_declaration [116852,116874]",
      "dest": "local_variable_declaration [118346,118368]"
    },
    {
      "src": "identifier: preserveAllTokens [117123,117140]",
      "dest": "identifier: preserveAllTokens [118617,118634]"
    },
    {
      "src": "block_comment:     \n     * <p>Case insensitive check if a String ends with a specified suffix.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.endsWithIgnoreCase(null, null)      = true\n     * StringUtils.endsWithIgnoreCase(null, \"def\")     = false\n     * StringUtils.endsWithIgnoreCase(\"abcdef\", null)  = false\n     * StringUtils.endsWithIgnoreCase(\"abcdef\", \"def\") = true\n     * StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"def\") = true\n     * StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"cde\") = false\n     * </pre>\n     *\n     * @see java.lang.String#endsWith(String)\n     * @param str  the String to check, may be null\n     * @param suffix the suffix to find, may be null\n     * @return <code>true</code> if the String ends with the suffix, case insensitive, or\n     *  both <code>null</code>\n     * @since 2.4\n     */ [242455,243427]",
      "dest": "block_comment:     \n     * <p>Case insensitive check if a String ends with a specified suffix.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.endsWithIgnoreCase(null, null)      = true\n     * StringUtils.endsWithIgnoreCase(null, \"def\")     = false\n     * StringUtils.endsWithIgnoreCase(\"abcdef\", null)  = false\n     * StringUtils.endsWithIgnoreCase(\"abcdef\", \"def\") = true\n     * StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"def\") = true\n     * StringUtils.endsWithIgnoreCase(\"ABCDEF\", \"cde\") = false\n     * </pre>\n     *\n     * @see java.lang.String#endsWith(String)\n     * @param str  the String to check, may be null\n     * @param suffix the suffix to find, may be null\n     * @return <code>true</code> if the String ends with the suffix, case insensitive, or\n     *  both <code>null</code>\n     * @since 2.4\n     */ [243949,244921]"
    },
    {
      "src": "block [118613,118936]",
      "dest": "block [120107,120430]"
    },
    {
      "src": "argument_list [25745,25812]",
      "dest": "argument_list [25745,25812]"
    },
    {
      "src": "identifier: strsLen [23191,23198]",
      "dest": "identifier: strsLen [23191,23198]"
    },
    {
      "src": "variable_declarator [161049,161058]",
      "dest": "variable_declarator [162543,162552]"
    },
    {
      "src": "argument_list [178293,178298]",
      "dest": "argument_list [179787,179792]"
    },
    {
      "src": "affectation_operator: = [123480,123481]",
      "dest": "affectation_operator: = [124974,124975]"
    },
    {
      "src": "null_literal: null [15844,15848]",
      "dest": "null_literal: null [15844,15848]"
    },
    {
      "src": "catch_clause [26178,26326]",
      "dest": "catch_clause [26178,26326]"
    },
    {
      "src": "parenthesized_expression [8710,8753]",
      "dest": "parenthesized_expression [8710,8753]"
    },
    {
      "src": "block [86335,86370]",
      "dest": "block [87829,87864]"
    },
    {
      "src": "identifier: replaceChar [163754,163765]",
      "dest": "identifier: replaceChar [165248,165259]"
    },
    {
      "src": "throw_statement [219489,219559]",
      "dest": "throw_statement [220983,221053]"
    },
    {
      "src": "affectation_operator: = [145629,145630]",
      "dest": "affectation_operator: = [147123,147124]"
    },
    {
      "src": "if_statement [78477,78527]",
      "dest": "if_statement [79971,80021]"
    },
    {
      "src": "string_literal [6011,6013]",
      "dest": "string_literal [6011,6013]"
    },
    {
      "src": "identifier: size [190854,190858]",
      "dest": "identifier: size [192348,192352]"
    },
    {
      "src": "method_declaration [103050,103229]",
      "dest": "method_declaration [104544,104723]"
    },
    {
      "src": "affectation_operator: = [159363,159364]",
      "dest": "affectation_operator: = [160857,160858]"
    },
    {
      "src": "logical_operator: || [159511,159513]",
      "dest": "logical_operator: || [161005,161007]"
    },
    {
      "src": "identifier: searchStr [35205,35214]",
      "dest": "identifier: searchStr [35205,35214]"
    },
    {
      "src": "line_comment: // NOTE: logic mostly below END [160012,160043]",
      "dest": "line_comment: // NOTE: logic mostly below END [161506,161537]"
    },
    {
      "src": "affectation_operator: = [202045,202046]",
      "dest": "affectation_operator: = [203539,203540]"
    },
    {
      "src": "method_declaration [165481,166416]",
      "dest": "method_declaration [166975,167910]"
    },
    {
      "src": "identifier: searchChars [62311,62322]",
      "dest": "identifier: searchChars [63050,63061]"
    },
    {
      "src": "identifier: pos [83224,83227]",
      "dest": "identifier: pos [84718,84721]"
    },
    {
      "src": "arithmetic_operator: + [150549,150550]",
      "dest": "arithmetic_operator: + [152043,152044]"
    },
    {
      "src": "return_statement [165634,165645]",
      "dest": "return_statement [167128,167139]"
    },
    {
      "src": "identifier: str [175220,175223]",
      "dest": "identifier: str [176714,176717]"
    },
    {
      "src": "identifier: toLowerCase [198616,198627]",
      "dest": "identifier: toLowerCase [200110,200121]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes all occurrences of a substring from within the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> remove string will return the source string.\n     * An empty (\"\") remove string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.remove(null, *)        = null\n     * StringUtils.remove(\"\", *)          = \"\"\n     * StringUtils.remove(*, null)        = *\n     * StringUtils.remove(*, \"\")          = *\n     * StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n     * StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     */ [143530,144504]",
      "dest": "block_comment:     \n     * <p>Removes all occurrences of a substring from within the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> remove string will return the source string.\n     * An empty (\"\") remove string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.remove(null, *)        = null\n     * StringUtils.remove(\"\", *)          = \"\"\n     * StringUtils.remove(*, null)        = *\n     * StringUtils.remove(*, \"\")          = *\n     * StringUtils.remove(\"queued\", \"ue\") = \"qd\"\n     * StringUtils.remove(\"queued\", \"zz\") = \"queued\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     */ [145024,145998]"
    },
    {
      "src": "argument_list [244393,244444]",
      "dest": "argument_list [245887,245938]"
    },
    {
      "src": "identifier: newTokenStart [123720,123733]",
      "dest": "identifier: newTokenStart [125214,125227]"
    },
    {
      "src": "parenthesized_expression [75615,75628]",
      "dest": "parenthesized_expression [77109,77122]"
    },
    {
      "src": "identifier: text [152591,152595]",
      "dest": "identifier: text [154085,154089]"
    },
    {
      "src": "formal_parameter [199738,199748]",
      "dest": "formal_parameter [201232,201242]"
    },
    {
      "src": "identifier: str [174564,174567]",
      "dest": "identifier: str [176058,176061]"
    },
    {
      "src": "identifier: str [120491,120494]",
      "dest": "identifier: str [121985,121988]"
    },
    {
      "src": "decimal_integer_literal: 0 [168632,168633]",
      "dest": "decimal_integer_literal: 0 [170126,170127]"
    },
    {
      "src": "method_invocation [63949,63960]",
      "dest": "method_invocation [64996,65007]"
    },
    {
      "src": "identifier: leftPad [190785,190792]",
      "dest": "identifier: leftPad [192279,192286]"
    },
    {
      "src": "dimensions_expr [174959,174973]",
      "dest": "dimensions_expr [176453,176467]"
    },
    {
      "src": "identifier: size [119286,119290]",
      "dest": "identifier: size [120780,120784]"
    },
    {
      "src": "expression_statement [186112,186146]",
      "dest": "expression_statement [187606,187640]"
    },
    {
      "src": "parenthesized_expression [131521,131539]",
      "dest": "parenthesized_expression [133015,133033]"
    },
    {
      "src": "if_statement [33507,33592]",
      "dest": "if_statement [33507,33592]"
    },
    {
      "src": "argument_list [143452,143487]",
      "dest": "argument_list [144946,144981]"
    },
    {
      "src": "return_statement [84860,84871]",
      "dest": "return_statement [86354,86365]"
    },
    {
      "src": "comparison_operator: < [57854,57855]",
      "dest": "comparison_operator: < [54959,54960]"
    },
    {
      "src": "type: String [157792,157798]",
      "dest": "type: String [159286,159292]"
    },
    {
      "src": "identifier: length [219706,219712]",
      "dest": "identifier: length [221200,221206]"
    },
    {
      "src": "argument_list [208266,208269]",
      "dest": "argument_list [209760,209763]"
    },
    {
      "src": "identifier: strLen [173158,173164]",
      "dest": "identifier: strLen [174652,174658]"
    },
    {
      "src": "modifiers [103981,103995]",
      "dest": "modifiers [105475,105489]"
    },
    {
      "src": "block [137376,137411]",
      "dest": "block [138870,138905]"
    },
    {
      "src": "comparison_operator: <= [236069,236071]",
      "dest": "comparison_operator: <= [237563,237565]"
    },
    {
      "src": "identifier: length [57515,57521]",
      "dest": "identifier: length [57855,57861]"
    },
    {
      "src": "type: char [235831,235835]",
      "dest": "type: char [237325,237329]"
    },
    {
      "src": "comparison_operator: == [170106,170108]",
      "dest": "comparison_operator: == [171600,171602]"
    },
    {
      "src": "identifier: end [20529,20532]",
      "dest": "identifier: end [20529,20532]"
    },
    {
      "src": "identifier: found [36315,36320]",
      "dest": "identifier: found [36315,36320]"
    },
    {
      "src": "new: new [214630,214633]",
      "dest": "new: new [216124,216127]"
    },
    {
      "src": "comparison_operator: == [123530,123532]",
      "dest": "comparison_operator: == [125024,125026]"
    },
    {
      "src": "comparison_operator: == [46585,46587]",
      "dest": "comparison_operator: == [46585,46587]"
    },
    {
      "src": "affectation_operator: = [145787,145788]",
      "dest": "affectation_operator: = [147281,147282]"
    },
    {
      "src": "line_comment: // Split on whitespace. [104420,104443]",
      "dest": "line_comment: // Split on whitespace. [105914,105937]"
    },
    {
      "src": "arithmetic_operator: - [219774,219775]",
      "dest": "arithmetic_operator: - [221268,221269]"
    },
    {
      "src": "type: String [141630,141636]",
      "dest": "type: String [143124,143130]"
    },
    {
      "src": "affectation_operator: = [131384,131385]",
      "dest": "affectation_operator: = [132878,132879]"
    },
    {
      "src": "affectation_operator: = [24299,24300]",
      "dest": "affectation_operator: = [24299,24300]"
    },
    {
      "src": "return_statement [155329,155401]",
      "dest": "return_statement [156823,156895]"
    },
    {
      "src": "identifier: str [87710,87713]",
      "dest": "identifier: str [89204,89207]"
    },
    {
      "src": "identifier: str [184018,184021]",
      "dest": "identifier: str [185512,185515]"
    },
    {
      "src": "formal_parameters [206834,206851]",
      "dest": "formal_parameters [208328,208345]"
    },
    {
      "src": "null_literal: null [70102,70106]",
      "dest": "null_literal: null [71596,71600]"
    },
    {
      "src": "false: false [57472,57477]",
      "dest": "false: false [57812,57817]"
    },
    {
      "src": "arithmetic_operator: - [101345,101346]",
      "dest": "arithmetic_operator: - [102839,102840]"
    },
    {
      "src": "binary_expression [233790,233812]",
      "dest": "binary_expression [235284,235306]"
    },
    {
      "src": "identifier: cs [196814,196816]",
      "dest": "identifier: cs [198308,198310]"
    },
    {
      "src": "parenthesized_expression [40903,40917]",
      "dest": "parenthesized_expression [40903,40917]"
    },
    {
      "src": "decimal_integer_literal: 1 [236281,236282]",
      "dest": "decimal_integer_literal: 1 [237775,237776]"
    },
    {
      "src": "formal_parameter [99694,99704]",
      "dest": "formal_parameter [101188,101198]"
    },
    {
      "src": "logical_operator: || [104376,104378]",
      "dest": "logical_operator: || [105870,105872]"
    },
    {
      "src": "identifier: length [195562,195568]",
      "dest": "identifier: length [197056,197062]"
    },
    {
      "src": "method_invocation [160621,160648]",
      "dest": "method_invocation [162115,162142]"
    },
    {
      "src": "method_invocation [222415,222437]",
      "dest": "method_invocation [223909,223931]"
    },
    {
      "src": "field_access [71917,71934]",
      "dest": "field_access [73411,73428]"
    },
    {
      "src": "variable_declarator [198184,198190]",
      "dest": "variable_declarator [199678,199684]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [65350,65423]",
      "dest": "line_comment: //----------------------------------------------------------------------- [66397,66470]"
    },
    {
      "src": "visibility: public [40831,40837]",
      "dest": "visibility: public [40831,40837]"
    },
    {
      "src": "identifier: str [29430,29433]",
      "dest": "identifier: str [29430,29433]"
    },
    {
      "src": "formal_parameter [23881,23893]",
      "dest": "formal_parameter [23881,23893]"
    },
    {
      "src": "comparison_operator: == [190518,190520]",
      "dest": "comparison_operator: == [192012,192014]"
    },
    {
      "src": "identifier: length [186663,186669]",
      "dest": "identifier: length [188157,188163]"
    },
    {
      "src": "identifier: startIndex [131386,131396]",
      "dest": "identifier: startIndex [132880,132890]"
    },
    {
      "src": "decimal_integer_literal: 0 [104670,104671]",
      "dest": "decimal_integer_literal: 0 [106164,106165]"
    },
    {
      "src": "type: String [59514,59520]",
      "dest": "type: String [59901,59907]"
    },
    {
      "src": "comparison_operator: == [172993,172995]",
      "dest": "comparison_operator: == [174487,174489]"
    },
    {
      "src": "formal_parameters [126096,126128]",
      "dest": "formal_parameters [127590,127622]"
    },
    {
      "src": "binary_expression [200975,200981]",
      "dest": "binary_expression [202469,202475]"
    },
    {
      "src": "identifier: c [123231,123232]",
      "dest": "identifier: c [124725,124726]"
    },
    {
      "src": "variable_declarator [39573,39623]",
      "dest": "variable_declarator [39573,39623]"
    },
    {
      "src": "method_invocation [96793,96837]",
      "dest": "method_invocation [98287,98331]"
    },
    {
      "src": "identifier: searchList [161603,161613]",
      "dest": "identifier: searchList [163097,163107]"
    },
    {
      "src": "parenthesized_expression [133964,133985]",
      "dest": "parenthesized_expression [135458,135479]"
    },
    {
      "src": "identifier: max [99795,99798]",
      "dest": "identifier: max [101289,101292]"
    },
    {
      "src": "comparison_operator: < [8817,8818]",
      "dest": "comparison_operator: < [8817,8818]"
    },
    {
      "src": "block [73479,73515]",
      "dest": "block [74973,75009]"
    },
    {
      "src": "identifier: list [124212,124216]",
      "dest": "identifier: list [125706,125710]"
    },
    {
      "src": "identifier: length [150390,150396]",
      "dest": "identifier: length [151884,151890]"
    },
    {
      "src": "type: int [29411,29414]",
      "dest": "type: int [29411,29414]"
    },
    {
      "src": "false: false [99800,99805]",
      "dest": "false: false [101294,101299]"
    },
    {
      "src": "variable_declarator [175317,175335]",
      "dest": "variable_declarator [176811,176829]"
    },
    {
      "src": "identifier: list [116755,116759]",
      "dest": "identifier: list [118249,118253]"
    },
    {
      "src": "identifier: pads [184044,184048]",
      "dest": "identifier: pads [185538,185542]"
    },
    {
      "src": "formal_parameters [87702,87726]",
      "dest": "formal_parameters [89196,89220]"
    },
    {
      "src": "type: StringBuilder [165872,165885]",
      "dest": "type: StringBuilder [167366,167379]"
    },
    {
      "src": "type: String [75553,75559]",
      "dest": "type: String [77047,77053]"
    },
    {
      "src": "static: static [14684,14690]",
      "dest": "static: static [14684,14690]"
    },
    {
      "src": "arithmetic_operator: - [219952,219953]",
      "dest": "arithmetic_operator: - [221446,221447]"
    },
    {
      "src": "if_statement [211351,211446]",
      "dest": "if_statement [212845,212940]"
    },
    {
      "src": "comparison_operator: == [203124,203126]",
      "dest": "comparison_operator: == [204618,204620]"
    },
    {
      "src": "expression_statement [39537,39550]",
      "dest": "expression_statement [39537,39550]"
    },
    {
      "src": "identifier: i [175016,175017]",
      "dest": "identifier: i [176510,176511]"
    },
    {
      "src": "return_statement [86417,86430]",
      "dest": "return_statement [87911,87924]"
    },
    {
      "src": "expression_statement [70162,70188]",
      "dest": "expression_statement [71656,71682]"
    },
    {
      "src": "comparison_operator: == [165681,165683]",
      "dest": "comparison_operator: == [167175,167177]"
    },
    {
      "src": "identifier: pads [185992,185996]",
      "dest": "identifier: pads [187486,187490]"
    },
    {
      "src": "binary_expression [158144,158239]",
      "dest": "binary_expression [159638,159733]"
    },
    {
      "src": "formal_parameters [210138,210155]",
      "dest": "formal_parameters [211632,211649]"
    },
    {
      "src": "identifier: i [205800,205801]",
      "dest": "identifier: i [207294,207295]"
    },
    {
      "src": "parenthesized_expression [78480,78489]",
      "dest": "parenthesized_expression [79974,79983]"
    },
    {
      "src": "null_literal: null [239810,239814]",
      "dest": "null_literal: null [241304,241308]"
    },
    {
      "src": "type: String[] [99662,99670]",
      "dest": "type: String[] [101156,101164]"
    },
    {
      "src": "true: true [66530,66534]",
      "dest": "true: true [67577,67581]"
    },
    {
      "src": "type: String [40861,40867]",
      "dest": "type: String [40861,40867]"
    },
    {
      "src": "identifier: str [165522,165525]",
      "dest": "identifier: str [167016,167019]"
    },
    {
      "src": "argument_list [195706,195720]",
      "dest": "argument_list [197200,197214]"
    },
    {
      "src": "identifier: i [205807,205808]",
      "dest": "identifier: i [207301,207302]"
    },
    {
      "src": "block_comment:     \n     * <p>Check if a String starts with any of an array of specified strings.</p>\n     * \n     * <pre>\n     * StringUtils.startsWithAny(null, null)      = false\n     * StringUtils.startsWithAny(null, new String[] {\"abc\"})  = false\n     * StringUtils.startsWithAny(\"abcxyz\", null)     = false\n     * StringUtils.startsWithAny(\"abcxyz\", new String[] {\"\"}) = false\n     * StringUtils.startsWithAny(\"abcxyz\", new String[] {\"abc\"}) = true\n     * StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}) = true\n     * </pre>\n     *\n     * @param string  the String to check, may be null\n     * @param searchStrings the Strings to find, may be null or empty\n     * @return <code>true</code> if the String starts with any of the the prefixes, case insensitive, or\n     *  both <code>null</code>\n     * @since 2.5\n     */ [240072,240902]",
      "dest": "block_comment:     \n     * <p>Check if a String starts with any of an array of specified strings.</p>\n     * \n     * <pre>\n     * StringUtils.startsWithAny(null, null)      = false\n     * StringUtils.startsWithAny(null, new String[] {\"abc\"})  = false\n     * StringUtils.startsWithAny(\"abcxyz\", null)     = false\n     * StringUtils.startsWithAny(\"abcxyz\", new String[] {\"\"}) = false\n     * StringUtils.startsWithAny(\"abcxyz\", new String[] {\"abc\"}) = true\n     * StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}) = true\n     * </pre>\n     *\n     * @param string  the String to check, may be null\n     * @param searchStrings the Strings to find, may be null or empty\n     * @return <code>true</code> if the String starts with any of the the prefixes, case insensitive, or\n     *  both <code>null</code>\n     * @since 2.5\n     */ [241566,242396]"
    },
    {
      "src": "logical_operator: || [18484,18486]",
      "dest": "logical_operator: || [18484,18486]"
    },
    {
      "src": "type: boolean [52964,52971]",
      "dest": "type: boolean [52964,52971]"
    },
    {
      "src": "affectation_operator: = [175266,175267]",
      "dest": "affectation_operator: = [176760,176761]"
    },
    {
      "src": "formal_parameter [243485,243498]",
      "dest": "formal_parameter [244979,244992]"
    },
    {
      "src": "block [221933,222538]",
      "dest": "block [223427,224032]"
    },
    {
      "src": "decimal_integer_literal: 1 [170359,170360]",
      "dest": "decimal_integer_literal: 1 [171853,171854]"
    },
    {
      "src": "continue: continue [72124,72132]",
      "dest": "continue: continue [73618,73626]"
    },
    {
      "src": "expression_statement [36673,36681]",
      "dest": "expression_statement [36673,36681]"
    },
    {
      "src": "identifier: i [241193,241194]",
      "dest": "identifier: i [242687,242688]"
    },
    {
      "src": "new: new [175478,175481]",
      "dest": "new: new [176972,176975]"
    },
    {
      "src": "formal_parameter [49379,49391]",
      "dest": "formal_parameter [49379,49391]"
    },
    {
      "src": "unary_expression [162013,162015]",
      "dest": "unary_expression [163507,163509]"
    },
    {
      "src": "identifier: str [137312,137315]",
      "dest": "identifier: str [138806,138809]"
    },
    {
      "src": "formal_parameter [99724,99731]",
      "dest": "formal_parameter [101218,101225]"
    },
    {
      "src": "identifier: csLen [66651,66656]",
      "dest": "identifier: csLen [67770,67775]"
    },
    {
      "src": "identifier: cs [56147,56149]",
      "dest": "identifier: cs [56493,56495]"
    },
    {
      "src": "local_variable_declaration [23124,23162]",
      "dest": "local_variable_declaration [23124,23162]"
    },
    {
      "src": "binary_expression [63887,63897]",
      "dest": "binary_expression [64934,64944]"
    },
    {
      "src": "identifier: t [235492,235493]",
      "dest": "identifier: t [236986,236987]"
    },
    {
      "src": "block [86307,86668]",
      "dest": "block [87801,88162]"
    },
    {
      "src": "comparison_operator: > [72211,72212]",
      "dest": "comparison_operator: > [73705,73706]"
    },
    {
      "src": "logical_operator: || [110890,110892]",
      "dest": "logical_operator: || [112384,112386]"
    },
    {
      "src": "argument_list [123378,123393]",
      "dest": "argument_list [124872,124887]"
    },
    {
      "src": "identifier: str [141858,141861]",
      "dest": "identifier: str [143352,143355]"
    },
    {
      "src": "decimal_integer_literal: 1 [159218,159219]",
      "dest": "decimal_integer_literal: 1 [160712,160713]"
    },
    {
      "src": "visibility: public [93877,93883]",
      "dest": "visibility: public [95371,95377]"
    },
    {
      "src": "binary_expression [71832,71850]",
      "dest": "binary_expression [73326,73344]"
    },
    {
      "src": "identifier: lastMatch [111256,111265]",
      "dest": "identifier: lastMatch [112750,112759]"
    },
    {
      "src": "identifier: join [126211,126215]",
      "dest": "identifier: join [127705,127709]"
    },
    {
      "src": "arithmetic_operator: + [220202,220203]",
      "dest": "arithmetic_operator: + [221696,221697]"
    },
    {
      "src": "identifier: str [39415,39418]",
      "dest": "identifier: str [39415,39418]"
    },
    {
      "src": "local_variable_declaration [18561,18575]",
      "dest": "local_variable_declaration [18561,18575]"
    },
    {
      "src": "identifier: str [138782,138785]",
      "dest": "identifier: str [140276,140279]"
    },
    {
      "src": "binary_expression [126143,126156]",
      "dest": "binary_expression [127637,127650]"
    },
    {
      "src": "variable_declarator [165752,165768]",
      "dest": "variable_declarator [167246,167262]"
    },
    {
      "src": "null_literal: null [133021,133025]",
      "dest": "null_literal: null [134515,134519]"
    },
    {
      "src": "false: false [8891,8896]",
      "dest": "false: false [8891,8896]"
    },
    {
      "src": "new: new [25725,25728]",
      "dest": "new: new [25725,25728]"
    },
    {
      "src": "type: boolean [203067,203074]",
      "dest": "type: boolean [204561,204568]"
    },
    {
      "src": "identifier: stringPos [228748,228757]",
      "dest": "identifier: stringPos [230242,230251]"
    },
    {
      "src": "decimal_integer_literal: 1 [175231,175232]",
      "dest": "decimal_integer_literal: 1 [176725,176726]"
    },
    {
      "src": "identifier: isEmpty [54542,54549]",
      "dest": "identifier: isEmpty [54542,54549]"
    },
    {
      "src": "null_literal: null [49435,49439]",
      "dest": "null_literal: null [49435,49439]"
    },
    {
      "src": "identifier: length [77409,77415]",
      "dest": "identifier: length [78903,78909]"
    },
    {
      "src": "variable_declarator [202042,202058]",
      "dest": "variable_declarator [203536,203552]"
    },
    {
      "src": "comparison_operator: > [75947,75948]",
      "dest": "comparison_operator: > [77441,77442]"
    },
    {
      "src": "identifier: strLength [165838,165847]",
      "dest": "identifier: strLength [167332,167341]"
    },
    {
      "src": "identifier: cs [208142,208144]",
      "dest": "identifier: cs [209636,209638]"
    },
    {
      "src": "block [181876,181926]",
      "dest": "block [183370,183420]"
    },
    {
      "src": "parenthesized_expression [75942,75962]",
      "dest": "parenthesized_expression [77436,77456]"
    },
    {
      "src": "formal_parameter [165515,165525]",
      "dest": "formal_parameter [167009,167019]"
    },
    {
      "src": "identifier: sz [69858,69860]",
      "dest": "identifier: sz [71352,71354]"
    },
    {
      "src": "identifier: remove [141683,141689]",
      "dest": "identifier: remove [143177,143183]"
    },
    {
      "src": "block [77297,77333]",
      "dest": "block [78791,78827]"
    },
    {
      "src": "local_variable_declaration [208168,208178]",
      "dest": "local_variable_declaration [209662,209672]"
    },
    {
      "src": "formal_parameter [135344,135358]",
      "dest": "formal_parameter [136838,136852]"
    },
    {
      "src": "argument_list [168691,168711]",
      "dest": "argument_list [170185,170205]"
    },
    {
      "src": "string_literal [25165,25167]",
      "dest": "string_literal [25165,25167]"
    },
    {
      "src": "local_variable_declaration [190651,190677]",
      "dest": "local_variable_declaration [192145,192171]"
    },
    {
      "src": "method_declaration [144509,144700]",
      "dest": "method_declaration [146003,146194]"
    },
    {
      "src": "identifier: i [208179,208180]",
      "dest": "identifier: i [209673,209674]"
    },
    {
      "src": "method_invocation [145516,145528]",
      "dest": "method_invocation [147010,147022]"
    },
    {
      "src": "if_statement [184040,184131]",
      "dest": "if_statement [185534,185625]"
    },
    {
      "src": "visibility: public [8011,8017]",
      "dest": "visibility: public [8011,8017]"
    },
    {
      "src": "argument_list [240052,240054]",
      "dest": "argument_list [241546,241548]"
    },
    {
      "src": "method_invocation [140432,140462]",
      "dest": "method_invocation [141926,141956]"
    },
    {
      "src": "identifier: searchList [155302,155312]",
      "dest": "identifier: searchList [156796,156806]"
    },
    {
      "src": "comparison_operator: == [204288,204290]",
      "dest": "comparison_operator: == [205782,205784]"
    },
    {
      "src": "block [140411,140473]",
      "dest": "block [141905,141967]"
    },
    {
      "src": "argument_list [91235,91246]",
      "dest": "argument_list [92729,92740]"
    },
    {
      "src": "type: String [147105,147111]",
      "dest": "type: String [148599,148605]"
    },
    {
      "src": "dimensions [235598,235600]",
      "dest": "dimensions [237092,237094]"
    },
    {
      "src": "field_access [178209,178219]",
      "dest": "field_access [179703,179713]"
    },
    {
      "src": "identifier: tmp [69985,69988]",
      "dest": "identifier: tmp [71479,71482]"
    },
    {
      "src": "block [224998,225444]",
      "dest": "block [226492,226938]"
    },
    {
      "src": "argument_list [109698,109724]",
      "dest": "argument_list [111192,111218]"
    },
    {
      "src": "update_expression [18940,18947]",
      "dest": "update_expression [18940,18947]"
    },
    {
      "src": "identifier: repeat [175004,175010]",
      "dest": "identifier: repeat [176498,176504]"
    },
    {
      "src": "return_statement [219919,219971]",
      "dest": "return_statement [221413,221465]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [59704,59777]",
      "dest": "line_comment: //----------------------------------------------------------------------- [60091,60164]"
    },
    {
      "src": "return_statement [223927,223940]",
      "dest": "return_statement [225421,225434]"
    },
    {
      "src": "parenthesized_expression [220321,220335]",
      "dest": "parenthesized_expression [221815,221829]"
    },
    {
      "src": "block [181654,181730]",
      "dest": "block [183148,183224]"
    },
    {
      "src": "argument_list [203281,203295]",
      "dest": "argument_list [204775,204789]"
    },
    {
      "src": "parenthesized_expression [127639,127653]",
      "dest": "parenthesized_expression [129133,129147]"
    },
    {
      "src": "arithmetic_operator: + [219957,219958]",
      "dest": "arithmetic_operator: + [221451,221452]"
    },
    {
      "src": "if_statement [116564,116617]",
      "dest": "if_statement [118058,118111]"
    },
    {
      "src": "identifier: i [225158,225159]",
      "dest": "identifier: i [226652,226653]"
    },
    {
      "src": "type: int [35155,35158]",
      "dest": "type: int [35155,35158]"
    },
    {
      "src": "formal_parameter [18419,18436]",
      "dest": "formal_parameter [18419,18436]"
    },
    {
      "src": "block [39449,39496]",
      "dest": "block [39449,39496]"
    },
    {
      "src": "static: static [176558,176564]",
      "dest": "static: static [178052,178058]"
    },
    {
      "src": "argument_list [176881,176906]",
      "dest": "argument_list [178375,178400]"
    },
    {
      "src": "identifier: i [118036,118037]",
      "dest": "identifier: i [119530,119531]"
    },
    {
      "src": "return_statement [107761,107801]",
      "dest": "return_statement [109255,109295]"
    },
    {
      "src": "identifier: lastMatch [118335,118344]",
      "dest": "identifier: lastMatch [119829,119838]"
    },
    {
      "src": "type: int [196740,196743]",
      "dest": "type: int [198234,198237]"
    },
    {
      "src": "identifier: textIndex [161276,161285]",
      "dest": "identifier: textIndex [162770,162779]"
    },
    {
      "src": "visibility: public [190435,190441]",
      "dest": "visibility: public [191929,191935]"
    },
    {
      "src": "block [36242,36302]",
      "dest": "block [36242,36302]"
    },
    {
      "src": "visibility: public [215432,215438]",
      "dest": "visibility: public [216926,216932]"
    },
    {
      "src": "identifier: text [150107,150111]",
      "dest": "identifier: text [151601,151605]"
    },
    {
      "src": "type: String[] [22946,22954]",
      "dest": "type: String[] [22946,22954]"
    },
    {
      "src": "binary_expression [81490,81523]",
      "dest": "binary_expression [82984,83017]"
    },
    {
      "src": "block_comment:     \n     * <p>Right pad a String with a specified String.</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *, *)      = null\n     * StringUtils.rightPad(\"\", 3, \"z\")      = \"zzz\"\n     * StringUtils.rightPad(\"bat\", 3, \"yz\")  = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5, \"yz\")  = \"batyz\"\n     * StringUtils.rightPad(\"bat\", 8, \"yz\")  = \"batyzyzy\"\n     * StringUtils.rightPad(\"bat\", 1, \"yz\")  = \"bat\"\n     * StringUtils.rightPad(\"bat\", -1, \"yz\") = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5, null)  = \"bat  \"\n     * StringUtils.rightPad(\"bat\", 5, \"\")    = \"bat  \"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padStr  the String to pad with, null or empty treated as single space\n     * @return right padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     */ [180342,181321]",
      "dest": "block_comment:     \n     * <p>Right pad a String with a specified String.</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *, *)      = null\n     * StringUtils.rightPad(\"\", 3, \"z\")      = \"zzz\"\n     * StringUtils.rightPad(\"bat\", 3, \"yz\")  = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5, \"yz\")  = \"batyz\"\n     * StringUtils.rightPad(\"bat\", 8, \"yz\")  = \"batyzyzy\"\n     * StringUtils.rightPad(\"bat\", 1, \"yz\")  = \"bat\"\n     * StringUtils.rightPad(\"bat\", -1, \"yz\") = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5, null)  = \"bat  \"\n     * StringUtils.rightPad(\"bat\", 5, \"\")    = \"bat  \"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padStr  the String to pad with, null or empty treated as single space\n     * @return right padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     */ [181836,182815]"
    },
    {
      "src": "identifier: strLen [195550,195556]",
      "dest": "identifier: strLen [197044,197050]"
    },
    {
      "src": "comparison_operator: == [7465,7467]",
      "dest": "comparison_operator: == [7465,7467]"
    },
    {
      "src": "line_comment: // Remove [137465,137474]",
      "dest": "line_comment: // Remove [138959,138968]"
    },
    {
      "src": "binary_expression [57804,57824]",
      "dest": "binary_expression [54909,54929]"
    },
    {
      "src": "argument_list [117071,117086]",
      "dest": "argument_list [118565,118580]"
    },
    {
      "src": "unary_expression [133965,133984]",
      "dest": "unary_expression [135459,135478]"
    },
    {
      "src": "identifier: searchLast [57870,57880]",
      "dest": "identifier: searchLast [54975,54985]"
    },
    {
      "src": "argument_list [176936,176955]",
      "dest": "argument_list [178430,178449]"
    },
    {
      "src": "visibility: public [79717,79723]",
      "dest": "visibility: public [81211,81217]"
    },
    {
      "src": "binary_expression [185543,185556]",
      "dest": "binary_expression [187037,187050]"
    },
    {
      "src": "identifier: difference [223665,223675]",
      "dest": "identifier: difference [225159,225169]"
    },
    {
      "src": "identifier: isEmpty [50880,50887]",
      "dest": "identifier: isEmpty [50880,50887]"
    },
    {
      "src": "identifier: strLen [18851,18857]",
      "dest": "identifier: strLen [18851,18857]"
    },
    {
      "src": "formal_parameter [183892,183902]",
      "dest": "formal_parameter [185386,185396]"
    },
    {
      "src": "type: String [77249,77255]",
      "dest": "type: String [78743,78749]"
    },
    {
      "src": "binary_expression [20543,20601]",
      "dest": "binary_expression [20543,20601]"
    },
    {
      "src": "identifier: separator [171848,171857]",
      "dest": "identifier: separator [173342,173351]"
    },
    {
      "src": "null_literal: null [136231,136235]",
      "dest": "null_literal: null [137725,137729]"
    },
    {
      "src": "identifier: str [17095,17098]",
      "dest": "identifier: str [17095,17098]"
    },
    {
      "src": "block [134427,134481]",
      "dest": "block [135921,135975]"
    },
    {
      "src": "block [58212,58337]",
      "dest": "block [58605,58730]"
    },
    {
      "src": "arithmetic_operator: + [105560,105561]",
      "dest": "arithmetic_operator: + [107054,107055]"
    },
    {
      "src": "static: static [127434,127440]",
      "dest": "static: static [128928,128934]"
    },
    {
      "src": "identifier: rightPad [179022,179030]",
      "dest": "identifier: rightPad [180516,180524]"
    },
    {
      "src": "method_invocation [239182,239211]",
      "dest": "method_invocation [240676,240705]"
    },
    {
      "src": "block [93938,94000]",
      "dest": "block [95432,95494]"
    },
    {
      "src": "local_variable_declaration [53153,53182]",
      "dest": "local_variable_declaration [53153,53182]"
    },
    {
      "src": "assignment_expression [235936,235944]",
      "dest": "assignment_expression [237430,237438]"
    },
    {
      "src": "array_access [131569,131577]",
      "dest": "array_access [133063,133071]"
    },
    {
      "src": "type: String [10650,10656]",
      "dest": "type: String [10650,10656]"
    },
    {
      "src": "variable_declarator [165886,165920]",
      "dest": "variable_declarator [167380,167414]"
    },
    {
      "src": "method_invocation [189100,189140]",
      "dest": "method_invocation [190594,190634]"
    },
    {
      "src": "identifier: toString [134130,134138]",
      "dest": "identifier: toString [135624,135632]"
    },
    {
      "src": "local_variable_declaration [137169,137183]",
      "dest": "local_variable_declaration [138663,138677]"
    },
    {
      "src": "identifier: text [160965,160969]",
      "dest": "identifier: text [162459,162463]"
    },
    {
      "src": "comparison_operator: < [91270,91271]",
      "dest": "comparison_operator: < [92764,92765]"
    },
    {
      "src": "parenthesized_expression [70368,70394]",
      "dest": "parenthesized_expression [71862,71888]"
    },
    {
      "src": "arithmetic_operator: - [236269,236270]",
      "dest": "arithmetic_operator: - [237763,237764]"
    },
    {
      "src": "argument_list [46693,46714]",
      "dest": "argument_list [46693,46714]"
    },
    {
      "src": "method_invocation [117049,117086]",
      "dest": "method_invocation [118543,118580]"
    },
    {
      "src": "visibility: private [239708,239715]",
      "dest": "visibility: private [241202,241209]"
    },
    {
      "src": "block [17147,17182]",
      "dest": "block [17147,17182]"
    },
    {
      "src": "update_expression [20622,20627]",
      "dest": "update_expression [20622,20627]"
    },
    {
      "src": "method_invocation [193778,193795]",
      "dest": "method_invocation [195272,195289]"
    },
    {
      "src": "binary_expression [83266,83288]",
      "dest": "binary_expression [84760,84782]"
    },
    {
      "src": "comparison_operator: == [208243,208245]",
      "dest": "comparison_operator: == [209737,209739]"
    },
    {
      "src": "if_statement [231354,231420]",
      "dest": "if_statement [232848,232914]"
    },
    {
      "src": "block [190500,190894]",
      "dest": "block [191994,192388]"
    },
    {
      "src": "parenthesized_expression [225241,225273]",
      "dest": "parenthesized_expression [226735,226767]"
    },
    {
      "src": "variable_declarator [160447,160452]",
      "dest": "variable_declarator [161941,161946]"
    },
    {
      "src": "line_comment: // get Normalizer.NFD field [24694,24721]",
      "dest": "line_comment: // get Normalizer.NFD field [24694,24721]"
    },
    {
      "src": "identifier: index [36531,36536]",
      "dest": "identifier: index [36531,36536]"
    },
    {
      "src": "dimensions_expr [137155,137159]",
      "dest": "dimensions_expr [138649,138653]"
    },
    {
      "src": "block_comment:     \n     * <p>Counts how many times the substring appears in the larger String.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String input returns <code>0</code>.</p>\n     *\n     * <pre>\n     * StringUtils.countMatches(null, *)       = 0\n     * StringUtils.countMatches(\"\", *)         = 0\n     * StringUtils.countMatches(\"abba\", null)  = 0\n     * StringUtils.countMatches(\"abba\", \"\")    = 0\n     * StringUtils.countMatches(\"abba\", \"a\")   = 2\n     * StringUtils.countMatches(\"abba\", \"ab\")  = 1\n     * StringUtils.countMatches(\"abba\", \"xxx\") = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param sub  the substring to count, may be null\n     * @return the number of occurrences, 0 if either String is <code>null</code>\n     */ [198932,199702]",
      "dest": "block_comment:     \n     * <p>Counts how many times the substring appears in the larger String.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String input returns <code>0</code>.</p>\n     *\n     * <pre>\n     * StringUtils.countMatches(null, *)       = 0\n     * StringUtils.countMatches(\"\", *)         = 0\n     * StringUtils.countMatches(\"abba\", null)  = 0\n     * StringUtils.countMatches(\"abba\", \"\")    = 0\n     * StringUtils.countMatches(\"abba\", \"a\")   = 2\n     * StringUtils.countMatches(\"abba\", \"ab\")  = 1\n     * StringUtils.countMatches(\"abba\", \"xxx\") = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param sub  the substring to count, may be null\n     * @return the number of occurrences, 0 if either String is <code>null</code>\n     */ [200426,201196]"
    },
    {
      "src": "identifier: pos [86499,86502]",
      "dest": "identifier: pos [87993,87996]"
    },
    {
      "src": "if_statement [73750,73813]",
      "dest": "if_statement [75244,75307]"
    },
    {
      "src": "identifier: charAt [166211,166217]",
      "dest": "identifier: charAt [167705,167711]"
    },
    {
      "src": "method_invocation [105257,105296]",
      "dest": "method_invocation [106751,106790]"
    },
    {
      "src": "false: false [95249,95254]",
      "dest": "false: false [96743,96748]"
    },
    {
      "src": "argument_list [174759,174762]",
      "dest": "argument_list [176253,176256]"
    },
    {
      "src": "identifier: nsme [25375,25379]",
      "dest": "identifier: nsme [25375,25379]"
    },
    {
      "src": "type: int [158600,158603]",
      "dest": "type: int [160094,160097]"
    },
    {
      "src": "formal_parameter [205672,205687]",
      "dest": "formal_parameter [207166,207181]"
    },
    {
      "src": "affectation_operator: = [106123,106124]",
      "dest": "affectation_operator: = [107617,107618]"
    },
    {
      "src": "identifier: deleteWhitespace [137002,137018]",
      "dest": "identifier: deleteWhitespace [138496,138512]"
    },
    {
      "src": "expression_statement [150642,150682]",
      "dest": "expression_statement [152136,152176]"
    },
    {
      "src": "\": \" [25970,25971]",
      "dest": "\": \" [25970,25971]"
    },
    {
      "src": "identifier: searchStrs [71832,71842]",
      "dest": "identifier: searchStrs [73326,73336]"
    },
    {
      "src": "binary_expression [51876,51908]",
      "dest": "binary_expression [51876,51908]"
    },
    {
      "src": "argument_list [11686,11691]",
      "dest": "argument_list [11686,11691]"
    },
    {
      "src": "modifiers [28427,28440]",
      "dest": "modifiers [28427,28440]"
    },
    {
      "src": "formal_parameters [209108,209125]",
      "dest": "formal_parameters [210602,210619]"
    },
    {
      "src": "variable_declarator [180045,180071]",
      "dest": "variable_declarator [181539,181565]"
    },
    {
      "src": "binary_expression [123736,123743]",
      "dest": "binary_expression [125230,125237]"
    },
    {
      "src": "identifier: array [125158,125163]",
      "dest": "identifier: array [126652,126657]"
    },
    {
      "src": "line_comment: // Conversion [173463,173476]",
      "dest": "line_comment: // Conversion [174957,174970]"
    },
    {
      "src": "identifier: searchString [150028,150040]",
      "dest": "identifier: searchString [151522,151534]"
    },
    {
      "src": "identifier: str [73762,73765]",
      "dest": "identifier: str [75256,75259]"
    },
    {
      "src": "identifier: str [180295,180298]",
      "dest": "identifier: str [181789,181792]"
    },
    {
      "src": "identifier: str [144670,144673]",
      "dest": "identifier: str [146164,146167]"
    },
    {
      "src": "affectation_operator: = [161345,161346]",
      "dest": "affectation_operator: = [162839,162840]"
    },
    {
      "src": "argument_list [220056,220103]",
      "dest": "argument_list [221550,221597]"
    },
    {
      "src": "identifier: str [222462,222465]",
      "dest": "identifier: str [223956,223959]"
    },
    {
      "src": "binary_expression [75736,75754]",
      "dest": "binary_expression [77230,77248]"
    },
    {
      "src": "identifier: isEmpty [140295,140302]",
      "dest": "identifier: isEmpty [141789,141796]"
    },
    {
      "src": "block [20466,20501]",
      "dest": "block [20466,20501]"
    },
    {
      "src": "if_statement [158717,158957]",
      "dest": "if_statement [160211,160451]"
    },
    {
      "src": "identifier: str2 [28524,28528]",
      "dest": "identifier: str2 [28524,28528]"
    },
    {
      "src": "increment_operator: ++ [160478,160480]",
      "dest": "increment_operator: ++ [161972,161974]"
    },
    {
      "src": "decimal_integer_literal: 1 [123742,123743]",
      "dest": "decimal_integer_literal: 1 [125236,125237]"
    },
    {
      "src": "identifier: pos [84914,84917]",
      "dest": "identifier: pos [86408,86411]"
    },
    {
      "src": "argument_list [223980,223984]",
      "dest": "argument_list [225474,225478]"
    },
    {
      "src": "identifier: replLength [150217,150227]",
      "dest": "identifier: replLength [151711,151721]"
    },
    {
      "src": "comparison_operator: == [54852,54854]",
      "dest": "comparison_operator: == [58159,58161]"
    },
    {
      "src": "method_invocation [195599,195612]",
      "dest": "method_invocation [197093,197106]"
    },
    {
      "src": "decimal_integer_literal: 0 [91272,91273]",
      "dest": "decimal_integer_literal: 0 [92766,92767]"
    },
    {
      "src": "identifier: ch [62575,62577]",
      "dest": "identifier: ch [63328,63330]"
    },
    {
      "src": "false: false [203299,203304]",
      "dest": "false: false [204793,204798]"
    },
    {
      "src": "identifier: s [235127,235128]",
      "dest": "identifier: s [236621,236622]"
    },
    {
      "src": "method_invocation [171898,171910]",
      "dest": "method_invocation [173392,173404]"
    },
    {
      "src": "block [125136,125177]",
      "dest": "block [126630,126671]"
    },
    {
      "src": "for_statement [54779,54985]",
      "dest": "for_statement [58083,58762]"
    },
    {
      "src": "identifier: str [219926,219929]",
      "dest": "identifier: str [221420,221423]"
    },
    {
      "src": "block [160553,160594]",
      "dest": "block [162047,162088]"
    },
    {
      "src": "comparison_operator: > [39646,39647]",
      "dest": "comparison_operator: > [39646,39647]"
    },
    {
      "src": "identifier: buf [132854,132857]",
      "dest": "identifier: buf [134348,134351]"
    },
    {
      "src": "static: static [68014,68020]",
      "dest": "static: static [69508,69514]"
    },
    {
      "src": "comparison_operator: == [159533,159535]",
      "dest": "comparison_operator: == [161027,161029]"
    },
    {
      "src": "identifier: ts [11677,11679]",
      "dest": "identifier: ts [11677,11679]"
    },
    {
      "src": "return_statement [133930,133942]",
      "dest": "return_statement [135424,135436]"
    },
    {
      "src": "affectation_operator: = [235531,235532]",
      "dest": "affectation_operator: = [237025,237026]"
    },
    {
      "src": "method_invocation [166365,166379]",
      "dest": "method_invocation [167859,167873]"
    },
    {
      "src": "object_creation_expression [26072,26162]",
      "dest": "object_creation_expression [26072,26162]"
    },
    {
      "src": "binary_expression [89182,89226]",
      "dest": "binary_expression [90676,90720]"
    },
    {
      "src": "argument_list [129304,129339]",
      "dest": "argument_list [130798,130833]"
    },
    {
      "src": "identifier: searchChar [30833,30843]",
      "dest": "identifier: searchChar [30833,30843]"
    },
    {
      "src": "identifier: search [72050,72056]",
      "dest": "identifier: search [73544,73550]"
    },
    {
      "src": "identifier: Math [236248,236252]",
      "dest": "identifier: Math [237742,237746]"
    },
    {
      "src": "comparison_operator: == [12675,12677]",
      "dest": "comparison_operator: == [12675,12677]"
    },
    {
      "src": "type: String [96732,96738]",
      "dest": "type: String [98226,98232]"
    },
    {
      "src": "variable_declarator [20174,20177]",
      "dest": "variable_declarator [20174,20177]"
    },
    {
      "src": "identifier: pads [181758,181762]",
      "dest": "identifier: pads [183252,183256]"
    },
    {
      "src": "ternary_expression [14833,14863]",
      "dest": "ternary_expression [14833,14863]"
    },
    {
      "src": "type: boolean [239109,239116]",
      "dest": "type: boolean [240603,240610]"
    },
    {
      "src": "block [165966,166321]",
      "dest": "block [167460,167815]"
    },
    {
      "src": "identifier: isEmpty [169944,169951]",
      "dest": "identifier: isEmpty [171438,171445]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [71873,71888]",
      "dest": "identifier: INDEX_NOT_FOUND [73367,73382]"
    },
    {
      "src": "false: false [242436,242441]",
      "dest": "false: false [243930,243935]"
    },
    {
      "src": "type: boolean [205647,205654]",
      "dest": "type: boolean [207141,207148]"
    },
    {
      "src": "parenthesized_expression [132493,132514]",
      "dest": "parenthesized_expression [133987,134008]"
    },
    {
      "src": "false: false [200904,200909]",
      "dest": "false: false [202398,202403]"
    },
    {
      "src": "binary_expression [117214,117232]",
      "dest": "binary_expression [118708,118726]"
    },
    {
      "src": "block [90847,90883]",
      "dest": "block [92341,92377]"
    },
    {
      "src": "identifier: searchStr [43391,43400]",
      "dest": "identifier: searchStr [43391,43400]"
    },
    {
      "src": "null_literal: null [36114,36118]",
      "dest": "null_literal: null [36114,36118]"
    },
    {
      "src": "if_statement [104803,106364]",
      "dest": "if_statement [106297,107858]"
    },
    {
      "src": "method_declaration [107693,107807]",
      "dest": "method_declaration [109187,109301]"
    },
    {
      "src": "method_invocation [105272,105295]",
      "dest": "method_invocation [106766,106789]"
    },
    {
      "src": "method_invocation [222071,222086]",
      "dest": "method_invocation [223565,223580]"
    },
    {
      "src": "identifier: isTitleCase [198566,198577]",
      "dest": "identifier: isTitleCase [200060,200071]"
    },
    {
      "src": "identifier: length [62449,62455]",
      "dest": "identifier: length [63188,63194]"
    },
    {
      "src": "identifier: sz [202088,202090]",
      "dest": "identifier: sz [203582,203584]"
    },
    {
      "src": "identifier: idx [199984,199987]",
      "dest": "identifier: idx [201478,201481]"
    },
    {
      "src": "block [206878,206915]",
      "dest": "block [208372,208409]"
    },
    {
      "src": "argument_list [39869,39912]",
      "dest": "argument_list [39869,39912]"
    },
    {
      "src": "identifier: start [160172,160177]",
      "dest": "identifier: start [161666,161671]"
    },
    {
      "src": "formal_parameters [66422,66459]",
      "dest": "formal_parameters [67469,67506]"
    },
    {
      "src": "argument_list [118863,118873]",
      "dest": "argument_list [120357,120367]"
    },
    {
      "src": "block_comment:     \n     * <p>Strips whitespace from the start and end of a String  returning\n     * <code>null</code> if the String is empty (\"\") after the strip.</p>\n     *\n     * <p>This is similar to {@link #trimToNull(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripToNull(null)     = null\n     * StringUtils.stripToNull(\"\")       = null\n     * StringUtils.stripToNull(\"   \")    = null\n     * StringUtils.stripToNull(\"abc\")    = \"abc\"\n     * StringUtils.stripToNull(\"  abc\")  = \"abc\"\n     * StringUtils.stripToNull(\"abc  \")  = \"abc\"\n     * StringUtils.stripToNull(\" abc \")  = \"abc\"\n     * StringUtils.stripToNull(\" ab c \") = \"ab c\"\n     * </pre>\n     *\n     * @param str  the String to be stripped, may be null\n     * @return the stripped String,\n     *  <code>null</code> if whitespace, empty or null String input\n     * @since 2.0\n     */ [13740,14672]",
      "dest": "block_comment:     \n     * <p>Strips whitespace from the start and end of a String  returning\n     * <code>null</code> if the String is empty (\"\") after the strip.</p>\n     *\n     * <p>This is similar to {@link #trimToNull(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripToNull(null)     = null\n     * StringUtils.stripToNull(\"\")       = null\n     * StringUtils.stripToNull(\"   \")    = null\n     * StringUtils.stripToNull(\"abc\")    = \"abc\"\n     * StringUtils.stripToNull(\"  abc\")  = \"abc\"\n     * StringUtils.stripToNull(\"abc  \")  = \"abc\"\n     * StringUtils.stripToNull(\" abc \")  = \"abc\"\n     * StringUtils.stripToNull(\" ab c \") = \"ab c\"\n     * </pre>\n     *\n     * @param str  the String to be stripped, may be null\n     * @return the stripped String,\n     *  <code>null</code> if whitespace, empty or null String input\n     * @since 2.0\n     */ [13740,14672]"
    },
    {
      "src": "block [165690,165735]",
      "dest": "block [167184,167229]"
    },
    {
      "src": "if_statement [235312,235513]",
      "dest": "if_statement [236806,237007]"
    },
    {
      "src": "comparison_operator: == [90938,90940]",
      "dest": "comparison_operator: == [92432,92434]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if String contains a search character, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *)    = false\n     * StringUtils.contains(\"\", *)      = false\n     * StringUtils.contains(\"abc\", 'a') = true\n     * StringUtils.contains(\"abc\", 'z') = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return true if the String contains the search character,\n     *  false if not or <code>null</code> string input\n     * @since 2.0\n     */ [50085,50801]",
      "dest": "block_comment:     \n     * <p>Checks if String contains a search character, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *)    = false\n     * StringUtils.contains(\"\", *)      = false\n     * StringUtils.contains(\"abc\", 'a') = true\n     * StringUtils.contains(\"abc\", 'z') = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return true if the String contains the search character,\n     *  false if not or <code>null</code> string input\n     * @since 2.0\n     */ [50085,50801]"
    },
    {
      "src": "identifier: startIndex [127870,127880]",
      "dest": "identifier: startIndex [129364,129374]"
    },
    {
      "src": "local_variable_declaration [200964,200974]",
      "dest": "local_variable_declaration [202458,202468]"
    },
    {
      "src": "string_fragment: p{InCombiningDiacriticalMarks}+ [25062,25093]",
      "dest": "string_fragment: p{InCombiningDiacriticalMarks}+ [25062,25093]"
    },
    {
      "src": "formal_parameter [129185,129199]",
      "dest": "formal_parameter [130679,130693]"
    },
    {
      "src": "identifier: len [77265,77268]",
      "dest": "identifier: len [78759,78762]"
    },
    {
      "src": "return_statement [128096,128118]",
      "dest": "return_statement [129590,129612]"
    },
    {
      "src": "object_creation_expression [182265,182284]",
      "dest": "object_creation_expression [183759,183778]"
    },
    {
      "src": "unary_expression [95245,95247]",
      "dest": "unary_expression [96739,96741]"
    },
    {
      "src": "identifier: isWhitespace [209096,209108]",
      "dest": "identifier: isWhitespace [210590,210602]"
    },
    {
      "src": "expression_statement [36447,36493]",
      "dest": "expression_statement [36447,36493]"
    },
    {
      "src": "type: int [177947,177950]",
      "dest": "type: int [179441,179444]"
    },
    {
      "src": "if_statement [18468,18552]",
      "dest": "if_statement [18468,18552]"
    },
    {
      "src": "type: String[] [157824,157832]",
      "dest": "type: String[] [159318,159326]"
    },
    {
      "src": "line_comment: // Optimise 1 character case [117710,117738]",
      "dest": "line_comment: // Optimise 1 character case [119204,119232]"
    },
    {
      "src": "local_variable_declaration [244313,244360]",
      "dest": "local_variable_declaration [245807,245854]"
    },
    {
      "src": "identifier: isEmpty [57429,57436]",
      "dest": "identifier: isEmpty [57769,57776]"
    },
    {
      "src": "identifier: abbreviate [220204,220214]",
      "dest": "identifier: abbreviate [221698,221708]"
    },
    {
      "src": "formal_parameter [223676,223687]",
      "dest": "formal_parameter [225170,225181]"
    },
    {
      "src": "formal_parameter [7428,7443]",
      "dest": "formal_parameter [7428,7443]"
    },
    {
      "src": "block [110412,111386]",
      "dest": "block [111906,112880]"
    },
    {
      "src": "identifier: splitWorker [95212,95223]",
      "dest": "identifier: splitWorker [96706,96717]"
    },
    {
      "src": "method_invocation [59622,59664]",
      "dest": "method_invocation [60009,60051]"
    },
    {
      "src": "for_statement [61018,61285]",
      "dest": "for_statement [61477,62024]"
    },
    {
      "src": "modifiers [20099,20112]",
      "dest": "modifiers [20099,20112]"
    },
    {
      "src": "variable_declarator [137173,137182]",
      "dest": "variable_declarator [138667,138676]"
    },
    {
      "src": "true: true [118651,118655]",
      "dest": "true: true [120145,120149]"
    },
    {
      "src": "variable_declarator [137107,137124]",
      "dest": "variable_declarator [138601,138618]"
    },
    {
      "src": "import_declaration [840,867]",
      "dest": "import_declaration [840,867]"
    },
    {
      "src": "identifier: i [236068,236069]",
      "dest": "identifier: i [237562,237563]"
    },
    {
      "src": "argument_list [159633,159648]",
      "dest": "argument_list [161127,161142]"
    },
    {
      "src": "block [219780,219843]",
      "dest": "block [221274,221337]"
    },
    {
      "src": "identifier: str [51876,51879]",
      "dest": "identifier: str [51876,51879]"
    },
    {
      "src": "parenthesized_expression [128005,128023]",
      "dest": "parenthesized_expression [129499,129517]"
    },
    {
      "src": "if_statement [205834,205934]",
      "dest": "if_statement [207328,207428]"
    },
    {
      "src": "identifier: i [145695,145696]",
      "dest": "identifier: i [147189,147190]"
    },
    {
      "src": "identifier: searchLength [57537,57549]",
      "dest": "identifier: searchLength [57877,57889]"
    },
    {
      "src": "identifier: ret [173185,173188]",
      "dest": "identifier: ret [174679,174682]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [124277,124350]",
      "dest": "line_comment: //----------------------------------------------------------------------- [125771,125844]"
    },
    {
      "src": "block [23895,26479]",
      "dest": "block [23895,26479]"
    },
    {
      "src": "identifier: searchStrs [72059,72069]",
      "dest": "identifier: searchStrs [73553,73563]"
    },
    {
      "src": "static: static [49316,49322]",
      "dest": "static: static [49316,49322]"
    },
    {
      "src": "parenthesized_expression [136218,136236]",
      "dest": "parenthesized_expression [137712,137730]"
    },
    {
      "src": "affectation_operator: += [199988,199990]",
      "dest": "affectation_operator: += [201482,201484]"
    },
    {
      "src": "identifier: i [161650,161651]",
      "dest": "identifier: i [163144,163145]"
    },
    {
      "src": "assignment_expression [196765,196785]",
      "dest": "assignment_expression [198259,198279]"
    },
    {
      "src": "identifier: i [235911,235912]",
      "dest": "identifier: i [237405,237406]"
    },
    {
      "src": "argument_list [220305,220336]",
      "dest": "argument_list [221799,221830]"
    },
    {
      "src": "method_declaration [96703,96844]",
      "dest": "method_declaration [98197,98338]"
    },
    {
      "src": "return_statement [243510,243545]",
      "dest": "return_statement [245004,245039]"
    },
    {
      "src": "identifier: length [18764,18770]",
      "dest": "identifier: length [18764,18770]"
    },
    {
      "src": "identifier: i [182208,182209]",
      "dest": "identifier: i [183702,183703]"
    },
    {
      "src": "formal_parameter [138687,138697]",
      "dest": "formal_parameter [140181,140191]"
    },
    {
      "src": "logical_operator: && [20539,20541]",
      "dest": "logical_operator: && [20539,20541]"
    },
    {
      "src": "identifier: org.apache.commons.lang3.text.WordUtils [951,990]",
      "dest": "identifier: org.apache.commons.lang3.text.WordUtils [951,990]"
    },
    {
      "src": "type: String [155068,155074]",
      "dest": "type: String [156562,156568]"
    },
    {
      "src": "identifier: isEmpty [11708,11715]",
      "dest": "identifier: isEmpty [11708,11715]"
    },
    {
      "src": "argument_list [35199,35231]",
      "dest": "argument_list [35199,35231]"
    },
    {
      "src": "string_fragment:   [190629,190630]",
      "dest": "string_fragment:   [192123,192124]"
    },
    {
      "src": "binary_expression [171752,171785]",
      "dest": "binary_expression [173246,173279]"
    },
    {
      "src": "local_variable_declaration [174996,175015]",
      "dest": "local_variable_declaration [176490,176509]"
    },
    {
      "src": "identifier: text [157818,157822]",
      "dest": "identifier: text [159312,159316]"
    },
    {
      "src": "method_invocation [106288,106322]",
      "dest": "method_invocation [107782,107816]"
    },
    {
      "src": "expression_statement [72236,72246]",
      "dest": "expression_statement [73730,73740]"
    },
    {
      "src": "identifier: sizePlus1 [118685,118694]",
      "dest": "identifier: sizePlus1 [120179,120188]"
    },
    {
      "src": "argument_list [20223,20225]",
      "dest": "argument_list [20223,20225]"
    },
    {
      "src": "identifier: str [174347,174350]",
      "dest": "identifier: str [175841,175844]"
    },
    {
      "src": "variable_declarator [61027,61032]",
      "dest": "variable_declarator [61486,61491]"
    },
    {
      "src": "block_comment:     \n     * <p>Replaces all occurrences of a character in a String with another.\n     * This is a null-safe version of {@link String#replace(char, char)}.</p>\n     *\n     * <p>A <code>null</code> string input returns <code>null</code>.\n     * An empty (\"\") string input returns an empty string.</p>\n     *\n     * <pre>\n     * StringUtils.replaceChars(null, *, *)        = null\n     * StringUtils.replaceChars(\"\", *, *)          = \"\"\n     * StringUtils.replaceChars(\"abcba\", 'b', 'y') = \"aycya\"\n     * StringUtils.replaceChars(\"abcba\", 'z', 'y') = \"abcba\"\n     * </pre>\n     *\n     * @param str  String to replace characters in, may be null\n     * @param searchChar  the character to search for, may be null\n     * @param replaceChar  the character to replace, may be null\n     * @return modified String, <code>null</code> if null string input\n     * @since 2.0\n     */ [162698,163565]",
      "dest": "block_comment:     \n     * <p>Replaces all occurrences of a character in a String with another.\n     * This is a null-safe version of {@link String#replace(char, char)}.</p>\n     *\n     * <p>A <code>null</code> string input returns <code>null</code>.\n     * An empty (\"\") string input returns an empty string.</p>\n     *\n     * <pre>\n     * StringUtils.replaceChars(null, *, *)        = null\n     * StringUtils.replaceChars(\"\", *, *)          = \"\"\n     * StringUtils.replaceChars(\"abcba\", 'b', 'y') = \"aycya\"\n     * StringUtils.replaceChars(\"abcba\", 'z', 'y') = \"abcba\"\n     * </pre>\n     *\n     * @param str  String to replace characters in, may be null\n     * @param searchChar  the character to search for, may be null\n     * @param replaceChar  the character to replace, may be null\n     * @return modified String, <code>null</code> if null string input\n     * @since 2.0\n     */ [164192,165059]"
    },
    {
      "src": "argument_list [239923,239925]",
      "dest": "argument_list [241417,241419]"
    },
    {
      "src": "identifier: len [116662,116665]",
      "dest": "identifier: len [118156,118159]"
    },
    {
      "src": "type: String [242370,242376]",
      "dest": "type: String [243864,243870]"
    },
    {
      "src": "variable_declarator [166021,166052]",
      "dest": "variable_declarator [167515,167546]"
    },
    {
      "src": "parenthesized_expression [219460,219474]",
      "dest": "parenthesized_expression [220954,220968]"
    },
    {
      "src": "parenthesized_expression [219581,219607]",
      "dest": "parenthesized_expression [221075,221101]"
    },
    {
      "src": "return_statement [23937,23949]",
      "dest": "return_statement [23937,23949]"
    },
    {
      "src": "identifier: n [235611,235612]",
      "dest": "identifier: n [237105,237106]"
    },
    {
      "src": "argument_list [211386,211389]",
      "dest": "argument_list [212880,212883]"
    },
    {
      "src": "argument_list [68194,68226]",
      "dest": "argument_list [69688,69720]"
    },
    {
      "src": "method_invocation [211219,211230]",
      "dest": "method_invocation [212713,212724]"
    },
    {
      "src": "static: static [140218,140224]",
      "dest": "static: static [141712,141718]"
    },
    {
      "src": "return_statement [49744,49760]",
      "dest": "return_statement [49744,49760]"
    },
    {
      "src": "local_variable_declaration [203179,203200]",
      "dest": "local_variable_declaration [204673,204694]"
    },
    {
      "src": "identifier: str [222001,222004]",
      "dest": "identifier: str [223495,223498]"
    },
    {
      "src": "if_statement [117110,117465]",
      "dest": "if_statement [118604,118959]"
    },
    {
      "src": "formal_parameters [157810,157941]",
      "dest": "formal_parameters [159304,159435]"
    },
    {
      "src": "arithmetic_operator: + [127786,127787]",
      "dest": "arithmetic_operator: + [129280,129281]"
    },
    {
      "src": "identifier: buf [128103,128106]",
      "dest": "identifier: buf [129597,129600]"
    },
    {
      "src": "if_statement [89178,89264]",
      "dest": "if_statement [90672,90758]"
    },
    {
      "src": "method_declaration [138654,138920]",
      "dest": "method_declaration [140148,140414]"
    },
    {
      "src": "identifier: max [104067,104070]",
      "dest": "identifier: max [105561,105564]"
    },
    {
      "src": "type: int [149982,149985]",
      "dest": "type: int [151476,151479]"
    },
    {
      "src": "method_invocation [199792,199804]",
      "dest": "method_invocation [201286,201298]"
    },
    {
      "src": "type: int [116626,116629]",
      "dest": "type: int [118120,118123]"
    },
    {
      "src": "if_statement [219395,219448]",
      "dest": "if_statement [220889,220942]"
    },
    {
      "src": "local_variable_declaration [161045,161059]",
      "dest": "local_variable_declaration [162539,162553]"
    },
    {
      "src": "identifier: str [137263,137266]",
      "dest": "identifier: str [138757,138760]"
    },
    {
      "src": "comparison_operator: < [204391,204392]",
      "dest": "comparison_operator: < [205885,205886]"
    },
    {
      "src": "identifier: append [134329,134335]",
      "dest": "identifier: append [135823,135829]"
    },
    {
      "src": "identifier: indexOfAny [55974,55984]",
      "dest": "identifier: indexOfAny [56320,56330]"
    },
    {
      "src": "decimal_integer_literal: 16 [150310,150312]",
      "dest": "decimal_integer_literal: 16 [151804,151806]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [39470,39485]",
      "dest": "identifier: INDEX_NOT_FOUND [39470,39485]"
    },
    {
      "src": "static: static [35099,35105]",
      "dest": "static: static [35099,35105]"
    },
    {
      "src": "affectation_operator: = [227388,227389]",
      "dest": "affectation_operator: = [228882,228883]"
    },
    {
      "src": "argument_list [160671,160673]",
      "dest": "argument_list [162165,162167]"
    },
    {
      "src": "method_invocation [225242,225255]",
      "dest": "method_invocation [226736,226749]"
    },
    {
      "src": "identifier: preserveAllTokens [116365,116382]",
      "dest": "identifier: preserveAllTokens [117859,117876]"
    },
    {
      "src": "if_statement [64012,64072]",
      "dest": "if_statement [65059,65119]"
    },
    {
      "src": "field_access [158624,158646]",
      "dest": "field_access [160118,160140]"
    },
    {
      "src": "affectation_operator: = [72240,72241]",
      "dest": "affectation_operator: = [73734,73735]"
    },
    {
      "src": "logical_operator: || [53047,53049]",
      "dest": "logical_operator: || [53047,53049]"
    },
    {
      "src": "if_statement [134072,134156]",
      "dest": "if_statement [135566,135650]"
    },
    {
      "src": "identifier: iae [25859,25862]",
      "dest": "identifier: iae [25859,25862]"
    },
    {
      "src": "line_comment: // iterates through t [235800,235821]",
      "dest": "line_comment: // iterates through t [237294,237315]"
    },
    {
      "src": "expression_statement [161304,161322]",
      "dest": "expression_statement [162798,162816]"
    },
    {
      "src": "object_creation_expression [150367,150410]",
      "dest": "object_creation_expression [151861,151904]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start/end <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>The returned substring starts with the character in the <code>start</code>\n     * position and ends before the <code>end</code> position. All position counting is\n     * zero-based -- i.e., to start at the beginning of the string use\n     * <code>start = 0</code>. Negative start and end positions can be used to\n     * specify offsets relative to the end of the String.</p>\n     *\n     * <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n     * is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *, *)    = null\n     * StringUtils.substring(\"\", * ,  *)    = \"\";\n     * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.substring(\"abc\", 4, 6)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 2)   = \"\"\n     * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n     * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @param end  the position to end at (exclusive), negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position to end positon,\n     *  <code>null</code> if null String input\n     */ [73863,75534]",
      "dest": "block_comment:     \n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start/end <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>The returned substring starts with the character in the <code>start</code>\n     * position and ends before the <code>end</code> position. All position counting is\n     * zero-based -- i.e., to start at the beginning of the string use\n     * <code>start = 0</code>. Negative start and end positions can be used to\n     * specify offsets relative to the end of the String.</p>\n     *\n     * <p>If <code>start</code> is not strictly to the left of <code>end</code>, \"\"\n     * is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *, *)    = null\n     * StringUtils.substring(\"\", * ,  *)    = \"\";\n     * StringUtils.substring(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.substring(\"abc\", 2, 0)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.substring(\"abc\", 4, 6)   = \"\"\n     * StringUtils.substring(\"abc\", 2, 2)   = \"\"\n     * StringUtils.substring(\"abc\", -2, -1) = \"b\"\n     * StringUtils.substring(\"abc\", -4, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @param end  the position to end at (exclusive), negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position to end positon,\n     *  <code>null</code> if null String input\n     */ [75357,77028]"
    },
    {
      "src": "identifier: separator [83155,83164]",
      "dest": "identifier: separator [84649,84658]"
    },
    {
      "src": "return_statement [231393,231406]",
      "dest": "return_statement [232887,232900]"
    },
    {
      "src": "binary_expression [61116,61129]",
      "dest": "binary_expression [61575,61588]"
    },
    {
      "src": "continue_statement [117519,117528]",
      "dest": "continue_statement [119013,119022]"
    },
    {
      "src": "assignment_expression [189094,189140]",
      "dest": "assignment_expression [190588,190634]"
    },
    {
      "src": "line_comment: // if start is greater than end, return \"\" [76016,76058]",
      "dest": "line_comment: // if start is greater than end, return \"\" [77510,77552]"
    },
    {
      "src": "identifier: nsfe [25535,25539]",
      "dest": "identifier: nsfe [25535,25539]"
    },
    {
      "src": "assignment_expression [104975,104984]",
      "dest": "assignment_expression [106469,106478]"
    },
    {
      "src": "variable_declarator [123475,123507]",
      "dest": "variable_declarator [124969,125001]"
    },
    {
      "src": "argument_list [57521,57523]",
      "dest": "argument_list [57861,57863]"
    },
    {
      "src": "identifier: max [103146,103149]",
      "dest": "identifier: max [104640,104643]"
    },
    {
      "src": "type: String [244069,244075]",
      "dest": "type: String [245563,245569]"
    },
    {
      "src": "parenthesized_expression [173310,173351]",
      "dest": "parenthesized_expression [174804,174845]"
    },
    {
      "src": "binary_expression [43391,43408]",
      "dest": "binary_expression [43391,43408]"
    },
    {
      "src": "block [118493,119117]",
      "dest": "block [119987,120611]"
    },
    {
      "src": "local_variable_declaration [116795,116813]",
      "dest": "local_variable_declaration [118289,118307]"
    },
    {
      "src": "formal_parameter [12642,12652]",
      "dest": "formal_parameter [12642,12652]"
    },
    {
      "src": "return_statement [63913,63926]",
      "dest": "return_statement [64960,64973]"
    },
    {
      "src": "affectation_operator: = [227435,227436]",
      "dest": "affectation_operator: = [228929,228930]"
    },
    {
      "src": "identifier: searchChar [42252,42262]",
      "dest": "identifier: searchChar [42252,42262]"
    },
    {
      "src": "formal_parameter [86277,86287]",
      "dest": "formal_parameter [87771,87781]"
    },
    {
      "src": "identifier: sz [209202,209204]",
      "dest": "identifier: sz [210696,210698]"
    },
    {
      "src": "expression_statement [168116,168132]",
      "dest": "expression_statement [169610,169626]"
    },
    {
      "src": "variable_declarator [186018,186049]",
      "dest": "variable_declarator [187512,187543]"
    },
    {
      "src": "identifier: str [184076,184079]",
      "dest": "identifier: str [185570,185573]"
    },
    {
      "src": "decimal_integer_literal: 0 [39548,39549]",
      "dest": "decimal_integer_literal: 0 [39548,39549]"
    },
    {
      "src": "identifier: offset [219693,219699]",
      "dest": "identifier: offset [221187,221193]"
    },
    {
      "src": "true: true [202256,202260]",
      "dest": "true: true [203750,203754]"
    },
    {
      "src": "comparison_operator: != [18636,18638]",
      "dest": "comparison_operator: != [18636,18638]"
    },
    {
      "src": "decimal_integer_literal: 1 [228848,228849]",
      "dest": "decimal_integer_literal: 1 [230342,230343]"
    },
    {
      "src": "block_comment:     \n     * Performs the logic for the <code>split</code> and \n     * <code>splitPreserveAllTokens</code> methods that return a maximum array \n     * length.\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars the separate character\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit.\n     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n     * treated as empty token separators; if <code>false</code>, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [115576,116272]",
      "dest": "block_comment:     \n     * Performs the logic for the <code>split</code> and \n     * <code>splitPreserveAllTokens</code> methods that return a maximum array \n     * length.\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars the separate character\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit.\n     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n     * treated as empty token separators; if <code>false</code>, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [117070,117766]"
    },
    {
      "src": "return_statement [119250,119295]",
      "dest": "return_statement [120744,120789]"
    },
    {
      "src": "type: String[] [90719,90727]",
      "dest": "type: String[] [92213,92221]"
    },
    {
      "src": "type_declaration [5217,244453]",
      "dest": "type_declaration [5217,245947]"
    },
    {
      "src": "identifier: Character [203256,203265]",
      "dest": "identifier: Character [204750,204759]"
    },
    {
      "src": "type: char[] [182040,182046]",
      "dest": "type: char[] [183534,183540]"
    },
    {
      "src": "line_comment: // String.charAt(n) is about 4 times better for a length 3 string [5666,5731]",
      "dest": "line_comment: // String.charAt(n) is about 4 times better for a length 3 string [5666,5731]"
    },
    {
      "src": "line_comment: // Chopping [171975,171986]",
      "dest": "line_comment: // Chopping [173469,173480]"
    },
    {
      "src": "type: String [179933,179939]",
      "dest": "type: String [181427,181433]"
    },
    {
      "src": "identifier: padding [174733,174740]",
      "dest": "identifier: padding [176227,176234]"
    },
    {
      "src": "identifier: append [150705,150711]",
      "dest": "identifier: append [152199,152205]"
    },
    {
      "src": "identifier: str [238085,238088]",
      "dest": "identifier: str [239579,239582]"
    },
    {
      "src": "comparison_operator: == [86503,86505]",
      "dest": "comparison_operator: == [87997,87999]"
    },
    {
      "src": "block [89228,89264]",
      "dest": "block [90722,90758]"
    },
    {
      "src": "block [57826,58355]",
      "dest": "block [54931,55317]"
    },
    {
      "src": "logical_operator: || [36119,36121]",
      "dest": "logical_operator: || [36119,36121]"
    },
    {
      "src": "type: int [23176,23179]",
      "dest": "type: int [23176,23179]"
    },
    {
      "src": "null_literal: null [163672,163676]",
      "dest": "null_literal: null [165166,165170]"
    },
    {
      "src": "final: final [6109,6114]",
      "dest": "final: final [6109,6114]"
    },
    {
      "src": "comparison_operator: == [198243,198245]",
      "dest": "comparison_operator: == [199737,199739]"
    },
    {
      "src": "argument_list [110840,110843]",
      "dest": "argument_list [112334,112337]"
    },
    {
      "src": "binary_expression [56036,56071]",
      "dest": "binary_expression [56382,56417]"
    },
    {
      "src": "comparison_operator: == [133907,133909]",
      "dest": "comparison_operator: == [135401,135403]"
    },
    {
      "src": "identifier: str [83101,83104]",
      "dest": "identifier: str [84595,84598]"
    },
    {
      "src": "local_variable_declaration [182142,182152]",
      "dest": "local_variable_declaration [183636,183646]"
    },
    {
      "src": "parenthesized_expression [18629,18646]",
      "dest": "parenthesized_expression [18629,18646]"
    },
    {
      "src": "identifier: str [165850,165853]",
      "dest": "identifier: str [167344,167347]"
    },
    {
      "src": "identifier: pos [79758,79761]",
      "dest": "identifier: pos [81252,81255]"
    },
    {
      "src": "identifier: invalidChars [68108,68120]",
      "dest": "identifier: invalidChars [69602,69614]"
    },
    {
      "src": "parenthesized_expression [79847,79878]",
      "dest": "parenthesized_expression [81341,81372]"
    },
    {
      "src": "identifier: EMPTY_STRING_ARRAY [104313,104331]",
      "dest": "identifier: EMPTY_STRING_ARRAY [105807,105825]"
    },
    {
      "src": "class_literal [24634,24652]",
      "dest": "class_literal [24634,24652]"
    },
    {
      "src": "affectation_operator: = [81652,81653]",
      "dest": "affectation_operator: = [83146,83147]"
    },
    {
      "src": "variable_declarator [110660,110690]",
      "dest": "variable_declarator [112154,112184]"
    },
    {
      "src": "method_invocation [220155,220167]",
      "dest": "method_invocation [221649,221661]"
    },
    {
      "src": "if_statement [185330,185383]",
      "dest": "if_statement [186824,186877]"
    },
    {
      "src": "identifier: append [175665,175671]",
      "dest": "identifier: append [177159,177165]"
    },
    {
      "src": "formal_parameter [103112,103122]",
      "dest": "formal_parameter [104606,104616]"
    },
    {
      "src": "comparison_operator: == [47825,47827]",
      "dest": "comparison_operator: == [47825,47827]"
    },
    {
      "src": "identifier: ignoreCase [244104,244114]",
      "dest": "identifier: ignoreCase [245598,245608]"
    },
    {
      "src": "identifier: tokenStart [124007,124017]",
      "dest": "identifier: tokenStart [125501,125511]"
    },
    {
      "src": "catch_formal_parameter [26184,26204]",
      "dest": "catch_formal_parameter [26184,26204]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [26499,26572]",
      "dest": "line_comment: //----------------------------------------------------------------------- [26499,26572]"
    },
    {
      "src": "identifier: start [168562,168567]",
      "dest": "identifier: start [170056,170061]"
    },
    {
      "src": "formal_parameter [36061,36072]",
      "dest": "formal_parameter [36061,36072]"
    },
    {
      "src": "variable_declarator [185463,185487]",
      "dest": "variable_declarator [186957,186981]"
    },
    {
      "src": "field_access [227349,227359]",
      "dest": "field_access [228843,228853]"
    },
    {
      "src": "formal_parameters [200839,200856]",
      "dest": "formal_parameters [202333,202350]"
    },
    {
      "src": "variable_declarator [199875,199882]",
      "dest": "variable_declarator [201369,201376]"
    },
    {
      "src": "false: false [208246,208251]",
      "dest": "false: false [209740,209745]"
    },
    {
      "src": "method_invocation [198556,198581]",
      "dest": "method_invocation [200050,200075]"
    },
    {
      "src": "method_invocation [225359,225371]",
      "dest": "method_invocation [226853,226865]"
    },
    {
      "src": "expression_statement [189094,189141]",
      "dest": "expression_statement [190588,190635]"
    },
    {
      "src": "identifier: strs [23033,23037]",
      "dest": "identifier: strs [23033,23037]"
    },
    {
      "src": "type: String [49349,49355]",
      "dest": "type: String [49349,49355]"
    },
    {
      "src": "null_literal: null [65216,65220]",
      "dest": "null_literal: null [66263,66267]"
    },
    {
      "src": "argument_list [170348,170361]",
      "dest": "argument_list [171842,171855]"
    },
    {
      "src": "identifier: str [18988,18991]",
      "dest": "identifier: str [18988,18991]"
    },
    {
      "src": "binary_expression [62555,62582]",
      "dest": "binary_expression [63308,63336]"
    },
    {
      "src": "type: int [53115,53118]",
      "dest": "type: int [53115,53118]"
    },
    {
      "src": "type: String [199750,199756]",
      "dest": "type: String [201244,201250]"
    },
    {
      "src": "static: static [148234,148240]",
      "dest": "static: static [149728,149734]"
    },
    {
      "src": "return_statement [65236,65249]",
      "dest": "return_statement [66283,66296]"
    },
    {
      "src": "!: ! [133965,133966]",
      "dest": "!: ! [135459,135460]"
    },
    {
      "src": "decimal_integer_literal: 1 [235543,235544]",
      "dest": "decimal_integer_literal: 1 [237037,237038]"
    },
    {
      "src": "formal_parameters [155067,155127]",
      "dest": "formal_parameters [156561,156621]"
    },
    {
      "src": "block [17119,17273]",
      "dest": "block [17119,17273]"
    },
    {
      "src": "logical_operator: || [90811,90813]",
      "dest": "logical_operator: || [92305,92307]"
    },
    {
      "src": "method_invocation [122094,122125]",
      "dest": "method_invocation [123588,123619]"
    },
    {
      "src": "type: StringBuilder [196858,196871]",
      "dest": "type: StringBuilder [198352,198365]"
    },
    {
      "src": "comparison_operator: < [36705,36706]",
      "dest": "comparison_operator: < [36705,36706]"
    },
    {
      "src": "comparison_operator: == [105854,105856]",
      "dest": "comparison_operator: == [107348,107350]"
    },
    {
      "src": "identifier: toCharArray [123239,123250]",
      "dest": "identifier: toCharArray [124733,124744]"
    },
    {
      "src": "identifier: join [136289,136293]",
      "dest": "identifier: join [137783,137787]"
    },
    {
      "src": "block [129248,129284]",
      "dest": "block [130742,130778]"
    },
    {
      "src": "block [235922,235955]",
      "dest": "block [237416,237449]"
    },
    {
      "src": "identifier: str [171808,171811]",
      "dest": "identifier: str [173302,173305]"
    },
    {
      "src": "variable_declarator [244317,244359]",
      "dest": "variable_declarator [245811,245853]"
    },
    {
      "src": "comparison_operator: != [20533,20535]",
      "dest": "comparison_operator: != [20533,20535]"
    },
    {
      "src": "assignment_expression [117598,117610]",
      "dest": "assignment_expression [119092,119104]"
    },
    {
      "src": "identifier: strLength [165910,165919]",
      "dest": "identifier: strLength [167404,167413]"
    },
    {
      "src": "parenthesized_expression [49512,49547]",
      "dest": "parenthesized_expression [49512,49547]"
    },
    {
      "src": "identifier: isEmpty [86383,86390]",
      "dest": "identifier: isEmpty [87877,87884]"
    },
    {
      "src": "identifier: join [136160,136164]",
      "dest": "identifier: join [137654,137658]"
    },
    {
      "src": "identifier: cs2 [27465,27468]",
      "dest": "identifier: cs2 [27465,27468]"
    },
    {
      "src": "visibility: public [136139,136145]",
      "dest": "visibility: public [137633,137639]"
    },
    {
      "src": "identifier: max [150332,150335]",
      "dest": "identifier: max [151826,151829]"
    },
    {
      "src": "decimal_integer_literal: 1 [159190,159191]",
      "dest": "decimal_integer_literal: 1 [160684,160685]"
    },
    {
      "src": "identifier: cs [200853,200855]",
      "dest": "identifier: cs [202347,202349]"
    },
    {
      "src": "identifier: i [110704,110705]",
      "dest": "identifier: i [112198,112199]"
    },
    {
      "src": "decimal_integer_literal: 0 [70015,70016]",
      "dest": "decimal_integer_literal: 0 [71509,71510]"
    },
    {
      "src": "binary_expression [123525,123544]",
      "dest": "binary_expression [125019,125038]"
    },
    {
      "src": "comparison_operator: == [160115,160117]",
      "dest": "comparison_operator: == [161609,161611]"
    },
    {
      "src": "argument_list [171759,171764]",
      "dest": "argument_list [173253,173258]"
    },
    {
      "src": "modifiers [243432,243445]",
      "dest": "modifiers [244926,244939]"
    },
    {
      "src": "method_declaration [206803,207125]",
      "dest": "method_declaration [208297,208619]"
    },
    {
      "src": "argument_list [104392,104403]",
      "dest": "argument_list [105886,105897]"
    },
    {
      "src": "affectation_operator: = [228432,228433]",
      "dest": "affectation_operator: = [229926,229927]"
    },
    {
      "src": "local_variable_declaration [181605,181630]",
      "dest": "local_variable_declaration [183099,183124]"
    },
    {
      "src": "identifier: size [185543,185547]",
      "dest": "identifier: size [187037,187041]"
    },
    {
      "src": "binary_expression [162000,162015]",
      "dest": "binary_expression [163494,163509]"
    },
    {
      "src": "identifier: ch [166293,166295]",
      "dest": "identifier: ch [167787,167789]"
    },
    {
      "src": "identifier: searchString [241244,241256]",
      "dest": "identifier: searchString [242738,242750]"
    },
    {
      "src": "local_variable_declaration [161469,161479]",
      "dest": "local_variable_declaration [162963,162973]"
    },
    {
      "src": "logical_operator: || [47812,47814]",
      "dest": "logical_operator: || [47812,47814]"
    },
    {
      "src": "modifiers [8630,8643]",
      "dest": "modifiers [8630,8643]"
    },
    {
      "src": "identifier: Character [195685,195694]",
      "dest": "identifier: Character [197179,197188]"
    },
    {
      "src": "type: char [163633,163637]",
      "dest": "type: char [165127,165131]"
    },
    {
      "src": "affectation_operator: = [209205,209206]",
      "dest": "affectation_operator: = [210699,210700]"
    },
    {
      "src": "local_variable_declaration [150347,150411]",
      "dest": "local_variable_declaration [151841,151905]"
    },
    {
      "src": "type: java.lang.reflect.Method [24561,24585]",
      "dest": "type: java.lang.reflect.Method [24561,24585]"
    },
    {
      "src": "parenthesized_expression [205702,205714]",
      "dest": "parenthesized_expression [207196,207208]"
    },
    {
      "src": "identifier: i [210289,210290]",
      "dest": "identifier: i [211783,211784]"
    },
    {
      "src": "array_access [123500,123506]",
      "dest": "array_access [124994,125000]"
    },
    {
      "src": "object_creation_expression [25725,25812]",
      "dest": "object_creation_expression [25725,25812]"
    },
    {
      "src": "identifier: searchChars [57376,57387]",
      "dest": "identifier: searchChars [54489,54500]"
    },
    {
      "src": "identifier: indexOf [199910,199917]",
      "dest": "identifier: indexOf [201404,201411]"
    },
    {
      "src": "visibility: public [169891,169897]",
      "dest": "visibility: public [171385,171391]"
    },
    {
      "src": "if_statement [79925,79970]",
      "dest": "if_statement [81419,81464]"
    },
    {
      "src": "comparison_operator: <= [79996,79998]",
      "dest": "comparison_operator: <= [81490,81492]"
    },
    {
      "src": "argument_list [160646,160648]",
      "dest": "argument_list [162140,162142]"
    },
    {
      "src": "type: int [187728,187731]",
      "dest": "type: int [189222,189225]"
    },
    {
      "src": "identifier: str [215704,215707]",
      "dest": "identifier: str [217198,217201]"
    },
    {
      "src": "static: static [51808,51814]",
      "dest": "static: static [51808,51814]"
    },
    {
      "src": "ternary_expression [10679,10710]",
      "dest": "ternary_expression [10679,10710]"
    },
    {
      "src": "parenthesized_expression [166069,166081]",
      "dest": "parenthesized_expression [167563,167575]"
    },
    {
      "src": "local_variable_declaration [174546,174577]",
      "dest": "local_variable_declaration [176040,176071]"
    },
    {
      "src": "identifier: pos [145780,145783]",
      "dest": "identifier: pos [147274,147277]"
    },
    {
      "src": "parenthesized_expression [190723,190734]",
      "dest": "parenthesized_expression [192217,192228]"
    },
    {
      "src": "decimal_integer_literal: 0 [170061,170062]",
      "dest": "decimal_integer_literal: 0 [171555,171556]"
    },
    {
      "src": "argument_list [170236,170238]",
      "dest": "argument_list [171730,171732]"
    },
    {
      "src": "identifier: padChar [183919,183926]",
      "dest": "identifier: padChar [185413,185420]"
    },
    {
      "src": "identifier: repeat [174487,174493]",
      "dest": "identifier: repeat [175981,175987]"
    },
    {
      "src": "identifier: i [175350,175351]",
      "dest": "identifier: i [176844,176845]"
    },
    {
      "src": "comparison_operator: == [89186,89188]",
      "dest": "comparison_operator: == [90680,90682]"
    },
    {
      "src": "block [165568,166416]",
      "dest": "block [167062,167910]"
    },
    {
      "src": "logical_operator: || [117892,117894]",
      "dest": "logical_operator: || [119386,119388]"
    },
    {
      "src": "variable_declarator [104706,104713]",
      "dest": "variable_declarator [106200,106207]"
    },
    {
      "src": "decimal_integer_literal: 1 [236273,236274]",
      "dest": "decimal_integer_literal: 1 [237767,237768]"
    },
    {
      "src": "type: int [210243,210246]",
      "dest": "type: int [211737,211740]"
    },
    {
      "src": "method_declaration [28427,28573]",
      "dest": "method_declaration [28427,28573]"
    },
    {
      "src": "identifier: firstDiff [228834,228843]",
      "dest": "identifier: firstDiff [230328,230337]"
    },
    {
      "src": "dimensions_expr [178171,178179]",
      "dest": "dimensions_expr [179665,179673]"
    },
    {
      "src": "comparison_operator: == [8714,8716]",
      "dest": "comparison_operator: == [8714,8716]"
    },
    {
      "src": "if_statement [140291,140363]",
      "dest": "if_statement [141785,141857]"
    },
    {
      "src": "comparison_operator: != [158734,158736]",
      "dest": "comparison_operator: != [160228,160230]"
    },
    {
      "src": "visibility: public [192643,192649]",
      "dest": "visibility: public [194137,194143]"
    },
    {
      "src": "argument_list [62455,62457]",
      "dest": "argument_list [63194,63196]"
    },
    {
      "src": "field_access [110598,110627]",
      "dest": "field_access [112092,112121]"
    },
    {
      "src": "variable_declarator [173148,173168]",
      "dest": "variable_declarator [174642,174662]"
    },
    {
      "src": "variable_declarator [165939,165944]",
      "dest": "variable_declarator [167433,167438]"
    },
    {
      "src": "parenthesized_expression [39717,39742]",
      "dest": "parenthesized_expression [39717,39742]"
    },
    {
      "src": "arithmetic_operator: / [222215,222216]",
      "dest": "arithmetic_operator: / [223709,223710]"
    },
    {
      "src": "identifier: substring [173381,173390]",
      "dest": "identifier: substring [174875,174884]"
    },
    {
      "src": "comparison_operator: == [7488,7490]",
      "dest": "comparison_operator: == [7488,7490]"
    },
    {
      "src": "affectation_operator: = [91522,91523]",
      "dest": "affectation_operator: = [93016,93017]"
    },
    {
      "src": "modifiers [122012,122025]",
      "dest": "modifiers [123506,123519]"
    },
    {
      "src": "type: String [110353,110359]",
      "dest": "type: String [111847,111853]"
    },
    {
      "src": "type: int [104681,104684]",
      "dest": "type: int [106175,106178]"
    },
    {
      "src": "type: int [228590,228593]",
      "dest": "type: int [230084,230087]"
    },
    {
      "src": "return_statement [180288,180330]",
      "dest": "return_statement [181782,181824]"
    },
    {
      "src": "formal_parameters [52990,53020]",
      "dest": "formal_parameters [52990,53020]"
    },
    {
      "src": "type: String [14710,14716]",
      "dest": "type: String [14710,14716]"
    },
    {
      "src": "decimal_integer_literal: 0 [178029,178030]",
      "dest": "decimal_integer_literal: 0 [179523,179524]"
    },
    {
      "src": "identifier: Character [198606,198615]",
      "dest": "identifier: Character [200100,200109]"
    },
    {
      "src": "default: default [175511,175518]",
      "dest": "default: default [177005,177012]"
    },
    {
      "src": "type: int [104530,104533]",
      "dest": "type: int [106024,106027]"
    },
    {
      "src": "identifier: end [20685,20688]",
      "dest": "identifier: end [20685,20688]"
    },
    {
      "src": "array_access [231358,231365]",
      "dest": "array_access [232852,232859]"
    },
    {
      "src": "binary_expression [202163,202182]",
      "dest": "binary_expression [203657,203676]"
    },
    {
      "src": "identifier: j [236042,236043]",
      "dest": "identifier: j [237536,237537]"
    },
    {
      "src": "return_statement [217366,217402]",
      "dest": "return_statement [218860,218896]"
    },
    {
      "src": "static: static [203060,203066]",
      "dest": "static: static [204554,204560]"
    },
    {
      "src": "identifier: str [190561,190564]",
      "dest": "identifier: str [192055,192058]"
    },
    {
      "src": "return_statement [75643,75655]",
      "dest": "return_statement [77137,77149]"
    },
    {
      "src": "identifier: i [241138,241139]",
      "dest": "identifier: i [242632,242633]"
    },
    {
      "src": "array_access [186112,186122]",
      "dest": "array_access [187606,187616]"
    },
    {
      "src": "identifier: max [96771,96774]",
      "dest": "identifier: max [98265,98268]"
    },
    {
      "src": "assignment_expression [189150,189184]",
      "dest": "assignment_expression [190644,190678]"
    },
    {
      "src": "arithmetic_operator: / [189127,189128]",
      "dest": "arithmetic_operator: / [190621,190622]"
    },
    {
      "src": "identifier: replacementLength [158604,158621]",
      "dest": "identifier: replacementLength [160098,160115]"
    },
    {
      "src": "block [73599,73682]",
      "dest": "block [75093,75176]"
    },
    {
      "src": "static: static [147045,147051]",
      "dest": "static: static [148539,148545]"
    },
    {
      "src": "identifier: length [188983,188989]",
      "dest": "identifier: length [190477,190483]"
    },
    {
      "src": "local_variable_declaration [170040,170064]",
      "dest": "local_variable_declaration [171534,171558]"
    },
    {
      "src": "decimal_integer_literal: 0 [104691,104692]",
      "dest": "decimal_integer_literal: 0 [106185,106186]"
    },
    {
      "src": "formal_parameter [78384,78394]",
      "dest": "formal_parameter [79878,79888]"
    },
    {
      "src": "parenthesized_expression [233789,233813]",
      "dest": "parenthesized_expression [235283,235307]"
    },
    {
      "src": "type: String [212153,212159]",
      "dest": "type: String [213647,213653]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [91803,91876]",
      "dest": "line_comment: //----------------------------------------------------------------------- [93297,93370]"
    },
    {
      "src": "parenthesized_expression [219738,219761]",
      "dest": "parenthesized_expression [221232,221255]"
    },
    {
      "src": "binary_expression [220306,220335]",
      "dest": "binary_expression [221800,221829]"
    },
    {
      "src": "if_statement [118511,119017]",
      "dest": "if_statement [120005,120511]"
    },
    {
      "src": "identifier: buf [161152,161155]",
      "dest": "identifier: buf [162646,162649]"
    },
    {
      "src": "identifier: length [165816,165822]",
      "dest": "identifier: length [167310,167316]"
    },
    {
      "src": "binary_expression [158721,158754]",
      "dest": "binary_expression [160215,160248]"
    },
    {
      "src": "type: int [145684,145687]",
      "dest": "type: int [147178,147181]"
    },
    {
      "src": "identifier: str [40912,40915]",
      "dest": "identifier: str [40912,40915]"
    },
    {
      "src": "null_literal: null [24899,24903]",
      "dest": "null_literal: null [24899,24903]"
    },
    {
      "src": "expression_statement [132854,132872]",
      "dest": "expression_statement [134348,134366]"
    },
    {
      "src": "update_expression [200983,200986]",
      "dest": "update_expression [202477,202480]"
    },
    {
      "src": "while_statement [134363,134611]",
      "dest": "while_statement [135857,136105]"
    },
    {
      "src": "parenthesized_expression [75706,75715]",
      "dest": "parenthesized_expression [77200,77209]"
    },
    {
      "src": "identifier: tmp [70205,70208]",
      "dest": "identifier: tmp [71699,71702]"
    },
    {
      "src": "affectation_operator: = [61029,61030]",
      "dest": "affectation_operator: = [61488,61489]"
    },
    {
      "src": "type: String [185305,185311]",
      "dest": "type: String [186799,186805]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */ [65428,66383]",
      "dest": "block_comment:     \n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty CharSequence (length()=0) always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", '')      = true\n     * StringUtils.containsNone(\"abab\", 'xyz') = true\n     * StringUtils.containsNone(\"ab1\", 'xyz')  = true\n     * StringUtils.containsNone(\"abz\", 'xyz')  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  an array of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */ [66475,67430]"
    },
    {
      "src": "block [96776,96844]",
      "dest": "block [98270,98338]"
    },
    {
      "src": "identifier: end [20400,20403]",
      "dest": "identifier: end [20400,20403]"
    },
    {
      "src": "argument_list [211226,211230]",
      "dest": "argument_list [212720,212724]"
    },
    {
      "src": "decimal_integer_literal: 0 [235215,235216]",
      "dest": "decimal_integer_literal: 0 [236709,236710]"
    },
    {
      "src": "comparison_operator: == [207033,207035]",
      "dest": "comparison_operator: == [208527,208529]"
    },
    {
      "src": "line_comment: // swap the input strings to consume less memory [235337,235385]",
      "dest": "line_comment: // swap the input strings to consume less memory [236831,236879]"
    },
    {
      "src": "local_variable_declaration [11670,11692]",
      "dest": "local_variable_declaration [11670,11692]"
    },
    {
      "src": "identifier: ch [62519,62521]",
      "dest": "identifier: ch [63258,63260]"
    },
    {
      "src": "binary_expression [73696,73705]",
      "dest": "binary_expression [75190,75199]"
    },
    {
      "src": "update_expression [209252,209255]",
      "dest": "update_expression [210746,210749]"
    },
    {
      "src": "expression_statement [123816,123880]",
      "dest": "expression_statement [125310,125374]"
    },
    {
      "src": "comparison_operator: == [210173,210175]",
      "dest": "comparison_operator: == [211667,211669]"
    },
    {
      "src": "identifier: str [75839,75842]",
      "dest": "identifier: str [77333,77336]"
    },
    {
      "src": "identifier: pads [186083,186087]",
      "dest": "identifier: pads [187577,187581]"
    },
    {
      "src": "identifier: UPPERCASE_LETTER [123680,123696]",
      "dest": "identifier: UPPERCASE_LETTER [125174,125190]"
    },
    {
      "src": "comparison_operator: < [57761,57762]",
      "dest": "comparison_operator: < [58101,58102]"
    },
    {
      "src": "false: false [204464,204469]",
      "dest": "false: false [205958,205963]"
    },
    {
      "src": "type: int [61105,61108]",
      "dest": "type: int [61564,61567]"
    },
    {
      "src": "identifier: buffer [198803,198809]",
      "dest": "identifier: buffer [200297,200303]"
    },
    {
      "src": "affectation_operator: = [162409,162410]",
      "dest": "affectation_operator: = [163903,163904]"
    },
    {
      "src": "decimal_integer_literal: 0 [240025,240026]",
      "dest": "decimal_integer_literal: 0 [241519,241520]"
    },
    {
      "src": "if_statement [235257,235302]",
      "dest": "if_statement [236751,236796]"
    },
    {
      "src": "comparison_operator: == [123667,123669]",
      "dest": "comparison_operator: == [125161,125163]"
    },
    {
      "src": "array_access [236035,236039]",
      "dest": "array_access [237529,237533]"
    },
    {
      "src": "method_invocation [47935,47947]",
      "dest": "method_invocation [47935,47947]"
    },
    {
      "src": "argument_list [53257,53285]",
      "dest": "argument_list [53257,53285]"
    },
    {
      "src": "block_comment:     \n     * <p>Repeat a String <code>repeat</code> times to form a\n     * new String.</p>\n     *\n     * <pre>\n     * StringUtils.repeat(null, 2) = null\n     * StringUtils.repeat(\"\", 0)   = \"\"\n     * StringUtils.repeat(\"\", 2)   = \"\"\n     * StringUtils.repeat(\"a\", 3)  = \"aaa\"\n     * StringUtils.repeat(\"ab\", 2) = \"abab\"\n     * StringUtils.repeat(\"a\", -2) = \"\"\n     * </pre>\n     *\n     * @param str  the String to repeat, may be null\n     * @param repeat  number of times to repeat str, negative treated as zero\n     * @return a new String consisting of the original String repeated,\n     *  <code>null</code> if null String input\n     * @since 2.5\n     */ [173653,174307]",
      "dest": "block_comment:     \n     * <p>Repeat a String <code>repeat</code> times to form a\n     * new String.</p>\n     *\n     * <pre>\n     * StringUtils.repeat(null, 2) = null\n     * StringUtils.repeat(\"\", 0)   = \"\"\n     * StringUtils.repeat(\"\", 2)   = \"\"\n     * StringUtils.repeat(\"a\", 3)  = \"aaa\"\n     * StringUtils.repeat(\"ab\", 2) = \"abab\"\n     * StringUtils.repeat(\"a\", -2) = \"\"\n     * </pre>\n     *\n     * @param str  the String to repeat, may be null\n     * @param repeat  number of times to repeat str, negative treated as zero\n     * @return a new String consisting of the original String repeated,\n     *  <code>null</code> if null String input\n     * @since 2.5\n     */ [175147,175801]"
    },
    {
      "src": "identifier: strLen [90896,90902]",
      "dest": "identifier: strLen [92390,92396]"
    },
    {
      "src": "binary_expression [18753,18777]",
      "dest": "binary_expression [18753,18777]"
    },
    {
      "src": "method_invocation [205838,205878]",
      "dest": "method_invocation [207332,207372]"
    },
    {
      "src": "method_declaration [115413,115570]",
      "dest": "method_declaration [116907,117064]"
    },
    {
      "src": "identifier: searchChar [40878,40888]",
      "dest": "identifier: searchChar [40878,40888]"
    },
    {
      "src": "binary_expression [61158,61178]",
      "dest": "binary_expression [61617,61637]"
    },
    {
      "src": "method_invocation [54753,54765]",
      "dest": "method_invocation [58057,58069]"
    },
    {
      "src": "identifier: isLetter [202126,202134]",
      "dest": "identifier: isLetter [203620,203628]"
    },
    {
      "src": "identifier: str [78391,78394]",
      "dest": "identifier: str [79885,79888]"
    },
    {
      "src": "identifier: toString [175723,175731]",
      "dest": "identifier: toString [177217,177225]"
    },
    {
      "src": "method_invocation [18988,19008]",
      "dest": "method_invocation [18988,19008]"
    },
    {
      "src": "method_invocation [33608,33640]",
      "dest": "method_invocation [33608,33640]"
    },
    {
      "src": "argument_list [65314,65316]",
      "dest": "argument_list [66361,66363]"
    },
    {
      "src": "true: true [211472,211476]",
      "dest": "true: true [212966,212970]"
    },
    {
      "src": "affectation_operator: = [116866,116867]",
      "dest": "affectation_operator: = [118360,118361]"
    },
    {
      "src": "local_variable_declaration [134494,134523]",
      "dest": "local_variable_declaration [135988,136017]"
    },
    {
      "src": "type: String [50837,50843]",
      "dest": "type: String [50837,50843]"
    },
    {
      "src": "type: int [62274,62277]",
      "dest": "type: int [63013,63016]"
    },
    {
      "src": "identifier: increase [160888,160896]",
      "dest": "identifier: increase [162382,162390]"
    },
    {
      "src": "comparison_operator: < [73594,73595]",
      "dest": "comparison_operator: < [75088,75089]"
    },
    {
      "src": "static: static [107700,107706]",
      "dest": "static: static [109194,109200]"
    },
    {
      "src": "method_invocation [168538,168711]",
      "dest": "method_invocation [170032,170205]"
    },
    {
      "src": "binary_expression [61034,61043]",
      "dest": "binary_expression [61493,61502]"
    },
    {
      "src": "formal_parameter [141630,141643]",
      "dest": "formal_parameter [143124,143137]"
    },
    {
      "src": "type: String [120441,120447]",
      "dest": "type: String [121935,121941]"
    },
    {
      "src": "affectation_operator: = [206931,206932]",
      "dest": "affectation_operator: = [208425,208426]"
    },
    {
      "src": "local_variable_declaration [155260,155320]",
      "dest": "local_variable_declaration [156754,156814]"
    },
    {
      "src": "return_statement [49914,49923]",
      "dest": "return_statement [49914,49923]"
    },
    {
      "src": "static: static [54443,54449]",
      "dest": "static: static [57671,57677]"
    },
    {
      "src": "formal_parameters [130681,130745]",
      "dest": "formal_parameters [132175,132239]"
    },
    {
      "src": "parenthesized_expression [119139,119182]",
      "dest": "parenthesized_expression [120633,120676]"
    },
    {
      "src": "comparison_operator: != [170446,170448]",
      "dest": "comparison_operator: != [171940,171942]"
    },
    {
      "src": "assignment_expression [227932,227988]",
      "dest": "assignment_expression [229426,229482]"
    },
    {
      "src": "block [175639,175695]",
      "dest": "block [177133,177189]"
    },
    {
      "src": "null_literal: null [176662,176666]",
      "dest": "null_literal: null [178156,178160]"
    },
    {
      "src": "return_statement [182247,182286]",
      "dest": "return_statement [183741,183780]"
    },
    {
      "src": "null_literal: null [104182,104186]",
      "dest": "null_literal: null [105676,105680]"
    },
    {
      "src": "type: String [136153,136159]",
      "dest": "type: String [137647,137653]"
    },
    {
      "src": "identifier: length [171902,171908]",
      "dest": "identifier: length [173396,173402]"
    },
    {
      "src": "identifier: str1 [223865,223869]",
      "dest": "identifier: str1 [225359,225363]"
    },
    {
      "src": "binary_expression [20528,20602]",
      "dest": "binary_expression [20528,20602]"
    },
    {
      "src": "argument_list [166292,166296]",
      "dest": "argument_list [167786,167790]"
    },
    {
      "src": "identifier: start [75831,75836]",
      "dest": "identifier: start [77325,77330]"
    },
    {
      "src": "binary_expression [72016,72022]",
      "dest": "binary_expression [73510,73516]"
    },
    {
      "src": "identifier: builder [222316,222323]",
      "dest": "identifier: builder [223810,223817]"
    },
    {
      "src": "identifier: toString [168725,168733]",
      "dest": "identifier: toString [170219,170227]"
    },
    {
      "src": "modifiers [219315,219328]",
      "dest": "modifiers [220809,220822]"
    },
    {
      "src": "method_invocation [141740,141760]",
      "dest": "method_invocation [143234,143254]"
    },
    {
      "src": "update_expression [123450,123455]",
      "dest": "update_expression [124944,124949]"
    },
    {
      "src": "argument_list [110551,110553]",
      "dest": "argument_list [112045,112047]"
    },
    {
      "src": "identifier: charAt [204450,204456]",
      "dest": "identifier: charAt [205944,205950]"
    },
    {
      "src": "identifier: repeat [174590,174596]",
      "dest": "identifier: repeat [176084,176090]"
    },
    {
      "src": "assignment_expression [236035,236043]",
      "dest": "assignment_expression [237529,237537]"
    },
    {
      "src": "identifier: searchStr [46596,46605]",
      "dest": "identifier: searchStr [46596,46605]"
    },
    {
      "src": "block [168432,168522]",
      "dest": "block [169926,170016]"
    },
    {
      "src": "array_access [231673,231680]",
      "dest": "array_access [233167,233174]"
    },
    {
      "src": "identifier: substring [111295,111304]",
      "dest": "identifier: substring [112789,112798]"
    },
    {
      "src": "identifier: startPos [39637,39645]",
      "dest": "identifier: startPos [39637,39645]"
    },
    {
      "src": "if_statement [40900,40965]",
      "dest": "if_statement [40900,40965]"
    },
    {
      "src": "identifier: PAD_LIMIT [174701,174710]",
      "dest": "identifier: PAD_LIMIT [176195,176204]"
    },
    {
      "src": "decimal_integer_literal: 2 [222282,222283]",
      "dest": "decimal_integer_literal: 2 [223776,223777]"
    },
    {
      "src": "block [161974,162172]",
      "dest": "block [163468,163666]"
    },
    {
      "src": "formal_parameters [223675,223701]",
      "dest": "formal_parameters [225169,225195]"
    },
    {
      "src": "if_statement [133961,134023]",
      "dest": "if_statement [135455,135517]"
    },
    {
      "src": "if_statement [83089,83142]",
      "dest": "if_statement [84583,84636]"
    },
    {
      "src": "variable_declarator [104649,104671]",
      "dest": "variable_declarator [106143,106165]"
    },
    {
      "src": "argument_list [187761,187777]",
      "dest": "argument_list [189255,189271]"
    },
    {
      "src": "identifier: charAt [208232,208238]",
      "dest": "identifier: charAt [209726,209732]"
    },
    {
      "src": "assignment_expression [181500,181512]",
      "dest": "assignment_expression [182994,183006]"
    },
    {
      "src": "expression_statement [91469,91505]",
      "dest": "expression_statement [92963,92999]"
    },
    {
      "src": "increment_operator: ++ [235918,235920]",
      "dest": "increment_operator: ++ [237412,237414]"
    },
    {
      "src": "\": \" [25165,25166]",
      "dest": "\": \" [25165,25166]"
    },
    {
      "src": "string_fragment: IllegalAccessException occurred during 1.6 backcompat code [25747,25805]",
      "dest": "string_fragment: IllegalAccessException occurred during 1.6 backcompat code [25747,25805]"
    },
    {
      "src": "identifier: isAlphaSpace [201936,201948]",
      "dest": "identifier: isAlphaSpace [203430,203442]"
    },
    {
      "src": "method_declaration [186592,186677]",
      "dest": "method_declaration [188086,188171]"
    },
    {
      "src": "block [204497,204542]",
      "dest": "block [205991,206036]"
    },
    {
      "src": "comparison_operator: < [178207,178208]",
      "dest": "comparison_operator: < [179701,179702]"
    },
    {
      "src": "comparison_operator: == [8888,8890]",
      "dest": "comparison_operator: == [8888,8890]"
    },
    {
      "src": "identifier: i [235904,235905]",
      "dest": "identifier: i [237398,237399]"
    },
    {
      "src": "affectation_operator: = [62478,62479]",
      "dest": "affectation_operator: = [63217,63218]"
    },
    {
      "src": "identifier: i [39815,39816]",
      "dest": "identifier: i [39815,39816]"
    },
    {
      "src": "identifier: outer [61003,61008]",
      "dest": "identifier: outer [61462,61467]"
    },
    {
      "src": "identifier: csLen [54624,54629]",
      "dest": "identifier: csLen [54624,54629]"
    },
    {
      "src": "type: String [138668,138674]",
      "dest": "type: String [140162,140168]"
    },
    {
      "src": "block [57693,58379]",
      "dest": "block [54801,55341]"
    },
    {
      "src": "identifier: LOWERCASE_LETTER [123635,123651]",
      "dest": "identifier: LOWERCASE_LETTER [125129,125145]"
    },
    {
      "src": "identifier: buf [162411,162414]",
      "dest": "identifier: buf [163905,163908]"
    },
    {
      "src": "comparison_operator: <= [78553,78555]",
      "dest": "comparison_operator: <= [80047,80049]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if String contains a search String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *)     = false\n     * StringUtils.contains(*, null)     = false\n     * StringUtils.contains(\"\", \"\")      = true\n     * StringUtils.contains(\"abc\", \"\")   = true\n     * StringUtils.contains(\"abc\", \"a\")  = true\n     * StringUtils.contains(\"abc\", \"z\")  = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String,\n     *  false if not or <code>null</code> string input\n     * @since 2.0\n     */ [50988,51796]",
      "dest": "block_comment:     \n     * <p>Checks if String contains a search String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *)     = false\n     * StringUtils.contains(*, null)     = false\n     * StringUtils.contains(\"\", \"\")      = true\n     * StringUtils.contains(\"abc\", \"\")   = true\n     * StringUtils.contains(\"abc\", \"a\")  = true\n     * StringUtils.contains(\"abc\", \"z\")  = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String,\n     *  false if not or <code>null</code> string input\n     * @since 2.0\n     */ [50988,51796]"
    },
    {
      "src": "assignment_expression [185427,185439]",
      "dest": "assignment_expression [186921,186933]"
    },
    {
      "src": "identifier: cs [208257,208259]",
      "dest": "identifier: cs [209751,209753]"
    },
    {
      "src": "affectation_operator: = [198227,198228]",
      "dest": "affectation_operator: = [199721,199722]"
    },
    {
      "src": "identifier: i [235760,235761]",
      "dest": "identifier: i [237254,237255]"
    },
    {
      "src": "identifier: str [99779,99782]",
      "dest": "identifier: str [101273,101276]"
    },
    {
      "src": "static: static [209081,209087]",
      "dest": "static: static [210575,210581]"
    },
    {
      "src": "method_invocation [181469,181484]",
      "dest": "method_invocation [182963,182978]"
    },
    {
      "src": "argument_list [174740,174763]",
      "dest": "argument_list [176234,176257]"
    },
    {
      "src": "identifier: match [118585,118590]",
      "dest": "identifier: match [120079,120084]"
    },
    {
      "src": "identifier: max [115498,115501]",
      "dest": "identifier: max [116992,116995]"
    },
    {
      "src": "identifier: textIndex [162000,162009]",
      "dest": "identifier: textIndex [163494,163503]"
    },
    {
      "src": "return_statement [150744,150766]",
      "dest": "return_statement [152238,152260]"
    },
    {
      "src": "comparison_operator: > [73760,73761]",
      "dest": "comparison_operator: > [75254,75255]"
    },
    {
      "src": "static: static [201921,201927]",
      "dest": "static: static [203415,203421]"
    },
    {
      "src": "identifier: str [110541,110544]",
      "dest": "identifier: str [112035,112038]"
    },
    {
      "src": "arithmetic_operator: - [170357,170358]",
      "dest": "arithmetic_operator: - [171851,171852]"
    },
    {
      "src": "block [138832,138894]",
      "dest": "block [140326,140388]"
    },
    {
      "src": "block [84678,84925]",
      "dest": "block [86172,86419]"
    },
    {
      "src": "identifier: end [168427,168430]",
      "dest": "identifier: end [169921,169924]"
    },
    {
      "src": "identifier: toString [198810,198818]",
      "dest": "identifier: toString [200304,200312]"
    },
    {
      "src": "identifier: isEmpty [199776,199783]",
      "dest": "identifier: isEmpty [201270,201277]"
    },
    {
      "src": "dimensions [235659,235661]",
      "dest": "dimensions [237153,237155]"
    },
    {
      "src": "identifier: Integer [227390,227397]",
      "dest": "identifier: Integer [228884,228891]"
    },
    {
      "src": "method_declaration [200810,201131]",
      "dest": "method_declaration [202304,202625]"
    },
    {
      "src": "method_invocation [188979,188991]",
      "dest": "method_invocation [190473,190485]"
    },
    {
      "src": "try_statement [24193,26326]",
      "dest": "try_statement [24193,26326]"
    },
    {
      "src": "identifier: splitWorker [104463,104474]",
      "dest": "identifier: splitWorker [105957,105968]"
    },
    {
      "src": "comparison_operator: == [223893,223895]",
      "dest": "comparison_operator: == [225387,225389]"
    },
    {
      "src": "identifier: inputLength [174841,174852]",
      "dest": "identifier: inputLength [176335,176346]"
    },
    {
      "src": "identifier: max [53212,53215]",
      "dest": "identifier: max [53212,53215]"
    },
    {
      "src": "formal_parameters [179030,179052]",
      "dest": "formal_parameters [180524,180546]"
    },
    {
      "src": "\": \" [25909,25910]",
      "dest": "\": \" [25909,25910]"
    },
    {
      "src": "formal_parameters [177946,177972]",
      "dest": "formal_parameters [179440,179466]"
    },
    {
      "src": "comparison_operator: != [134418,134420]",
      "dest": "comparison_operator: != [135912,135914]"
    },
    {
      "src": "arithmetic_operator: - [131087,131088]",
      "dest": "arithmetic_operator: - [132581,132582]"
    },
    {
      "src": "type: Object [134032,134038]",
      "dest": "type: Object [135526,135532]"
    },
    {
      "src": "local_variable_declaration [91212,91247]",
      "dest": "local_variable_declaration [92706,92741]"
    },
    {
      "src": "binary_expression [189039,189048]",
      "dest": "binary_expression [190533,190542]"
    },
    {
      "src": "affectation_operator: = [168159,168160]",
      "dest": "affectation_operator: = [169653,169654]"
    },
    {
      "src": "identifier: str [182254,182257]",
      "dest": "identifier: str [183748,183751]"
    },
    {
      "src": "identifier: CharUtils [170449,170458]",
      "dest": "identifier: CharUtils [171943,171952]"
    },
    {
      "src": "parenthesized_expression [123134,123153]",
      "dest": "parenthesized_expression [124628,124647]"
    },
    {
      "src": "type: int [61023,61026]",
      "dest": "type: int [61482,61485]"
    },
    {
      "src": "argument_list [204484,204487]",
      "dest": "argument_list [205978,205981]"
    },
    {
      "src": "identifier: str [43376,43379]",
      "dest": "identifier: str [43376,43379]"
    },
    {
      "src": "identifier: len [110807,110810]",
      "dest": "identifier: len [112301,112304]"
    },
    {
      "src": "identifier: charAt [173315,173321]",
      "dest": "identifier: charAt [174809,174815]"
    },
    {
      "src": "type: int [99724,99727]",
      "dest": "type: int [101218,101221]"
    },
    {
      "src": "identifier: padChar [189176,189183]",
      "dest": "identifier: padChar [190670,190677]"
    },
    {
      "src": "comparison_operator: < [66731,66732]",
      "dest": "comparison_operator: < [67850,67851]"
    },
    {
      "src": "increment_operator: ++ [36678,36680]",
      "dest": "increment_operator: ++ [36678,36680]"
    },
    {
      "src": "type: String [215446,215452]",
      "dest": "type: String [216940,216946]"
    },
    {
      "src": "formal_parameters [211173,211190]",
      "dest": "formal_parameters [212667,212684]"
    },
    {
      "src": "type: String [223676,223682]",
      "dest": "type: String [225170,225176]"
    },
    {
      "src": "block [116581,116617]",
      "dest": "block [118075,118111]"
    },
    {
      "src": "type: String [193670,193676]",
      "dest": "type: String [195164,195170]"
    },
    {
      "src": "return_statement [125146,125171]",
      "dest": "return_statement [126640,126665]"
    },
    {
      "src": "type: int [166017,166020]",
      "dest": "type: int [167511,167514]"
    },
    {
      "src": "identifier: p [236425,236426]",
      "dest": "identifier: p [237919,237920]"
    },
    {
      "src": "affectation_operator: = [57669,57670]",
      "dest": "affectation_operator: = [54780,54781]"
    },
    {
      "src": "type: StringBuilder [214634,214647]",
      "dest": "type: StringBuilder [216128,216141]"
    },
    {
      "src": "type: int [150131,150134]",
      "dest": "type: int [151625,151628]"
    },
    {
      "src": "line_comment: // remember start is negative [75861,75890]",
      "dest": "line_comment: // remember start is negative [77355,77384]"
    },
    {
      "src": "identifier: ObjectUtils [134118,134129]",
      "dest": "identifier: ObjectUtils [135612,135623]"
    },
    {
      "src": "parenthesized_expression [83265,83289]",
      "dest": "parenthesized_expression [84759,84783]"
    },
    {
      "src": "formal_parameters [185282,185319]",
      "dest": "formal_parameters [186776,186813]"
    },
    {
      "src": "identifier: match [118370,118375]",
      "dest": "identifier: match [119864,119869]"
    },
    {
      "src": "identifier: str [43339,43342]",
      "dest": "identifier: str [43339,43342]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>INDEX_NOT_FOUND (-1)</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [28672,29392]",
      "dest": "block_comment:     \n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>INDEX_NOT_FOUND (-1)</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *)         = -1\n     * StringUtils.indexOf(\"\", *)           = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'a') = 0\n     * StringUtils.indexOf(\"aabaabaa\", 'b') = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [28672,29392]"
    },
    {
      "src": "null_literal: null [188903,188907]",
      "dest": "null_literal: null [190397,190401]"
    },
    {
      "src": "identifier: i [182146,182147]",
      "dest": "identifier: i [183640,183641]"
    },
    {
      "src": "type: char [175167,175171]",
      "dest": "type: char [176661,176665]"
    },
    {
      "src": "comparison_operator: < [200977,200978]",
      "dest": "comparison_operator: < [202471,202472]"
    },
    {
      "src": "identifier: start [76071,76076]",
      "dest": "identifier: start [77565,77570]"
    },
    {
      "src": "identifier: i [23187,23188]",
      "dest": "identifier: i [23187,23188]"
    },
    {
      "src": "parenthesized_expression [191897,191910]",
      "dest": "parenthesized_expression [193391,193404]"
    },
    {
      "src": "method_invocation [18753,18772]",
      "dest": "method_invocation [18753,18772]"
    },
    {
      "src": "type: String[] [110332,110340]",
      "dest": "type: String[] [111826,111834]"
    },
    {
      "src": "type: String [36043,36049]",
      "dest": "type: String [36043,36049]"
    },
    {
      "src": "affectation_operator: = [137310,137311]",
      "dest": "affectation_operator: = [138804,138805]"
    },
    {
      "src": "return_statement [193740,193752]",
      "dest": "return_statement [195234,195246]"
    },
    {
      "src": "local_variable_declaration [215682,215724]",
      "dest": "local_variable_declaration [217176,217218]"
    },
    {
      "src": "type: int [224940,224943]",
      "dest": "type: int [226434,226437]"
    },
    {
      "src": "visibility: public [83013,83019]",
      "dest": "visibility: public [84507,84513]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, separator specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)         = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)           = []\n     * StringUtils.splitPreserveAllTokens(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a..b.c\", '.')   = [\"a\", \"\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.splitPreserveAllTokens(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c \", ' ')   = [\"a\", \"b\", \"c\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c  \", ' ')   = [\"a\", \"b\", \"c\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c\", ' ')   = [\"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"  a b c\", ' ')  = [\"\", \"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c \", ' ')  = [\"\", a\", \"b\", \"c\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChar  the character used as the delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */ [107813,109587]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, separator specified,\n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)         = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)           = []\n     * StringUtils.splitPreserveAllTokens(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a..b.c\", '.')   = [\"a\", \"\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.splitPreserveAllTokens(\"a\\tb\\nc\", null) = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c \", ' ')   = [\"a\", \"b\", \"c\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"a b c  \", ' ')   = [\"a\", \"b\", \"c\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c\", ' ')   = [\"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\"  a b c\", ' ')  = [\"\", \"\", a\", \"b\", \"c\"]\n     * StringUtils.splitPreserveAllTokens(\" a b c \", ' ')  = [\"\", a\", \"b\", \"c\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChar  the character used as the delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */ [109307,111081]"
    },
    {
      "src": "formal_parameter [71782,71801]",
      "dest": "formal_parameter [73276,73295]"
    },
    {
      "src": "local_variable_declaration [57663,57673]",
      "dest": "local_variable_declaration [54774,54784]"
    },
    {
      "src": "formal_parameter [39357,39367]",
      "dest": "formal_parameter [39357,39367]"
    },
    {
      "src": "formal_parameter [30716,30728]",
      "dest": "formal_parameter [30716,30728]"
    },
    {
      "src": "null_literal: null [211211,211215]",
      "dest": "null_literal: null [212705,212709]"
    },
    {
      "src": "formal_parameter [78396,78403]",
      "dest": "formal_parameter [79890,79897]"
    },
    {
      "src": "binary_expression [18841,18920]",
      "dest": "binary_expression [18841,18920]"
    },
    {
      "src": "assignment_expression [168330,168337]",
      "dest": "assignment_expression [169824,169831]"
    },
    {
      "src": "dimensions_expr [119280,119293]",
      "dest": "dimensions_expr [120774,120787]"
    },
    {
      "src": "argument_list [144585,144590]",
      "dest": "argument_list [146079,146084]"
    },
    {
      "src": "parenthesized_expression [110883,110911]",
      "dest": "parenthesized_expression [112377,112405]"
    },
    {
      "src": "argument_list [26395,26462]",
      "dest": "argument_list [26395,26462]"
    },
    {
      "src": "return_statement [76244,76277]",
      "dest": "return_statement [77738,77771]"
    },
    {
      "src": "binary_expression [36604,36613]",
      "dest": "binary_expression [36604,36613]"
    },
    {
      "src": "identifier: maxWidth [219943,219951]",
      "dest": "identifier: maxWidth [221437,221445]"
    },
    {
      "src": "identifier: pads [184261,184265]",
      "dest": "identifier: pads [185755,185759]"
    },
    {
      "src": "argument_list [222055,222057]",
      "dest": "argument_list [223549,223551]"
    },
    {
      "src": "increment_operator: ++ [117223,117225]",
      "dest": "increment_operator: ++ [118717,118719]"
    },
    {
      "src": "return_statement [212979,213017]",
      "dest": "return_statement [214473,214511]"
    },
    {
      "src": "comparison_operator: == [188900,188902]",
      "dest": "comparison_operator: == [190394,190396]"
    },
    {
      "src": "method_declaration [242339,242449]",
      "dest": "method_declaration [243833,243943]"
    },
    {
      "src": "null_literal: null [203127,203131]",
      "dest": "null_literal: null [204621,204625]"
    },
    {
      "src": "identifier: str [20668,20671]",
      "dest": "identifier: str [20668,20671]"
    },
    {
      "src": "comparison_operator: < [202086,202087]",
      "dest": "comparison_operator: < [203580,203581]"
    },
    {
      "src": "method_declaration [174312,175750]",
      "dest": "method_declaration [175806,177244]"
    },
    {
      "src": "decimal_integer_literal: 1 [174873,174874]",
      "dest": "decimal_integer_literal: 1 [176367,176368]"
    },
    {
      "src": "local_variable_declaration [174784,174824]",
      "dest": "local_variable_declaration [176278,176318]"
    },
    {
      "src": "block_comment:     \n     * <p>Case in-sensitive find of the last index within a String.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * An empty (\"\") search String always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfIgnoreCase(null, *)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(*, null)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\")  = 7\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\")  = 5\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\") = 4\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.5\n     */ [46727,47711]",
      "dest": "block_comment:     \n     * <p>Case in-sensitive find of the last index within a String.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * An empty (\"\") search String always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfIgnoreCase(null, *)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(*, null)          = -1\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"A\")  = 7\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"B\")  = 5\n     * StringUtils.lastIndexOfIgnoreCase(\"aabaabaa\", \"AB\") = 4\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.5\n     */ [46727,47711]"
    },
    {
      "src": "comparison_operator: < [54715,54716]",
      "dest": "comparison_operator: < [54787,54788]"
    },
    {
      "src": "block [199806,199839]",
      "dest": "block [201300,201333]"
    },
    {
      "src": "return_statement [199820,199829]",
      "dest": "return_statement [201314,201323]"
    },
    {
      "src": "identifier: len [117811,117814]",
      "dest": "identifier: len [119305,119308]"
    },
    {
      "src": "line_comment: // minimum of cell to the left+1, to the top+1, diagonally left and up +cost [236148,236224]",
      "dest": "line_comment: // minimum of cell to the left+1, to the top+1, diagonally left and up +cost [237642,237718]"
    },
    {
      "src": "identifier: cs [206933,206935]",
      "dest": "identifier: cs [208427,208429]"
    },
    {
      "src": "method_invocation [46678,46714]",
      "dest": "method_invocation [46678,46714]"
    },
    {
      "src": "array_access [159483,159496]",
      "dest": "array_access [160977,160990]"
    },
    {
      "src": "type: int [235593,235596]",
      "dest": "type: int [237087,237090]"
    },
    {
      "src": "identifier: str [30752,30755]",
      "dest": "identifier: str [30752,30755]"
    },
    {
      "src": "type: RuntimeException [25409,25425]",
      "dest": "type: RuntimeException [25409,25425]"
    },
    {
      "src": "if_statement [117834,118318]",
      "dest": "if_statement [119328,119812]"
    },
    {
      "src": "method_invocation [39852,39912]",
      "dest": "method_invocation [39852,39912]"
    },
    {
      "src": "field_access [158270,158292]",
      "dest": "field_access [159764,159786]"
    },
    {
      "src": "method_invocation [160898,160911]",
      "dest": "method_invocation [162392,162405]"
    },
    {
      "src": "identifier: ite [26158,26161]",
      "dest": "identifier: ite [26158,26161]"
    },
    {
      "src": "identifier: str [62445,62448]",
      "dest": "identifier: str [63184,63187]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */ [56287,57313]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains any character in the given\n     * set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> or zero length search array will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsAny(null, *)                = false\n     * StringUtils.containsAny(\"\", *)                  = false\n     * StringUtils.containsAny(*, null)                = false\n     * StringUtils.containsAny(*, [])                  = false\n     * StringUtils.containsAny(\"zzabyycdxx\",['z','a']) = true\n     * StringUtils.containsAny(\"zzabyycdxx\",['b','y']) = true\n     * StringUtils.containsAny(\"aba\", ['z'])           = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found,\n     * <code>false</code> if no match or null input\n     * @since 2.4\n     */ [56633,57659]"
    },
    {
      "src": "method_invocation [215698,215723]",
      "dest": "method_invocation [217192,217217]"
    },
    {
      "src": "expression_statement [227856,227915]",
      "dest": "expression_statement [229350,229409]"
    },
    {
      "src": "formal_parameter [206835,206850]",
      "dest": "formal_parameter [208329,208344]"
    },
    {
      "src": "variable_declarator [175258,175290]",
      "dest": "variable_declarator [176752,176784]"
    },
    {
      "src": "identifier: end [150545,150548]",
      "dest": "identifier: end [152039,152042]"
    },
    {
      "src": "return_statement [201067,201080]",
      "dest": "return_statement [202561,202574]"
    },
    {
      "src": "identifier: endsWith [141744,141752]",
      "dest": "identifier: endsWith [143238,143246]"
    },
    {
      "src": "comparison_operator: != [134302,134304]",
      "dest": "comparison_operator: != [135796,135798]"
    },
    {
      "src": "arithmetic_operator: + [168574,168575]",
      "dest": "arithmetic_operator: + [170068,170069]"
    },
    {
      "src": "formal_parameter [194489,194499]",
      "dest": "formal_parameter [195983,195993]"
    },
    {
      "src": "line_comment: // invoke method [24822,24838]",
      "dest": "line_comment: // invoke method [24822,24838]"
    },
    {
      "src": "formal_parameters [138686,138713]",
      "dest": "formal_parameters [140180,140207]"
    },
    {
      "src": "method_invocation [75839,75851]",
      "dest": "method_invocation [77333,77345]"
    },
    {
      "src": "line_comment: // String.concat about twice as fast as StringBuffer.append [5802,5861]",
      "dest": "line_comment: // String.concat about twice as fast as StringBuffer.append [5802,5861]"
    },
    {
      "src": "type: String[] [115427,115435]",
      "dest": "type: String[] [116921,116929]"
    },
    {
      "src": "method_invocation [185510,185522]",
      "dest": "method_invocation [187004,187016]"
    },
    {
      "src": "block [185877,185946]",
      "dest": "block [187371,187440]"
    },
    {
      "src": "decimal_integer_literal: 1 [117693,117694]",
      "dest": "decimal_integer_literal: 1 [119187,119188]"
    },
    {
      "src": "decimal_integer_literal: 1 [173404,173405]",
      "dest": "decimal_integer_literal: 1 [174898,174899]"
    },
    {
      "src": "argument_list [171908,171910]",
      "dest": "argument_list [173402,173404]"
    },
    {
      "src": "type: List<String> [110647,110659]",
      "dest": "type: List<String> [112141,112153]"
    },
    {
      "src": "formal_parameter [157926,157940]",
      "dest": "formal_parameter [159420,159434]"
    },
    {
      "src": "decimal_integer_literal: 0 [231445,231446]",
      "dest": "decimal_integer_literal: 0 [232939,232940]"
    },
    {
      "src": "block [210366,210411]",
      "dest": "block [211860,211905]"
    },
    {
      "src": "unary_expression [159850,159852]",
      "dest": "unary_expression [161344,161346]"
    },
    {
      "src": "formal_parameter [240943,240956]",
      "dest": "formal_parameter [242437,242450]"
    },
    {
      "src": "identifier: lastIndexOf [86463,86474]",
      "dest": "identifier: lastIndexOf [87957,87968]"
    },
    {
      "src": "modifiers [185254,185267]",
      "dest": "modifiers [186748,186761]"
    },
    {
      "src": "identifier: separator [129312,129321]",
      "dest": "identifier: separator [130806,130815]"
    },
    {
      "src": "method_declaration [14677,14870]",
      "dest": "method_declaration [14677,14870]"
    },
    {
      "src": "comparison_operator: < [181941,181942]",
      "dest": "comparison_operator: < [183435,183436]"
    },
    {
      "src": "block [8832,8954]",
      "dest": "block [8832,8954]"
    },
    {
      "src": "logical_operator: || [160522,160524]",
      "dest": "logical_operator: || [162016,162018]"
    },
    {
      "src": "update_expression [150579,150584]",
      "dest": "update_expression [152073,152078]"
    },
    {
      "src": "identifier: str [89136,89139]",
      "dest": "identifier: str [90630,90633]"
    },
    {
      "src": "parenthesized_expression [18471,18516]",
      "dest": "parenthesized_expression [18471,18516]"
    },
    {
      "src": "static: static [125101,125107]",
      "dest": "static: static [126595,126601]"
    },
    {
      "src": "identifier: suffix [244197,244203]",
      "dest": "identifier: suffix [245691,245697]"
    },
    {
      "src": "binary_expression [160105,160120]",
      "dest": "binary_expression [161599,161614]"
    },
    {
      "src": "if_statement [30740,30805]",
      "dest": "if_statement [30740,30805]"
    },
    {
      "src": "object_creation_expression [110667,110690]",
      "dest": "object_creation_expression [112161,112184]"
    },
    {
      "src": "variable_declarator [110738,110751]",
      "dest": "variable_declarator [112232,112245]"
    },
    {
      "src": "type: int [104063,104066]",
      "dest": "type: int [105557,105560]"
    },
    {
      "src": "type_parameter: T extends CharSequence [213831,213853]",
      "dest": "type_parameter: T extends CharSequence [215325,215347]"
    },
    {
      "src": "decimal_integer_literal: 0 [200972,200973]",
      "dest": "decimal_integer_literal: 0 [202466,202467]"
    },
    {
      "src": "comparison_operator: == [66786,66788]",
      "dest": "comparison_operator: == [67905,67907]"
    },
    {
      "src": "identifier: i [166001,166002]",
      "dest": "identifier: i [167495,167496]"
    },
    {
      "src": "block [127935,127989]",
      "dest": "block [129429,129483]"
    },
    {
      "src": "argument_list [83241,83252]",
      "dest": "argument_list [84735,84746]"
    },
    {
      "src": "identifier: indexOf [83234,83241]",
      "dest": "identifier: indexOf [84728,84735]"
    },
    {
      "src": "parenthesized_expression [36698,36715]",
      "dest": "parenthesized_expression [36698,36715]"
    },
    {
      "src": "method_invocation [199776,199788]",
      "dest": "method_invocation [201270,201282]"
    },
    {
      "src": "argument_list [195741,195779]",
      "dest": "argument_list [197235,197273]"
    },
    {
      "src": "comparison_operator: < [205809,205810]",
      "dest": "comparison_operator: < [207303,207304]"
    },
    {
      "src": "local_variable_declaration [182040,182072]",
      "dest": "local_variable_declaration [183534,183566]"
    },
    {
      "src": "modifiers [244037,244051]",
      "dest": "modifiers [245531,245545]"
    },
    {
      "src": "type: String [148241,148247]",
      "dest": "type: String [149735,149741]"
    },
    {
      "src": "decimal_integer_literal: 1 [170241,170242]",
      "dest": "decimal_integer_literal: 1 [171735,171736]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the first index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#indexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>(INDEX_NOT_FOUND) -1</code>.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [29579,30656]",
      "dest": "block_comment:     \n     * <p>Finds the first index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#indexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>(INDEX_NOT_FOUND) -1</code>.\n     * A negative start position is treated as zero.\n     * A start position greater than the string length returns <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(\"\", *, *)            = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", 'b', 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", 'b', -1) = 2\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [29579,30656]"
    },
    {
      "src": "decimal_integer_literal: 1 [170023,170024]",
      "dest": "decimal_integer_literal: 1 [171517,171518]"
    },
    {
      "src": "identifier: size [183035,183039]",
      "dest": "identifier: size [184529,184533]"
    },
    {
      "src": "identifier: str [143456,143459]",
      "dest": "identifier: str [144950,144953]"
    },
    {
      "src": "comparison_operator: == [53039,53041]",
      "dest": "comparison_operator: == [53039,53041]"
    },
    {
      "src": "static: static [29404,29410]",
      "dest": "static: static [29404,29410]"
    },
    {
      "src": "identifier: str [185733,185736]",
      "dest": "identifier: str [187227,187230]"
    },
    {
      "src": "identifier: indexOf [159626,159633]",
      "dest": "identifier: indexOf [161120,161127]"
    },
    {
      "src": "affectation_operator: = [54667,54668]",
      "dest": "affectation_operator: = [54699,54700]"
    },
    {
      "src": "static: static [233710,233716]",
      "dest": "static: static [235204,235210]"
    },
    {
      "src": "type: int [69981,69984]",
      "dest": "type: int [71475,71478]"
    },
    {
      "src": "method_invocation [135444,135480]",
      "dest": "method_invocation [136938,136974]"
    },
    {
      "src": "block [149937,149973]",
      "dest": "block [151431,151467]"
    },
    {
      "src": "decimal_integer_literal: 2 [175334,175335]",
      "dest": "decimal_integer_literal: 2 [176828,176829]"
    },
    {
      "src": "visibility: public [96703,96709]",
      "dest": "visibility: public [98197,98203]"
    },
    {
      "src": "method_invocation [211377,211389]",
      "dest": "method_invocation [212871,212883]"
    },
    {
      "src": "comparison_operator: < [175624,175625]",
      "dest": "comparison_operator: < [177118,177119]"
    },
    {
      "src": "method_invocation [137312,137325]",
      "dest": "method_invocation [138806,138819]"
    },
    {
      "src": "identifier: stripAll [22955,22963]",
      "dest": "identifier: stripAll [22955,22963]"
    },
    {
      "src": "expression_statement [178240,178257]",
      "dest": "expression_statement [179734,179751]"
    },
    {
      "src": "static: static [243439,243445]",
      "dest": "static: static [244933,244939]"
    },
    {
      "src": "method_invocation [132576,132591]",
      "dest": "method_invocation [134070,134085]"
    },
    {
      "src": "formal_parameters [47755,47785]",
      "dest": "formal_parameters [47755,47785]"
    },
    {
      "src": "static: static [42212,42218]",
      "dest": "static: static [42212,42218]"
    },
    {
      "src": "parenthesized_expression [8849,8898]",
      "dest": "parenthesized_expression [8849,8898]"
    },
    {
      "src": "logical_operator: || [159463,159465]",
      "dest": "logical_operator: || [160957,160959]"
    },
    {
      "src": "affectation_operator: = [175617,175618]",
      "dest": "affectation_operator: = [177111,177112]"
    },
    {
      "src": "identifier: split [96726,96731]",
      "dest": "identifier: split [98220,98225]"
    },
    {
      "src": "identifier: cs [63887,63889]",
      "dest": "identifier: cs [64934,64936]"
    },
    {
      "src": "identifier: replaceIndex [159174,159186]",
      "dest": "identifier: replaceIndex [160668,160680]"
    },
    {
      "src": "if_statement [165578,165655]",
      "dest": "if_statement [167072,167149]"
    },
    {
      "src": "affectation_operator: = [173236,173237]",
      "dest": "affectation_operator: = [174730,174731]"
    },
    {
      "src": "block [33545,33592]",
      "dest": "block [33545,33592]"
    },
    {
      "src": "field_access [227390,227407]",
      "dest": "field_access [228884,228901]"
    },
    {
      "src": "affectation_operator: = [198360,198361]",
      "dest": "affectation_operator: = [199854,199855]"
    },
    {
      "src": "argument_list [106302,106322]",
      "dest": "argument_list [107796,107816]"
    },
    {
      "src": "identifier: i [227664,227665]",
      "dest": "identifier: i [229158,229159]"
    },
    {
      "src": "identifier: cs [204285,204287]",
      "dest": "identifier: cs [205779,205781]"
    },
    {
      "src": "identifier: containsOnly [63738,63750]",
      "dest": "identifier: containsOnly [64785,64797]"
    },
    {
      "src": "formal_parameter [130682,130696]",
      "dest": "formal_parameter [132176,132190]"
    },
    {
      "src": "identifier: buf [178157,178160]",
      "dest": "identifier: buf [179651,179654]"
    },
    {
      "src": "assignment_expression [75977,75995]",
      "dest": "assignment_expression [77471,77489]"
    },
    {
      "src": "identifier: EMPTY [174521,174526]",
      "dest": "identifier: EMPTY [176015,176020]"
    },
    {
      "src": "method_invocation [91469,91504]",
      "dest": "method_invocation [92963,92998]"
    },
    {
      "src": "type: int [235653,235656]",
      "dest": "type: int [237147,237150]"
    },
    {
      "src": "modifiers [177917,177931]",
      "dest": "modifiers [179411,179425]"
    },
    {
      "src": "expression_statement [105931,105966]",
      "dest": "expression_statement [107425,107460]"
    },
    {
      "src": "method_declaration [172937,173457]",
      "dest": "method_declaration [174431,174951]"
    },
    {
      "src": "?: ? [10691,10692]",
      "dest": "?: ? [10691,10692]"
    },
    {
      "src": "argument_list [233862,233890]",
      "dest": "argument_list [235356,235384]"
    },
    {
      "src": "binary_expression [159514,159540]",
      "dest": "binary_expression [161008,161034]"
    },
    {
      "src": "block [184162,184237]",
      "dest": "block [185656,185731]"
    },
    {
      "src": "field_access [170306,170318]",
      "dest": "field_access [171800,171812]"
    },
    {
      "src": "if_statement [56032,56120]",
      "dest": "if_statement [56378,56466]"
    },
    {
      "src": "parenthesized_expression [23907,23922]",
      "dest": "parenthesized_expression [23907,23922]"
    },
    {
      "src": "if_statement [8846,8944]",
      "dest": "if_statement [8846,8944]"
    },
    {
      "src": "affectation_operator: = [91027,91028]",
      "dest": "affectation_operator: = [92521,92522]"
    },
    {
      "src": "parenthesized_expression [158720,158755]",
      "dest": "parenthesized_expression [160214,160249]"
    },
    {
      "src": "identifier: strLen [195529,195535]",
      "dest": "identifier: strLen [197023,197029]"
    },
    {
      "src": "identifier: replacementList [158624,158639]",
      "dest": "identifier: replacementList [160118,160133]"
    },
    {
      "src": "return_statement [193771,193796]",
      "dest": "return_statement [195265,195290]"
    },
    {
      "src": "identifier: separatorChars [113336,113350]",
      "dest": "identifier: separatorChars [114830,114844]"
    },
    {
      "src": "line_comment: // endsWith [241347,241358]",
      "dest": "line_comment: // endsWith [242841,242852]"
    },
    {
      "src": "if_statement [185782,186222]",
      "dest": "if_statement [187276,187716]"
    },
    {
      "src": "formal_parameter [96732,96742]",
      "dest": "formal_parameter [98226,98236]"
    },
    {
      "src": "formal_parameter [244096,244114]",
      "dest": "formal_parameter [245590,245608]"
    },
    {
      "src": "identifier: remove [145470,145476]",
      "dest": "identifier: remove [146964,146970]"
    },
    {
      "src": "logical_operator: || [171765,171767]",
      "dest": "logical_operator: || [173259,173261]"
    },
    {
      "src": "assignment_expression [186112,186145]",
      "dest": "assignment_expression [187606,187639]"
    },
    {
      "src": "import_declaration [868,894]",
      "dest": "import_declaration [868,894]"
    },
    {
      "src": "return_statement [54578,54601]",
      "dest": "return_statement [54578,54601]"
    },
    {
      "src": "block [134390,134611]",
      "dest": "block [135884,136105]"
    },
    {
      "src": "identifier: searchStr [39430,39439]",
      "dest": "identifier: searchStr [39430,39439]"
    },
    {
      "src": "argument_list [20370,20379]",
      "dest": "argument_list [20370,20379]"
    },
    {
      "src": "local_variable_declaration [178194,178204]",
      "dest": "local_variable_declaration [179688,179698]"
    },
    {
      "src": "argument_list [25058,25095]",
      "dest": "argument_list [25058,25095]"
    },
    {
      "src": "for_statement [241096,241313]",
      "dest": "for_statement [242590,242807]"
    },
    {
      "src": "identifier: strs [231115,231119]",
      "dest": "identifier: strs [232609,232613]"
    },
    {
      "src": "binary_expression [227168,227198]",
      "dest": "binary_expression [228662,228692]"
    },
    {
      "src": "method_invocation [39585,39597]",
      "dest": "method_invocation [39585,39597]"
    },
    {
      "src": "comparison_operator: == [49411,49413]",
      "dest": "comparison_operator: == [49411,49413]"
    },
    {
      "src": "expression_statement [75977,75996]",
      "dest": "expression_statement [77471,77490]"
    },
    {
      "src": "parenthesized_expression [20281,20301]",
      "dest": "parenthesized_expression [20281,20301]"
    },
    {
      "src": "identifier: PAD_LIMIT [185693,185702]",
      "dest": "identifier: PAD_LIMIT [187187,187196]"
    },
    {
      "src": "decimal_integer_literal: 0 [175342,175343]",
      "dest": "decimal_integer_literal: 0 [176836,176837]"
    },
    {
      "src": "identifier: str [104475,104478]",
      "dest": "identifier: str [105969,105972]"
    },
    {
      "src": "identifier: reverseDelimited [215453,215469]",
      "dest": "identifier: reverseDelimited [216947,216963]"
    },
    {
      "src": "binary_expression [31861,31872]",
      "dest": "binary_expression [31861,31872]"
    },
    {
      "src": "type: String [98066,98072]",
      "dest": "type: String [99560,99566]"
    },
    {
      "src": "method_invocation [165850,165862]",
      "dest": "method_invocation [167344,167356]"
    },
    {
      "src": "identifier: charAt [195710,195716]",
      "dest": "identifier: charAt [197204,197210]"
    },
    {
      "src": "block [33497,33647]",
      "dest": "block [33497,33647]"
    },
    {
      "src": "identifier: i [159368,159369]",
      "dest": "identifier: i [160862,160863]"
    },
    {
      "src": "block [123457,124128]",
      "dest": "block [124951,125622]"
    },
    {
      "src": "parenthesized_expression [141739,141761]",
      "dest": "parenthesized_expression [143233,143255]"
    },
    {
      "src": "binary_expression [80097,80106]",
      "dest": "binary_expression [81591,81600]"
    },
    {
      "src": "return_statement [168050,168062]",
      "dest": "return_statement [169544,169556]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [30779,30794]",
      "dest": "identifier: INDEX_NOT_FOUND [30779,30794]"
    },
    {
      "src": "modifiers [31791,31804]",
      "dest": "modifiers [31791,31804]"
    },
    {
      "src": "identifier: iterator [134507,134515]",
      "dest": "identifier: iterator [136001,136009]"
    },
    {
      "src": "binary_expression [89488,89509]",
      "dest": "binary_expression [90982,91003]"
    },
    {
      "src": "block [123154,123215]",
      "dest": "block [124648,124709]"
    },
    {
      "src": "type: int [174546,174549]",
      "dest": "type: int [176040,176043]"
    },
    {
      "src": "type: int [183904,183907]",
      "dest": "type: int [185398,185401]"
    },
    {
      "src": "if_statement [170003,170202]",
      "dest": "if_statement [171497,171696]"
    },
    {
      "src": "return_statement [244281,244294]",
      "dest": "return_statement [245775,245788]"
    },
    {
      "src": ":: : [28537,28538]",
      "dest": ":: : [28537,28538]"
    },
    {
      "src": "type: String [71770,71776]",
      "dest": "type: String [73264,73270]"
    },
    {
      "src": "type: int [198378,198381]",
      "dest": "type: int [199872,199875]"
    },
    {
      "src": "formal_parameters [242369,242396]",
      "dest": "formal_parameters [243863,243890]"
    },
    {
      "src": "affectation_operator: = [75734,75735]",
      "dest": "affectation_operator: = [77228,77229]"
    },
    {
      "src": "return_statement [208343,208355]",
      "dest": "return_statement [209837,209849]"
    },
    {
      "src": "type: String [140266,140272]",
      "dest": "type: String [141760,141766]"
    },
    {
      "src": "parenthesized_expression [117885,117913]",
      "dest": "parenthesized_expression [119379,119407]"
    },
    {
      "src": "identifier: append [134449,134455]",
      "dest": "identifier: append [135943,135949]"
    },
    {
      "src": "line_comment: // Performance tuned for 2.0 (JDK1.4) [110422,110459]",
      "dest": "line_comment: // Performance tuned for 2.0 (JDK1.4) [111916,111953]"
    },
    {
      "src": "identifier: arrayPos [228667,228675]",
      "dest": "identifier: arrayPos [230161,230169]"
    },
    {
      "src": "expression_statement [72160,72190]",
      "dest": "expression_statement [73654,73684]"
    },
    {
      "src": "parenthesized_expression [150248,150277]",
      "dest": "parenthesized_expression [151742,151771]"
    },
    {
      "src": "argument_list [58107,58114]",
      "dest": "argument_list [55140,55147]"
    },
    {
      "src": "identifier: end [168386,168389]",
      "dest": "identifier: end [169880,169883]"
    },
    {
      "src": "identifier: cs [202047,202049]",
      "dest": "identifier: cs [203541,203543]"
    },
    {
      "src": "type: String [171695,171701]",
      "dest": "type: String [173189,173195]"
    },
    {
      "src": "identifier: cs [208229,208231]",
      "dest": "identifier: cs [209723,209725]"
    },
    {
      "src": "modifiers [212118,212131]",
      "dest": "modifiers [213612,213625]"
    },
    {
      "src": "identifier: splitWorker [107768,107779]",
      "dest": "identifier: splitWorker [109262,109273]"
    },
    {
      "src": "visibility: public [130656,130662]",
      "dest": "visibility: public [132150,132156]"
    },
    {
      "src": "formal_parameter [203090,203105]",
      "dest": "formal_parameter [204584,204599]"
    },
    {
      "src": "arithmetic_operator: - [228926,228927]",
      "dest": "arithmetic_operator: - [230420,230421]"
    },
    {
      "src": "decimal_integer_literal: 0 [175189,175190]",
      "dest": "decimal_integer_literal: 0 [176683,176684]"
    },
    {
      "src": "static: static [179910,179916]",
      "dest": "static: static [181404,181410]"
    },
    {
      "src": "block [105073,105600]",
      "dest": "block [106567,107094]"
    },
    {
      "src": "parenthesized_expression [161007,161024]",
      "dest": "parenthesized_expression [162501,162518]"
    },
    {
      "src": "increment_operator: ++ [111084,111086]",
      "dest": "increment_operator: ++ [112578,112580]"
    },
    {
      "src": "identifier: remove [145748,145754]",
      "dest": "identifier: remove [147242,147248]"
    },
    {
      "src": "array_access [186125,186145]",
      "dest": "array_access [187619,187639]"
    },
    {
      "src": "block [170320,170431]",
      "dest": "block [171814,171925]"
    },
    {
      "src": "local_variable_declaration [159142,159161]",
      "dest": "local_variable_declaration [160636,160655]"
    },
    {
      "src": "parenthesized_expression [39851,39913]",
      "dest": "parenthesized_expression [39851,39913]"
    },
    {
      "src": "block [36093,36744]",
      "dest": "block [36093,36744]"
    },
    {
      "src": "affectation_operator: = [110995,110996]",
      "dest": "affectation_operator: = [112489,112490]"
    },
    {
      "src": "identifier: pos [83266,83269]",
      "dest": "identifier: pos [84760,84763]"
    },
    {
      "src": "type: String [165515,165521]",
      "dest": "type: String [167009,167015]"
    },
    {
      "src": "decimal_integer_literal: 0 [199860,199861]",
      "dest": "decimal_integer_literal: 0 [201354,201355]"
    },
    {
      "src": "string_fragment: SecurityException occurred during 1.6 backcompat code [26252,26305]",
      "dest": "string_fragment: SecurityException occurred during 1.6 backcompat code [26252,26305]"
    },
    {
      "src": "identifier: length [170011,170017]",
      "dest": "identifier: length [171505,171511]"
    },
    {
      "src": "null_literal: null [239863,239867]",
      "dest": "null_literal: null [241357,241361]"
    },
    {
      "src": "block [105862,105992]",
      "dest": "block [107356,107486]"
    },
    {
      "src": "identifier: length [225343,225349]",
      "dest": "identifier: length [226837,226843]"
    },
    {
      "src": "binary_expression [228913,228928]",
      "dest": "binary_expression [230407,230422]"
    },
    {
      "src": "identifier: substrings [104599,104609]",
      "dest": "identifier: substrings [106093,106103]"
    },
    {
      "src": "block [219412,219448]",
      "dest": "block [220906,220942]"
    },
    {
      "src": "comparison_operator: < [23189,23190]",
      "dest": "comparison_operator: < [23189,23190]"
    },
    {
      "src": "type: int [116348,116351]",
      "dest": "type: int [117842,117845]"
    },
    {
      "src": "assignment_expression [118201,118214]",
      "dest": "assignment_expression [119695,119708]"
    },
    {
      "src": "argument_list [19001,19008]",
      "dest": "argument_list [19001,19008]"
    },
    {
      "src": "identifier: textIndex [159146,159155]",
      "dest": "identifier: textIndex [160640,160649]"
    },
    {
      "src": "method_declaration [133746,134648]",
      "dest": "method_declaration [135240,136142]"
    },
    {
      "src": "argument_list [221954,221959]",
      "dest": "argument_list [223448,223453]"
    },
    {
      "src": "identifier: CR [170097,170099]",
      "dest": "identifier: CR [171591,171593]"
    },
    {
      "src": "static: static [199714,199720]",
      "dest": "static: static [201208,201214]"
    },
    {
      "src": "comparison_operator: == [185338,185340]",
      "dest": "comparison_operator: == [186832,186834]"
    },
    {
      "src": "decimal_integer_literal: 1 [162014,162015]",
      "dest": "decimal_integer_literal: 1 [163508,163509]"
    },
    {
      "src": "binary_expression [110830,110860]",
      "dest": "binary_expression [112324,112354]"
    },
    {
      "src": "method_invocation [181798,181835]",
      "dest": "method_invocation [183292,183329]"
    },
    {
      "src": "binary_expression [170298,170318]",
      "dest": "binary_expression [171792,171812]"
    },
    {
      "src": "identifier: charAt [174753,174759]",
      "dest": "identifier: charAt [176247,176253]"
    },
    {
      "src": "type: char[] [57369,57375]",
      "dest": "type: char[] [54482,54488]"
    },
    {
      "src": "expression_statement [76160,76170]",
      "dest": "expression_statement [77654,77664]"
    },
    {
      "src": "identifier: maxWidth [219375,219383]",
      "dest": "identifier: maxWidth [220869,220877]"
    },
    {
      "src": "identifier: str [62524,62527]",
      "dest": "identifier: str [63263,63266]"
    },
    {
      "src": "identifier: replacementList [157854,157869]",
      "dest": "identifier: replacementList [159348,159363]"
    },
    {
      "src": "type: int [62432,62435]",
      "dest": "type: int [63171,63174]"
    },
    {
      "src": "affectation_operator: = [161286,161287]",
      "dest": "affectation_operator: = [162780,162781]"
    },
    {
      "src": "assignment_expression [168116,168131]",
      "dest": "assignment_expression [169610,169625]"
    },
    {
      "src": "method_invocation [200938,200949]",
      "dest": "method_invocation [202432,202443]"
    },
    {
      "src": "type: String [243473,243479]",
      "dest": "type: String [244967,244973]"
    },
    {
      "src": "return_statement [212175,212208]",
      "dest": "return_statement [213669,213702]"
    },
    {
      "src": "logical_operator: || [222058,222060]",
      "dest": "logical_operator: || [223552,223554]"
    },
    {
      "src": "identifier: str [219665,219668]",
      "dest": "identifier: str [221159,221162]"
    },
    {
      "src": "identifier: padStr [185823,185829]",
      "dest": "identifier: padStr [187317,187323]"
    },
    {
      "src": "expression_statement [111282,111316]",
      "dest": "expression_statement [112776,112810]"
    },
    {
      "src": "if_statement [36213,36302]",
      "dest": "if_statement [36213,36302]"
    },
    {
      "src": "identifier: prefix [239198,239204]",
      "dest": "identifier: prefix [240692,240698]"
    },
    {
      "src": "variable_declarator [25011,25095]",
      "dest": "variable_declarator [25011,25095]"
    },
    {
      "src": "argument_list [214647,214652]",
      "dest": "argument_list [216141,216146]"
    },
    {
      "src": "type: String [144523,144529]",
      "dest": "type: String [146017,146023]"
    },
    {
      "src": "type: boolean [116357,116364]",
      "dest": "type: boolean [117851,117858]"
    },
    {
      "src": "affectation_operator: = [62522,62523]",
      "dest": "affectation_operator: = [63261,63262]"
    },
    {
      "src": "identifier: str [75736,75739]",
      "dest": "identifier: str [77230,77233]"
    },
    {
      "src": "identifier: suffix [242389,242395]",
      "dest": "identifier: suffix [243883,243889]"
    },
    {
      "src": "binary_expression [18629,18691]",
      "dest": "binary_expression [18629,18691]"
    },
    {
      "src": "identifier: i [201035,201036]",
      "dest": "identifier: i [202529,202530]"
    },
    {
      "src": "identifier: repeat [162552,162558]",
      "dest": "identifier: repeat [164046,164052]"
    },
    {
      "src": "variable_declarator [66722,66727]",
      "dest": "variable_declarator [67841,67846]"
    },
    {
      "src": "line_comment: // IndexOfAnyBut chars [59677,59699]",
      "dest": "line_comment: // IndexOfAnyBut chars [60064,60086]"
    },
    {
      "src": "variable_declarator [241105,241110]",
      "dest": "variable_declarator [242599,242604]"
    },
    {
      "src": "argument_list [225269,225272]",
      "dest": "argument_list [226763,226766]"
    },
    {
      "src": "block [159879,159979]",
      "dest": "block [161373,161473]"
    },
    {
      "src": "variable_declarator [24862,24927]",
      "dest": "variable_declarator [24862,24927]"
    },
    {
      "src": "false: false [117313,117318]",
      "dest": "false: false [118807,118812]"
    },
    {
      "src": "identifier: text [158144,158148]",
      "dest": "identifier: text [159638,159642]"
    },
    {
      "src": "return_statement [174514,174527]",
      "dest": "return_statement [176008,176021]"
    },
    {
      "src": "comparison_operator: != [128015,128017]",
      "dest": "comparison_operator: != [129509,129511]"
    },
    {
      "src": "return_statement [220271,220337]",
      "dest": "return_statement [221765,221831]"
    },
    {
      "src": "block [77270,77505]",
      "dest": "block [78764,78999]"
    },
    {
      "src": "expression_statement [117598,117611]",
      "dest": "expression_statement [119092,119105]"
    },
    {
      "src": "binary_expression [227183,227198]",
      "dest": "binary_expression [228677,228692]"
    },
    {
      "src": "parenthesized_expression [208210,208252]",
      "dest": "parenthesized_expression [209704,209746]"
    },
    {
      "src": "formal_parameter [90758,90769]",
      "dest": "formal_parameter [92252,92263]"
    },
    {
      "src": "type: Iterable<?> [135322,135333]",
      "dest": "type: Iterable<?> [136816,136827]"
    },
    {
      "src": "comparison_operator: == [161626,161628]",
      "dest": "comparison_operator: == [163120,163122]"
    },
    {
      "src": "argument_list [175574,175588]",
      "dest": "argument_list [177068,177082]"
    },
    {
      "src": "null_literal: null [183976,183980]",
      "dest": "null_literal: null [185470,185474]"
    },
    {
      "src": "identifier: str [107780,107783]",
      "dest": "identifier: str [109274,109277]"
    },
    {
      "src": "identifier: substring [140436,140445]",
      "dest": "identifier: substring [141930,141939]"
    },
    {
      "src": "identifier: charAt [175182,175188]",
      "dest": "identifier: charAt [176676,176682]"
    },
    {
      "src": "identifier: count [137301,137306]",
      "dest": "identifier: count [138795,138800]"
    },
    {
      "src": "parenthesized_expression [193712,193725]",
      "dest": "parenthesized_expression [195206,195219]"
    },
    {
      "src": "block [190735,190770]",
      "dest": "block [192229,192264]"
    },
    {
      "src": "identifier: str [106303,106306]",
      "dest": "identifier: str [107797,107800]"
    },
    {
      "src": "block [78432,78468]",
      "dest": "block [79926,79962]"
    },
    {
      "src": "decimal_integer_literal: 0 [127651,127652]",
      "dest": "decimal_integer_literal: 0 [129145,129146]"
    },
    {
      "src": "identifier: str [169952,169955]",
      "dest": "identifier: str [171446,171449]"
    },
    {
      "src": "decimal_integer_literal: 0 [160451,160452]",
      "dest": "decimal_integer_literal: 0 [161945,161946]"
    },
    {
      "src": "identifier: str [163665,163668]",
      "dest": "identifier: str [165159,165162]"
    },
    {
      "src": "identifier: ignoreCase [244394,244404]",
      "dest": "identifier: ignoreCase [245888,245898]"
    },
    {
      "src": "type: int [42219,42222]",
      "dest": "type: int [42219,42222]"
    },
    {
      "src": "block [117860,118318]",
      "dest": "block [119354,119812]"
    },
    {
      "src": "binary_expression [231131,231147]",
      "dest": "binary_expression [232625,232641]"
    },
    {
      "src": "formal_parameter [126097,126111]",
      "dest": "formal_parameter [127591,127605]"
    },
    {
      "src": "if_statement [190720,190770]",
      "dest": "if_statement [192214,192264]"
    },
    {
      "src": "identifier: str [104175,104178]",
      "dest": "identifier: str [105669,105672]"
    },
    {
      "src": "identifier: end [20622,20625]",
      "dest": "identifier: end [20622,20625]"
    },
    {
      "src": "identifier: length [158286,158292]",
      "dest": "identifier: length [159780,159786]"
    },
    {
      "src": ":: : [12691,12692]",
      "dest": ":: : [12691,12692]"
    },
    {
      "src": "identifier: isEmpty [240996,241003]",
      "dest": "identifier: isEmpty [242490,242497]"
    },
    {
      "src": "identifier: i [227691,227692]",
      "dest": "identifier: i [229185,229186]"
    },
    {
      "src": "identifier: reverse [214537,214544]",
      "dest": "identifier: reverse [216031,216038]"
    },
    {
      "src": "identifier: separator [171913,171922]",
      "dest": "identifier: separator [173407,173416]"
    },
    {
      "src": "if_statement [241209,241303]",
      "dest": "if_statement [242703,242797]"
    },
    {
      "src": "formal_parameter [39369,39385]",
      "dest": "formal_parameter [39369,39385]"
    },
    {
      "src": "modifiers [129159,129172]",
      "dest": "modifiers [130653,130666]"
    },
    {
      "src": "assignment_expression [225174,225179]",
      "dest": "assignment_expression [226668,226673]"
    },
    {
      "src": "type: char [163616,163620]",
      "dest": "type: char [165110,165114]"
    },
    {
      "src": "parenthesized_expression [199899,199928]",
      "dest": "parenthesized_expression [201393,201422]"
    },
    {
      "src": "parenthesized_expression [134539,134552]",
      "dest": "parenthesized_expression [136033,136046]"
    },
    {
      "src": "null_literal: null [23917,23921]",
      "dest": "null_literal: null [23917,23921]"
    },
    {
      "src": "identifier: i [39876,39877]",
      "dest": "identifier: i [39876,39877]"
    },
    {
      "src": "line_comment: // String.charAt(n) is best bet overall [5736,5775]",
      "dest": "line_comment: // String.charAt(n) is best bet overall [5736,5775]"
    },
    {
      "src": "static: static [75546,75552]",
      "dest": "static: static [77040,77046]"
    },
    {
      "src": "assignment_expression [70317,70326]",
      "dest": "assignment_expression [71811,71820]"
    },
    {
      "src": "comparison_operator: == [173276,173278]",
      "dest": "comparison_operator: == [174770,174772]"
    },
    {
      "src": "block [211191,211483]",
      "dest": "block [212685,212977]"
    },
    {
      "src": "argument_list [143403,143416]",
      "dest": "argument_list [144897,144910]"
    },
    {
      "src": "binary_expression [158182,158200]",
      "dest": "binary_expression [159676,159694]"
    },
    {
      "src": "argument_list [29554,29566]",
      "dest": "argument_list [29554,29566]"
    },
    {
      "src": "identifier: prefix [240028,240034]",
      "dest": "identifier: prefix [241522,241528]"
    },
    {
      "src": "update_expression [170397,170406]",
      "dest": "update_expression [171891,171900]"
    },
    {
      "src": "if_statement [49497,49618]",
      "dest": "if_statement [49497,49618]"
    },
    {
      "src": "formal_parameter [79763,79770]",
      "dest": "formal_parameter [81257,81264]"
    },
    {
      "src": "identifier: separatorChars [118515,118529]",
      "dest": "identifier: separatorChars [120009,120023]"
    },
    {
      "src": "type: int [227639,227642]",
      "dest": "type: int [229133,229136]"
    },
    {
      "src": "return_statement [141776,141832]",
      "dest": "return_statement [143270,143326]"
    },
    {
      "src": "identifier: i [175423,175424]",
      "dest": "identifier: i [176917,176918]"
    },
    {
      "src": "identifier: pads [189122,189126]",
      "dest": "identifier: pads [190616,190620]"
    },
    {
      "src": "identifier: size [181616,181620]",
      "dest": "identifier: size [183110,183114]"
    },
    {
      "src": "identifier: str [89366,89369]",
      "dest": "identifier: str [90860,90863]"
    },
    {
      "src": "identifier: EMPTY [223934,223939]",
      "dest": "identifier: EMPTY [225428,225433]"
    },
    {
      "src": "identifier: str [10657,10660]",
      "dest": "identifier: str [10657,10660]"
    },
    {
      "src": "line_comment: // remember end is negative [75756,75783]",
      "dest": "line_comment: // remember end is negative [77250,77277]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [86699,86772]",
      "dest": "line_comment: //----------------------------------------------------------------------- [88193,88266]"
    },
    {
      "src": "identifier: charAt [137267,137273]",
      "dest": "identifier: charAt [138761,138767]"
    },
    {
      "src": "identifier: searchLength [57632,57644]",
      "dest": "identifier: searchLength [57972,57984]"
    },
    {
      "src": "identifier: length [18501,18507]",
      "dest": "identifier: length [18501,18507]"
    },
    {
      "src": "identifier: regionMatches [39856,39869]",
      "dest": "identifier: regionMatches [39856,39869]"
    },
    {
      "src": "true: true [159790,159794]",
      "dest": "true: true [161284,161288]"
    },
    {
      "src": "local_variable_declaration [66636,66646]",
      "dest": "local_variable_declaration [67755,67765]"
    },
    {
      "src": "identifier: substring [141787,141796]",
      "dest": "identifier: substring [143281,143290]"
    },
    {
      "src": "binary_expression [208210,208277]",
      "dest": "binary_expression [209704,209771]"
    },
    {
      "src": "formal_parameter [179945,179953]",
      "dest": "formal_parameter [181439,181447]"
    },
    {
      "src": "type: boolean [200824,200831]",
      "dest": "type: boolean [202318,202325]"
    },
    {
      "src": "method_invocation [206933,206944]",
      "dest": "method_invocation [208427,208438]"
    },
    {
      "src": "true: true [227737,227741]",
      "dest": "true: true [229231,229235]"
    },
    {
      "src": "identifier: str [185334,185337]",
      "dest": "identifier: str [186828,186831]"
    },
    {
      "src": "local_variable_declaration [174934,174974]",
      "dest": "local_variable_declaration [176428,176468]"
    },
    {
      "src": "identifier: join [125115,125119]",
      "dest": "identifier: join [126609,126613]"
    },
    {
      "src": "parenthesized_expression [133897,133915]",
      "dest": "parenthesized_expression [135391,135409]"
    },
    {
      "src": "affectation_operator: = [39546,39547]",
      "dest": "affectation_operator: = [39546,39547]"
    },
    {
      "src": "block_comment:     \n     * <p>Right pad a String with a specified character.</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *, *)     = null\n     * StringUtils.rightPad(\"\", 3, 'z')     = \"zzz\"\n     * StringUtils.rightPad(\"bat\", 3, 'z')  = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5, 'z')  = \"batzz\"\n     * StringUtils.rightPad(\"bat\", 1, 'z')  = \"bat\"\n     * StringUtils.rightPad(\"bat\", -1, 'z') = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padChar  the character to pad with\n     * @return right padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [179107,179898]",
      "dest": "block_comment:     \n     * <p>Right pad a String with a specified character.</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.rightPad(null, *, *)     = null\n     * StringUtils.rightPad(\"\", 3, 'z')     = \"zzz\"\n     * StringUtils.rightPad(\"bat\", 3, 'z')  = \"bat\"\n     * StringUtils.rightPad(\"bat\", 5, 'z')  = \"batzz\"\n     * StringUtils.rightPad(\"bat\", 1, 'z')  = \"bat\"\n     * StringUtils.rightPad(\"bat\", -1, 'z') = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padChar  the character to pad with\n     * @return right padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [180601,181392]"
    },
    {
      "src": "if_statement [170077,170168]",
      "dest": "if_statement [171571,171662]"
    },
    {
      "src": "visibility: public [120397,120403]",
      "dest": "visibility: public [121891,121897]"
    },
    {
      "src": "identifier: i [118484,118485]",
      "dest": "identifier: i [119978,119979]"
    },
    {
      "src": "block [231592,231725]",
      "dest": "block [233086,233219]"
    },
    {
      "src": "affectation_operator: = [6009,6010]",
      "dest": "affectation_operator: = [6009,6010]"
    },
    {
      "src": "method_declaration [176551,176972]",
      "dest": "method_declaration [178045,178466]"
    },
    {
      "src": "identifier: leftPad [189100,189107]",
      "dest": "identifier: leftPad [190594,190601]"
    },
    {
      "src": "identifier: noMoreMatchesForReplIndex [159409,159434]",
      "dest": "identifier: noMoreMatchesForReplIndex [160903,160928]"
    },
    {
      "src": "if_statement [70284,70341]",
      "dest": "if_statement [71778,71835]"
    },
    {
      "src": "if_statement [84818,84881]",
      "dest": "if_statement [86312,86375]"
    },
    {
      "src": "field_access [170365,170377]",
      "dest": "field_access [171859,171871]"
    },
    {
      "src": "identifier: i [225355,225356]",
      "dest": "identifier: i [226849,226850]"
    },
    {
      "src": "identifier: strLen [189113,189119]",
      "dest": "identifier: strLen [190607,190613]"
    },
    {
      "src": "line_comment: // Count matches [198833,198849]",
      "dest": "line_comment: // Count matches [200327,200343]"
    },
    {
      "src": "static: static [103989,103995]",
      "dest": "static: static [105483,105489]"
    },
    {
      "src": "type: String[] [231086,231094]",
      "dest": "type: String[] [232580,232588]"
    },
    {
      "src": "local_variable_declaration [181532,181561]",
      "dest": "local_variable_declaration [183026,183055]"
    },
    {
      "src": "identifier: ret [70369,70372]",
      "dest": "identifier: ret [71863,71866]"
    },
    {
      "src": "identifier: cs [56044,56046]",
      "dest": "identifier: cs [56390,56392]"
    },
    {
      "src": "return_statement [231433,231448]",
      "dest": "return_statement [232927,232942]"
    },
    {
      "src": "identifier: str [219582,219585]",
      "dest": "identifier: str [221076,221079]"
    },
    {
      "src": "type: String [79731,79737]",
      "dest": "type: String [81225,81231]"
    },
    {
      "src": "null_literal: null [127565,127569]",
      "dest": "null_literal: null [129059,129063]"
    },
    {
      "src": "binary_expression [111235,111265]",
      "dest": "binary_expression [112729,112759]"
    },
    {
      "src": "type: String [36031,36037]",
      "dest": "type: String [36031,36037]"
    },
    {
      "src": "identifier: isAllUpperCase [211159,211173]",
      "dest": "identifier: isAllUpperCase [212653,212667]"
    },
    {
      "src": "identifier: at [223981,223983]",
      "dest": "identifier: at [225475,225477]"
    },
    {
      "src": "binary_expression [228112,228148]",
      "dest": "binary_expression [229606,229642]"
    },
    {
      "src": "parenthesized_expression [53239,53286]",
      "dest": "parenthesized_expression [53239,53286]"
    },
    {
      "src": "affectation_operator: = [57510,57511]",
      "dest": "affectation_operator: = [57850,57851]"
    },
    {
      "src": "block [90785,91676]",
      "dest": "block [92279,93170]"
    },
    {
      "src": "visibility: public [69687,69693]",
      "dest": "visibility: public [71181,71187]"
    },
    {
      "src": "type: NoSuchMethodException [25353,25374]",
      "dest": "type: NoSuchMethodException [25353,25374]"
    },
    {
      "src": "argument_list [210351,210354]",
      "dest": "argument_list [211845,211848]"
    },
    {
      "src": "formal_parameter [110385,110410]",
      "dest": "formal_parameter [111879,111904]"
    },
    {
      "src": "argument_list [103195,103222]",
      "dest": "argument_list [104689,104716]"
    },
    {
      "src": "return_statement [145831,145864]",
      "dest": "return_statement [147325,147358]"
    },
    {
      "src": "parenthesized_expression [208074,208086]",
      "dest": "parenthesized_expression [209568,209580]"
    },
    {
      "src": "line_comment: // handle lists containing some nulls or some empty strings [228208,228267]",
      "dest": "line_comment: // handle lists containing some nulls or some empty strings [229702,229761]"
    },
    {
      "src": "type: String [212917,212923]",
      "dest": "type: String [214411,214417]"
    },
    {
      "src": "break_statement [228869,228875]",
      "dest": "break_statement [230363,230369]"
    },
    {
      "src": "type: String [212950,212956]",
      "dest": "type: String [214444,214450]"
    },
    {
      "src": "decimal_integer_literal: 1 [104814,104815]",
      "dest": "decimal_integer_literal: 1 [106308,106309]"
    },
    {
      "src": "identifier: substring [89478,89487]",
      "dest": "identifier: substring [90972,90981]"
    },
    {
      "src": "binary_expression [80000,80009]",
      "dest": "binary_expression [81494,81503]"
    },
    {
      "src": "identifier: str [86356,86359]",
      "dest": "identifier: str [87850,87853]"
    },
    {
      "src": "method_declaration [21622,21713]",
      "dest": "method_declaration [21622,21713]"
    },
    {
      "src": "method_invocation [166187,166225]",
      "dest": "method_invocation [167681,167719]"
    },
    {
      "src": "parenthesized_expression [36417,36428]",
      "dest": "parenthesized_expression [36417,36428]"
    },
    {
      "src": "visibility: public [141587,141593]",
      "dest": "visibility: public [143081,143087]"
    },
    {
      "src": "formal_parameter [66423,66438]",
      "dest": "formal_parameter [67470,67485]"
    },
    {
      "src": "identifier: uncapitalize [196638,196650]",
      "dest": "identifier: uncapitalize [198132,198144]"
    },
    {
      "src": "local_variable_declaration [69943,69971]",
      "dest": "local_variable_declaration [71437,71465]"
    },
    {
      "src": "return_statement [104456,104510]",
      "dest": "return_statement [105950,106004]"
    },
    {
      "src": "identifier: n [235290,235291]",
      "dest": "identifier: n [236784,236785]"
    },
    {
      "src": "affectation_operator: = [208174,208175]",
      "dest": "affectation_operator: = [209668,209669]"
    },
    {
      "src": "identifier: str [13717,13720]",
      "dest": "identifier: str [13717,13720]"
    },
    {
      "src": "modifiers [238045,238058]",
      "dest": "modifiers [239539,239552]"
    },
    {
      "src": "identifier: length [227187,227193]",
      "dest": "identifier: length [228681,228687]"
    },
    {
      "src": "identifier: padChars [186018,186026]",
      "dest": "identifier: padChars [187512,187520]"
    },
    {
      "src": "formal_parameters [42234,42277]",
      "dest": "formal_parameters [42234,42277]"
    },
    {
      "src": "parenthesized_expression [235260,235268]",
      "dest": "parenthesized_expression [236754,236762]"
    },
    {
      "src": "identifier: buf [166282,166285]",
      "dest": "identifier: buf [167776,167779]"
    },
    {
      "src": "type: int [204378,204381]",
      "dest": "type: int [205872,205875]"
    },
    {
      "src": "type: int [43316,43319]",
      "dest": "type: int [43316,43319]"
    },
    {
      "src": "identifier: strs [231095,231099]",
      "dest": "identifier: strs [232589,232593]"
    },
    {
      "src": "null_literal: null [12678,12682]",
      "dest": "null_literal: null [12678,12682]"
    },
    {
      "src": "identifier: searchStrs [71791,71801]",
      "dest": "identifier: searchStrs [73285,73295]"
    },
    {
      "src": "argument_list [104568,104570]",
      "dest": "argument_list [106062,106064]"
    },
    {
      "src": "argument_list [43488,43499]",
      "dest": "argument_list [43488,43499]"
    },
    {
      "src": "comparison_operator: != [20583,20585]",
      "dest": "comparison_operator: != [20583,20585]"
    },
    {
      "src": "return_statement [110591,110628]",
      "dest": "return_statement [112085,112122]"
    },
    {
      "src": "false: false [204318,204323]",
      "dest": "false: false [205812,205817]"
    },
    {
      "src": "identifier: index [166070,166075]",
      "dest": "identifier: index [167564,167569]"
    },
    {
      "src": "method_declaration [89091,89567]",
      "dest": "method_declaration [90585,91061]"
    },
    {
      "src": "identifier: separator [132330,132339]",
      "dest": "identifier: separator [133824,133833]"
    },
    {
      "src": "parenthesized_expression [49833,49895]",
      "dest": "parenthesized_expression [49833,49895]"
    },
    {
      "src": "identifier: padChar [184267,184274]",
      "dest": "identifier: padChar [185761,185768]"
    },
    {
      "src": "argument_list [132511,132513]",
      "dest": "argument_list [134005,134007]"
    },
    {
      "src": "identifier: i [54763,54764]",
      "dest": "identifier: i [58067,58068]"
    },
    {
      "src": "identifier: cs [200938,200940]",
      "dest": "identifier: cs [202432,202434]"
    },
    {
      "src": "identifier: endLimit [39573,39581]",
      "dest": "identifier: endLimit [39573,39581]"
    },
    {
      "src": "visibility: public [129159,129165]",
      "dest": "visibility: public [130653,130659]"
    },
    {
      "src": "visibility: public [243432,243438]",
      "dest": "visibility: public [244926,244932]"
    },
    {
      "src": "identifier: start [75586,75591]",
      "dest": "identifier: start [77080,77085]"
    },
    {
      "src": "identifier: repeat [176899,176905]",
      "dest": "identifier: repeat [178393,178399]"
    },
    {
      "src": "return_statement [203324,203337]",
      "dest": "return_statement [204818,204831]"
    },
    {
      "src": "logical_operator: || [174602,174604]",
      "dest": "logical_operator: || [176096,176098]"
    },
    {
      "src": "static: static [132284,132290]",
      "dest": "static: static [133778,133784]"
    },
    {
      "src": "identifier: sz [204393,204395]",
      "dest": "identifier: sz [205887,205889]"
    },
    {
      "src": "expression_statement [119034,119052]",
      "dest": "expression_statement [120528,120546]"
    },
    {
      "src": "affectation_operator: = [130867,130868]",
      "dest": "affectation_operator: = [132361,132362]"
    },
    {
      "src": "identifier: pos [80097,80100]",
      "dest": "identifier: pos [81591,81594]"
    },
    {
      "src": "array_access [227957,227963]",
      "dest": "array_access [229451,229457]"
    },
    {
      "src": "true: true [204568,204572]",
      "dest": "true: true [206062,206066]"
    },
    {
      "src": "comparison_operator: == [185677,185679]",
      "dest": "comparison_operator: == [187171,187173]"
    },
    {
      "src": "parenthesized_expression [137044,137058]",
      "dest": "parenthesized_expression [138538,138552]"
    },
    {
      "src": "if_statement [222031,222126]",
      "dest": "if_statement [223525,223620]"
    },
    {
      "src": "binary_expression [204389,204395]",
      "dest": "binary_expression [205883,205889]"
    },
    {
      "src": "package_declaration [805,838]",
      "dest": "package_declaration [805,838]"
    },
    {
      "src": "dimensions_expr [124235,124248]",
      "dest": "dimensions_expr [125729,125742]"
    },
    {
      "src": "block [225024,225071]",
      "dest": "block [226518,226565]"
    },
    {
      "src": "increment_operator: ++ [161499,161501]",
      "dest": "increment_operator: ++ [162993,162995]"
    },
    {
      "src": "return_statement [116686,116723]",
      "dest": "return_statement [118180,118217]"
    },
    {
      "src": "expression_statement [49563,49608]",
      "dest": "expression_statement [49563,49608]"
    },
    {
      "src": "identifier: string [241236,241242]",
      "dest": "identifier: string [242730,242736]"
    },
    {
      "src": "affectation_operator: = [155275,155276]",
      "dest": "affectation_operator: = [156769,156770]"
    },
    {
      "src": "identifier: start [111305,111310]",
      "dest": "identifier: start [112799,112804]"
    },
    {
      "src": "identifier: length [75987,75993]",
      "dest": "identifier: length [77481,77487]"
    },
    {
      "src": "line_comment: // Stripping [12716,12728]",
      "dest": "line_comment: // Stripping [12716,12728]"
    },
    {
      "src": "identifier: searchStrs [71917,71927]",
      "dest": "identifier: searchStrs [73411,73421]"
    },
    {
      "src": "method_declaration [39321,40003]",
      "dest": "method_declaration [39321,40003]"
    },
    {
      "src": "update_expression [117494,117497]",
      "dest": "update_expression [118988,118991]"
    },
    {
      "src": "line_comment: // the bottom loop. [227606,227625]",
      "dest": "line_comment: // the bottom loop. [229100,229119]"
    },
    {
      "src": "return_statement [134620,134642]",
      "dest": "return_statement [136114,136136]"
    },
    {
      "src": "parenthesized_expression [170006,170025]",
      "dest": "parenthesized_expression [171500,171519]"
    },
    {
      "src": "identifier: str [110473,110476]",
      "dest": "identifier: str [111967,111970]"
    },
    {
      "src": "if_statement [227683,228003]",
      "dest": "if_statement [229177,229497]"
    },
    {
      "src": "local_variable_declaration [84772,84809]",
      "dest": "local_variable_declaration [86266,86303]"
    },
    {
      "src": "argument_list [183065,183081]",
      "dest": "argument_list [184559,184575]"
    },
    {
      "src": "string_fragment:   [185437,185438]",
      "dest": "string_fragment:   [186931,186932]"
    },
    {
      "src": "method_invocation [221963,221978]",
      "dest": "method_invocation [223457,223472]"
    },
    {
      "src": "affectation_operator: = [104979,104980]",
      "dest": "affectation_operator: = [106473,106474]"
    },
    {
      "src": "modifiers [231049,231062]",
      "dest": "modifiers [232543,232556]"
    },
    {
      "src": "if_statement [181465,181523]",
      "dest": "if_statement [182959,183017]"
    },
    {
      "src": "block [62324,62677]",
      "dest": "block [63063,63724]"
    },
    {
      "src": "local_variable_declaration [203214,203224]",
      "dest": "local_variable_declaration [204708,204718]"
    },
    {
      "src": "block [26342,26473]",
      "dest": "block [26342,26473]"
    },
    {
      "src": "type: int [198180,198183]",
      "dest": "type: int [199674,199677]"
    },
    {
      "src": "argument_list [20681,20689]",
      "dest": "argument_list [20681,20689]"
    },
    {
      "src": "identifier: strip [13711,13716]",
      "dest": "identifier: strip [13711,13716]"
    },
    {
      "src": "argument_list [222389,222404]",
      "dest": "argument_list [223883,223898]"
    },
    {
      "src": "decimal_integer_literal: 1 [236115,236116]",
      "dest": "decimal_integer_literal: 1 [237609,237610]"
    },
    {
      "src": "type: int [71908,71911]",
      "dest": "type: int [73402,73405]"
    },
    {
      "src": "expression_statement [227721,227742]",
      "dest": "expression_statement [229215,229236]"
    },
    {
      "src": "binary_expression [184011,184030]",
      "dest": "binary_expression [185505,185524]"
    },
    {
      "src": "formal_parameters [49348,49392]",
      "dest": "formal_parameters [49348,49392]"
    },
    {
      "src": "null_literal: null [129269,129273]",
      "dest": "null_literal: null [130763,130767]"
    },
    {
      "src": "type: String [190449,190455]",
      "dest": "type: String [191943,191949]"
    },
    {
      "src": "line_comment: // Equals [26485,26494]",
      "dest": "line_comment: // Equals [26485,26494]"
    },
    {
      "src": "identifier: accentPattern [25120,25133]",
      "dest": "identifier: accentPattern [25120,25133]"
    },
    {
      "src": "visibility: private [116277,116284]",
      "dest": "visibility: private [117771,117778]"
    },
    {
      "src": "type: java.lang.reflect.InvocationTargetException [25999,26042]",
      "dest": "type: java.lang.reflect.InvocationTargetException [25999,26042]"
    },
    {
      "src": "local_variable_declaration [168151,168174]",
      "dest": "local_variable_declaration [169645,169668]"
    },
    {
      "src": "local_variable_declaration [222136,222177]",
      "dest": "local_variable_declaration [223630,223671]"
    },
    {
      "src": "for_statement [235965,236461]",
      "dest": "for_statement [237459,237955]"
    },
    {
      "src": "identifier: tmp [72160,72163]",
      "dest": "identifier: tmp [73654,73657]"
    },
    {
      "src": "identifier: searchStrings [240967,240980]",
      "dest": "identifier: searchStrings [242461,242474]"
    },
    {
      "src": "identifier: iterator [132576,132584]",
      "dest": "identifier: iterator [134070,134078]"
    },
    {
      "src": "method_declaration [110317,111386]",
      "dest": "method_declaration [111811,112880]"
    },
    {
      "src": "binary_expression [206866,206876]",
      "dest": "binary_expression [208360,208370]"
    },
    {
      "src": "expression_statement [159944,159961]",
      "dest": "expression_statement [161438,161455]"
    },
    {
      "src": "affectation_operator: = [25025,25026]",
      "dest": "affectation_operator: = [25025,25026]"
    },
    {
      "src": "type: int [84772,84775]",
      "dest": "type: int [86266,86269]"
    },
    {
      "src": "type: CharSequence [60771,60783]",
      "dest": "type: CharSequence [61158,61170]"
    },
    {
      "src": "method_invocation [184253,184275]",
      "dest": "method_invocation [185747,185769]"
    },
    {
      "src": "identifier: endLimit [39819,39827]",
      "dest": "identifier: endLimit [39819,39827]"
    },
    {
      "src": "decimal_integer_literal: 0 [79958,79959]",
      "dest": "decimal_integer_literal: 0 [81452,81453]"
    },
    {
      "src": "if_statement [223886,223950]",
      "dest": "if_statement [225380,225444]"
    },
    {
      "src": "line_comment: // Substring between [86674,86694]",
      "dest": "line_comment: // Substring between [88168,88188]"
    },
    {
      "src": "affectation_operator: = [90903,90904]",
      "dest": "affectation_operator: = [92397,92398]"
    },
    {
      "src": "modifiers [68007,68020]",
      "dest": "modifiers [69501,69514]"
    },
    {
      "src": "modifiers [107693,107706]",
      "dest": "modifiers [109187,109200]"
    },
    {
      "src": "identifier: cs [196987,196989]",
      "dest": "identifier: cs [198481,198483]"
    },
    {
      "src": "binary_expression [222035,222057]",
      "dest": "binary_expression [223529,223551]"
    },
    {
      "src": "null_literal: null [196716,196720]",
      "dest": "null_literal: null [198210,198214]"
    },
    {
      "src": "if_statement [165664,165735]",
      "dest": "if_statement [167158,167229]"
    },
    {
      "src": "argument_list [124224,124249]",
      "dest": "argument_list [125718,125743]"
    },
    {
      "src": "identifier: isEmpty [84692,84699]",
      "dest": "identifier: isEmpty [86186,86193]"
    },
    {
      "src": "visibility: public [212118,212124]",
      "dest": "visibility: public [213612,213618]"
    },
    {
      "src": "local_variable_declaration [62472,62482]",
      "dest": "local_variable_declaration [63211,63221]"
    },
    {
      "src": "identifier: isAllLowerCase [210124,210138]",
      "dest": "identifier: isAllLowerCase [211618,211632]"
    },
    {
      "src": "identifier: startIndex [131089,131099]",
      "dest": "identifier: startIndex [132583,132593]"
    },
    {
      "src": "assignment_expression [117563,117580]",
      "dest": "assignment_expression [119057,119074]"
    },
    {
      "src": "arithmetic_operator: - [185548,185549]",
      "dest": "arithmetic_operator: - [187042,187043]"
    },
    {
      "src": "binary_expression [219926,219970]",
      "dest": "binary_expression [221420,221464]"
    },
    {
      "src": "identifier: i [145688,145689]",
      "dest": "identifier: i [147182,147183]"
    },
    {
      "src": "increment_operator: ++ [18945,18947]",
      "dest": "increment_operator: ++ [18945,18947]"
    },
    {
      "src": "formal_parameters [174339,174363]",
      "dest": "formal_parameters [175833,175857]"
    },
    {
      "src": "formal_parameter [62292,62302]",
      "dest": "formal_parameter [63031,63041]"
    },
    {
      "src": "local_variable_declaration [24414,24492]",
      "dest": "local_variable_declaration [24414,24492]"
    },
    {
      "src": "identifier: str [98073,98076]",
      "dest": "identifier: str [99567,99570]"
    },
    {
      "src": "identifier: i [70018,70019]",
      "dest": "identifier: i [71512,71513]"
    },
    {
      "src": "formal_parameter [73441,73450]",
      "dest": "formal_parameter [74935,74944]"
    },
    {
      "src": "type: boolean [240921,240928]",
      "dest": "type: boolean [242415,242422]"
    },
    {
      "src": "visibility: public [186592,186598]",
      "dest": "visibility: public [188086,188092]"
    },
    {
      "src": "expression_statement [105550,105578]",
      "dest": "expression_statement [107044,107072]"
    },
    {
      "src": "variable_declarator [208172,208177]",
      "dest": "variable_declarator [209666,209671]"
    },
    {
      "src": "binary_expression [79983,80010]",
      "dest": "binary_expression [81477,81504]"
    },
    {
      "src": "logical_operator: || [211216,211218]",
      "dest": "logical_operator: || [212710,212712]"
    },
    {
      "src": "method_declaration [141587,141868]",
      "dest": "method_declaration [143081,143362]"
    },
    {
      "src": "argument_list [147149,147185]",
      "dest": "argument_list [148643,148679]"
    },
    {
      "src": "decimal_integer_literal: 0 [159365,159366]",
      "dest": "decimal_integer_literal: 0 [160859,160860]"
    },
    {
      "src": "block [86403,86440]",
      "dest": "block [87897,87934]"
    },
    {
      "src": "block [78561,78596]",
      "dest": "block [80055,80090]"
    },
    {
      "src": "formal_parameters [187715,187737]",
      "dest": "formal_parameters [189209,189231]"
    },
    {
      "src": "block [39834,39965]",
      "dest": "block [39834,39965]"
    },
    {
      "src": "identifier: separator [84716,84725]",
      "dest": "identifier: separator [86210,86219]"
    },
    {
      "src": "type: String [194489,194495]",
      "dest": "type: String [195983,195989]"
    },
    {
      "src": "block [62376,62423]",
      "dest": "block [63115,63162]"
    },
    {
      "src": "if_statement [150575,150629]",
      "dest": "if_statement [152069,152123]"
    },
    {
      "src": "binary_expression [228932,228963]",
      "dest": "binary_expression [230426,230457]"
    },
    {
      "src": "update_expression [57777,57780]",
      "dest": "update_expression [54882,54885]"
    },
    {
      "src": "identifier: join [135444,135448]",
      "dest": "identifier: join [136938,136942]"
    },
    {
      "src": "affectation_operator: = [116901,116902]",
      "dest": "affectation_operator: = [118395,118396]"
    },
    {
      "src": "argument_list [26092,26162]",
      "dest": "argument_list [26092,26162]"
    },
    {
      "src": "type: String [115459,115465]",
      "dest": "type: String [116953,116959]"
    },
    {
      "src": "string_fragment: TimeToLive of  [158475,158489]",
      "dest": "string_fragment: TimeToLive of  [159969,159983]"
    },
    {
      "src": "comparison_operator: > [131437,131438]",
      "dest": "comparison_operator: > [132931,132932]"
    },
    {
      "src": "type: String [188846,188852]",
      "dest": "type: String [190340,190346]"
    },
    {
      "src": "binary_expression [225181,225197]",
      "dest": "binary_expression [226675,226691]"
    },
    {
      "src": "type: String [10638,10644]",
      "dest": "type: String [10638,10644]"
    },
    {
      "src": "argument_list [184216,184225]",
      "dest": "argument_list [185710,185719]"
    },
    {
      "src": "identifier: ch1 [175432,175435]",
      "dest": "identifier: ch1 [176926,176929]"
    },
    {
      "src": "variable_declarator [72050,72072]",
      "dest": "variable_declarator [73544,73566]"
    },
    {
      "src": "line_comment: // timeToLive should be 0 if not used or nothing to replace, else it's [155138,155208]",
      "dest": "line_comment: // timeToLive should be 0 if not used or nothing to replace, else it's [156632,156702]"
    },
    {
      "src": "identifier: i [209309,209310]",
      "dest": "identifier: i [210803,210804]"
    },
    {
      "src": "method_declaration [203053,203388]",
      "dest": "method_declaration [204547,204882]"
    },
    {
      "src": "argument_list [117378,117403]",
      "dest": "argument_list [118872,118897]"
    },
    {
      "src": "block [53021,53369]",
      "dest": "block [53021,53369]"
    },
    {
      "src": "method_invocation [119206,119229]",
      "dest": "method_invocation [120700,120723]"
    },
    {
      "src": "false: false [110997,111002]",
      "dest": "false: false [112491,112496]"
    },
    {
      "src": "false: false [24485,24490]",
      "dest": "false: false [24485,24490]"
    },
    {
      "src": "assignment_expression [75831,75859]",
      "dest": "assignment_expression [77325,77353]"
    },
    {
      "src": "identifier: str [190849,190852]",
      "dest": "identifier: str [192343,192346]"
    },
    {
      "src": "block [110912,111059]",
      "dest": "block [112406,112553]"
    },
    {
      "src": "object_creation_expression [123282,123305]",
      "dest": "object_creation_expression [124776,124799]"
    },
    {
      "src": "identifier: increase [160868,160876]",
      "dest": "identifier: increase [162362,162370]"
    },
    {
      "src": "identifier: i [209244,209245]",
      "dest": "identifier: i [210738,210739]"
    },
    {
      "src": "binary_expression [179983,179994]",
      "dest": "binary_expression [181477,181488]"
    },
    {
      "src": "method_invocation [160879,160916]",
      "dest": "method_invocation [162373,162410]"
    },
    {
      "src": "identifier: text [158160,158164]",
      "dest": "identifier: text [159654,159658]"
    },
    {
      "src": "argument_list [162423,162425]",
      "dest": "argument_list [163917,163919]"
    },
    {
      "src": "decimal_integer_literal: 0 [69991,69992]",
      "dest": "decimal_integer_literal: 0 [71485,71486]"
    },
    {
      "src": "identifier: searchChar [163621,163631]",
      "dest": "identifier: searchChar [165115,165125]"
    },
    {
      "src": "identifier: increase [150268,150276]",
      "dest": "identifier: increase [151762,151770]"
    },
    {
      "src": "argument_list [201024,201038]",
      "dest": "argument_list [202518,202532]"
    },
    {
      "src": "modifiers [182990,183003]",
      "dest": "modifiers [184484,184497]"
    },
    {
      "src": "affectation_operator: = [70013,70014]",
      "dest": "affectation_operator: = [71507,71508]"
    },
    {
      "src": "identifier: cs [195559,195561]",
      "dest": "identifier: cs [197053,197055]"
    },
    {
      "src": "argument_list [81589,81591]",
      "dest": "argument_list [83083,83085]"
    },
    {
      "src": "method_declaration [66388,67054]",
      "dest": "method_declaration [67435,68548]"
    },
    {
      "src": "parenthesized_expression [61157,61179]",
      "dest": "parenthesized_expression [61616,61638]"
    },
    {
      "src": "identifier: join [135317,135321]",
      "dest": "identifier: join [136811,136815]"
    },
    {
      "src": "identifier: length [23065,23071]",
      "dest": "identifier: length [23065,23071]"
    },
    {
      "src": "identifier: separator [135470,135479]",
      "dest": "identifier: separator [136964,136973]"
    },
    {
      "src": "formal_parameter [115471,115492]",
      "dest": "formal_parameter [116965,116986]"
    },
    {
      "src": "binary_expression [204420,204495]",
      "dest": "binary_expression [205914,205989]"
    },
    {
      "src": "argument_list [134138,134145]",
      "dest": "argument_list [135632,135639]"
    },
    {
      "src": "comparison_operator: == [136228,136230]",
      "dest": "comparison_operator: == [137722,137724]"
    },
    {
      "src": "identifier: isEmpty [137045,137052]",
      "dest": "identifier: isEmpty [138539,138546]"
    },
    {
      "src": "local_variable_declaration [57707,57730]",
      "dest": "local_variable_declaration [54815,54838]"
    },
    {
      "src": "binary_expression [174605,174621]",
      "dest": "binary_expression [176099,176115]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes <code>separator</code> from the end of\n     * <code>str</code> if it's there, otherwise leave it alone.</p>\n     *\n     * <p>NOTE: This method changed in version 2.0.\n     * It now more closely matches Perl chomp.\n     * For the previous behavior, use {@link #substringBeforeLast(String, String)}.\n     * This method uses {@link String#endsWith(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.chomp(null, *)         = null\n     * StringUtils.chomp(\"\", *)           = \"\"\n     * StringUtils.chomp(\"foobar\", \"bar\") = \"foo\"\n     * StringUtils.chomp(\"foobar\", \"baz\") = \"foobar\"\n     * StringUtils.chomp(\"foo\", \"foo\")    = \"\"\n     * StringUtils.chomp(\"foo \", \"foo\")   = \"foo \"\n     * StringUtils.chomp(\" foo\", \"foo\")   = \" \"\n     * StringUtils.chomp(\"foo\", \"foooo\")  = \"foo\"\n     * StringUtils.chomp(\"foo\", \"\")       = \"foo\"\n     * StringUtils.chomp(\"foo\", null)     = \"foo\"\n     * </pre>\n     *\n     * @param str  the String to chomp from, may be null\n     * @param separator  separator String, may be null\n     * @return String without trailing separator, <code>null</code> if null String input\n     */ [170551,171676]",
      "dest": "block_comment:     \n     * <p>Removes <code>separator</code> from the end of\n     * <code>str</code> if it's there, otherwise leave it alone.</p>\n     *\n     * <p>NOTE: This method changed in version 2.0.\n     * It now more closely matches Perl chomp.\n     * For the previous behavior, use {@link #substringBeforeLast(String, String)}.\n     * This method uses {@link String#endsWith(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.chomp(null, *)         = null\n     * StringUtils.chomp(\"\", *)           = \"\"\n     * StringUtils.chomp(\"foobar\", \"bar\") = \"foo\"\n     * StringUtils.chomp(\"foobar\", \"baz\") = \"foobar\"\n     * StringUtils.chomp(\"foo\", \"foo\")    = \"\"\n     * StringUtils.chomp(\"foo \", \"foo\")   = \"foo \"\n     * StringUtils.chomp(\" foo\", \"foo\")   = \" \"\n     * StringUtils.chomp(\"foo\", \"foooo\")  = \"foo\"\n     * StringUtils.chomp(\"foo\", \"\")       = \"foo\"\n     * StringUtils.chomp(\"foo\", null)     = \"foo\"\n     * </pre>\n     *\n     * @param str  the String to chomp from, may be null\n     * @param separator  separator String, may be null\n     * @return String without trailing separator, <code>null</code> if null String input\n     */ [172045,173170]"
    },
    {
      "src": "type: boolean [116852,116859]",
      "dest": "type: boolean [118346,118353]"
    },
    {
      "src": "return_statement [185361,185373]",
      "dest": "return_statement [186855,186867]"
    },
    {
      "src": "logical_operator: || [60834,60836]",
      "dest": "logical_operator: || [61221,61223]"
    },
    {
      "src": "identifier: ordinalIndexOf [45112,45126]",
      "dest": "identifier: ordinalIndexOf [45112,45126]"
    },
    {
      "src": "unary_expression [104813,104815]",
      "dest": "unary_expression [106307,106309]"
    },
    {
      "src": "identifier: ignoreCase [239777,239787]",
      "dest": "identifier: ignoreCase [241271,241281]"
    },
    {
      "src": "modifiers [109592,109605]",
      "dest": "modifiers [111086,111099]"
    },
    {
      "src": "array_creation_expression [23142,23161]",
      "dest": "array_creation_expression [23142,23161]"
    },
    {
      "src": "identifier: i [8808,8809]",
      "dest": "identifier: i [8808,8809]"
    },
    {
      "src": "block [225224,225322]",
      "dest": "block [226718,226816]"
    },
    {
      "src": "unary_expression [228134,228148]",
      "dest": "unary_expression [229628,229642]"
    },
    {
      "src": "method_declaration [227098,229261]",
      "dest": "method_declaration [228592,230755]"
    },
    {
      "src": "block [128024,128077]",
      "dest": "block [129518,129571]"
    },
    {
      "src": "binary_expression [27501,27512]",
      "dest": "binary_expression [27501,27512]"
    },
    {
      "src": "comparison_operator: < [241114,241115]",
      "dest": "comparison_operator: < [242608,242609]"
    },
    {
      "src": "local_variable_declaration [211313,211323]",
      "dest": "local_variable_declaration [212807,212817]"
    },
    {
      "src": "\": \" [181509,181510]",
      "dest": "\": \" [183003,183004]"
    },
    {
      "src": "formal_parameter [172963,172973]",
      "dest": "formal_parameter [174457,174467]"
    },
    {
      "src": "affectation_operator: = [219877,219878]",
      "dest": "affectation_operator: = [221371,221372]"
    },
    {
      "src": "binary_expression [81573,81596]",
      "dest": "binary_expression [83067,83090]"
    },
    {
      "src": "formal_parameter [242382,242395]",
      "dest": "formal_parameter [243876,243889]"
    },
    {
      "src": "argument_list [20572,20581]",
      "dest": "argument_list [20572,20581]"
    },
    {
      "src": "increment_operator: ++ [241139,241141]",
      "dest": "increment_operator: ++ [242633,242635]"
    },
    {
      "src": "break_statement [91436,91442]",
      "dest": "break_statement [92930,92936]"
    },
    {
      "src": "identifier: searchStr [36471,36480]",
      "dest": "identifier: searchStr [36471,36480]"
    },
    {
      "src": "type: int [35106,35109]",
      "dest": "type: int [35106,35109]"
    },
    {
      "src": "type: StringBuilder [168542,168555]",
      "dest": "type: StringBuilder [170036,170049]"
    },
    {
      "src": "variable_declarator [204382,204387]",
      "dest": "variable_declarator [205876,205881]"
    },
    {
      "src": "identifier: str [53035,53038]",
      "dest": "identifier: str [53035,53038]"
    },
    {
      "src": "break_statement [225292,225298]",
      "dest": "break_statement [226786,226792]"
    },
    {
      "src": "method_declaration [196617,197025]",
      "dest": "method_declaration [198111,198519]"
    },
    {
      "src": "argument_list [150384,150410]",
      "dest": "argument_list [151878,151904]"
    },
    {
      "src": "binary_expression [65188,65220]",
      "dest": "binary_expression [66235,66267]"
    },
    {
      "src": "field_access [145699,145711]",
      "dest": "field_access [147193,147205]"
    },
    {
      "src": "block [228714,228803]",
      "dest": "block [230208,230297]"
    },
    {
      "src": "binary_expression [81690,81712]",
      "dest": "binary_expression [83184,83206]"
    },
    {
      "src": "assignment_expression [105892,105901]",
      "dest": "assignment_expression [107386,107395]"
    },
    {
      "src": "null_literal: null [43404,43408]",
      "dest": "null_literal: null [43404,43408]"
    },
    {
      "src": "method_invocation [20440,20459]",
      "dest": "method_invocation [20440,20459]"
    },
    {
      "src": "comparison_operator: == [205879,205881]",
      "dest": "comparison_operator: == [207373,207375]"
    },
    {
      "src": "parenthesized_expression [188895,188921]",
      "dest": "parenthesized_expression [190389,190415]"
    },
    {
      "src": "binary_expression [73754,73774]",
      "dest": "binary_expression [75248,75268]"
    },
    {
      "src": "visibility: public [242339,242345]",
      "dest": "visibility: public [243833,243839]"
    },
    {
      "src": "method_declaration [103981,106447]",
      "dest": "method_declaration [105475,107941]"
    },
    {
      "src": "while_statement [132892,133085]",
      "dest": "while_statement [134386,134579]"
    },
    {
      "src": "binary_expression [150316,150324]",
      "dest": "binary_expression [151810,151818]"
    },
    {
      "src": "argument_list [143484,143486]",
      "dest": "argument_list [144978,144980]"
    },
    {
      "src": "affectation_operator: = [71952,71953]",
      "dest": "affectation_operator: = [73446,73447]"
    },
    {
      "src": "type: int [174352,174355]",
      "dest": "type: int [175846,175849]"
    },
    {
      "src": "affectation_operator: = [173189,173190]",
      "dest": "affectation_operator: = [174683,174684]"
    },
    {
      "src": "binary_expression [129233,129246]",
      "dest": "binary_expression [130727,130740]"
    },
    {
      "src": "identifier: getMethod [24611,24620]",
      "dest": "identifier: getMethod [24611,24620]"
    },
    {
      "src": "identifier: ordinalIndexOf [35185,35199]",
      "dest": "identifier: ordinalIndexOf [35185,35199]"
    },
    {
      "src": "if_statement [203252,203351]",
      "dest": "if_statement [204746,204845]"
    },
    {
      "src": "method_invocation [152661,152717]",
      "dest": "method_invocation [154155,154211]"
    },
    {
      "src": "formal_parameter [199750,199760]",
      "dest": "formal_parameter [201244,201254]"
    },
    {
      "src": "variable_declarator [57537,57570]",
      "dest": "variable_declarator [57877,57910]"
    },
    {
      "src": "identifier: startPos [39805,39813]",
      "dest": "identifier: startPos [39805,39813]"
    },
    {
      "src": "identifier: preserveAllTokens [119150,119167]",
      "dest": "identifier: preserveAllTokens [120644,120661]"
    },
    {
      "src": "identifier: searchChars [165534,165545]",
      "dest": "identifier: searchChars [167028,167039]"
    },
    {
      "src": "identifier: str [190793,190796]",
      "dest": "identifier: str [192287,192290]"
    },
    {
      "src": "block [215529,215565]",
      "dest": "block [217023,217059]"
    },
    {
      "src": "identifier: str [138736,138739]",
      "dest": "identifier: str [140230,140233]"
    },
    {
      "src": "expression_statement [150237,150278]",
      "dest": "expression_statement [151731,151772]"
    },
    {
      "src": "binary_expression [8851,8896]",
      "dest": "binary_expression [8851,8896]"
    },
    {
      "src": "binary_expression [188896,188907]",
      "dest": "binary_expression [190390,190401]"
    },
    {
      "src": "affectation_operator: = [117266,117267]",
      "dest": "affectation_operator: = [118760,118761]"
    },
    {
      "src": "comparison_operator: == [159506,159508]",
      "dest": "comparison_operator: == [161000,161002]"
    },
    {
      "src": "identifier: i [203233,203234]",
      "dest": "identifier: i [204727,204728]"
    },
    {
      "src": "catch_clause [25667,25827]",
      "dest": "catch_clause [25667,25827]"
    },
    {
      "src": "identifier: outputLength [175277,175289]",
      "dest": "identifier: outputLength [176771,176783]"
    },
    {
      "src": "parenthesized_expression [43375,43409]",
      "dest": "parenthesized_expression [43375,43409]"
    },
    {
      "src": "block_comment:     \n     * <p>Overlays part of a String with another String.</p>\n     *\n     * <p>A <code>null</code> string input returns <code>null</code>.\n     * A negative index is treated as zero.\n     * An index greater than the string length is treated as the string length.\n     * The start index is always the smaller of the two indices.</p>\n     *\n     * <pre>\n     * StringUtils.overlay(null, *, *, *)            = null\n     * StringUtils.overlay(\"\", \"abc\", 0, 0)          = \"abc\"\n     * StringUtils.overlay(\"abcdef\", null, 2, 4)     = \"abef\"\n     * StringUtils.overlay(\"abcdef\", \"\", 2, 4)       = \"abef\"\n     * StringUtils.overlay(\"abcdef\", \"\", 4, 2)       = \"abef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4)   = \"abzzzzef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2)   = \"abzzzzef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4)  = \"zzzzef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 8)   = \"abzzzz\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -3) = \"zzzzabcdef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10)  = \"abcdefzzzz\"\n     * </pre>\n     *\n     * @param str  the String to do overlaying in, may be null\n     * @param overlay  the String to overlay, may be null\n     * @param start  the position to start overlaying at\n     * @param end  the position to stop overlaying before\n     * @return overlayed String, <code>null</code> if null String input\n     * @since 2.0\n     */ [166515,167927]",
      "dest": "block_comment:     \n     * <p>Overlays part of a String with another String.</p>\n     *\n     * <p>A <code>null</code> string input returns <code>null</code>.\n     * A negative index is treated as zero.\n     * An index greater than the string length is treated as the string length.\n     * The start index is always the smaller of the two indices.</p>\n     *\n     * <pre>\n     * StringUtils.overlay(null, *, *, *)            = null\n     * StringUtils.overlay(\"\", \"abc\", 0, 0)          = \"abc\"\n     * StringUtils.overlay(\"abcdef\", null, 2, 4)     = \"abef\"\n     * StringUtils.overlay(\"abcdef\", \"\", 2, 4)       = \"abef\"\n     * StringUtils.overlay(\"abcdef\", \"\", 4, 2)       = \"abef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 4)   = \"abzzzzef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 4, 2)   = \"abzzzzef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", -1, 4)  = \"zzzzef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 2, 8)   = \"abzzzz\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", -2, -3) = \"zzzzabcdef\"\n     * StringUtils.overlay(\"abcdef\", \"zzzz\", 8, 10)  = \"abcdefzzzz\"\n     * </pre>\n     *\n     * @param str  the String to do overlaying in, may be null\n     * @param overlay  the String to overlay, may be null\n     * @param start  the position to start overlaying at\n     * @param end  the position to stop overlaying before\n     * @return overlayed String, <code>null</code> if null String input\n     * @since 2.0\n     */ [168009,169421]"
    },
    {
      "src": "identifier: str [115532,115535]",
      "dest": "identifier: str [117026,117029]"
    },
    {
      "src": "line_comment: // keep track of which still have matches [158967,159008]",
      "dest": "line_comment: // keep track of which still have matches [160461,160502]"
    },
    {
      "src": "identifier: endsWith [244060,244068]",
      "dest": "identifier: endsWith [245554,245562]"
    },
    {
      "src": ":: : [213011,213012]",
      "dest": ":: : [214505,214506]"
    },
    {
      "src": "identifier: containsIgnoreCase [52972,52990]",
      "dest": "identifier: containsIgnoreCase [52972,52990]"
    },
    {
      "src": "method_invocation [60822,60833]",
      "dest": "method_invocation [61209,61220]"
    },
    {
      "src": "method_declaration [190435,190894]",
      "dest": "method_declaration [191929,192388]"
    },
    {
      "src": "identifier: searchStr [49589,49598]",
      "dest": "identifier: searchStr [49589,49598]"
    },
    {
      "src": "increment_operator: ++ [61132,61134]",
      "dest": "increment_operator: ++ [61591,61593]"
    },
    {
      "src": "identifier: charAt [162365,162371]",
      "dest": "identifier: charAt [163859,163865]"
    },
    {
      "src": "static: static [115420,115426]",
      "dest": "static: static [116914,116920]"
    },
    {
      "src": "binary_expression [43376,43408]",
      "dest": "binary_expression [43376,43408]"
    },
    {
      "src": "catch: catch [25508,25513]",
      "dest": "catch: catch [25508,25513]"
    },
    {
      "src": "formal_parameter [33465,33481]",
      "dest": "formal_parameter [33465,33481]"
    },
    {
      "src": "identifier: substring [220296,220305]",
      "dest": "identifier: substring [221790,221799]"
    },
    {
      "src": "block_comment:     \n     * <p>Compares two Strings, and returns the portion where they differ.\n     * (More precisely, return the remainder of the second String,\n     * starting from where it's different from the first.)</p>\n     *\n     * <p>For example,\n     * <code>difference(\"i am a machine\", \"i am a robot\") -> \"robot\"</code>.</p>\n     *\n     * <pre>\n     * StringUtils.difference(null, null) = null\n     * StringUtils.difference(\"\", \"\") = \"\"\n     * StringUtils.difference(\"\", \"abc\") = \"abc\"\n     * StringUtils.difference(\"abc\", \"\") = \"\"\n     * StringUtils.difference(\"abc\", \"abc\") = \"\"\n     * StringUtils.difference(\"ab\", \"abxyz\") = \"xyz\"\n     * StringUtils.difference(\"abcde\", \"abxyz\") = \"xyz\"\n     * StringUtils.difference(\"abcde\", \"xyz\") = \"xyz\"\n     * </pre>\n     *\n     * @param str1  the first String, may be null\n     * @param str2  the second String, may be null\n     * @return the portion of str2 where it differs from str1; returns the\n     * empty String if they are equal\n     * @since 2.0\n     */ [222640,223639]",
      "dest": "block_comment:     \n     * <p>Compares two Strings, and returns the portion where they differ.\n     * (More precisely, return the remainder of the second String,\n     * starting from where it's different from the first.)</p>\n     *\n     * <p>For example,\n     * <code>difference(\"i am a machine\", \"i am a robot\") -> \"robot\"</code>.</p>\n     *\n     * <pre>\n     * StringUtils.difference(null, null) = null\n     * StringUtils.difference(\"\", \"\") = \"\"\n     * StringUtils.difference(\"\", \"abc\") = \"abc\"\n     * StringUtils.difference(\"abc\", \"\") = \"\"\n     * StringUtils.difference(\"abc\", \"abc\") = \"\"\n     * StringUtils.difference(\"ab\", \"abxyz\") = \"xyz\"\n     * StringUtils.difference(\"abcde\", \"abxyz\") = \"xyz\"\n     * StringUtils.difference(\"abcde\", \"xyz\") = \"xyz\"\n     * </pre>\n     *\n     * @param str1  the first String, may be null\n     * @param str2  the second String, may be null\n     * @return the portion of str2 where it differs from str1; returns the\n     * empty String if they are equal\n     * @since 2.0\n     */ [224134,225133]"
    },
    {
      "src": "method_invocation [137263,137276]",
      "dest": "method_invocation [138757,138770]"
    },
    {
      "src": "return_statement [204311,204324]",
      "dest": "return_statement [205805,205818]"
    },
    {
      "src": "arithmetic_operator: + [236280,236281]",
      "dest": "arithmetic_operator: + [237774,237775]"
    },
    {
      "src": "argument_list [132764,132769]",
      "dest": "argument_list [134258,134263]"
    },
    {
      "src": "identifier: stripAccents [23868,23880]",
      "dest": "identifier: stripAccents [23868,23880]"
    },
    {
      "src": "if_statement [81686,81749]",
      "dest": "if_statement [83180,83243]"
    },
    {
      "src": "identifier: end [105291,105294]",
      "dest": "identifier: end [106785,106788]"
    },
    {
      "src": "identifier: endsWith [242361,242369]",
      "dest": "identifier: endsWith [243855,243863]"
    },
    {
      "src": "increment_operator: ++ [72025,72027]",
      "dest": "increment_operator: ++ [73519,73521]"
    },
    {
      "src": "method_invocation [9628,9651]",
      "dest": "method_invocation [9628,9651]"
    },
    {
      "src": "return_statement [163723,163767]",
      "dest": "return_statement [165217,165261]"
    },
    {
      "src": "argument_list [141682,141690]",
      "dest": "argument_list [143176,143184]"
    },
    {
      "src": "argument_list [180258,180267]",
      "dest": "argument_list [181752,181761]"
    },
    {
      "src": "visibility: public [214516,214522]",
      "dest": "visibility: public [216010,216016]"
    },
    {
      "src": "new: new [25405,25408]",
      "dest": "new: new [25405,25408]"
    },
    {
      "src": "identifier: length [155313,155319]",
      "dest": "identifier: length [156807,156813]"
    },
    {
      "src": "variable_declarator [104238,104256]",
      "dest": "variable_declarator [105732,105750]"
    },
    {
      "src": "\": \" [178082,178083]",
      "dest": "\": \" [179576,179577]"
    },
    {
      "src": "identifier: p [236410,236411]",
      "dest": "identifier: p [237904,237905]"
    },
    {
      "src": "block [181951,182020]",
      "dest": "block [183445,183514]"
    },
    {
      "src": "block [7445,7499]",
      "dest": "block [7445,7499]"
    },
    {
      "src": "identifier: str [75949,75952]",
      "dest": "identifier: str [77443,77446]"
    },
    {
      "src": "type: String [181340,181346]",
      "dest": "type: String [182834,182840]"
    },
    {
      "src": "affectation_operator: = [17195,17196]",
      "dest": "affectation_operator: = [17195,17196]"
    },
    {
      "src": "identifier: padLen [186138,186144]",
      "dest": "identifier: padLen [187632,187638]"
    },
    {
      "src": "switch_block_statement_group [175142,175498]",
      "dest": "switch_block_statement_group [176636,176992]"
    },
    {
      "src": "identifier: substring [150717,150726]",
      "dest": "identifier: substring [152211,152220]"
    },
    {
      "src": "identifier: padLen [185670,185676]",
      "dest": "identifier: padLen [187164,187170]"
    },
    {
      "src": "identifier: searchChars [54550,54561]",
      "dest": "identifier: searchChars [54550,54561]"
    },
    {
      "src": "local_variable_declaration [165980,166004]",
      "dest": "local_variable_declaration [167474,167498]"
    },
    {
      "src": "identifier: searchStr [37808,37817]",
      "dest": "identifier: searchStr [37808,37817]"
    },
    {
      "src": "identifier: i [202077,202078]",
      "dest": "identifier: i [203571,203572]"
    },
    {
      "src": "identifier: buf [127953,127956]",
      "dest": "identifier: buf [129447,129450]"
    },
    {
      "src": "identifier: containsAny [57340,57351]",
      "dest": "identifier: containsAny [57686,57697]"
    },
    {
      "src": "variable_declarator [145662,145669]",
      "dest": "variable_declarator [147156,147163]"
    },
    {
      "src": "identifier: cnfe [25213,25217]",
      "dest": "identifier: cnfe [25213,25217]"
    },
    {
      "src": "identifier: str [213874,213877]",
      "dest": "identifier: str [215368,215371]"
    },
    {
      "src": "identifier: cs [211187,211189]",
      "dest": "identifier: cs [212681,212683]"
    },
    {
      "src": "identifier: capitalize [195425,195435]",
      "dest": "identifier: capitalize [196919,196929]"
    },
    {
      "src": "affectation_operator: = [203220,203221]",
      "dest": "affectation_operator: = [204714,204715]"
    },
    {
      "src": "binary_expression [225181,225217]",
      "dest": "binary_expression [226675,226711]"
    },
    {
      "src": "array_access [127747,127764]",
      "dest": "array_access [129241,129258]"
    },
    {
      "src": "if_statement [219734,219843]",
      "dest": "if_statement [221228,221337]"
    },
    {
      "src": "line_comment: // iterates through s [235763,235784]",
      "dest": "line_comment: // iterates through s [237257,237278]"
    },
    {
      "src": "binary_expression [174590,174601]",
      "dest": "binary_expression [176084,176095]"
    },
    {
      "src": "modifiers [206803,206816]",
      "dest": "modifiers [208297,208310]"
    },
    {
      "src": "parenthesized_expression [181859,181875]",
      "dest": "parenthesized_expression [183353,183369]"
    },
    {
      "src": "identifier: str [118538,118541]",
      "dest": "identifier: str [120032,120035]"
    },
    {
      "src": "identifier: start [168635,168640]",
      "dest": "identifier: start [170129,170134]"
    },
    {
      "src": "identifier: concat [180299,180305]",
      "dest": "identifier: concat [181793,181799]"
    },
    {
      "src": "formal_parameter [27434,27450]",
      "dest": "formal_parameter [27434,27450]"
    },
    {
      "src": "type: String [147052,147058]",
      "dest": "type: String [148546,148552]"
    },
    {
      "src": "argument_list [190595,190603]",
      "dest": "argument_list [192089,192097]"
    },
    {
      "src": "comparison_operator: < [220153,220154]",
      "dest": "comparison_operator: < [221647,221648]"
    },
    {
      "src": "true: true [58153,58157]",
      "dest": "true: true [58546,58550]"
    },
    {
      "src": "expression_statement [236405,236412]",
      "dest": "expression_statement [237899,237906]"
    },
    {
      "src": "identifier: EMPTY_STRING_ARRAY [116704,116722]",
      "dest": "identifier: EMPTY_STRING_ARRAY [118198,118216]"
    },
    {
      "src": "identifier: isLetterOrDigit [204431,204446]",
      "dest": "identifier: isLetterOrDigit [205925,205940]"
    },
    {
      "src": "identifier: end [104807,104810]",
      "dest": "identifier: end [106301,106304]"
    },
    {
      "src": "expression_statement [235448,235456]",
      "dest": "expression_statement [236942,236950]"
    },
    {
      "src": "identifier: end [168706,168709]",
      "dest": "identifier: end [170200,170203]"
    },
    {
      "src": "type: int [40845,40848]",
      "dest": "type: int [40845,40848]"
    },
    {
      "src": "identifier: str [122072,122075]",
      "dest": "identifier: str [123566,123569]"
    },
    {
      "src": "throw_statement [233828,233891]",
      "dest": "throw_statement [235322,235385]"
    },
    {
      "src": "block [70108,70149]",
      "dest": "block [71602,71643]"
    },
    {
      "src": "return_statement [8071,8103]",
      "dest": "return_statement [8071,8103]"
    },
    {
      "src": "identifier: ch [175064,175066]",
      "dest": "identifier: ch [176558,176560]"
    },
    {
      "src": "block [43362,43506]",
      "dest": "block [43362,43506]"
    },
    {
      "src": "parenthesized_expression [129232,129247]",
      "dest": "parenthesized_expression [130726,130741]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [84829,84844]",
      "dest": "identifier: INDEX_NOT_FOUND [86323,86338]"
    },
    {
      "src": "block [178032,178135]",
      "dest": "block [179526,179629]"
    },
    {
      "src": "argument_list [137322,137325]",
      "dest": "argument_list [138816,138819]"
    },
    {
      "src": "expression_statement [137297,137326]",
      "dest": "expression_statement [138791,138820]"
    },
    {
      "src": "identifier: ch [170045,170047]",
      "dest": "identifier: ch [171539,171541]"
    },
    {
      "src": "arithmetic_operator: - [173165,173166]",
      "dest": "arithmetic_operator: - [174659,174660]"
    },
    {
      "src": "binary_expression [225242,225272]",
      "dest": "binary_expression [226736,226766]"
    },
    {
      "src": "argument_list [37853,37872]",
      "dest": "argument_list [37853,37872]"
    },
    {
      "src": "identifier: i [72070,72071]",
      "dest": "identifier: i [73564,73565]"
    },
    {
      "src": "return_statement [35178,35232]",
      "dest": "return_statement [35178,35232]"
    },
    {
      "src": "arithmetic_operator: - [141813,141814]",
      "dest": "arithmetic_operator: - [143307,143308]"
    },
    {
      "src": "identifier: lowerCase [193677,193686]",
      "dest": "identifier: lowerCase [195171,195180]"
    },
    {
      "src": "block [157947,162582]",
      "dest": "block [159441,164076]"
    },
    {
      "src": "comparison_operator: == [89202,89204]",
      "dest": "comparison_operator: == [90696,90698]"
    },
    {
      "src": "argument_list [195684,195721]",
      "dest": "argument_list [197178,197215]"
    },
    {
      "src": "identifier: sz [208137,208139]",
      "dest": "identifier: sz [209631,209633]"
    },
    {
      "src": "identifier: str [35132,35135]",
      "dest": "identifier: str [35132,35135]"
    },
    {
      "src": "decimal_integer_literal: 0 [20331,20332]",
      "dest": "decimal_integer_literal: 0 [20331,20332]"
    },
    {
      "src": "affectation_operator: = [111082,111083]",
      "dest": "affectation_operator: = [112576,112577]"
    },
    {
      "src": "binary_expression [181407,181418]",
      "dest": "binary_expression [182901,182912]"
    },
    {
      "src": "binary_expression [73466,73477]",
      "dest": "binary_expression [74960,74971]"
    },
    {
      "src": "block_comment:     \n     * <p>Strips any of a set of characters from the start and end of a String.\n     * This is similar to {@link String#trim()} but allows the characters\n     * to be stripped to be controlled.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * An empty string (\"\") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is <code>null</code>, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.\n     * Alternatively use {@link #strip(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.strip(null, *)          = null\n     * StringUtils.strip(\"\", *)            = \"\"\n     * StringUtils.strip(\"abc\", null)      = \"abc\"\n     * StringUtils.strip(\"  abc\", null)    = \"abc\"\n     * StringUtils.strip(\"abc  \", null)    = \"abc\"\n     * StringUtils.strip(\" abc \", null)    = \"abc\"\n     * StringUtils.strip(\"  abcyx\", \"xyz\") = \"  abc\"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, <code>null</code> if null String input\n     */ [15888,17056]",
      "dest": "block_comment:     \n     * <p>Strips any of a set of characters from the start and end of a String.\n     * This is similar to {@link String#trim()} but allows the characters\n     * to be stripped to be controlled.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * An empty string (\"\") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is <code>null</code>, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.\n     * Alternatively use {@link #strip(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.strip(null, *)          = null\n     * StringUtils.strip(\"\", *)            = \"\"\n     * StringUtils.strip(\"abc\", null)      = \"abc\"\n     * StringUtils.strip(\"  abc\", null)    = \"abc\"\n     * StringUtils.strip(\"abc  \", null)    = \"abc\"\n     * StringUtils.strip(\" abc \", null)    = \"abc\"\n     * StringUtils.strip(\"  abcyx\", \"xyz\") = \"  abc\"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, <code>null</code> if null String input\n     */ [15888,17056]"
    },
    {
      "src": "identifier: toString [131239,131247]",
      "dest": "identifier: toString [132733,132741]"
    },
    {
      "src": "visibility: public [240907,240913]",
      "dest": "visibility: public [242401,242407]"
    },
    {
      "src": "method_invocation [202116,202148]",
      "dest": "method_invocation [203610,203642]"
    },
    {
      "src": "new: new [23142,23145]",
      "dest": "new: new [23142,23145]"
    },
    {
      "src": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, <code>null</code> if null array input\n     */ [128131,129154]",
      "dest": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, <code>null</code> if null array input\n     */ [129625,130648]"
    },
    {
      "src": "method_invocation [219926,219956]",
      "dest": "method_invocation [221420,221450]"
    },
    {
      "src": "if_statement [69759,69845]",
      "dest": "if_statement [71253,71339]"
    },
    {
      "src": "if_statement [86317,86370]",
      "dest": "if_statement [87811,87864]"
    },
    {
      "src": "binary_expression [69778,69796]",
      "dest": "binary_expression [71272,71290]"
    },
    {
      "src": "line_comment: // check length next [75910,75930]",
      "dest": "line_comment: // check length next [77404,77424]"
    },
    {
      "src": "return_statement [49659,49682]",
      "dest": "return_statement [49659,49682]"
    },
    {
      "src": "return_statement [58146,58158]",
      "dest": "return_statement [58539,58551]"
    },
    {
      "src": "return_statement [229238,229255]",
      "dest": "return_statement [230732,230749]"
    },
    {
      "src": "binary_expression [20573,20580]",
      "dest": "binary_expression [20573,20580]"
    },
    {
      "src": "comparison_operator: < [39817,39818]",
      "dest": "comparison_operator: < [39817,39818]"
    },
    {
      "src": "variable_declarator [195529,195535]",
      "dest": "variable_declarator [197023,197029]"
    },
    {
      "src": "identifier: str [138809,138812]",
      "dest": "identifier: str [140303,140306]"
    },
    {
      "src": "identifier: j [57866,57867]",
      "dest": "identifier: j [54971,54972]"
    },
    {
      "src": "affectation_operator: = [110665,110666]",
      "dest": "affectation_operator: = [112159,112160]"
    },
    {
      "src": "identifier: length [184022,184028]",
      "dest": "identifier: length [185516,185522]"
    },
    {
      "src": "expression_statement [106340,106350]",
      "dest": "expression_statement [107834,107844]"
    },
    {
      "src": "modifiers [86237,86250]",
      "dest": "modifiers [87731,87744]"
    },
    {
      "src": "unary_expression [161021,161023]",
      "dest": "unary_expression [162515,162517]"
    },
    {
      "src": "visibility: public [133746,133752]",
      "dest": "visibility: public [135240,135246]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [20586,20601]",
      "dest": "identifier: INDEX_NOT_FOUND [20586,20601]"
    },
    {
      "src": "identifier: searchList [161557,161567]",
      "dest": "identifier: searchList [163051,163061]"
    },
    {
      "src": "static: static [7405,7411]",
      "dest": "static: static [7405,7411]"
    },
    {
      "src": "identifier: str [116568,116571]",
      "dest": "identifier: str [118062,118065]"
    },
    {
      "src": "variable_declarator [160611,160673]",
      "dest": "variable_declarator [162105,162167]"
    },
    {
      "src": "method_invocation [8874,8886]",
      "dest": "method_invocation [8874,8886]"
    },
    {
      "src": "formal_parameter [136187,136203]",
      "dest": "formal_parameter [137681,137697]"
    },
    {
      "src": "decimal_integer_literal: 0 [131125,131126]",
      "dest": "decimal_integer_literal: 0 [132619,132620]"
    },
    {
      "src": "affectation_operator: = [23058,23059]",
      "dest": "affectation_operator: = [23058,23059]"
    },
    {
      "src": "block [76146,76180]",
      "dest": "block [77640,77674]"
    },
    {
      "src": "identifier: charAt [57720,57726]",
      "dest": "identifier: charAt [54828,54834]"
    },
    {
      "src": "return_statement [138775,138786]",
      "dest": "return_statement [140269,140280]"
    },
    {
      "src": "null_literal: null [231369,231373]",
      "dest": "null_literal: null [232863,232867]"
    },
    {
      "src": "identifier: isUpperCase [211365,211376]",
      "dest": "identifier: isUpperCase [212859,212870]"
    },
    {
      "src": "block [174500,174537]",
      "dest": "block [175994,176031]"
    },
    {
      "src": "identifier: buf [150751,150754]",
      "dest": "identifier: buf [152245,152248]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [215832,215905]",
      "dest": "line_comment: //----------------------------------------------------------------------- [217326,217399]"
    },
    {
      "src": "return_statement [239988,240056]",
      "dest": "return_statement [241482,241550]"
    },
    {
      "src": "variable_declarator [211317,211322]",
      "dest": "variable_declarator [212811,212816]"
    },
    {
      "src": "block [60808,61323]",
      "dest": "block [61195,62062]"
    },
    {
      "src": "type: String [30687,30693]",
      "dest": "type: String [30687,30693]"
    },
    {
      "src": "argument_list [116646,116648]",
      "dest": "argument_list [118140,118142]"
    },
    {
      "src": "affectation_operator: = [189010,189011]",
      "dest": "affectation_operator: = [190504,190505]"
    },
    {
      "src": "identifier: trim [10645,10649]",
      "dest": "identifier: trim [10645,10649]"
    },
    {
      "src": "identifier: smallestIndexOfDiff [231199,231218]",
      "dest": "identifier: smallestIndexOfDiff [232693,232712]"
    },
    {
      "src": "return_statement [69812,69835]",
      "dest": "return_statement [71306,71329]"
    },
    {
      "src": "decimal_integer_literal: 0 [170527,170528]",
      "dest": "decimal_integer_literal: 0 [172021,172022]"
    },
    {
      "src": "identifier: replaceEachRepeatedly [155046,155067]",
      "dest": "identifier: replaceEachRepeatedly [156540,156561]"
    },
    {
      "src": "identifier: str [140261,140264]",
      "dest": "identifier: str [141755,141758]"
    },
    {
      "src": "binary_expression [228112,228130]",
      "dest": "binary_expression [229606,229624]"
    },
    {
      "src": "line_comment: // handle null, zero and one elements before building a buffer [132352,132414]",
      "dest": "line_comment: // handle null, zero and one elements before building a buffer [133846,133908]"
    },
    {
      "src": "identifier: str [168023,168026]",
      "dest": "identifier: str [169517,169520]"
    },
    {
      "src": "parenthesized_expression [150426,150450]",
      "dest": "parenthesized_expression [151920,151944]"
    },
    {
      "src": "identifier: append [196893,196899]",
      "dest": "identifier: append [198387,198393]"
    },
    {
      "src": "assignment_expression [150537,150561]",
      "dest": "assignment_expression [152031,152055]"
    },
    {
      "src": "identifier: length [222061,222067]",
      "dest": "identifier: length [223555,223561]"
    },
    {
      "src": "argument_list [20359,20380]",
      "dest": "argument_list [20359,20380]"
    },
    {
      "src": "method_invocation [93955,93993]",
      "dest": "method_invocation [95449,95487]"
    },
    {
      "src": "identifier: match [118900,118905]",
      "dest": "identifier: match [120394,120399]"
    },
    {
      "src": "type: int [186606,186609]",
      "dest": "type: int [188100,188103]"
    },
    {
      "src": "type: String [79742,79748]",
      "dest": "type: String [81236,81242]"
    },
    {
      "src": "method_invocation [64088,64112]",
      "dest": "method_invocation [65135,65159]"
    },
    {
      "src": "type: int [57615,57618]",
      "dest": "type: int [57955,57958]"
    },
    {
      "src": "binary_expression [235316,235321]",
      "dest": "binary_expression [236810,236815]"
    },
    {
      "src": "identifier: str [187723,187726]",
      "dest": "identifier: str [189217,189220]"
    },
    {
      "src": "type: char [178167,178171]",
      "dest": "type: char [179661,179665]"
    },
    {
      "src": "assignment_expression [23219,23257]",
      "dest": "assignment_expression [23219,23257]"
    },
    {
      "src": "block [189050,189085]",
      "dest": "block [190544,190579]"
    },
    {
      "src": "type: String [51832,51838]",
      "dest": "type: String [51832,51838]"
    },
    {
      "src": "identifier: shortestStrLen [227373,227387]",
      "dest": "identifier: shortestStrLen [228867,228881]"
    },
    {
      "src": "type: int [178194,178197]",
      "dest": "type: int [179688,179691]"
    },
    {
      "src": "binary_expression [66474,66484]",
      "dest": "binary_expression [67521,67531]"
    },
    {
      "src": "expression_statement [175415,175436]",
      "dest": "expression_statement [176909,176930]"
    },
    {
      "src": "decimal_integer_literal: 0 [241109,241110]",
      "dest": "decimal_integer_literal: 0 [242603,242604]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified, preserving all tokens, including empty tokens \n     * created by adjacent separators.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *, *)            = null\n     * StringUtils.splitPreserveAllTokens(\"\", *, *)              = []\n     * StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2) = [\"ab\", \"  de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3) = [\"ab\", \"\", \" de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4) = [\"ab\", \"\", \"\", \"de fg\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */ [113424,115408]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified, preserving all tokens, including empty tokens \n     * created by adjacent separators.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *, *)            = null\n     * StringUtils.splitPreserveAllTokens(\"\", *, *)              = []\n     * StringUtils.splitPreserveAllTokens(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 2) = [\"ab\", \"  de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 3) = [\"ab\", \"\", \" de fg\"]\n     * StringUtils.splitPreserveAllTokens(\"ab   de fg\", null, 4) = [\"ab\", \"\", \"\", \"de fg\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */ [114918,116902]"
    },
    {
      "src": "null_literal: null [47828,47832]",
      "dest": "null_literal: null [47828,47832]"
    },
    {
      "src": "identifier: startPos [46557,46565]",
      "dest": "identifier: startPos [46557,46565]"
    },
    {
      "src": "block [133986,134023]",
      "dest": "block [135480,135517]"
    },
    {
      "src": "identifier: remove [140402,140408]",
      "dest": "identifier: remove [141896,141902]"
    },
    {
      "src": "comparison_operator: == [70099,70101]",
      "dest": "comparison_operator: == [71593,71595]"
    },
    {
      "src": "identifier: str [81453,81456]",
      "dest": "identifier: str [82947,82950]"
    },
    {
      "src": "formal_parameter [90771,90783]",
      "dest": "formal_parameter [92265,92277]"
    },
    {
      "src": "identifier: searchList [155354,155364]",
      "dest": "identifier: searchList [156848,156858]"
    },
    {
      "src": "comparison_operator: != [161018,161020]",
      "dest": "comparison_operator: != [162512,162514]"
    },
    {
      "src": "null_literal: null [208081,208085]",
      "dest": "null_literal: null [209575,209579]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [198854,198927]",
      "dest": "line_comment: //----------------------------------------------------------------------- [200348,200421]"
    },
    {
      "src": "binary_expression [68108,68128]",
      "dest": "binary_expression [69602,69622]"
    },
    {
      "src": "formal_parameter [221894,221904]",
      "dest": "formal_parameter [223388,223398]"
    },
    {
      "src": "formal_parameter [125120,125134]",
      "dest": "formal_parameter [126614,126628]"
    },
    {
      "src": "expression_statement [236241,236299]",
      "dest": "expression_statement [237735,237793]"
    },
    {
      "src": "identifier: str [111291,111294]",
      "dest": "identifier: str [112785,112788]"
    },
    {
      "src": "identifier: EMPTY [130869,130874]",
      "dest": "identifier: EMPTY [132363,132368]"
    },
    {
      "src": "static: static [130663,130669]",
      "dest": "static: static [132157,132163]"
    },
    {
      "src": "identifier: splitWorker [113369,113380]",
      "dest": "identifier: splitWorker [114863,114874]"
    },
    {
      "src": "false: false [202152,202157]",
      "dest": "false: false [203646,203651]"
    },
    {
      "src": "binary_expression [210170,210180]",
      "dest": "binary_expression [211664,211674]"
    },
    {
      "src": "static: static [59470,59476]",
      "dest": "static: static [59863,59869]"
    },
    {
      "src": "catch_formal_parameter [25834,25862]",
      "dest": "catch_formal_parameter [25834,25862]"
    },
    {
      "src": "identifier: searchStr [35144,35153]",
      "dest": "identifier: searchStr [35144,35153]"
    },
    {
      "src": "comparison_operator: >= [166076,166078]",
      "dest": "comparison_operator: >= [167570,167572]"
    },
    {
      "src": "null_literal: null [176641,176645]",
      "dest": "null_literal: null [178135,178139]"
    },
    {
      "src": "type: String [113329,113335]",
      "dest": "type: String [114823,114829]"
    },
    {
      "src": "modifiers [217298,217311]",
      "dest": "modifiers [218792,218805]"
    },
    {
      "src": "if_statement [202111,202230]",
      "dest": "if_statement [203605,203724]"
    },
    {
      "src": "type: int [241101,241104]",
      "dest": "type: int [242595,242598]"
    },
    {
      "src": "binary_expression [209244,209250]",
      "dest": "binary_expression [210738,210744]"
    },
    {
      "src": "argument_list [92828,92843]",
      "dest": "argument_list [94322,94337]"
    },
    {
      "src": "argument_list [123992,124037]",
      "dest": "argument_list [125486,125531]"
    },
    {
      "src": "block [36513,36587]",
      "dest": "block [36513,36587]"
    },
    {
      "src": "identifier: ret [70415,70418]",
      "dest": "identifier: ret [71909,71912]"
    },
    {
      "src": "if_statement [76131,76180]",
      "dest": "if_statement [77625,77674]"
    },
    {
      "src": "identifier: leftPad [185725,185732]",
      "dest": "identifier: leftPad [187219,187226]"
    },
    {
      "src": "identifier: padStr [190860,190866]",
      "dest": "identifier: padStr [192354,192360]"
    },
    {
      "src": "catch: catch [25184,25189]",
      "dest": "catch: catch [25184,25189]"
    },
    {
      "src": "type: int [103142,103145]",
      "dest": "type: int [104636,104639]"
    },
    {
      "src": "logical_operator: || [65199,65201]",
      "dest": "logical_operator: || [66246,66248]"
    },
    {
      "src": "local_variable_declaration [204343,204364]",
      "dest": "local_variable_declaration [205837,205858]"
    },
    {
      "src": "identifier: cs [65151,65153]",
      "dest": "identifier: cs [66198,66200]"
    },
    {
      "src": "method_invocation [174564,174576]",
      "dest": "method_invocation [176058,176070]"
    },
    {
      "src": "assignment_expression [175051,175066]",
      "dest": "assignment_expression [176545,176560]"
    },
    {
      "src": "block [111268,111326]",
      "dest": "block [112762,112820]"
    },
    {
      "src": "type: boolean [244052,244059]",
      "dest": "type: boolean [245546,245553]"
    },
    {
      "src": "variable_declarator [89360,89407]",
      "dest": "variable_declarator [90854,90901]"
    },
    {
      "src": "affectation_operator: = [66601,66602]",
      "dest": "affectation_operator: = [67680,67681]"
    },
    {
      "src": "local_variable_declaration [160168,160182]",
      "dest": "local_variable_declaration [161662,161676]"
    },
    {
      "src": "identifier: append [222369,222375]",
      "dest": "identifier: append [223863,223869]"
    },
    {
      "src": "identifier: charAt [205868,205874]",
      "dest": "identifier: charAt [207362,207368]"
    },
    {
      "src": "identifier: str [174749,174752]",
      "dest": "identifier: str [176243,176246]"
    },
    {
      "src": "assignment_expression [117429,117442]",
      "dest": "assignment_expression [118923,118936]"
    },
    {
      "src": "argument_list [145523,145528]",
      "dest": "argument_list [147017,147022]"
    },
    {
      "src": "method_invocation [51963,51985]",
      "dest": "method_invocation [51963,51985]"
    },
    {
      "src": "identifier: textIndex [159901,159910]",
      "dest": "identifier: textIndex [161395,161404]"
    },
    {
      "src": "expression_statement [119197,119231]",
      "dest": "expression_statement [120691,120725]"
    },
    {
      "src": "increment_operator: ++ [131413,131415]",
      "dest": "increment_operator: ++ [132907,132909]"
    },
    {
      "src": "binary_expression [53207,53215]",
      "dest": "binary_expression [53207,53215]"
    },
    {
      "src": "type: int [127862,127865]",
      "dest": "type: int [129356,129359]"
    },
    {
      "src": "parenthesized_expression [72089,72105]",
      "dest": "parenthesized_expression [73583,73599]"
    },
    {
      "src": "identifier: i [236243,236244]",
      "dest": "identifier: i [237737,237738]"
    },
    {
      "src": "binary_expression [89316,89340]",
      "dest": "binary_expression [90810,90834]"
    },
    {
      "src": "null_literal: null [132439,132443]",
      "dest": "null_literal: null [133933,133937]"
    },
    {
      "src": "string_fragment: Strings must not be null [233864,233888]",
      "dest": "string_fragment: Strings must not be null [235358,235382]"
    },
    {
      "src": "return_statement [20661,20690]",
      "dest": "return_statement [20661,20690]"
    },
    {
      "src": "method_declaration [171681,171969]",
      "dest": "method_declaration [173175,173463]"
    },
    {
      "src": "variable_declarator [159027,159080]",
      "dest": "variable_declarator [160521,160574]"
    },
    {
      "src": "affectation_operator: = [150013,150014]",
      "dest": "affectation_operator: = [151507,151508]"
    },
    {
      "src": "identifier: str2 [223871,223875]",
      "dest": "identifier: str2 [225365,225369]"
    },
    {
      "src": "type: int [54702,54705]",
      "dest": "type: int [58003,58006]"
    },
    {
      "src": "binary_expression [14736,14747]",
      "dest": "binary_expression [14736,14747]"
    },
    {
      "src": "identifier: str [141625,141628]",
      "dest": "identifier: str [143119,143122]"
    },
    {
      "src": "block [235269,235302]",
      "dest": "block [236763,236796]"
    },
    {
      "src": "argument_list [134455,134466]",
      "dest": "argument_list [135949,135960]"
    },
    {
      "src": "method_invocation [239928,239940]",
      "dest": "method_invocation [241422,241434]"
    },
    {
      "src": "identifier: isEmpty [17133,17140]",
      "dest": "identifier: isEmpty [17133,17140]"
    },
    {
      "src": "block [110812,111212]",
      "dest": "block [112306,112706]"
    },
    {
      "src": "method_declaration [51801,51997]",
      "dest": "method_declaration [51801,51997]"
    },
    {
      "src": "arithmetic_operator: + [168593,168594]",
      "dest": "arithmetic_operator: + [170087,170088]"
    },
    {
      "src": "type: String [195418,195424]",
      "dest": "type: String [196912,196918]"
    },
    {
      "src": "comparison_operator: < [211326,211327]",
      "dest": "comparison_operator: < [212820,212821]"
    },
    {
      "src": "static: static [110325,110331]",
      "dest": "static: static [111819,111825]"
    },
    {
      "src": "identifier: d [236444,236445]",
      "dest": "identifier: d [237938,237939]"
    },
    {
      "src": "decimal_integer_literal: 1 [36490,36491]",
      "dest": "decimal_integer_literal: 1 [36490,36491]"
    },
    {
      "src": "true: true [119077,119081]",
      "dest": "true: true [120571,120575]"
    },
    {
      "src": "identifier: Character [123670,123679]",
      "dest": "identifier: Character [125164,125173]"
    },
    {
      "src": "type: int [199871,199874]",
      "dest": "type: int [201365,201368]"
    },
    {
      "src": "catch_type [25190,25212]",
      "dest": "catch_type [25190,25212]"
    },
    {
      "src": "variable_declarator [235527,235545]",
      "dest": "variable_declarator [237021,237039]"
    },
    {
      "src": "identifier: i [160637,160638]",
      "dest": "identifier: i [162131,162132]"
    },
    {
      "src": "decimal_integer_literal: 0 [36612,36613]",
      "dest": "decimal_integer_literal: 0 [36612,36613]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [89432,89447]",
      "dest": "identifier: INDEX_NOT_FOUND [90926,90941]"
    },
    {
      "src": "expression_statement [118036,118044]",
      "dest": "expression_statement [119530,119538]"
    },
    {
      "src": "decimal_integer_literal: 0 [228322,228323]",
      "dest": "decimal_integer_literal: 0 [229816,229817]"
    },
    {
      "src": "identifier: join [133767,133771]",
      "dest": "identifier: join [135261,135265]"
    },
    {
      "src": "affectation_operator: = [69861,69862]",
      "dest": "affectation_operator: = [71355,71356]"
    },
    {
      "src": "decimal_integer_literal: 1 [58112,58113]",
      "dest": "decimal_integer_literal: 1 [55145,55146]"
    },
    {
      "src": "identifier: buf [131330,131333]",
      "dest": "identifier: buf [132824,132827]"
    },
    {
      "src": "comparison_operator: == [86529,86531]",
      "dest": "comparison_operator: == [88023,88025]"
    },
    {
      "src": "type: T [213872,213873]",
      "dest": "type: T [215366,215367]"
    },
    {
      "src": "field_access [104302,104331]",
      "dest": "field_access [105796,105825]"
    },
    {
      "src": "formal_parameters [195435,195452]",
      "dest": "formal_parameters [196929,196946]"
    },
    {
      "src": "identifier: tmp [72242,72245]",
      "dest": "identifier: tmp [73736,73739]"
    },
    {
      "src": "method_invocation [50880,50892]",
      "dest": "method_invocation [50880,50892]"
    },
    {
      "src": "identifier: noMoreMatchesForReplIndex [161525,161550]",
      "dest": "identifier: noMoreMatchesForReplIndex [163019,163044]"
    },
    {
      "src": "logical_operator: || [188908,188910]",
      "dest": "logical_operator: || [190402,190404]"
    },
    {
      "src": "parenthesized_expression [158411,158427]",
      "dest": "parenthesized_expression [159905,159921]"
    },
    {
      "src": "identifier: toString [127765,127773]",
      "dest": "identifier: toString [129259,129267]"
    },
    {
      "src": "identifier: i [53264,53265]",
      "dest": "identifier: i [53264,53265]"
    },
    {
      "src": "visibility: public [107693,107699]",
      "dest": "visibility: public [109187,109193]"
    },
    {
      "src": "identifier: index [36604,36609]",
      "dest": "identifier: index [36604,36609]"
    },
    {
      "src": "variable_declarator [222316,222351]",
      "dest": "variable_declarator [223810,223845]"
    },
    {
      "src": "identifier: concat [181901,181907]",
      "dest": "identifier: concat [183395,183401]"
    },
    {
      "src": "block [26206,26326]",
      "dest": "block [26206,26326]"
    },
    {
      "src": "dimensions [235528,235530]",
      "dest": "dimensions [237022,237024]"
    },
    {
      "src": "array_access [137297,137309]",
      "dest": "array_access [138791,138803]"
    },
    {
      "src": "identifier: length [129332,129338]",
      "dest": "identifier: length [130826,130832]"
    },
    {
      "src": "formal_parameter [132325,132339]",
      "dest": "formal_parameter [133819,133833]"
    },
    {
      "src": "affectation_operator: = [178247,178248]",
      "dest": "affectation_operator: = [179741,179742]"
    },
    {
      "src": "increment_operator: ++ [202093,202095]",
      "dest": "increment_operator: ++ [203587,203589]"
    },
    {
      "src": "identifier: toString [195793,195801]",
      "dest": "identifier: toString [197287,197295]"
    },
    {
      "src": "affectation_operator: = [111034,111035]",
      "dest": "affectation_operator: = [112528,112529]"
    },
    {
      "src": "type: StringBuilder [127800,127813]",
      "dest": "type: StringBuilder [129294,129307]"
    },
    {
      "src": "false: false [118209,118214]",
      "dest": "false: false [119703,119708]"
    },
    {
      "src": "identifier: join [215774,215778]",
      "dest": "identifier: join [217268,217272]"
    },
    {
      "src": "binary_expression [58076,58114]",
      "dest": "binary_expression [55109,55147]"
    },
    {
      "src": "identifier: str [138694,138697]",
      "dest": "identifier: str [140188,140191]"
    },
    {
      "src": "formal_parameters [122064,122076]",
      "dest": "formal_parameters [123558,123570]"
    },
    {
      "src": "identifier: end [150642,150645]",
      "dest": "identifier: end [152136,152139]"
    },
    {
      "src": "binary_expression [123604,123651]",
      "dest": "binary_expression [125098,125145]"
    },
    {
      "src": "identifier: i [57727,57728]",
      "dest": "identifier: i [54835,54836]"
    },
    {
      "src": "identifier: len [106346,106349]",
      "dest": "identifier: len [107840,107843]"
    },
    {
      "src": "logical_operator: && [174688,174690]",
      "dest": "logical_operator: && [176182,176184]"
    },
    {
      "src": "variable_declarator [198357,198363]",
      "dest": "variable_declarator [199851,199857]"
    },
    {
      "src": "block [143418,143498]",
      "dest": "block [144912,144992]"
    },
    {
      "src": "formal_parameter [116325,116346]",
      "dest": "formal_parameter [117819,117840]"
    },
    {
      "src": "type: String[] [101206,101214]",
      "dest": "type: String[] [102700,102708]"
    },
    {
      "src": "method_invocation [222462,222486]",
      "dest": "method_invocation [223956,223980]"
    },
    {
      "src": "affectation_operator: = [117311,117312]",
      "dest": "affectation_operator: = [118805,118806]"
    },
    {
      "src": "identifier: i [160662,160663]",
      "dest": "identifier: i [162156,162157]"
    },
    {
      "src": "identifier: EMPTY [86590,86595]",
      "dest": "identifier: EMPTY [88084,88089]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets <code>len</code> characters from the middle of a String.</p>\n     *\n     * <p>If <code>len</code> characters are not available, the remainder\n     * of the String will be returned without an exception. If the\n     * String is <code>null</code>, <code>null</code> will be returned.\n     * An exception is thrown if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.mid(null, *, *)    = null\n     * StringUtils.mid(*, *, -ve)     = \"\"\n     * StringUtils.mid(\"\", 0, *)      = \"\"\n     * StringUtils.mid(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.mid(\"abc\", 0, 4)   = \"abc\"\n     * StringUtils.mid(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.mid(\"abc\", 4, 2)   = \"\"\n     * StringUtils.mid(\"abc\", -2, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the characters from, may be null\n     * @param pos  the position to start from, negative treated as zero\n     * @param len  the length of the required String, must be zero or positive\n     * @return the middle characters, <code>null</code> if null String input\n     */ [78658,79712]",
      "dest": "block_comment:     \n     * <p>Gets <code>len</code> characters from the middle of a String.</p>\n     *\n     * <p>If <code>len</code> characters are not available, the remainder\n     * of the String will be returned without an exception. If the\n     * String is <code>null</code>, <code>null</code> will be returned.\n     * An exception is thrown if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.mid(null, *, *)    = null\n     * StringUtils.mid(*, *, -ve)     = \"\"\n     * StringUtils.mid(\"\", 0, *)      = \"\"\n     * StringUtils.mid(\"abc\", 0, 2)   = \"ab\"\n     * StringUtils.mid(\"abc\", 0, 4)   = \"abc\"\n     * StringUtils.mid(\"abc\", 2, 4)   = \"c\"\n     * StringUtils.mid(\"abc\", 4, 2)   = \"\"\n     * StringUtils.mid(\"abc\", -2, 2)  = \"ab\"\n     * </pre>\n     *\n     * @param str  the String to get the characters from, may be null\n     * @param pos  the position to start from, negative treated as zero\n     * @param len  the length of the required String, must be zero or positive\n     * @return the middle characters, <code>null</code> if null String input\n     */ [80152,81206]"
    },
    {
      "src": "formal_parameters [35124,35167]",
      "dest": "formal_parameters [35124,35167]"
    },
    {
      "src": "parenthesized_expression [118584,118612]",
      "dest": "parenthesized_expression [120078,120106]"
    },
    {
      "src": "formal_parameter [20129,20139]",
      "dest": "formal_parameter [20129,20139]"
    },
    {
      "src": "identifier: hasNext [133975,133982]",
      "dest": "identifier: hasNext [135469,135476]"
    },
    {
      "src": "return_statement [202249,202261]",
      "dest": "return_statement [203743,203755]"
    },
    {
      "src": "case: case [175142,175146]",
      "dest": "case: case [176636,176640]"
    },
    {
      "src": "identifier: separatorChars [116922,116936]",
      "dest": "identifier: separatorChars [118416,118430]"
    },
    {
      "src": "type: String [101254,101260]",
      "dest": "type: String [102748,102754]"
    },
    {
      "src": "affectation_operator: = [49791,49792]",
      "dest": "affectation_operator: = [49791,49792]"
    },
    {
      "src": "formal_parameter [9593,9608]",
      "dest": "formal_parameter [9593,9608]"
    },
    {
      "src": "identifier: rightPad [181798,181806]",
      "dest": "identifier: rightPad [183292,183300]"
    },
    {
      "src": "method_invocation [219582,219594]",
      "dest": "method_invocation [221076,221088]"
    },
    {
      "src": "expression_statement [235469,235475]",
      "dest": "expression_statement [236963,236969]"
    },
    {
      "src": "comparison_operator: == [158293,158295]",
      "dest": "comparison_operator: == [159787,159789]"
    },
    {
      "src": "false: false [211426,211431]",
      "dest": "false: false [212920,212925]"
    },
    {
      "src": "assignment_expression [228736,228757]",
      "dest": "assignment_expression [230230,230251]"
    },
    {
      "src": "identifier: toCharArray [65303,65314]",
      "dest": "identifier: toCharArray [66350,66361]"
    },
    {
      "src": "new: new [137427,137430]",
      "dest": "new: new [138921,138924]"
    },
    {
      "src": "return_statement [207061,207074]",
      "dest": "return_statement [208555,208568]"
    },
    {
      "src": "if_statement [60818,60917]",
      "dest": "if_statement [61205,61304]"
    },
    {
      "src": "static: static [157785,157791]",
      "dest": "static: static [159279,159285]"
    },
    {
      "src": "block [113352,113418]",
      "dest": "block [114846,114912]"
    },
    {
      "src": "identifier: separatorChar [93923,93936]",
      "dest": "identifier: separatorChar [95417,95430]"
    },
    {
      "src": "block [60870,60917]",
      "dest": "block [61257,61304]"
    },
    {
      "src": "parenthesized_expression [241212,241258]",
      "dest": "parenthesized_expression [242706,242752]"
    },
    {
      "src": "local_variable_declaration [189001,189026]",
      "dest": "local_variable_declaration [190495,190520]"
    },
    {
      "src": "for_statement [165930,166321]",
      "dest": "for_statement [167424,167815]"
    },
    {
      "src": "logical_operator: || [138741,138743]",
      "dest": "logical_operator: || [140235,140237]"
    },
    {
      "src": "type: char [135344,135348]",
      "dest": "type: char [136838,136842]"
    },
    {
      "src": "arithmetic_operator: - [173402,173403]",
      "dest": "arithmetic_operator: - [174896,174897]"
    },
    {
      "src": "static: static [188825,188831]",
      "dest": "static: static [190319,190325]"
    },
    {
      "src": "for_statement [174991,175085]",
      "dest": "for_statement [176485,176579]"
    },
    {
      "src": "identifier: array [129305,129310]",
      "dest": "identifier: array [130799,130804]"
    },
    {
      "src": "affectation_operator: = [24439,24440]",
      "dest": "affectation_operator: = [24439,24440]"
    },
    {
      "src": "line_comment: // see if we need to keep searching for this [161810,161854]",
      "dest": "line_comment: // see if we need to keep searching for this [163304,163348]"
    },
    {
      "src": "local_variable_declaration [49785,49802]",
      "dest": "local_variable_declaration [49785,49802]"
    },
    {
      "src": "method_invocation [117762,117786]",
      "dest": "method_invocation [119256,119280]"
    },
    {
      "src": "parenthesized_expression [76192,76201]",
      "dest": "parenthesized_expression [77686,77695]"
    },
    {
      "src": "formal_parameter [42235,42245]",
      "dest": "formal_parameter [42235,42245]"
    },
    {
      "src": "block [174364,175750]",
      "dest": "block [175858,177244]"
    },
    {
      "src": "identifier: pads [185570,185574]",
      "dest": "identifier: pads [187064,187068]"
    },
    {
      "src": "binary_expression [190514,190525]",
      "dest": "binary_expression [192008,192019]"
    },
    {
      "src": "identifier: str [170513,170516]",
      "dest": "identifier: str [172007,172010]"
    },
    {
      "src": "binary_expression [173322,173333]",
      "dest": "binary_expression [174816,174827]"
    },
    {
      "src": "decimal_integer_literal: 0 [14849,14850]",
      "dest": "decimal_integer_literal: 0 [14849,14850]"
    },
    {
      "src": "identifier: size [188862,188866]",
      "dest": "identifier: size [190356,190360]"
    },
    {
      "src": "parenthesized_expression [132426,132444]",
      "dest": "parenthesized_expression [133920,133938]"
    },
    {
      "src": "type: int [89356,89359]",
      "dest": "type: int [90850,90853]"
    },
    {
      "src": "line_comment: // two or more elements [132695,132718]",
      "dest": "line_comment: // two or more elements [134189,134212]"
    },
    {
      "src": "identifier: j [66783,66784]",
      "dest": "identifier: j [67902,67903]"
    },
    {
      "src": "identifier: size [181372,181376]",
      "dest": "identifier: size [182866,182870]"
    },
    {
      "src": "return_statement [178276,178299]",
      "dest": "return_statement [179770,179793]"
    },
    {
      "src": "object_creation_expression [134218,134240]",
      "dest": "object_creation_expression [135712,135734]"
    },
    {
      "src": "array_access [66771,66785]",
      "dest": "array_access [67890,67904]"
    },
    {
      "src": "binary_expression [90931,90942]",
      "dest": "binary_expression [92425,92436]"
    },
    {
      "src": "identifier: splitWorker [109687,109698]",
      "dest": "identifier: splitWorker [111181,111192]"
    },
    {
      "src": "method_invocation [62555,62578]",
      "dest": "method_invocation [63308,63331]"
    },
    {
      "src": "identifier: textLength [162258,162268]",
      "dest": "identifier: textLength [163752,163762]"
    },
    {
      "src": "return_statement [174726,174764]",
      "dest": "return_statement [176220,176258]"
    },
    {
      "src": "identifier: i [116826,116827]",
      "dest": "identifier: i [118320,118321]"
    },
    {
      "src": "formal_parameter [155081,155100]",
      "dest": "formal_parameter [156575,156594]"
    },
    {
      "src": "logical_operator: && [185682,185684]",
      "dest": "logical_operator: && [187176,187178]"
    },
    {
      "src": "identifier: i [235938,235939]",
      "dest": "identifier: i [237432,237433]"
    },
    {
      "src": "if_statement [134404,134481]",
      "dest": "if_statement [135898,135975]"
    },
    {
      "src": "visibility: public [68007,68013]",
      "dest": "visibility: public [69501,69507]"
    },
    {
      "src": "block [118559,119017]",
      "dest": "block [120053,120511]"
    },
    {
      "src": "identifier: pos [79952,79955]",
      "dest": "identifier: pos [81446,81449]"
    },
    {
      "src": "block [79879,79916]",
      "dest": "block [81373,81410]"
    },
    {
      "src": "ternary_expression [27487,27530]",
      "dest": "ternary_expression [27487,27530]"
    },
    {
      "src": "if_statement [210166,210234]",
      "dest": "if_statement [211660,211728]"
    },
    {
      "src": "binary_expression [181616,181629]",
      "dest": "binary_expression [183110,183123]"
    },
    {
      "src": "comparison_operator: <= [181763,181765]",
      "dest": "comparison_operator: <= [183257,183259]"
    },
    {
      "src": "identifier: str [140303,140306]",
      "dest": "identifier: str [141797,141800]"
    },
    {
      "src": "if_statement [149858,149973]",
      "dest": "if_statement [151352,151467]"
    },
    {
      "src": "identifier: str [244329,244332]",
      "dest": "identifier: str [245823,245826]"
    },
    {
      "src": "parenthesized_expression [111234,111266]",
      "dest": "parenthesized_expression [112728,112760]"
    },
    {
      "src": "object_creation_expression [132747,132769]",
      "dest": "object_creation_expression [134241,134263]"
    },
    {
      "src": "return_statement [45105,45158]",
      "dest": "return_statement [45105,45158]"
    },
    {
      "src": "update_expression [175350,175353]",
      "dest": "update_expression [176844,176847]"
    },
    {
      "src": "return_statement [244369,244445]",
      "dest": "return_statement [245863,245939]"
    },
    {
      "src": "identifier: end [168570,168573]",
      "dest": "identifier: end [170064,170067]"
    },
    {
      "src": "identifier: str [69723,69726]",
      "dest": "identifier: str [71217,71220]"
    },
    {
      "src": "identifier: stringPos [228684,228693]",
      "dest": "identifier: stringPos [230178,230187]"
    },
    {
      "src": "block [123698,123960]",
      "dest": "block [125192,125454]"
    },
    {
      "src": "formal_parameter [242370,242380]",
      "dest": "formal_parameter [243864,243874]"
    },
    {
      "src": "block [136237,136273]",
      "dest": "block [137731,137767]"
    },
    {
      "src": "block_comment:     \n     * <p>Find the first index of any of a set of potential substrings.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.\n     * A <code>null</code> search array entry will be ignored, but a search\n     * array containing \"\" will return <code>0</code> if <code>str</code> is not\n     * null. This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                     = -1\n     * StringUtils.indexOfAny(*, null)                     = -1\n     * StringUtils.indexOfAny(*, [])                       = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"])   = 2\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"])   = 2\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"])   = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"zab\",\"aby\"]) = 1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"\"])          = 0\n     * StringUtils.indexOfAny(\"\", [\"\"])                    = 0\n     * StringUtils.indexOfAny(\"\", [\"a\"])                   = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStrs  the Strings to search for, may be null\n     * @return the first index of any of the searchStrs in str, -1 if no match\n     */ [68343,69682]",
      "dest": "block_comment:     \n     * <p>Find the first index of any of a set of potential substrings.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.\n     * A <code>null</code> search array entry will be ignored, but a search\n     * array containing \"\" will return <code>0</code> if <code>str</code> is not\n     * null. This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                     = -1\n     * StringUtils.indexOfAny(*, null)                     = -1\n     * StringUtils.indexOfAny(*, [])                       = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"])   = 2\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"])   = 2\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"])   = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"zab\",\"aby\"]) = 1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", [\"\"])          = 0\n     * StringUtils.indexOfAny(\"\", [\"\"])                    = 0\n     * StringUtils.indexOfAny(\"\", [\"a\"])                   = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStrs  the Strings to search for, may be null\n     * @return the first index of any of the searchStrs in str, -1 if no match\n     */ [69837,71176]"
    },
    {
      "src": "line_comment: //placeholder to assist in swapping p and d [235663,235706]",
      "dest": "line_comment: //placeholder to assist in swapping p and d [237157,237200]"
    },
    {
      "src": "identifier: start [18711,18716]",
      "dest": "identifier: start [18711,18716]"
    },
    {
      "src": "expression_statement [198601,198632]",
      "dest": "expression_statement [200095,200126]"
    },
    {
      "src": "identifier: replacementList [158243,158258]",
      "dest": "identifier: replacementList [159737,159752]"
    },
    {
      "src": "block [127515,128124]",
      "dest": "block [129009,129618]"
    },
    {
      "src": "identifier: str [29543,29546]",
      "dest": "identifier: str [29543,29546]"
    },
    {
      "src": "parenthesized_expression [20190,20232]",
      "dest": "parenthesized_expression [20190,20232]"
    },
    {
      "src": "local_variable_declaration [54743,54766]",
      "dest": "local_variable_declaration [58047,58070]"
    },
    {
      "src": "block_comment:     \n     * <p>Centers a String in a larger String of size <code>size</code>\n     * using the space character (' ').<p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A <code>null</code> String returns <code>null</code>.\n     * A negative size is treated as zero.</p>\n     *\n     * <p>Equivalent to <code>center(str, size, \" \")</code>.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *)   = null\n     * StringUtils.center(\"\", 4)     = \"    \"\n     * StringUtils.center(\"ab\", -1)  = \"ab\"\n     * StringUtils.center(\"ab\", 4)   = \" ab \"\n     * StringUtils.center(\"abcd\", 2) = \"abcd\"\n     * StringUtils.center(\"a\", 4)    = \" a  \"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @return centered String, <code>null</code> if null String input\n     */ [186782,187683]",
      "dest": "block_comment:     \n     * <p>Centers a String in a larger String of size <code>size</code>\n     * using the space character (' ').<p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A <code>null</code> String returns <code>null</code>.\n     * A negative size is treated as zero.</p>\n     *\n     * <p>Equivalent to <code>center(str, size, \" \")</code>.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *)   = null\n     * StringUtils.center(\"\", 4)     = \"    \"\n     * StringUtils.center(\"ab\", -1)  = \"ab\"\n     * StringUtils.center(\"ab\", 4)   = \" ab \"\n     * StringUtils.center(\"abcd\", 2) = \"abcd\"\n     * StringUtils.center(\"a\", 4)    = \" a  \"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @return centered String, <code>null</code> if null String input\n     */ [188276,189177]"
    },
    {
      "src": "identifier: replaceAll [25154,25164]",
      "dest": "identifier: replaceAll [25154,25164]"
    },
    {
      "src": "identifier: m [235320,235321]",
      "dest": "identifier: m [236814,236815]"
    },
    {
      "src": "!: ! [132605,132606]",
      "dest": "!: ! [134099,134100]"
    },
    {
      "src": "parenthesized_expression [185333,185346]",
      "dest": "parenthesized_expression [186827,186840]"
    },
    {
      "src": "identifier: i [198382,198383]",
      "dest": "identifier: i [199876,199877]"
    },
    {
      "src": "static: static [219322,219328]",
      "dest": "static: static [220816,220822]"
    },
    {
      "src": "identifier: padLen [181943,181949]",
      "dest": "identifier: padLen [183437,183443]"
    },
    {
      "src": "line_comment: // Delete [136338,136347]",
      "dest": "line_comment: // Delete [137832,137841]"
    },
    {
      "src": "identifier: p [236276,236277]",
      "dest": "identifier: p [237770,237771]"
    },
    {
      "src": "decimal_integer_literal: 0 [79854,79855]",
      "dest": "decimal_integer_literal: 0 [81348,81349]"
    },
    {
      "src": "array_access [236266,236272]",
      "dest": "array_access [237760,237766]"
    },
    {
      "src": "variable_declarator [131330,131362]",
      "dest": "variable_declarator [132824,132856]"
    },
    {
      "src": "type: String [242382,242388]",
      "dest": "type: String [243876,243882]"
    },
    {
      "src": "local_variable_declaration [202073,202083]",
      "dest": "local_variable_declaration [203567,203577]"
    },
    {
      "src": "identifier: separator [127964,127973]",
      "dest": "identifier: separator [129458,129467]"
    },
    {
      "src": "block [91275,91313]",
      "dest": "block [92769,92807]"
    },
    {
      "src": "identifier: searchLen [66733,66742]",
      "dest": "identifier: searchLen [67852,67861]"
    },
    {
      "src": "return_statement [235283,235292]",
      "dest": "return_statement [236777,236786]"
    },
    {
      "src": "affectation_operator: = [168390,168391]",
      "dest": "affectation_operator: = [169884,169885]"
    },
    {
      "src": "argument_list [214660,214662]",
      "dest": "argument_list [216154,216156]"
    },
    {
      "src": "null_literal: null [135413,135417]",
      "dest": "null_literal: null [136907,136911]"
    },
    {
      "src": "expression_statement [161098,161125]",
      "dest": "expression_statement [162592,162619]"
    },
    {
      "src": "identifier: str [11687,11690]",
      "dest": "identifier: str [11687,11690]"
    },
    {
      "src": "binary_expression [185786,185800]",
      "dest": "binary_expression [187280,187294]"
    },
    {
      "src": "return_statement [14763,14775]",
      "dest": "return_statement [14763,14775]"
    },
    {
      "src": ":: : [213948,213949]",
      "dest": ":: : [215442,215443]"
    },
    {
      "src": "method_declaration [43302,43506]",
      "dest": "method_declaration [43302,43506]"
    },
    {
      "src": "null_literal: null [89222,89226]",
      "dest": "null_literal: null [90716,90720]"
    },
    {
      "src": "type: String [217330,217336]",
      "dest": "type: String [218824,218830]"
    },
    {
      "src": "binary_expression [161525,161578]",
      "dest": "binary_expression [163019,163072]"
    },
    {
      "src": "method_invocation [56051,56071]",
      "dest": "method_invocation [56397,56417]"
    },
    {
      "src": "parenthesized_expression [203120,203132]",
      "dest": "parenthesized_expression [204614,204626]"
    },
    {
      "src": "identifier: startPos [42397,42405]",
      "dest": "identifier: startPos [42397,42405]"
    },
    {
      "src": "field_access [170449,170461]",
      "dest": "field_access [171943,171955]"
    },
    {
      "src": "identifier: preserveAllTokens [104137,104154]",
      "dest": "identifier: preserveAllTokens [105631,105648]"
    },
    {
      "src": "object_creation_expression [124146,124194]",
      "dest": "object_creation_expression [125640,125688]"
    },
    {
      "src": "argument_list [222343,222351]",
      "dest": "argument_list [223837,223845]"
    },
    {
      "src": "formal_parameter [133772,133792]",
      "dest": "formal_parameter [135266,135286]"
    },
    {
      "src": "identifier: charAt [236106,236112]",
      "dest": "identifier: charAt [237600,237606]"
    },
    {
      "src": "null_literal: null [8717,8721]",
      "dest": "null_literal: null [8717,8721]"
    },
    {
      "src": "identifier: searchList [152606,152616]",
      "dest": "identifier: searchList [154100,154110]"
    },
    {
      "src": "formal_parameter [60788,60806]",
      "dest": "formal_parameter [61175,61193]"
    },
    {
      "src": "identifier: i [39939,39940]",
      "dest": "identifier: i [39939,39940]"
    },
    {
      "src": "argument_list [89507,89509]",
      "dest": "argument_list [91001,91003]"
    },
    {
      "src": "identifier: searchStr [36217,36226]",
      "dest": "identifier: searchStr [36217,36226]"
    },
    {
      "src": "argument_list [106436,106438]",
      "dest": "argument_list [107930,107932]"
    },
    {
      "src": "identifier: LF [170316,170318]",
      "dest": "identifier: LF [171810,171812]"
    },
    {
      "src": "null_literal: null [194537,194541]",
      "dest": "null_literal: null [196031,196035]"
    },
    {
      "src": "if_statement [173082,173135]",
      "dest": "if_statement [174576,174629]"
    },
    {
      "src": "identifier: tempIndex [161745,161754]",
      "dest": "identifier: tempIndex [163239,163248]"
    },
    {
      "src": "identifier: t_j [236002,236005]",
      "dest": "identifier: t_j [237496,237499]"
    },
    {
      "src": "return_statement [51924,51937]",
      "dest": "return_statement [51924,51937]"
    },
    {
      "src": "type: String [192657,192663]",
      "dest": "type: String [194151,194157]"
    },
    {
      "src": "assignment_expression [162115,162131]",
      "dest": "assignment_expression [163609,163625]"
    },
    {
      "src": ":: : [61008,61009]",
      "dest": ":: : [61467,61468]"
    },
    {
      "src": "update_expression [228629,228639]",
      "dest": "update_expression [230123,230133]"
    },
    {
      "src": "return_statement [11701,11732]",
      "dest": "return_statement [11701,11732]"
    },
    {
      "src": "argument_list [75849,75851]",
      "dest": "argument_list [77343,77345]"
    },
    {
      "src": "?: ? [131214,131215]",
      "dest": "?: ? [132708,132709]"
    },
    {
      "src": "binary_expression [127919,127933]",
      "dest": "binary_expression [129413,129427]"
    },
    {
      "src": "return_statement [239175,239212]",
      "dest": "return_statement [240669,240706]"
    },
    {
      "src": "identifier: len [117268,117271]",
      "dest": "identifier: len [118762,118765]"
    },
    {
      "src": "return_statement [20480,20491]",
      "dest": "return_statement [20480,20491]"
    },
    {
      "src": "type: ArrayList<String> [104581,104598]",
      "dest": "type: ArrayList<String> [106075,106092]"
    },
    {
      "src": "if_statement [123521,123587]",
      "dest": "if_statement [125015,125081]"
    },
    {
      "src": "identifier: strLen [196744,196750]",
      "dest": "identifier: strLen [198238,198244]"
    },
    {
      "src": "decimal_integer_literal: 0 [73596,73597]",
      "dest": "decimal_integer_literal: 0 [75090,75091]"
    },
    {
      "src": "method_invocation [29466,29478]",
      "dest": "method_invocation [29466,29478]"
    },
    {
      "src": "logical_operator: && [225198,225200]",
      "dest": "logical_operator: && [226692,226694]"
    },
    {
      "src": "visibility: public [59463,59469]",
      "dest": "visibility: public [59856,59862]"
    },
    {
      "src": "line_comment: // where WHITESPACE is a string of all whitespace characters [5398,5458]",
      "dest": "line_comment: // where WHITESPACE is a string of all whitespace characters [5398,5458]"
    },
    {
      "src": "binary_expression [168245,168256]",
      "dest": "binary_expression [169739,169750]"
    },
    {
      "src": "identifier: output2 [175415,175422]",
      "dest": "identifier: output2 [176909,176916]"
    },
    {
      "src": "binary_expression [199899,199947]",
      "dest": "binary_expression [201393,201441]"
    },
    {
      "src": "type: int [86449,86452]",
      "dest": "type: int [87943,87946]"
    },
    {
      "src": "if_statement [171831,171943]",
      "dest": "if_statement [173325,173437]"
    },
    {
      "src": "formal_parameters [191871,191883]",
      "dest": "formal_parameters [193365,193377]"
    },
    {
      "src": "decimal_integer_literal: 0 [49727,49728]",
      "dest": "decimal_integer_literal: 0 [49727,49728]"
    },
    {
      "src": "logical_operator: || [90828,90830]",
      "dest": "logical_operator: || [92322,92324]"
    },
    {
      "src": "return_statement [171801,171812]",
      "dest": "return_statement [173295,173306]"
    },
    {
      "src": "method_invocation [241015,241048]",
      "dest": "method_invocation [242509,242542]"
    },
    {
      "src": "formal_parameters [109637,109669]",
      "dest": "formal_parameters [111131,111163]"
    },
    {
      "src": "parenthesized_expression [79785,79798]",
      "dest": "parenthesized_expression [81279,81292]"
    },
    {
      "src": "argument_list [83356,83382]",
      "dest": "argument_list [84850,84876]"
    },
    {
      "src": "comparison_operator: == [227172,227174]",
      "dest": "comparison_operator: == [228666,228668]"
    },
    {
      "src": "formal_parameter [53003,53019]",
      "dest": "formal_parameter [53003,53019]"
    },
    {
      "src": "identifier: searchStr [46694,46703]",
      "dest": "identifier: searchStr [46694,46703]"
    },
    {
      "src": "identifier: ch0 [175390,175393]",
      "dest": "identifier: ch0 [176884,176887]"
    },
    {
      "src": "decimal_integer_literal: 0 [129323,129324]",
      "dest": "decimal_integer_literal: 0 [130817,130818]"
    },
    {
      "src": "parenthesized_expression [132604,132625]",
      "dest": "parenthesized_expression [134098,134119]"
    },
    {
      "src": "block [210197,210234]",
      "dest": "block [211691,211728]"
    },
    {
      "src": "method_invocation [127953,127974]",
      "dest": "method_invocation [129447,129468]"
    },
    {
      "src": "identifier: buf [134325,134328]",
      "dest": "identifier: buf [135819,135822]"
    },
    {
      "src": "binary_expression [168556,168573]",
      "dest": "binary_expression [170050,170067]"
    },
    {
      "src": "visibility: public [185254,185260]",
      "dest": "visibility: public [186748,186754]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [86506,86521]",
      "dest": "identifier: INDEX_NOT_FOUND [88000,88015]"
    },
    {
      "src": "decimal_integer_literal: 0 [76199,76200]",
      "dest": "decimal_integer_literal: 0 [77693,77694]"
    },
    {
      "src": "identifier: repeat [162440,162446]",
      "dest": "identifier: repeat [163934,163940]"
    },
    {
      "src": "comparison_operator: < [49640,49641]",
      "dest": "comparison_operator: < [49640,49641]"
    },
    {
      "src": "method_invocation [10700,10710]",
      "dest": "method_invocation [10700,10710]"
    },
    {
      "src": "identifier: trim [12697,12701]",
      "dest": "identifier: trim [12697,12701]"
    },
    {
      "src": "method_invocation [175178,175191]",
      "dest": "method_invocation [176672,176685]"
    },
    {
      "src": "identifier: padding [186112,186119]",
      "dest": "identifier: padding [187606,187613]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets the minimum of three <code>int</code> values.</p>\n     *\n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     */ [236625,236826]",
      "dest": "block_comment:     \n     * <p>Gets the minimum of three <code>int</code> values.</p>\n     *\n     * @param a  value 1\n     * @param b  value 2\n     * @param c  value 3\n     * @return  the smallest of the values\n     */ [238119,238320]"
    },
    {
      "src": "identifier: maxWidth [220322,220330]",
      "dest": "identifier: maxWidth [221816,221824]"
    },
    {
      "src": "block_comment:     \n     * <p>Remove the last character from a String.</p>\n     *\n     * <p>If the String ends in <code>\\r\\n</code>, then remove both\n     * of them.</p>\n     *\n     * <pre>\n     * StringUtils.chop(null)          = null\n     * StringUtils.chop(\"\")            = \"\"\n     * StringUtils.chop(\"abc \\r\")      = \"abc \"\n     * StringUtils.chop(\"abc\\n\")       = \"abc\"\n     * StringUtils.chop(\"abc\\r\\n\")     = \"abc\"\n     * StringUtils.chop(\"abc\")         = \"ab\"\n     * StringUtils.chop(\"abc\\nabc\")    = \"abc\\nab\"\n     * StringUtils.chop(\"a\")           = \"\"\n     * StringUtils.chop(\"\\r\")          = \"\"\n     * StringUtils.chop(\"\\n\")          = \"\"\n     * StringUtils.chop(\"\\r\\n\")        = \"\"\n     * </pre>\n     *\n     * @param str  the String to chop last character from, may be null\n     * @return String without last character, <code>null</code> if null String input\n     */ [172069,172932]",
      "dest": "block_comment:     \n     * <p>Remove the last character from a String.</p>\n     *\n     * <p>If the String ends in <code>\\r\\n</code>, then remove both\n     * of them.</p>\n     *\n     * <pre>\n     * StringUtils.chop(null)          = null\n     * StringUtils.chop(\"\")            = \"\"\n     * StringUtils.chop(\"abc \\r\")      = \"abc \"\n     * StringUtils.chop(\"abc\\n\")       = \"abc\"\n     * StringUtils.chop(\"abc\\r\\n\")     = \"abc\"\n     * StringUtils.chop(\"abc\")         = \"ab\"\n     * StringUtils.chop(\"abc\\nabc\")    = \"abc\\nab\"\n     * StringUtils.chop(\"a\")           = \"\"\n     * StringUtils.chop(\"\\r\")          = \"\"\n     * StringUtils.chop(\"\\n\")          = \"\"\n     * StringUtils.chop(\"\\r\\n\")        = \"\"\n     * </pre>\n     *\n     * @param str  the String to chop last character from, may be null\n     * @return String without last character, <code>null</code> if null String input\n     */ [173563,174426]"
    },
    {
      "src": "method_invocation [49513,49525]",
      "dest": "method_invocation [49513,49525]"
    },
    {
      "src": "identifier: str [191898,191901]",
      "dest": "identifier: str [193392,193395]"
    },
    {
      "src": "true: true [161945,161949]",
      "dest": "true: true [163439,163443]"
    },
    {
      "src": "parenthesized_expression [66770,66792]",
      "dest": "parenthesized_expression [67889,67911]"
    },
    {
      "src": "modifiers [78357,78370]",
      "dest": "modifiers [79851,79864]"
    },
    {
      "src": "arithmetic_operator: + [235542,235543]",
      "dest": "arithmetic_operator: + [237036,237037]"
    },
    {
      "src": "affectation_operator: += [160731,160733]",
      "dest": "affectation_operator: += [162225,162227]"
    },
    {
      "src": "visibility: private [35997,36004]",
      "dest": "visibility: private [35997,36004]"
    },
    {
      "src": "identifier: i [131435,131436]",
      "dest": "identifier: i [132929,132930]"
    },
    {
      "src": "identifier: length [240046,240052]",
      "dest": "identifier: length [241540,241546]"
    },
    {
      "src": "method_invocation [168538,168642]",
      "dest": "method_invocation [170032,170136]"
    },
    {
      "src": "affectation_operator: = [236408,236409]",
      "dest": "affectation_operator: = [237902,237903]"
    },
    {
      "src": "identifier: iterator [135458,135466]",
      "dest": "identifier: iterator [136952,136960]"
    },
    {
      "src": "identifier: equalsIgnoreCase [28544,28560]",
      "dest": "identifier: equalsIgnoreCase [28544,28560]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [80158,80231]",
      "dest": "line_comment: //----------------------------------------------------------------------- [81652,81725]"
    },
    {
      "src": "identifier: length [181587,181593]",
      "dest": "identifier: length [183081,183087]"
    },
    {
      "src": "identifier: padding [184253,184260]",
      "dest": "identifier: padding [185747,185754]"
    },
    {
      "src": "identifier: replace [148248,148255]",
      "dest": "identifier: replace [149742,149749]"
    },
    {
      "src": "identifier: inputLength [174605,174616]",
      "dest": "identifier: inputLength [176099,176110]"
    },
    {
      "src": "line_comment: // String.substring( beg ) goes from 'beg' to the end of the String. [106203,106271]",
      "dest": "line_comment: // String.substring( beg ) goes from 'beg' to the end of the String. [107697,107765]"
    },
    {
      "src": "variable_declarator [123720,123743]",
      "dest": "variable_declarator [125214,125237]"
    },
    {
      "src": "identifier: tempIndex [159913,159922]",
      "dest": "identifier: tempIndex [161407,161416]"
    },
    {
      "src": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No separator is added to the joined String.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null)            = null\n     * StringUtils.join([])              = \"\"\n     * StringUtils.join([null])          = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"]) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"]) = \"a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @return the joined String, <code>null</code> if null array input\n     * @since 2.0\n     */ [124355,125089]",
      "dest": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No separator is added to the joined String.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null)            = null\n     * StringUtils.join([])              = \"\"\n     * StringUtils.join([null])          = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"]) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"]) = \"a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @return the joined String, <code>null</code> if null array input\n     * @since 2.0\n     */ [125849,126583]"
    },
    {
      "src": "visibility: public [89091,89097]",
      "dest": "visibility: public [90585,90591]"
    },
    {
      "src": "decimal_integer_literal: 0 [145856,145857]",
      "dest": "decimal_integer_literal: 0 [147350,147351]"
    },
    {
      "src": "identifier: normalizerFormClass [24654,24673]",
      "dest": "identifier: normalizerFormClass [24654,24673]"
    },
    {
      "src": "argument_list [244357,244359]",
      "dest": "argument_list [245851,245853]"
    },
    {
      "src": "identifier: length [54681,54687]",
      "dest": "identifier: length [54713,54719]"
    },
    {
      "src": "argument_list [128052,128062]",
      "dest": "argument_list [129546,129556]"
    },
    {
      "src": "return_statement [33559,33582]",
      "dest": "return_statement [33559,33582]"
    },
    {
      "src": "identifier: result [176866,176872]",
      "dest": "identifier: result [178360,178366]"
    },
    {
      "src": "modifiers [101192,101205]",
      "dest": "modifiers [102686,102699]"
    },
    {
      "src": "local_variable_declaration [198378,198388]",
      "dest": "local_variable_declaration [199872,199882]"
    },
    {
      "src": "new: new [25888,25891]",
      "dest": "new: new [25888,25891]"
    },
    {
      "src": "identifier: str [92829,92832]",
      "dest": "identifier: str [94323,94326]"
    },
    {
      "src": "return_statement [62390,62413]",
      "dest": "return_statement [63129,63152]"
    },
    {
      "src": "identifier: len [78481,78484]",
      "dest": "identifier: len [79975,79978]"
    },
    {
      "src": "binary_expression [57759,57775]",
      "dest": "binary_expression [58099,58115]"
    },
    {
      "src": "method_invocation [235170,235180]",
      "dest": "method_invocation [236664,236674]"
    },
    {
      "src": "identifier: length [75953,75959]",
      "dest": "identifier: length [77447,77453]"
    },
    {
      "src": "logical_operator: || [57415,57417]",
      "dest": "logical_operator: || [57755,57757]"
    },
    {
      "src": "argument_list [110688,110690]",
      "dest": "argument_list [112182,112184]"
    },
    {
      "src": "decimal_integer_literal: 256 [134236,134239]",
      "dest": "decimal_integer_literal: 256 [135730,135733]"
    },
    {
      "src": "identifier: ch [198678,198680]",
      "dest": "identifier: ch [200172,200174]"
    },
    {
      "src": "line_comment: // we compared all of the characters up to the length of the [228979,229039]",
      "dest": "line_comment: // we compared all of the characters up to the length of the [230473,230533]"
    },
    {
      "src": "new: new [25565,25568]",
      "dest": "new: new [25565,25568]"
    },
    {
      "src": "parenthesized_expression [240995,241049]",
      "dest": "parenthesized_expression [242489,242543]"
    },
    {
      "src": "argument_list [66575,66577]",
      "dest": "argument_list [67622,67624]"
    },
    {
      "src": "line_comment: // Empty checks [6661,6676]",
      "dest": "line_comment: // Empty checks [6661,6676]"
    },
    {
      "src": "binary_expression [176634,176666]",
      "dest": "binary_expression [178128,178160]"
    },
    {
      "src": "return_statement [68144,68156]",
      "dest": "return_statement [69638,69650]"
    },
    {
      "src": "block [228641,228817]",
      "dest": "block [230135,230311]"
    },
    {
      "src": "line_comment: // Performance tuned for 2.0 (JDK1.4) [174374,174411]",
      "dest": "line_comment: // Performance tuned for 2.0 (JDK1.4) [175868,175905]"
    },
    {
      "src": "method_invocation [15859,15875]",
      "dest": "method_invocation [15859,15875]"
    },
    {
      "src": "block [130775,130811]",
      "dest": "block [132269,132305]"
    },
    {
      "src": "identifier: numberOfSubstrings [105782,105800]",
      "dest": "identifier: numberOfSubstrings [107276,107294]"
    },
    {
      "src": "expression_statement [118900,118914]",
      "dest": "expression_statement [120394,120408]"
    },
    {
      "src": "identifier: indexOf [51967,51974]",
      "dest": "identifier: indexOf [51967,51974]"
    },
    {
      "src": "identifier: separator [126118,126127]",
      "dest": "identifier: separator [127612,127621]"
    },
    {
      "src": "logical_operator: || [239815,239817]",
      "dest": "logical_operator: || [241309,241311]"
    },
    {
      "src": "argument_list [86474,86485]",
      "dest": "argument_list [87968,87979]"
    },
    {
      "src": "null_literal: null [223787,223791]",
      "dest": "null_literal: null [225281,225285]"
    },
    {
      "src": "identifier: cs [210342,210344]",
      "dest": "identifier: cs [211836,211838]"
    },
    {
      "src": "logical_operator: || [190526,190528]",
      "dest": "logical_operator: || [192020,192022]"
    },
    {
      "src": "identifier: splitByWholeSeparator [99671,99692]",
      "dest": "identifier: splitByWholeSeparator [101165,101186]"
    },
    {
      "src": "type: String [90746,90752]",
      "dest": "type: String [92240,92246]"
    },
    {
      "src": "identifier: match [110884,110889]",
      "dest": "identifier: match [112378,112383]"
    },
    {
      "src": "identifier: length [89501,89507]",
      "dest": "identifier: length [90995,91001]"
    },
    {
      "src": "binary_expression [7462,7472]",
      "dest": "binary_expression [7462,7472]"
    },
    {
      "src": "if_statement [228089,228198]",
      "dest": "if_statement [229583,229692]"
    },
    {
      "src": "identifier: i [62495,62496]",
      "dest": "identifier: i [63234,63235]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [36373,36388]",
      "dest": "identifier: INDEX_NOT_FOUND [36373,36388]"
    },
    {
      "src": "formal_parameter [132303,132323]",
      "dest": "formal_parameter [133797,133817]"
    },
    {
      "src": "comparison_operator: == [39440,39442]",
      "dest": "comparison_operator: == [39440,39442]"
    },
    {
      "src": "identifier: str [176634,176637]",
      "dest": "identifier: str [178128,178131]"
    },
    {
      "src": "false: false [239963,239968]",
      "dest": "false: false [241457,241462]"
    },
    {
      "src": "method_invocation [184202,184225]",
      "dest": "method_invocation [185696,185719]"
    },
    {
      "src": "block [145572,145607]",
      "dest": "block [147066,147101]"
    },
    {
      "src": "if_statement [201002,201094]",
      "dest": "if_statement [202496,202588]"
    },
    {
      "src": "method_declaration [75539,76283]",
      "dest": "method_declaration [77033,77777]"
    },
    {
      "src": "block [212969,213023]",
      "dest": "block [214463,214517]"
    },
    {
      "src": "identifier: separatorChar [93972,93985]",
      "dest": "identifier: separatorChar [95466,95479]"
    },
    {
      "src": "identifier: Character [198556,198565]",
      "dest": "identifier: Character [200050,200059]"
    },
    {
      "src": "method_invocation [160965,160978]",
      "dest": "method_invocation [162459,162472]"
    },
    {
      "src": "if_statement [145732,145812]",
      "dest": "if_statement [147226,147306]"
    },
    {
      "src": "binary_expression [75943,75961]",
      "dest": "binary_expression [77437,77455]"
    },
    {
      "src": "identifier: str [172989,172992]",
      "dest": "identifier: str [174483,174486]"
    },
    {
      "src": "true: true [117606,117610]",
      "dest": "true: true [119100,119104]"
    },
    {
      "src": "type: boolean [227295,227302]",
      "dest": "type: boolean [228789,228796]"
    },
    {
      "src": "decimal_integer_literal: 0 [152715,152716]",
      "dest": "decimal_integer_literal: 0 [154209,154210]"
    },
    {
      "src": "static: static [136146,136152]",
      "dest": "static: static [137640,137646]"
    },
    {
      "src": "affectation_operator: = [159788,159789]",
      "dest": "affectation_operator: = [161282,161283]"
    },
    {
      "src": "identifier: replLength [150551,150561]",
      "dest": "identifier: replLength [152045,152055]"
    },
    {
      "src": "argument_list [185520,185522]",
      "dest": "argument_list [187014,187016]"
    },
    {
      "src": "identifier: at [223890,223892]",
      "dest": "identifier: at [225384,225386]"
    },
    {
      "src": "type: List<String> [123262,123274]",
      "dest": "type: List<String> [124756,124768]"
    },
    {
      "src": "if_statement [138805,138894]",
      "dest": "if_statement [140299,140388]"
    },
    {
      "src": "identifier: isEmpty [30744,30751]",
      "dest": "identifier: isEmpty [30744,30751]"
    },
    {
      "src": "block [162335,162386]",
      "dest": "block [163829,163880]"
    },
    {
      "src": "argument_list [231690,231714]",
      "dest": "argument_list [233184,233208]"
    },
    {
      "src": "identifier: substringBefore [81430,81445]",
      "dest": "identifier: substringBefore [82924,82939]"
    },
    {
      "src": "assignment_expression [118639,118655]",
      "dest": "assignment_expression [120133,120149]"
    },
    {
      "src": "comparison_operator: == [123622,123624]",
      "dest": "comparison_operator: == [125116,125118]"
    },
    {
      "src": "identifier: i [49921,49922]",
      "dest": "identifier: i [49921,49922]"
    },
    {
      "src": "null_literal: null [73500,73504]",
      "dest": "null_literal: null [74994,74998]"
    },
    {
      "src": "if_statement [198652,198746]",
      "dest": "if_statement [200146,200240]"
    },
    {
      "src": "binary_expression [200871,200881]",
      "dest": "binary_expression [202365,202375]"
    },
    {
      "src": "identifier: Character [209276,209285]",
      "dest": "identifier: Character [210770,210779]"
    },
    {
      "src": "type: boolean [211151,211158]",
      "dest": "type: boolean [212645,212652]"
    },
    {
      "src": "type: String [191872,191878]",
      "dest": "type: String [193366,193372]"
    },
    {
      "src": "identifier: add [105268,105271]",
      "dest": "identifier: add [106762,106765]"
    },
    {
      "src": "false: false [116868,116873]",
      "dest": "false: false [118362,118367]"
    },
    {
      "src": "argument_list [49891,49893]",
      "dest": "argument_list [49891,49893]"
    },
    {
      "src": "formal_parameter [96767,96774]",
      "dest": "formal_parameter [98261,98268]"
    },
    {
      "src": "block [241050,241087]",
      "dest": "block [242544,242581]"
    },
    {
      "src": "identifier: last [173271,173275]",
      "dest": "identifier: last [174765,174769]"
    },
    {
      "src": "type: Iterable<?> [136165,136176]",
      "dest": "type: Iterable<?> [137659,137670]"
    },
    {
      "src": "identifier: center [187755,187761]",
      "dest": "identifier: center [189249,189255]"
    },
    {
      "src": "identifier: str [165990,165993]",
      "dest": "identifier: str [167484,167487]"
    },
    {
      "src": "decimal_integer_literal: 1 [159738,159739]",
      "dest": "decimal_integer_literal: 1 [161232,161233]"
    },
    {
      "src": "identifier: next [132585,132589]",
      "dest": "identifier: next [134079,134083]"
    },
    {
      "src": "argument_list [150212,150214]",
      "dest": "argument_list [151706,151708]"
    },
    {
      "src": "identifier: len [104981,104984]",
      "dest": "identifier: len [106475,106478]"
    },
    {
      "src": "formal_parameter [217330,217340]",
      "dest": "formal_parameter [218824,218834]"
    },
    {
      "src": "local_variable_declaration [132968,132997]",
      "dest": "local_variable_declaration [134462,134491]"
    },
    {
      "src": "argument_list [150510,150523]",
      "dest": "argument_list [152004,152017]"
    },
    {
      "src": "update_expression [8827,8830]",
      "dest": "update_expression [8827,8830]"
    },
    {
      "src": "line_comment: // Java default is 16, probably too small [134242,134283]",
      "dest": "line_comment: // Java default is 16, probably too small [135736,135777]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [150069,150084]",
      "dest": "identifier: INDEX_NOT_FOUND [151563,151578]"
    },
    {
      "src": "formal_parameters [190462,190499]",
      "dest": "formal_parameters [191956,191993]"
    },
    {
      "src": "modifiers [138654,138667]",
      "dest": "modifiers [140148,140161]"
    },
    {
      "src": "block [62584,62629]",
      "dest": "block [63613,63662]"
    },
    {
      "src": "identifier: pos [145859,145862]",
      "dest": "identifier: pos [147353,147356]"
    },
    {
      "src": "line_comment: // Splitting [91786,91798]",
      "dest": "line_comment: // Splitting [93280,93292]"
    },
    {
      "src": "type: ClassNotFoundException [25190,25212]",
      "dest": "type: ClassNotFoundException [25190,25212]"
    },
    {
      "src": "decimal_integer_literal: 0 [159509,159510]",
      "dest": "decimal_integer_literal: 0 [161003,161004]"
    },
    {
      "src": "static: static [86244,86250]",
      "dest": "static: static [87738,87744]"
    },
    {
      "src": "identifier: reverse [214653,214660]",
      "dest": "identifier: reverse [216147,216154]"
    },
    {
      "src": "binary_expression [104357,104374]",
      "dest": "binary_expression [105851,105868]"
    },
    {
      "src": "identifier: lastMatch [110769,110778]",
      "dest": "identifier: lastMatch [112263,112272]"
    },
    {
      "src": "argument_list [195801,195803]",
      "dest": "argument_list [197295,197297]"
    },
    {
      "src": "affectation_operator: = [137203,137204]",
      "dest": "affectation_operator: = [138697,138698]"
    },
    {
      "src": "identifier: append [150504,150510]",
      "dest": "identifier: append [151998,152004]"
    },
    {
      "src": "logical_operator: && [181755,181757]",
      "dest": "logical_operator: && [183249,183251]"
    },
    {
      "src": "argument_list [170060,170063]",
      "dest": "argument_list [171554,171557]"
    },
    {
      "src": "decimal_integer_literal: 0 [37870,37871]",
      "dest": "decimal_integer_literal: 0 [37870,37871]"
    },
    {
      "src": "identifier: ch [198701,198703]",
      "dest": "identifier: ch [200195,200197]"
    },
    {
      "src": "argument_list [140445,140462]",
      "dest": "argument_list [141939,141956]"
    },
    {
      "src": "block [8754,8790]",
      "dest": "block [8754,8790]"
    },
    {
      "src": "return_statement [18981,19009]",
      "dest": "return_statement [18981,19009]"
    },
    {
      "src": "assignment_expression [199900,199927]",
      "dest": "assignment_expression [201394,201421]"
    },
    {
      "src": "return_statement [163692,163704]",
      "dest": "return_statement [165186,165198]"
    },
    {
      "src": "affectation_operator: = [181507,181508]",
      "dest": "affectation_operator: = [183001,183002]"
    },
    {
      "src": "identifier: hasNext [132504,132511]",
      "dest": "identifier: hasNext [133998,134005]"
    },
    {
      "src": "formal_parameters [181355,181392]",
      "dest": "formal_parameters [182849,182886]"
    },
    {
      "src": "argument_list [18507,18509]",
      "dest": "argument_list [18507,18509]"
    },
    {
      "src": "affectation_operator: = [76220,76221]",
      "dest": "affectation_operator: = [77714,77715]"
    },
    {
      "src": "identifier: strs [21663,21667]",
      "dest": "identifier: strs [21663,21667]"
    },
    {
      "src": "visibility: private [110317,110324]",
      "dest": "visibility: private [111811,111818]"
    },
    {
      "src": "null_literal: null [63879,63883]",
      "dest": "null_literal: null [64926,64930]"
    },
    {
      "src": "logical_operator: || [89210,89212]",
      "dest": "logical_operator: || [90704,90706]"
    },
    {
      "src": "return_statement [211246,211259]",
      "dest": "return_statement [212740,212753]"
    },
    {
      "src": "identifier: list [124137,124141]",
      "dest": "identifier: list [125631,125635]"
    },
    {
      "src": "block [227703,227792]",
      "dest": "block [229197,229286]"
    },
    {
      "src": "parenthesized_expression [123072,123085]",
      "dest": "parenthesized_expression [124566,124579]"
    },
    {
      "src": "array_access [123379,123392]",
      "dest": "array_access [124873,124886]"
    },
    {
      "src": "identifier: smallestIndexOfDiff [231468,231487]",
      "dest": "identifier: smallestIndexOfDiff [232962,232981]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [20718,20791]",
      "dest": "line_comment: //----------------------------------------------------------------------- [20718,20791]"
    },
    {
      "src": "parenthesized_expression [127918,127934]",
      "dest": "parenthesized_expression [129412,129428]"
    },
    {
      "src": "identifier: strLen [90931,90937]",
      "dest": "identifier: strLen [92425,92431]"
    },
    {
      "src": "binary_expression [72207,72216]",
      "dest": "binary_expression [73701,73710]"
    },
    {
      "src": "method_invocation [138809,138831]",
      "dest": "method_invocation [140303,140325]"
    },
    {
      "src": "line_comment: // IndexOfAny chars [53375,53394]",
      "dest": "line_comment: // IndexOfAny chars [53375,53394]"
    },
    {
      "src": "comparison_operator: == [59560,59562]",
      "dest": "comparison_operator: == [59947,59949]"
    },
    {
      "src": "identifier: str [31824,31827]",
      "dest": "identifier: str [31824,31827]"
    },
    {
      "src": "block [244116,244451]",
      "dest": "block [245610,245945]"
    },
    {
      "src": "line_comment: // Defaults [211489,211500]",
      "dest": "line_comment: // Defaults [212983,212994]"
    },
    {
      "src": "field_access [69863,69880]",
      "dest": "field_access [71357,71374]"
    },
    {
      "src": "comparison_operator: == [33536,33538]",
      "dest": "comparison_operator: == [33536,33538]"
    },
    {
      "src": "null_literal: null [135386,135390]",
      "dest": "null_literal: null [136880,136884]"
    },
    {
      "src": "identifier: i [127866,127867]",
      "dest": "identifier: i [129360,129361]"
    },
    {
      "src": "identifier: arrayLen [227654,227662]",
      "dest": "identifier: arrayLen [229148,229156]"
    },
    {
      "src": "null_literal: null [71846,71850]",
      "dest": "null_literal: null [73340,73344]"
    },
    {
      "src": "update_expression [241138,241141]",
      "dest": "update_expression [242632,242635]"
    },
    {
      "src": "identifier: start [91264,91269]",
      "dest": "identifier: start [92758,92763]"
    },
    {
      "src": "expression_statement [161152,161194]",
      "dest": "expression_statement [162646,162688]"
    },
    {
      "src": "identifier: suffix [244344,244350]",
      "dest": "identifier: suffix [245838,245844]"
    },
    {
      "src": "block [233814,233901]",
      "dest": "block [235308,235395]"
    },
    {
      "src": "variable_declarator [57712,57729]",
      "dest": "variable_declarator [54820,54837]"
    },
    {
      "src": "block [75629,75665]",
      "dest": "block [77123,77159]"
    },
    {
      "src": "if_statement [20436,20652]",
      "dest": "if_statement [20436,20652]"
    },
    {
      "src": "identifier: i [209237,209238]",
      "dest": "identifier: i [210731,210732]"
    },
    {
      "src": "parenthesized_expression [81572,81597]",
      "dest": "parenthesized_expression [83066,83091]"
    },
    {
      "src": "parenthesized_expression [89315,89341]",
      "dest": "parenthesized_expression [90809,90835]"
    },
    {
      "src": "affectation_operator: = [71915,71916]",
      "dest": "affectation_operator: = [73409,73410]"
    },
    {
      "src": "identifier: substring [118155,118164]",
      "dest": "identifier: substring [119649,119658]"
    },
    {
      "src": "variable_declarator [84776,84808]",
      "dest": "variable_declarator [86270,86302]"
    },
    {
      "src": "method_invocation [150701,150734]",
      "dest": "method_invocation [152195,152228]"
    },
    {
      "src": "identifier: replacement [150511,150522]",
      "dest": "identifier: replacement [152005,152016]"
    },
    {
      "src": "return_statement [184246,184288]",
      "dest": "return_statement [185740,185782]"
    },
    {
      "src": "type: CharSequence[] [227134,227148]",
      "dest": "type: CharSequence[] [228628,228642]"
    },
    {
      "src": "static: static [136988,136994]",
      "dest": "static: static [138482,138488]"
    },
    {
      "src": "comparison_operator: == [63961,63963]",
      "dest": "comparison_operator: == [65008,65010]"
    },
    {
      "src": "decimal_integer_literal: 0 [202081,202082]",
      "dest": "decimal_integer_literal: 0 [203575,203576]"
    },
    {
      "src": "identifier: searchList [158217,158227]",
      "dest": "identifier: searchList [159711,159721]"
    },
    {
      "src": "block [228511,228899]",
      "dest": "block [230005,230393]"
    },
    {
      "src": "type: boolean [209088,209095]",
      "dest": "type: boolean [210582,210589]"
    },
    {
      "src": "identifier: i [178244,178245]",
      "dest": "identifier: i [179738,179739]"
    },
    {
      "src": "formal_parameter [8044,8059]",
      "dest": "formal_parameter [8044,8059]"
    },
    {
      "src": "formal_parameter [65155,65172]",
      "dest": "formal_parameter [66202,66219]"
    },
    {
      "src": "identifier: strs [215752,215756]",
      "dest": "identifier: strs [217246,217250]"
    },
    {
      "src": "if_statement [190584,190642]",
      "dest": "if_statement [192078,192136]"
    },
    {
      "src": "method_invocation [227948,227988]",
      "dest": "method_invocation [229442,229482]"
    },
    {
      "src": "parenthesized_expression [162438,162447]",
      "dest": "parenthesized_expression [163932,163941]"
    },
    {
      "src": "type: int [206959,206962]",
      "dest": "type: int [208453,208456]"
    },
    {
      "src": "identifier: cs [196664,196666]",
      "dest": "identifier: cs [198158,198160]"
    },
    {
      "src": "affectation_operator: = [124111,124112]",
      "dest": "affectation_operator: = [125605,125606]"
    },
    {
      "src": "identifier: output2 [175258,175265]",
      "dest": "identifier: output2 [176752,176759]"
    },
    {
      "src": "type: String [138687,138693]",
      "dest": "type: String [140181,140187]"
    },
    {
      "src": "identifier: i [210282,210283]",
      "dest": "identifier: i [211776,211777]"
    },
    {
      "src": "argument_list [132943,132954]",
      "dest": "argument_list [134437,134448]"
    },
    {
      "src": "local_variable_declaration [198293,198342]",
      "dest": "local_variable_declaration [199787,199836]"
    },
    {
      "src": "local_variable_declaration [227417,227439]",
      "dest": "local_variable_declaration [228911,228933]"
    },
    {
      "src": "type: int [227417,227420]",
      "dest": "type: int [228911,228914]"
    },
    {
      "src": "block [31895,31942]",
      "dest": "block [31895,31942]"
    },
    {
      "src": "object_creation_expression [131336,131362]",
      "dest": "object_creation_expression [132830,132856]"
    },
    {
      "src": "argument_list [49721,49723]",
      "dest": "argument_list [49721,49723]"
    },
    {
      "src": "identifier: count [137173,137178]",
      "dest": "identifier: count [138667,138672]"
    },
    {
      "src": "block [169930,170545]",
      "dest": "block [171424,172039]"
    },
    {
      "src": "comparison_operator: > [239926,239927]",
      "dest": "comparison_operator: > [241420,241421]"
    },
    {
      "src": "identifier: length [54635,54641]",
      "dest": "identifier: length [54635,54641]"
    },
    {
      "src": "identifier: string [241004,241010]",
      "dest": "identifier: string [242498,242504]"
    },
    {
      "src": "binary_expression [161557,161578]",
      "dest": "binary_expression [163051,163072]"
    },
    {
      "src": "identifier: lastOrdinalIndexOf [45033,45051]",
      "dest": "identifier: lastOrdinalIndexOf [45033,45051]"
    },
    {
      "src": "identifier: str [143439,143442]",
      "dest": "identifier: str [144933,144936]"
    },
    {
      "src": "argument_list [73631,73633]",
      "dest": "argument_list [75125,75127]"
    },
    {
      "src": "decimal_integer_literal: 0 [81595,81596]",
      "dest": "decimal_integer_literal: 0 [83089,83090]"
    },
    {
      "src": "local_variable_declaration [170252,170284]",
      "dest": "local_variable_declaration [171746,171778]"
    },
    {
      "src": "binary_expression [20371,20378]",
      "dest": "binary_expression [20371,20378]"
    },
    {
      "src": "static: static [129166,129172]",
      "dest": "static: static [130660,130666]"
    },
    {
      "src": "null_literal: null [116940,116944]",
      "dest": "null_literal: null [118434,118438]"
    },
    {
      "src": "null_literal: null [127735,127739]",
      "dest": "null_literal: null [129229,129233]"
    },
    {
      "src": "local_variable_declaration [110531,110554]",
      "dest": "local_variable_declaration [112025,112048]"
    },
    {
      "src": "unary_expression [161288,161290]",
      "dest": "unary_expression [162782,162784]"
    },
    {
      "src": "identifier: right [78378,78383]",
      "dest": "identifier: right [79872,79877]"
    },
    {
      "src": "formal_parameters [55984,56021]",
      "dest": "formal_parameters [56330,56367]"
    },
    {
      "src": "affectation_operator: = [123912,123913]",
      "dest": "affectation_operator: = [125406,125407]"
    },
    {
      "src": "method_invocation [170513,170538]",
      "dest": "method_invocation [172007,172032]"
    },
    {
      "src": "modifiers [155025,155038]",
      "dest": "modifiers [156519,156532]"
    },
    {
      "src": "identifier: replaceCharsLength [165782,165800]",
      "dest": "identifier: replaceCharsLength [167276,167294]"
    },
    {
      "src": "identifier: Character [198456,198465]",
      "dest": "identifier: Character [199950,199959]"
    },
    {
      "src": "type: String [191855,191861]",
      "dest": "type: String [193349,193355]"
    },
    {
      "src": "identifier: defaultStr [213937,213947]",
      "dest": "identifier: defaultStr [215431,215441]"
    },
    {
      "src": "argument_list [141666,141671]",
      "dest": "argument_list [143160,143165]"
    },
    {
      "src": "method_invocation [199991,200003]",
      "dest": "method_invocation [201485,201497]"
    },
    {
      "src": "affectation_operator: = [70166,70167]",
      "dest": "affectation_operator: = [71660,71661]"
    },
    {
      "src": "identifier: shortestStrLen [227856,227870]",
      "dest": "identifier: shortestStrLen [229350,229364]"
    },
    {
      "src": "expression_statement [131558,131579]",
      "dest": "expression_statement [133052,133073]"
    },
    {
      "src": "visibility: public [152551,152557]",
      "dest": "visibility: public [154045,154051]"
    },
    {
      "src": "logical_operator: || [231128,231130]",
      "dest": "logical_operator: || [232622,232624]"
    },
    {
      "src": "static: static [135303,135309]",
      "dest": "static: static [136797,136803]"
    },
    {
      "src": "local_variable_declaration [210278,210288]",
      "dest": "local_variable_declaration [211772,211782]"
    },
    {
      "src": "identifier: stripChars [17255,17265]",
      "dest": "identifier: stripChars [17255,17265]"
    },
    {
      "src": "block_comment:     \n     * <p>Centers a String in a larger String of size <code>size</code>.\n     * Uses a supplied character as the value to pad the String with.</p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A <code>null</code> String returns <code>null</code>.\n     * A negative size is treated as zero.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *, *)     = null\n     * StringUtils.center(\"\", 4, ' ')     = \"    \"\n     * StringUtils.center(\"ab\", -1, ' ')  = \"ab\"\n     * StringUtils.center(\"ab\", 4, ' ')   = \" ab\"\n     * StringUtils.center(\"abcd\", 2, ' ') = \"abcd\"\n     * StringUtils.center(\"a\", 4, ' ')    = \" a  \"\n     * StringUtils.center(\"a\", 4, 'y')    = \"yayy\"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @param padChar  the character to pad the new String with\n     * @return centered String, <code>null</code> if null String input\n     * @since 2.0\n     */ [187790,188813]",
      "dest": "block_comment:     \n     * <p>Centers a String in a larger String of size <code>size</code>.\n     * Uses a supplied character as the value to pad the String with.</p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A <code>null</code> String returns <code>null</code>.\n     * A negative size is treated as zero.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *, *)     = null\n     * StringUtils.center(\"\", 4, ' ')     = \"    \"\n     * StringUtils.center(\"ab\", -1, ' ')  = \"ab\"\n     * StringUtils.center(\"ab\", 4, ' ')   = \" ab\"\n     * StringUtils.center(\"abcd\", 2, ' ') = \"abcd\"\n     * StringUtils.center(\"a\", 4, ' ')    = \" a  \"\n     * StringUtils.center(\"a\", 4, 'y')    = \"yayy\"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @param padChar  the character to pad the new String with\n     * @return centered String, <code>null</code> if null String input\n     * @since 2.0\n     */ [189284,190307]"
    },
    {
      "src": "identifier: repeat [174817,174823]",
      "dest": "identifier: repeat [176311,176317]"
    },
    {
      "src": "identifier: textIndex [161008,161017]",
      "dest": "identifier: textIndex [162502,162511]"
    },
    {
      "src": "if_statement [79782,79835]",
      "dest": "if_statement [81276,81329]"
    },
    {
      "src": "identifier: size [189012,189016]",
      "dest": "identifier: size [190506,190510]"
    },
    {
      "src": "identifier: replacement [147170,147181]",
      "dest": "identifier: replacement [148664,148675]"
    },
    {
      "src": "new: new [119270,119273]",
      "dest": "new: new [120764,120767]"
    },
    {
      "src": "parenthesized_expression [20206,20226]",
      "dest": "parenthesized_expression [20206,20226]"
    },
    {
      "src": "expression_statement [198501,198532]",
      "dest": "expression_statement [199995,200026]"
    },
    {
      "src": "identifier: length [69874,69880]",
      "dest": "identifier: length [71368,71374]"
    },
    {
      "src": "parenthesized_expression [178019,178031]",
      "dest": "parenthesized_expression [179513,179525]"
    },
    {
      "src": "type: String [116325,116331]",
      "dest": "type: String [117819,117825]"
    },
    {
      "src": "identifier: cs [203103,203105]",
      "dest": "identifier: cs [204597,204599]"
    },
    {
      "src": "binary_expression [91178,91195]",
      "dest": "binary_expression [92672,92689]"
    },
    {
      "src": "null_literal: null [126152,126156]",
      "dest": "null_literal: null [127646,127650]"
    },
    {
      "src": "formal_parameter [239769,239787]",
      "dest": "formal_parameter [241263,241281]"
    },
    {
      "src": "ternary_expression [15837,15875]",
      "dest": "ternary_expression [15837,15875]"
    },
    {
      "src": "null_literal: null [89189,89193]",
      "dest": "null_literal: null [90683,90687]"
    },
    {
      "src": "if_statement [227164,227247]",
      "dest": "if_statement [228658,228741]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes one newline from end of a String if it's there,\n     * otherwise leave it alone.  A newline is &quot;<code>\\n</code>&quot;,\n     * &quot;<code>\\r</code>&quot;, or &quot;<code>\\r\\n</code>&quot;.</p>\n     *\n     * <p>NOTE: This method changed in 2.0.\n     * It now more closely matches Perl chomp.</p>\n     *\n     * <pre>\n     * StringUtils.chomp(null)          = null\n     * StringUtils.chomp(\"\")            = \"\"\n     * StringUtils.chomp(\"abc \\r\")      = \"abc \"\n     * StringUtils.chomp(\"abc\\n\")       = \"abc\"\n     * StringUtils.chomp(\"abc\\r\\n\")     = \"abc\"\n     * StringUtils.chomp(\"abc\\r\\n\\r\\n\") = \"abc\\r\\n\"\n     * StringUtils.chomp(\"abc\\n\\r\")     = \"abc\\n\"\n     * StringUtils.chomp(\"abc\\n\\rabc\")  = \"abc\\n\\rabc\"\n     * StringUtils.chomp(\"\\r\")          = \"\"\n     * StringUtils.chomp(\"\\n\")          = \"\"\n     * StringUtils.chomp(\"\\r\\n\")        = \"\"\n     * </pre>\n     *\n     * @param str  the String to chomp a newline from, may be null\n     * @return String without newline, <code>null</code> if null String input\n     */ [168842,169886]",
      "dest": "block_comment:     \n     * <p>Removes one newline from end of a String if it's there,\n     * otherwise leave it alone.  A newline is &quot;<code>\\n</code>&quot;,\n     * &quot;<code>\\r</code>&quot;, or &quot;<code>\\r\\n</code>&quot;.</p>\n     *\n     * <p>NOTE: This method changed in 2.0.\n     * It now more closely matches Perl chomp.</p>\n     *\n     * <pre>\n     * StringUtils.chomp(null)          = null\n     * StringUtils.chomp(\"\")            = \"\"\n     * StringUtils.chomp(\"abc \\r\")      = \"abc \"\n     * StringUtils.chomp(\"abc\\n\")       = \"abc\"\n     * StringUtils.chomp(\"abc\\r\\n\")     = \"abc\"\n     * StringUtils.chomp(\"abc\\r\\n\\r\\n\") = \"abc\\r\\n\"\n     * StringUtils.chomp(\"abc\\n\\r\")     = \"abc\\n\"\n     * StringUtils.chomp(\"abc\\n\\rabc\")  = \"abc\\n\\rabc\"\n     * StringUtils.chomp(\"\\r\")          = \"\"\n     * StringUtils.chomp(\"\\n\")          = \"\"\n     * StringUtils.chomp(\"\\r\\n\")        = \"\"\n     * </pre>\n     *\n     * @param str  the String to chomp a newline from, may be null\n     * @return String without newline, <code>null</code> if null String input\n     */ [170336,171380]"
    },
    {
      "src": "block [107751,107807]",
      "dest": "block [109245,109301]"
    },
    {
      "src": "visibility: private [157777,157784]",
      "dest": "visibility: private [159271,159278]"
    },
    {
      "src": "comparison_operator: == [15841,15843]",
      "dest": "comparison_operator: == [15841,15843]"
    },
    {
      "src": "variable_declarator [127814,127846]",
      "dest": "variable_declarator [129308,129340]"
    },
    {
      "src": "identifier: j [58088,58089]",
      "dest": "identifier: j [55121,55122]"
    },
    {
      "src": "modifiers [98021,98034]",
      "dest": "modifiers [99515,99528]"
    },
    {
      "src": "type: String [84660,84666]",
      "dest": "type: String [86154,86160]"
    },
    {
      "src": "identifier: str [110830,110833]",
      "dest": "identifier: str [112324,112327]"
    },
    {
      "src": "modifiers [52950,52963]",
      "dest": "modifiers [52950,52963]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [68265,68338]",
      "dest": "line_comment: //----------------------------------------------------------------------- [69759,69832]"
    },
    {
      "src": "parenthesized_expression [8850,8897]",
      "dest": "parenthesized_expression [8850,8897]"
    },
    {
      "src": "identifier: input [23908,23913]",
      "dest": "identifier: input [23908,23913]"
    },
    {
      "src": "arithmetic_operator: * [160736,160737]",
      "dest": "arithmetic_operator: * [162230,162231]"
    },
    {
      "src": "variable_declarator [222140,222176]",
      "dest": "variable_declarator [223634,223670]"
    },
    {
      "src": "identifier: start [161208,161213]",
      "dest": "identifier: start [162702,162707]"
    },
    {
      "src": "formal_parameter [167989,167998]",
      "dest": "formal_parameter [169483,169492]"
    },
    {
      "src": "arithmetic_operator: - [95245,95246]",
      "dest": "arithmetic_operator: - [96739,96740]"
    },
    {
      "src": "continue_statement [159573,159582]",
      "dest": "continue_statement [161067,161076]"
    },
    {
      "src": "identifier: i [175634,175635]",
      "dest": "identifier: i [177128,177129]"
    },
    {
      "src": "identifier: len [110535,110538]",
      "dest": "identifier: len [112029,112032]"
    },
    {
      "src": "affectation_operator: = [71987,71988]",
      "dest": "affectation_operator: = [73481,73482]"
    },
    {
      "src": "identifier: pads [184144,184148]",
      "dest": "identifier: pads [185638,185642]"
    },
    {
      "src": "identifier: str [190779,190782]",
      "dest": "identifier: str [192273,192276]"
    },
    {
      "src": "argument_list [96804,96837]",
      "dest": "argument_list [98298,98331]"
    },
    {
      "src": "if_statement [172985,173038]",
      "dest": "if_statement [174479,174532]"
    },
    {
      "src": "return_statement [137073,137084]",
      "dest": "return_statement [138567,138578]"
    },
    {
      "src": "return_statement [101294,101355]",
      "dest": "return_statement [102788,102849]"
    },
    {
      "src": "identifier: timeToLive [155389,155399]",
      "dest": "identifier: timeToLive [156883,156893]"
    },
    {
      "src": "formal_parameter [147071,147082]",
      "dest": "formal_parameter [148565,148576]"
    },
    {
      "src": "block_comment:     \n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n     *\n     * <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify\n     * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n     * be the leftmost character in the result, or the first character following the\n     * ellipses, but it will appear somewhere in the result.\n     *\n     * <p>In no case will it return a String of length greater than\n     * <code>maxWidth</code>.</p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *, *)                = null\n     * StringUtils.abbreviate(\"\", 0, 4)                  = \"\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", -1, 10) = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 0, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 1, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 4, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 5, 10)  = \"...fghi...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 6, 10)  = \"...ghij...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 8, 10)  = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 10, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 12, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghij\", 0, 3)        = IllegalArgumentException\n     * StringUtils.abbreviate(\"abcdefghij\", 5, 6)        = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param offset  left edge of source String\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */ [217414,219310]",
      "dest": "block_comment:     \n     * <p>Abbreviates a String using ellipses. This will turn\n     * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n     *\n     * <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify\n     * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n     * be the leftmost character in the result, or the first character following the\n     * ellipses, but it will appear somewhere in the result.\n     *\n     * <p>In no case will it return a String of length greater than\n     * <code>maxWidth</code>.</p>\n     *\n     * <pre>\n     * StringUtils.abbreviate(null, *, *)                = null\n     * StringUtils.abbreviate(\"\", 0, 4)                  = \"\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", -1, 10) = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 0, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 1, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 4, 10)  = \"abcdefg...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 5, 10)  = \"...fghi...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 6, 10)  = \"...ghij...\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 8, 10)  = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 10, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghijklmno\", 12, 10) = \"...ijklmno\"\n     * StringUtils.abbreviate(\"abcdefghij\", 0, 3)        = IllegalArgumentException\n     * StringUtils.abbreviate(\"abcdefghij\", 5, 6)        = IllegalArgumentException\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param offset  left edge of source String\n     * @param maxWidth  maximum length of result String, must be at least 4\n     * @return abbreviated String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if the width is too small\n     * @since 2.0\n     */ [218908,220804]"
    },
    {
      "src": "new: new [104612,104615]",
      "dest": "new: new [106106,106109]"
    },
    {
      "src": "static: static [113278,113284]",
      "dest": "static: static [114772,114778]"
    },
    {
      "src": "affectation_operator: = [89283,89284]",
      "dest": "affectation_operator: = [90777,90778]"
    },
    {
      "src": "identifier: indexOf [29415,29422]",
      "dest": "identifier: indexOf [29415,29422]"
    },
    {
      "src": "method_invocation [17133,17145]",
      "dest": "method_invocation [17133,17145]"
    },
    {
      "src": "identifier: i [175000,175001]",
      "dest": "identifier: i [176494,176495]"
    },
    {
      "src": "identifier: concat [184276,184282]",
      "dest": "identifier: concat [185770,185776]"
    },
    {
      "src": "local_variable_declaration [165935,165945]",
      "dest": "local_variable_declaration [167429,167439]"
    },
    {
      "src": "line_comment: // Also, StringTokenizer uses isSpace() not isWhitespace() [116496,116554]",
      "dest": "line_comment: // Also, StringTokenizer uses isSpace() not isWhitespace() [117990,118048]"
    },
    {
      "src": "local_variable_declaration [54784,54794]",
      "dest": "local_variable_declaration [58088,58098]"
    },
    {
      "src": "arithmetic_operator: + [58090,58091]",
      "dest": "arithmetic_operator: + [55123,55124]"
    },
    {
      "src": "if_statement [233786,233901]",
      "dest": "if_statement [235280,235395]"
    },
    {
      "src": "block [160482,160790]",
      "dest": "block [161976,162284]"
    },
    {
      "src": "type: String [33465,33471]",
      "dest": "type: String [33465,33471]"
    },
    {
      "src": "?: ? [236123,236124]",
      "dest": "?: ? [237617,237618]"
    },
    {
      "src": "decimal_integer_literal: 0 [225178,225179]",
      "dest": "decimal_integer_literal: 0 [226672,226673]"
    },
    {
      "src": "identifier: str [243526,243529]",
      "dest": "identifier: str [245020,245023]"
    },
    {
      "src": "method_invocation [106391,106440]",
      "dest": "method_invocation [107885,107934]"
    },
    {
      "src": "return_statement [137420,137453]",
      "dest": "return_statement [138914,138947]"
    },
    {
      "src": "arithmetic_operator: - [219816,219817]",
      "dest": "arithmetic_operator: - [221310,221311]"
    },
    {
      "src": "identifier: indexOf [166041,166048]",
      "dest": "identifier: indexOf [167535,167542]"
    },
    {
      "src": "decimal_integer_literal: 0 [149994,149995]",
      "dest": "decimal_integer_literal: 0 [151488,151489]"
    },
    {
      "src": "return_statement [50908,50921]",
      "dest": "return_statement [50908,50921]"
    },
    {
      "src": "block [198483,198546]",
      "dest": "block [199977,200040]"
    },
    {
      "src": "identifier: se [26202,26204]",
      "dest": "identifier: se [26202,26204]"
    },
    {
      "src": "identifier: open [89297,89301]",
      "dest": "identifier: open [90791,90795]"
    },
    {
      "src": "block [171860,171943]",
      "dest": "block [173354,173437]"
    },
    {
      "src": "identifier: m [235473,235474]",
      "dest": "identifier: m [236967,236968]"
    },
    {
      "src": "comparison_operator: == [23073,23075]",
      "dest": "comparison_operator: == [23073,23075]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, separators specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"abc def\", null) = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc def\", \" \")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\", \" \") = [\"abc\", \"def\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [94006,95126]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, separators specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"abc def\", null) = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc def\", \" \")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\", \" \") = [\"abc\", \"def\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [95500,96620]"
    },
    {
      "src": "method_declaration [12609,12710]",
      "dest": "method_declaration [12609,12710]"
    },
    {
      "src": "argument_list [17207,17224]",
      "dest": "argument_list [17207,17224]"
    },
    {
      "src": "formal_parameters [243472,243499]",
      "dest": "formal_parameters [244966,244993]"
    },
    {
      "src": "identifier: start [91385,91390]",
      "dest": "identifier: start [92879,92884]"
    },
    {
      "src": "assignment_expression [198220,198241]",
      "dest": "assignment_expression [199714,199735]"
    },
    {
      "src": "parenthesized_expression [126142,126157]",
      "dest": "parenthesized_expression [127636,127651]"
    },
    {
      "src": "binary_expression [161060,161073]",
      "dest": "binary_expression [162554,162567]"
    },
    {
      "src": "local_variable_declaration [231195,231245]",
      "dest": "local_variable_declaration [232689,232739]"
    },
    {
      "src": "parenthesized_expression [173085,173097]",
      "dest": "parenthesized_expression [174579,174591]"
    },
    {
      "src": "block [73776,73813]",
      "dest": "block [75270,75307]"
    },
    {
      "src": "identifier: indexOf [89289,89296]",
      "dest": "identifier: indexOf [90783,90790]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode digits or space\n     * (<code>' '</code>).\n     * A decimal point is not a unicode digit and returns false.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isNumeric(null)   = false\n     * StringUtils.isNumeric(\"\")     = true\n     * StringUtils.isNumeric(\"  \")   = true\n     * StringUtils.isNumeric(\"123\")  = true\n     * StringUtils.isNumeric(\"12 3\") = true\n     * StringUtils.isNumeric(\"ab2c\") = false\n     * StringUtils.isNumeric(\"12-3\") = false\n     * StringUtils.isNumeric(\"12.3\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains digits or space,\n     *  and is non-null\n     */ [207131,208002]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode digits or space\n     * (<code>' '</code>).\n     * A decimal point is not a unicode digit and returns false.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isNumeric(null)   = false\n     * StringUtils.isNumeric(\"\")     = true\n     * StringUtils.isNumeric(\"  \")   = true\n     * StringUtils.isNumeric(\"123\")  = true\n     * StringUtils.isNumeric(\"12 3\") = true\n     * StringUtils.isNumeric(\"ab2c\") = false\n     * StringUtils.isNumeric(\"12-3\") = false\n     * StringUtils.isNumeric(\"12.3\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains digits or space,\n     *  and is non-null\n     */ [208625,209496]"
    },
    {
      "src": "return_statement [166358,166380]",
      "dest": "return_statement [167852,167874]"
    },
    {
      "src": "expression_statement [91326,91343]",
      "dest": "expression_statement [92820,92837]"
    },
    {
      "src": "new: new [222326,222329]",
      "dest": "new: new [223820,223823]"
    },
    {
      "src": "variable_declarator [206963,206968]",
      "dest": "variable_declarator [208457,208462]"
    },
    {
      "src": "parenthesized_expression [141658,141691]",
      "dest": "parenthesized_expression [143152,143185]"
    },
    {
      "src": "comparison_operator: == [192719,192721]",
      "dest": "comparison_operator: == [194213,194215]"
    },
    {
      "src": "visibility: public [21622,21628]",
      "dest": "visibility: public [21622,21628]"
    },
    {
      "src": "if_statement [208206,208324]",
      "dest": "if_statement [209700,209818]"
    },
    {
      "src": "identifier: length [53135,53141]",
      "dest": "identifier: length [53135,53141]"
    },
    {
      "src": "identifier: strs [231131,231135]",
      "dest": "identifier: strs [232625,232629]"
    },
    {
      "src": "identifier: length [178213,178219]",
      "dest": "identifier: length [179707,179713]"
    },
    {
      "src": "block [65222,65259]",
      "dest": "block [66269,66306]"
    },
    {
      "src": "local_variable_declaration [145658,145670]",
      "dest": "local_variable_declaration [147152,147164]"
    },
    {
      "src": "update_expression [137216,137219]",
      "dest": "update_expression [138710,138713]"
    },
    {
      "src": "identifier: iterable [135374,135382]",
      "dest": "identifier: iterable [136868,136876]"
    },
    {
      "src": "local_variable_declaration [24987,25096]",
      "dest": "local_variable_declaration [24987,25096]"
    },
    {
      "src": "argument_list [195771,195778]",
      "dest": "argument_list [197265,197272]"
    },
    {
      "src": "identifier: str [145484,145487]",
      "dest": "identifier: str [146978,146981]"
    },
    {
      "src": "identifier: i [161498,161499]",
      "dest": "identifier: i [162992,162993]"
    },
    {
      "src": "binary_expression [219892,219903]",
      "dest": "binary_expression [221386,221397]"
    },
    {
      "src": "expression_statement [131175,131306]",
      "dest": "expression_statement [132669,132800]"
    },
    {
      "src": "type: String [172963,172969]",
      "dest": "type: String [174457,174463]"
    },
    {
      "src": "binary_expression [7462,7492]",
      "dest": "binary_expression [7462,7492]"
    },
    {
      "src": "identifier: stripChars [23246,23256]",
      "dest": "identifier: stripChars [23246,23256]"
    },
    {
      "src": "identifier: i [8884,8885]",
      "dest": "identifier: i [8884,8885]"
    },
    {
      "src": "comparison_operator: == [181865,181867]",
      "dest": "comparison_operator: == [183359,183361]"
    },
    {
      "src": "comparison_operator: >= [118553,118555]",
      "dest": "comparison_operator: >= [120047,120049]"
    },
    {
      "src": "return_statement [133095,133117]",
      "dest": "return_statement [134589,134611]"
    },
    {
      "src": "method_invocation [171835,171858]",
      "dest": "method_invocation [173329,173352]"
    },
    {
      "src": "type: String [240943,240949]",
      "dest": "type: String [242437,242443]"
    },
    {
      "src": "type: String [99706,99712]",
      "dest": "type: String [101200,101206]"
    },
    {
      "src": "identifier: getCommonPrefix [231070,231085]",
      "dest": "identifier: getCommonPrefix [232564,232579]"
    },
    {
      "src": "null_literal: null [219406,219410]",
      "dest": "null_literal: null [220900,220904]"
    },
    {
      "src": "identifier: leftPad [183058,183065]",
      "dest": "identifier: leftPad [184552,184559]"
    },
    {
      "src": "unary_expression [8078,8102]",
      "dest": "unary_expression [8078,8102]"
    },
    {
      "src": "argument_list [227895,227897]",
      "dest": "argument_list [229389,229391]"
    },
    {
      "src": "argument_list [117392,117402]",
      "dest": "argument_list [118886,118896]"
    },
    {
      "src": "identifier: start [161785,161790]",
      "dest": "identifier: start [163279,163284]"
    },
    {
      "src": "static: static [211144,211150]",
      "dest": "static: static [212638,212644]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [62703,62776]",
      "dest": "line_comment: //----------------------------------------------------------------------- [63750,63823]"
    },
    {
      "src": "identifier: StringUtils [241213,241224]",
      "dest": "identifier: StringUtils [242707,242718]"
    },
    {
      "src": "formal_parameter [49361,49377]",
      "dest": "formal_parameter [49361,49377]"
    },
    {
      "src": "binary_expression [79859,79877]",
      "dest": "binary_expression [81353,81371]"
    },
    {
      "src": "block [131540,131593]",
      "dest": "block [133034,133087]"
    },
    {
      "src": "string_literal [25264,25324]",
      "dest": "string_literal [25264,25324]"
    },
    {
      "src": "binary_expression [181936,181949]",
      "dest": "binary_expression [183430,183443]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [56094,56109]",
      "dest": "identifier: INDEX_NOT_FOUND [56440,56455]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String, handling <code>null</code> by returning\n     * <code>null</code>.</p>\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #strip(String)}.</p>\n     *\n     * <p>To trim your choice of characters, use the\n     * {@link #strip(String, String)} methods.</p>\n     *\n     * <pre>\n     * StringUtils.trim(null)          = null\n     * StringUtils.trim(\"\")            = \"\"\n     * StringUtils.trim(\"     \")       = \"\"\n     * StringUtils.trim(\"abc\")         = \"abc\"\n     * StringUtils.trim(\"    abc    \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed string, <code>null</code> if null String input\n     */ [9754,10619]",
      "dest": "block_comment:     \n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String, handling <code>null</code> by returning\n     * <code>null</code>.</p>\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #strip(String)}.</p>\n     *\n     * <p>To trim your choice of characters, use the\n     * {@link #strip(String, String)} methods.</p>\n     *\n     * <pre>\n     * StringUtils.trim(null)          = null\n     * StringUtils.trim(\"\")            = \"\"\n     * StringUtils.trim(\"     \")       = \"\"\n     * StringUtils.trim(\"abc\")         = \"abc\"\n     * StringUtils.trim(\"    abc    \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed string, <code>null</code> if null String input\n     */ [9754,10619]"
    },
    {
      "src": "affectation_operator: = [178200,178201]",
      "dest": "affectation_operator: = [179694,179695]"
    },
    {
      "src": "parenthesized_expression [118514,118558]",
      "dest": "parenthesized_expression [120008,120052]"
    },
    {
      "src": "identifier: targetSting [222204,222215]",
      "dest": "identifier: targetSting [223698,223709]"
    },
    {
      "src": "formal_parameters [98065,98095]",
      "dest": "formal_parameters [99559,99589]"
    },
    {
      "src": "identifier: str [46530,46533]",
      "dest": "identifier: str [46530,46533]"
    },
    {
      "src": "comparison_operator: < [104734,104735]",
      "dest": "comparison_operator: < [106228,106229]"
    },
    {
      "src": "block_comment:     \n     * <p>Joins the elements of the provided <code>Iterable</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterable  the <code>Iterable</code> providing the values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, <code>null</code> if null iterator input\n     * @since 2.3\n     */ [134654,135291]",
      "dest": "block_comment:     \n     * <p>Joins the elements of the provided <code>Iterable</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterable  the <code>Iterable</code> providing the values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, <code>null</code> if null iterator input\n     * @since 2.3\n     */ [136148,136785]"
    },
    {
      "src": "block [23079,23115]",
      "dest": "block [23079,23115]"
    },
    {
      "src": "catch_type [25353,25374]",
      "dest": "catch_type [25353,25374]"
    },
    {
      "src": "method_invocation [73762,73774]",
      "dest": "method_invocation [75256,75268]"
    },
    {
      "src": "false: false [118347,118352]",
      "dest": "false: false [119841,119846]"
    },
    {
      "src": "identifier: pads [185685,185689]",
      "dest": "identifier: pads [187179,187183]"
    },
    {
      "src": "for_statement [227634,228013]",
      "dest": "for_statement [229128,229507]"
    },
    {
      "src": "method_invocation [173311,173334]",
      "dest": "method_invocation [174805,174828]"
    },
    {
      "src": "field_access [241116,241136]",
      "dest": "field_access [242610,242630]"
    },
    {
      "src": "identifier: containsAny [59485,59496]",
      "dest": "identifier: containsAny [59878,59889]"
    },
    {
      "src": "block [140281,140499]",
      "dest": "block [141775,141993]"
    },
    {
      "src": "null_literal: null [33539,33543]",
      "dest": "null_literal: null [33539,33543]"
    },
    {
      "src": "type: int [66554,66557]",
      "dest": "type: int [67601,67604]"
    },
    {
      "src": "identifier: lastIdx [170530,170537]",
      "dest": "identifier: lastIdx [172024,172031]"
    },
    {
      "src": "static: static [152558,152564]",
      "dest": "static: static [154052,154058]"
    },
    {
      "src": "static: static [205640,205646]",
      "dest": "static: static [207134,207140]"
    },
    {
      "src": "comparison_operator: == [179987,179989]",
      "dest": "comparison_operator: == [181481,181483]"
    },
    {
      "src": "method_invocation [124212,124249]",
      "dest": "method_invocation [125706,125743]"
    },
    {
      "src": "comparison_operator: < [182155,182156]",
      "dest": "comparison_operator: < [183649,183650]"
    },
    {
      "src": "parenthesized_expression [127713,127785]",
      "dest": "parenthesized_expression [129207,129279]"
    },
    {
      "src": "block [46567,46721]",
      "dest": "block [46567,46721]"
    },
    {
      "src": "static: static [109599,109605]",
      "dest": "static: static [111093,111099]"
    },
    {
      "src": "type: String [89154,89160]",
      "dest": "type: String [90648,90654]"
    },
    {
      "src": "identifier: start [111076,111081]",
      "dest": "identifier: start [112570,112575]"
    },
    {
      "src": "block [219475,219569]",
      "dest": "block [220969,221063]"
    },
    {
      "src": "decimal_integer_literal: 0 [72013,72014]",
      "dest": "decimal_integer_literal: 0 [73507,73508]"
    },
    {
      "src": "identifier: csLen [60930,60935]",
      "dest": "identifier: csLen [61317,61322]"
    },
    {
      "src": "arithmetic_operator: + [178115,178116]",
      "dest": "arithmetic_operator: + [179609,179610]"
    },
    {
      "src": "identifier: isJavaVersionAtLeast [23983,24003]",
      "dest": "identifier: isJavaVersionAtLeast [23983,24003]"
    },
    {
      "src": "binary_expression [160965,160989]",
      "dest": "binary_expression [162459,162483]"
    },
    {
      "src": "block [131417,131603]",
      "dest": "block [132911,133097]"
    },
    {
      "src": "parenthesized_expression [159836,159878]",
      "dest": "parenthesized_expression [161330,161372]"
    },
    {
      "src": "identifier: i [118735,118736]",
      "dest": "identifier: i [120229,120230]"
    },
    {
      "src": "identifier: ArrayUtils [123175,123185]",
      "dest": "identifier: ArrayUtils [124669,124679]"
    },
    {
      "src": "formal_parameters [37788,37818]",
      "dest": "formal_parameters [37788,37818]"
    },
    {
      "src": "identifier: charAt [117777,117783]",
      "dest": "identifier: charAt [119271,119277]"
    },
    {
      "src": "type: String [89141,89147]",
      "dest": "type: String [90635,90641]"
    },
    {
      "src": "comparison_operator: < [225183,225184]",
      "dest": "comparison_operator: < [226677,226678]"
    },
    {
      "src": "return_statement [174637,174648]",
      "dest": "return_statement [176131,176142]"
    },
    {
      "src": "identifier: str [83128,83131]",
      "dest": "identifier: str [84622,84625]"
    },
    {
      "src": "true: true [111180,111184]",
      "dest": "true: true [112674,112678]"
    },
    {
      "src": "comparison_operator: < [79933,79934]",
      "dest": "comparison_operator: < [81427,81428]"
    },
    {
      "src": "variable_declarator [71948,71969]",
      "dest": "variable_declarator [73442,73463]"
    },
    {
      "src": "type: int [123343,123346]",
      "dest": "type: int [124837,124840]"
    },
    {
      "src": "return_statement [120463,120503]",
      "dest": "return_statement [121957,121997]"
    },
    {
      "src": "method_invocation [18882,18899]",
      "dest": "method_invocation [18882,18899]"
    },
    {
      "src": "if_statement [161521,161728]",
      "dest": "if_statement [163015,163222]"
    },
    {
      "src": "if_statement [158140,158344]",
      "dest": "if_statement [159634,159838]"
    },
    {
      "src": "block [117088,117546]",
      "dest": "block [118582,119040]"
    },
    {
      "src": "comparison_operator: == [104367,104369]",
      "dest": "comparison_operator: == [105861,105863]"
    },
    {
      "src": "binary_expression [105556,105577]",
      "dest": "binary_expression [107050,107071]"
    },
    {
      "src": "type: int [91053,91056]",
      "dest": "type: int [92547,92550]"
    },
    {
      "src": "update_expression [117214,117225]",
      "dest": "update_expression [118708,118719]"
    },
    {
      "src": "return_statement [126172,126184]",
      "dest": "return_statement [127666,127678]"
    },
    {
      "src": "affectation_operator: = [123734,123735]",
      "dest": "affectation_operator: = [125228,125229]"
    },
    {
      "src": "parenthesized_expression [173270,173292]",
      "dest": "parenthesized_expression [174764,174786]"
    },
    {
      "src": "identifier: modified [166100,166108]",
      "dest": "identifier: modified [167594,167602]"
    },
    {
      "src": "identifier: util [25032,25036]",
      "dest": "identifier: util [25032,25036]"
    },
    {
      "src": "expression_statement [70317,70327]",
      "dest": "expression_statement [71811,71821]"
    },
    {
      "src": "affectation_operator: = [162305,162306]",
      "dest": "affectation_operator: = [163799,163800]"
    },
    {
      "src": "type: StringBuilder [131340,131353]",
      "dest": "type: StringBuilder [132834,132847]"
    },
    {
      "src": "identifier: searchChars [58076,58087]",
      "dest": "identifier: searchChars [55109,55120]"
    },
    {
      "src": "identifier: pos [91147,91150]",
      "dest": "identifier: pos [92641,92644]"
    },
    {
      "src": "comparison_operator: == [149931,149933]",
      "dest": "comparison_operator: == [151425,151427]"
    },
    {
      "src": "identifier: t [236008,236009]",
      "dest": "identifier: t [237502,237503]"
    },
    {
      "src": "identifier: str [39364,39367]",
      "dest": "identifier: str [39364,39367]"
    },
    {
      "src": "identifier: padding [186191,186198]",
      "dest": "identifier: padding [187685,187692]"
    },
    {
      "src": "line_comment: // Shared code between ordinalIndexOf(String,String,int) and lastOrdinalIndexOf(String,String,int) [35894,35992]",
      "dest": "line_comment: // Shared code between ordinalIndexOf(String,String,int) and lastOrdinalIndexOf(String,String,int) [35894,35992]"
    },
    {
      "src": "return_statement [239956,239969]",
      "dest": "return_statement [241450,241463]"
    },
    {
      "src": "arithmetic_operator: - [98158,98159]",
      "dest": "arithmetic_operator: - [99652,99653]"
    },
    {
      "src": "method_invocation [192780,192803]",
      "dest": "method_invocation [194274,194297]"
    },
    {
      "src": "method_invocation [185898,185923]",
      "dest": "method_invocation [187392,187417]"
    },
    {
      "src": "identifier: builder [222513,222520]",
      "dest": "identifier: builder [224007,224014]"
    },
    {
      "src": "formal_parameter [89141,89152]",
      "dest": "formal_parameter [90635,90646]"
    },
    {
      "src": "static: static [179008,179014]",
      "dest": "static: static [180502,180508]"
    },
    {
      "src": "local_variable_declaration [175167,175192]",
      "dest": "local_variable_declaration [176661,176686]"
    },
    {
      "src": "parenthesized_expression [207000,207042]",
      "dest": "parenthesized_expression [208494,208536]"
    },
    {
      "src": "expression_statement [73721,73731]",
      "dest": "expression_statement [75215,75225]"
    },
    {
      "src": "type: String [70045,70051]",
      "dest": "type: String [71539,71545]"
    },
    {
      "src": "decimal_integer_literal: 0 [174497,174498]",
      "dest": "decimal_integer_literal: 0 [175991,175992]"
    },
    {
      "src": "binary_expression [134540,134551]",
      "dest": "binary_expression [136034,136045]"
    },
    {
      "src": "binary_expression [158412,158426]",
      "dest": "binary_expression [159906,159920]"
    },
    {
      "src": "formal_parameters [14709,14721]",
      "dest": "formal_parameters [14709,14721]"
    },
    {
      "src": "method_invocation [27515,27530]",
      "dest": "method_invocation [27515,27530]"
    },
    {
      "src": "expression_statement [162349,162376]",
      "dest": "expression_statement [163843,163870]"
    },
    {
      "src": "variable_declarator [204347,204363]",
      "dest": "variable_declarator [205841,205857]"
    },
    {
      "src": "identifier: remove [143328,143334]",
      "dest": "identifier: remove [144822,144828]"
    },
    {
      "src": "argument_list [105024,105044]",
      "dest": "argument_list [106518,106538]"
    },
    {
      "src": "type: CharSequence [233760,233772]",
      "dest": "type: CharSequence [235254,235266]"
    },
    {
      "src": "identifier: padChar [188873,188880]",
      "dest": "identifier: padChar [190367,190374]"
    },
    {
      "src": "increment_operator: ++ [235984,235986]",
      "dest": "increment_operator: ++ [237478,237480]"
    },
    {
      "src": "for_statement [228585,228817]",
      "dest": "for_statement [230079,230311]"
    },
    {
      "src": "argument_list [184282,184287]",
      "dest": "argument_list [185776,185781]"
    },
    {
      "src": "affectation_operator: = [178161,178162]",
      "dest": "affectation_operator: = [179655,179656]"
    },
    {
      "src": "comparison_operator: == [83270,83272]",
      "dest": "comparison_operator: == [84764,84766]"
    },
    {
      "src": "expression_statement [159609,159649]",
      "dest": "expression_statement [161103,161143]"
    },
    {
      "src": "unary_expression [101345,101347]",
      "dest": "unary_expression [102839,102841]"
    },
    {
      "src": "decimal_integer_literal: 0 [211321,211322]",
      "dest": "decimal_integer_literal: 0 [212815,212816]"
    },
    {
      "src": "binary_expression [183942,183953]",
      "dest": "binary_expression [185436,185447]"
    },
    {
      "src": "identifier: CharUtils [170087,170096]",
      "dest": "identifier: CharUtils [171581,171590]"
    },
    {
      "src": "argument_list [138880,138882]",
      "dest": "argument_list [140374,140376]"
    },
    {
      "src": "decimal_integer_literal: 0 [160318,160319]",
      "dest": "decimal_integer_literal: 0 [161812,161813]"
    },
    {
      "src": "identifier: EMPTY [86424,86429]",
      "dest": "identifier: EMPTY [87918,87923]"
    },
    {
      "src": "identifier: splitByWholeSeparatorPreserveAllTokens [103073,103111]",
      "dest": "identifier: splitByWholeSeparatorPreserveAllTokens [104567,104605]"
    },
    {
      "src": "argument_list [222174,222176]",
      "dest": "argument_list [223668,223670]"
    },
    {
      "src": "line_comment: // Joining [124262,124272]",
      "dest": "line_comment: // Joining [125756,125766]"
    },
    {
      "src": "identifier: getType [123371,123378]",
      "dest": "identifier: getType [124865,124872]"
    },
    {
      "src": "identifier: stripEnd [20120,20128]",
      "dest": "identifier: stripEnd [20120,20128]"
    },
    {
      "src": "method_invocation [117370,117403]",
      "dest": "method_invocation [118864,118897]"
    },
    {
      "src": "parenthesized_expression [110566,110576]",
      "dest": "parenthesized_expression [112060,112070]"
    },
    {
      "src": "arithmetic_operator: - [228434,228435]",
      "dest": "arithmetic_operator: - [229928,229929]"
    },
    {
      "src": "return_statement [90861,90873]",
      "dest": "return_statement [92355,92367]"
    },
    {
      "src": "identifier: splitWorker [115520,115531]",
      "dest": "identifier: splitWorker [117014,117025]"
    },
    {
      "src": "identifier: indexOf [81658,81665]",
      "dest": "identifier: indexOf [83152,83159]"
    },
    {
      "src": "identifier: separatorChar [109704,109717]",
      "dest": "identifier: separatorChar [111198,111211]"
    },
    {
      "src": "visibility: public [57318,57324]",
      "dest": "visibility: public [54436,54442]"
    },
    {
      "src": "decimal_integer_literal: 0 [123151,123152]",
      "dest": "decimal_integer_literal: 0 [124645,124646]"
    },
    {
      "src": "method_invocation [18673,18690]",
      "dest": "method_invocation [18673,18690]"
    },
    {
      "src": "block_comment:     \n     * <p>The maximum size to which the padding constant(s) can expand.</p>\n     */ [6146,6233]",
      "dest": "block_comment:     \n     * <p>The maximum size to which the padding constant(s) can expand.</p>\n     */ [6146,6233]"
    },
    {
      "src": "expression_statement [150537,150562]",
      "dest": "expression_statement [152031,152056]"
    },
    {
      "src": "identifier: prefix [239157,239163]",
      "dest": "identifier: prefix [240651,240657]"
    },
    {
      "src": "comparison_operator: == [89219,89221]",
      "dest": "comparison_operator: == [90713,90715]"
    },
    {
      "src": "parenthesized_expression [42291,42305]",
      "dest": "parenthesized_expression [42291,42305]"
    },
    {
      "src": "block [185413,185450]",
      "dest": "block [186907,186944]"
    },
    {
      "src": "method_invocation [223847,223876]",
      "dest": "method_invocation [225341,225370]"
    },
    {
      "src": "identifier: length [79987,79993]",
      "dest": "identifier: length [81481,81487]"
    },
    {
      "src": "identifier: text [148335,148339]",
      "dest": "identifier: text [149829,149833]"
    },
    {
      "src": "field_declaration [5976,6014]",
      "dest": "field_declaration [5976,6014]"
    },
    {
      "src": "type: String [116313,116319]",
      "dest": "type: String [117807,117813]"
    },
    {
      "src": "identifier: pads [182066,182070]",
      "dest": "identifier: pads [183560,183564]"
    },
    {
      "src": "formal_parameter [179043,179051]",
      "dest": "formal_parameter [180537,180545]"
    },
    {
      "src": "identifier: isEmpty [81490,81497]",
      "dest": "identifier: isEmpty [82984,82991]"
    },
    {
      "src": "binary_expression [39815,39827]",
      "dest": "binary_expression [39815,39827]"
    },
    {
      "src": "expression_statement [198701,198732]",
      "dest": "expression_statement [200195,200226]"
    },
    {
      "src": "method_declaration [13655,13734]",
      "dest": "method_declaration [13655,13734]"
    },
    {
      "src": "method_declaration [210102,210448]",
      "dest": "method_declaration [211596,211942]"
    },
    {
      "src": "variable_declarator [132975,132996]",
      "dest": "variable_declarator [134469,134490]"
    },
    {
      "src": "argument_list [89487,89515]",
      "dest": "argument_list [90981,91009]"
    },
    {
      "src": "type: int [39569,39572]",
      "dest": "type: int [39569,39572]"
    },
    {
      "src": "identifier: start [73721,73726]",
      "dest": "identifier: start [75215,75220]"
    },
    {
      "src": "return_statement [91592,91604]",
      "dest": "return_statement [93086,93098]"
    },
    {
      "src": "binary_expression [138728,138759]",
      "dest": "binary_expression [140222,140253]"
    },
    {
      "src": "binary_expression [76071,76082]",
      "dest": "binary_expression [77565,77576]"
    },
    {
      "src": "block [105998,106076]",
      "dest": "block [107492,107570]"
    },
    {
      "src": "visibility: public [155025,155031]",
      "dest": "visibility: public [156519,156525]"
    },
    {
      "src": "identifier: searchChars [54669,54680]",
      "dest": "identifier: searchChars [54701,54712]"
    },
    {
      "src": "formal_parameter [149785,149796]",
      "dest": "formal_parameter [151279,151290]"
    },
    {
      "src": "binary_expression [23908,23921]",
      "dest": "binary_expression [23908,23921]"
    },
    {
      "src": "identifier: charAt [225246,225252]",
      "dest": "identifier: charAt [226740,226746]"
    },
    {
      "src": "affectation_operator: = [72164,72165]",
      "dest": "affectation_operator: = [73658,73659]"
    },
    {
      "src": "type: T [213855,213856]",
      "dest": "type: T [215349,215350]"
    },
    {
      "src": "method_declaration [120397,120509]",
      "dest": "method_declaration [121891,122003]"
    },
    {
      "src": "argument_list [236256,236298]",
      "dest": "argument_list [237750,237792]"
    },
    {
      "src": "identifier: length [244333,244339]",
      "dest": "identifier: length [245827,245833]"
    },
    {
      "src": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, <code>null</code> if null array input\n     */ [129352,130651]",
      "dest": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)                = null\n     * StringUtils.join([], *)                  = \"\"\n     * StringUtils.join([null], *)              = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, <code>null</code> if null array input\n     */ [130846,132145]"
    },
    {
      "src": "formal_parameter [120441,120451]",
      "dest": "formal_parameter [121935,121945]"
    },
    {
      "src": "new: new [175557,175560]",
      "dest": "new: new [177051,177054]"
    },
    {
      "src": "expression_statement [130857,130875]",
      "dest": "expression_statement [132351,132369]"
    },
    {
      "src": "formal_parameter [99706,99722]",
      "dest": "formal_parameter [101200,101216]"
    },
    {
      "src": "comparison_operator: == [135383,135385]",
      "dest": "comparison_operator: == [136877,136879]"
    },
    {
      "src": "identifier: m [235239,235240]",
      "dest": "identifier: m [236733,236734]"
    },
    {
      "src": "return_statement [27480,27531]",
      "dest": "return_statement [27480,27531]"
    },
    {
      "src": "identifier: getType [123492,123499]",
      "dest": "identifier: getType [124986,124993]"
    },
    {
      "src": "identifier: abrevMarker [219959,219970]",
      "dest": "identifier: abrevMarker [221453,221464]"
    },
    {
      "src": "identifier: idx [199923,199926]",
      "dest": "identifier: idx [201417,201420]"
    },
    {
      "src": "binary_expression [134296,134309]",
      "dest": "binary_expression [135790,135803]"
    },
    {
      "src": "decimal_integer_literal: 1 [173332,173333]",
      "dest": "decimal_integer_literal: 1 [174826,174827]"
    },
    {
      "src": "comparison_operator: == [170303,170305]",
      "dest": "comparison_operator: == [171797,171799]"
    },
    {
      "src": "method_invocation [29543,29566]",
      "dest": "method_invocation [29543,29566]"
    },
    {
      "src": "method_invocation [105025,105043]",
      "dest": "method_invocation [106519,106537]"
    },
    {
      "src": "comparison_operator: < [110805,110806]",
      "dest": "comparison_operator: < [112299,112300]"
    },
    {
      "src": "formal_parameters [59496,59533]",
      "dest": "formal_parameters [59889,59920]"
    },
    {
      "src": "method_declaration [221856,222538]",
      "dest": "method_declaration [223350,224032]"
    },
    {
      "src": "argument_list [219712,219714]",
      "dest": "argument_list [221206,221208]"
    },
    {
      "src": "formal_parameter [179933,179943]",
      "dest": "formal_parameter [181427,181437]"
    },
    {
      "src": "identifier: toCharArray [56163,56174]",
      "dest": "identifier: toCharArray [56509,56520]"
    },
    {
      "src": "affectation_operator: = [66642,66643]",
      "dest": "affectation_operator: = [67761,67762]"
    },
    {
      "src": "method_declaration [179903,180336]",
      "dest": "method_declaration [181397,181830]"
    },
    {
      "src": "identifier: equals [27427,27433]",
      "dest": "identifier: equals [27427,27433]"
    },
    {
      "src": "identifier: str [179038,179041]",
      "dest": "identifier: str [180532,180535]"
    },
    {
      "src": "null_literal: null [104480,104484]",
      "dest": "null_literal: null [105974,105978]"
    },
    {
      "src": "arithmetic_operator: - [220247,220248]",
      "dest": "arithmetic_operator: - [221741,221742]"
    },
    {
      "src": "identifier: strLen [62487,62493]",
      "dest": "identifier: strLen [63226,63232]"
    },
    {
      "src": "type: String [148256,148262]",
      "dest": "type: String [149750,149756]"
    },
    {
      "src": "identifier: end [20573,20576]",
      "dest": "identifier: end [20573,20576]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [29501,29516]",
      "dest": "identifier: INDEX_NOT_FOUND [29501,29516]"
    },
    {
      "src": "argument_list [62574,62578]",
      "dest": "argument_list [63327,63331]"
    },
    {
      "src": "type: int [190686,190689]",
      "dest": "type: int [192180,192183]"
    },
    {
      "src": "identifier: searchStrings [241179,241192]",
      "dest": "identifier: searchStrings [242673,242686]"
    },
    {
      "src": "block_comment:     \n     * <p>Swaps the case of a String changing upper and title case to\n     * lower case, and lower case to upper case.</p>\n     *\n     * <ul>\n     *  <li>Upper case character converts to Lower case</li>\n     *  <li>Title case character converts to Lower case</li>\n     *  <li>Lower case character converts to Upper case</li>\n     * </ul>\n     *\n     * <p>For a word based algorithm, see {@link WordUtils#swapCase(String)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.swapCase(null)                 = null\n     * StringUtils.swapCase(\"\")                   = \"\"\n     * StringUtils.swapCase(\"The dog has a BONE\") = \"tHE DOG HAS A bone\"\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer performs a word based algorithm.\n     * If you only use ASCII, you will notice no change.\n     * That functionality is available in WordUtils.</p>\n     *\n     * @param str  the String to swap case, may be null\n     * @return the changed String, <code>null</code> if null String input\n     */ [197031,198123]",
      "dest": "block_comment:     \n     * <p>Swaps the case of a String changing upper and title case to\n     * lower case, and lower case to upper case.</p>\n     *\n     * <ul>\n     *  <li>Upper case character converts to Lower case</li>\n     *  <li>Title case character converts to Lower case</li>\n     *  <li>Lower case character converts to Upper case</li>\n     * </ul>\n     *\n     * <p>For a word based algorithm, see {@link WordUtils#swapCase(String)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.swapCase(null)                 = null\n     * StringUtils.swapCase(\"\")                   = \"\"\n     * StringUtils.swapCase(\"The dog has a BONE\") = \"tHE DOG HAS A bone\"\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer performs a word based algorithm.\n     * If you only use ASCII, you will notice no change.\n     * That functionality is available in WordUtils.</p>\n     *\n     * @param str  the String to swap case, may be null\n     * @return the changed String, <code>null</code> if null String input\n     */ [198525,199617]"
    },
    {
      "src": "type: String [17100,17106]",
      "dest": "type: String [17100,17106]"
    },
    {
      "src": "type: int [221921,221924]",
      "dest": "type: int [223415,223418]"
    },
    {
      "src": "decimal_integer_literal: 3 [220333,220334]",
      "dest": "decimal_integer_literal: 3 [221827,221828]"
    },
    {
      "src": "type: int [244313,244316]",
      "dest": "type: int [245807,245810]"
    },
    {
      "src": "parenthesized_expression [228111,228149]",
      "dest": "parenthesized_expression [229605,229643]"
    },
    {
      "src": "identifier: type [123525,123529]",
      "dest": "identifier: type [125019,125023]"
    },
    {
      "src": "method_invocation [132854,132871]",
      "dest": "method_invocation [134348,134365]"
    },
    {
      "src": "identifier: isDigit [208221,208228]",
      "dest": "identifier: isDigit [209715,209722]"
    },
    {
      "src": "modifiers [136981,136994]",
      "dest": "modifiers [138475,138488]"
    },
    {
      "src": "method_invocation [131221,131258]",
      "dest": "method_invocation [132715,132752]"
    },
    {
      "src": "formal_parameter [95172,95193]",
      "dest": "formal_parameter [96666,96687]"
    },
    {
      "src": "null_literal: null [72100,72104]",
      "dest": "null_literal: null [73594,73598]"
    },
    {
      "src": "identifier: strs [23060,23064]",
      "dest": "identifier: strs [23060,23064]"
    },
    {
      "src": "block [188922,188957]",
      "dest": "block [190416,190451]"
    },
    {
      "src": "argument_list [18770,18772]",
      "dest": "argument_list [18770,18772]"
    },
    {
      "src": "variable_declarator [188970,188991]",
      "dest": "variable_declarator [190464,190485]"
    },
    {
      "src": "identifier: isAsciiPrintable [205848,205864]",
      "dest": "identifier: isAsciiPrintable [207342,207358]"
    },
    {
      "src": "type: IndexOutOfBoundsException [178056,178081]",
      "dest": "type: IndexOutOfBoundsException [179550,179575]"
    },
    {
      "src": "identifier: str [214648,214651]",
      "dest": "identifier: str [216142,216145]"
    },
    {
      "src": "arithmetic_operator: - [57645,57646]",
      "dest": "arithmetic_operator: - [57985,57986]"
    },
    {
      "src": "identifier: buf [162349,162352]",
      "dest": "identifier: buf [163843,163846]"
    },
    {
      "src": "identifier: padding [180306,180313]",
      "dest": "identifier: padding [181800,181807]"
    },
    {
      "src": "identifier: strLen [181574,181580]",
      "dest": "identifier: strLen [183068,183074]"
    },
    {
      "src": "method_invocation [11708,11719]",
      "dest": "method_invocation [11708,11719]"
    },
    {
      "src": "return_statement [180110,180121]",
      "dest": "return_statement [181604,181615]"
    },
    {
      "src": "type: int [57663,57666]",
      "dest": "type: int [54774,54777]"
    },
    {
      "src": "parenthesized_expression [172988,173001]",
      "dest": "parenthesized_expression [174482,174495]"
    },
    {
      "src": "expression_statement [168272,168284]",
      "dest": "expression_statement [169766,169778]"
    },
    {
      "src": "comparison_operator: == [163669,163671]",
      "dest": "comparison_operator: == [165163,165165]"
    },
    {
      "src": "block [25864,25992]",
      "dest": "block [25864,25992]"
    },
    {
      "src": "parenthesized_expression [198555,198582]",
      "dest": "parenthesized_expression [200049,200076]"
    },
    {
      "src": "binary_expression [49407,49418]",
      "dest": "binary_expression [49407,49418]"
    },
    {
      "src": "identifier: isEmpty [29466,29473]",
      "dest": "identifier: isEmpty [29466,29473]"
    },
    {
      "src": "modifiers [99648,99661]",
      "dest": "modifiers [101142,101155]"
    },
    {
      "src": "argument_list [182275,182284]",
      "dest": "argument_list [183769,183778]"
    },
    {
      "src": "return_statement [214623,214674]",
      "dest": "return_statement [216117,216168]"
    },
    {
      "src": "method_invocation [150015,150048]",
      "dest": "method_invocation [151509,151542]"
    },
    {
      "src": "identifier: sz [72020,72022]",
      "dest": "identifier: sz [73514,73516]"
    },
    {
      "src": "argument_list [24620,24675]",
      "dest": "argument_list [24620,24675]"
    },
    {
      "src": "return_statement [143351,143362]",
      "dest": "return_statement [144845,144856]"
    },
    {
      "src": "parenthesized_expression [104806,104816]",
      "dest": "parenthesized_expression [106300,106310]"
    },
    {
      "src": "argument_list [83379,83381]",
      "dest": "argument_list [84873,84875]"
    },
    {
      "src": "identifier: iterator [136303,136311]",
      "dest": "identifier: iterator [137797,137805]"
    },
    {
      "src": "method_invocation [198803,198820]",
      "dest": "method_invocation [200297,200314]"
    },
    {
      "src": "argument_list [111375,111377]",
      "dest": "argument_list [112869,112871]"
    },
    {
      "src": "type: String [167973,167979]",
      "dest": "type: String [169467,169473]"
    },
    {
      "src": "identifier: indexOf [30825,30832]",
      "dest": "identifier: indexOf [30825,30832]"
    },
    {
      "src": "modifiers [30661,30674]",
      "dest": "modifiers [30661,30674]"
    },
    {
      "src": "static: static [182997,183003]",
      "dest": "static: static [184491,184497]"
    },
    {
      "src": "parenthesized_expression [66473,66508]",
      "dest": "parenthesized_expression [67520,67555]"
    },
    {
      "src": "decimal_integer_literal: 0 [51989,51990]",
      "dest": "decimal_integer_literal: 0 [51989,51990]"
    },
    {
      "src": "method_invocation [150385,150398]",
      "dest": "method_invocation [151879,151892]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode letters.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlpha(null)   = false\n     * StringUtils.isAlpha(\"\")     = true\n     * StringUtils.isAlpha(\"  \")   = false\n     * StringUtils.isAlpha(\"abc\")  = true\n     * StringUtils.isAlpha(\"ab2c\") = false\n     * StringUtils.isAlpha(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains letters, and is non-null\n     */ [200149,200805]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode letters.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlpha(null)   = false\n     * StringUtils.isAlpha(\"\")     = true\n     * StringUtils.isAlpha(\"  \")   = false\n     * StringUtils.isAlpha(\"abc\")  = true\n     * StringUtils.isAlpha(\"ab2c\") = false\n     * StringUtils.isAlpha(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains letters, and is non-null\n     */ [201643,202299]"
    },
    {
      "src": "identifier: str [123135,123138]",
      "dest": "identifier: str [124629,124632]"
    },
    {
      "src": "if_statement [160101,160158]",
      "dest": "if_statement [161595,161652]"
    },
    {
      "src": "super: super [6641,6646]",
      "dest": "super: super [6641,6646]"
    },
    {
      "src": "block [49393,49985]",
      "dest": "block [49393,49985]"
    },
    {
      "src": "block [179996,180032]",
      "dest": "block [181490,181526]"
    },
    {
      "src": "identifier: hasNext [132908,132915]",
      "dest": "identifier: hasNext [134402,134409]"
    },
    {
      "src": "type: int [23008,23011]",
      "dest": "type: int [23008,23011]"
    },
    {
      "src": "if_statement [72203,72260]",
      "dest": "if_statement [73697,73754]"
    },
    {
      "src": "affectation_operator: = [161317,161318]",
      "dest": "affectation_operator: = [162811,162812]"
    },
    {
      "src": "null_literal: null [136258,136262]",
      "dest": "null_literal: null [137752,137756]"
    },
    {
      "src": "decimal_integer_literal: 0 [166079,166080]",
      "dest": "decimal_integer_literal: 0 [167573,167574]"
    },
    {
      "src": "affectation_operator: = [6135,6136]",
      "dest": "affectation_operator: = [6135,6136]"
    },
    {
      "src": "identifier: end [91360,91363]",
      "dest": "identifier: end [92854,92857]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [6681,6754]",
      "dest": "line_comment: //----------------------------------------------------------------------- [6681,6754]"
    },
    {
      "src": "identifier: end [20174,20177]",
      "dest": "identifier: end [20174,20177]"
    },
    {
      "src": "false: false [118784,118789]",
      "dest": "false: false [120278,120283]"
    },
    {
      "src": "type: boolean [204226,204233]",
      "dest": "type: boolean [205720,205727]"
    },
    {
      "src": "method_invocation [135449,135468]",
      "dest": "method_invocation [136943,136962]"
    },
    {
      "src": "comparison_operator: == [68097,68099]",
      "dest": "comparison_operator: == [69591,69593]"
    },
    {
      "src": "identifier: str [35200,35203]",
      "dest": "identifier: str [35200,35203]"
    },
    {
      "src": "argument_list [176695,176708]",
      "dest": "argument_list [178189,178202]"
    },
    {
      "src": "binary_expression [130760,130773]",
      "dest": "binary_expression [132254,132267]"
    },
    {
      "src": "type: String[] [96717,96725]",
      "dest": "type: String[] [98211,98219]"
    },
    {
      "src": "throw_statement [158770,158947]",
      "dest": "throw_statement [160264,160441]"
    },
    {
      "src": "visibility: public [10624,10630]",
      "dest": "visibility: public [10624,10630]"
    },
    {
      "src": "identifier: str [188896,188899]",
      "dest": "identifier: str [190390,190393]"
    },
    {
      "src": "variable_declarator [181536,181560]",
      "dest": "variable_declarator [183030,183054]"
    },
    {
      "src": "decimal_integer_literal: 0 [23184,23185]",
      "dest": "decimal_integer_literal: 0 [23184,23185]"
    },
    {
      "src": "identifier: startPos [33487,33495]",
      "dest": "identifier: startPos [33487,33495]"
    },
    {
      "src": "identifier: length [71928,71934]",
      "dest": "identifier: length [73422,73428]"
    },
    {
      "src": "parenthesized_expression [208256,208277]",
      "dest": "parenthesized_expression [209750,209771]"
    },
    {
      "src": "if_statement [47796,47881]",
      "dest": "if_statement [47796,47881]"
    },
    {
      "src": "type: String [238090,238096]",
      "dest": "type: String [239584,239590]"
    },
    {
      "src": "identifier: padStr [185404,185410]",
      "dest": "identifier: padStr [186898,186904]"
    },
    {
      "src": "identifier: SystemUtils [23971,23982]",
      "dest": "identifier: SystemUtils [23971,23982]"
    },
    {
      "src": "identifier: index [166021,166026]",
      "dest": "identifier: index [167515,167520]"
    },
    {
      "src": "binary_expression [78540,78559]",
      "dest": "binary_expression [80034,80053]"
    },
    {
      "src": "identifier: inputLength [174803,174814]",
      "dest": "identifier: inputLength [176297,176308]"
    },
    {
      "src": "method_invocation [174749,174762]",
      "dest": "method_invocation [176243,176256]"
    },
    {
      "src": "parenthesized_expression [190587,190604]",
      "dest": "parenthesized_expression [192081,192098]"
    },
    {
      "src": "comparison_operator: < [57868,57869]",
      "dest": "comparison_operator: < [54973,54974]"
    },
    {
      "src": "method_invocation [241213,241257]",
      "dest": "method_invocation [242707,242751]"
    },
    {
      "src": "binary_expression [161525,161630]",
      "dest": "binary_expression [163019,163124]"
    },
    {
      "src": "identifier: start [150042,150047]",
      "dest": "identifier: start [151536,151541]"
    },
    {
      "src": "block [132626,132685]",
      "dest": "block [134120,134179]"
    },
    {
      "src": "binary_expression [227650,227662]",
      "dest": "binary_expression [229144,229156]"
    },
    {
      "src": "identifier: i [162372,162373]",
      "dest": "identifier: i [163866,163867]"
    },
    {
      "src": "local_variable_declaration [110761,110787]",
      "dest": "local_variable_declaration [112255,112281]"
    },
    {
      "src": "null_literal: null [159536,159540]",
      "dest": "null_literal: null [161030,161034]"
    },
    {
      "src": "local_variable_declaration [71944,71970]",
      "dest": "local_variable_declaration [73438,73464]"
    },
    {
      "src": "if_statement [206862,206915]",
      "dest": "if_statement [208356,208409]"
    },
    {
      "src": "identifier: endsWithIgnoreCase [143385,143403]",
      "dest": "identifier: endsWithIgnoreCase [144879,144897]"
    },
    {
      "src": "local_variable_declaration [72043,72073]",
      "dest": "local_variable_declaration [73537,73567]"
    },
    {
      "src": "argument_list [235500,235502]",
      "dest": "argument_list [236994,236996]"
    },
    {
      "src": "parenthesized_expression [18862,18920]",
      "dest": "parenthesized_expression [18862,18920]"
    },
    {
      "src": "type: String [174326,174332]",
      "dest": "type: String [175820,175826]"
    },
    {
      "src": "parenthesized_expression [185861,185876]",
      "dest": "parenthesized_expression [187355,187370]"
    },
    {
      "src": "argument_list [39616,39618]",
      "dest": "argument_list [39616,39618]"
    },
    {
      "src": "method_invocation [244376,244444]",
      "dest": "method_invocation [245870,245938]"
    },
    {
      "src": "for_statement [23171,23268]",
      "dest": "for_statement [23171,23268]"
    },
    {
      "src": "block [130843,130885]",
      "dest": "block [132337,132379]"
    },
    {
      "src": "argument_list [72181,72189]",
      "dest": "argument_list [73675,73683]"
    },
    {
      "src": "parenthesized_expression [220126,220168]",
      "dest": "parenthesized_expression [221620,221662]"
    },
    {
      "src": "identifier: abbreviateMiddle [221877,221893]",
      "dest": "identifier: abbreviateMiddle [223371,223387]"
    },
    {
      "src": "method_invocation [91224,91246]",
      "dest": "method_invocation [92718,92740]"
    },
    {
      "src": "argument_list [186669,186673]",
      "dest": "argument_list [188163,188167]"
    },
    {
      "src": "argument_list [225349,225351]",
      "dest": "argument_list [226843,226845]"
    },
    {
      "src": "binary_expression [130824,130841]",
      "dest": "binary_expression [132318,132335]"
    },
    {
      "src": "block [173293,173431]",
      "dest": "block [174787,174925]"
    },
    {
      "src": "affectation_operator: = [228545,228546]",
      "dest": "affectation_operator: = [230039,230040]"
    },
    {
      "src": "false: false [120496,120501]",
      "dest": "false: false [121990,121995]"
    },
    {
      "src": "argument_list [60829,60833]",
      "dest": "argument_list [61216,61220]"
    },
    {
      "src": "identifier: isEmpty [60848,60855]",
      "dest": "identifier: isEmpty [61235,61242]"
    },
    {
      "src": "identifier: start [168245,168250]",
      "dest": "identifier: start [169739,169744]"
    },
    {
      "src": "local_variable_declaration [57615,57649]",
      "dest": "local_variable_declaration [57955,57989]"
    },
    {
      "src": "identifier: splitByWholeSeparatorPreserveAllTokens [101215,101253]",
      "dest": "identifier: splitByWholeSeparatorPreserveAllTokens [102709,102747]"
    },
    {
      "src": "type: java.util.regex.Pattern [24987,25010]",
      "dest": "type: java.util.regex.Pattern [24987,25010]"
    },
    {
      "src": "local_variable_declaration [173047,173073]",
      "dest": "local_variable_declaration [174541,174567]"
    },
    {
      "src": "arithmetic_operator: + [222086,222087]",
      "dest": "arithmetic_operator: + [223580,223581]"
    },
    {
      "src": "identifier: str [37854,37857]",
      "dest": "identifier: str [37854,37857]"
    },
    {
      "src": "variable_declarator [39801,39813]",
      "dest": "variable_declarator [39801,39813]"
    },
    {
      "src": "expression_statement [162115,162132]",
      "dest": "expression_statement [163609,163626]"
    },
    {
      "src": "null_literal: null [51904,51908]",
      "dest": "null_literal: null [51904,51908]"
    },
    {
      "src": "local_variable_declaration [162299,162313]",
      "dest": "local_variable_declaration [163793,163807]"
    },
    {
      "src": "identifier: repeat [174741,174747]",
      "dest": "identifier: repeat [176235,176241]"
    },
    {
      "src": "argument_list [171847,171858]",
      "dest": "argument_list [173341,173352]"
    },
    {
      "src": "increment_operator: ++ [162331,162333]",
      "dest": "increment_operator: ++ [163825,163827]"
    },
    {
      "src": "identifier: obj [134582,134585]",
      "dest": "identifier: obj [136076,136079]"
    },
    {
      "src": "block [20233,20268]",
      "dest": "block [20233,20268]"
    },
    {
      "src": "type: int [123315,123318]",
      "dest": "type: int [124809,124812]"
    },
    {
      "src": "formal_parameter [130698,130714]",
      "dest": "formal_parameter [132192,132208]"
    },
    {
      "src": "identifier: ret [72236,72239]",
      "dest": "identifier: ret [73730,73733]"
    },
    {
      "src": "identifier: t [235433,235434]",
      "dest": "identifier: t [236927,236928]"
    },
    {
      "src": "argument_list [166197,166225]",
      "dest": "argument_list [167691,167719]"
    },
    {
      "src": "string_fragment:  vs  [158904,158908]",
      "dest": "string_fragment:  vs  [160398,160402]"
    },
    {
      "src": "expression_statement [182186,182220]",
      "dest": "expression_statement [183680,183714]"
    },
    {
      "src": "parenthesized_expression [36106,36156]",
      "dest": "parenthesized_expression [36106,36156]"
    },
    {
      "src": "formal_parameter [155068,155079]",
      "dest": "formal_parameter [156562,156573]"
    },
    {
      "src": "identifier: separator [81666,81675]",
      "dest": "identifier: separator [83160,83169]"
    },
    {
      "src": "affectation_operator: = [53202,53203]",
      "dest": "affectation_operator: = [53202,53203]"
    },
    {
      "src": "identifier: cs [54632,54634]",
      "dest": "identifier: cs [54632,54634]"
    },
    {
      "src": "method_invocation [98113,98169]",
      "dest": "method_invocation [99607,99663]"
    },
    {
      "src": "local_variable_declaration [104234,104257]",
      "dest": "local_variable_declaration [105728,105751]"
    },
    {
      "src": "binary_expression [161008,161023]",
      "dest": "binary_expression [162502,162517]"
    },
    {
      "src": "type: String [188832,188838]",
      "dest": "type: String [190326,190332]"
    },
    {
      "src": "arithmetic_operator: - [181621,181622]",
      "dest": "arithmetic_operator: - [183115,183116]"
    },
    {
      "src": "type: String [140225,140231]",
      "dest": "type: String [141719,141725]"
    },
    {
      "src": "type: String [18419,18425]",
      "dest": "type: String [18419,18425]"
    },
    {
      "src": "block [84846,84881]",
      "dest": "block [86340,86375]"
    },
    {
      "src": "decimal_integer_literal: 0 [61113,61114]",
      "dest": "decimal_integer_literal: 0 [61572,61573]"
    },
    {
      "src": "block [81598,81635]",
      "dest": "block [83092,83129]"
    },
    {
      "src": "affectation_operator: = [23140,23141]",
      "dest": "affectation_operator: = [23140,23141]"
    },
    {
      "src": "identifier: increase [150401,150409]",
      "dest": "identifier: increase [151895,151903]"
    },
    {
      "src": "false: false [205736,205741]",
      "dest": "false: false [207230,207235]"
    },
    {
      "src": "argument_list [132622,132624]",
      "dest": "argument_list [134116,134118]"
    },
    {
      "src": "true: true [58310,58314]",
      "dest": "true: true [58703,58707]"
    },
    {
      "src": "parenthesized_expression [227167,227199]",
      "dest": "parenthesized_expression [228661,228693]"
    },
    {
      "src": "decimal_integer_literal: 0 [227437,227438]",
      "dest": "decimal_integer_literal: 0 [228931,228932]"
    },
    {
      "src": "local_variable_declaration [211278,211299]",
      "dest": "local_variable_declaration [212772,212793]"
    },
    {
      "src": "block [18820,18972]",
      "dest": "block [18820,18972]"
    },
    {
      "src": "line_comment: // actually has the most recent cost counts [236549,236592]",
      "dest": "line_comment: // actually has the most recent cost counts [238043,238086]"
    },
    {
      "src": "affectation_operator: = [227645,227646]",
      "dest": "affectation_operator: = [229139,229140]"
    },
    {
      "src": "identifier: append [195678,195684]",
      "dest": "identifier: append [197172,197178]"
    },
    {
      "src": "identifier: matcher [25134,25141]",
      "dest": "identifier: matcher [25134,25141]"
    },
    {
      "src": "expression_statement [161745,161792]",
      "dest": "expression_statement [163239,163286]"
    },
    {
      "src": "decimal_integer_literal: 0 [150260,150261]",
      "dest": "decimal_integer_literal: 0 [151754,151755]"
    },
    {
      "src": "local_variable_declaration [70007,70017]",
      "dest": "local_variable_declaration [71501,71511]"
    },
    {
      "src": "string_fragment: NoSuchFieldException occurred during 1.6 backcompat code [25587,25643]",
      "dest": "string_fragment: NoSuchFieldException occurred during 1.6 backcompat code [25587,25643]"
    },
    {
      "src": "increment_operator: ++ [228507,228509]",
      "dest": "increment_operator: ++ [230001,230003]"
    },
    {
      "src": "static: static [208014,208020]",
      "dest": "static: static [209508,209514]"
    },
    {
      "src": "identifier: length [49599,49605]",
      "dest": "identifier: length [49599,49605]"
    },
    {
      "src": "type: String[] [98035,98043]",
      "dest": "type: String[] [99529,99537]"
    },
    {
      "src": "identifier: charAt [209302,209308]",
      "dest": "identifier: charAt [210796,210802]"
    },
    {
      "src": "identifier: split [92788,92793]",
      "dest": "identifier: split [94282,94287]"
    },
    {
      "src": "comparison_operator: == [110844,110846]",
      "dest": "comparison_operator: == [112338,112340]"
    },
    {
      "src": "increment_operator: ++ [159387,159389]",
      "dest": "increment_operator: ++ [160881,160883]"
    },
    {
      "src": "binary_expression [116662,116670]",
      "dest": "binary_expression [118156,118164]"
    },
    {
      "src": "if_statement [131110,131165]",
      "dest": "if_statement [132604,132659]"
    },
    {
      "src": "block [86569,86606]",
      "dest": "block [88063,88100]"
    },
    {
      "src": "static: static [11623,11629]",
      "dest": "static: static [11623,11629]"
    },
    {
      "src": "type: CharSequence [8660,8672]",
      "dest": "type: CharSequence [8660,8672]"
    },
    {
      "src": "block [211337,211456]",
      "dest": "block [212831,212950]"
    },
    {
      "src": "parenthesized_expression [140375,140410]",
      "dest": "parenthesized_expression [141869,141904]"
    },
    {
      "src": "assignment_expression [235488,235502]",
      "dest": "assignment_expression [236982,236996]"
    },
    {
      "src": "identifier: output1 [175120,175127]",
      "dest": "identifier: output1 [176614,176621]"
    },
    {
      "src": "decimal_integer_literal: 0 [161477,161478]",
      "dest": "decimal_integer_literal: 0 [162971,162972]"
    },
    {
      "src": "block [104281,104342]",
      "dest": "block [105775,105836]"
    },
    {
      "src": "argument_list [134581,134586]",
      "dest": "argument_list [136075,136080]"
    },
    {
      "src": "binary_expression [123765,123792]",
      "dest": "binary_expression [125259,125286]"
    },
    {
      "src": "local_variable_declaration [227334,227360]",
      "dest": "local_variable_declaration [228828,228854]"
    },
    {
      "src": "if_statement [199772,199839]",
      "dest": "if_statement [201266,201333]"
    },
    {
      "src": "type: int [210278,210281]",
      "dest": "type: int [211772,211775]"
    },
    {
      "src": "type: boolean [110761,110768]",
      "dest": "type: boolean [112255,112262]"
    },
    {
      "src": "line_comment: // LastIndexOf [40009,40023]",
      "dest": "line_comment: // LastIndexOf [40009,40023]"
    },
    {
      "src": "block [223913,223950]",
      "dest": "block [225407,225444]"
    },
    {
      "src": "identifier: strLen [185550,185556]",
      "dest": "identifier: strLen [187044,187050]"
    },
    {
      "src": "true: true [109719,109723]",
      "dest": "true: true [111213,111217]"
    },
    {
      "src": "argument_list [75959,75961]",
      "dest": "argument_list [77453,77455]"
    },
    {
      "src": "identifier: str [144544,144547]",
      "dest": "identifier: str [146038,146041]"
    },
    {
      "src": "binary_expression [189122,189130]",
      "dest": "binary_expression [190616,190624]"
    },
    {
      "src": "affectation_operator: = [205768,205769]",
      "dest": "affectation_operator: = [207262,207263]"
    },
    {
      "src": "binary_expression [184044,184053]",
      "dest": "binary_expression [185538,185547]"
    },
    {
      "src": "identifier: length [219669,219675]",
      "dest": "identifier: length [221163,221169]"
    },
    {
      "src": "if_statement [86495,86606]",
      "dest": "if_statement [87989,88100]"
    },
    {
      "src": "type: int [49379,49382]",
      "dest": "type: int [49379,49382]"
    },
    {
      "src": "binary_expression [220138,220150]",
      "dest": "binary_expression [221632,221644]"
    },
    {
      "src": "identifier: isWhitespace [8861,8873]",
      "dest": "identifier: isWhitespace [8861,8873]"
    },
    {
      "src": "true: true [115558,115562]",
      "dest": "true: true [117052,117056]"
    },
    {
      "src": "identifier: removeEnd [141608,141617]",
      "dest": "identifier: removeEnd [143102,143111]"
    },
    {
      "src": "return_statement [95205,95256]",
      "dest": "return_statement [96699,96750]"
    },
    {
      "src": "argument_list [89404,89406]",
      "dest": "argument_list [90898,90900]"
    },
    {
      "src": "identifier: timeToLive [162560,162570]",
      "dest": "identifier: timeToLive [164054,164064]"
    },
    {
      "src": "binary_expression [12671,12682]",
      "dest": "binary_expression [12671,12682]"
    },
    {
      "src": "return_statement [215543,215555]",
      "dest": "return_statement [217037,217049]"
    },
    {
      "src": "return_statement [98106,98171]",
      "dest": "return_statement [99600,99665]"
    },
    {
      "src": "method_invocation [128103,128117]",
      "dest": "method_invocation [129597,129611]"
    },
    {
      "src": "block [91198,91549]",
      "dest": "block [92692,93043]"
    },
    {
      "src": "binary_expression [65202,65220]",
      "dest": "binary_expression [66249,66267]"
    },
    {
      "src": "array_access [241179,241195]",
      "dest": "array_access [242673,242689]"
    },
    {
      "src": "affectation_operator: = [227347,227348]",
      "dest": "affectation_operator: = [228841,228842]"
    },
    {
      "src": "identifier: replacementLength [158928,158945]",
      "dest": "identifier: replacementLength [160422,160439]"
    },
    {
      "src": "argument_list [131247,131249]",
      "dest": "argument_list [132741,132743]"
    },
    {
      "src": "identifier: str [193713,193716]",
      "dest": "identifier: str [195207,195210]"
    },
    {
      "src": "method_declaration [198128,198827]",
      "dest": "method_declaration [199622,200321]"
    },
    {
      "src": "identifier: replaceOnce [147059,147070]",
      "dest": "identifier: replaceOnce [148553,148564]"
    },
    {
      "src": "argument_list [23236,23257]",
      "dest": "argument_list [23236,23257]"
    },
    {
      "src": "comparison_operator: != [132831,132833]",
      "dest": "comparison_operator: != [134325,134327]"
    },
    {
      "src": "block [227200,227247]",
      "dest": "block [228694,228741]"
    },
    {
      "src": "identifier: strLen [188970,188976]",
      "dest": "identifier: strLen [190464,190470]"
    },
    {
      "src": "identifier: i [200968,200969]",
      "dest": "identifier: i [202462,202463]"
    },
    {
      "src": "affectation_operator: = [104668,104669]",
      "dest": "affectation_operator: = [106162,106163]"
    },
    {
      "src": "binary_expression [190529,190538]",
      "dest": "binary_expression [192023,192032]"
    },
    {
      "src": "comparison_operator: < [159866,159867]",
      "dest": "comparison_operator: < [161360,161361]"
    },
    {
      "src": "binary_expression [158243,158266]",
      "dest": "binary_expression [159737,159760]"
    },
    {
      "src": "variable_declarator [181609,181629]",
      "dest": "variable_declarator [183103,183123]"
    },
    {
      "src": "block_comment:     \n     * Represents a failed index search.\n     * @since 2.1\n     */ [6020,6090]",
      "dest": "block_comment:     \n     * Represents a failed index search.\n     * @since 2.1\n     */ [6020,6090]"
    },
    {
      "src": "identifier: str [180233,180236]",
      "dest": "identifier: str [181727,181730]"
    },
    {
      "src": "formal_parameters [83048,83078]",
      "dest": "formal_parameters [84542,84572]"
    },
    {
      "src": "argument_list [160887,160916]",
      "dest": "argument_list [162381,162410]"
    },
    {
      "src": "new: new [182265,182268]",
      "dest": "new: new [183759,183762]"
    },
    {
      "src": "block [141692,141727]",
      "dest": "block [143186,143221]"
    },
    {
      "src": "identifier: ch [198357,198359]",
      "dest": "identifier: ch [199851,199853]"
    },
    {
      "src": "decimal_integer_literal: 1 [39622,39623]",
      "dest": "decimal_integer_literal: 1 [39622,39623]"
    },
    {
      "src": "argument_list [144669,144693]",
      "dest": "argument_list [146163,146187]"
    },
    {
      "src": "string_literal [181509,181512]",
      "dest": "string_literal [183003,183006]"
    },
    {
      "src": "identifier: padStr [190619,190625]",
      "dest": "identifier: padStr [192113,192119]"
    },
    {
      "src": "line_comment: // The following is OK, because String.substring( beg, end ) excludes [105099,105168]",
      "dest": "line_comment: // The following is OK, because String.substring( beg, end ) excludes [106593,106662]"
    },
    {
      "src": "unary_expression [159158,159160]",
      "dest": "unary_expression [160652,160654]"
    },
    {
      "src": "type: Class<?> [24414,24422]",
      "dest": "type: Class<?> [24414,24422]"
    },
    {
      "src": "string_literal [190628,190631]",
      "dest": "string_literal [192122,192125]"
    },
    {
      "src": "identifier: greater [160611,160618]",
      "dest": "identifier: greater [162105,162112]"
    },
    {
      "src": "identifier: textIndex [161064,161073]",
      "dest": "identifier: textIndex [162558,162567]"
    },
    {
      "src": "block [132515,132552]",
      "dest": "block [134009,134046]"
    },
    {
      "src": "comparison_operator: == [58095,58097]",
      "dest": "comparison_operator: == [55128,55130]"
    },
    {
      "src": "logical_operator: && [228131,228133]",
      "dest": "logical_operator: && [229625,229627]"
    },
    {
      "src": "binary_expression [173086,173096]",
      "dest": "binary_expression [174580,174590]"
    },
    {
      "src": "identifier: str [244076,244079]",
      "dest": "identifier: str [245570,245573]"
    },
    {
      "src": "type: char[] [174934,174940]",
      "dest": "type: char[] [176428,176434]"
    },
    {
      "src": "return_statement [77440,77451]",
      "dest": "return_statement [78934,78945]"
    },
    {
      "src": "expression_statement [199984,200004]",
      "dest": "expression_statement [201478,201498]"
    },
    {
      "src": "if_statement [163661,163714]",
      "dest": "if_statement [165155,165208]"
    },
    {
      "src": "visibility: public [198128,198134]",
      "dest": "visibility: public [199622,199628]"
    },
    {
      "src": "argument_list [190848,190867]",
      "dest": "argument_list [192342,192361]"
    },
    {
      "src": "if_statement [174667,174774]",
      "dest": "if_statement [176161,176268]"
    },
    {
      "src": "identifier: add [117375,117378]",
      "dest": "identifier: add [118869,118872]"
    },
    {
      "src": "modifiers [219852,219857]",
      "dest": "modifiers [221346,221351]"
    },
    {
      "src": "identifier: search [72090,72096]",
      "dest": "identifier: search [73584,73590]"
    },
    {
      "src": "logical_operator: || [198216,198218]",
      "dest": "logical_operator: || [199710,199712]"
    },
    {
      "src": "method_invocation [53125,53143]",
      "dest": "method_invocation [53125,53143]"
    },
    {
      "src": "identifier: str [98142,98145]",
      "dest": "identifier: str [99636,99639]"
    },
    {
      "src": "type: String [175482,175488]",
      "dest": "type: String [176976,176982]"
    },
    {
      "src": "line_comment: // all strings were identical [231312,231341]",
      "dest": "line_comment: // all strings were identical [232806,232835]"
    },
    {
      "src": "static: static [45022,45028]",
      "dest": "static: static [45022,45028]"
    },
    {
      "src": "type: int [165834,165837]",
      "dest": "type: int [167328,167331]"
    },
    {
      "src": "formal_parameter [79754,79761]",
      "dest": "formal_parameter [81248,81255]"
    },
    {
      "src": "parenthesized_expression [159723,159740]",
      "dest": "parenthesized_expression [161217,161234]"
    },
    {
      "src": "method_invocation [50947,50970]",
      "dest": "method_invocation [50947,50970]"
    },
    {
      "src": "identifier: index [166137,166142]",
      "dest": "identifier: index [167631,167636]"
    },
    {
      "src": "identifier: openLen [91057,91064]",
      "dest": "identifier: openLen [92551,92558]"
    },
    {
      "src": "variable_declarator [159205,159219]",
      "dest": "variable_declarator [160699,160713]"
    },
    {
      "src": "identifier: cs [209122,209124]",
      "dest": "identifier: cs [210616,210618]"
    },
    {
      "src": "variable_declarator [235836,235839]",
      "dest": "variable_declarator [237330,237333]"
    },
    {
      "src": "identifier: toString [162415,162423]",
      "dest": "identifier: toString [163909,163917]"
    },
    {
      "src": "argument_list [141828,141830]",
      "dest": "argument_list [143322,143324]"
    },
    {
      "src": "binary_expression [132825,132838]",
      "dest": "binary_expression [134319,134332]"
    },
    {
      "src": "identifier: ordinal [36143,36150]",
      "dest": "identifier: ordinal [36143,36150]"
    },
    {
      "src": "decimal_integer_literal: 2 [190814,190815]",
      "dest": "decimal_integer_literal: 2 [192308,192309]"
    },
    {
      "src": "binary_expression [158144,158178]",
      "dest": "binary_expression [159638,159672]"
    },
    {
      "src": "binary_expression [239856,239885]",
      "dest": "binary_expression [241350,241379]"
    },
    {
      "src": "arithmetic_operator: + [83361,83362]",
      "dest": "arithmetic_operator: + [84855,84856]"
    },
    {
      "src": "arithmetic_operator: - [159737,159738]",
      "dest": "arithmetic_operator: - [161231,161232]"
    },
    {
      "src": "block [180203,180279]",
      "dest": "block [181697,181773]"
    },
    {
      "src": "binary_expression [72090,72104]",
      "dest": "binary_expression [73584,73598]"
    },
    {
      "src": "argument_list [18683,18690]",
      "dest": "argument_list [18683,18690]"
    },
    {
      "src": "identifier: pos [81690,81693]",
      "dest": "identifier: pos [83184,83187]"
    },
    {
      "src": "identifier: searchChars [61158,61169]",
      "dest": "identifier: searchChars [61617,61628]"
    },
    {
      "src": "identifier: MAX_VALUE [70384,70393]",
      "dest": "identifier: MAX_VALUE [71878,71887]"
    },
    {
      "src": "identifier: str [244182,244185]",
      "dest": "identifier: str [245676,245679]"
    },
    {
      "src": "\": \" [219524,219525]",
      "dest": "\": \" [221018,221019]"
    },
    {
      "src": "comparison_operator: == [104179,104181]",
      "dest": "comparison_operator: == [105673,105675]"
    },
    {
      "src": "binary_expression [78626,78644]",
      "dest": "binary_expression [80120,80138]"
    },
    {
      "src": "visibility: public [6095,6101]",
      "dest": "visibility: public [6095,6101]"
    },
    {
      "src": "block [75716,75793]",
      "dest": "block [77210,77287]"
    },
    {
      "src": "!: ! [8078,8079]",
      "dest": "!: ! [8078,8079]"
    },
    {
      "src": "block [205689,205971]",
      "dest": "block [207183,207465]"
    },
    {
      "src": "identifier: padChars [182092,182100]",
      "dest": "identifier: padChars [183586,183594]"
    },
    {
      "src": "method_invocation [195742,195778]",
      "dest": "method_invocation [197236,197272]"
    },
    {
      "src": "method_declaration [23847,26479]",
      "dest": "method_declaration [23847,26479]"
    },
    {
      "src": "method_invocation [40981,41008]",
      "dest": "method_invocation [40981,41008]"
    },
    {
      "src": "variable_declarator [228455,228468]",
      "dest": "variable_declarator [229949,229962]"
    },
    {
      "src": "method_invocation [75736,75748]",
      "dest": "method_invocation [77230,77242]"
    },
    {
      "src": "formal_parameter [39387,39399]",
      "dest": "formal_parameter [39387,39399]"
    },
    {
      "src": "identifier: list [123816,123820]",
      "dest": "identifier: list [125310,125314]"
    },
    {
      "src": "binary_expression [145532,145570]",
      "dest": "binary_expression [147026,147064]"
    },
    {
      "src": "visibility: public [49309,49315]",
      "dest": "visibility: public [49309,49315]"
    },
    {
      "src": "identifier: indexOf [29547,29554]",
      "dest": "identifier: indexOf [29547,29554]"
    },
    {
      "src": "identifier: i [118400,118401]",
      "dest": "identifier: i [119894,119895]"
    },
    {
      "src": "identifier: add [119202,119205]",
      "dest": "identifier: add [120696,120699]"
    },
    {
      "src": "type: String [47756,47762]",
      "dest": "type: String [47756,47762]"
    },
    {
      "src": "formal_parameter [86289,86305]",
      "dest": "formal_parameter [87783,87799]"
    },
    {
      "src": "type: String [22979,22985]",
      "dest": "type: String [22979,22985]"
    },
    {
      "src": "for_statement [123403,124128]",
      "dest": "for_statement [124897,125622]"
    },
    {
      "src": "identifier: splitByCharacterTypeCamelCase [122035,122064]",
      "dest": "identifier: splitByCharacterTypeCamelCase [123529,123558]"
    },
    {
      "src": "modifiers [39321,39334]",
      "dest": "modifiers [39321,39334]"
    },
    {
      "src": "argument_list [198577,198581]",
      "dest": "argument_list [200071,200075]"
    },
    {
      "src": "\": \" [158908,158909]",
      "dest": "\": \" [160402,160403]"
    },
    {
      "src": "variable_declarator [168155,168173]",
      "dest": "variable_declarator [169649,169667]"
    },
    {
      "src": "identifier: index [36732,36737]",
      "dest": "identifier: index [36732,36737]"
    },
    {
      "src": "identifier: middle [222161,222167]",
      "dest": "identifier: middle [223655,223661]"
    },
    {
      "src": "formal_parameters [129184,129218]",
      "dest": "formal_parameters [130678,130712]"
    },
    {
      "src": "identifier: str [75983,75986]",
      "dest": "identifier: str [77477,77480]"
    },
    {
      "src": "static: static [46500,46506]",
      "dest": "static: static [46500,46506]"
    },
    {
      "src": "identifier: searchStrs [70061,70071]",
      "dest": "identifier: searchStrs [71555,71565]"
    },
    {
      "src": "identifier: toUpperCase [191967,191978]",
      "dest": "identifier: toUpperCase [193461,193472]"
    },
    {
      "src": "null_literal: null [129242,129246]",
      "dest": "null_literal: null [130736,130740]"
    },
    {
      "src": "identifier: substring [75560,75569]",
      "dest": "identifier: substring [77054,77063]"
    },
    {
      "src": "while_statement [110796,111212]",
      "dest": "while_statement [112290,112706]"
    },
    {
      "src": "identifier: str [120448,120451]",
      "dest": "identifier: str [121942,121945]"
    },
    {
      "src": "decimal_integer_literal: 1 [195776,195777]",
      "dest": "decimal_integer_literal: 1 [197270,197271]"
    },
    {
      "src": "static: static [212125,212131]",
      "dest": "static: static [213619,213625]"
    },
    {
      "src": "identifier: str [36275,36278]",
      "dest": "identifier: str [36275,36278]"
    },
    {
      "src": "argument_list [222475,222486]",
      "dest": "argument_list [223969,223980]"
    },
    {
      "src": "identifier: len [77421,77424]",
      "dest": "identifier: len [78915,78918]"
    },
    {
      "src": "binary_expression [135374,135390]",
      "dest": "binary_expression [136868,136884]"
    },
    {
      "src": "binary_expression [205807,205813]",
      "dest": "binary_expression [207301,207307]"
    },
    {
      "src": "expression_statement [111198,111202]",
      "dest": "expression_statement [112692,112696]"
    },
    {
      "src": "method_invocation [183058,183081]",
      "dest": "method_invocation [184552,184575]"
    },
    {
      "src": "?: ? [36356,36357]",
      "dest": "?: ? [36356,36357]"
    },
    {
      "src": "identifier: pos [86525,86528]",
      "dest": "identifier: pos [88019,88022]"
    },
    {
      "src": "null_literal: null [59563,59567]",
      "dest": "null_literal: null [59950,59954]"
    },
    {
      "src": "try: try [24193,24196]",
      "dest": "try: try [24193,24196]"
    },
    {
      "src": "block [194543,194579]",
      "dest": "block [196037,196073]"
    },
    {
      "src": "formal_parameter [238090,238103]",
      "dest": "formal_parameter [239584,239597]"
    },
    {
      "src": "identifier: removeStart [138675,138686]",
      "dest": "identifier: removeStart [140169,140180]"
    },
    {
      "src": "assignment_expression [159901,159922]",
      "dest": "assignment_expression [161395,161416]"
    },
    {
      "src": "method_invocation [180244,180267]",
      "dest": "method_invocation [181738,181761]"
    },
    {
      "src": "comparison_operator: < [131400,131401]",
      "dest": "comparison_operator: < [132894,132895]"
    },
    {
      "src": "decimal_integer_literal: 1 [228927,228928]",
      "dest": "decimal_integer_literal: 1 [230421,230422]"
    },
    {
      "src": "type: String [175113,175119]",
      "dest": "type: String [176607,176613]"
    },
    {
      "src": "local_variable_declaration [210243,210264]",
      "dest": "local_variable_declaration [211737,211758]"
    },
    {
      "src": "identifier: EMPTY [168126,168131]",
      "dest": "identifier: EMPTY [169620,169625]"
    },
    {
      "src": "block [163651,163773]",
      "dest": "block [165145,165267]"
    },
    {
      "src": "identifier: i [66658,66659]",
      "dest": "identifier: i [67777,67778]"
    },
    {
      "src": "variable_declarator [110535,110553]",
      "dest": "variable_declarator [112029,112047]"
    },
    {
      "src": "formal_parameters [8659,8676]",
      "dest": "formal_parameters [8659,8676]"
    },
    {
      "src": "new: new [160947,160950]",
      "dest": "new: new [162441,162444]"
    },
    {
      "src": "expression_statement [219794,219833]",
      "dest": "expression_statement [221288,221327]"
    },
    {
      "src": "argument_list [199799,199804]",
      "dest": "argument_list [201293,201298]"
    },
    {
      "src": "type: int [66636,66639]",
      "dest": "type: int [67755,67758]"
    },
    {
      "src": "binary_expression [57852,57862]",
      "dest": "binary_expression [54957,54967]"
    },
    {
      "src": "arithmetic_operator: - [49526,49527]",
      "dest": "arithmetic_operator: - [49526,49527]"
    },
    {
      "src": "visibility: public [78357,78363]",
      "dest": "visibility: public [79851,79857]"
    },
    {
      "src": "argument_list [104474,104509]",
      "dest": "argument_list [105968,106003]"
    },
    {
      "src": "identifier: length [222344,222350]",
      "dest": "identifier: length [223838,223844]"
    },
    {
      "src": "parenthesized_expression [184143,184161]",
      "dest": "parenthesized_expression [185637,185655]"
    },
    {
      "src": "visibility: public [18375,18381]",
      "dest": "visibility: public [18375,18381]"
    },
    {
      "src": "identifier: remove [140273,140279]",
      "dest": "identifier: remove [141767,141773]"
    },
    {
      "src": "assignment_expression [36531,36572]",
      "dest": "assignment_expression [36531,36572]"
    },
    {
      "src": "affectation_operator: = [175062,175063]",
      "dest": "affectation_operator: = [176556,176557]"
    },
    {
      "src": "affectation_operator: = [159619,159620]",
      "dest": "affectation_operator: = [161113,161114]"
    },
    {
      "src": "identifier: padStr [182103,182109]",
      "dest": "identifier: padStr [183597,183603]"
    },
    {
      "src": "formal_parameter [176591,176607]",
      "dest": "formal_parameter [178085,178101]"
    },
    {
      "src": "identifier: str [176696,176699]",
      "dest": "identifier: str [178190,178193]"
    },
    {
      "src": "\": \" [26396,26397]",
      "dest": "\": \" [26396,26397]"
    },
    {
      "src": "null_literal: null [104370,104374]",
      "dest": "null_literal: null [105864,105868]"
    },
    {
      "src": "unary_expression [228847,228849]",
      "dest": "unary_expression [230341,230343]"
    },
    {
      "src": "identifier: end [168484,168487]",
      "dest": "identifier: end [169978,169981]"
    },
    {
      "src": "identifier: str [167968,167971]",
      "dest": "identifier: str [169462,169465]"
    },
    {
      "src": "block [75963,76006]",
      "dest": "block [77457,77500]"
    },
    {
      "src": "block [79799,79835]",
      "dest": "block [81293,81329]"
    },
    {
      "src": "identifier: str [181807,181810]",
      "dest": "identifier: str [183301,183304]"
    },
    {
      "src": "identifier: end [104706,104709]",
      "dest": "identifier: end [106200,106203]"
    },
    {
      "src": "argument_list [186047,186049]",
      "dest": "argument_list [187541,187543]"
    },
    {
      "src": "parenthesized_expression [14735,14748]",
      "dest": "parenthesized_expression [14735,14748]"
    },
    {
      "src": "visibility: public [233703,233709]",
      "dest": "visibility: public [235197,235203]"
    },
    {
      "src": "method_invocation [57403,57414]",
      "dest": "method_invocation [57743,57754]"
    },
    {
      "src": "identifier: overlay [168576,168583]",
      "dest": "identifier: overlay [170070,170077]"
    },
    {
      "src": "identifier: ch [170103,170105]",
      "dest": "identifier: ch [171597,171599]"
    },
    {
      "src": "method_invocation [83093,83105]",
      "dest": "method_invocation [84587,84599]"
    },
    {
      "src": "local_variable_declaration [116883,116909]",
      "dest": "local_variable_declaration [118377,118403]"
    },
    {
      "src": "visibility: public [63716,63722]",
      "dest": "visibility: public [64763,64769]"
    },
    {
      "src": "return_statement [231563,231576]",
      "dest": "return_statement [233057,233070]"
    },
    {
      "src": "identifier: str [213950,213953]",
      "dest": "identifier: str [215444,215447]"
    },
    {
      "src": "method_invocation [214630,214662]",
      "dest": "method_invocation [216124,216156]"
    },
    {
      "src": "identifier: str2 [28486,28490]",
      "dest": "identifier: str2 [28486,28490]"
    },
    {
      "src": "identifier: str [189071,189074]",
      "dest": "identifier: str [190565,190568]"
    },
    {
      "src": "argument_list [220214,220251]",
      "dest": "argument_list [221708,221745]"
    },
    {
      "src": "method_declaration [50806,50982]",
      "dest": "method_declaration [50806,50982]"
    },
    {
      "src": "argument_list [124145,124195]",
      "dest": "argument_list [125639,125689]"
    },
    {
      "src": "identifier: iterator [132899,132907]",
      "dest": "identifier: iterator [134393,134401]"
    },
    {
      "src": "local_variable_declaration [24855,24928]",
      "dest": "local_variable_declaration [24855,24928]"
    },
    {
      "src": "argument_list [91574,91576]",
      "dest": "argument_list [93068,93070]"
    },
    {
      "src": "binary_expression [170226,170242]",
      "dest": "binary_expression [171720,171736]"
    },
    {
      "src": "parenthesized_expression [195466,195479]",
      "dest": "parenthesized_expression [196960,196973]"
    },
    {
      "src": "return_statement [40932,40955]",
      "dest": "return_statement [40932,40955]"
    },
    {
      "src": "comparison_operator: != [202176,202178]",
      "dest": "comparison_operator: != [203670,203672]"
    },
    {
      "src": "method_invocation [58098,58114]",
      "dest": "method_invocation [55131,55147]"
    },
    {
      "src": "identifier: middle [222071,222077]",
      "dest": "identifier: middle [223565,223571]"
    },
    {
      "src": "local_variable_declaration [198180,198191]",
      "dest": "local_variable_declaration [199674,199685]"
    },
    {
      "src": "identifier: sz [137372,137374]",
      "dest": "identifier: sz [138866,138868]"
    },
    {
      "src": "type: boolean [63730,63737]",
      "dest": "type: boolean [64777,64784]"
    },
    {
      "src": "type: int [6259,6262]",
      "dest": "type: int [6259,6262]"
    },
    {
      "src": "identifier: separator [83363,83372]",
      "dest": "identifier: separator [84857,84866]"
    },
    {
      "src": "decimal_integer_literal: 0 [228551,228552]",
      "dest": "decimal_integer_literal: 0 [230045,230046]"
    },
    {
      "src": "binary_expression [225335,225351]",
      "dest": "binary_expression [226829,226845]"
    },
    {
      "src": "false: false [152708,152713]",
      "dest": "false: false [154202,154207]"
    },
    {
      "src": "if_statement [181739,181846]",
      "dest": "if_statement [183233,183340]"
    },
    {
      "src": "local_variable_declaration [199848,199862]",
      "dest": "local_variable_declaration [201342,201356]"
    },
    {
      "src": "identifier: strsLen [23012,23019]",
      "dest": "identifier: strsLen [23012,23019]"
    },
    {
      "src": "parenthesized_expression [219398,219411]",
      "dest": "parenthesized_expression [220892,220905]"
    },
    {
      "src": "return_statement [104202,104214]",
      "dest": "return_statement [105696,105708]"
    },
    {
      "src": "if_statement [173267,173431]",
      "dest": "if_statement [174761,174925]"
    },
    {
      "src": "identifier: pos [84822,84825]",
      "dest": "identifier: pos [86316,86319]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [222562,222635]",
      "dest": "line_comment: //----------------------------------------------------------------------- [224056,224129]"
    },
    {
      "src": "type: int [211278,211281]",
      "dest": "type: int [212772,212775]"
    },
    {
      "src": "catch: catch [25667,25672]",
      "dest": "catch: catch [25667,25672]"
    },
    {
      "src": "increment_operator: ++ [211333,211335]",
      "dest": "increment_operator: ++ [212827,212829]"
    },
    {
      "src": "identifier: startPos [39764,39772]",
      "dest": "identifier: startPos [39764,39772]"
    },
    {
      "src": "argument_list [175119,175128]",
      "dest": "argument_list [176613,176622]"
    },
    {
      "src": "identifier: str [86459,86462]",
      "dest": "identifier: str [87953,87956]"
    },
    {
      "src": "increment_operator: ++ [206979,206981]",
      "dest": "increment_operator: ++ [208473,208475]"
    },
    {
      "src": "variable_declarator [69985,69992]",
      "dest": "variable_declarator [71479,71486]"
    },
    {
      "src": "assignment_expression [161304,161321]",
      "dest": "assignment_expression [162798,162815]"
    },
    {
      "src": "identifier: str [192780,192783]",
      "dest": "identifier: str [194274,194277]"
    },
    {
      "src": "argument_list [125157,125170]",
      "dest": "argument_list [126651,126664]"
    },
    {
      "src": "identifier: searchLength [159372,159384]",
      "dest": "identifier: searchLength [160866,160878]"
    },
    {
      "src": "type: IllegalArgumentException [220032,220056]",
      "dest": "type: IllegalArgumentException [221526,221550]"
    },
    {
      "src": "method_invocation [118538,118551]",
      "dest": "method_invocation [120032,120045]"
    },
    {
      "src": "identifier: len [80103,80106]",
      "dest": "identifier: len [81597,81600]"
    },
    {
      "src": "type: int [155260,155263]",
      "dest": "type: int [156754,156757]"
    },
    {
      "src": "visibility: public [37753,37759]",
      "dest": "visibility: public [37753,37759]"
    },
    {
      "src": "identifier: splitByWholeSeparatorWorker [103168,103195]",
      "dest": "identifier: splitByWholeSeparatorWorker [104662,104689]"
    },
    {
      "src": "identifier: replacementList [155366,155381]",
      "dest": "identifier: replacementList [156860,156875]"
    },
    {
      "src": "identifier: size [189170,189174]",
      "dest": "identifier: size [190664,190668]"
    },
    {
      "src": "identifier: start [75806,75811]",
      "dest": "identifier: start [77300,77305]"
    },
    {
      "src": "argument_list [225195,225197]",
      "dest": "argument_list [226689,226691]"
    },
    {
      "src": "throw_statement [220022,220104]",
      "dest": "throw_statement [221516,221598]"
    },
    {
      "src": "if_statement [86379,86440]",
      "dest": "if_statement [87873,87934]"
    },
    {
      "src": "expression_statement [189150,189185]",
      "dest": "expression_statement [190644,190679]"
    },
    {
      "src": "identifier: length [227964,227970]",
      "dest": "identifier: length [229458,229464]"
    },
    {
      "src": "argument_list [181558,181560]",
      "dest": "argument_list [183052,183054]"
    },
    {
      "src": "identifier: str [116320,116323]",
      "dest": "identifier: str [117814,117817]"
    },
    {
      "src": "line_comment: // vary, so return the length of the shortest string. [229131,229184]",
      "dest": "line_comment: // vary, so return the length of the shortest string. [230625,230678]"
    },
    {
      "src": "identifier: endsWith [242414,242422]",
      "dest": "identifier: endsWith [243908,243916]"
    },
    {
      "src": "return_statement [170141,170154]",
      "dest": "return_statement [171635,171648]"
    },
    {
      "src": "comparison_operator: < [118486,118487]",
      "dest": "comparison_operator: < [119980,119981]"
    },
    {
      "src": "for_statement [137192,137350]",
      "dest": "for_statement [138686,138844]"
    },
    {
      "src": "affectation_operator: *= [131183,131185]",
      "dest": "affectation_operator: *= [132677,132679]"
    },
    {
      "src": "type: String [214545,214551]",
      "dest": "type: String [216039,216045]"
    },
    {
      "src": "method_invocation [169944,169956]",
      "dest": "method_invocation [171438,171450]"
    },
    {
      "src": "variable_declarator [209237,209242]",
      "dest": "variable_declarator [210731,210736]"
    },
    {
      "src": "null_literal: null [212189,212193]",
      "dest": "null_literal: null [213683,213687]"
    },
    {
      "src": "identifier: i [202084,202085]",
      "dest": "identifier: i [203578,203579]"
    },
    {
      "src": "return_statement [221994,222005]",
      "dest": "return_statement [223488,223499]"
    },
    {
      "src": "identifier: replaceChars [165803,165815]",
      "dest": "identifier: replaceChars [167297,167309]"
    },
    {
      "src": "modifiers [141587,141600]",
      "dest": "modifiers [143081,143094]"
    },
    {
      "src": "block [204271,204579]",
      "dest": "block [205765,206073]"
    },
    {
      "src": "identifier: padding [182047,182054]",
      "dest": "identifier: padding [183541,183548]"
    },
    {
      "src": "identifier: str [137112,137115]",
      "dest": "identifier: str [138606,138609]"
    },
    {
      "src": "formal_parameter [157824,157843]",
      "dest": "formal_parameter [159318,159337]"
    },
    {
      "src": "variable_declarator [18452,18458]",
      "dest": "variable_declarator [18452,18458]"
    },
    {
      "src": "comparison_operator: == [18476,18478]",
      "dest": "comparison_operator: == [18476,18478]"
    },
    {
      "src": "identifier: start [119220,119225]",
      "dest": "identifier: start [120714,120719]"
    },
    {
      "src": "return_statement [205953,205965]",
      "dest": "return_statement [207447,207459]"
    },
    {
      "src": "while_statement [104723,106374]",
      "dest": "while_statement [106217,107868]"
    },
    {
      "src": "block [116384,119301]",
      "dest": "block [117878,120795]"
    },
    {
      "src": "identifier: str [20487,20490]",
      "dest": "identifier: str [20487,20490]"
    },
    {
      "src": "method_declaration [243432,243551]",
      "dest": "method_declaration [244926,245045]"
    },
    {
      "src": "method_invocation [190664,190676]",
      "dest": "method_invocation [192158,192170]"
    },
    {
      "src": "identifier: buf [166365,166368]",
      "dest": "identifier: buf [167859,167862]"
    },
    {
      "src": "if_statement [110563,110638]",
      "dest": "if_statement [112057,112132]"
    },
    {
      "src": "identifier: str [181583,181586]",
      "dest": "identifier: str [183077,183080]"
    },
    {
      "src": "type: String [129201,129207]",
      "dest": "type: String [130695,130701]"
    },
    {
      "src": "identifier: Character [198706,198715]",
      "dest": "identifier: Character [200200,200209]"
    },
    {
      "src": "identifier: indexOfIgnoreCase [37771,37788]",
      "dest": "identifier: indexOfIgnoreCase [37771,37788]"
    },
    {
      "src": "binary_expression [158217,158239]",
      "dest": "binary_expression [159711,159733]"
    },
    {
      "src": "identifier: Character [137240,137249]",
      "dest": "identifier: Character [138734,138743]"
    },
    {
      "src": "identifier: start [73844,73849]",
      "dest": "identifier: start [75338,75343]"
    },
    {
      "src": "type: boolean [28441,28448]",
      "dest": "type: boolean [28441,28448]"
    },
    {
      "src": "method_invocation [220306,220318]",
      "dest": "method_invocation [221800,221812]"
    },
    {
      "src": "false: false [53357,53362]",
      "dest": "false: false [53357,53362]"
    },
    {
      "src": "affectation_operator: += [105801,105803]",
      "dest": "affectation_operator: += [107295,107297]"
    },
    {
      "src": "return_statement [55004,55027]",
      "dest": "return_statement [55350,55373]"
    },
    {
      "src": "if_statement [49701,49770]",
      "dest": "if_statement [49701,49770]"
    },
    {
      "src": "binary_expression [28509,28521]",
      "dest": "binary_expression [28509,28521]"
    },
    {
      "src": "identifier: ch [166049,166051]",
      "dest": "identifier: ch [167543,167545]"
    },
    {
      "src": "identifier: j [235983,235984]",
      "dest": "identifier: j [237477,237478]"
    },
    {
      "src": "argument_list [174574,174576]",
      "dest": "argument_list [176068,176070]"
    },
    {
      "src": "identifier: endOffset [222245,222254]",
      "dest": "identifier: endOffset [223739,223748]"
    },
    {
      "src": "identifier: append [132858,132864]",
      "dest": "identifier: append [134352,134358]"
    },
    {
      "src": "decimal_integer_literal: 0 [73704,73705]",
      "dest": "decimal_integer_literal: 0 [75198,75199]"
    },
    {
      "src": "block [78490,78527]",
      "dest": "block [79984,80021]"
    },
    {
      "src": "block [23205,23268]",
      "dest": "block [23205,23268]"
    },
    {
      "src": "identifier: splitPreserveAllTokens [109615,109637]",
      "dest": "identifier: splitPreserveAllTokens [111109,111131]"
    },
    {
      "src": "identifier: java.util.List [902,916]",
      "dest": "identifier: java.util.List [902,916]"
    },
    {
      "src": "assignment_expression [160722,160745]",
      "dest": "assignment_expression [162216,162239]"
    },
    {
      "src": "decimal_integer_literal: 0 [78487,78488]",
      "dest": "decimal_integer_literal: 0 [79981,79982]"
    },
    {
      "src": "identifier: str [170338,170341]",
      "dest": "identifier: str [171832,171835]"
    },
    {
      "src": "parenthesized_expression [211204,211231]",
      "dest": "parenthesized_expression [212698,212725]"
    },
    {
      "src": "method_declaration [181326,182302]",
      "dest": "method_declaration [182820,183796]"
    },
    {
      "src": "arithmetic_operator: - [236114,236115]",
      "dest": "arithmetic_operator: - [237608,237609]"
    },
    {
      "src": "identifier: sz [210293,210295]",
      "dest": "identifier: sz [211787,211789]"
    },
    {
      "src": "block_comment:     \n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */ [53477,54431]",
      "dest": "block_comment:     \n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)                = -1\n     * StringUtils.indexOfAny(\"\", *)                  = -1\n     * StringUtils.indexOfAny(*, null)                = -1\n     * StringUtils.indexOfAny(*, [])                  = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */ [53477,54431]"
    },
    {
      "src": "expression_statement [168212,168222]",
      "dest": "expression_statement [169706,169716]"
    },
    {
      "src": "comparison_operator: < [220003,220004]",
      "dest": "comparison_operator: < [221497,221498]"
    },
    {
      "src": "type: ArrayList<String> [116766,116783]",
      "dest": "type: ArrayList<String> [118260,118277]"
    },
    {
      "src": "binary_expression [175337,175343]",
      "dest": "binary_expression [176831,176837]"
    },
    {
      "src": "parenthesized_expression [228279,228300]",
      "dest": "parenthesized_expression [229773,229794]"
    },
    {
      "src": "method_invocation [133966,133984]",
      "dest": "method_invocation [135460,135478]"
    },
    {
      "src": "identifier: i [137323,137324]",
      "dest": "identifier: i [138817,138818]"
    },
    {
      "src": "visibility: public [132277,132283]",
      "dest": "visibility: public [133771,133777]"
    },
    {
      "src": "affectation_operator: = [161755,161756]",
      "dest": "affectation_operator: = [163249,163250]"
    },
    {
      "src": "affectation_operator: = [104550,104551]",
      "dest": "affectation_operator: = [106044,106045]"
    },
    {
      "src": "method_declaration [11616,11738]",
      "dest": "method_declaration [11616,11738]"
    },
    {
      "src": "identifier: outputLength [174960,174972]",
      "dest": "identifier: outputLength [176454,176466]"
    },
    {
      "src": "identifier: noMoreMatchesForReplIndex [159759,159784]",
      "dest": "identifier: noMoreMatchesForReplIndex [161253,161278]"
    },
    {
      "src": "identifier: remove [138824,138830]",
      "dest": "identifier: remove [140318,140324]"
    },
    {
      "src": "binary_expression [31861,31893]",
      "dest": "binary_expression [31861,31893]"
    },
    {
      "src": "visibility: public [223644,223650]",
      "dest": "visibility: public [225138,225144]"
    },
    {
      "src": "block [159391,160003]",
      "dest": "block [160885,161497]"
    },
    {
      "src": "decimal_integer_literal: 4 [219472,219473]",
      "dest": "decimal_integer_literal: 4 [220966,220967]"
    },
    {
      "src": "identifier: length [170230,170236]",
      "dest": "identifier: length [171724,171730]"
    },
    {
      "src": "null_literal: null [89205,89209]",
      "dest": "null_literal: null [90699,90703]"
    },
    {
      "src": "return_statement [190749,190760]",
      "dest": "return_statement [192243,192254]"
    },
    {
      "src": "method_declaration [224926,225444]",
      "dest": "method_declaration [226420,226938]"
    },
    {
      "src": "identifier: searchChar [50959,50969]",
      "dest": "identifier: searchChar [50959,50969]"
    },
    {
      "src": "type: String [37801,37807]",
      "dest": "type: String [37801,37807]"
    },
    {
      "src": "identifier: i [241105,241106]",
      "dest": "identifier: i [242599,242600]"
    },
    {
      "src": "formal_parameters [63750,63781]",
      "dest": "formal_parameters [64797,64828]"
    },
    {
      "src": "identifier: str1 [28509,28513]",
      "dest": "identifier: str1 [28509,28513]"
    },
    {
      "src": "binary_expression [131522,131538]",
      "dest": "binary_expression [133016,133032]"
    },
    {
      "src": "identifier: str [90905,90908]",
      "dest": "identifier: str [92399,92402]"
    },
    {
      "src": "identifier: size [91661,91665]",
      "dest": "identifier: size [93155,93159]"
    },
    {
      "src": "identifier: str [107746,107749]",
      "dest": "identifier: str [109240,109243]"
    },
    {
      "src": "formal_parameter [152584,152595]",
      "dest": "formal_parameter [154078,154089]"
    },
    {
      "src": "identifier: timeToLive [158412,158422]",
      "dest": "identifier: timeToLive [159906,159916]"
    },
    {
      "src": "comparison_operator: == [28514,28516]",
      "dest": "comparison_operator: == [28514,28516]"
    },
    {
      "src": "identifier: containsAny [59622,59633]",
      "dest": "identifier: containsAny [60009,60020]"
    },
    {
      "src": "line_comment: // no search strings found, we are done [160053,160092]",
      "dest": "line_comment: // no search strings found, we are done [161547,161586]"
    },
    {
      "src": "identifier: str [20254,20257]",
      "dest": "identifier: str [20254,20257]"
    },
    {
      "src": "identifier: lowerCase [194479,194488]",
      "dest": "identifier: lowerCase [195973,195982]"
    },
    {
      "src": "if_statement [159405,159596]",
      "dest": "if_statement [160899,161090]"
    },
    {
      "src": "block [18779,18814]",
      "dest": "block [18779,18814]"
    },
    {
      "src": "identifier: cs [65288,65290]",
      "dest": "identifier: cs [66335,66337]"
    },
    {
      "src": "block [150086,150122]",
      "dest": "block [151580,151616]"
    },
    {
      "src": "if_statement [239799,239897]",
      "dest": "if_statement [241293,241391]"
    },
    {
      "src": "identifier: buf [134571,134574]",
      "dest": "identifier: buf [136065,136068]"
    },
    {
      "src": "binary_expression [86525,86567]",
      "dest": "binary_expression [88019,88061]"
    },
    {
      "src": "return_statement [77369,77382]",
      "dest": "return_statement [78863,78876]"
    },
    {
      "src": "affectation_operator: = [149992,149993]",
      "dest": "affectation_operator: = [151486,151487]"
    },
    {
      "src": "modifiers [193656,193669]",
      "dest": "modifiers [195150,195163]"
    },
    {
      "src": "method_invocation [187755,187777]",
      "dest": "method_invocation [189249,189271]"
    },
    {
      "src": "identifier: ch [198578,198580]",
      "dest": "identifier: ch [200072,200074]"
    },
    {
      "src": "identifier: start [91216,91221]",
      "dest": "identifier: start [92710,92715]"
    },
    {
      "src": "identifier: ArrayUtils [241015,241025]",
      "dest": "identifier: ArrayUtils [242509,242519]"
    },
    {
      "src": "comparison_operator: == [183946,183948]",
      "dest": "comparison_operator: == [185440,185442]"
    },
    {
      "src": "formal_parameters [224961,224997]",
      "dest": "formal_parameters [226455,226491]"
    },
    {
      "src": "if_statement [42288,42353]",
      "dest": "if_statement [42288,42353]"
    },
    {
      "src": "identifier: length [220159,220165]",
      "dest": "identifier: length [221653,221659]"
    },
    {
      "src": "local_variable_declaration [131378,131397]",
      "dest": "local_variable_declaration [132872,132891]"
    },
    {
      "src": "binary_expression [220190,220251]",
      "dest": "binary_expression [221684,221745]"
    },
    {
      "src": "increment_operator: -- [175351,175353]",
      "dest": "increment_operator: -- [176845,176847]"
    },
    {
      "src": "increment_operator: ++ [199968,199970]",
      "dest": "increment_operator: ++ [201462,201464]"
    },
    {
      "src": "identifier: length [244257,244263]",
      "dest": "identifier: length [245751,245757]"
    },
    {
      "src": "identifier: str [113324,113327]",
      "dest": "identifier: str [114818,114821]"
    },
    {
      "src": "binary_expression [159409,159540]",
      "dest": "binary_expression [160903,161034]"
    },
    {
      "src": "parenthesized_expression [205837,205888]",
      "dest": "parenthesized_expression [207331,207382]"
    },
    {
      "src": "identifier: longestStrLen [227974,227987]",
      "dest": "identifier: longestStrLen [229468,229481]"
    },
    {
      "src": "false: false [202210,202215]",
      "dest": "false: false [203704,203709]"
    },
    {
      "src": "identifier: indexOf [89370,89377]",
      "dest": "identifier: indexOf [90864,90871]"
    },
    {
      "src": "parenthesized_expression [203255,203305]",
      "dest": "parenthesized_expression [204749,204799]"
    },
    {
      "src": "identifier: ordinal [36707,36714]",
      "dest": "identifier: ordinal [36707,36714]"
    },
    {
      "src": "identifier: replace [163734,163741]",
      "dest": "identifier: replace [165228,165235]"
    },
    {
      "src": "local_variable_declaration [173226,173258]",
      "dest": "local_variable_declaration [174720,174752]"
    },
    {
      "src": "local_variable_declaration [62514,62538]",
      "dest": "local_variable_declaration [63253,63277]"
    },
    {
      "src": "type: String [165547,165553]",
      "dest": "type: String [167041,167047]"
    },
    {
      "src": "block [172975,173457]",
      "dest": "block [174469,174951]"
    },
    {
      "src": "parenthesized_expression [54836,54858]",
      "dest": "parenthesized_expression [58143,58165]"
    },
    {
      "src": "identifier: buffer [198307,198313]",
      "dest": "identifier: buffer [199801,199807]"
    },
    {
      "src": "argument_list [196825,196827]",
      "dest": "argument_list [198319,198321]"
    },
    {
      "src": "argument_list [199917,199927]",
      "dest": "argument_list [201411,201421]"
    },
    {
      "src": "static: static [30668,30674]",
      "dest": "static: static [30668,30674]"
    },
    {
      "src": "identifier: suffix [244088,244094]",
      "dest": "identifier: suffix [245582,245588]"
    },
    {
      "src": "identifier: padStr [181983,181989]",
      "dest": "identifier: padStr [183477,183483]"
    },
    {
      "src": "argument_list [207028,207031]",
      "dest": "argument_list [208522,208525]"
    },
    {
      "src": "modifiers [96703,96716]",
      "dest": "modifiers [98197,98210]"
    },
    {
      "src": "decimal_integer_literal: 0 [206967,206968]",
      "dest": "decimal_integer_literal: 0 [208461,208462]"
    },
    {
      "src": "comparison_operator: <= [181648,181650]",
      "dest": "comparison_operator: <= [183142,183144]"
    },
    {
      "src": "assignment_expression [236444,236450]",
      "dest": "assignment_expression [237938,237944]"
    },
    {
      "src": "?: ? [12683,12684]",
      "dest": "?: ? [12683,12684]"
    },
    {
      "src": "binary_expression [203121,203131]",
      "dest": "binary_expression [204615,204625]"
    },
    {
      "src": "local_variable_declaration [123408,123433]",
      "dest": "local_variable_declaration [124902,124927]"
    },
    {
      "src": "catch: catch [25347,25352]",
      "dest": "catch: catch [25347,25352]"
    },
    {
      "src": "null_literal: null [66503,66507]",
      "dest": "null_literal: null [67550,67554]"
    },
    {
      "src": "parenthesized_expression [81689,81713]",
      "dest": "parenthesized_expression [83183,83207]"
    },
    {
      "src": "method_invocation [208257,208269]",
      "dest": "method_invocation [209751,209763]"
    },
    {
      "src": "comparison_operator: == [176659,176661]",
      "dest": "comparison_operator: == [178153,178155]"
    },
    {
      "src": "variable_declarator [54748,54765]",
      "dest": "variable_declarator [58052,58069]"
    },
    {
      "src": "identifier: list [91469,91473]",
      "dest": "identifier: list [92963,92967]"
    },
    {
      "src": "if_statement [18749,18972]",
      "dest": "if_statement [18749,18972]"
    },
    {
      "src": "affectation_operator: = [215696,215697]",
      "dest": "affectation_operator: = [217190,217191]"
    },
    {
      "src": "array_creation_expression [178163,178179]",
      "dest": "array_creation_expression [179657,179673]"
    },
    {
      "src": "type: String[] [95145,95153]",
      "dest": "type: String[] [96639,96647]"
    },
    {
      "src": "true: true [207114,207118]",
      "dest": "true: true [208608,208612]"
    },
    {
      "src": "identifier: stripEnd [17241,17249]",
      "dest": "identifier: stripEnd [17241,17249]"
    },
    {
      "src": "if_statement [205699,205752]",
      "dest": "if_statement [207193,207246]"
    },
    {
      "src": "affectation_operator: = [159911,159912]",
      "dest": "affectation_operator: = [161405,161406]"
    },
    {
      "src": "null_literal: null [116602,116606]",
      "dest": "null_literal: null [118096,118100]"
    },
    {
      "src": "comparison_operator: < [36610,36611]",
      "dest": "comparison_operator: < [36610,36611]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [62397,62412]",
      "dest": "identifier: INDEX_NOT_FOUND [63136,63151]"
    },
    {
      "src": "affectation_operator: = [235412,235413]",
      "dest": "affectation_operator: = [236906,236907]"
    },
    {
      "src": "identifier: lastIndexOf [43477,43488]",
      "dest": "identifier: lastIndexOf [43477,43488]"
    },
    {
      "src": "identifier: length [63952,63958]",
      "dest": "identifier: length [64999,65005]"
    },
    {
      "src": "formal_parameter [79742,79752]",
      "dest": "formal_parameter [81236,81246]"
    },
    {
      "src": "update_expression [118400,118403]",
      "dest": "update_expression [119894,119897]"
    },
    {
      "src": "assignment_expression [76160,76169]",
      "dest": "assignment_expression [77654,77663]"
    },
    {
      "src": "identifier: isEmpty [54516,54523]",
      "dest": "identifier: isEmpty [54516,54523]"
    },
    {
      "src": "return_statement [160136,160148]",
      "dest": "return_statement [161630,161642]"
    },
    {
      "src": "throw_statement [25882,25978]",
      "dest": "throw_statement [25882,25978]"
    },
    {
      "src": "identifier: i [161480,161481]",
      "dest": "identifier: i [162974,162975]"
    },
    {
      "src": "formal_parameters [75569,75601]",
      "dest": "formal_parameters [77063,77095]"
    },
    {
      "src": "type: char[] [137134,137140]",
      "dest": "type: char[] [138628,138634]"
    },
    {
      "src": "formal_parameter [104033,104043]",
      "dest": "formal_parameter [105527,105537]"
    },
    {
      "src": "arithmetic_operator: + [106129,106130]",
      "dest": "arithmetic_operator: + [107623,107624]"
    },
    {
      "src": "affectation_operator: = [117760,117761]",
      "dest": "affectation_operator: = [119254,119255]"
    },
    {
      "src": "block [168009,168742]",
      "dest": "block [169503,170236]"
    },
    {
      "src": "decimal_integer_literal: 0 [141797,141798]",
      "dest": "decimal_integer_literal: 0 [143291,143292]"
    },
    {
      "src": "method_declaration [27405,27537]",
      "dest": "method_declaration [27405,27537]"
    },
    {
      "src": "identifier: startPos [30720,30728]",
      "dest": "identifier: startPos [30720,30728]"
    },
    {
      "src": "type: int [66718,66721]",
      "dest": "type: int [67837,67840]"
    },
    {
      "src": "identifier: first [134139,134144]",
      "dest": "identifier: first [135633,135638]"
    },
    {
      "src": "identifier: splitWorker [96793,96804]",
      "dest": "identifier: splitWorker [98287,98298]"
    },
    {
      "src": "logical_operator: || [227180,227182]",
      "dest": "logical_operator: || [228674,228676]"
    },
    {
      "src": "identifier: i [175345,175346]",
      "dest": "identifier: i [176839,176840]"
    },
    {
      "src": "identifier: defaultIfEmpty [213857,213871]",
      "dest": "identifier: defaultIfEmpty [215351,215365]"
    },
    {
      "src": "identifier: charAt [170342,170348]",
      "dest": "identifier: charAt [171836,171842]"
    },
    {
      "src": "if_statement [160496,160594]",
      "dest": "if_statement [161990,162088]"
    },
    {
      "src": "throw_statement [26224,26312]",
      "dest": "throw_statement [26224,26312]"
    },
    {
      "src": "method_invocation [195639,195779]",
      "dest": "method_invocation [197133,197273]"
    },
    {
      "src": "method_invocation [195559,195570]",
      "dest": "method_invocation [197053,197064]"
    },
    {
      "src": "if_statement [29462,29527]",
      "dest": "if_statement [29462,29527]"
    },
    {
      "src": "\": \" [158903,158904]",
      "dest": "\": \" [160397,160398]"
    },
    {
      "src": "static: static [185261,185267]",
      "dest": "static: static [186755,186761]"
    },
    {
      "src": "identifier: replacementList [152691,152706]",
      "dest": "identifier: replacementList [154185,154200]"
    },
    {
      "src": "type: int [36311,36314]",
      "dest": "type: int [36311,36314]"
    },
    {
      "src": "modifiers [192643,192656]",
      "dest": "modifiers [194137,194150]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [61301,61316]",
      "dest": "identifier: INDEX_NOT_FOUND [62040,62055]"
    },
    {
      "src": "identifier: str [138853,138856]",
      "dest": "identifier: str [140347,140350]"
    },
    {
      "src": "modifiers [191841,191854]",
      "dest": "modifiers [193335,193348]"
    },
    {
      "src": "line_comment: // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit [160192,160294]",
      "dest": "line_comment: // get a good guess on the size of the result buffer so it doesnt have to double if it goes over a bit [161686,161788]"
    },
    {
      "src": "variable_declarator [123347,123393]",
      "dest": "variable_declarator [124841,124887]"
    },
    {
      "src": "type: String [183019,183025]",
      "dest": "type: String [184513,184519]"
    },
    {
      "src": "identifier: regionMatches [244380,244393]",
      "dest": "identifier: regionMatches [245874,245887]"
    },
    {
      "src": "parenthesized_expression [116921,116945]",
      "dest": "parenthesized_expression [118415,118439]"
    },
    {
      "src": "binary_expression [39584,39623]",
      "dest": "binary_expression [39584,39623]"
    },
    {
      "src": "identifier: replacement [149826,149837]",
      "dest": "identifier: replacement [151320,151331]"
    },
    {
      "src": "true: true [208350,208354]",
      "dest": "true: true [209844,209848]"
    },
    {
      "src": "argument_list [197016,197018]",
      "dest": "argument_list [198510,198512]"
    },
    {
      "src": "block [201992,202029]",
      "dest": "block [203486,203523]"
    },
    {
      "src": "variable_declarator [134039,134062]",
      "dest": "variable_declarator [135533,135556]"
    },
    {
      "src": "return_statement [231666,231715]",
      "dest": "return_statement [233160,233209]"
    },
    {
      "src": "method_declaration [231049,231731]",
      "dest": "method_declaration [232543,233225]"
    },
    {
      "src": "identifier: length [104562,104568]",
      "dest": "identifier: length [106056,106062]"
    },
    {
      "src": "method_declaration [31791,31987]",
      "dest": "method_declaration [31791,31987]"
    },
    {
      "src": "binary_expression [222061,222089]",
      "dest": "binary_expression [223555,223583]"
    },
    {
      "src": "return_statement [229197,229219]",
      "dest": "return_statement [230691,230713]"
    },
    {
      "src": "identifier: separator [99784,99793]",
      "dest": "identifier: separator [101278,101287]"
    },
    {
      "src": "null_literal: null [210176,210180]",
      "dest": "null_literal: null [211670,211674]"
    },
    {
      "src": "identifier: padStr [181385,181391]",
      "dest": "identifier: padStr [182879,182885]"
    },
    {
      "src": "expression_statement [73613,73642]",
      "dest": "expression_statement [75107,75136]"
    },
    {
      "src": "block [219385,220343]",
      "dest": "block [220879,221837]"
    },
    {
      "src": "parenthesized_expression [73753,73775]",
      "dest": "parenthesized_expression [75247,75269]"
    },
    {
      "src": "method_declaration [125094,125177]",
      "dest": "method_declaration [126588,126671]"
    },
    {
      "src": "update_expression [145713,145716]",
      "dest": "update_expression [147207,147210]"
    },
    {
      "src": "return_statement [57465,57478]",
      "dest": "return_statement [57805,57818]"
    },
    {
      "src": "local_variable_declaration [54620,54644]",
      "dest": "local_variable_declaration [54620,54644]"
    },
    {
      "src": "identifier: str [220155,220158]",
      "dest": "identifier: str [221649,221652]"
    },
    {
      "src": "null_literal: null [161574,161578]",
      "dest": "null_literal: null [163068,163072]"
    },
    {
      "src": "arithmetic_operator: - [175011,175012]",
      "dest": "arithmetic_operator: - [176505,176506]"
    },
    {
      "src": "identifier: startIndex [131439,131449]",
      "dest": "identifier: startIndex [132933,132943]"
    },
    {
      "src": "parenthesized_expression [76070,76083]",
      "dest": "parenthesized_expression [77564,77577]"
    },
    {
      "src": "identifier: csLast [57856,57862]",
      "dest": "identifier: csLast [54961,54967]"
    },
    {
      "src": "identifier: iterator [134370,134378]",
      "dest": "identifier: iterator [135864,135872]"
    },
    {
      "src": "block [81714,81749]",
      "dest": "block [83208,83243]"
    },
    {
      "src": "identifier: s [235429,235430]",
      "dest": "identifier: s [236923,236924]"
    },
    {
      "src": "arithmetic_operator: + [80101,80102]",
      "dest": "arithmetic_operator: + [81595,81596]"
    },
    {
      "src": "identifier: indexOfAny [54454,54464]",
      "dest": "identifier: indexOfAny [54454,54464]"
    },
    {
      "src": "false: false [111153,111158]",
      "dest": "false: false [112647,112652]"
    },
    {
      "src": "affectation_operator: = [166109,166110]",
      "dest": "affectation_operator: = [167603,167604]"
    },
    {
      "src": "for_statement [70002,70351]",
      "dest": "for_statement [71496,71845]"
    },
    {
      "src": "binary_expression [219994,220006]",
      "dest": "binary_expression [221488,221500]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [71954,71969]",
      "dest": "identifier: INDEX_NOT_FOUND [73448,73463]"
    },
    {
      "src": "identifier: size [179047,179051]",
      "dest": "identifier: size [180541,180545]"
    },
    {
      "src": "method_invocation [168692,168710]",
      "dest": "method_invocation [170186,170204]"
    },
    {
      "src": "type: String [217312,217318]",
      "dest": "type: String [218806,218812]"
    },
    {
      "src": "binary_expression [51876,51887]",
      "dest": "binary_expression [51876,51887]"
    },
    {
      "src": "for_statement [49780,49947]",
      "dest": "for_statement [49780,49947]"
    },
    {
      "src": "local_variable_declaration [104702,104714]",
      "dest": "local_variable_declaration [106196,106208]"
    },
    {
      "src": "type: int [131378,131381]",
      "dest": "type: int [132872,132875]"
    },
    {
      "src": "identifier: length [225209,225215]",
      "dest": "identifier: length [226703,226709]"
    },
    {
      "src": "block [98096,98177]",
      "dest": "block [99590,99671]"
    },
    {
      "src": "identifier: searchStr [49875,49884]",
      "dest": "identifier: searchStr [49875,49884]"
    },
    {
      "src": "comparison_operator: == [155288,155290]",
      "dest": "comparison_operator: == [156782,156784]"
    },
    {
      "src": "type: ArrayList<String> [91114,91131]",
      "dest": "type: ArrayList<String> [92608,92625]"
    },
    {
      "src": "block_comment:     \n     * <p>Find the latest index of any of a set of potential substrings.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search array will return <code>-1</code>.\n     * A <code>null</code> or zero length search array entry will be ignored,\n     * but a search array containing \"\" will return the length of <code>str</code>\n     * if <code>str</code> is not null. This method uses {@link String#indexOf(String)}</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfAny(null, *)                   = -1\n     * StringUtils.lastIndexOfAny(*, null)                   = -1\n     * StringUtils.lastIndexOfAny(*, [])                     = -1\n     * StringUtils.lastIndexOfAny(*, [null])                 = -1\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 6\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) = 6\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"\"])   = 10\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStrs  the Strings to search for, may be null\n     * @return the last index of any of the Strings, -1 if no match\n     */ [70431,71732]",
      "dest": "block_comment:     \n     * <p>Find the latest index of any of a set of potential substrings.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search array will return <code>-1</code>.\n     * A <code>null</code> or zero length search array entry will be ignored,\n     * but a search array containing \"\" will return the length of <code>str</code>\n     * if <code>str</code> is not null. This method uses {@link String#indexOf(String)}</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOfAny(null, *)                   = -1\n     * StringUtils.lastIndexOfAny(*, null)                   = -1\n     * StringUtils.lastIndexOfAny(*, [])                     = -1\n     * StringUtils.lastIndexOfAny(*, [null])                 = -1\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"ab\",\"cd\"]) = 6\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"cd\",\"ab\"]) = 6\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"op\"]) = -1\n     * StringUtils.lastIndexOfAny(\"zzabyycdxx\", [\"mn\",\"\"])   = 10\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStrs  the Strings to search for, may be null\n     * @return the last index of any of the Strings, -1 if no match\n     */ [71925,73226]"
    },
    {
      "src": "comparison_operator: == [215520,215522]",
      "dest": "comparison_operator: == [217014,217016]"
    },
    {
      "src": "block [210302,210421]",
      "dest": "block [211796,211915]"
    },
    {
      "src": "argument_list [122114,122125]",
      "dest": "argument_list [123608,123619]"
    },
    {
      "src": "dimensions_expr [175276,175290]",
      "dest": "dimensions_expr [176770,176784]"
    },
    {
      "src": "parenthesized_expression [23032,23078]",
      "dest": "parenthesized_expression [23032,23078]"
    },
    {
      "src": "argument_list [131302,131304]",
      "dest": "argument_list [132796,132798]"
    },
    {
      "src": "formal_parameter [35125,35135]",
      "dest": "formal_parameter [35125,35135]"
    },
    {
      "src": "comparison_operator: == [181411,181413]",
      "dest": "comparison_operator: == [182905,182907]"
    },
    {
      "src": "switch_block_statement_group [174868,175129]",
      "dest": "switch_block_statement_group [176362,176623]"
    },
    {
      "src": "binary_expression [53035,53046]",
      "dest": "binary_expression [53035,53046]"
    },
    {
      "src": "formal_parameters [73428,73451]",
      "dest": "formal_parameters [74922,74945]"
    },
    {
      "src": "affectation_operator: = [124066,124067]",
      "dest": "affectation_operator: = [125560,125561]"
    },
    {
      "src": "identifier: str [171715,171718]",
      "dest": "identifier: str [173209,173212]"
    },
    {
      "src": "assignment_expression [73613,73641]",
      "dest": "assignment_expression [75107,75135]"
    },
    {
      "src": "if_statement [68090,68166]",
      "dest": "if_statement [69584,69660]"
    },
    {
      "src": "identifier: count [137363,137368]",
      "dest": "identifier: count [138857,138862]"
    },
    {
      "src": "type: Class<?> [24270,24278]",
      "dest": "type: Class<?> [24270,24278]"
    },
    {
      "src": "identifier: ordinal [36065,36072]",
      "dest": "identifier: ordinal [36065,36072]"
    },
    {
      "src": "type: StringBuilder [165896,165909]",
      "dest": "type: StringBuilder [167390,167403]"
    },
    {
      "src": "identifier: padStr [190817,190823]",
      "dest": "identifier: padStr [192311,192317]"
    },
    {
      "src": "identifier: t [233773,233774]",
      "dest": "identifier: t [235267,235268]"
    },
    {
      "src": "if_statement [123131,123215]",
      "dest": "if_statement [124625,124709]"
    },
    {
      "src": "binary_expression [131188,131213]",
      "dest": "binary_expression [132682,132707]"
    },
    {
      "src": "formal_parameters [120440,120452]",
      "dest": "formal_parameters [121934,121946]"
    },
    {
      "src": "static: static [23854,23860]",
      "dest": "static: static [23854,23860]"
    },
    {
      "src": "block [176668,176719]",
      "dest": "block [178162,178213]"
    },
    {
      "src": "identifier: length [60941,60947]",
      "dest": "identifier: length [61328,61334]"
    },
    {
      "src": "parenthesized_expression [53034,53068]",
      "dest": "parenthesized_expression [53034,53068]"
    },
    {
      "src": "update_expression [182163,182166]",
      "dest": "update_expression [183657,183660]"
    },
    {
      "src": "formal_parameter [176579,176589]",
      "dest": "formal_parameter [178073,178083]"
    },
    {
      "src": "type: String [83049,83055]",
      "dest": "type: String [84543,84549]"
    },
    {
      "src": "comparison_operator: == [61173,61175]",
      "dest": "comparison_operator: == [61632,61634]"
    },
    {
      "src": "identifier: str [42300,42303]",
      "dest": "identifier: str [42300,42303]"
    },
    {
      "src": "decimal_integer_literal: 1 [104894,104895]",
      "dest": "decimal_integer_literal: 1 [106388,106389]"
    },
    {
      "src": "logical_operator: || [159853,159855]",
      "dest": "logical_operator: || [161347,161349]"
    },
    {
      "src": "identifier: normalizerFormClass [24279,24298]",
      "dest": "identifier: normalizerFormClass [24279,24298]"
    },
    {
      "src": "comparison_operator: >= [175339,175341]",
      "dest": "comparison_operator: >= [176833,176835]"
    },
    {
      "src": "argument_list [105271,105296]",
      "dest": "argument_list [106765,106790]"
    },
    {
      "src": "arithmetic_operator: - [219828,219829]",
      "dest": "arithmetic_operator: - [221322,221323]"
    },
    {
      "src": "identifier: ret [173377,173380]",
      "dest": "identifier: ret [174871,174874]"
    },
    {
      "src": "method_invocation [49528,49546]",
      "dest": "method_invocation [49528,49546]"
    },
    {
      "src": "parenthesized_expression [71816,71851]",
      "dest": "parenthesized_expression [73310,73345]"
    },
    {
      "src": "block_comment:     \n     * <p>Converts a String to lower case as per {@link String#toLowerCase()}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lowerCase(null)  = null\n     * StringUtils.lowerCase(\"\")    = \"\"\n     * StringUtils.lowerCase(\"aBc\") = \"abc\"\n     * </pre>\n     *\n     * <p><strong>Note:</strong> As described in the documentation for {@link String#toLowerCase()},\n     * the result of this method is affected by the current locale.\n     * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}\n     * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n     *\n     * @param str  the String to lower case, may be null\n     * @return the lower cased String, <code>null</code> if null String input\n     */ [192816,193651]",
      "dest": "block_comment:     \n     * <p>Converts a String to lower case as per {@link String#toLowerCase()}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lowerCase(null)  = null\n     * StringUtils.lowerCase(\"\")    = \"\"\n     * StringUtils.lowerCase(\"aBc\") = \"abc\"\n     * </pre>\n     *\n     * <p><strong>Note:</strong> As described in the documentation for {@link String#toLowerCase()},\n     * the result of this method is affected by the current locale.\n     * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}\n     * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n     *\n     * @param str  the String to lower case, may be null\n     * @return the lower cased String, <code>null</code> if null String input\n     */ [194310,195145]"
    },
    {
      "src": "if_statement [65184,65259]",
      "dest": "if_statement [66231,66306]"
    },
    {
      "src": "visibility: public [140211,140217]",
      "dest": "visibility: public [141705,141711]"
    },
    {
      "src": "argument_list [18881,18900]",
      "dest": "argument_list [18881,18900]"
    },
    {
      "src": "affectation_operator: = [72057,72058]",
      "dest": "affectation_operator: = [73551,73552]"
    },
    {
      "src": "affectation_operator: = [150365,150366]",
      "dest": "affectation_operator: = [151859,151860]"
    },
    {
      "src": "type: int [49323,49326]",
      "dest": "type: int [49323,49326]"
    },
    {
      "src": "formal_parameters [147070,147124]",
      "dest": "formal_parameters [148564,148618]"
    },
    {
      "src": "if_statement [23968,26473]",
      "dest": "if_statement [23968,26473]"
    },
    {
      "src": "identifier: searchChars [66603,66614]",
      "dest": "identifier: searchChars [67682,67693]"
    },
    {
      "src": "affectation_operator: = [150192,150193]",
      "dest": "affectation_operator: = [151686,151687]"
    },
    {
      "src": "!: ! [134076,134077]",
      "dest": "!: ! [135570,135571]"
    },
    {
      "src": "affectation_operator: = [83228,83229]",
      "dest": "affectation_operator: = [84722,84723]"
    },
    {
      "src": "method_invocation [203188,203199]",
      "dest": "method_invocation [204682,204693]"
    },
    {
      "src": "block [137031,137459]",
      "dest": "block [138525,138953]"
    },
    {
      "src": "identifier: end [150062,150065]",
      "dest": "identifier: end [151556,151559]"
    },
    {
      "src": "argument_list [180069,180071]",
      "dest": "argument_list [181563,181565]"
    },
    {
      "src": "binary_expression [89425,89447]",
      "dest": "binary_expression [90919,90941]"
    },
    {
      "src": "true: true [203377,203381]",
      "dest": "true: true [204871,204875]"
    },
    {
      "src": "block [150451,150692]",
      "dest": "block [151945,152186]"
    },
    {
      "src": "identifier: isEmpty [144594,144601]",
      "dest": "identifier: isEmpty [146088,146095]"
    },
    {
      "src": "string_literal [219879,219884]",
      "dest": "string_literal [221373,221378]"
    },
    {
      "src": "type: String [72043,72049]",
      "dest": "type: String [73537,73543]"
    },
    {
      "src": "method_invocation [209299,209311]",
      "dest": "method_invocation [210793,210805]"
    },
    {
      "src": "identifier: str [86284,86287]",
      "dest": "identifier: str [87778,87781]"
    },
    {
      "src": "identifier: separatorChars [96751,96765]",
      "dest": "identifier: separatorChars [98245,98259]"
    },
    {
      "src": "identifier: text [150648,150652]",
      "dest": "identifier: text [152142,152146]"
    },
    {
      "src": "binary_expression [86499,86567]",
      "dest": "binary_expression [87993,88061]"
    },
    {
      "src": "if_statement [104918,105600]",
      "dest": "if_statement [106412,107094]"
    },
    {
      "src": "affectation_operator: = [106344,106345]",
      "dest": "affectation_operator: = [107838,107839]"
    },
    {
      "src": "method_declaration [136981,137459]",
      "dest": "method_declaration [138475,138953]"
    },
    {
      "src": "identifier: str [179079,179082]",
      "dest": "identifier: str [180573,180576]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [200071,200144]",
      "dest": "line_comment: //----------------------------------------------------------------------- [201565,201638]"
    },
    {
      "src": "identifier: ch [198773,198775]",
      "dest": "identifier: ch [200267,200269]"
    },
    {
      "src": "parenthesized_expression [194529,194542]",
      "dest": "parenthesized_expression [196023,196036]"
    },
    {
      "src": "method_invocation [49834,49894]",
      "dest": "method_invocation [49834,49894]"
    },
    {
      "src": "block [175355,175454]",
      "dest": "block [176849,176948]"
    },
    {
      "src": "method_invocation [28539,28566]",
      "dest": "method_invocation [28539,28566]"
    },
    {
      "src": "arithmetic_operator: - [220331,220332]",
      "dest": "arithmetic_operator: - [221825,221826]"
    },
    {
      "src": "field_access [70376,70393]",
      "dest": "field_access [71870,71887]"
    },
    {
      "src": "identifier: array [131188,131193]",
      "dest": "identifier: array [132682,132687]"
    },
    {
      "src": "identifier: abrevMarker [220190,220201]",
      "dest": "identifier: abrevMarker [221684,221695]"
    },
    {
      "src": "parenthesized_expression [219655,219678]",
      "dest": "parenthesized_expression [221149,221172]"
    },
    {
      "src": "block [91578,91614]",
      "dest": "block [93072,93108]"
    },
    {
      "src": "identifier: chs [137438,137441]",
      "dest": "identifier: chs [138932,138935]"
    },
    {
      "src": "decimal_integer_literal: 1 [127788,127789]",
      "dest": "decimal_integer_literal: 1 [129282,129283]"
    },
    {
      "src": "identifier: indexOfAnyBut [60757,60770]",
      "dest": "identifier: indexOfAnyBut [61144,61157]"
    },
    {
      "src": "new: new [182057,182060]",
      "dest": "new: new [183551,183554]"
    },
    {
      "src": "block_comment:     \n     * <p>Converts a String to upper case as per {@link String#toUpperCase()}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.upperCase(null)  = null\n     * StringUtils.upperCase(\"\")    = \"\"\n     * StringUtils.upperCase(\"aBc\") = \"ABC\"\n     * </pre>\n     *\n     * <p><strong>Note:</strong> As described in the documentation for {@link String#toUpperCase()},\n     * the result of this method is affected by the current locale.\n     * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}\n     * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n     *\n     * @param str  the String to upper case, may be null\n     * @return the upper cased String, <code>null</code> if null String input\n     */ [191001,191836]",
      "dest": "block_comment:     \n     * <p>Converts a String to upper case as per {@link String#toUpperCase()}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.upperCase(null)  = null\n     * StringUtils.upperCase(\"\")    = \"\"\n     * StringUtils.upperCase(\"aBc\") = \"ABC\"\n     * </pre>\n     *\n     * <p><strong>Note:</strong> As described in the documentation for {@link String#toUpperCase()},\n     * the result of this method is affected by the current locale.\n     * For platform-independent case transformations, the method {@link #lowerCase(String, Locale)}\n     * should be used with a specific locale (e.g. {@link Locale#ENGLISH}).</p>\n     *\n     * @param str  the String to upper case, may be null\n     * @return the upper cased String, <code>null</code> if null String input\n     */ [192495,193330]"
    },
    {
      "src": "method_invocation [7476,7487]",
      "dest": "method_invocation [7476,7487]"
    },
    {
      "src": "local_variable_declaration [117751,117787]",
      "dest": "local_variable_declaration [119245,119281]"
    },
    {
      "src": "identifier: csLength [57593,57601]",
      "dest": "identifier: csLength [57933,57941]"
    },
    {
      "src": "identifier: n [235123,235124]",
      "dest": "identifier: n [236617,236618]"
    },
    {
      "src": "identifier: end [75730,75733]",
      "dest": "identifier: end [77224,77227]"
    },
    {
      "src": "method_invocation [106421,106438]",
      "dest": "method_invocation [107915,107932]"
    },
    {
      "src": "block [231298,231458]",
      "dest": "block [232792,232952]"
    },
    {
      "src": "formal_parameters [176578,176620]",
      "dest": "formal_parameters [178072,178114]"
    },
    {
      "src": "method_invocation [222161,222176]",
      "dest": "method_invocation [223655,223670]"
    },
    {
      "src": "decimal_integer_literal: 0 [196790,196791]",
      "dest": "decimal_integer_literal: 0 [198284,198285]"
    },
    {
      "src": "binary_expression [36482,36491]",
      "dest": "binary_expression [36482,36491]"
    },
    {
      "src": "modifiers [42205,42218]",
      "dest": "modifiers [42205,42218]"
    },
    {
      "src": "block_comment:     \n     * <p>Uncapitalizes a CharSequence changing the first letter to title case as\n     * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n     *\n     * <p>For a word based algorithm, see {@link WordUtils#uncapitalize(String)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.uncapitalize(null)  = null\n     * StringUtils.uncapitalize(\"\")    = \"\"\n     * StringUtils.uncapitalize(\"Cat\") = \"cat\"\n     * StringUtils.uncapitalize(\"CAT\") = \"cAT\"\n     * </pre>\n     *\n     * @param cs the String to uncapitalize, may be null\n     * @return the uncapitalized String, <code>null</code> if null String input\n     * @see WordUtils#uncapitalize(String)\n     * @see #capitalize(CharSequence)\n     * @since 2.0\n     */ [195816,196612]",
      "dest": "block_comment:     \n     * <p>Uncapitalizes a CharSequence changing the first letter to title case as\n     * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n     *\n     * <p>For a word based algorithm, see {@link WordUtils#uncapitalize(String)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.uncapitalize(null)  = null\n     * StringUtils.uncapitalize(\"\")    = \"\"\n     * StringUtils.uncapitalize(\"Cat\") = \"cat\"\n     * StringUtils.uncapitalize(\"CAT\") = \"cAT\"\n     * </pre>\n     *\n     * @param cs the String to uncapitalize, may be null\n     * @return the uncapitalized String, <code>null</code> if null String input\n     * @see WordUtils#uncapitalize(String)\n     * @see #capitalize(CharSequence)\n     * @since 2.0\n     */ [197310,198106]"
    },
    {
      "src": "identifier: isLetter [201016,201024]",
      "dest": "identifier: isLetter [202510,202518]"
    },
    {
      "src": "new: new [178052,178055]",
      "dest": "new: new [179546,179549]"
    },
    {
      "src": "formal_parameter [47768,47784]",
      "dest": "formal_parameter [47768,47784]"
    },
    {
      "src": "type: String [98078,98084]",
      "dest": "type: String [99572,99578]"
    },
    {
      "src": "line_comment: // Character Tests [200048,200066]",
      "dest": "line_comment: // Character Tests [201542,201560]"
    },
    {
      "src": "logical_operator: || [140308,140310]",
      "dest": "logical_operator: || [141802,141804]"
    },
    {
      "src": "formal_parameter [187728,187736]",
      "dest": "formal_parameter [189222,189230]"
    },
    {
      "src": "null_literal: null [23041,23045]",
      "dest": "null_literal: null [23041,23045]"
    },
    {
      "src": "identifier: index [166218,166223]",
      "dest": "identifier: index [167712,167717]"
    },
    {
      "src": "affectation_operator: = [123233,123234]",
      "dest": "affectation_operator: = [124727,124728]"
    },
    {
      "src": "identifier: pads [180185,180189]",
      "dest": "identifier: pads [181679,181683]"
    },
    {
      "src": "identifier: text [155348,155352]",
      "dest": "identifier: text [156842,156846]"
    },
    {
      "src": "identifier: decomposed [25142,25152]",
      "dest": "identifier: decomposed [25142,25152]"
    },
    {
      "src": "identifier: length [131296,131302]",
      "dest": "identifier: length [132790,132796]"
    },
    {
      "src": "if_statement [191894,191947]",
      "dest": "if_statement [193388,193441]"
    },
    {
      "src": "block_comment:     \n     * <p>Find the Levenshtein distance between two Strings.</p>\n     *\n     * <p>This is the number of changes needed to change one String into\n     * another, where each change is a single character modification (deletion,\n     * insertion or substitution).</p>\n     *\n     * <p>The previous implementation of the Levenshtein distance algorithm\n     * was from <a href=\"http://www.merriampark.com/ld.htm\">http://www.merriampark.com/ld.htm</a></p>\n     *\n     * <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError\n     * which can occur when my Java implementation is used with very large strings.<br>\n     * This implementation of the Levenshtein distance algorithm\n     * is from <a href=\"http://www.merriampark.com/ldjava.htm\">http://www.merriampark.com/ldjava.htm</a></p>\n     *\n     * <pre>\n     * StringUtils.getLevenshteinDistance(null, *)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance(*, null)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance(\"\",\"\")               = 0\n     * StringUtils.getLevenshteinDistance(\"\",\"a\")              = 1\n     * StringUtils.getLevenshteinDistance(\"aaapppp\", \"\")       = 7\n     * StringUtils.getLevenshteinDistance(\"frog\", \"fog\")       = 1\n     * StringUtils.getLevenshteinDistance(\"fly\", \"ant\")        = 3\n     * StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") = 7\n     * StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") = 7\n     * StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") = 8\n     * StringUtils.getLevenshteinDistance(\"hello\", \"hallo\")    = 1\n     * </pre>\n     *\n     * @param s  the first String, must not be null\n     * @param t  the second String, must not be null\n     * @return result distance\n     * @throws IllegalArgumentException if either String input <code>null</code>\n     */ [231833,233698]",
      "dest": "block_comment:     \n     * <p>Find the Levenshtein distance between two Strings.</p>\n     *\n     * <p>This is the number of changes needed to change one String into\n     * another, where each change is a single character modification (deletion,\n     * insertion or substitution).</p>\n     *\n     * <p>The previous implementation of the Levenshtein distance algorithm\n     * was from <a href=\"http://www.merriampark.com/ld.htm\">http://www.merriampark.com/ld.htm</a></p>\n     *\n     * <p>Chas Emerick has written an implementation in Java, which avoids an OutOfMemoryError\n     * which can occur when my Java implementation is used with very large strings.<br>\n     * This implementation of the Levenshtein distance algorithm\n     * is from <a href=\"http://www.merriampark.com/ldjava.htm\">http://www.merriampark.com/ldjava.htm</a></p>\n     *\n     * <pre>\n     * StringUtils.getLevenshteinDistance(null, *)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance(*, null)             = IllegalArgumentException\n     * StringUtils.getLevenshteinDistance(\"\",\"\")               = 0\n     * StringUtils.getLevenshteinDistance(\"\",\"a\")              = 1\n     * StringUtils.getLevenshteinDistance(\"aaapppp\", \"\")       = 7\n     * StringUtils.getLevenshteinDistance(\"frog\", \"fog\")       = 1\n     * StringUtils.getLevenshteinDistance(\"fly\", \"ant\")        = 3\n     * StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") = 7\n     * StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") = 7\n     * StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") = 8\n     * StringUtils.getLevenshteinDistance(\"hello\", \"hallo\")    = 1\n     * </pre>\n     *\n     * @param s  the first String, must not be null\n     * @param t  the second String, must not be null\n     * @return result distance\n     * @throws IllegalArgumentException if either String input <code>null</code>\n     */ [233327,235192]"
    },
    {
      "src": "binary_expression [124019,124035]",
      "dest": "binary_expression [125513,125529]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only lowercase characters.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAllLowerCase(null)   = false\n     * StringUtils.isAllLowerCase(\"\")     = false\n     * StringUtils.isAllLowerCase(\"  \")   = false\n     * StringUtils.isAllLowerCase(\"abc\")  = true\n     * StringUtils.isAllLowerCase(\"abC\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains lowercase characters, and is non-null\n     * @since 2.5\n     */ [209412,210097]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only lowercase characters.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAllLowerCase(null)   = false\n     * StringUtils.isAllLowerCase(\"\")     = false\n     * StringUtils.isAllLowerCase(\"  \")   = false\n     * StringUtils.isAllLowerCase(\"abc\")  = true\n     * StringUtils.isAllLowerCase(\"abC\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains lowercase characters, and is non-null\n     * @since 2.5\n     */ [210906,211591]"
    },
    {
      "src": "method_invocation [140446,140461]",
      "dest": "method_invocation [141940,141955]"
    },
    {
      "src": "if_statement [89421,89530]",
      "dest": "if_statement [90915,91024]"
    },
    {
      "src": "local_variable_declaration [61064,61087]",
      "dest": "local_variable_declaration [61523,61546]"
    },
    {
      "src": "expression_statement [128042,128063]",
      "dest": "expression_statement [129536,129557]"
    },
    {
      "src": "parenthesized_expression [225334,225372]",
      "dest": "parenthesized_expression [226828,226866]"
    },
    {
      "src": "identifier: searchStr [47775,47784]",
      "dest": "identifier: searchStr [47775,47784]"
    },
    {
      "src": "identifier: substring [220219,220228]",
      "dest": "identifier: substring [221713,221722]"
    },
    {
      "src": "increment_operator: ++ [170484,170486]",
      "dest": "increment_operator: ++ [171978,171980]"
    },
    {
      "src": "array_access [175051,175061]",
      "dest": "array_access [176545,176555]"
    },
    {
      "src": "static: static [9567,9573]",
      "dest": "static: static [9567,9573]"
    },
    {
      "src": "formal_parameter [110365,110383]",
      "dest": "formal_parameter [111859,111877]"
    },
    {
      "src": "formal_parameter [188846,188856]",
      "dest": "formal_parameter [190340,190350]"
    },
    {
      "src": "identifier: str [77256,77259]",
      "dest": "identifier: str [78750,78753]"
    },
    {
      "src": "method_invocation [25120,25168]",
      "dest": "method_invocation [25120,25168]"
    },
    {
      "src": "expression_statement [117563,117581]",
      "dest": "expression_statement [119057,119075]"
    },
    {
      "src": "modifiers [122983,122997]",
      "dest": "modifiers [124477,124491]"
    },
    {
      "src": "line_comment: // returns original String when possible [184081,184121]",
      "dest": "line_comment: // returns original String when possible [185575,185615]"
    },
    {
      "src": "static: static [193663,193669]",
      "dest": "static: static [195157,195163]"
    },
    {
      "src": "method_declaration [122012,122132]",
      "dest": "method_declaration [123506,123626]"
    },
    {
      "src": "null_literal: null [155291,155295]",
      "dest": "null_literal: null [156785,156789]"
    },
    {
      "src": "argument_list [132994,132996]",
      "dest": "argument_list [134488,134490]"
    },
    {
      "src": "increment_operator: ++ [200984,200986]",
      "dest": "increment_operator: ++ [202478,202480]"
    },
    {
      "src": "argument_list [145646,145648]",
      "dest": "argument_list [147140,147142]"
    },
    {
      "src": "expression_statement [222415,222438]",
      "dest": "expression_statement [223909,223932]"
    },
    {
      "src": "identifier: length [220310,220316]",
      "dest": "identifier: length [221804,221810]"
    },
    {
      "src": "expression_statement [110934,110968]",
      "dest": "expression_statement [112428,112462]"
    },
    {
      "src": "return_statement [8768,8780]",
      "dest": "return_statement [8768,8780]"
    },
    {
      "src": "identifier: open [89496,89500]",
      "dest": "identifier: open [90990,90994]"
    },
    {
      "src": "ternary_expression [28509,28566]",
      "dest": "ternary_expression [28509,28566]"
    },
    {
      "src": "binary_expression [123418,123432]",
      "dest": "binary_expression [124912,124926]"
    },
    {
      "src": "block [122077,122132]",
      "dest": "block [123571,123626]"
    },
    {
      "src": "affectation_operator: = [244327,244328]",
      "dest": "affectation_operator: = [245821,245822]"
    },
    {
      "src": "identifier: start [18940,18945]",
      "dest": "identifier: start [18940,18945]"
    },
    {
      "src": "formal_parameters [31816,31846]",
      "dest": "formal_parameters [31816,31846]"
    },
    {
      "src": "comparison_operator: == [219403,219405]",
      "dest": "comparison_operator: == [220897,220899]"
    },
    {
      "src": "affectation_operator: = [227735,227736]",
      "dest": "affectation_operator: = [229229,229230]"
    },
    {
      "src": "type: String [15808,15814]",
      "dest": "type: String [15808,15814]"
    },
    {
      "src": "identifier: ret [173447,173450]",
      "dest": "identifier: ret [174941,174944]"
    },
    {
      "src": "identifier: substringBeforeLast [84628,84647]",
      "dest": "identifier: substringBeforeLast [86122,86141]"
    },
    {
      "src": "method_invocation [132606,132624]",
      "dest": "method_invocation [134100,134118]"
    },
    {
      "src": "method_invocation [242414,242442]",
      "dest": "method_invocation [243908,243936]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"\", *, 0)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [31993,33422]",
      "dest": "block_comment:     \n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOf(null, *, *)          = -1\n     * StringUtils.indexOf(*, null, *)          = -1\n     * StringUtils.indexOf(\"\", \"\", 0)           = 0\n     * StringUtils.indexOf(\"\", *, 0)            = -1 (except when * = \"\")\n     * StringUtils.indexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 0)  = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"ab\", 0) = 1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 3)  = 5\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", 9)  = -1\n     * StringUtils.indexOf(\"aabaabaa\", \"b\", -1) = 2\n     * StringUtils.indexOf(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOf(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [31993,33422]"
    },
    {
      "src": "for_statement [204373,204552]",
      "dest": "for_statement [205867,206046]"
    },
    {
      "src": "variable_declarator [227421,227438]",
      "dest": "variable_declarator [228915,228932]"
    },
    {
      "src": "new: new [137147,137150]",
      "dest": "new: new [138641,138644]"
    },
    {
      "src": "argument_list [29473,29478]",
      "dest": "argument_list [29473,29478]"
    },
    {
      "src": "binary_expression [175016,175022]",
      "dest": "binary_expression [176510,176516]"
    },
    {
      "src": "identifier: length [36227,36233]",
      "dest": "identifier: length [36227,36233]"
    },
    {
      "src": "null_literal: null [194564,194568]",
      "dest": "null_literal: null [196058,196062]"
    },
    {
      "src": "identifier: str [185931,185934]",
      "dest": "identifier: str [187425,187428]"
    },
    {
      "src": "identifier: obj [134501,134504]",
      "dest": "identifier: obj [135995,135998]"
    },
    {
      "src": "decimal_integer_literal: 0 [110719,110720]",
      "dest": "decimal_integer_literal: 0 [112213,112214]"
    },
    {
      "src": "variable_declarator [222190,222231]",
      "dest": "variable_declarator [223684,223725]"
    },
    {
      "src": "identifier: add [106299,106302]",
      "dest": "identifier: add [107793,107796]"
    },
    {
      "src": "parenthesized_expression [219891,219904]",
      "dest": "parenthesized_expression [221385,221398]"
    },
    {
      "src": "formal_parameter [210139,210154]",
      "dest": "formal_parameter [211633,211648]"
    },
    {
      "src": "block [61180,61239]",
      "dest": "block [61897,61960]"
    },
    {
      "src": "method_invocation [210184,210195]",
      "dest": "method_invocation [211678,211689]"
    },
    {
      "src": "block [57389,58407]",
      "dest": "block [57729,58800]"
    },
    {
      "src": "identifier: replacementList [161634,161649]",
      "dest": "identifier: replacementList [163128,163143]"
    },
    {
      "src": "new: new [159055,159058]",
      "dest": "new: new [160549,160552]"
    },
    {
      "src": "identifier: cs [209299,209301]",
      "dest": "identifier: cs [210793,210795]"
    },
    {
      "src": "type: int [96767,96770]",
      "dest": "type: int [98261,98264]"
    },
    {
      "src": "identifier: searchStr [49422,49431]",
      "dest": "identifier: searchStr [49422,49431]"
    },
    {
      "src": "type: int [49785,49788]",
      "dest": "type: int [49785,49788]"
    },
    {
      "src": "local_variable_declaration [86449,86486]",
      "dest": "local_variable_declaration [87943,87980]"
    },
    {
      "src": "type: String [132291,132297]",
      "dest": "type: String [133785,133791]"
    },
    {
      "src": "visibility: public [165481,165487]",
      "dest": "visibility: public [166975,166981]"
    },
    {
      "src": "block_comment:     \n     * <p>Strips whitespace from the start and end of every String in an array.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A new array is returned each time, except for length zero.\n     * A <code>null</code> array will return <code>null</code>.\n     * An empty array will return itself.\n     * A <code>null</code> array entry will be ignored.</p>\n     *\n     * <pre>\n     * StringUtils.stripAll(null)             = null\n     * StringUtils.stripAll([])               = []\n     * StringUtils.stripAll([\"abc\", \"  abc\"]) = [\"abc\", \"abc\"]\n     * StringUtils.stripAll([\"abc  \", null])  = [\"abc\", null]\n     * </pre>\n     *\n     * @param strs  the array to remove whitespace from, may be null\n     * @return the stripped Strings, <code>null</code> if null array input\n     */ [20796,21617]",
      "dest": "block_comment:     \n     * <p>Strips whitespace from the start and end of every String in an array.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A new array is returned each time, except for length zero.\n     * A <code>null</code> array will return <code>null</code>.\n     * An empty array will return itself.\n     * A <code>null</code> array entry will be ignored.</p>\n     *\n     * <pre>\n     * StringUtils.stripAll(null)             = null\n     * StringUtils.stripAll([])               = []\n     * StringUtils.stripAll([\"abc\", \"  abc\"]) = [\"abc\", \"abc\"]\n     * StringUtils.stripAll([\"abc  \", null])  = [\"abc\", null]\n     * </pre>\n     *\n     * @param strs  the array to remove whitespace from, may be null\n     * @return the stripped Strings, <code>null</code> if null array input\n     */ [20796,21617]"
    },
    {
      "src": "affectation_operator: = [235972,235973]",
      "dest": "affectation_operator: = [237466,237467]"
    },
    {
      "src": "method_invocation [217373,217401]",
      "dest": "method_invocation [218867,218895]"
    },
    {
      "src": "identifier: isAlphanumericSpace [204234,204253]",
      "dest": "identifier: isAlphanumericSpace [205728,205747]"
    },
    {
      "src": "binary_expression [211205,211230]",
      "dest": "binary_expression [212699,212724]"
    },
    {
      "src": "block [208279,208324]",
      "dest": "block [209773,209818]"
    },
    {
      "src": "formal_parameters [23880,23894]",
      "dest": "formal_parameters [23880,23894]"
    },
    {
      "src": "argument_list [150763,150765]",
      "dest": "argument_list [152257,152259]"
    },
    {
      "src": "identifier: str [36038,36041]",
      "dest": "identifier: str [36038,36041]"
    },
    {
      "src": "identifier: shortestStrLen [229204,229218]",
      "dest": "identifier: shortestStrLen [230698,230712]"
    },
    {
      "src": "binary_expression [182153,182161]",
      "dest": "binary_expression [183647,183655]"
    },
    {
      "src": "identifier: searchString [150148,150160]",
      "dest": "identifier: searchString [151642,151654]"
    },
    {
      "src": "affectation_operator: = [75837,75838]",
      "dest": "affectation_operator: = [77331,77332]"
    },
    {
      "src": "comparison_operator: == [14846,14848]",
      "dest": "comparison_operator: == [14846,14848]"
    },
    {
      "src": "type: int [174996,174999]",
      "dest": "type: int [176490,176493]"
    },
    {
      "src": "argument_list [36285,36287]",
      "dest": "argument_list [36285,36287]"
    },
    {
      "src": "arithmetic_operator: + [158901,158902]",
      "dest": "arithmetic_operator: + [160395,160396]"
    },
    {
      "src": "modifiers [209074,209087]",
      "dest": "modifiers [210568,210581]"
    },
    {
      "src": ":: : [175149,175150]",
      "dest": ":: : [176643,176644]"
    },
    {
      "src": "affectation_operator: = [104689,104690]",
      "dest": "affectation_operator: = [106183,106184]"
    },
    {
      "src": "array_creation_expression [106410,106439]",
      "dest": "array_creation_expression [107904,107933]"
    },
    {
      "src": "identifier: i [117264,117265]",
      "dest": "identifier: i [118758,118759]"
    },
    {
      "src": "argument_list [124003,124036]",
      "dest": "argument_list [125497,125530]"
    },
    {
      "src": "identifier: append [168685,168691]",
      "dest": "identifier: append [170179,170185]"
    },
    {
      "src": "identifier: i [39801,39802]",
      "dest": "identifier: i [39801,39802]"
    },
    {
      "src": "type: String [39357,39363]",
      "dest": "type: String [39357,39363]"
    },
    {
      "src": "method_invocation [131286,131304]",
      "dest": "method_invocation [132780,132798]"
    },
    {
      "src": "formal_parameter [17088,17098]",
      "dest": "formal_parameter [17088,17098]"
    },
    {
      "src": "affectation_operator: = [132745,132746]",
      "dest": "affectation_operator: = [134239,134240]"
    },
    {
      "src": "array_access [72059,72072]",
      "dest": "array_access [73553,73566]"
    },
    {
      "src": "expression_statement [117301,117319]",
      "dest": "expression_statement [118795,118813]"
    },
    {
      "src": "identifier: preserveAllTokens [111235,111252]",
      "dest": "identifier: preserveAllTokens [112729,112746]"
    },
    {
      "src": "string_literal [25059,25094]",
      "dest": "string_literal [25059,25094]"
    },
    {
      "src": "update_expression [211332,211335]",
      "dest": "update_expression [212826,212829]"
    },
    {
      "src": "for_statement [225169,225322]",
      "dest": "for_statement [226663,226816]"
    },
    {
      "src": "argument_list [119290,119292]",
      "dest": "argument_list [120784,120786]"
    },
    {
      "src": "identifier: len [168556,168559]",
      "dest": "identifier: len [170050,170053]"
    },
    {
      "src": "identifier: separator [130705,130714]",
      "dest": "identifier: separator [132199,132208]"
    },
    {
      "src": "binary_expression [49501,49547]",
      "dest": "binary_expression [49501,49547]"
    },
    {
      "src": "identifier: maxWidth [217392,217400]",
      "dest": "identifier: maxWidth [218886,218894]"
    },
    {
      "src": "identifier: start [168457,168462]",
      "dest": "identifier: start [169951,169956]"
    },
    {
      "src": "block [244161,244222]",
      "dest": "block [245655,245716]"
    },
    {
      "src": "affectation_operator: = [235125,235126]",
      "dest": "affectation_operator: = [236619,236620]"
    },
    {
      "src": "identifier: length [124174,124180]",
      "dest": "identifier: length [125668,125674]"
    },
    {
      "src": "identifier: replLength [150135,150145]",
      "dest": "identifier: replLength [151629,151639]"
    },
    {
      "src": "\": \" [185438,185439]",
      "dest": "\": \" [186932,186933]"
    },
    {
      "src": "formal_parameters [193686,193698]",
      "dest": "formal_parameters [195180,195192]"
    },
    {
      "src": "identifier: i [206963,206964]",
      "dest": "identifier: i [208457,208458]"
    },
    {
      "src": "identifier: i [200983,200984]",
      "dest": "identifier: i [202477,202478]"
    },
    {
      "src": "decimal_integer_literal: 0 [77491,77492]",
      "dest": "decimal_integer_literal: 0 [78985,78986]"
    },
    {
      "src": "comparison_operator: < [162316,162317]",
      "dest": "comparison_operator: < [163810,163811]"
    },
    {
      "src": "decimal_integer_literal: 1 [98159,98160]",
      "dest": "decimal_integer_literal: 1 [99653,99654]"
    },
    {
      "src": "method_invocation [24912,24925]",
      "dest": "method_invocation [24912,24925]"
    },
    {
      "src": "parenthesized_expression [161874,161891]",
      "dest": "parenthesized_expression [163368,163385]"
    },
    {
      "src": "type: int [157926,157929]",
      "dest": "type: int [159420,159423]"
    },
    {
      "src": "array_access [182186,182196]",
      "dest": "array_access [183680,183690]"
    },
    {
      "src": "\": \" [219879,219880]",
      "dest": "\": \" [221373,221374]"
    },
    {
      "src": "identifier: padChar [177964,177971]",
      "dest": "identifier: padChar [179458,179465]"
    },
    {
      "src": "identifier: newTokenStart [123851,123864]",
      "dest": "identifier: newTokenStart [125345,125358]"
    },
    {
      "src": "method_invocation [161152,161193]",
      "dest": "method_invocation [162646,162687]"
    },
    {
      "src": "visibility: public [204212,204218]",
      "dest": "visibility: public [205706,205712]"
    },
    {
      "src": "while_statement [161001,162245]",
      "dest": "while_statement [162495,163739]"
    },
    {
      "src": "identifier: sz [200979,200981]",
      "dest": "identifier: sz [202473,202475]"
    },
    {
      "src": "identifier: padChar [179960,179967]",
      "dest": "identifier: padChar [181454,181461]"
    },
    {
      "src": "expression_statement [118957,118969]",
      "dest": "expression_statement [120451,120463]"
    },
    {
      "src": "local_variable_declaration [127862,127881]",
      "dest": "local_variable_declaration [129356,129375]"
    },
    {
      "src": "true: true [8775,8779]",
      "dest": "true: true [8775,8779]"
    },
    {
      "src": "argument_list [143327,143335]",
      "dest": "argument_list [144821,144829]"
    },
    {
      "src": "method_invocation [53240,53285]",
      "dest": "method_invocation [53240,53285]"
    },
    {
      "src": "array_access [161228,161252]",
      "dest": "array_access [162722,162746]"
    },
    {
      "src": "return_statement [72279,72290]",
      "dest": "return_statement [73773,73784]"
    },
    {
      "src": "binary_expression [119140,119181]",
      "dest": "binary_expression [120634,120675]"
    },
    {
      "src": "identifier: searchStr [36122,36131]",
      "dest": "identifier: searchStr [36122,36131]"
    },
    {
      "src": "string_literal [185436,185439]",
      "dest": "string_literal [186930,186933]"
    },
    {
      "src": "local_variable_declaration [173144,173169]",
      "dest": "local_variable_declaration [174638,174663]"
    },
    {
      "src": "identifier: array [130691,130696]",
      "dest": "identifier: array [132185,132190]"
    },
    {
      "src": "identifier: repeat [174333,174339]",
      "dest": "identifier: repeat [175827,175833]"
    },
    {
      "src": "comparison_operator: == [198208,198210]",
      "dest": "comparison_operator: == [199702,199704]"
    },
    {
      "src": "parenthesized_expression [36603,36614]",
      "dest": "parenthesized_expression [36603,36614]"
    },
    {
      "src": "variable_declarator [235123,235137]",
      "dest": "variable_declarator [236617,236631]"
    },
    {
      "src": "decimal_integer_literal: 0 [168313,168314]",
      "dest": "decimal_integer_literal: 0 [169807,169808]"
    },
    {
      "src": "block [58116,58184]",
      "dest": "block [58509,58577]"
    },
    {
      "src": "static: static [116285,116291]",
      "dest": "static: static [117779,117785]"
    },
    {
      "src": "binary_expression [208075,208085]",
      "dest": "binary_expression [209569,209579]"
    },
    {
      "src": "static: static [8637,8643]",
      "dest": "static: static [8637,8643]"
    },
    {
      "src": "method_invocation [244329,244341]",
      "dest": "method_invocation [245823,245835]"
    },
    {
      "src": "block [198170,198827]",
      "dest": "block [199664,200321]"
    },
    {
      "src": "identifier: stripChars [17107,17117]",
      "dest": "identifier: stripChars [17107,17117]"
    },
    {
      "src": "identifier: i [208172,208173]",
      "dest": "identifier: i [209666,209667]"
    },
    {
      "src": "identifier: startsWith [241225,241235]",
      "dest": "identifier: startsWith [242719,242729]"
    },
    {
      "src": "identifier: searchStr [39879,39888]",
      "dest": "identifier: searchStr [39879,39888]"
    },
    {
      "src": "argument_list [166217,166224]",
      "dest": "argument_list [167711,167718]"
    },
    {
      "src": "identifier: cs [204267,204269]",
      "dest": "identifier: cs [205761,205763]"
    },
    {
      "src": "type: boolean [66402,66409]",
      "dest": "type: boolean [67449,67456]"
    },
    {
      "src": "parenthesized_expression [18841,18858]",
      "dest": "parenthesized_expression [18841,18858]"
    },
    {
      "src": "comparison_operator: < [76141,76142]",
      "dest": "comparison_operator: < [77635,77636]"
    },
    {
      "src": "identifier: i [204397,204398]",
      "dest": "identifier: i [205891,205892]"
    },
    {
      "src": "if_statement [196678,196731]",
      "dest": "if_statement [198172,198225]"
    },
    {
      "src": "formal_parameter [21654,21667]",
      "dest": "formal_parameter [21654,21667]"
    },
    {
      "src": "return_statement [185891,185936]",
      "dest": "return_statement [187385,187430]"
    },
    {
      "src": "update_expression [145780,145785]",
      "dest": "update_expression [147274,147279]"
    },
    {
      "src": "binary_expression [47800,47832]",
      "dest": "binary_expression [47800,47832]"
    },
    {
      "src": "type: String[] [120411,120419]",
      "dest": "type: String[] [121905,121913]"
    },
    {
      "src": "parenthesized_expression [210169,210196]",
      "dest": "parenthesized_expression [211663,211690]"
    },
    {
      "src": "identifier: i [198401,198402]",
      "dest": "identifier: i [199895,199896]"
    },
    {
      "src": "parenthesized_expression [189038,189049]",
      "dest": "parenthesized_expression [190532,190543]"
    },
    {
      "src": "identifier: n [235914,235915]",
      "dest": "identifier: n [237408,237409]"
    },
    {
      "src": "decimal_integer_literal: 1 [57647,57648]",
      "dest": "decimal_integer_literal: 1 [57987,57988]"
    },
    {
      "src": "assignment_expression [72160,72189]",
      "dest": "assignment_expression [73654,73683]"
    },
    {
      "src": "return_statement [8963,8975]",
      "dest": "return_statement [8963,8975]"
    },
    {
      "src": "identifier: i [205815,205816]",
      "dest": "identifier: i [207309,207310]"
    },
    {
      "src": "if_statement [76067,76121]",
      "dest": "if_statement [77561,77615]"
    },
    {
      "src": "argument_list [134386,134388]",
      "dest": "argument_list [135880,135882]"
    },
    {
      "src": "if_statement [79844,79916]",
      "dest": "if_statement [81338,81410]"
    },
    {
      "src": "visibility: public [55956,55962]",
      "dest": "visibility: public [56302,56308]"
    },
    {
      "src": "identifier: i [118549,118550]",
      "dest": "identifier: i [120043,120044]"
    },
    {
      "src": "method_declaration [155025,155407]",
      "dest": "method_declaration [156519,156901]"
    },
    {
      "src": "local_variable_declaration [36311,36325]",
      "dest": "local_variable_declaration [36311,36325]"
    },
    {
      "src": "block [244267,244304]",
      "dest": "block [245761,245798]"
    },
    {
      "src": "identifier: indexOf [31962,31969]",
      "dest": "identifier: indexOf [31962,31969]"
    },
    {
      "src": "false: false [58395,58400]",
      "dest": "false: false [58788,58793]"
    },
    {
      "src": "identifier: p [235527,235528]",
      "dest": "identifier: p [237021,237022]"
    },
    {
      "src": "assignment_expression [118772,118789]",
      "dest": "assignment_expression [120266,120283]"
    },
    {
      "src": "array_access [161634,161652]",
      "dest": "array_access [163128,163146]"
    },
    {
      "src": "formal_parameter [51844,51860]",
      "dest": "formal_parameter [51844,51860]"
    },
    {
      "src": "null_literal: null [180017,180021]",
      "dest": "null_literal: null [181511,181515]"
    },
    {
      "src": "variable_declarator [203218,203223]",
      "dest": "variable_declarator [204712,204717]"
    },
    {
      "src": "parenthesized_expression [20542,20602]",
      "dest": "parenthesized_expression [20542,20602]"
    },
    {
      "src": "parenthesized_expression [47799,47833]",
      "dest": "parenthesized_expression [47799,47833]"
    },
    {
      "src": "expression_statement [117429,117443]",
      "dest": "expression_statement [118923,118937]"
    },
    {
      "src": "null_literal: null [83168,83172]",
      "dest": "null_literal: null [84662,84666]"
    },
    {
      "src": "return_statement [200897,200910]",
      "dest": "return_statement [202391,202404]"
    },
    {
      "src": "identifier: buf [150361,150364]",
      "dest": "identifier: buf [151855,151858]"
    },
    {
      "src": "identifier: obj [133014,133017]",
      "dest": "identifier: obj [134508,134511]"
    },
    {
      "src": "method_invocation [36358,36370]",
      "dest": "method_invocation [36358,36370]"
    },
    {
      "src": "binary_expression [18588,18606]",
      "dest": "binary_expression [18588,18606]"
    },
    {
      "src": "identifier: cs [201962,201964]",
      "dest": "identifier: cs [203456,203458]"
    },
    {
      "src": "identifier: result [162515,162521]",
      "dest": "identifier: result [164009,164015]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [237106,237179]",
      "dest": "line_comment: //----------------------------------------------------------------------- [238600,238673]"
    },
    {
      "src": "argument_list [195716,195719]",
      "dest": "argument_list [197210,197213]"
    },
    {
      "src": "decimal_integer_literal: 0 [171895,171896]",
      "dest": "decimal_integer_literal: 0 [173389,173390]"
    },
    {
      "src": "method_invocation [107768,107800]",
      "dest": "method_invocation [109262,109294]"
    },
    {
      "src": "decimal_integer_literal: 0 [18514,18515]",
      "dest": "decimal_integer_literal: 0 [18514,18515]"
    },
    {
      "src": "identifier: iterator [132495,132503]",
      "dest": "identifier: iterator [133989,133997]"
    },
    {
      "src": "identifier: i [53200,53201]",
      "dest": "identifier: i [53200,53201]"
    },
    {
      "src": "arithmetic_operator: - [189017,189018]",
      "dest": "arithmetic_operator: - [190511,190512]"
    },
    {
      "src": "argument_list [236265,236283]",
      "dest": "argument_list [237759,237777]"
    },
    {
      "src": "method_declaration [63716,64138]",
      "dest": "method_declaration [64763,65185]"
    },
    {
      "src": "if_statement [219888,219981]",
      "dest": "if_statement [221382,221475]"
    },
    {
      "src": "identifier: str [217337,217340]",
      "dest": "identifier: str [218831,218834]"
    },
    {
      "src": "type: String [13682,13688]",
      "dest": "type: String [13682,13688]"
    },
    {
      "src": "argument_list [243525,243544]",
      "dest": "argument_list [245019,245038]"
    },
    {
      "src": "if_statement [181639,181730]",
      "dest": "if_statement [183133,183224]"
    },
    {
      "src": "assignment_expression [124099,124117]",
      "dest": "assignment_expression [125593,125611]"
    },
    {
      "src": "identifier: str [31958,31961]",
      "dest": "identifier: str [31958,31961]"
    },
    {
      "src": "false: false [208304,208309]",
      "dest": "false: false [209798,209803]"
    },
    {
      "src": "block [196695,196731]",
      "dest": "block [198189,198225]"
    },
    {
      "src": "identifier: splitByWholeSeparatorWorker [99751,99778]",
      "dest": "identifier: splitByWholeSeparatorWorker [101245,101272]"
    },
    {
      "src": "identifier: str [37796,37799]",
      "dest": "identifier: str [37796,37799]"
    },
    {
      "src": "identifier: str [199745,199748]",
      "dest": "identifier: str [201239,201242]"
    },
    {
      "src": "identifier: start [117393,117398]",
      "dest": "identifier: start [118887,118892]"
    },
    {
      "src": "argument_list [138866,138883]",
      "dest": "argument_list [140360,140377]"
    },
    {
      "src": "variable_declarator [206928,206944]",
      "dest": "variable_declarator [208422,208438]"
    },
    {
      "src": "identifier: length [239932,239938]",
      "dest": "identifier: length [241426,241432]"
    },
    {
      "src": "block [204297,204334]",
      "dest": "block [205791,205828]"
    },
    {
      "src": "parenthesized_expression [150299,150337]",
      "dest": "parenthesized_expression [151793,151831]"
    },
    {
      "src": "identifier: str [18673,18676]",
      "dest": "identifier: str [18673,18676]"
    },
    {
      "src": "binary_expression [170441,170461]",
      "dest": "binary_expression [171935,171955]"
    },
    {
      "src": "identifier: charAt [58101,58107]",
      "dest": "identifier: charAt [55134,55140]"
    },
    {
      "src": "identifier: separator [103201,103210]",
      "dest": "identifier: separator [104695,104704]"
    },
    {
      "src": "local_variable_declaration [235395,235416]",
      "dest": "local_variable_declaration [236889,236910]"
    },
    {
      "src": "identifier: str [165641,165644]",
      "dest": "identifier: str [167135,167138]"
    },
    {
      "src": "identifier: lastIdx [170275,170282]",
      "dest": "identifier: lastIdx [171769,171776]"
    },
    {
      "src": "expression_statement [127953,127975]",
      "dest": "expression_statement [129447,129469]"
    },
    {
      "src": "formal_parameters [116312,116383]",
      "dest": "formal_parameters [117806,117877]"
    },
    {
      "src": "type: int [149839,149842]",
      "dest": "type: int [151333,151336]"
    },
    {
      "src": "identifier: cs [8874,8876]",
      "dest": "identifier: cs [8874,8876]"
    },
    {
      "src": "identifier: start [18565,18570]",
      "dest": "identifier: start [18565,18570]"
    },
    {
      "src": "variable_declarator [158604,158646]",
      "dest": "variable_declarator [160098,160140]"
    },
    {
      "src": "decimal_integer_literal: 0 [160180,160181]",
      "dest": "decimal_integer_literal: 0 [161674,161675]"
    },
    {
      "src": "method_invocation [155336,155400]",
      "dest": "method_invocation [156830,156894]"
    },
    {
      "src": "identifier: repeat [177951,177957]",
      "dest": "identifier: repeat [179445,179451]"
    },
    {
      "src": "identifier: Integer [69953,69960]",
      "dest": "identifier: Integer [71447,71454]"
    },
    {
      "src": "block_comment:     \n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. This will not repeat. For repeating replaces, call the\n     * overloaded method.\n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *, *) = null\n     *  StringUtils.replaceEach(\"\", *, *, *) = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0], *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}, *) = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}, *) = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}, *) = \"wcte\"\n     *  (example of how it repeats)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, false) = \"dcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, true) = \"tcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, true) = IllegalArgumentException\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, false) = \"dcabe\"\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IllegalArgumentException\n     *             if the search is repeating and there is an endless loop due\n     *             to outputs of one being inputs to another\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */ [152730,155020]",
      "dest": "block_comment:     \n     * <p>\n     * Replaces all occurrences of Strings within another String.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> reference passed to this method is a no-op, or if\n     * any \"search string\" or \"string to replace\" is null, that replace will be\n     * ignored. This will not repeat. For repeating replaces, call the\n     * overloaded method.\n     * </p>\n     * \n     * <pre>\n     *  StringUtils.replaceEach(null, *, *, *) = null\n     *  StringUtils.replaceEach(\"\", *, *, *) = \"\"\n     *  StringUtils.replaceEach(\"aba\", null, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[0], null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", null, new String[0], *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, null, *) = \"aba\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{\"\"}, *) = \"b\"\n     *  StringUtils.replaceEach(\"aba\", new String[]{null}, new String[]{\"a\"}, *) = \"aba\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"w\", \"t\"}, *) = \"wcte\"\n     *  (example of how it repeats)\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, false) = \"dcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"t\"}, true) = \"tcte\"\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, true) = IllegalArgumentException\n     *  StringUtils.replaceEach(\"abcde\", new String[]{\"ab\", \"d\"}, new String[]{\"d\", \"ab\"}, false) = \"dcabe\"\n     * </pre>\n     * \n     * @param text\n     *            text to search and replace in, no-op if null\n     * @param searchList\n     *            the Strings to search for, no-op if null\n     * @param replacementList\n     *            the Strings to replace them with, no-op if null\n     * @return the text with any replacements processed, <code>null</code> if\n     *         null String input\n     * @throws IllegalArgumentException\n     *             if the search is repeating and there is an endless loop due\n     *             to outputs of one being inputs to another\n     * @throws IndexOutOfBoundsException\n     *             if the lengths of the arrays are not the same (null is ok,\n     *             and/or size 0)\n     * @since 2.4\n     */ [154224,156514]"
    },
    {
      "src": "parenthesized_expression [20323,20333]",
      "dest": "parenthesized_expression [20323,20333]"
    },
    {
      "src": "identifier: str [51963,51966]",
      "dest": "identifier: str [51963,51966]"
    },
    {
      "src": "for_statement [203209,203361]",
      "dest": "for_statement [204703,204855]"
    },
    {
      "src": "method_invocation [78626,78638]",
      "dest": "method_invocation [80120,80132]"
    },
    {
      "src": "decimal_integer_literal: 2 [175147,175148]",
      "dest": "decimal_integer_literal: 2 [176641,176642]"
    },
    {
      "src": "block [132341,133123]",
      "dest": "block [133835,134617]"
    },
    {
      "src": "line_comment: // NOTE: logic mostly duplicated above START [161407,161451]",
      "dest": "line_comment: // NOTE: logic mostly duplicated above START [162901,162945]"
    },
    {
      "src": "comparison_operator: < [62579,62580]",
      "dest": "comparison_operator: >= [63332,63334]"
    },
    {
      "src": "decimal_integer_literal: 0 [36239,36240]",
      "dest": "decimal_integer_literal: 0 [36239,36240]"
    },
    {
      "src": "identifier: p [235936,235937]",
      "dest": "identifier: p [237430,237431]"
    },
    {
      "src": "expression_statement [105782,105806]",
      "dest": "expression_statement [107276,107300]"
    },
    {
      "src": "identifier: append [222455,222461]",
      "dest": "identifier: append [223949,223955]"
    },
    {
      "src": "logical_operator: || [46593,46595]",
      "dest": "logical_operator: || [46593,46595]"
    },
    {
      "src": "null_literal: null [134421,134425]",
      "dest": "null_literal: null [135915,135919]"
    },
    {
      "src": "character_literal: ' ' [187773,187776]",
      "dest": "character_literal: ' ' [189267,189270]"
    },
    {
      "src": "binary_expression [205838,205887]",
      "dest": "binary_expression [207332,207381]"
    },
    {
      "src": "update_expression [61045,61048]",
      "dest": "update_expression [61504,61507]"
    },
    {
      "src": "comparison_operator: < [150258,150259]",
      "dest": "comparison_operator: < [151752,151753]"
    },
    {
      "src": "affectation_operator: = [89364,89365]",
      "dest": "affectation_operator: = [90858,90859]"
    },
    {
      "src": "argument_list [198477,198481]",
      "dest": "argument_list [199971,199975]"
    },
    {
      "src": "argument_list [7485,7487]",
      "dest": "argument_list [7485,7487]"
    },
    {
      "src": "block [104188,104224]",
      "dest": "block [105682,105718]"
    },
    {
      "src": "identifier: buf [175661,175664]",
      "dest": "identifier: buf [177155,177158]"
    },
    {
      "src": "binary_expression [198389,198399]",
      "dest": "binary_expression [199883,199893]"
    },
    {
      "src": "binary_expression [159724,159739]",
      "dest": "binary_expression [161218,161233]"
    },
    {
      "src": "method_declaration [9560,9658]",
      "dest": "method_declaration [9560,9658]"
    },
    {
      "src": "identifier: CR [170459,170461]",
      "dest": "identifier: CR [171953,171955]"
    },
    {
      "src": "static: static [98028,98034]",
      "dest": "static: static [99522,99528]"
    },
    {
      "src": "return_statement [242407,242443]",
      "dest": "return_statement [243901,243937]"
    },
    {
      "src": "identifier: length [158228,158234]",
      "dest": "identifier: length [159722,159728]"
    },
    {
      "src": "formal_parameter [87715,87725]",
      "dest": "formal_parameter [89209,89219]"
    },
    {
      "src": "method_invocation [89496,89509]",
      "dest": "method_invocation [90990,91003]"
    },
    {
      "src": "modifiers [196617,196630]",
      "dest": "modifiers [198111,198124]"
    },
    {
      "src": "decimal_integer_literal: 0 [199881,199882]",
      "dest": "decimal_integer_literal: 0 [201375,201376]"
    },
    {
      "src": "identifier: text [162360,162364]",
      "dest": "identifier: text [163854,163858]"
    },
    {
      "src": "identifier: str [145532,145535]",
      "dest": "identifier: str [147026,147029]"
    },
    {
      "src": "identifier: obj [134540,134543]",
      "dest": "identifier: obj [136034,136037]"
    },
    {
      "src": "formal_parameters [201948,201965]",
      "dest": "formal_parameters [203442,203459]"
    },
    {
      "src": "comparison_operator: == [185791,185793]",
      "dest": "comparison_operator: == [187285,187287]"
    },
    {
      "src": "identifier: join [130677,130681]",
      "dest": "identifier: join [132171,132175]"
    },
    {
      "src": "identifier: lastMatch [119034,119043]",
      "dest": "identifier: lastMatch [120528,120537]"
    },
    {
      "src": "catch_type [26184,26201]",
      "dest": "catch_type [26184,26201]"
    },
    {
      "src": "null_literal: null [77318,77322]",
      "dest": "null_literal: null [78812,78816]"
    },
    {
      "src": "type: String [23146,23152]",
      "dest": "type: String [23146,23152]"
    },
    {
      "src": "identifier: preserveAllTokens [110893,110910]",
      "dest": "identifier: preserveAllTokens [112387,112404]"
    },
    {
      "src": "comparison_operator: != [145745,145747]",
      "dest": "comparison_operator: != [147239,147241]"
    },
    {
      "src": "formal_parameters [110352,110411]",
      "dest": "formal_parameters [111846,111905]"
    },
    {
      "src": "binary_expression [68094,68104]",
      "dest": "binary_expression [69588,69598]"
    },
    {
      "src": "return_statement [135406,135418]",
      "dest": "return_statement [136900,136912]"
    },
    {
      "src": "identifier: splitByCharacterType [120470,120490]",
      "dest": "identifier: splitByCharacterType [121964,121984]"
    },
    {
      "src": "type: String [12642,12648]",
      "dest": "type: String [12642,12648]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode letters and\n     * space (' ').</p>\n     *\n     * <p><code>null</code> will return <code>false</code>\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphaSpace(null)   = false\n     * StringUtils.isAlphaSpace(\"\")     = true\n     * StringUtils.isAlphaSpace(\"  \")   = true\n     * StringUtils.isAlphaSpace(\"abc\")  = true\n     * StringUtils.isAlphaSpace(\"ab c\") = true\n     * StringUtils.isAlphaSpace(\"ab2c\") = false\n     * StringUtils.isAlphaSpace(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains letters and space,\n     *  and is non-null\n     */ [201137,201909]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode letters and\n     * space (' ').</p>\n     *\n     * <p><code>null</code> will return <code>false</code>\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphaSpace(null)   = false\n     * StringUtils.isAlphaSpace(\"\")     = true\n     * StringUtils.isAlphaSpace(\"  \")   = true\n     * StringUtils.isAlphaSpace(\"abc\")  = true\n     * StringUtils.isAlphaSpace(\"ab c\") = true\n     * StringUtils.isAlphaSpace(\"ab2c\") = false\n     * StringUtils.isAlphaSpace(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains letters and space,\n     *  and is non-null\n     */ [202631,203403]"
    },
    {
      "src": "binary_expression [49803,49809]",
      "dest": "binary_expression [49803,49809]"
    },
    {
      "src": "expression_statement [165704,165725]",
      "dest": "expression_statement [167198,167219]"
    },
    {
      "src": "formal_parameter [20141,20158]",
      "dest": "formal_parameter [20141,20158]"
    },
    {
      "src": "identifier: separator [81506,81515]",
      "dest": "identifier: separator [83000,83009]"
    },
    {
      "src": "method_invocation [91366,91391]",
      "dest": "method_invocation [92860,92885]"
    },
    {
      "src": "identifier: i [225201,225202]",
      "dest": "identifier: i [226695,226696]"
    },
    {
      "src": "line_comment: // All these pre-checks are to maintain API with an older version [63792,63857]",
      "dest": "line_comment: // All these pre-checks are to maintain API with an older version [64839,64904]"
    },
    {
      "src": "type: String [194472,194478]",
      "dest": "type: String [195966,195972]"
    },
    {
      "src": "identifier: indexOf [33445,33452]",
      "dest": "identifier: indexOf [33445,33452]"
    },
    {
      "src": "block [227798,228003]",
      "dest": "block [229292,229497]"
    },
    {
      "src": "static: static [50813,50819]",
      "dest": "static: static [50813,50819]"
    },
    {
      "src": "binary_expression [53035,53067]",
      "dest": "binary_expression [53035,53067]"
    },
    {
      "src": "identifier: ArrayUtils [90965,90975]",
      "dest": "identifier: ArrayUtils [92459,92469]"
    },
    {
      "src": "identifier: close [89378,89383]",
      "dest": "identifier: close [90872,90877]"
    },
    {
      "src": "identifier: numberOfSubstrings [104872,104890]",
      "dest": "identifier: numberOfSubstrings [106366,106384]"
    },
    {
      "src": "arithmetic_operator: - [123740,123741]",
      "dest": "arithmetic_operator: - [125234,125235]"
    },
    {
      "src": "identifier: charAt [202138,202144]",
      "dest": "identifier: charAt [203632,203638]"
    },
    {
      "src": "argument_list [131256,131258]",
      "dest": "argument_list [132750,132752]"
    },
    {
      "src": "local_variable_declaration [241101,241111]",
      "dest": "local_variable_declaration [242595,242605]"
    },
    {
      "src": "assignment_expression [168386,168395]",
      "dest": "assignment_expression [169880,169889]"
    },
    {
      "src": "if_statement [184140,184237]",
      "dest": "if_statement [185634,185731]"
    },
    {
      "src": "arithmetic_operator: + [75749,75750]",
      "dest": "arithmetic_operator: + [77243,77244]"
    },
    {
      "src": "identifier: splitByCharacterType [120420,120440]",
      "dest": "identifier: splitByCharacterType [121914,121934]"
    },
    {
      "src": "comparison_operator: == [235263,235265]",
      "dest": "comparison_operator: == [236757,236759]"
    },
    {
      "src": "formal_parameters [90745,90784]",
      "dest": "formal_parameters [92239,92278]"
    },
    {
      "src": "block [127901,128087]",
      "dest": "block [129395,129581]"
    },
    {
      "src": "static: static [144516,144522]",
      "dest": "static: static [146010,146016]"
    },
    {
      "src": "identifier: searchStr [33620,33629]",
      "dest": "identifier: searchStr [33620,33629]"
    },
    {
      "src": "method_invocation [196854,196936]",
      "dest": "method_invocation [198348,198430]"
    },
    {
      "src": "identifier: start [118258,118263]",
      "dest": "identifier: start [119752,119757]"
    },
    {
      "src": "affectation_operator: = [198423,198424]",
      "dest": "affectation_operator: = [199917,199918]"
    },
    {
      "src": "argument_list [134235,134240]",
      "dest": "argument_list [135729,135734]"
    },
    {
      "src": "expression_statement [181500,181513]",
      "dest": "expression_statement [182994,183007]"
    },
    {
      "src": "identifier: str [113381,113384]",
      "dest": "identifier: str [114875,114878]"
    },
    {
      "src": "affectation_operator: = [236006,236007]",
      "dest": "affectation_operator: = [237500,237501]"
    },
    {
      "src": "comparison_operator: == [158149,158151]",
      "dest": "comparison_operator: == [159643,159645]"
    },
    {
      "src": "variable_declarator [200968,200973]",
      "dest": "variable_declarator [202462,202467]"
    },
    {
      "src": "identifier: i [211387,211388]",
      "dest": "identifier: i [212881,212882]"
    },
    {
      "src": "identifier: cs [203121,203123]",
      "dest": "identifier: cs [204615,204617]"
    },
    {
      "src": "method_declaration [62260,62677]",
      "dest": "method_declaration [62999,63724]"
    },
    {
      "src": "identifier: charAt [207022,207028]",
      "dest": "identifier: charAt [208516,208522]"
    },
    {
      "src": "argument_list [45126,45157]",
      "dest": "argument_list [45126,45157]"
    },
    {
      "src": "identifier: replacementLength [158737,158754]",
      "dest": "identifier: replacementLength [160231,160248]"
    },
    {
      "src": "decimal_integer_literal: 0 [158177,158178]",
      "dest": "decimal_integer_literal: 0 [159671,159672]"
    },
    {
      "src": "identifier: separator [86296,86305]",
      "dest": "identifier: separator [87790,87799]"
    },
    {
      "src": "line_comment: // indexes into strings s and t [235716,235747]",
      "dest": "line_comment: // indexes into strings s and t [237210,237241]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets the substring before the last occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * An empty or <code>null</code> separator will return the input string.</p>\n     *\n     * <p>If nothing is found, the string input is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringBeforeLast(null, *)      = null\n     * StringUtils.substringBeforeLast(\"\", *)        = \"\"\n     * StringUtils.substringBeforeLast(\"abcba\", \"b\") = \"abc\"\n     * StringUtils.substringBeforeLast(\"abc\", \"c\")   = \"ab\"\n     * StringUtils.substringBeforeLast(\"a\", \"a\")     = \"\"\n     * StringUtils.substringBeforeLast(\"a\", \"z\")     = \"a\"\n     * StringUtils.substringBeforeLast(\"a\", null)    = \"a\"\n     * StringUtils.substringBeforeLast(\"a\", \"\")      = \"a\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring before the last occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [83395,84602]",
      "dest": "block_comment:     \n     * <p>Gets the substring before the last occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * An empty or <code>null</code> separator will return the input string.</p>\n     *\n     * <p>If nothing is found, the string input is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringBeforeLast(null, *)      = null\n     * StringUtils.substringBeforeLast(\"\", *)        = \"\"\n     * StringUtils.substringBeforeLast(\"abcba\", \"b\") = \"abc\"\n     * StringUtils.substringBeforeLast(\"abc\", \"c\")   = \"ab\"\n     * StringUtils.substringBeforeLast(\"a\", \"a\")     = \"\"\n     * StringUtils.substringBeforeLast(\"a\", \"z\")     = \"a\"\n     * StringUtils.substringBeforeLast(\"a\", null)    = \"a\"\n     * StringUtils.substringBeforeLast(\"a\", \"\")      = \"a\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring before the last occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [84889,86096]"
    },
    {
      "src": "identifier: str [83343,83346]",
      "dest": "identifier: str [84837,84840]"
    },
    {
      "src": "arithmetic_operator: + [190805,190806]",
      "dest": "arithmetic_operator: + [192299,192300]"
    },
    {
      "src": "formal_parameter [144549,144562]",
      "dest": "formal_parameter [146043,146056]"
    },
    {
      "src": "formal_parameter [136165,136185]",
      "dest": "formal_parameter [137659,137679]"
    },
    {
      "src": ":: : [14858,14859]",
      "dest": ":: : [14858,14859]"
    },
    {
      "src": "identifier: len [116630,116633]",
      "dest": "identifier: len [118124,118127]"
    },
    {
      "src": "identifier: splitPreserveAllTokens [113294,113316]",
      "dest": "identifier: splitPreserveAllTokens [114788,114810]"
    },
    {
      "src": "affectation_operator: = [145690,145691]",
      "dest": "affectation_operator: = [147184,147185]"
    },
    {
      "src": "method_invocation [73621,73633]",
      "dest": "method_invocation [75115,75127]"
    },
    {
      "src": "affectation_operator: = [36453,36454]",
      "dest": "affectation_operator: = [36453,36454]"
    },
    {
      "src": "identifier: str [69763,69766]",
      "dest": "identifier: str [71257,71260]"
    },
    {
      "src": "type: int [8804,8807]",
      "dest": "type: int [8804,8807]"
    },
    {
      "src": "identifier: str [244130,244133]",
      "dest": "identifier: str [245624,245627]"
    },
    {
      "src": "parenthesized_expression [158143,158298]",
      "dest": "parenthesized_expression [159637,159792]"
    },
    {
      "src": "block [192728,192764]",
      "dest": "block [194222,194258]"
    },
    {
      "src": "binary_expression [223890,223911]",
      "dest": "binary_expression [225384,225405]"
    },
    {
      "src": "assignment_expression [76216,76223]",
      "dest": "assignment_expression [77710,77717]"
    },
    {
      "src": "formal_parameter [183914,183926]",
      "dest": "formal_parameter [185408,185420]"
    },
    {
      "src": "return_statement [143432,143488]",
      "dest": "return_statement [144926,144982]"
    },
    {
      "src": "?: ? [213935,213936]",
      "dest": "?: ? [215429,215430]"
    },
    {
      "src": "identifier: str [212945,212948]",
      "dest": "identifier: str [214439,214442]"
    },
    {
      "src": "identifier: str [213930,213933]",
      "dest": "identifier: str [215424,215427]"
    },
    {
      "src": "method_invocation [203256,203295]",
      "dest": "method_invocation [204750,204789]"
    },
    {
      "src": "static: static [20106,20112]",
      "dest": "static: static [20106,20112]"
    },
    {
      "src": "if_statement [104352,104520]",
      "dest": "if_statement [105846,106014]"
    },
    {
      "src": "formal_parameters [136164,136204]",
      "dest": "formal_parameters [137658,137698]"
    },
    {
      "src": "identifier: searchStrings [241034,241047]",
      "dest": "identifier: searchStrings [242528,242541]"
    },
    {
      "src": "new: new [26362,26365]",
      "dest": "new: new [26362,26365]"
    },
    {
      "src": "identifier: offset [219363,219369]",
      "dest": "identifier: offset [220857,220863]"
    },
    {
      "src": "decimal_integer_literal: 1 [227197,227198]",
      "dest": "decimal_integer_literal: 1 [228691,228692]"
    },
    {
      "src": "type: int [219359,219362]",
      "dest": "type: int [220853,220856]"
    },
    {
      "src": "comparison_operator: < [168193,168194]",
      "dest": "comparison_operator: < [169687,169688]"
    },
    {
      "src": "visibility: public [201914,201920]",
      "dest": "visibility: public [203408,203414]"
    },
    {
      "src": "return_statement [122087,122126]",
      "dest": "return_statement [123581,123620]"
    },
    {
      "src": "variable_declarator [175172,175191]",
      "dest": "variable_declarator [176666,176685]"
    },
    {
      "src": "argument_list [244248,244250]",
      "dest": "argument_list [245742,245744]"
    },
    {
      "src": "identifier: isEmpty [40904,40911]",
      "dest": "identifier: isEmpty [40904,40911]"
    },
    {
      "src": "identifier: sz [211282,211284]",
      "dest": "identifier: sz [212776,212778]"
    },
    {
      "src": "identifier: preserveAllTokens [104491,104508]",
      "dest": "identifier: preserveAllTokens [105985,106002]"
    },
    {
      "src": "block [149848,150772]",
      "dest": "block [151342,152266]"
    },
    {
      "src": "modifiers [179001,179014]",
      "dest": "modifiers [180495,180508]"
    },
    {
      "src": "return_statement [67036,67048]",
      "dest": "return_statement [68530,68542]"
    },
    {
      "src": "line_comment: // index of replace array that will replace the search string found [159230,159297]",
      "dest": "line_comment: // index of replace array that will replace the search string found [160724,160791]"
    },
    {
      "src": "block [29452,29573]",
      "dest": "block [29452,29573]"
    },
    {
      "src": "type: String [103124,103130]",
      "dest": "type: String [104618,104624]"
    },
    {
      "src": "assignment_expression [161276,161290]",
      "dest": "assignment_expression [162770,162784]"
    },
    {
      "src": "comparison_operator: == [36236,36238]",
      "dest": "comparison_operator: == [36236,36238]"
    },
    {
      "src": "identifier: length [123139,123145]",
      "dest": "identifier: length [124633,124639]"
    },
    {
      "src": "identifier: sep [117756,117759]",
      "dest": "identifier: sep [119250,119253]"
    },
    {
      "src": "formal_parameters [238077,238104]",
      "dest": "formal_parameters [239571,239598]"
    },
    {
      "src": "identifier: toArray [119262,119269]",
      "dest": "identifier: toArray [120756,120763]"
    },
    {
      "src": "identifier: i [110803,110804]",
      "dest": "identifier: i [112297,112298]"
    },
    {
      "src": "type: int [165935,165938]",
      "dest": "type: int [167429,167432]"
    },
    {
      "src": "block [140328,140363]",
      "dest": "block [141822,141857]"
    },
    {
      "src": "variable_declarator [123412,123432]",
      "dest": "variable_declarator [124906,124926]"
    },
    {
      "src": "parenthesized_expression [84821,84845]",
      "dest": "parenthesized_expression [86315,86339]"
    },
    {
      "src": "arithmetic_operator: - [91185,91186]",
      "dest": "arithmetic_operator: - [92679,92680]"
    },
    {
      "src": "identifier: str [183026,183029]",
      "dest": "identifier: str [184520,184523]"
    },
    {
      "src": "identifier: targetSting [222140,222151]",
      "dest": "identifier: targetSting [223634,223645]"
    },
    {
      "src": "assignment_expression [104872,104895]",
      "dest": "assignment_expression [106366,106389]"
    },
    {
      "src": "variable_declarator [36315,36324]",
      "dest": "variable_declarator [36315,36324]"
    },
    {
      "src": "method_invocation [61074,61086]",
      "dest": "method_invocation [61533,61545]"
    },
    {
      "src": "binary_expression [66771,66791]",
      "dest": "binary_expression [67890,67910]"
    },
    {
      "src": "identifier: substrings [106288,106298]",
      "dest": "identifier: substrings [107782,107792]"
    },
    {
      "src": "if_statement [81486,81560]",
      "dest": "if_statement [82980,83054]"
    },
    {
      "src": "type: String [124150,124156]",
      "dest": "type: String [125644,125650]"
    },
    {
      "src": "parenthesized_expression [168360,168371]",
      "dest": "parenthesized_expression [169854,169865]"
    },
    {
      "src": "identifier: pads [190724,190728]",
      "dest": "identifier: pads [192218,192222]"
    },
    {
      "src": "method_invocation [118142,118175]",
      "dest": "method_invocation [119636,119669]"
    },
    {
      "src": "identifier: i [62535,62536]",
      "dest": "identifier: i [63274,63275]"
    },
    {
      "src": "method_invocation [161757,161791]",
      "dest": "method_invocation [163251,163285]"
    },
    {
      "src": "identifier: cs2 [225259,225262]",
      "dest": "identifier: cs2 [226753,226756]"
    },
    {
      "src": "return_statement [203147,203160]",
      "dest": "return_statement [204641,204654]"
    },
    {
      "src": "method_invocation [222257,222269]",
      "dest": "method_invocation [223751,223763]"
    },
    {
      "src": "for_statement [235899,235955]",
      "dest": "for_statement [237393,237449]"
    },
    {
      "src": "identifier: separator [176649,176658]",
      "dest": "identifier: separator [178143,178152]"
    },
    {
      "src": "identifier: str [20191,20194]",
      "dest": "identifier: str [20191,20194]"
    },
    {
      "src": "type: int [57533,57536]",
      "dest": "type: int [57873,57876]"
    },
    {
      "src": "identifier: cs [195707,195709]",
      "dest": "identifier: cs [197201,197203]"
    },
    {
      "src": "dimensions_expr [185991,185997]",
      "dest": "dimensions_expr [187485,187491]"
    },
    {
      "src": "identifier: i [145742,145743]",
      "dest": "identifier: i [147236,147237]"
    },
    {
      "src": "identifier: length [162276,162282]",
      "dest": "identifier: length [163770,163776]"
    },
    {
      "src": "identifier: length [198233,198239]",
      "dest": "identifier: length [199727,199733]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode digits.\n     * A decimal point is not a unicode digit and returns false.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isNumeric(null)   = false\n     * StringUtils.isNumeric(\"\")     = true\n     * StringUtils.isNumeric(\"  \")   = false\n     * StringUtils.isNumeric(\"123\")  = true\n     * StringUtils.isNumeric(\"12 3\") = false\n     * StringUtils.isNumeric(\"ab2c\") = false\n     * StringUtils.isNumeric(\"12-3\") = false\n     * StringUtils.isNumeric(\"12.3\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains digits, and is non-null\n     */ [205977,206798]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode digits.\n     * A decimal point is not a unicode digit and returns false.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isNumeric(null)   = false\n     * StringUtils.isNumeric(\"\")     = true\n     * StringUtils.isNumeric(\"  \")   = false\n     * StringUtils.isNumeric(\"123\")  = true\n     * StringUtils.isNumeric(\"12 3\") = false\n     * StringUtils.isNumeric(\"ab2c\") = false\n     * StringUtils.isNumeric(\"12-3\") = false\n     * StringUtils.isNumeric(\"12.3\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains digits, and is non-null\n     */ [207471,208292]"
    },
    {
      "src": "modifiers [15774,15787]",
      "dest": "modifiers [15774,15787]"
    },
    {
      "src": "assignment_expression [130857,130874]",
      "dest": "assignment_expression [132351,132368]"
    },
    {
      "src": "block [29480,29527]",
      "dest": "block [29480,29527]"
    },
    {
      "src": "identifier: len [168155,168158]",
      "dest": "identifier: len [169649,169652]"
    },
    {
      "src": "identifier: substring [91482,91491]",
      "dest": "identifier: substring [92976,92985]"
    },
    {
      "src": "type: String [130698,130704]",
      "dest": "type: String [132192,132198]"
    },
    {
      "src": "argument_list [204456,204459]",
      "dest": "argument_list [205950,205953]"
    },
    {
      "src": "catch_clause [25347,25507]",
      "dest": "catch_clause [25347,25507]"
    },
    {
      "src": "method_declaration [129159,129346]",
      "dest": "method_declaration [130653,130840]"
    },
    {
      "src": "identifier: searchStr [31836,31845]",
      "dest": "identifier: searchStr [31836,31845]"
    },
    {
      "src": "identifier: preserveAllTokens [118594,118611]",
      "dest": "identifier: preserveAllTokens [120088,120105]"
    },
    {
      "src": "method_invocation [8735,8746]",
      "dest": "method_invocation [8735,8746]"
    },
    {
      "src": "identifier: ch [57712,57714]",
      "dest": "identifier: ch [54820,54822]"
    },
    {
      "src": "type: String[] [116292,116300]",
      "dest": "type: String[] [117786,117794]"
    },
    {
      "src": "parenthesized_expression [137238,137278]",
      "dest": "parenthesized_expression [138732,138772]"
    },
    {
      "src": "array_access [23219,23228]",
      "dest": "array_access [23219,23228]"
    },
    {
      "src": "method_invocation [189156,189184]",
      "dest": "method_invocation [190650,190678]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [31916,31931]",
      "dest": "identifier: INDEX_NOT_FOUND [31916,31931]"
    },
    {
      "src": "decimal_integer_literal: 0 [149934,149935]",
      "dest": "decimal_integer_literal: 0 [151428,151429]"
    },
    {
      "src": "local_variable_declaration [61105,61115]",
      "dest": "local_variable_declaration [61564,61574]"
    },
    {
      "src": "identifier: cs [64102,64104]",
      "dest": "identifier: cs [65149,65151]"
    },
    {
      "src": "identifier: next [134516,134520]",
      "dest": "identifier: next [136010,136014]"
    },
    {
      "src": "type: int [69943,69946]",
      "dest": "type: int [71437,71440]"
    },
    {
      "src": "identifier: lastMatch [117301,117310]",
      "dest": "identifier: lastMatch [118795,118804]"
    },
    {
      "src": "block [18438,19015]",
      "dest": "block [18438,19015]"
    },
    {
      "src": "comparison_operator: < [178027,178028]",
      "dest": "comparison_operator: < [179521,179522]"
    },
    {
      "src": "formal_parameter [84648,84658]",
      "dest": "formal_parameter [86142,86152]"
    },
    {
      "src": "formal_parameter [55985,56000]",
      "dest": "formal_parameter [56331,56346]"
    },
    {
      "src": "method_invocation [213910,213934]",
      "dest": "method_invocation [215404,215428]"
    },
    {
      "src": "identifier: searchChars [57437,57448]",
      "dest": "identifier: searchChars [57777,57788]"
    },
    {
      "src": "argument_list [91078,91080]",
      "dest": "argument_list [92572,92574]"
    },
    {
      "src": "block [179969,180336]",
      "dest": "block [181463,181830]"
    },
    {
      "src": "type: String [244081,244087]",
      "dest": "type: String [245575,245581]"
    },
    {
      "src": "static: static [155032,155038]",
      "dest": "static: static [156526,156532]"
    },
    {
      "src": "new: new [178283,178286]",
      "dest": "new: new [179777,179780]"
    },
    {
      "src": "type: Object [132561,132567]",
      "dest": "type: Object [134055,134061]"
    },
    {
      "src": "argument_list [160909,160911]",
      "dest": "argument_list [162403,162405]"
    },
    {
      "src": "if_statement [195545,195623]",
      "dest": "if_statement [197039,197117]"
    },
    {
      "src": "argument_list [15864,15875]",
      "dest": "argument_list [15864,15875]"
    },
    {
      "src": "while_statement [117800,118418]",
      "dest": "while_statement [119294,119912]"
    },
    {
      "src": "binary_expression [149927,149935]",
      "dest": "binary_expression [151421,151429]"
    },
    {
      "src": "type: String [129173,129179]",
      "dest": "type: String [130667,130673]"
    },
    {
      "src": "block [129219,129346]",
      "dest": "block [130713,130840]"
    },
    {
      "src": "affectation_operator: = [209239,209240]",
      "dest": "affectation_operator: = [210733,210734]"
    },
    {
      "src": "identifier: charAt [228554,228560]",
      "dest": "identifier: charAt [230048,230054]"
    },
    {
      "src": "identifier: string [240950,240956]",
      "dest": "identifier: string [242444,242450]"
    },
    {
      "src": "visibility: public [46493,46499]",
      "dest": "visibility: public [46493,46499]"
    },
    {
      "src": "visibility: public [191841,191847]",
      "dest": "visibility: public [193335,193341]"
    },
    {
      "src": "parenthesized_expression [195549,195571]",
      "dest": "parenthesized_expression [197043,197065]"
    },
    {
      "src": "method_invocation [141783,141831]",
      "dest": "method_invocation [143277,143325]"
    },
    {
      "src": "type: int [127501,127504]",
      "dest": "type: int [128995,128998]"
    },
    {
      "src": "identifier: repeat [176572,176578]",
      "dest": "identifier: repeat [178066,178072]"
    },
    {
      "src": "identifier: isEmpty [138728,138735]",
      "dest": "identifier: isEmpty [140222,140229]"
    },
    {
      "src": "identifier: startPos [39391,39399]",
      "dest": "identifier: startPos [39391,39399]"
    },
    {
      "src": "argument_list [189107,189140]",
      "dest": "argument_list [190601,190634]"
    },
    {
      "src": "parenthesized_expression [221946,221979]",
      "dest": "parenthesized_expression [223440,223473]"
    },
    {
      "src": "constructor_body [6631,6655]",
      "dest": "constructor_body [6631,6655]"
    },
    {
      "src": "parenthesized_expression [78418,78431]",
      "dest": "parenthesized_expression [79912,79925]"
    },
    {
      "src": "affectation_operator: = [18571,18572]",
      "dest": "affectation_operator: = [18571,18572]"
    },
    {
      "src": "identifier: cs [205703,205705]",
      "dest": "identifier: cs [207197,207199]"
    },
    {
      "src": "identifier: str [181897,181900]",
      "dest": "identifier: str [183391,183394]"
    },
    {
      "src": "argument_list [134093,134095]",
      "dest": "argument_list [135587,135589]"
    },
    {
      "src": "block [83107,83142]",
      "dest": "block [84601,84636]"
    },
    {
      "src": "type: String[] [69728,69736]",
      "dest": "type: String[] [71222,71230]"
    },
    {
      "src": "type: String [18407,18413]",
      "dest": "type: String [18407,18413]"
    },
    {
      "src": "identifier: str [169925,169928]",
      "dest": "identifier: str [171419,171422]"
    },
    {
      "src": "null_literal: null [190521,190525]",
      "dest": "null_literal: null [192015,192019]"
    },
    {
      "src": "identifier: remove [138706,138712]",
      "dest": "identifier: remove [140200,140206]"
    },
    {
      "src": "return_statement [103161,103223]",
      "dest": "return_statement [104655,104717]"
    },
    {
      "src": "method_invocation [162411,162425]",
      "dest": "method_invocation [163905,163919]"
    },
    {
      "src": "parenthesized_expression [181642,181653]",
      "dest": "parenthesized_expression [183136,183147]"
    },
    {
      "src": "modifiers [81409,81422]",
      "dest": "modifiers [82903,82916]"
    },
    {
      "src": "block [62500,62639]",
      "dest": "block [63239,63686]"
    },
    {
      "src": "identifier: d [235597,235598]",
      "dest": "identifier: d [237091,237092]"
    },
    {
      "src": "line_comment: // shortest string and didn't find a match, but the string lengths [229052,229118]",
      "dest": "line_comment: // shortest string and didn't find a match, but the string lengths [230546,230612]"
    },
    {
      "src": "expression_statement [236097,236131]",
      "dest": "expression_statement [237591,237625]"
    },
    {
      "src": "parenthesized_expression [184043,184054]",
      "dest": "parenthesized_expression [185537,185548]"
    },
    {
      "src": "return_statement [209388,209400]",
      "dest": "return_statement [210882,210894]"
    },
    {
      "src": "binary_expression [149862,149935]",
      "dest": "binary_expression [151356,151429]"
    },
    {
      "src": "identifier: str [140349,140352]",
      "dest": "identifier: str [141843,141846]"
    },
    {
      "src": "local_variable_declaration [62432,62458]",
      "dest": "local_variable_declaration [63171,63197]"
    },
    {
      "src": "comparison_operator: == [214575,214577]",
      "dest": "comparison_operator: == [216069,216071]"
    },
    {
      "src": "block [120453,120509]",
      "dest": "block [121947,122003]"
    },
    {
      "src": "method_invocation [13711,13727]",
      "dest": "method_invocation [13711,13727]"
    },
    {
      "src": "binary_expression [244329,244359]",
      "dest": "binary_expression [245823,245853]"
    },
    {
      "src": "for_statement [206954,207098]",
      "dest": "for_statement [208448,208592]"
    },
    {
      "src": "identifier: strLen [190704,190710]",
      "dest": "identifier: strLen [192198,192204]"
    },
    {
      "src": "type: int [181368,181371]",
      "dest": "type: int [182862,182865]"
    },
    {
      "src": "identifier: indexOfAnyBut [64088,64101]",
      "dest": "identifier: indexOfAnyBut [65135,65148]"
    },
    {
      "src": "identifier: isLetterOrDigit [203266,203281]",
      "dest": "identifier: isLetterOrDigit [204760,204775]"
    },
    {
      "src": "identifier: arrayLen [227338,227346]",
      "dest": "identifier: arrayLen [228832,228840]"
    },
    {
      "src": "identifier: length [57564,57570]",
      "dest": "identifier: length [57904,57910]"
    },
    {
      "src": "arithmetic_operator: - [175332,175333]",
      "dest": "arithmetic_operator: - [176826,176827]"
    },
    {
      "src": "formal_parameters [69715,69748]",
      "dest": "formal_parameters [71209,71242]"
    },
    {
      "src": "local_variable_declaration [150131,150170]",
      "dest": "local_variable_declaration [151625,151664]"
    },
    {
      "src": "identifier: toString [133106,133114]",
      "dest": "identifier: toString [134600,134608]"
    },
    {
      "src": "update_expression [202092,202095]",
      "dest": "update_expression [203586,203589]"
    },
    {
      "src": "if_statement [168019,168072]",
      "dest": "if_statement [169513,169566]"
    },
    {
      "src": "return_statement [170181,170192]",
      "dest": "return_statement [171675,171686]"
    },
    {
      "src": "binary_expression [225012,225022]",
      "dest": "binary_expression [226506,226516]"
    },
    {
      "src": "affectation_operator: = [36321,36322]",
      "dest": "affectation_operator: = [36321,36322]"
    },
    {
      "src": "modifiers [172937,172950]",
      "dest": "modifiers [174431,174444]"
    },
    {
      "src": "affectation_operator: = [84780,84781]",
      "dest": "affectation_operator: = [86274,86275]"
    },
    {
      "src": "identifier: list [119257,119261]",
      "dest": "identifier: list [120751,120755]"
    },
    {
      "src": "block [116946,117656]",
      "dest": "block [118440,119150]"
    },
    {
      "src": "identifier: searchChars [59638,59649]",
      "dest": "identifier: searchChars [60025,60036]"
    },
    {
      "src": "formal_parameters [186616,186633]",
      "dest": "formal_parameters [188110,188127]"
    },
    {
      "src": "new: new [168538,168541]",
      "dest": "new: new [170032,170035]"
    },
    {
      "src": "identifier: searchStr [36050,36059]",
      "dest": "identifier: searchStr [36050,36059]"
    },
    {
      "src": "identifier: str [171959,171962]",
      "dest": "identifier: str [173453,173456]"
    },
    {
      "src": "identifier: searchStr [49528,49537]",
      "dest": "identifier: searchStr [49528,49537]"
    },
    {
      "src": "false: false [241071,241076]",
      "dest": "false: false [242565,242570]"
    },
    {
      "src": "parenthesized_expression [75805,75816]",
      "dest": "parenthesized_expression [77299,77310]"
    },
    {
      "src": "block [159815,159993]",
      "dest": "block [161309,161487]"
    },
    {
      "src": "identifier: shortestStrLen [227899,227913]",
      "dest": "identifier: shortestStrLen [229393,229407]"
    },
    {
      "src": "decimal_integer_literal: 0 [181651,181652]",
      "dest": "decimal_integer_literal: 0 [183145,183146]"
    },
    {
      "src": "identifier: splitWorker [110341,110352]",
      "dest": "identifier: splitWorker [111835,111846]"
    },
    {
      "src": "method_invocation [147142,147185]",
      "dest": "method_invocation [148636,148679]"
    },
    {
      "src": "comparison_operator: == [233805,233807]",
      "dest": "comparison_operator: == [235299,235301]"
    },
    {
      "src": "local_variable_declaration [185497,185523]",
      "dest": "local_variable_declaration [186991,187017]"
    },
    {
      "src": "identifier: open [90765,90769]",
      "dest": "identifier: open [92259,92263]"
    },
    {
      "src": "formal_parameters [62291,62323]",
      "dest": "formal_parameters [63030,63062]"
    },
    {
      "src": "comparison_operator: < [62485,62486]",
      "dest": "comparison_operator: < [63224,63225]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [227221,227236]",
      "dest": "identifier: INDEX_NOT_FOUND [228715,228730]"
    },
    {
      "src": "binary_expression [220128,220151]",
      "dest": "binary_expression [221622,221645]"
    },
    {
      "src": "if_statement [180181,180279]",
      "dest": "if_statement [181675,181773]"
    },
    {
      "src": "identifier: separator [86642,86651]",
      "dest": "identifier: separator [88136,88145]"
    },
    {
      "src": "identifier: cs [209207,209209]",
      "dest": "identifier: cs [210701,210703]"
    },
    {
      "src": "identifier: separator [99713,99722]",
      "dest": "identifier: separator [101207,101216]"
    },
    {
      "src": "binary_expression [236286,236297]",
      "dest": "binary_expression [237780,237791]"
    },
    {
      "src": "if_statement [116918,119127]",
      "dest": "if_statement [118412,120621]"
    },
    {
      "src": "identifier: size [179949,179953]",
      "dest": "identifier: size [181443,181447]"
    },
    {
      "src": "formal_parameters [39356,39400]",
      "dest": "formal_parameters [39356,39400]"
    },
    {
      "src": "type: Object [134494,134500]",
      "dest": "type: Object [135988,135994]"
    },
    {
      "src": "method_invocation [56151,56176]",
      "dest": "method_invocation [56497,56522]"
    },
    {
      "src": "identifier: length [171923,171929]",
      "dest": "identifier: length [173417,173423]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [49462,49477]",
      "dest": "identifier: INDEX_NOT_FOUND [49462,49477]"
    },
    {
      "src": "identifier: str [176586,176589]",
      "dest": "identifier: str [178080,178083]"
    },
    {
      "src": "array_access [228663,228676]",
      "dest": "array_access [230157,230170]"
    },
    {
      "src": "binary_expression [117807,117814]",
      "dest": "binary_expression [119301,119308]"
    },
    {
      "src": "local_variable_declaration [204378,204388]",
      "dest": "local_variable_declaration [205872,205882]"
    },
    {
      "src": "modifiers [223644,223657]",
      "dest": "modifiers [225138,225151]"
    },
    {
      "src": "method_invocation [77477,77498]",
      "dest": "method_invocation [78971,78992]"
    },
    {
      "src": "affectation_operator: = [116634,116635]",
      "dest": "affectation_operator: = [118128,118129]"
    },
    {
      "src": "binary_expression [236288,236291]",
      "dest": "binary_expression [237782,237785]"
    },
    {
      "src": "modifiers [149756,149769]",
      "dest": "modifiers [151250,151263]"
    },
    {
      "src": "local_variable_declaration [160303,160320]",
      "dest": "local_variable_declaration [161797,161814]"
    },
    {
      "src": "return_statement [227214,227237]",
      "dest": "return_statement [228708,228731]"
    },
    {
      "src": "local_variable_declaration [228590,228607]",
      "dest": "local_variable_declaration [230084,230101]"
    },
    {
      "src": "type: String [77237,77243]",
      "dest": "type: String [78731,78737]"
    },
    {
      "src": "identifier: str [186207,186210]",
      "dest": "identifier: str [187701,187704]"
    },
    {
      "src": "formal_parameter [208044,208059]",
      "dest": "formal_parameter [209538,209553]"
    },
    {
      "src": "block [89342,89540]",
      "dest": "block [90836,91034]"
    },
    {
      "src": "block [160704,160780]",
      "dest": "block [162198,162274]"
    },
    {
      "src": "catch_type [25834,25858]",
      "dest": "catch_type [25834,25858]"
    },
    {
      "src": "type: int [8687,8690]",
      "dest": "type: int [8687,8690]"
    },
    {
      "src": "identifier: output1 [174941,174948]",
      "dest": "identifier: output1 [176435,176442]"
    },
    {
      "src": "binary_expression [69763,69796]",
      "dest": "binary_expression [71257,71290]"
    },
    {
      "src": "block [87727,87782]",
      "dest": "block [89221,89276]"
    },
    {
      "src": "identifier: padLen [185794,185800]",
      "dest": "identifier: padLen [187288,187294]"
    },
    {
      "src": "identifier: separatorChars [117762,117776]",
      "dest": "identifier: separatorChars [119256,119270]"
    },
    {
      "src": "arithmetic_operator: / [190812,190813]",
      "dest": "arithmetic_operator: / [192306,192307]"
    },
    {
      "src": "method_invocation [228547,228571]",
      "dest": "method_invocation [230041,230065]"
    },
    {
      "src": "false: false [207036,207041]",
      "dest": "false: false [208530,208535]"
    },
    {
      "src": "identifier: searchChar [30704,30714]",
      "dest": "identifier: searchChar [30704,30714]"
    },
    {
      "src": "parenthesized_expression [181406,181419]",
      "dest": "parenthesized_expression [182900,182913]"
    },
    {
      "src": "character_literal: ' ' [179090,179093]",
      "dest": "character_literal: ' ' [180584,180587]"
    },
    {
      "src": "block [105624,106165]",
      "dest": "block [107118,107659]"
    },
    {
      "src": "identifier: i [66647,66648]",
      "dest": "identifier: i [67766,67767]"
    },
    {
      "src": "binary_expression [78419,78430]",
      "dest": "binary_expression [79913,79924]"
    },
    {
      "src": "identifier: strs [231358,231362]",
      "dest": "identifier: strs [232852,232856]"
    },
    {
      "src": "expression_statement [222361,222406]",
      "dest": "expression_statement [223855,223900]"
    },
    {
      "src": "identifier: _d [235657,235659]",
      "dest": "identifier: _d [237151,237153]"
    },
    {
      "src": "identifier: size [190479,190483]",
      "dest": "identifier: size [191973,191977]"
    },
    {
      "src": "false: false [59590,59595]",
      "dest": "false: false [59977,59982]"
    },
    {
      "src": "arithmetic_operator: + [236292,236293]",
      "dest": "arithmetic_operator: + [237786,237787]"
    },
    {
      "src": "identifier: array [131221,131226]",
      "dest": "identifier: array [132715,132720]"
    },
    {
      "src": "formal_parameter [115459,115469]",
      "dest": "formal_parameter [116953,116963]"
    },
    {
      "src": "type: char [173226,173230]",
      "dest": "type: char [174720,174724]"
    },
    {
      "src": "variable_declarator [66558,66577]",
      "dest": "variable_declarator [67605,67624]"
    },
    {
      "src": "identifier: pos [124068,124071]",
      "dest": "identifier: pos [125562,125565]"
    },
    {
      "src": "argument_list [205779,205781]",
      "dest": "argument_list [207273,207275]"
    },
    {
      "src": "identifier: charAt [62528,62534]",
      "dest": "identifier: charAt [63267,63273]"
    },
    {
      "src": "type: String[] [155081,155089]",
      "dest": "type: String[] [156575,156583]"
    },
    {
      "src": "type: String [35125,35131]",
      "dest": "type: String [35125,35131]"
    },
    {
      "src": "identifier: iterable [135334,135342]",
      "dest": "identifier: iterable [136828,136836]"
    },
    {
      "src": "method_invocation [194595,194618]",
      "dest": "method_invocation [196089,196112]"
    },
    {
      "src": "identifier: str [122115,122118]",
      "dest": "identifier: str [123609,123612]"
    },
    {
      "src": "argument_list [119219,119229]",
      "dest": "argument_list [120713,120723]"
    },
    {
      "src": "method_declaration [122983,124256]",
      "dest": "method_declaration [124477,125750]"
    },
    {
      "src": "string_literal [158506,158525]",
      "dest": "string_literal [160000,160019]"
    },
    {
      "src": "identifier: list [111366,111370]",
      "dest": "identifier: list [112860,112864]"
    },
    {
      "src": "decimal_integer_literal: 0 [231146,231147]",
      "dest": "decimal_integer_literal: 0 [232640,232641]"
    },
    {
      "src": "array_access [54837,54851]",
      "dest": "array_access [58144,58158]"
    },
    {
      "src": "type: int [199848,199851]",
      "dest": "type: int [201342,201345]"
    },
    {
      "src": "argument_list [238132,238152]",
      "dest": "argument_list [239626,239646]"
    },
    {
      "src": "binary_expression [158805,158909]",
      "dest": "binary_expression [160299,160403]"
    },
    {
      "src": "array_access [61158,61172]",
      "dest": "array_access [61617,61631]"
    },
    {
      "src": "unary_expression [148368,148370]",
      "dest": "unary_expression [149862,149864]"
    },
    {
      "src": "null_literal: null [215523,215527]",
      "dest": "null_literal: null [217017,217021]"
    },
    {
      "src": "variable_declarator [203183,203199]",
      "dest": "variable_declarator [204677,204693]"
    },
    {
      "src": "binary_expression [75707,75714]",
      "dest": "binary_expression [77201,77208]"
    },
    {
      "src": "identifier: startIndex [127615,127625]",
      "dest": "identifier: startIndex [129109,129119]"
    },
    {
      "src": "expression_statement [17191,17225]",
      "dest": "expression_statement [17191,17225]"
    },
    {
      "src": "for_statement [160438,160790]",
      "dest": "for_statement [161932,162284]"
    },
    {
      "src": "if_statement [225238,225312]",
      "dest": "if_statement [226732,226806]"
    },
    {
      "src": "argument_list [180305,180329]",
      "dest": "argument_list [181799,181823]"
    },
    {
      "src": "comparison_operator: == [64113,64115]",
      "dest": "comparison_operator: == [65160,65162]"
    },
    {
      "src": "comparison_operator: == [110477,110479]",
      "dest": "comparison_operator: == [111971,111973]"
    },
    {
      "src": "identifier: i [49803,49804]",
      "dest": "identifier: i [49803,49804]"
    },
    {
      "src": "return_statement [241277,241289]",
      "dest": "return_statement [242771,242783]"
    },
    {
      "src": "identifier: lastIndexOf [46682,46693]",
      "dest": "identifier: lastIndexOf [46682,46693]"
    },
    {
      "src": "identifier: lastIdx [170349,170356]",
      "dest": "identifier: lastIdx [171843,171850]"
    },
    {
      "src": "identifier: str [110943,110946]",
      "dest": "identifier: str [112437,112440]"
    },
    {
      "src": "block [49549,49618]",
      "dest": "block [49549,49618]"
    },
    {
      "src": "if_statement [117210,117345]",
      "dest": "if_statement [118704,118839]"
    },
    {
      "src": "type: String [46523,46529]",
      "dest": "type: String [46523,46529]"
    },
    {
      "src": "return_statement [70361,70419]",
      "dest": "return_statement [71855,71913]"
    },
    {
      "src": "arithmetic_operator: + [75852,75853]",
      "dest": "arithmetic_operator: + [77346,77347]"
    },
    {
      "src": "identifier: separator [86391,86400]",
      "dest": "identifier: separator [87885,87894]"
    },
    {
      "src": "binary_expression [36107,36155]",
      "dest": "binary_expression [36107,36155]"
    },
    {
      "src": "unary_expression [9627,9651]",
      "dest": "unary_expression [9627,9651]"
    },
    {
      "src": "type: String [45064,45070]",
      "dest": "type: String [45064,45070]"
    },
    {
      "src": "!: ! [162439,162440]",
      "dest": "!: ! [163933,163934]"
    },
    {
      "src": "type: int [6115,6118]",
      "dest": "type: int [6115,6118]"
    },
    {
      "src": "block [110486,110522]",
      "dest": "block [111980,112016]"
    },
    {
      "src": "block [182168,182234]",
      "dest": "block [183662,183728]"
    },
    {
      "src": "identifier: rightPad [180224,180232]",
      "dest": "identifier: rightPad [181718,181726]"
    },
    {
      "src": "if_statement [228909,229229]",
      "dest": "if_statement [230403,230723]"
    },
    {
      "src": "identifier: remove [145544,145550]",
      "dest": "identifier: remove [147038,147044]"
    },
    {
      "src": "formal_parameter [51832,51842]",
      "dest": "formal_parameter [51832,51842]"
    },
    {
      "src": "identifier: containsNone [68182,68194]",
      "dest": "identifier: containsNone [69676,69688]"
    },
    {
      "src": "decimal_integer_literal: 0 [20463,20464]",
      "dest": "decimal_integer_literal: 0 [20463,20464]"
    },
    {
      "src": "!: ! [228134,228135]",
      "dest": "!: ! [229628,229629]"
    },
    {
      "src": "identifier: searchLen [66591,66600]",
      "dest": "identifier: searchLen [67670,67679]"
    },
    {
      "src": "identifier: lastIndexOf [40849,40860]",
      "dest": "identifier: lastIndexOf [40849,40860]"
    },
    {
      "src": "identifier: str [117838,117841]",
      "dest": "identifier: str [119332,119335]"
    },
    {
      "src": "argument_list [165605,165618]",
      "dest": "argument_list [167099,167112]"
    },
    {
      "src": "arithmetic_operator: - [78639,78640]",
      "dest": "arithmetic_operator: - [80133,80134]"
    },
    {
      "src": "identifier: cs [63949,63951]",
      "dest": "identifier: cs [64996,64998]"
    },
    {
      "src": "identifier: startIndex [131227,131237]",
      "dest": "identifier: startIndex [132721,132731]"
    },
    {
      "src": "identifier: start [73588,73593]",
      "dest": "identifier: start [75082,75087]"
    },
    {
      "src": "affectation_operator: = [175176,175177]",
      "dest": "affectation_operator: = [176670,176671]"
    },
    {
      "src": "identifier: suffix [244417,244423]",
      "dest": "identifier: suffix [245911,245917]"
    },
    {
      "src": "block [169958,169993]",
      "dest": "block [171452,171487]"
    },
    {
      "src": "identifier: max [117229,117232]",
      "dest": "identifier: max [118723,118726]"
    },
    {
      "src": "return_statement [175712,175734]",
      "dest": "return_statement [177206,177228]"
    },
    {
      "src": "formal_parameter [183031,183039]",
      "dest": "formal_parameter [184525,184533]"
    },
    {
      "src": "type: StringBuilder [198320,198333]",
      "dest": "type: StringBuilder [199814,199827]"
    },
    {
      "src": "affectation_operator: = [131075,131076]",
      "dest": "affectation_operator: = [132569,132570]"
    },
    {
      "src": "binary_expression [31876,31893]",
      "dest": "binary_expression [31876,31893]"
    },
    {
      "src": "block [66793,67003]",
      "dest": "block [68353,68479]"
    },
    {
      "src": "method_invocation [170338,170361]",
      "dest": "method_invocation [171832,171855]"
    },
    {
      "src": "comparison_operator: < [227652,227653]",
      "dest": "comparison_operator: < [229146,229147]"
    },
    {
      "src": "method_invocation [180059,180071]",
      "dest": "method_invocation [181553,181565]"
    },
    {
      "src": "argument_list [65287,65317]",
      "dest": "argument_list [66334,66364]"
    },
    {
      "src": "modifiers [205633,205646]",
      "dest": "modifiers [207127,207140]"
    },
    {
      "src": "identifier: equals [104386,104392]",
      "dest": "identifier: equals [105880,105886]"
    },
    {
      "src": "dimensions_expr [182065,182071]",
      "dest": "dimensions_expr [183559,183565]"
    },
    {
      "src": "identifier: replaceEach [162503,162514]",
      "dest": "identifier: replaceEach [163997,164008]"
    },
    {
      "src": "identifier: buf [150701,150704]",
      "dest": "identifier: buf [152195,152198]"
    },
    {
      "src": "modifiers [43302,43315]",
      "dest": "modifiers [43302,43315]"
    },
    {
      "src": "expression_statement [117940,117957]",
      "dest": "expression_statement [119434,119451]"
    },
    {
      "src": "null_literal: null [198211,198215]",
      "dest": "null_literal: null [199705,199709]"
    },
    {
      "src": "static: static [141594,141600]",
      "dest": "static: static [143088,143094]"
    },
    {
      "src": "block [83290,83327]",
      "dest": "block [84784,84821]"
    },
    {
      "src": "variable_declarator [170045,170063]",
      "dest": "variable_declarator [171539,171557]"
    },
    {
      "src": "method_invocation [49574,49586]",
      "dest": "method_invocation [49574,49586]"
    },
    {
      "src": "binary_expression [160500,160551]",
      "dest": "binary_expression [161994,162045]"
    },
    {
      "src": "method_invocation [138867,138882]",
      "dest": "method_invocation [140361,140376]"
    },
    {
      "src": "identifier: indexOfDifference [227116,227133]",
      "dest": "identifier: indexOfDifference [228610,228627]"
    },
    {
      "src": "identifier: j [61131,61132]",
      "dest": "identifier: j [61590,61591]"
    },
    {
      "src": "identifier: count [200030,200035]",
      "dest": "identifier: count [201524,201529]"
    },
    {
      "src": "binary_expression [155277,155295]",
      "dest": "binary_expression [156771,156789]"
    },
    {
      "src": "return_statement [210211,210224]",
      "dest": "return_statement [211705,211718]"
    },
    {
      "src": "identifier: array [128053,128058]",
      "dest": "identifier: array [129547,129552]"
    },
    {
      "src": "binary_expression [158474,158525]",
      "dest": "binary_expression [159968,160019]"
    },
    {
      "src": "type: RuntimeException [25729,25745]",
      "dest": "type: RuntimeException [25729,25745]"
    },
    {
      "src": "identifier: str [17191,17194]",
      "dest": "identifier: str [17191,17194]"
    },
    {
      "src": "parenthesized_expression [196764,196786]",
      "dest": "parenthesized_expression [198258,198280]"
    },
    {
      "src": "method_declaration [212118,212214]",
      "dest": "method_declaration [213612,213708]"
    },
    {
      "src": "argument_list [162514,162575]",
      "dest": "argument_list [164008,164069]"
    },
    {
      "src": "visibility: public [42205,42211]",
      "dest": "visibility: public [42205,42211]"
    },
    {
      "src": "string_fragment: java.text.Normalizer$Form [24322,24347]",
      "dest": "string_fragment: java.text.Normalizer$Form [24322,24347]"
    },
    {
      "src": "comparison_operator: < [173093,173094]",
      "dest": "comparison_operator: < [174587,174588]"
    },
    {
      "src": "identifier: cs [203282,203284]",
      "dest": "identifier: cs [204776,204778]"
    },
    {
      "src": "if_statement [231111,231186]",
      "dest": "if_statement [232605,232680]"
    },
    {
      "src": "identifier: indexOfAnyBut [62278,62291]",
      "dest": "identifier: indexOfAnyBut [63017,63030]"
    },
    {
      "src": "identifier: searchChars [56059,56070]",
      "dest": "identifier: searchChars [56405,56416]"
    },
    {
      "src": "if_statement [141655,141727]",
      "dest": "if_statement [143149,143221]"
    },
    {
      "src": "array_access [160651,160664]",
      "dest": "array_access [162145,162158]"
    },
    {
      "src": "argument_list [222084,222086]",
      "dest": "argument_list [223578,223580]"
    },
    {
      "src": "parenthesized_expression [86498,86568]",
      "dest": "parenthesized_expression [87992,88062]"
    },
    {
      "src": "identifier: replaceIndex [159944,159956]",
      "dest": "identifier: replaceIndex [161438,161450]"
    },
    {
      "src": "identifier: isBlank [9640,9647]",
      "dest": "identifier: isBlank [9640,9647]"
    },
    {
      "src": "identifier: searchLength [158721,158733]",
      "dest": "identifier: searchLength [160215,160227]"
    },
    {
      "src": "return_statement [89549,89561]",
      "dest": "return_statement [91043,91055]"
    },
    {
      "src": "decimal_integer_literal: 1 [92841,92842]",
      "dest": "decimal_integer_literal: 1 [94335,94336]"
    },
    {
      "src": "if_statement [104171,104224]",
      "dest": "if_statement [105665,105718]"
    },
    {
      "src": "identifier: lastIndexOfIgnoreCase [49327,49348]",
      "dest": "identifier: lastIndexOfIgnoreCase [49327,49348]"
    },
    {
      "src": "identifier: i [225174,225175]",
      "dest": "identifier: i [226668,226669]"
    },
    {
      "src": "return_statement [201113,201125]",
      "dest": "return_statement [202607,202619]"
    },
    {
      "src": "binary_expression [210289,210295]",
      "dest": "binary_expression [211783,211789]"
    },
    {
      "src": "comparison_operator: == [132436,132438]",
      "dest": "comparison_operator: == [133930,133932]"
    },
    {
      "src": "line_comment: // ----------------------------------------------------------------------- [106453,106527]",
      "dest": "line_comment: // ----------------------------------------------------------------------- [107947,108021]"
    },
    {
      "src": "identifier: strLen [195657,195663]",
      "dest": "identifier: strLen [197151,197157]"
    },
    {
      "src": "update_expression [198401,198404]",
      "dest": "update_expression [199895,199898]"
    },
    {
      "src": "binary_expression [227168,227179]",
      "dest": "binary_expression [228662,228673]"
    },
    {
      "src": "assignment_expression [161208,161261]",
      "dest": "assignment_expression [162702,162755]"
    },
    {
      "src": "parenthesized_expression [72206,72217]",
      "dest": "parenthesized_expression [73700,73711]"
    },
    {
      "src": "identifier: allStringsNull [227303,227317]",
      "dest": "identifier: allStringsNull [228797,228811]"
    },
    {
      "src": "identifier: end [104839,104842]",
      "dest": "identifier: end [106333,106336]"
    },
    {
      "src": "return_statement [134000,134013]",
      "dest": "return_statement [135494,135507]"
    },
    {
      "src": "argument_list [208151,208153]",
      "dest": "argument_list [209645,209647]"
    },
    {
      "src": "block_comment:     \n     * Performs the logic for the <code>split</code> and \n     * <code>splitPreserveAllTokens</code> methods that do not return a\n     * maximum array length.\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChar the separate character\n     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n     * treated as empty token separators; if <code>false</code>, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [109737,110312]",
      "dest": "block_comment:     \n     * Performs the logic for the <code>split</code> and \n     * <code>splitPreserveAllTokens</code> methods that do not return a\n     * maximum array length.\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChar the separate character\n     * @param preserveAllTokens if <code>true</code>, adjacent separators are\n     * treated as empty token separators; if <code>false</code>, adjacent\n     * separators are treated as one separator.\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [111231,111806]"
    },
    {
      "src": "block [231375,231420]",
      "dest": "block [232869,232914]"
    },
    {
      "src": "identifier: sz [205811,205813]",
      "dest": "identifier: sz [207305,207307]"
    },
    {
      "src": "method_invocation [49875,49893]",
      "dest": "method_invocation [49875,49893]"
    },
    {
      "src": "affectation_operator: = [195557,195558]",
      "dest": "affectation_operator: = [197051,197052]"
    },
    {
      "src": "decimal_integer_literal: 0 [8751,8752]",
      "dest": "decimal_integer_literal: 0 [8751,8752]"
    },
    {
      "src": "if_statement [57399,57488]",
      "dest": "if_statement [57739,57828]"
    },
    {
      "src": "comparison_operator: == [77288,77290]",
      "dest": "comparison_operator: == [78782,78784]"
    },
    {
      "src": "\": \" [26305,26306]",
      "dest": "\": \" [26305,26306]"
    },
    {
      "src": "method_invocation [49705,49723]",
      "dest": "method_invocation [49705,49723]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [168764,168837]",
      "dest": "line_comment: //----------------------------------------------------------------------- [170258,170331]"
    },
    {
      "src": "block [104949,105067]",
      "dest": "block [106443,106561]"
    },
    {
      "src": "method_invocation [196957,196993]",
      "dest": "method_invocation [198451,198487]"
    },
    {
      "src": "parenthesized_expression [91170,91197]",
      "dest": "parenthesized_expression [92664,92691]"
    },
    {
      "src": "formal_parameter [14710,14720]",
      "dest": "formal_parameter [14710,14720]"
    },
    {
      "src": "parenthesized_expression [111224,111267]",
      "dest": "parenthesized_expression [112718,112761]"
    },
    {
      "src": "identifier: csLen [61038,61043]",
      "dest": "identifier: csLen [61497,61502]"
    },
    {
      "src": "variable_declarator [162402,162425]",
      "dest": "variable_declarator [163896,163919]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [137479,137552]",
      "dest": "line_comment: //----------------------------------------------------------------------- [138973,139046]"
    },
    {
      "src": "static: static [186599,186605]",
      "dest": "static: static [188093,188099]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [81697,81712]",
      "dest": "identifier: INDEX_NOT_FOUND [83191,83206]"
    },
    {
      "src": "identifier: str [190470,190473]",
      "dest": "identifier: str [191964,191967]"
    },
    {
      "src": "if_statement [75703,75793]",
      "dest": "if_statement [77197,77287]"
    },
    {
      "src": "expression_statement [106288,106323]",
      "dest": "expression_statement [107782,107817]"
    },
    {
      "src": "binary_expression [91524,91538]",
      "dest": "binary_expression [93018,93032]"
    },
    {
      "src": "method_invocation [225259,225272]",
      "dest": "method_invocation [226753,226766]"
    },
    {
      "src": "argument_list [63958,63960]",
      "dest": "argument_list [65005,65007]"
    },
    {
      "src": "block [144564,144700]",
      "dest": "block [146058,146194]"
    },
    {
      "src": "parenthesized_expression [171834,171859]",
      "dest": "parenthesized_expression [173328,173353]"
    },
    {
      "src": "identifier: searchStr [51975,51984]",
      "dest": "identifier: searchStr [51975,51984]"
    },
    {
      "src": "identifier: overlay [168663,168670]",
      "dest": "identifier: overlay [170157,170164]"
    },
    {
      "src": "if_statement [137359,137411]",
      "dest": "if_statement [138853,138905]"
    },
    {
      "src": "return_statement [138846,138884]",
      "dest": "return_statement [140340,140378]"
    },
    {
      "src": "method_invocation [136289,136325]",
      "dest": "method_invocation [137783,137819]"
    },
    {
      "src": "identifier: length [75740,75746]",
      "dest": "identifier: length [77234,77240]"
    },
    {
      "src": "parenthesized_expression [168306,168315]",
      "dest": "parenthesized_expression [169800,169809]"
    },
    {
      "src": "affectation_operator: = [165761,165762]",
      "dest": "affectation_operator: = [167255,167256]"
    },
    {
      "src": "argument_list [123824,123879]",
      "dest": "argument_list [125318,125373]"
    },
    {
      "src": "identifier: cs2 [225019,225022]",
      "dest": "identifier: cs2 [226513,226516]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if a CharSequence is empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isEmpty(null)      = true\n     * StringUtils.isEmpty(\"\")        = true\n     * StringUtils.isEmpty(\" \")       = false\n     * StringUtils.isEmpty(\"bob\")     = false\n     * StringUtils.isEmpty(\"  bob  \") = false\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer trims the CharSequence.\n     * That functionality is available in isBlank().</p>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if the CharSequence is empty or null\n     */ [6759,7393]",
      "dest": "block_comment:     \n     * <p>Checks if a CharSequence is empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isEmpty(null)      = true\n     * StringUtils.isEmpty(\"\")        = true\n     * StringUtils.isEmpty(\" \")       = false\n     * StringUtils.isEmpty(\"bob\")     = false\n     * StringUtils.isEmpty(\"  bob  \") = false\n     * </pre>\n     *\n     * <p>NOTE: This method changed in Lang version 2.0.\n     * It no longer trims the CharSequence.\n     * That functionality is available in isBlank().</p>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if the CharSequence is empty or null\n     */ [6759,7393]"
    },
    {
      "src": "identifier: validChars [65292,65302]",
      "dest": "identifier: validChars [66339,66349]"
    },
    {
      "src": "identifier: toCharArray [182110,182121]",
      "dest": "identifier: toCharArray [183604,183615]"
    },
    {
      "src": "line_comment: // handle lists containing all nulls or all empty strings [228023,228080]",
      "dest": "line_comment: // handle lists containing all nulls or all empty strings [229517,229574]"
    },
    {
      "src": "identifier: searchString [150661,150673]",
      "dest": "identifier: searchString [152155,152167]"
    },
    {
      "src": "identifier: maxWidth [219765,219773]",
      "dest": "identifier: maxWidth [221259,221267]"
    },
    {
      "src": "parenthesized_expression [204419,204496]",
      "dest": "parenthesized_expression [205913,205990]"
    },
    {
      "src": "local_variable_declaration [196740,196751]",
      "dest": "local_variable_declaration [198234,198245]"
    },
    {
      "src": "identifier: index [36562,36567]",
      "dest": "identifier: index [36562,36567]"
    },
    {
      "src": "arithmetic_operator: - [236018,236019]",
      "dest": "arithmetic_operator: - [237512,237513]"
    },
    {
      "src": "static: static [62267,62273]",
      "dest": "static: static [63006,63012]"
    },
    {
      "src": "identifier: index [36640,36645]",
      "dest": "identifier: index [36640,36645]"
    },
    {
      "src": "array_access [161603,161616]",
      "dest": "array_access [163097,163110]"
    },
    {
      "src": "identifier: searchList [159441,159451]",
      "dest": "identifier: searchList [160935,160945]"
    },
    {
      "src": "assignment_expression [119069,119081]",
      "dest": "assignment_expression [120563,120575]"
    },
    {
      "src": "formal_parameter [101266,101282]",
      "dest": "formal_parameter [102760,102776]"
    },
    {
      "src": "parenthesized_expression [62337,62375]",
      "dest": "parenthesized_expression [63076,63114]"
    },
    {
      "src": "local_variable_declaration [71979,71991]",
      "dest": "local_variable_declaration [73473,73485]"
    },
    {
      "src": "argument_list [84699,84704]",
      "dest": "argument_list [86193,86198]"
    },
    {
      "src": "identifier: length [64022,64028]",
      "dest": "identifier: length [65069,65075]"
    },
    {
      "src": "type: int [89273,89276]",
      "dest": "type: int [90767,90770]"
    },
    {
      "src": "null_literal: null [69792,69796]",
      "dest": "null_literal: null [71286,71290]"
    },
    {
      "src": "identifier: str [143270,143273]",
      "dest": "identifier: str [144764,144767]"
    },
    {
      "src": "return_statement [36725,36738]",
      "dest": "return_statement [36725,36738]"
    },
    {
      "src": "method_invocation [57512,57523]",
      "dest": "method_invocation [57852,57863]"
    },
    {
      "src": "if_statement [117882,118237]",
      "dest": "if_statement [119376,119731]"
    },
    {
      "src": "binary_expression [174590,174621]",
      "dest": "binary_expression [176084,176115]"
    },
    {
      "src": "identifier: j [235797,235798]",
      "dest": "identifier: j [237291,237292]"
    },
    {
      "src": "comparison_operator: < [228617,228618]",
      "dest": "comparison_operator: < [230111,230112]"
    },
    {
      "src": "continue: continue [159573,159581]",
      "dest": "continue: continue [161067,161075]"
    },
    {
      "src": "expression_statement [117486,117498]",
      "dest": "expression_statement [118980,118992]"
    },
    {
      "src": "identifier: start [18684,18689]",
      "dest": "identifier: start [18684,18689]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the last index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *, *)          = -1\n     * StringUtils.lastIndexOf(\"\", *,  *)           = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 4)  = 2\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 0)  = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1) = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0)  = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position\n     * @return the last index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [41021,42200]",
      "dest": "block_comment:     \n     * <p>Finds the last index within a String from a start position,\n     * handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(int, int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *, *)          = -1\n     * StringUtils.lastIndexOf(\"\", *,  *)           = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 8)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 4)  = 2\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 0)  = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', 9)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b', -1) = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'a', 0)  = 0\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @param startPos  the start position\n     * @return the last index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [41021,42200]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, separator string specified. </p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *)               = null\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"\", *)                 = []\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab de fg\", null)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab   de fg\", null)    = [\"ab\", \"\", \"\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab:cd:ef\", \":\")       = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab-!-cd-!-ef\", \"-!-\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     * @since 2.4\n     */ [99819,101187]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, separator string specified. </p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *)               = null\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"\", *)                 = []\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab de fg\", null)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab   de fg\", null)    = [\"ab\", \"\", \"\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab:cd:ef\", \":\")       = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab-!-cd-!-ef\", \"-!-\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     * @since 2.4\n     */ [101313,102681]"
    },
    {
      "src": "binary_expression [150545,150561]",
      "dest": "binary_expression [152039,152055]"
    },
    {
      "src": "identifier: open [89197,89201]",
      "dest": "identifier: open [90691,90695]"
    },
    {
      "src": "identifier: length [39728,39734]",
      "dest": "identifier: length [39728,39734]"
    },
    {
      "src": "identifier: tmp [235452,235455]",
      "dest": "identifier: tmp [236946,236949]"
    },
    {
      "src": "block [90944,91005]",
      "dest": "block [92438,92499]"
    },
    {
      "src": "decimal_integer_literal: 0 [195575,195576]",
      "dest": "decimal_integer_literal: 0 [197069,197070]"
    },
    {
      "src": "argument_list [91377,91391]",
      "dest": "argument_list [92871,92885]"
    },
    {
      "src": "type: int [78396,78399]",
      "dest": "type: int [79890,79893]"
    },
    {
      "src": "identifier: rightPad [179070,179078]",
      "dest": "identifier: rightPad [180564,180572]"
    },
    {
      "src": "expression_statement [106119,106147]",
      "dest": "expression_statement [107613,107641]"
    },
    {
      "src": "method_invocation [36275,36287]",
      "dest": "method_invocation [36275,36287]"
    },
    {
      "src": "method_invocation [111366,111377]",
      "dest": "method_invocation [112860,112871]"
    },
    {
      "src": "identifier: concat [182258,182264]",
      "dest": "identifier: concat [183752,183758]"
    },
    {
      "src": "identifier: searchChars [66771,66782]",
      "dest": "identifier: searchChars [67890,67901]"
    },
    {
      "src": "local_variable_declaration [123224,123253]",
      "dest": "local_variable_declaration [124718,124747]"
    },
    {
      "src": "comparison_operator: < [209246,209247]",
      "dest": "comparison_operator: < [210740,210741]"
    },
    {
      "src": "block [36157,36204]",
      "dest": "block [36157,36204]"
    },
    {
      "src": "local_variable_declaration [175537,175589]",
      "dest": "local_variable_declaration [177031,177083]"
    },
    {
      "src": "type: int [222186,222189]",
      "dest": "type: int [223680,223683]"
    },
    {
      "src": "update_expression [54724,54727]",
      "dest": "update_expression [58028,58031]"
    },
    {
      "src": "identifier: str [198204,198207]",
      "dest": "identifier: str [199698,199701]"
    },
    {
      "src": "argument_list [203197,203199]",
      "dest": "argument_list [204691,204693]"
    },
    {
      "src": "type: boolean [110385,110392]",
      "dest": "type: boolean [111879,111886]"
    },
    {
      "src": "block [47834,47881]",
      "dest": "block [47834,47881]"
    },
    {
      "src": "identifier: text [149870,149874]",
      "dest": "identifier: text [151364,151368]"
    },
    {
      "src": "parenthesized_expression [179982,179995]",
      "dest": "parenthesized_expression [181476,181489]"
    },
    {
      "src": "update_expression [210297,210300]",
      "dest": "update_expression [211791,211794]"
    },
    {
      "src": "type: String[] [103064,103072]",
      "dest": "type: String[] [104558,104566]"
    },
    {
      "src": "binary_expression [49513,49546]",
      "dest": "binary_expression [49513,49546]"
    },
    {
      "src": "return_statement [138903,138914]",
      "dest": "return_statement [140397,140408]"
    },
    {
      "src": "block [235323,235513]",
      "dest": "block [236817,237007]"
    },
    {
      "src": "arithmetic_operator: - [159158,159159]",
      "dest": "arithmetic_operator: - [160652,160653]"
    },
    {
      "src": "identifier: cs [66474,66476]",
      "dest": "identifier: cs [67521,67523]"
    },
    {
      "src": "local_variable_declaration [181570,181596]",
      "dest": "local_variable_declaration [183064,183090]"
    },
    {
      "src": "decimal_integer_literal: 1 [235974,235975]",
      "dest": "decimal_integer_literal: 1 [237468,237469]"
    },
    {
      "src": "binary_expression [228608,228627]",
      "dest": "binary_expression [230102,230121]"
    },
    {
      "src": "expression_statement [236002,236022]",
      "dest": "expression_statement [237496,237516]"
    },
    {
      "src": "formal_parameter [65138,65153]",
      "dest": "formal_parameter [66185,66200]"
    },
    {
      "src": "parenthesized_expression [104921,104948]",
      "dest": "parenthesized_expression [106415,106442]"
    },
    {
      "src": "if_statement [221943,222015]",
      "dest": "if_statement [223437,223509]"
    },
    {
      "src": "identifier: str [194595,194598]",
      "dest": "identifier: str [196089,196092]"
    },
    {
      "src": "return_statement [39672,39695]",
      "dest": "return_statement [39672,39695]"
    },
    {
      "src": "variable_declarator [160941,160990]",
      "dest": "variable_declarator [162435,162484]"
    },
    {
      "src": "identifier: buf [131619,131622]",
      "dest": "identifier: buf [133113,133116]"
    },
    {
      "src": "false: false [63920,63925]",
      "dest": "false: false [64967,64972]"
    },
    {
      "src": "decimal_integer_literal: 0 [150588,150589]",
      "dest": "decimal_integer_literal: 0 [152082,152083]"
    },
    {
      "src": "if_statement [36103,36204]",
      "dest": "if_statement [36103,36204]"
    },
    {
      "src": "affectation_operator: = [222324,222325]",
      "dest": "affectation_operator: = [223818,223819]"
    },
    {
      "src": "affectation_operator: = [235941,235942]",
      "dest": "affectation_operator: = [237435,237436]"
    },
    {
      "src": "decimal_integer_literal: 0 [235266,235267]",
      "dest": "decimal_integer_literal: 0 [236760,236761]"
    },
    {
      "src": "block [178226,178267]",
      "dest": "block [179720,179761]"
    },
    {
      "src": "local_variable_declaration [186011,186050]",
      "dest": "local_variable_declaration [187505,187544]"
    },
    {
      "src": "method_invocation [134118,134145]",
      "dest": "method_invocation [135612,135639]"
    },
    {
      "src": "null_literal: null [14743,14747]",
      "dest": "null_literal: null [14743,14747]"
    },
    {
      "src": "type: String [86277,86283]",
      "dest": "type: String [87771,87777]"
    },
    {
      "src": "identifier: ch [66682,66684]",
      "dest": "identifier: ch [67801,67803]"
    },
    {
      "src": "modifiers [69687,69700]",
      "dest": "modifiers [71181,71194]"
    },
    {
      "src": "increment_operator: ++ [165962,165964]",
      "dest": "increment_operator: ++ [167456,167458]"
    },
    {
      "src": "identifier: separator [127474,127483]",
      "dest": "identifier: separator [128968,128977]"
    },
    {
      "src": "visibility: public [196617,196623]",
      "dest": "visibility: public [198111,198117]"
    },
    {
      "src": "identifier: i [227643,227644]",
      "dest": "identifier: i [229137,229138]"
    },
    {
      "src": "decimal_integer_literal: 1 [20579,20580]",
      "dest": "decimal_integer_literal: 1 [20579,20580]"
    },
    {
      "src": "method_invocation [143385,143416]",
      "dest": "method_invocation [144879,144910]"
    },
    {
      "src": "block [12654,12710]",
      "dest": "block [12654,12710]"
    },
    {
      "src": "identifier: d [236429,236430]",
      "dest": "identifier: d [237923,237924]"
    },
    {
      "src": "if_statement [131518,131593]",
      "dest": "if_statement [133012,133087]"
    },
    {
      "src": "decimal_integer_literal: 0 [168220,168221]",
      "dest": "decimal_integer_literal: 0 [169714,169715]"
    },
    {
      "src": "return_statement [149951,149963]",
      "dest": "return_statement [151445,151457]"
    },
    {
      "src": "identifier: cs [57717,57719]",
      "dest": "identifier: cs [54825,54827]"
    },
    {
      "src": "increment_operator: ++ [204398,204400]",
      "dest": "increment_operator: ++ [205892,205894]"
    },
    {
      "src": "affectation_operator: = [20211,20212]",
      "dest": "affectation_operator: = [20211,20212]"
    },
    {
      "src": "increment_operator: ++ [236075,236077]",
      "dest": "increment_operator: ++ [237569,237571]"
    },
    {
      "src": "return_statement [78504,78517]",
      "dest": "return_statement [79998,80011]"
    },
    {
      "src": "expression_statement [168386,168396]",
      "dest": "expression_statement [169880,169890]"
    },
    {
      "src": "identifier: str [239803,239806]",
      "dest": "identifier: str [241297,241300]"
    },
    {
      "src": "new: new [150367,150370]",
      "dest": "new: new [151861,151864]"
    },
    {
      "src": "formal_parameters [152583,152643]",
      "dest": "formal_parameters [154077,154137]"
    },
    {
      "src": "array_creation_expression [235603,235615]",
      "dest": "array_creation_expression [237097,237109]"
    },
    {
      "src": "identifier: i [72016,72017]",
      "dest": "identifier: i [73510,73511]"
    },
    {
      "src": "line_comment: // Nested extraction [91682,91702]",
      "dest": "line_comment: // Nested extraction [93176,93196]"
    },
    {
      "src": "block [193726,193762]",
      "dest": "block [195220,195256]"
    },
    {
      "src": "identifier: i [206970,206971]",
      "dest": "identifier: i [208464,208465]"
    },
    {
      "src": "variable_declarator [162303,162312]",
      "dest": "variable_declarator [163797,163806]"
    },
    {
      "src": "affectation_operator: = [204384,204385]",
      "dest": "affectation_operator: = [205878,205879]"
    },
    {
      "src": "identifier: str [36358,36361]",
      "dest": "identifier: str [36358,36361]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *, *)            = null\n     * StringUtils.split(\"\", *, *)              = []\n     * StringUtils.split(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [95268,96698]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array with a maximum length,\n     * separators specified.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <p>If more than <code>max</code> delimited substrings are found, the last\n     * returned string includes all characters after the first <code>max - 1</code>\n     * returned strings (including separator characters).</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *, *)            = null\n     * StringUtils.split(\"\", *, *)              = []\n     * StringUtils.split(\"ab de fg\", null, 0)   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab   de fg\", null, 0) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 0)    = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.split(\"ab:cd:ef\", \":\", 2)    = [\"ab\", \"cd:ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the\n     *  array. A zero or negative value implies no limit\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [96762,98192]"
    },
    {
      "src": "line_comment: //'previous' cost array, horizontally [235547,235584]",
      "dest": "line_comment: //'previous' cost array, horizontally [237041,237078]"
    },
    {
      "src": "parenthesized_expression [36216,36241]",
      "dest": "parenthesized_expression [36216,36241]"
    },
    {
      "src": "identifier: split [92823,92828]",
      "dest": "identifier: split [94317,94322]"
    },
    {
      "src": "line_comment: // Character.isWhitespace() is faster than WHITESPACE.indexOf() [5330,5393]",
      "dest": "line_comment: // Character.isWhitespace() is faster than WHITESPACE.indexOf() [5330,5393]"
    },
    {
      "src": "field_access [231131,231142]",
      "dest": "field_access [232625,232636]"
    },
    {
      "src": "comparison_operator: == [212186,212188]",
      "dest": "comparison_operator: == [213680,213682]"
    },
    {
      "src": "binary_expression [194530,194541]",
      "dest": "binary_expression [196024,196035]"
    },
    {
      "src": "argument_list [220316,220318]",
      "dest": "argument_list [221810,221812]"
    },
    {
      "src": "identifier: lastMatch [118073,118082]",
      "dest": "identifier: lastMatch [119567,119576]"
    },
    {
      "src": "parenthesized_expression [228912,228964]",
      "dest": "parenthesized_expression [230406,230458]"
    },
    {
      "src": "parenthesized_expression [220137,220151]",
      "dest": "parenthesized_expression [221631,221645]"
    },
    {
      "src": "identifier: substring [222466,222475]",
      "dest": "identifier: substring [223960,223969]"
    },
    {
      "src": "type: CharSequence [24634,24646]",
      "dest": "type: CharSequence [24634,24646]"
    },
    {
      "src": "method_invocation [92823,92843]",
      "dest": "method_invocation [94317,94337]"
    },
    {
      "src": "comparison_operator: == [225103,225105]",
      "dest": "comparison_operator: == [226597,226599]"
    },
    {
      "src": "for_statement [209228,209379]",
      "dest": "for_statement [210722,210873]"
    },
    {
      "src": "identifier: cs [201025,201027]",
      "dest": "identifier: cs [202519,202521]"
    },
    {
      "src": "if_statement [110826,111128]",
      "dest": "if_statement [112320,112622]"
    },
    {
      "src": "if_statement [192711,192764]",
      "dest": "if_statement [194205,194258]"
    },
    {
      "src": "visibility: public [8630,8636]",
      "dest": "visibility: public [8630,8636]"
    },
    {
      "src": "visibility: public [17061,17067]",
      "dest": "visibility: public [17061,17067]"
    },
    {
      "src": "increment_operator: ++ [186090,186092]",
      "dest": "increment_operator: ++ [187584,187586]"
    },
    {
      "src": "identifier: start [150537,150542]",
      "dest": "identifier: start [152031,152036]"
    },
    {
      "src": "method_invocation [30744,30756]",
      "dest": "method_invocation [30744,30756]"
    },
    {
      "src": "\": \" [26251,26252]",
      "dest": "\": \" [26251,26252]"
    },
    {
      "src": "identifier: i [161614,161615]",
      "dest": "identifier: i [163108,163109]"
    },
    {
      "src": "comparison_operator: == [168027,168029]",
      "dest": "comparison_operator: == [169521,169523]"
    },
    {
      "src": "identifier: searchLen [61120,61129]",
      "dest": "identifier: searchLen [61579,61588]"
    },
    {
      "src": "if_statement [166066,166311]",
      "dest": "if_statement [167560,167805]"
    },
    {
      "src": "identifier: i [182194,182195]",
      "dest": "identifier: i [183688,183689]"
    },
    {
      "src": "identifier: cs [204447,204449]",
      "dest": "identifier: cs [205941,205943]"
    },
    {
      "src": "variable_declarator [162258,162284]",
      "dest": "variable_declarator [163752,163778]"
    },
    {
      "src": "identifier: length [86652,86658]",
      "dest": "identifier: length [88146,88152]"
    },
    {
      "src": "affectation_operator: = [127818,127819]",
      "dest": "affectation_operator: = [129312,129313]"
    },
    {
      "src": "binary_expression [170349,170360]",
      "dest": "binary_expression [171843,171854]"
    },
    {
      "src": "return_statement [238115,238153]",
      "dest": "return_statement [239609,239647]"
    },
    {
      "src": "comparison_operator: < [117809,117810]",
      "dest": "comparison_operator: < [119303,119304]"
    },
    {
      "src": "identifier: sz [71912,71914]",
      "dest": "identifier: sz [73406,73408]"
    },
    {
      "src": "modifiers [65103,65116]",
      "dest": "modifiers [66150,66163]"
    },
    {
      "src": "identifier: valueOf [180251,180258]",
      "dest": "identifier: valueOf [181745,181752]"
    },
    {
      "src": "argument_list [140318,140326]",
      "dest": "argument_list [141812,141820]"
    },
    {
      "src": "argument_list [215751,215757]",
      "dest": "argument_list [217245,217251]"
    },
    {
      "src": "identifier: str [40981,40984]",
      "dest": "identifier: str [40981,40984]"
    },
    {
      "src": "formal_parameter [219371,219383]",
      "dest": "formal_parameter [220865,220877]"
    },
    {
      "src": "block [174623,174658]",
      "dest": "block [176117,176152]"
    },
    {
      "src": "formal_parameter [89129,89139]",
      "dest": "formal_parameter [90623,90633]"
    },
    {
      "src": "field_access [66603,66621]",
      "dest": "field_access [67682,67700]"
    },
    {
      "src": "local_variable_declaration [24738,24804]",
      "dest": "local_variable_declaration [24738,24804]"
    },
    {
      "src": "identifier: searchChars [59521,59532]",
      "dest": "identifier: searchChars [59908,59919]"
    },
    {
      "src": "string_fragment: java.text.Normalizer [24462,24482]",
      "dest": "string_fragment: java.text.Normalizer [24462,24482]"
    },
    {
      "src": "block [132919,133085]",
      "dest": "block [134413,134579]"
    },
    {
      "src": "affectation_operator: = [236446,236447]",
      "dest": "affectation_operator: = [237940,237941]"
    },
    {
      "src": "identifier: searchStr [51891,51900]",
      "dest": "identifier: searchStr [51891,51900]"
    },
    {
      "src": "method_invocation [86383,86401]",
      "dest": "method_invocation [87877,87895]"
    },
    {
      "src": "static: static [138661,138667]",
      "dest": "static: static [140155,140161]"
    },
    {
      "src": "binary_expression [150249,150261]",
      "dest": "binary_expression [151743,151755]"
    },
    {
      "src": "decimal_integer_literal: 0 [198246,198247]",
      "dest": "decimal_integer_literal: 0 [199740,199741]"
    },
    {
      "src": "identifier: sz [204347,204349]",
      "dest": "identifier: sz [205841,205843]"
    },
    {
      "src": "method_invocation [43473,43499]",
      "dest": "method_invocation [43473,43499]"
    },
    {
      "src": "type: CharSequence [209109,209121]",
      "dest": "type: CharSequence [210603,210615]"
    },
    {
      "src": "method_invocation [219702,219714]",
      "dest": "method_invocation [221196,221208]"
    },
    {
      "src": "method_invocation [118515,118552]",
      "dest": "method_invocation [120009,120046]"
    },
    {
      "src": "local_variable_declaration [131063,131101]",
      "dest": "local_variable_declaration [132557,132595]"
    },
    {
      "src": "method_invocation [18650,18691]",
      "dest": "method_invocation [18650,18691]"
    },
    {
      "src": "binary_expression [70369,70393]",
      "dest": "binary_expression [71863,71887]"
    },
    {
      "src": "type: String [53003,53009]",
      "dest": "type: String [53003,53009]"
    },
    {
      "src": "return_statement [126204,126251]",
      "dest": "return_statement [127698,127745]"
    },
    {
      "src": "binary_expression [239803,239814]",
      "dest": "binary_expression [241297,241308]"
    },
    {
      "src": "type: String [43332,43338]",
      "dest": "type: String [43332,43338]"
    },
    {
      "src": "line_comment: // find the min and max string lengths; this avoids checking to make [227449,227517]",
      "dest": "line_comment: // find the min and max string lengths; this avoids checking to make [228943,229011]"
    },
    {
      "src": "binary_expression [104839,104848]",
      "dest": "binary_expression [106333,106342]"
    },
    {
      "src": "identifier: max [150581,150584]",
      "dest": "identifier: max [152075,152078]"
    },
    {
      "src": "comparison_operator: == [39737,39739]",
      "dest": "comparison_operator: == [39737,39739]"
    },
    {
      "src": "argument_list [128115,128117]",
      "dest": "argument_list [129609,129611]"
    },
    {
      "src": "type: String[] [93891,93899]",
      "dest": "type: String[] [95385,95393]"
    },
    {
      "src": "static: static [143229,143235]",
      "dest": "static: static [144723,144729]"
    },
    {
      "src": "local_variable_declaration [227369,227408]",
      "dest": "local_variable_declaration [228863,228902]"
    },
    {
      "src": "identifier: searchString [149805,149817]",
      "dest": "identifier: searchString [151299,151311]"
    },
    {
      "src": "block [18517,18552]",
      "dest": "block [18517,18552]"
    },
    {
      "src": "method_invocation [198706,198731]",
      "dest": "method_invocation [200200,200225]"
    },
    {
      "src": "parenthesized_expression [20439,20465]",
      "dest": "parenthesized_expression [20439,20465]"
    },
    {
      "src": "modifiers [133746,133759]",
      "dest": "modifiers [135240,135253]"
    },
    {
      "src": "type: String [187702,187708]",
      "dest": "type: String [189196,189202]"
    },
    {
      "src": "type: String [69716,69722]",
      "dest": "type: String [71210,71216]"
    },
    {
      "src": "binary_expression [69763,69774]",
      "dest": "binary_expression [71257,71268]"
    },
    {
      "src": "identifier: stripStart [18396,18406]",
      "dest": "identifier: stripStart [18396,18406]"
    },
    {
      "src": "identifier: text [150712,150716]",
      "dest": "identifier: text [152206,152210]"
    },
    {
      "src": "return_statement [110500,110512]",
      "dest": "return_statement [111994,112006]"
    },
    {
      "src": "identifier: pads [189039,189043]",
      "dest": "identifier: pads [190533,190537]"
    },
    {
      "src": "identifier: length [138874,138880]",
      "dest": "identifier: length [140368,140374]"
    },
    {
      "src": "block_comment:     \n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)            = -1\n     * StringUtils.indexOfAny(\"\", *)              = -1\n     * StringUtils.indexOfAny(*, null)            = -1\n     * StringUtils.indexOfAny(*, \"\")              = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"za\") = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"by\") = 3\n     * StringUtils.indexOfAny(\"aba\",\"z\")          = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */ [55039,55951]",
      "dest": "block_comment:     \n     * <p>Search a CharSequence to find the first index of any\n     * character in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A <code>null</code> search string will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAny(null, *)            = -1\n     * StringUtils.indexOfAny(\"\", *)              = -1\n     * StringUtils.indexOfAny(*, null)            = -1\n     * StringUtils.indexOfAny(*, \"\")              = -1\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"za\") = 0\n     * StringUtils.indexOfAny(\"zzabyycdxx\", \"by\") = 3\n     * StringUtils.indexOfAny(\"aba\",\"z\")          = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */ [55385,56297]"
    },
    {
      "src": "identifier: i [117849,117850]",
      "dest": "identifier: i [119343,119344]"
    },
    {
      "src": "if_statement [20187,20268]",
      "dest": "if_statement [20187,20268]"
    },
    {
      "src": "identifier: firstDiff [228736,228745]",
      "dest": "identifier: firstDiff [230230,230239]"
    },
    {
      "src": "false: false [96831,96836]",
      "dest": "false: false [98325,98330]"
    },
    {
      "src": "binary_expression [75616,75627]",
      "dest": "binary_expression [77110,77121]"
    },
    {
      "src": "identifier: str [78582,78585]",
      "dest": "identifier: str [80076,80079]"
    },
    {
      "src": "affectation_operator: = [162128,162129]",
      "dest": "affectation_operator: = [163622,163623]"
    },
    {
      "src": "formal_parameters [107738,107750]",
      "dest": "formal_parameters [109232,109244]"
    },
    {
      "src": "argument_list [117848,117851]",
      "dest": "argument_list [119342,119345]"
    },
    {
      "src": "parenthesized_expression [228833,228850]",
      "dest": "parenthesized_expression [230327,230344]"
    },
    {
      "src": "identifier: str [93967,93970]",
      "dest": "identifier: str [95461,95464]"
    },
    {
      "src": "identifier: length [20217,20223]",
      "dest": "identifier: length [20217,20223]"
    },
    {
      "src": "increment_operator: -- [49812,49814]",
      "dest": "increment_operator: -- [49812,49814]"
    },
    {
      "src": "method_invocation [145631,145648]",
      "dest": "method_invocation [147125,147142]"
    },
    {
      "src": "argument_list [198527,198531]",
      "dest": "argument_list [200021,200025]"
    },
    {
      "src": "identifier: str [193778,193781]",
      "dest": "identifier: str [195272,195275]"
    },
    {
      "src": "variable_declarator [174550,174576]",
      "dest": "variable_declarator [176044,176070]"
    },
    {
      "src": "method_invocation [196922,196934]",
      "dest": "method_invocation [198416,198428]"
    },
    {
      "src": "identifier: replacementList [160621,160636]",
      "dest": "identifier: replacementList [162115,162130]"
    },
    {
      "src": "identifier: length [36362,36368]",
      "dest": "identifier: length [36362,36368]"
    },
    {
      "src": "identifier: length [160640,160646]",
      "dest": "identifier: length [162134,162140]"
    },
    {
      "src": "modifiers [152551,152564]",
      "dest": "modifiers [154045,154058]"
    },
    {
      "src": "array_access [159441,159454]",
      "dest": "array_access [160935,160948]"
    },
    {
      "src": "type: String [193687,193693]",
      "dest": "type: String [195181,195187]"
    },
    {
      "src": "local_variable_declaration [235653,235662]",
      "dest": "local_variable_declaration [237147,237156]"
    },
    {
      "src": "method_invocation [180224,180268]",
      "dest": "method_invocation [181718,181762]"
    },
    {
      "src": "identifier: padStr [190596,190602]",
      "dest": "identifier: padStr [192090,192096]"
    },
    {
      "src": "block [214557,214680]",
      "dest": "block [216051,216174]"
    },
    {
      "src": "block [228965,229229]",
      "dest": "block [230459,230723]"
    },
    {
      "src": "type: boolean [57332,57339]",
      "dest": "type: boolean [57678,57685]"
    },
    {
      "src": "affectation_operator: = [57550,57551]",
      "dest": "affectation_operator: = [57890,57891]"
    },
    {
      "src": "block [13694,13734]",
      "dest": "block [13694,13734]"
    },
    {
      "src": "identifier: cs [196922,196924]",
      "dest": "identifier: cs [198416,198418]"
    },
    {
      "src": "formal_parameters [10649,10661]",
      "dest": "formal_parameters [10649,10661]"
    },
    {
      "src": "identifier: CharSequenceUtils [196957,196974]",
      "dest": "identifier: CharSequenceUtils [198451,198468]"
    },
    {
      "src": ":: : [11727,11728]",
      "dest": ":: : [11727,11728]"
    },
    {
      "src": "if_statement [209136,209189]",
      "dest": "if_statement [210630,210683]"
    },
    {
      "src": "identifier: replaceChars [165704,165716]",
      "dest": "identifier: replaceChars [167198,167210]"
    },
    {
      "src": "if_statement [104267,104342]",
      "dest": "if_statement [105761,105836]"
    },
    {
      "src": "identifier: smallestIndexOfDiff [231258,231277]",
      "dest": "identifier: smallestIndexOfDiff [232752,232771]"
    },
    {
      "src": "identifier: str [75616,75619]",
      "dest": "identifier: str [77110,77113]"
    },
    {
      "src": "string_fragment: IllegalArgumentException occurred during 1.6 backcompat code [25910,25970]",
      "dest": "string_fragment: IllegalArgumentException occurred during 1.6 backcompat code [25910,25970]"
    },
    {
      "src": "identifier: equals [27519,27525]",
      "dest": "identifier: equals [27519,27525]"
    },
    {
      "src": "formal_parameter [81446,81456]",
      "dest": "formal_parameter [82940,82950]"
    },
    {
      "src": "identifier: valid [63775,63780]",
      "dest": "identifier: valid [64822,64827]"
    },
    {
      "src": "true: true [117952,117956]",
      "dest": "true: true [119446,119450]"
    },
    {
      "src": "visibility: public [200810,200816]",
      "dest": "visibility: public [202304,202310]"
    },
    {
      "src": "\": \" [219883,219884]",
      "dest": "\": \" [221377,221378]"
    },
    {
      "src": "line_comment: // our last action in the above loop was to switch d and p, so p now  [236471,236540]",
      "dest": "line_comment: // our last action in the above loop was to switch d and p, so p now  [237965,238034]"
    },
    {
      "src": "identifier: searchStr [49368,49377]",
      "dest": "identifier: searchStr [49368,49377]"
    },
    {
      "src": "argument_list [180313,180328]",
      "dest": "argument_list [181807,181822]"
    },
    {
      "src": "block [200883,200920]",
      "dest": "block [202377,202414]"
    },
    {
      "src": "variable_declarator [185501,185522]",
      "dest": "variable_declarator [186995,187016]"
    },
    {
      "src": "identifier: str [79983,79986]",
      "dest": "identifier: str [81477,81480]"
    },
    {
      "src": "return_statement [171874,171933]",
      "dest": "return_statement [173368,173427]"
    },
    {
      "src": "identifier: length [117681,117687]",
      "dest": "identifier: length [119175,119181]"
    },
    {
      "src": "decimal_integer_literal: 0 [145692,145693]",
      "dest": "decimal_integer_literal: 0 [147186,147187]"
    },
    {
      "src": "type: String [93906,93912]",
      "dest": "type: String [95400,95406]"
    },
    {
      "src": "parenthesized_expression [49500,49548]",
      "dest": "parenthesized_expression [49500,49548]"
    },
    {
      "src": "comparison_operator: <= [219899,219901]",
      "dest": "comparison_operator: <= [221393,221395]"
    },
    {
      "src": "decimal_integer_literal: 0 [50974,50975]",
      "dest": "decimal_integer_literal: 0 [50974,50975]"
    },
    {
      "src": "identifier: longestStrLen [228112,228125]",
      "dest": "identifier: longestStrLen [229606,229619]"
    },
    {
      "src": "comparison_operator: != [18848,18850]",
      "dest": "comparison_operator: != [18848,18850]"
    },
    {
      "src": "catch_formal_parameter [25673,25699]",
      "dest": "catch_formal_parameter [25673,25699]"
    },
    {
      "src": "\": \" [25643,25644]",
      "dest": "\": \" [25643,25644]"
    },
    {
      "src": "expression_statement [134445,134467]",
      "dest": "expression_statement [135939,135961]"
    },
    {
      "src": "catch_type [25999,26042]",
      "dest": "catch_type [25999,26042]"
    },
    {
      "src": "static: static [206810,206816]",
      "dest": "static: static [208304,208310]"
    },
    {
      "src": "logical_operator: || [81503,81505]",
      "dest": "logical_operator: || [82997,82999]"
    },
    {
      "src": "return_statement [131142,131155]",
      "dest": "return_statement [132636,132649]"
    },
    {
      "src": "comparison_operator: == [145552,145554]",
      "dest": "comparison_operator: == [147046,147048]"
    },
    {
      "src": "parenthesized_expression [116661,116671]",
      "dest": "parenthesized_expression [118155,118165]"
    },
    {
      "src": "identifier: i [127919,127920]",
      "dest": "identifier: i [129413,129414]"
    },
    {
      "src": "type: IllegalStateException [158452,158473]",
      "dest": "type: IllegalStateException [159946,159967]"
    },
    {
      "src": "type: String [87679,87685]",
      "dest": "type: String [89173,89179]"
    },
    {
      "src": "identifier: replaceChars [163591,163603]",
      "dest": "identifier: replaceChars [165085,165097]"
    },
    {
      "src": "logical_operator: || [165595,165597]",
      "dest": "logical_operator: || [167089,167091]"
    },
    {
      "src": "identifier: maxWidth [219994,220002]",
      "dest": "identifier: maxWidth [221488,221496]"
    },
    {
      "src": "binary_expression [239871,239885]",
      "dest": "binary_expression [241365,241379]"
    },
    {
      "src": "binary_expression [203225,203231]",
      "dest": "binary_expression [204719,204725]"
    },
    {
      "src": "identifier: length [196777,196783]",
      "dest": "identifier: length [198271,198277]"
    },
    {
      "src": "comparison_operator: < [75711,75712]",
      "dest": "comparison_operator: < [77205,77206]"
    },
    {
      "src": "formal_parameter [31817,31827]",
      "dest": "formal_parameter [31817,31827]"
    },
    {
      "src": "type: CharSequence [55985,55997]",
      "dest": "type: CharSequence [56331,56343]"
    },
    {
      "src": "binary_expression [149862,149900]",
      "dest": "binary_expression [151356,151394]"
    },
    {
      "src": "identifier: isEmpty [171752,171759]",
      "dest": "identifier: isEmpty [173246,173253]"
    },
    {
      "src": "parenthesized_expression [105834,105861]",
      "dest": "parenthesized_expression [107328,107355]"
    },
    {
      "src": "method_declaration [205633,205971]",
      "dest": "method_declaration [207127,207465]"
    },
    {
      "src": "modifiers [115413,115426]",
      "dest": "modifiers [116907,116920]"
    },
    {
      "src": "formal_parameter [109638,109648]",
      "dest": "formal_parameter [111132,111142]"
    },
    {
      "src": "identifier: strLen [8819,8825]",
      "dest": "identifier: strLen [8819,8825]"
    },
    {
      "src": "block [118434,119127]",
      "dest": "block [119928,120621]"
    },
    {
      "src": "method_invocation [195639,195803]",
      "dest": "method_invocation [197133,197297]"
    },
    {
      "src": "if_statement [143300,143372]",
      "dest": "if_statement [144794,144866]"
    },
    {
      "src": "affectation_operator: = [165988,165989]",
      "dest": "affectation_operator: = [167482,167483]"
    },
    {
      "src": "for_statement [198373,198787]",
      "dest": "for_statement [199867,200281]"
    },
    {
      "src": "decimal_integer_literal: 0 [110708,110709]",
      "dest": "decimal_integer_literal: 0 [112202,112203]"
    },
    {
      "src": "null_literal: null [225106,225110]",
      "dest": "null_literal: null [226600,226604]"
    },
    {
      "src": "type: String [192674,192680]",
      "dest": "type: String [194168,194174]"
    },
    {
      "src": "identifier: i [54713,54714]",
      "dest": "identifier: i [54785,54786]"
    },
    {
      "src": "variable_declarator [116755,116785]",
      "dest": "variable_declarator [118249,118279]"
    },
    {
      "src": "method_invocation [123816,123879]",
      "dest": "method_invocation [125310,125373]"
    },
    {
      "src": "identifier: isNumericSpace [208029,208043]",
      "dest": "identifier: isNumericSpace [209523,209537]"
    },
    {
      "src": "identifier: equalsIgnoreCase [28449,28465]",
      "dest": "identifier: equalsIgnoreCase [28449,28465]"
    },
    {
      "src": "method_declaration [86237,86668]",
      "dest": "method_declaration [87731,88162]"
    },
    {
      "src": "return_statement [42362,42407]",
      "dest": "return_statement [42362,42407]"
    },
    {
      "src": "type: String [185283,185289]",
      "dest": "type: String [186777,186783]"
    },
    {
      "src": "null_literal: null [168096,168100]",
      "dest": "null_literal: null [169590,169594]"
    },
    {
      "src": "logical_operator: || [49419,49421]",
      "dest": "logical_operator: || [49419,49421]"
    },
    {
      "src": "expression_statement [23219,23258]",
      "dest": "expression_statement [23219,23258]"
    },
    {
      "src": "block [161080,161139]",
      "dest": "block [162574,162633]"
    },
    {
      "src": "return_statement [175102,175129]",
      "dest": "return_statement [176596,176623]"
    },
    {
      "src": "identifier: searchLen [54657,54666]",
      "dest": "identifier: searchLen [54689,54698]"
    },
    {
      "src": "identifier: len [118040,118043]",
      "dest": "identifier: len [119534,119537]"
    },
    {
      "src": "identifier: substring [223971,223980]",
      "dest": "identifier: substring [225465,225474]"
    },
    {
      "src": "continue: continue [117519,117527]",
      "dest": "continue: continue [119013,119021]"
    },
    {
      "src": "identifier: substring [105029,105038]",
      "dest": "identifier: substring [106523,106532]"
    },
    {
      "src": "identifier: start [118864,118869]",
      "dest": "identifier: start [120358,120363]"
    },
    {
      "src": "identifier: i [137216,137217]",
      "dest": "identifier: i [138710,138711]"
    },
    {
      "src": "affectation_operator: = [132574,132575]",
      "dest": "affectation_operator: = [134068,134069]"
    },
    {
      "src": "identifier: str [47919,47922]",
      "dest": "identifier: str [47919,47922]"
    },
    {
      "src": "identifier: searchList [160500,160510]",
      "dest": "identifier: searchList [161994,162004]"
    },
    {
      "src": "variable_declarator [182146,182151]",
      "dest": "variable_declarator [183640,183645]"
    },
    {
      "src": "identifier: list [91656,91660]",
      "dest": "identifier: list [93150,93154]"
    },
    {
      "src": "identifier: charAt [174907,174913]",
      "dest": "identifier: charAt [176401,176407]"
    },
    {
      "src": "identifier: method [24586,24592]",
      "dest": "identifier: method [24586,24592]"
    },
    {
      "src": "null_literal: null [149919,149923]",
      "dest": "null_literal: null [151413,151417]"
    },
    {
      "src": "variable_declarator [57619,57648]",
      "dest": "variable_declarator [57959,57988]"
    },
    {
      "src": "method_declaration [204212,204579]",
      "dest": "method_declaration [205706,206073]"
    },
    {
      "src": "comparison_operator: == [228126,228128]",
      "dest": "comparison_operator: == [229620,229622]"
    },
    {
      "src": "argument_list [185930,185935]",
      "dest": "argument_list [187424,187429]"
    },
    {
      "src": "argument_list [36233,36235]",
      "dest": "argument_list [36233,36235]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [40939,40954]",
      "dest": "identifier: INDEX_NOT_FOUND [40939,40954]"
    },
    {
      "src": "type: int [181570,181573]",
      "dest": "type: int [183064,183067]"
    },
    {
      "src": "binary_expression [79848,79855]",
      "dest": "binary_expression [81342,81349]"
    },
    {
      "src": "identifier: append [133049,133055]",
      "dest": "identifier: append [134543,134549]"
    },
    {
      "src": "continue: continue [123564,123572]",
      "dest": "continue: continue [125058,125066]"
    },
    {
      "src": "variable_declarator [227264,227285]",
      "dest": "variable_declarator [228758,228779]"
    },
    {
      "src": "identifier: str [170188,170191]",
      "dest": "identifier: str [171682,171685]"
    },
    {
      "src": "identifier: lastMatch [116891,116900]",
      "dest": "identifier: lastMatch [118385,118394]"
    },
    {
      "src": "identifier: startsWithIgnoreCase [140376,140396]",
      "dest": "identifier: startsWithIgnoreCase [141870,141890]"
    },
    {
      "src": "update_expression [62495,62498]",
      "dest": "update_expression [63234,63237]"
    },
    {
      "src": "if_statement [23905,23959]",
      "dest": "if_statement [23905,23959]"
    },
    {
      "src": "update_expression [57688,57691]",
      "dest": "update_expression [54796,54799]"
    },
    {
      "src": "comparison_operator: < [186081,186082]",
      "dest": "comparison_operator: < [187575,187576]"
    },
    {
      "src": "block [158428,158544]",
      "dest": "block [159922,160038]"
    },
    {
      "src": "type: int [130716,130719]",
      "dest": "type: int [132210,132213]"
    },
    {
      "src": "formal_parameters [115458,115502]",
      "dest": "formal_parameters [116952,116996]"
    },
    {
      "src": "binary_expression [186079,186087]",
      "dest": "binary_expression [187573,187581]"
    },
    {
      "src": "binary_expression [174671,174710]",
      "dest": "binary_expression [176165,176204]"
    },
    {
      "src": "identifier: i [186120,186121]",
      "dest": "identifier: i [187614,187615]"
    },
    {
      "src": "identifier: max [116352,116355]",
      "dest": "identifier: max [117846,117849]"
    },
    {
      "src": "local_variable_declaration [24270,24357]",
      "dest": "local_variable_declaration [24270,24357]"
    },
    {
      "src": "identifier: length [150161,150167]",
      "dest": "identifier: length [151655,151661]"
    },
    {
      "src": "identifier: ch [174898,174900]",
      "dest": "identifier: ch [176392,176394]"
    },
    {
      "src": "identifier: leftPad [184183,184190]",
      "dest": "identifier: leftPad [185677,185684]"
    },
    {
      "src": "logical_operator: || [7473,7475]",
      "dest": "logical_operator: || [7473,7475]"
    },
    {
      "src": "argument_list [222529,222531]",
      "dest": "argument_list [224023,224025]"
    },
    {
      "src": "type: String [49361,49367]",
      "dest": "type: String [49361,49367]"
    },
    {
      "src": "type: String [214530,214536]",
      "dest": "type: String [216024,216030]"
    },
    {
      "src": "affectation_operator: = [166027,166028]",
      "dest": "affectation_operator: = [167521,167522]"
    },
    {
      "src": "variable_declarator [168450,168462]",
      "dest": "variable_declarator [169944,169956]"
    },
    {
      "src": "identifier: length [168584,168590]",
      "dest": "identifier: length [170078,170084]"
    },
    {
      "src": "formal_parameter [192674,192684]",
      "dest": "formal_parameter [194168,194178]"
    },
    {
      "src": "type: String [104045,104051]",
      "dest": "type: String [105539,105545]"
    },
    {
      "src": "method_declaration [185254,186228]",
      "dest": "method_declaration [186748,187722]"
    },
    {
      "src": "binary_expression [170081,170099]",
      "dest": "binary_expression [171575,171593]"
    },
    {
      "src": "type: int [219371,219374]",
      "dest": "type: int [220865,220868]"
    },
    {
      "src": "argument_list [240012,240055]",
      "dest": "argument_list [241506,241549]"
    },
    {
      "src": "formal_parameter [171720,171736]",
      "dest": "formal_parameter [173214,173230]"
    },
    {
      "src": "identifier: padChar [189132,189139]",
      "dest": "identifier: padChar [190626,190633]"
    },
    {
      "src": "return_statement [179063,179095]",
      "dest": "return_statement [180557,180589]"
    },
    {
      "src": "type: char [145489,145493]",
      "dest": "type: char [146983,146987]"
    },
    {
      "src": "identifier: join [132298,132302]",
      "dest": "identifier: join [133792,133796]"
    },
    {
      "src": "parenthesized_expression [104174,104187]",
      "dest": "parenthesized_expression [105668,105681]"
    },
    {
      "src": "binary_expression [173394,173405]",
      "dest": "binary_expression [174888,174899]"
    },
    {
      "src": "block [91418,91456]",
      "dest": "block [92912,92950]"
    },
    {
      "src": "type: String [28479,28485]",
      "dest": "type: String [28479,28485]"
    },
    {
      "src": "comparison_operator: <= [190729,190731]",
      "dest": "comparison_operator: <= [192223,192225]"
    },
    {
      "src": "affectation_operator: = [53123,53124]",
      "dest": "affectation_operator: = [53123,53124]"
    },
    {
      "src": "identifier: substring [118854,118863]",
      "dest": "identifier: substring [120348,120357]"
    },
    {
      "src": "identifier: isEmpty [56036,56043]",
      "dest": "identifier: isEmpty [56382,56389]"
    },
    {
      "src": "true: true [67043,67047]",
      "dest": "true: true [68537,68541]"
    },
    {
      "src": "variable_declarator [6003,6013]",
      "dest": "variable_declarator [6003,6013]"
    },
    {
      "src": "identifier: MAX_VALUE [227398,227407]",
      "dest": "identifier: MAX_VALUE [228892,228901]"
    },
    {
      "src": "arithmetic_operator: - [6137,6138]",
      "dest": "arithmetic_operator: - [6137,6138]"
    },
    {
      "src": "expression_statement [150701,150735]",
      "dest": "expression_statement [152195,152229]"
    },
    {
      "src": "line_comment: // Overlay [166422,166432]",
      "dest": "line_comment: // Overlay [167916,167926]"
    },
    {
      "src": "method_invocation [168618,168641]",
      "dest": "method_invocation [170112,170135]"
    },
    {
      "src": "arithmetic_operator: + [73634,73635]",
      "dest": "arithmetic_operator: + [75128,75129]"
    },
    {
      "src": "block [138761,138796]",
      "dest": "block [140255,140290]"
    },
    {
      "src": "method_invocation [111291,111314]",
      "dest": "method_invocation [112785,112808]"
    },
    {
      "src": "identifier: startPos [49751,49759]",
      "dest": "identifier: startPos [49751,49759]"
    },
    {
      "src": "argument_list [165589,165594]",
      "dest": "argument_list [167083,167088]"
    },
    {
      "src": "argument_list [59633,59664]",
      "dest": "argument_list [60020,60051]"
    },
    {
      "src": "affectation_operator: = [235450,235451]",
      "dest": "affectation_operator: = [236944,236945]"
    },
    {
      "src": "identifier: maxWidth [219598,219606]",
      "dest": "identifier: maxWidth [221092,221100]"
    },
    {
      "src": "block [39914,39955]",
      "dest": "block [39914,39955]"
    },
    {
      "src": "identifier: replaceIndex [162115,162127]",
      "dest": "identifier: replaceIndex [163609,163621]"
    },
    {
      "src": "identifier: str [244376,244379]",
      "dest": "identifier: str [245870,245873]"
    },
    {
      "src": "comparison_operator: > [180190,180191]",
      "dest": "comparison_operator: > [181684,181685]"
    },
    {
      "src": "method_invocation [235492,235502]",
      "dest": "method_invocation [236986,236996]"
    },
    {
      "src": "expression_statement [170397,170407]",
      "dest": "expression_statement [171891,171901]"
    },
    {
      "src": "modifiers [147038,147051]",
      "dest": "modifiers [148532,148545]"
    },
    {
      "src": "block [191911,191947]",
      "dest": "block [193405,193441]"
    },
    {
      "src": "identifier: c [124172,124173]",
      "dest": "identifier: c [125666,125667]"
    },
    {
      "src": "identifier: length [89398,89404]",
      "dest": "identifier: length [90892,90898]"
    },
    {
      "src": "logical_operator: || [66485,66487]",
      "dest": "logical_operator: || [67532,67534]"
    },
    {
      "src": "identifier: repeat [176613,176619]",
      "dest": "identifier: repeat [178107,178113]"
    },
    {
      "src": "modifiers [167932,167945]",
      "dest": "modifiers [169426,169439]"
    },
    {
      "src": "identifier: pads [185918,185922]",
      "dest": "identifier: pads [187412,187416]"
    },
    {
      "src": "parenthesized_expression [17132,17146]",
      "dest": "parenthesized_expression [17132,17146]"
    },
    {
      "src": "expression_statement [118335,118353]",
      "dest": "expression_statement [119829,119847]"
    },
    {
      "src": "increment_operator: ++ [161076,161078]",
      "dest": "increment_operator: ++ [162570,162572]"
    },
    {
      "src": ":: : [150313,150314]",
      "dest": ":: : [151807,151808]"
    },
    {
      "src": "block [180096,180172]",
      "dest": "block [181590,181666]"
    },
    {
      "src": "method_invocation [39893,39911]",
      "dest": "method_invocation [39893,39911]"
    },
    {
      "src": "binary_expression [205703,205713]",
      "dest": "binary_expression [207197,207207]"
    },
    {
      "src": "argument_list [60947,60949]",
      "dest": "argument_list [61334,61336]"
    },
    {
      "src": "binary_expression [104922,104947]",
      "dest": "binary_expression [106416,106441]"
    },
    {
      "src": "affectation_operator: = [69989,69990]",
      "dest": "affectation_operator: = [71483,71484]"
    },
    {
      "src": "identifier: longestStrLen [227932,227945]",
      "dest": "identifier: longestStrLen [229426,229439]"
    },
    {
      "src": "modifiers [163570,163583]",
      "dest": "modifiers [165064,165077]"
    },
    {
      "src": "identifier: charAt [201028,201034]",
      "dest": "identifier: charAt [202522,202528]"
    },
    {
      "src": "identifier: concat [185924,185930]",
      "dest": "identifier: concat [187418,187424]"
    },
    {
      "src": "identifier: chars [145849,145854]",
      "dest": "identifier: chars [147343,147348]"
    },
    {
      "src": "type: int [31805,31808]",
      "dest": "type: int [31805,31808]"
    },
    {
      "src": "comparison_operator: == [209143,209145]",
      "dest": "comparison_operator: == [210637,210639]"
    },
    {
      "src": "identifier: pads [190807,190811]",
      "dest": "identifier: pads [192301,192305]"
    },
    {
      "src": "object_creation_expression [116762,116785]",
      "dest": "object_creation_expression [118256,118279]"
    },
    {
      "src": "local_variable_declaration [227295,227325]",
      "dest": "local_variable_declaration [228789,228819]"
    },
    {
      "src": "binary_expression [189012,189025]",
      "dest": "binary_expression [190506,190519]"
    },
    {
      "src": "identifier: Pattern [25043,25050]",
      "dest": "identifier: Pattern [25043,25050]"
    },
    {
      "src": "if_statement [18584,18972]",
      "dest": "if_statement [18584,18972]"
    },
    {
      "src": "identifier: padStr [181545,181551]",
      "dest": "identifier: padStr [183039,183045]"
    },
    {
      "src": "binary_expression [89182,89209]",
      "dest": "binary_expression [90676,90703]"
    },
    {
      "src": "identifier: i [66697,66698]",
      "dest": "identifier: i [67816,67817]"
    },
    {
      "src": "identifier: padStr [181818,181824]",
      "dest": "identifier: padStr [183312,183318]"
    },
    {
      "src": "object_creation_expression [195639,195664]",
      "dest": "object_creation_expression [197133,197158]"
    },
    {
      "src": "block [123794,123946]",
      "dest": "block [125288,125440]"
    },
    {
      "src": "if_statement [130820,130885]",
      "dest": "if_statement [132314,132379]"
    },
    {
      "src": "binary_expression [39637,39656]",
      "dest": "binary_expression [39637,39656]"
    },
    {
      "src": "binary_expression [225099,225110]",
      "dest": "binary_expression [226593,226604]"
    },
    {
      "src": "identifier: separator [171727,171736]",
      "dest": "identifier: separator [173221,173230]"
    },
    {
      "src": "affectation_operator: = [231219,231220]",
      "dest": "affectation_operator: = [232713,232714]"
    },
    {
      "src": "expression_statement [124137,124196]",
      "dest": "expression_statement [125631,125690]"
    },
    {
      "src": "identifier: searchChars [56151,56162]",
      "dest": "identifier: searchChars [56497,56508]"
    },
    {
      "src": "if_statement [194526,194579]",
      "dest": "if_statement [196020,196073]"
    },
    {
      "src": "identifier: tmp [235408,235411]",
      "dest": "identifier: tmp [236902,236905]"
    },
    {
      "src": "affectation_operator: = [165941,165942]",
      "dest": "affectation_operator: = [167435,167436]"
    },
    {
      "src": "identifier: split [93900,93905]",
      "dest": "identifier: split [95394,95399]"
    },
    {
      "src": "identifier: max [227953,227956]",
      "dest": "identifier: max [229447,229450]"
    },
    {
      "src": "method_invocation [14833,14845]",
      "dest": "method_invocation [14833,14845]"
    },
    {
      "src": "block [171738,171969]",
      "dest": "block [173232,173463]"
    },
    {
      "src": "type: boolean [9574,9581]",
      "dest": "type: boolean [9574,9581]"
    },
    {
      "src": "local_variable_declaration [188966,188992]",
      "dest": "local_variable_declaration [190460,190486]"
    },
    {
      "src": "identifier: i [161060,161061]",
      "dest": "identifier: i [162554,162555]"
    },
    {
      "src": "parenthesized_expression [133013,133026]",
      "dest": "parenthesized_expression [134507,134520]"
    },
    {
      "src": "object_creation_expression [175478,175497]",
      "dest": "object_creation_expression [176972,176991]"
    },
    {
      "src": "array_access [131522,131530]",
      "dest": "array_access [133016,133024]"
    },
    {
      "src": "type: char [126113,126117]",
      "dest": "type: char [127607,127611]"
    },
    {
      "src": "type: int [70007,70010]",
      "dest": "type: int [71501,71504]"
    },
    {
      "src": "block [185952,186222]",
      "dest": "block [187446,187716]"
    },
    {
      "src": "argument_list [13716,13727]",
      "dest": "argument_list [13716,13727]"
    },
    {
      "src": "logical_operator: || [43388,43390]",
      "dest": "logical_operator: || [43388,43390]"
    },
    {
      "src": "local_variable_declaration [91090,91134]",
      "dest": "local_variable_declaration [92584,92628]"
    },
    {
      "src": "decimal_integer_literal: 0 [228298,228299]",
      "dest": "decimal_integer_literal: 0 [229792,229793]"
    },
    {
      "src": "block [194516,194625]",
      "dest": "block [196010,196119]"
    },
    {
      "src": "comparison_operator: == [31865,31867]",
      "dest": "comparison_operator: == [31865,31867]"
    },
    {
      "src": "if_statement [228830,228889]",
      "dest": "if_statement [230324,230383]"
    },
    {
      "src": "identifier: separatorChar [215487,215500]",
      "dest": "identifier: separatorChar [216981,216994]"
    },
    {
      "src": "variable_declarator [145688,145693]",
      "dest": "variable_declarator [147182,147187]"
    },
    {
      "src": "method_invocation [62354,62374]",
      "dest": "method_invocation [63093,63113]"
    },
    {
      "src": "identifier: searchChars [54837,54848]",
      "dest": "identifier: searchChars [58144,58155]"
    },
    {
      "src": "return_statement [188936,188947]",
      "dest": "return_statement [190430,190441]"
    },
    {
      "src": "decimal_integer_literal: 0 [137443,137444]",
      "dest": "decimal_integer_literal: 0 [138937,138938]"
    },
    {
      "src": "binary_expression [190798,190815]",
      "dest": "binary_expression [192292,192309]"
    },
    {
      "src": "null_literal: null [214578,214582]",
      "dest": "null_literal: null [216072,216076]"
    },
    {
      "src": "argument_list [90821,90827]",
      "dest": "argument_list [92315,92321]"
    },
    {
      "src": "argument_list [211376,211390]",
      "dest": "argument_list [212870,212884]"
    },
    {
      "src": "identifier: remove [144556,144562]",
      "dest": "identifier: remove [146050,146056]"
    },
    {
      "src": "identifier: str [10679,10682]",
      "dest": "identifier: str [10679,10682]"
    },
    {
      "src": "identifier: i [225221,225222]",
      "dest": "identifier: i [226715,226716]"
    },
    {
      "src": "type: int [228451,228454]",
      "dest": "type: int [229945,229948]"
    },
    {
      "src": "block [200857,201131]",
      "dest": "block [202351,202625]"
    },
    {
      "src": "identifier: output2 [175489,175496]",
      "dest": "identifier: output2 [176983,176990]"
    },
    {
      "src": "increment_operator: ++ [178222,178224]",
      "dest": "increment_operator: ++ [179716,179718]"
    },
    {
      "src": "variable_declarator [127593,127626]",
      "dest": "variable_declarator [129087,129120]"
    },
    {
      "src": "argument_list [170017,170019]",
      "dest": "argument_list [171511,171513]"
    },
    {
      "src": "static: static [171688,171694]",
      "dest": "static: static [173182,173188]"
    },
    {
      "src": "null_literal: null [168057,168061]",
      "dest": "null_literal: null [169551,169555]"
    },
    {
      "src": "null_literal: null [191905,191909]",
      "dest": "null_literal: null [193399,193403]"
    },
    {
      "src": "identifier: allStringsNull [227816,227830]",
      "dest": "identifier: allStringsNull [229310,229324]"
    },
    {
      "src": "array_access [128006,128014]",
      "dest": "array_access [129500,129508]"
    },
    {
      "src": "identifier: remove [138867,138873]",
      "dest": "identifier: remove [140361,140367]"
    },
    {
      "src": "type: boolean [36074,36081]",
      "dest": "type: boolean [36074,36081]"
    },
    {
      "src": "type: ArrayList<String> [104616,104633]",
      "dest": "type: ArrayList<String> [106110,106127]"
    },
    {
      "src": "identifier: replaceChars [165502,165514]",
      "dest": "identifier: replaceChars [166996,167008]"
    },
    {
      "src": "binary_expression [89197,89209]",
      "dest": "binary_expression [90691,90703]"
    },
    {
      "src": "identifier: match [116860,116865]",
      "dest": "identifier: match [118354,118359]"
    },
    {
      "src": "comparison_operator: == [71843,71845]",
      "dest": "comparison_operator: == [73337,73339]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [199932,199947]",
      "dest": "identifier: INDEX_NOT_FOUND [201426,201441]"
    },
    {
      "src": "identifier: searchList [162523,162533]",
      "dest": "identifier: searchList [164017,164027]"
    },
    {
      "src": "parenthesized_expression [127528,127543]",
      "dest": "parenthesized_expression [129022,129037]"
    },
    {
      "src": "update_expression [236074,236077]",
      "dest": "update_expression [237568,237571]"
    },
    {
      "src": "decimal_integer_literal: 1 [175013,175014]",
      "dest": "decimal_integer_literal: 1 [176507,176508]"
    },
    {
      "src": "assignment_expression [49563,49607]",
      "dest": "assignment_expression [49563,49607]"
    },
    {
      "src": "type: java.lang.reflect.Field [24738,24761]",
      "dest": "type: java.lang.reflect.Field [24738,24761]"
    },
    {
      "src": "decimal_integer_literal: 0 [175021,175022]",
      "dest": "decimal_integer_literal: 0 [176515,176516]"
    },
    {
      "src": "identifier: close [89161,89166]",
      "dest": "identifier: close [90655,90660]"
    },
    {
      "src": "method_declaration [192643,192810]",
      "dest": "method_declaration [194137,194304]"
    },
    {
      "src": "identifier: searchList [161228,161238]",
      "dest": "identifier: searchList [162722,162732]"
    },
    {
      "src": "affectation_operator: = [235906,235907]",
      "dest": "affectation_operator: = [237400,237401]"
    },
    {
      "src": "null_literal: null [131534,131538]",
      "dest": "null_literal: null [133028,133032]"
    },
    {
      "src": "string_literal [233863,233889]",
      "dest": "string_literal [235357,235383]"
    },
    {
      "src": "modifiers [77223,77236]",
      "dest": "modifiers [78717,78730]"
    },
    {
      "src": "block [222091,222126]",
      "dest": "block [223585,223620]"
    },
    {
      "src": "identifier: start [150727,150732]",
      "dest": "identifier: start [152221,152226]"
    },
    {
      "src": "identifier: str [20360,20363]",
      "dest": "identifier: str [20360,20363]"
    },
    {
      "src": "method_invocation [134627,134641]",
      "dest": "method_invocation [136121,136135]"
    },
    {
      "src": "method_declaration [78357,78652]",
      "dest": "method_declaration [79851,80146]"
    },
    {
      "src": "type: int [165778,165781]",
      "dest": "type: int [167272,167275]"
    },
    {
      "src": "identifier: i [39829,39830]",
      "dest": "identifier: i [39829,39830]"
    },
    {
      "src": "modifiers [47716,47729]",
      "dest": "modifiers [47716,47729]"
    },
    {
      "src": "modifiers [145449,145462]",
      "dest": "modifiers [146943,146956]"
    },
    {
      "src": "block [174712,174774]",
      "dest": "block [176206,176268]"
    },
    {
      "src": "arithmetic_operator: - [171911,171912]",
      "dest": "arithmetic_operator: - [173405,173406]"
    },
    {
      "src": "method_invocation [239910,239925]",
      "dest": "method_invocation [241404,241419]"
    },
    {
      "src": "if_statement [185566,185657]",
      "dest": "if_statement [187060,187151]"
    },
    {
      "src": "for_statement [66713,67017]",
      "dest": "for_statement [67832,68511]"
    },
    {
      "src": "type: String [176591,176597]",
      "dest": "type: String [178085,178091]"
    },
    {
      "src": "for_statement [200959,201104]",
      "dest": "for_statement [202453,202598]"
    },
    {
      "src": "argument_list [24919,24925]",
      "dest": "argument_list [24919,24925]"
    },
    {
      "src": "null_literal: null [31868,31872]",
      "dest": "null_literal: null [31868,31872]"
    },
    {
      "src": "if_statement [49830,49937]",
      "dest": "if_statement [49830,49937]"
    },
    {
      "src": "identifier: searchLength [161484,161496]",
      "dest": "identifier: searchLength [162978,162990]"
    },
    {
      "src": "unary_expression [228434,228436]",
      "dest": "unary_expression [229928,229930]"
    },
    {
      "src": "argument_list [165822,165824]",
      "dest": "argument_list [167316,167318]"
    },
    {
      "src": "identifier: beg [104685,104688]",
      "dest": "identifier: beg [106179,106182]"
    },
    {
      "src": "null_literal: null [24920,24924]",
      "dest": "null_literal: null [24920,24924]"
    },
    {
      "src": "identifier: css [227168,227171]",
      "dest": "identifier: css [228662,228665]"
    },
    {
      "src": "parenthesized_expression [199898,199948]",
      "dest": "parenthesized_expression [201392,201442]"
    },
    {
      "src": "method_invocation [89366,89407]",
      "dest": "method_invocation [90860,90901]"
    },
    {
      "src": "type: String [62304,62310]",
      "dest": "type: String [63043,63049]"
    },
    {
      "src": "local_variable_declaration [186068,186078]",
      "dest": "local_variable_declaration [187562,187572]"
    },
    {
      "src": "formal_parameter [56002,56020]",
      "dest": "formal_parameter [56348,56366]"
    },
    {
      "src": "continue_statement [61206,61221]",
      "dest": "continue_statement [61923,61938]"
    },
    {
      "src": "identifier: textIndex [159868,159877]",
      "dest": "identifier: textIndex [161362,161371]"
    },
    {
      "src": "method_invocation [143439,143487]",
      "dest": "method_invocation [144933,144981]"
    },
    {
      "src": "identifier: isLowerCase [210330,210341]",
      "dest": "identifier: isLowerCase [211824,211835]"
    },
    {
      "src": "visibility: public [126071,126077]",
      "dest": "visibility: public [127565,127571]"
    },
    {
      "src": "identifier: beg [106317,106320]",
      "dest": "identifier: beg [107811,107814]"
    },
    {
      "src": "identifier: overlay [167953,167960]",
      "dest": "identifier: overlay [169447,169454]"
    },
    {
      "src": "static: static [122991,122997]",
      "dest": "static: static [124485,124491]"
    },
    {
      "src": "comparison_operator: == [20293,20295]",
      "dest": "comparison_operator: == [20293,20295]"
    },
    {
      "src": "local_variable_declaration [150179,150228]",
      "dest": "local_variable_declaration [151673,151722]"
    },
    {
      "src": "identifier: start [89277,89282]",
      "dest": "identifier: start [90771,90776]"
    },
    {
      "src": "identifier: d [236035,236036]",
      "dest": "identifier: d [237529,237530]"
    },
    {
      "src": "decimal_integer_literal: 0 [49872,49873]",
      "dest": "decimal_integer_literal: 0 [49872,49873]"
    },
    {
      "src": "variable_declarator [150009,150048]",
      "dest": "variable_declarator [151503,151542]"
    },
    {
      "src": "identifier: open [89148,89152]",
      "dest": "identifier: open [90642,90646]"
    },
    {
      "src": "argument_list [49544,49546]",
      "dest": "argument_list [49544,49546]"
    },
    {
      "src": "comparison_operator: <= [189044,189046]",
      "dest": "comparison_operator: <= [190538,190540]"
    },
    {
      "src": "type: boolean [50820,50827]",
      "dest": "type: boolean [50820,50827]"
    },
    {
      "src": "string_fragment: Search and Replace array lengths don't match:  [158806,158852]",
      "dest": "string_fragment: Search and Replace array lengths don't match:  [160300,160346]"
    },
    {
      "src": "binary_expression [158144,158156]",
      "dest": "binary_expression [159638,159650]"
    },
    {
      "src": "argument_list [158804,158946]",
      "dest": "argument_list [160298,160440]"
    },
    {
      "src": "return_statement [183969,183981]",
      "dest": "return_statement [185463,185475]"
    },
    {
      "src": "line_comment: // Append: [5787,5797]",
      "dest": "line_comment: // Append: [5787,5797]"
    },
    {
      "src": "update_expression [165961,165964]",
      "dest": "update_expression [167455,167458]"
    },
    {
      "src": "method_invocation [198606,198631]",
      "dest": "method_invocation [200100,200125]"
    },
    {
      "src": "assignment_expression [118036,118043]",
      "dest": "assignment_expression [119530,119537]"
    },
    {
      "src": "identifier: timeToLive [155264,155274]",
      "dest": "identifier: timeToLive [156758,156768]"
    },
    {
      "src": "identifier: strip [23231,23236]",
      "dest": "identifier: strip [23231,23236]"
    },
    {
      "src": "identifier: lastIndexOf [84786,84797]",
      "dest": "identifier: lastIndexOf [86280,86291]"
    },
    {
      "src": "binary_expression [18472,18483]",
      "dest": "binary_expression [18472,18483]"
    },
    {
      "src": "type: char[] [182085,182091]",
      "dest": "type: char[] [183579,183585]"
    },
    {
      "src": "formal_parameter [221921,221931]",
      "dest": "formal_parameter [223415,223425]"
    },
    {
      "src": "formal_parameters [208043,208060]",
      "dest": "formal_parameters [209537,209554]"
    },
    {
      "src": "identifier: indexOfDifference [224944,224961]",
      "dest": "identifier: indexOfDifference [226438,226455]"
    },
    {
      "src": "identifier: str [189108,189111]",
      "dest": "identifier: str [190602,190605]"
    },
    {
      "src": "method_invocation [159483,159505]",
      "dest": "method_invocation [160977,160999]"
    },
    {
      "src": "type: int [160168,160171]",
      "dest": "type: int [161662,161665]"
    },
    {
      "src": "if_statement [225008,225071]",
      "dest": "if_statement [226502,226565]"
    },
    {
      "src": "type: int [54784,54787]",
      "dest": "type: int [58088,58091]"
    },
    {
      "src": "method_invocation [24595,24675]",
      "dest": "method_invocation [24595,24675]"
    },
    {
      "src": "block [117816,118418]",
      "dest": "block [119310,119912]"
    },
    {
      "src": "method_declaration [7398,7499]",
      "dest": "method_declaration [7398,7499]"
    },
    {
      "src": "method_invocation [20562,20581]",
      "dest": "method_invocation [20562,20581]"
    },
    {
      "src": "parenthesized_expression [39584,39619]",
      "dest": "parenthesized_expression [39584,39619]"
    },
    {
      "src": "formal_parameters [8043,8060]",
      "dest": "formal_parameters [8043,8060]"
    },
    {
      "src": "null_literal: null [66480,66484]",
      "dest": "null_literal: null [67527,67531]"
    },
    {
      "src": "binary_expression [20191,20202]",
      "dest": "binary_expression [20191,20202]"
    },
    {
      "src": "type: int [39797,39800]",
      "dest": "type: int [39797,39800]"
    },
    {
      "src": "formal_parameter [57369,57387]",
      "dest": "formal_parameter [54482,54500]"
    },
    {
      "src": "formal_parameter [95160,95170]",
      "dest": "formal_parameter [96654,96664]"
    },
    {
      "src": "parenthesized_expression [198219,198242]",
      "dest": "parenthesized_expression [199713,199736]"
    },
    {
      "src": "identifier: str [212986,212989]",
      "dest": "identifier: str [214480,214483]"
    },
    {
      "src": "formal_parameter [30699,30714]",
      "dest": "formal_parameter [30699,30714]"
    },
    {
      "src": "type: String [43344,43350]",
      "dest": "type: String [43344,43350]"
    },
    {
      "src": "binary_expression [161525,161660]",
      "dest": "binary_expression [163019,163154]"
    },
    {
      "src": "identifier: ArrayUtils [57418,57428]",
      "dest": "identifier: ArrayUtils [57758,57768]"
    },
    {
      "src": "identifier: cs [8057,8059]",
      "dest": "identifier: cs [8057,8059]"
    },
    {
      "src": "argument_list [181982,182009]",
      "dest": "argument_list [183476,183503]"
    },
    {
      "src": "method_invocation [150648,150681]",
      "dest": "method_invocation [152142,152175]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [49963,49978]",
      "dest": "identifier: INDEX_NOT_FOUND [49963,49978]"
    },
    {
      "src": "arithmetic_operator: - [160118,160119]",
      "dest": "arithmetic_operator: - [161612,161613]"
    },
    {
      "src": "parenthesized_expression [51875,51909]",
      "dest": "parenthesized_expression [51875,51909]"
    },
    {
      "src": "method_declaration [183863,184294]",
      "dest": "method_declaration [185357,185788]"
    },
    {
      "src": "type: int [110531,110534]",
      "dest": "type: int [112025,112028]"
    },
    {
      "src": "formal_parameters [93905,93937]",
      "dest": "formal_parameters [95399,95431]"
    },
    {
      "src": "identifier: subSequence [196975,196986]",
      "dest": "identifier: subSequence [198469,198480]"
    },
    {
      "src": "identifier: search [70052,70058]",
      "dest": "identifier: search [71546,71552]"
    },
    {
      "src": "identifier: separatorChars [117666,117680]",
      "dest": "identifier: separatorChars [119160,119174]"
    },
    {
      "src": "decimal_integer_literal: 2 [173095,173096]",
      "dest": "decimal_integer_literal: 2 [174589,174590]"
    },
    {
      "src": "identifier: Math [160879,160883]",
      "dest": "identifier: Math [162373,162377]"
    },
    {
      "src": "if_statement [36415,36587]",
      "dest": "if_statement [36415,36587]"
    },
    {
      "src": "if_statement [143381,143498]",
      "dest": "if_statement [144875,144992]"
    },
    {
      "src": "identifier: str [140397,140400]",
      "dest": "identifier: str [141891,141894]"
    },
    {
      "src": "method_invocation [228663,228694]",
      "dest": "method_invocation [230157,230188]"
    },
    {
      "src": "variable_declarator [219865,219884]",
      "dest": "variable_declarator [221359,221378]"
    },
    {
      "src": "identifier: numberOfSubstrings [105835,105853]",
      "dest": "identifier: numberOfSubstrings [107329,107347]"
    },
    {
      "src": "identifier: css [228547,228550]",
      "dest": "identifier: css [230041,230044]"
    },
    {
      "src": "true: true [68151,68155]",
      "dest": "true: true [69645,69649]"
    },
    {
      "src": "identifier: EMPTY [132536,132541]",
      "dest": "identifier: EMPTY [134030,134035]"
    },
    {
      "src": "continue_statement [70126,70135]",
      "dest": "continue_statement [71620,71629]"
    },
    {
      "src": "assignment_expression [159944,159960]",
      "dest": "assignment_expression [161438,161454]"
    },
    {
      "src": "method_invocation [54632,54643]",
      "dest": "method_invocation [54632,54643]"
    },
    {
      "src": "return_statement [204515,204528]",
      "dest": "return_statement [206009,206022]"
    },
    {
      "src": "identifier: isDigit [207011,207018]",
      "dest": "identifier: isDigit [208505,208512]"
    },
    {
      "src": "parenthesized_expression [79928,79937]",
      "dest": "parenthesized_expression [81422,81431]"
    },
    {
      "src": "identifier: i [175622,175623]",
      "dest": "identifier: i [177116,177117]"
    },
    {
      "src": "argument_list [25585,25651]",
      "dest": "argument_list [25585,25651]"
    },
    {
      "src": "arithmetic_operator: + [235612,235613]",
      "dest": "arithmetic_operator: + [237106,237107]"
    },
    {
      "src": "formal_parameter [149819,149837]",
      "dest": "formal_parameter [151313,151331]"
    },
    {
      "src": "block [135360,135487]",
      "dest": "block [136854,136981]"
    },
    {
      "src": "import_declaration [918,942]",
      "dest": "import_declaration [918,942]"
    },
    {
      "src": "line_comment: // assume 3 matches [160747,160766]",
      "dest": "line_comment: // assume 3 matches [162241,162260]"
    },
    {
      "src": "block [227669,228013]",
      "dest": "block [229163,229507]"
    },
    {
      "src": "identifier: replacement [149904,149915]",
      "dest": "identifier: replacement [151398,151409]"
    },
    {
      "src": "return_statement [79893,79906]",
      "dest": "return_statement [81387,81400]"
    },
    {
      "src": "type: ArrayList<String> [123286,123303]",
      "dest": "type: ArrayList<String> [124780,124797]"
    },
    {
      "src": "identifier: length [8738,8744]",
      "dest": "identifier: length [8738,8744]"
    },
    {
      "src": "return_statement [203370,203382]",
      "dest": "return_statement [204864,204876]"
    },
    {
      "src": "static: static [28434,28440]",
      "dest": "static: static [28434,28440]"
    },
    {
      "src": "method_invocation [24768,24803]",
      "dest": "method_invocation [24768,24803]"
    },
    {
      "src": "argument_list [134060,134062]",
      "dest": "argument_list [135554,135556]"
    },
    {
      "src": "new: new [123282,123285]",
      "dest": "new: new [124776,124779]"
    },
    {
      "src": "object_creation_expression [25888,25977]",
      "dest": "object_creation_expression [25888,25977]"
    },
    {
      "src": "decimal_integer_literal: 0 [145668,145669]",
      "dest": "decimal_integer_literal: 0 [147162,147163]"
    },
    {
      "src": "identifier: str [72166,72169]",
      "dest": "identifier: str [73660,73663]"
    },
    {
      "src": "identifier: startOffset [222190,222201]",
      "dest": "identifier: startOffset [223684,223695]"
    },
    {
      "src": "arithmetic_operator: - [173330,173331]",
      "dest": "arithmetic_operator: - [174824,174825]"
    },
    {
      "src": "identifier: start [73696,73701]",
      "dest": "identifier: start [75190,75195]"
    },
    {
      "src": "identifier: i [58108,58109]",
      "dest": "identifier: i [55141,55142]"
    },
    {
      "src": "local_variable_declaration [134198,134241]",
      "dest": "local_variable_declaration [135692,135735]"
    },
    {
      "src": "visibility: public [71737,71743]",
      "dest": "visibility: public [73231,73237]"
    },
    {
      "src": "return_statement [198796,198821]",
      "dest": "return_statement [200290,200315]"
    },
    {
      "src": "formal_parameter [18407,18417]",
      "dest": "formal_parameter [18407,18417]"
    },
    {
      "src": "method_invocation [90831,90845]",
      "dest": "method_invocation [92325,92339]"
    },
    {
      "src": "identifier: i [66640,66641]",
      "dest": "identifier: i [67759,67760]"
    },
    {
      "src": "identifier: i [175385,175386]",
      "dest": "identifier: i [176879,176880]"
    },
    {
      "src": "block_comment:     \n     * <p>Case insensitive removal of a substring if it is at the begining of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeStartIgnoreCase(null, *)      = null\n     * StringUtils.removeStartIgnoreCase(\"\", *)        = \"\"\n     * StringUtils.removeStartIgnoreCase(*, null)      = *\n     * StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\")   = \"domain.com\"\n     * StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")   = \"domain.com\"\n     * StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\")       = \"domain.com\"\n     * StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeStartIgnoreCase(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for (case insensitive) and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.4\n     */ [138926,140206]",
      "dest": "block_comment:     \n     * <p>Case insensitive removal of a substring if it is at the begining of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeStartIgnoreCase(null, *)      = null\n     * StringUtils.removeStartIgnoreCase(\"\", *)        = \"\"\n     * StringUtils.removeStartIgnoreCase(*, null)      = *\n     * StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\")   = \"domain.com\"\n     * StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")   = \"domain.com\"\n     * StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\")       = \"domain.com\"\n     * StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeStartIgnoreCase(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for (case insensitive) and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.4\n     */ [140420,141700]"
    },
    {
      "src": "modifiers [174312,174325]",
      "dest": "modifiers [175806,175819]"
    },
    {
      "src": "type: int [222241,222244]",
      "dest": "type: int [223735,223738]"
    },
    {
      "src": "expression_statement [118073,118091]",
      "dest": "expression_statement [119567,119585]"
    },
    {
      "src": "identifier: charAt [117842,117848]",
      "dest": "identifier: charAt [119336,119342]"
    },
    {
      "src": "method_invocation [132981,132996]",
      "dest": "method_invocation [134475,134490]"
    },
    {
      "src": "identifier: j [66729,66730]",
      "dest": "identifier: j [67848,67849]"
    },
    {
      "src": "decimal_integer_literal: 0 [231691,231692]",
      "dest": "decimal_integer_literal: 0 [233185,233186]"
    },
    {
      "src": "line_comment: // Replacing [145876,145888]",
      "dest": "line_comment: // Replacing [147370,147382]"
    },
    {
      "src": "variable_declarator [24423,24491]",
      "dest": "variable_declarator [24423,24491]"
    },
    {
      "src": "formal_parameter [169918,169928]",
      "dest": "formal_parameter [171412,171422]"
    },
    {
      "src": "expression_statement [235488,235503]",
      "dest": "expression_statement [236982,236997]"
    },
    {
      "src": "block [31847,31987]",
      "dest": "block [31847,31987]"
    },
    {
      "src": "identifier: strip [14800,14805]",
      "dest": "identifier: strip [14800,14805]"
    },
    {
      "src": "arithmetic_operator: - [159217,159218]",
      "dest": "arithmetic_operator: - [160711,160712]"
    },
    {
      "src": "identifier: separator [103131,103140]",
      "dest": "identifier: separator [104625,104634]"
    },
    {
      "src": "field_access [64016,64028]",
      "dest": "field_access [65063,65075]"
    },
    {
      "src": "identifier: substringBetween [87744,87760]",
      "dest": "identifier: substringBetween [89238,89254]"
    },
    {
      "src": "identifier: cs1 [225242,225245]",
      "dest": "identifier: cs1 [226736,226739]"
    },
    {
      "src": "block [192701,192810]",
      "dest": "block [194195,194304]"
    },
    {
      "src": "method_invocation [222045,222057]",
      "dest": "method_invocation [223539,223551]"
    },
    {
      "src": "null_literal: null [73473,73477]",
      "dest": "null_literal: null [74967,74971]"
    },
    {
      "src": "identifier: searchChar [163742,163752]",
      "dest": "identifier: searchChar [165236,165246]"
    },
    {
      "src": "identifier: j [236017,236018]",
      "dest": "identifier: j [237511,237512]"
    },
    {
      "src": "type: int [188858,188861]",
      "dest": "type: int [190352,190355]"
    },
    {
      "src": "arithmetic_operator: - [107791,107792]",
      "dest": "arithmetic_operator: - [109285,109286]"
    },
    {
      "src": "argument_list [53173,53175]",
      "dest": "argument_list [53173,53175]"
    },
    {
      "src": "identifier: cs [57411,57413]",
      "dest": "identifier: cs [57751,57753]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets the substring after the first occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * A <code>null</code> separator will return the empty string if the\n     * input string is not <code>null</code>.</p>\n     *\n     * <p>If nothing is found, the empty string is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringAfter(null, *)      = null\n     * StringUtils.substringAfter(\"\", *)        = \"\"\n     * StringUtils.substringAfter(*, null)      = \"\"\n     * StringUtils.substringAfter(\"abc\", \"a\")   = \"bc\"\n     * StringUtils.substringAfter(\"abcba\", \"b\") = \"cba\"\n     * StringUtils.substringAfter(\"abc\", \"c\")   = \"\"\n     * StringUtils.substringAfter(\"abc\", \"d\")   = \"\"\n     * StringUtils.substringAfter(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring after the first occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [81799,83008]",
      "dest": "block_comment:     \n     * <p>Gets the substring after the first occurrence of a separator.\n     * The separator is not returned.</p>\n     *\n     * <p>A <code>null</code> string input will return <code>null</code>.\n     * An empty (\"\") string input will return the empty string.\n     * A <code>null</code> separator will return the empty string if the\n     * input string is not <code>null</code>.</p>\n     *\n     * <p>If nothing is found, the empty string is returned.</p>\n     *\n     * <pre>\n     * StringUtils.substringAfter(null, *)      = null\n     * StringUtils.substringAfter(\"\", *)        = \"\"\n     * StringUtils.substringAfter(*, null)      = \"\"\n     * StringUtils.substringAfter(\"abc\", \"a\")   = \"bc\"\n     * StringUtils.substringAfter(\"abcba\", \"b\") = \"cba\"\n     * StringUtils.substringAfter(\"abc\", \"c\")   = \"\"\n     * StringUtils.substringAfter(\"abc\", \"d\")   = \"\"\n     * StringUtils.substringAfter(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get a substring from, may be null\n     * @param separator  the String to search for, may be null\n     * @return the substring after the first occurrence of the separator,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [83293,84502]"
    },
    {
      "src": "type: String [147071,147077]",
      "dest": "type: String [148565,148571]"
    },
    {
      "src": "affectation_operator: = [127601,127602]",
      "dest": "affectation_operator: = [129095,129096]"
    },
    {
      "src": "new: new [110667,110670]",
      "dest": "new: new [112161,112164]"
    },
    {
      "src": "identifier: replaceEach [152661,152672]",
      "dest": "identifier: replaceEach [154155,154166]"
    },
    {
      "src": "identifier: i [182163,182164]",
      "dest": "identifier: i [183657,183658]"
    },
    {
      "src": "comparison_operator: == [244134,244136]",
      "dest": "comparison_operator: == [245628,245630]"
    },
    {
      "src": "assignment_expression [190619,190631]",
      "dest": "assignment_expression [192113,192125]"
    },
    {
      "src": "formal_parameters [103111,103150]",
      "dest": "formal_parameters [104605,104644]"
    },
    {
      "src": "identifier: len [79848,79851]",
      "dest": "identifier: len [81342,81345]"
    },
    {
      "src": "labeled_statement [61003,61285]",
      "dest": "labeled_statement [61462,62024]"
    },
    {
      "src": "block [205820,205944]",
      "dest": "block [207314,207438]"
    },
    {
      "src": "type: int [45029,45032]",
      "dest": "type: int [45029,45032]"
    },
    {
      "src": "expression_statement [215733,215758]",
      "dest": "expression_statement [217227,217252]"
    },
    {
      "src": "identifier: buf [175719,175722]",
      "dest": "identifier: buf [177213,177216]"
    },
    {
      "src": "comparison_operator: <= [190534,190536]",
      "dest": "comparison_operator: <= [192028,192030]"
    },
    {
      "src": "identifier: startPos [30845,30853]",
      "dest": "identifier: startPos [30845,30853]"
    },
    {
      "src": "array_creation_expression [174951,174973]",
      "dest": "array_creation_expression [176445,176467]"
    },
    {
      "src": "block [117142,117465]",
      "dest": "block [118636,118959]"
    },
    {
      "src": "block [213893,213960]",
      "dest": "block [215387,215454]"
    },
    {
      "src": "identifier: i [165939,165940]",
      "dest": "identifier: i [167433,167434]"
    },
    {
      "src": "identifier: indexOf [36543,36550]",
      "dest": "identifier: indexOf [36543,36550]"
    },
    {
      "src": "decimal_integer_literal: 0 [219940,219941]",
      "dest": "decimal_integer_literal: 0 [221434,221435]"
    },
    {
      "src": "null_literal: null [89556,89560]",
      "dest": "null_literal: null [91050,91054]"
    },
    {
      "src": "affectation_operator: = [39582,39583]",
      "dest": "affectation_operator: = [39582,39583]"
    },
    {
      "src": "identifier: end [20324,20327]",
      "dest": "identifier: end [20324,20327]"
    },
    {
      "src": "argument_list [53141,53143]",
      "dest": "argument_list [53141,53143]"
    },
    {
      "src": "method_invocation [110830,110843]",
      "dest": "method_invocation [112324,112337]"
    },
    {
      "src": "modifiers [221856,221869]",
      "dest": "modifiers [223350,223363]"
    },
    {
      "src": "method_invocation [150476,150502]",
      "dest": "method_invocation [151970,151996]"
    },
    {
      "src": "if_statement [168415,168522]",
      "dest": "if_statement [169909,170016]"
    },
    {
      "src": "binary_expression [228470,228496]",
      "dest": "binary_expression [229964,229990]"
    },
    {
      "src": "type: int [137103,137106]",
      "dest": "type: int [138597,138600]"
    },
    {
      "src": "null_literal: null [215550,215554]",
      "dest": "null_literal: null [217044,217048]"
    },
    {
      "src": "identifier: toString [214663,214671]",
      "dest": "identifier: toString [216157,216165]"
    },
    {
      "src": "affectation_operator: = [181614,181615]",
      "dest": "affectation_operator: = [183108,183109]"
    },
    {
      "src": "variable_declarator [91360,91391]",
      "dest": "variable_declarator [92854,92885]"
    },
    {
      "src": "binary_expression [91409,91416]",
      "dest": "binary_expression [92903,92910]"
    },
    {
      "src": "return_statement [49956,49979]",
      "dest": "return_statement [49956,49979]"
    },
    {
      "src": "null_literal: null [126179,126183]",
      "dest": "null_literal: null [127673,127677]"
    },
    {
      "src": "return_statement [190554,190565]",
      "dest": "return_statement [192048,192059]"
    },
    {
      "src": "affectation_operator: = [91151,91152]",
      "dest": "affectation_operator: = [92645,92646]"
    },
    {
      "src": "type: String [111359,111365]",
      "dest": "type: String [112853,112859]"
    },
    {
      "src": "identifier: str [79865,79868]",
      "dest": "identifier: str [81359,81362]"
    },
    {
      "src": "object_creation_expression [137427,137452]",
      "dest": "object_creation_expression [138921,138946]"
    },
    {
      "src": "visibility: public [81409,81415]",
      "dest": "visibility: public [82903,82909]"
    },
    {
      "src": "identifier: end [104975,104978]",
      "dest": "identifier: end [106469,106472]"
    },
    {
      "src": "binary_expression [20191,20231]",
      "dest": "binary_expression [20191,20231]"
    },
    {
      "src": "identifier: ArrayUtils [110598,110608]",
      "dest": "identifier: ArrayUtils [112092,112102]"
    },
    {
      "src": "identifier: str [222045,222048]",
      "dest": "identifier: str [223539,223542]"
    },
    {
      "src": "string_literal [25746,25806]",
      "dest": "string_literal [25746,25806]"
    },
    {
      "src": "null_literal: null [89249,89253]",
      "dest": "null_literal: null [90743,90747]"
    },
    {
      "src": "comparison_operator: == [79790,79792]",
      "dest": "comparison_operator: == [81284,81286]"
    },
    {
      "src": "static: static [187695,187701]",
      "dest": "static: static [189189,189195]"
    },
    {
      "src": "modifiers [171681,171694]",
      "dest": "modifiers [173175,173188]"
    },
    {
      "src": "new: new [186180,186183]",
      "dest": "new: new [187674,187677]"
    },
    {
      "src": "identifier: separatorChars [115478,115492]",
      "dest": "identifier: separatorChars [116972,116986]"
    },
    {
      "src": "modifiers [37753,37766]",
      "dest": "modifiers [37753,37766]"
    },
    {
      "src": "identifier: match [117886,117891]",
      "dest": "identifier: match [119380,119385]"
    },
    {
      "src": "increment_operator: -- [175346,175348]",
      "dest": "increment_operator: -- [176840,176842]"
    },
    {
      "src": "block [83174,83211]",
      "dest": "block [84668,84705]"
    },
    {
      "src": "identifier: str [36455,36458]",
      "dest": "identifier: str [36455,36458]"
    },
    {
      "src": "identifier: first [132865,132870]",
      "dest": "identifier: first [134359,134364]"
    },
    {
      "src": "identifier: EMPTY [231170,231175]",
      "dest": "identifier: EMPTY [232664,232669]"
    },
    {
      "src": "visibility: public [27405,27411]",
      "dest": "visibility: public [27405,27411]"
    },
    {
      "src": "modifiers [181326,181339]",
      "dest": "modifiers [182820,182833]"
    },
    {
      "src": "comparison_operator: == [223721,223723]",
      "dest": "comparison_operator: == [225215,225217]"
    },
    {
      "src": "visibility: public [149756,149762]",
      "dest": "visibility: public [151250,151256]"
    },
    {
      "src": "null_literal: null [163699,163703]",
      "dest": "null_literal: null [165193,165197]"
    },
    {
      "src": "method_invocation [170007,170019]",
      "dest": "method_invocation [171501,171513]"
    },
    {
      "src": "binary_expression [150385,150409]",
      "dest": "binary_expression [151879,151903]"
    },
    {
      "src": "identifier: list [118142,118146]",
      "dest": "identifier: list [119636,119640]"
    },
    {
      "src": "comparison_operator: < [161062,161063]",
      "dest": "comparison_operator: < [162556,162557]"
    },
    {
      "src": "affectation_operator: = [62443,62444]",
      "dest": "affectation_operator: = [63182,63183]"
    },
    {
      "src": "return_statement [39932,39941]",
      "dest": "return_statement [39932,39941]"
    },
    {
      "src": "true: true [49852,49856]",
      "dest": "true: true [49852,49856]"
    },
    {
      "src": "binary_expression [158144,158266]",
      "dest": "binary_expression [159638,159760]"
    },
    {
      "src": "formal_parameter [176609,176619]",
      "dest": "formal_parameter [178103,178113]"
    },
    {
      "src": "variable_declarator [205800,205805]",
      "dest": "variable_declarator [207294,207299]"
    },
    {
      "src": "method_declaration [77223,77505]",
      "dest": "method_declaration [78717,78999]"
    },
    {
      "src": "identifier: EMPTY [165719,165724]",
      "dest": "identifier: EMPTY [167213,167218]"
    },
    {
      "src": "type: String [31829,31835]",
      "dest": "type: String [31829,31835]"
    },
    {
      "src": "visibility: public [125094,125100]",
      "dest": "visibility: public [126588,126594]"
    },
    {
      "src": "if_statement [170334,170421]",
      "dest": "if_statement [171828,171915]"
    },
    {
      "src": "formal_parameter [213879,213891]",
      "dest": "formal_parameter [215373,215385]"
    },
    {
      "src": "argument_list [133114,133116]",
      "dest": "argument_list [134608,134610]"
    },
    {
      "src": "expression_statement [227932,227989]",
      "dest": "expression_statement [229426,229483]"
    },
    {
      "src": "\": \" [158506,158507]",
      "dest": "\": \" [160000,160001]"
    },
    {
      "src": "\": \" [181511,181512]",
      "dest": "\": \" [183005,183006]"
    },
    {
      "src": "type: int [185497,185500]",
      "dest": "type: int [186991,186994]"
    },
    {
      "src": "parenthesized_expression [49704,49729]",
      "dest": "parenthesized_expression [49704,49729]"
    },
    {
      "src": "type: int [42264,42267]",
      "dest": "type: int [42264,42267]"
    },
    {
      "src": "identifier: separatorChars [96810,96824]",
      "dest": "identifier: separatorChars [98304,98318]"
    },
    {
      "src": "identifier: sz [137212,137214]",
      "dest": "identifier: sz [138706,138708]"
    },
    {
      "src": "decimal_integer_literal: 0 [158296,158297]",
      "dest": "decimal_integer_literal: 0 [159790,159791]"
    },
    {
      "src": "type: String [18389,18395]",
      "dest": "type: String [18389,18395]"
    },
    {
      "src": "logical_operator: && [244194,244196]",
      "dest": "logical_operator: && [245688,245690]"
    },
    {
      "src": "return_statement [92816,92844]",
      "dest": "return_statement [94310,94338]"
    },
    {
      "src": "identifier: start [150491,150496]",
      "dest": "identifier: start [151985,151990]"
    },
    {
      "src": "identifier: shortestStrLen [227759,227773]",
      "dest": "identifier: shortestStrLen [229253,229267]"
    },
    {
      "src": "logical_operator: || [144591,144593]",
      "dest": "logical_operator: || [146085,146087]"
    },
    {
      "src": "identifier: cs [60784,60786]",
      "dest": "identifier: cs [61171,61173]"
    },
    {
      "src": "type: char [179955,179959]",
      "dest": "type: char [181449,181453]"
    },
    {
      "src": "identifier: cs [63764,63766]",
      "dest": "identifier: cs [64811,64813]"
    },
    {
      "src": "binary_expression [158805,158884]",
      "dest": "binary_expression [160299,160378]"
    },
    {
      "src": "identifier: ch [54748,54750]",
      "dest": "identifier: ch [58052,58054]"
    },
    {
      "src": "identifier: toArray [91636,91643]",
      "dest": "identifier: toArray [93130,93137]"
    },
    {
      "src": "static: static [22939,22945]",
      "dest": "static: static [22939,22945]"
    },
    {
      "src": "binary_expression [171768,171785]",
      "dest": "binary_expression [173262,173279]"
    },
    {
      "src": "identifier: i [117807,117808]",
      "dest": "identifier: i [119301,119302]"
    },
    {
      "src": "block [236079,236313]",
      "dest": "block [237573,237807]"
    },
    {
      "src": "decimal_integer_literal: 0 [185758,185759]",
      "dest": "decimal_integer_literal: 0 [187252,187253]"
    },
    {
      "src": "decimal_integer_literal: 1 [144691,144692]",
      "dest": "decimal_integer_literal: 1 [146185,146186]"
    },
    {
      "src": "argument_list [239938,239940]",
      "dest": "argument_list [241432,241434]"
    },
    {
      "src": "method_declaration [95131,95262]",
      "dest": "method_declaration [96625,96756]"
    },
    {
      "src": "local_variable_declaration [222302,222352]",
      "dest": "local_variable_declaration [223796,223846]"
    },
    {
      "src": "if_statement [117045,117546]",
      "dest": "if_statement [118539,119040]"
    },
    {
      "src": "method_invocation [209276,209312]",
      "dest": "method_invocation [210770,210806]"
    },
    {
      "src": "identifier: pads [184004,184008]",
      "dest": "identifier: pads [185498,185502]"
    },
    {
      "src": "identifier: c [123440,123441]",
      "dest": "identifier: c [124934,124935]"
    },
    {
      "src": "visibility: public [138654,138660]",
      "dest": "visibility: public [140148,140154]"
    },
    {
      "src": "return_statement [195592,195613]",
      "dest": "return_statement [197086,197107]"
    },
    {
      "src": "identifier: strs [215691,215695]",
      "dest": "identifier: strs [217185,217189]"
    },
    {
      "src": "if_statement [39411,39496]",
      "dest": "if_statement [39411,39496]"
    },
    {
      "src": "identifier: Character [208211,208220]",
      "dest": "identifier: Character [209705,209714]"
    },
    {
      "src": "arithmetic_operator: + [131284,131285]",
      "dest": "arithmetic_operator: + [132778,132779]"
    },
    {
      "src": "binary_expression [193713,193724]",
      "dest": "binary_expression [195207,195218]"
    },
    {
      "src": "method_invocation [78540,78552]",
      "dest": "method_invocation [80034,80046]"
    },
    {
      "src": "identifier: tokenStart [124183,124193]",
      "dest": "identifier: tokenStart [125677,125687]"
    },
    {
      "src": "formal_parameter [221906,221919]",
      "dest": "formal_parameter [223400,223413]"
    },
    {
      "src": "modifiers [227098,227111]",
      "dest": "modifiers [228592,228605]"
    },
    {
      "src": "identifier: str [141800,141803]",
      "dest": "identifier: str [143294,143297]"
    },
    {
      "src": "comparison_operator: == [231143,231145]",
      "dest": "comparison_operator: == [232637,232639]"
    },
    {
      "src": "method_invocation [104380,104403]",
      "dest": "method_invocation [105874,105897]"
    },
    {
      "src": "decimal_integer_literal: 1 [20377,20378]",
      "dest": "decimal_integer_literal: 1 [20377,20378]"
    },
    {
      "src": "formal_parameters [40860,40889]",
      "dest": "formal_parameters [40860,40889]"
    },
    {
      "src": "expression_statement [105892,105902]",
      "dest": "expression_statement [107386,107396]"
    },
    {
      "src": "identifier: cs [59510,59512]",
      "dest": "identifier: cs [59897,59899]"
    },
    {
      "src": "formal_parameter [187716,187726]",
      "dest": "formal_parameter [189210,189220]"
    },
    {
      "src": "formal_parameter [215470,215480]",
      "dest": "formal_parameter [216964,216974]"
    },
    {
      "src": "identifier: i [178198,178199]",
      "dest": "identifier: i [179692,179693]"
    },
    {
      "src": "false: false [206899,206904]",
      "dest": "false: false [208393,208398]"
    },
    {
      "src": "parenthesized_expression [18487,18510]",
      "dest": "parenthesized_expression [18487,18510]"
    },
    {
      "src": "if_statement [239906,239979]",
      "dest": "if_statement [241400,241473]"
    },
    {
      "src": "identifier: lastMatch [111141,111150]",
      "dest": "identifier: lastMatch [112635,112644]"
    },
    {
      "src": "method_invocation [116636,116648]",
      "dest": "method_invocation [118130,118142]"
    },
    {
      "src": "if_statement [170437,170497]",
      "dest": "if_statement [171931,171991]"
    },
    {
      "src": "identifier: i [202173,202174]",
      "dest": "identifier: i [203667,203668]"
    },
    {
      "src": "identifier: chars [145774,145779]",
      "dest": "identifier: chars [147268,147273]"
    },
    {
      "src": "binary_expression [168187,168196]",
      "dest": "binary_expression [169681,169690]"
    },
    {
      "src": "identifier: charAt [196925,196931]",
      "dest": "identifier: charAt [198419,198425]"
    },
    {
      "src": "block [61136,61253]",
      "dest": "block [61595,61992]"
    },
    {
      "src": "argument_list [14805,14816]",
      "dest": "argument_list [14805,14816]"
    },
    {
      "src": "variable_declarator [116630,116648]",
      "dest": "variable_declarator [118124,118142]"
    },
    {
      "src": "identifier: endsWithIgnoreCase [243454,243472]",
      "dest": "identifier: endsWithIgnoreCase [244948,244966]"
    },
    {
      "src": "identifier: newArr [23219,23225]",
      "dest": "identifier: newArr [23219,23225]"
    },
    {
      "src": "identifier: list [117370,117374]",
      "dest": "identifier: list [118864,118868]"
    },
    {
      "src": "block [170379,170421]",
      "dest": "block [171873,171915]"
    },
    {
      "src": "binary_expression [170103,170121]",
      "dest": "binary_expression [171597,171615]"
    },
    {
      "src": "local_variable_declaration [8804,8814]",
      "dest": "local_variable_declaration [8804,8814]"
    },
    {
      "src": "block_comment:     \n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */ [59782,60734]",
      "dest": "block_comment:     \n     * <p>Searches a CharSequence to find the first index of any\n     * character not in the given set of characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>-1</code>.\n     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfAnyBut(null, *)           = -1\n     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n     * StringUtils.indexOfAnyBut(*, null)           = -1\n     * StringUtils.indexOfAnyBut(*, [])             = -1\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param searchChars  the chars to search for, may be null\n     * @return the index of any of the chars, -1 if no match or null input\n     * @since 2.0\n     */ [60169,61121]"
    },
    {
      "src": "comparison_operator: >= [49805,49807]",
      "dest": "comparison_operator: >= [49805,49807]"
    },
    {
      "src": "type: CharSequence [201949,201961]",
      "dest": "type: CharSequence [203443,203455]"
    },
    {
      "src": "formal_parameter [98066,98076]",
      "dest": "formal_parameter [99560,99570]"
    },
    {
      "src": "identifier: searchChars [66488,66499]",
      "dest": "identifier: searchChars [67535,67546]"
    },
    {
      "src": "type: char [109650,109654]",
      "dest": "type: char [111144,111148]"
    },
    {
      "src": "decimal_integer_literal: 1 [101346,101347]",
      "dest": "decimal_integer_literal: 1 [102840,102841]"
    },
    {
      "src": "line_comment: // ch is in the Basic Multilingual Plane [66907,66947]",
      "dest": "line_comment: // ch is in the Basic Multilingual Plane [68379,68419]"
    },
    {
      "src": "block [106185,106364]",
      "dest": "block [107679,107858]"
    },
    {
      "src": "decimal_integer_literal: 0 [137181,137182]",
      "dest": "decimal_integer_literal: 0 [138675,138676]"
    },
    {
      "src": "identifier: lastMatch [117168,117177]",
      "dest": "identifier: lastMatch [118662,118671]"
    },
    {
      "src": "comparison_operator: == [123148,123150]",
      "dest": "comparison_operator: == [124642,124644]"
    },
    {
      "src": "null_literal: null [174459,174463]",
      "dest": "null_literal: null [175953,175957]"
    },
    {
      "src": "type: char[] [185966,185972]",
      "dest": "type: char[] [187460,187466]"
    },
    {
      "src": "affectation_operator: = [150146,150147]",
      "dest": "affectation_operator: = [151640,151641]"
    },
    {
      "src": "variable_declarator [91018,91043]",
      "dest": "variable_declarator [92512,92537]"
    },
    {
      "src": "identifier: first [132668,132673]",
      "dest": "identifier: first [134162,134167]"
    },
    {
      "src": "identifier: startsWithIgnoreCase [239117,239137]",
      "dest": "identifier: startsWithIgnoreCase [240611,240631]"
    },
    {
      "src": "line_comment: // Difference [222544,222557]",
      "dest": "line_comment: // Difference [224038,224051]"
    },
    {
      "src": "identifier: str [219702,219705]",
      "dest": "identifier: str [221196,221199]"
    },
    {
      "src": "binary_expression [163665,163676]",
      "dest": "binary_expression [165159,165170]"
    },
    {
      "src": "binary_expression [222257,222283]",
      "dest": "binary_expression [223751,223777]"
    },
    {
      "src": "static: static [200817,200823]",
      "dest": "static: static [202311,202317]"
    },
    {
      "src": "parenthesized_expression [134295,134310]",
      "dest": "parenthesized_expression [135789,135804]"
    },
    {
      "src": "method_invocation [123135,123147]",
      "dest": "method_invocation [124629,124641]"
    },
    {
      "src": "identifier: increase [160722,160730]",
      "dest": "identifier: increase [162216,162224]"
    },
    {
      "src": "binary_expression [185670,185702]",
      "dest": "binary_expression [187164,187196]"
    },
    {
      "src": "type: String [176565,176571]",
      "dest": "type: String [178059,178065]"
    },
    {
      "src": "method_declaration [113271,113418]",
      "dest": "method_declaration [114765,114912]"
    },
    {
      "src": "identifier: padLen [182212,182218]",
      "dest": "identifier: padLen [183706,183712]"
    },
    {
      "src": "assignment_expression [168272,168283]",
      "dest": "assignment_expression [169766,169777]"
    },
    {
      "src": "identifier: close [90839,90844]",
      "dest": "identifier: close [92333,92338]"
    },
    {
      "src": "static: static [6246,6252]",
      "dest": "static: static [6246,6252]"
    },
    {
      "src": "method_invocation [118841,118874]",
      "dest": "method_invocation [120335,120368]"
    },
    {
      "src": "argument_list [27525,27530]",
      "dest": "argument_list [27525,27530]"
    },
    {
      "src": "argument_list [215778,215799]",
      "dest": "argument_list [217272,217293]"
    },
    {
      "src": "affectation_operator: = [210284,210285]",
      "dest": "affectation_operator: = [211778,211779]"
    },
    {
      "src": "identifier: str [14833,14836]",
      "dest": "identifier: str [14833,14836]"
    },
    {
      "src": "type: String [119274,119280]",
      "dest": "type: String [120768,120774]"
    },
    {
      "src": "method_invocation [220292,220336]",
      "dest": "method_invocation [221786,221830]"
    },
    {
      "src": "identifier: str [145524,145527]",
      "dest": "identifier: str [147018,147021]"
    },
    {
      "src": "method_declaration [217298,217408]",
      "dest": "method_declaration [218792,218902]"
    },
    {
      "src": "identifier: i [161568,161569]",
      "dest": "identifier: i [163062,163063]"
    },
    {
      "src": "if_statement [203117,203170]",
      "dest": "if_statement [204611,204664]"
    },
    {
      "src": "identifier: str [95224,95227]",
      "dest": "identifier: str [96718,96721]"
    },
    {
      "src": "identifier: replace [148327,148334]",
      "dest": "identifier: replace [149821,149828]"
    },
    {
      "src": "argument_list [210341,210355]",
      "dest": "argument_list [211835,211849]"
    },
    {
      "src": "identifier: repeat [176701,176707]",
      "dest": "identifier: repeat [178195,178201]"
    },
    {
      "src": "type: char [170252,170256]",
      "dest": "type: char [171746,171750]"
    },
    {
      "src": "identifier: suffix [244145,244151]",
      "dest": "identifier: suffix [245639,245645]"
    },
    {
      "src": "affectation_operator: = [198504,198505]",
      "dest": "affectation_operator: = [199998,199999]"
    },
    {
      "src": "parenthesized_expression [123603,123697]",
      "dest": "parenthesized_expression [125097,125191]"
    },
    {
      "src": "method_invocation [196854,197018]",
      "dest": "method_invocation [198348,198512]"
    },
    {
      "src": "affectation_operator: = [73619,73620]",
      "dest": "affectation_operator: = [75113,75114]"
    },
    {
      "src": "local_variable_declaration [39569,39624]",
      "dest": "local_variable_declaration [39569,39624]"
    },
    {
      "src": "parenthesized_expression [73465,73478]",
      "dest": "parenthesized_expression [74959,74972]"
    },
    {
      "src": "null_literal: null [219433,219437]",
      "dest": "null_literal: null [220927,220931]"
    },
    {
      "src": "comparison_operator: > [219663,219664]",
      "dest": "comparison_operator: > [221157,221158]"
    },
    {
      "src": "formal_parameter [240958,240980]",
      "dest": "formal_parameter [242452,242474]"
    },
    {
      "src": "argument_list [241235,241257]",
      "dest": "argument_list [242729,242751]"
    },
    {
      "src": "line_comment: // find the position with the first difference across all strings [228344,228409]",
      "dest": "line_comment: // find the position with the first difference across all strings [229838,229903]"
    },
    {
      "src": "argument_list [220165,220167]",
      "dest": "argument_list [221659,221661]"
    },
    {
      "src": "increment_operator: ++ [145783,145785]",
      "dest": "increment_operator: ++ [147277,147279]"
    },
    {
      "src": "local_variable_declaration [182085,182124]",
      "dest": "local_variable_declaration [183579,183618]"
    },
    {
      "src": "binary_expression [54795,54808]",
      "dest": "binary_expression [54867,54880]"
    },
    {
      "src": "type: String[] [122998,123006]",
      "dest": "type: String[] [124492,124500]"
    },
    {
      "src": "argument_list [195656,195664]",
      "dest": "argument_list [197150,197158]"
    },
    {
      "src": "block [73452,73857]",
      "dest": "block [74946,75351]"
    },
    {
      "src": "block [116672,116733]",
      "dest": "block [118166,118227]"
    },
    {
      "src": "argument_list [137052,137057]",
      "dest": "argument_list [138546,138551]"
    },
    {
      "src": "new: new [158448,158451]",
      "dest": "new: new [159942,159945]"
    },
    {
      "src": "false: false [118085,118090]",
      "dest": "false: false [119579,119584]"
    },
    {
      "src": "field_access [25027,25050]",
      "dest": "field_access [25027,25050]"
    },
    {
      "src": "type: char [40873,40877]",
      "dest": "type: char [40873,40877]"
    },
    {
      "src": "identifier: cs [201980,201982]",
      "dest": "identifier: cs [203474,203476]"
    },
    {
      "src": "binary_expression [90799,90845]",
      "dest": "binary_expression [92293,92339]"
    },
    {
      "src": "local_variable_declaration [57748,57758]",
      "dest": "local_variable_declaration [54856,54866]"
    },
    {
      "src": "continue: continue [160571,160579]",
      "dest": "continue: continue [162065,162073]"
    },
    {
      "src": "formal_parameter [10650,10660]",
      "dest": "formal_parameter [10650,10660]"
    },
    {
      "src": "identifier: EMPTY [231570,231575]",
      "dest": "identifier: EMPTY [233064,233069]"
    },
    {
      "src": "identifier: strip [17082,17087]",
      "dest": "identifier: strip [17082,17087]"
    },
    {
      "src": "identifier: isEmpty [140311,140318]",
      "dest": "identifier: isEmpty [141805,141812]"
    },
    {
      "src": "static: static [145456,145462]",
      "dest": "static: static [146950,146956]"
    },
    {
      "src": "unary_expression [6137,6139]",
      "dest": "unary_expression [6137,6139]"
    },
    {
      "src": "identifier: separator [104552,104561]",
      "dest": "identifier: separator [106046,106055]"
    },
    {
      "src": "identifier: invalidChars [68199,68211]",
      "dest": "identifier: invalidChars [69693,69705]"
    },
    {
      "src": "return_statement [169972,169983]",
      "dest": "return_statement [171466,171477]"
    },
    {
      "src": "argument_list [161108,161124]",
      "dest": "argument_list [162602,162618]"
    },
    {
      "src": "identifier: isEmpty [138744,138751]",
      "dest": "identifier: isEmpty [140238,140245]"
    },
    {
      "src": "decimal_integer_literal: 0 [75814,75815]",
      "dest": "decimal_integer_literal: 0 [77308,77309]"
    },
    {
      "src": "parenthesized_expression [170080,170122]",
      "dest": "parenthesized_expression [171574,171616]"
    },
    {
      "src": "method_invocation [203282,203294]",
      "dest": "method_invocation [204776,204788]"
    },
    {
      "src": "block [53222,53341]",
      "dest": "block [53222,53341]"
    },
    {
      "src": "identifier: padding [182276,182283]",
      "dest": "identifier: padding [183770,183777]"
    },
    {
      "src": "binary_expression [18630,18645]",
      "dest": "binary_expression [18630,18645]"
    },
    {
      "src": "binary_expression [63870,63883]",
      "dest": "binary_expression [64917,64930]"
    },
    {
      "src": "array_access [227882,227888]",
      "dest": "array_access [229376,229382]"
    },
    {
      "src": "method_invocation [133102,133116]",
      "dest": "method_invocation [134596,134610]"
    },
    {
      "src": "parenthesized_expression [222070,222089]",
      "dest": "parenthesized_expression [223564,223583]"
    },
    {
      "src": "identifier: str [176882,176885]",
      "dest": "identifier: str [178376,178379]"
    },
    {
      "src": "arithmetic_operator: + [176886,176887]",
      "dest": "arithmetic_operator: + [178380,178381]"
    },
    {
      "src": "variable_declarator [110769,110786]",
      "dest": "variable_declarator [112263,112280]"
    },
    {
      "src": "argument_list [191978,191980]",
      "dest": "argument_list [193472,193474]"
    },
    {
      "src": "type: boolean [8644,8651]",
      "dest": "type: boolean [8644,8651]"
    },
    {
      "src": "identifier: array [127462,127467]",
      "dest": "identifier: array [128956,128961]"
    },
    {
      "src": "binary_expression [53163,53181]",
      "dest": "binary_expression [53163,53181]"
    },
    {
      "src": "identifier: pos [81648,81651]",
      "dest": "identifier: pos [83142,83145]"
    },
    {
      "src": "arithmetic_operator: + [89391,89392]",
      "dest": "arithmetic_operator: + [90885,90886]"
    },
    {
      "src": "identifier: prefix [239910,239916]",
      "dest": "identifier: prefix [241404,241410]"
    },
    {
      "src": "type: int [79763,79766]",
      "dest": "type: int [81257,81260]"
    },
    {
      "src": "argument_list [8098,8102]",
      "dest": "argument_list [8098,8102]"
    },
    {
      "src": "if_statement [159720,159993]",
      "dest": "if_statement [161214,161487]"
    },
    {
      "src": "identifier: start [73636,73641]",
      "dest": "identifier: start [75130,75135]"
    },
    {
      "src": "visibility: public [84607,84613]",
      "dest": "visibility: public [86101,86107]"
    },
    {
      "src": "identifier: i [23180,23181]",
      "dest": "identifier: i [23180,23181]"
    },
    {
      "src": "identifier: d [236241,236242]",
      "dest": "identifier: d [237735,237736]"
    },
    {
      "src": "block [135392,135428]",
      "dest": "block [136886,136922]"
    },
    {
      "src": "type: int [159170,159173]",
      "dest": "type: int [160664,160667]"
    },
    {
      "src": "parenthesized_expression [117837,117859]",
      "dest": "parenthesized_expression [119331,119353]"
    },
    {
      "src": "method_invocation [138853,138883]",
      "dest": "method_invocation [140347,140377]"
    },
    {
      "src": "variable_declarator [132568,132591]",
      "dest": "variable_declarator [134062,134085]"
    },
    {
      "src": "identifier: i [204485,204486]",
      "dest": "identifier: i [205979,205980]"
    },
    {
      "src": "formal_parameter [198158,198168]",
      "dest": "formal_parameter [199652,199662]"
    },
    {
      "src": "local_variable_declaration [198352,198364]",
      "dest": "local_variable_declaration [199846,199858]"
    },
    {
      "src": "decimal_integer_literal: 1 [159159,159160]",
      "dest": "decimal_integer_literal: 1 [160653,160654]"
    },
    {
      "src": "null_literal: null [130769,130773]",
      "dest": "null_literal: null [132263,132267]"
    },
    {
      "src": "throws [177973,178005]",
      "dest": "throws [179467,179499]"
    },
    {
      "src": "argument_list [75993,75995]",
      "dest": "argument_list [77487,77489]"
    },
    {
      "src": "formal_parameters [71769,71802]",
      "dest": "formal_parameters [73263,73296]"
    },
    {
      "src": "identifier: invalidChars [68066,68078]",
      "dest": "identifier: invalidChars [69560,69572]"
    },
    {
      "src": "comparison_operator: == [231120,231122]",
      "dest": "comparison_operator: == [232614,232616]"
    },
    {
      "src": "identifier: length [222154,222160]",
      "dest": "identifier: length [223648,223654]"
    },
    {
      "src": "block [59534,59671]",
      "dest": "block [59921,60058]"
    },
    {
      "src": "method_declaration [69687,70425]",
      "dest": "method_declaration [71181,71919]"
    },
    {
      "src": "method_invocation [180295,180329]",
      "dest": "method_invocation [181789,181823]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, separator specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChar  the character used as the delimiter\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.0\n     */ [92856,93872]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, separator specified.\n     * This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null, *)         = null\n     * StringUtils.split(\"\", *)           = []\n     * StringUtils.split(\"a.b.c\", '.')    = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a..b.c\", '.')   = [\"a\", \"b\", \"c\"]\n     * StringUtils.split(\"a:b:c\", '.')    = [\"a:b:c\"]\n     * StringUtils.split(\"a b c\", ' ')    = [\"a\", \"b\", \"c\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separatorChar  the character used as the delimiter\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.0\n     */ [94350,95366]"
    },
    {
      "src": "method_invocation [190588,190603]",
      "dest": "method_invocation [192082,192097]"
    },
    {
      "src": "binary_expression [219399,219410]",
      "dest": "binary_expression [220893,220904]"
    },
    {
      "src": "comparison_operator: == [168093,168095]",
      "dest": "comparison_operator: == [169587,169589]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [40028,40101]",
      "dest": "line_comment: //----------------------------------------------------------------------- [40028,40101]"
    },
    {
      "src": "argument_list [18892,18899]",
      "dest": "argument_list [18892,18899]"
    },
    {
      "src": "identifier: end [89425,89428]",
      "dest": "identifier: end [90919,90922]"
    },
    {
      "src": "comparison_operator: > [79863,79864]",
      "dest": "comparison_operator: > [81357,81358]"
    },
    {
      "src": "method_invocation [134370,134388]",
      "dest": "method_invocation [135864,135882]"
    },
    {
      "src": "block [63899,63936]",
      "dest": "block [64946,64983]"
    },
    {
      "src": "arithmetic_operator: - [127613,127614]",
      "dest": "arithmetic_operator: - [129107,129108]"
    },
    {
      "src": "line_comment: // IndexOfAny strings [68239,68260]",
      "dest": "line_comment: // IndexOfAny strings [69733,69754]"
    },
    {
      "src": "formal_parameter [36031,36041]",
      "dest": "formal_parameter [36031,36041]"
    },
    {
      "src": "formal_parameter [107739,107749]",
      "dest": "formal_parameter [109233,109243]"
    },
    {
      "src": "identifier: camelCase [123048,123057]",
      "dest": "identifier: camelCase [124542,124551]"
    },
    {
      "src": "block [134553,134601]",
      "dest": "block [136047,136095]"
    },
    {
      "src": "decimal_integer_literal: 1 [6138,6139]",
      "dest": "decimal_integer_literal: 1 [6138,6139]"
    },
    {
      "src": "identifier: str [83230,83233]",
      "dest": "identifier: str [84724,84727]"
    },
    {
      "src": "arithmetic_operator: + [39620,39621]",
      "dest": "arithmetic_operator: + [39620,39621]"
    },
    {
      "src": "parenthesized_expression [235315,235322]",
      "dest": "parenthesized_expression [236809,236816]"
    },
    {
      "src": "static: static [95138,95144]",
      "dest": "static: static [96632,96638]"
    },
    {
      "src": "argument_list [8744,8746]",
      "dest": "argument_list [8744,8746]"
    },
    {
      "src": "identifier: repeat [176689,176695]",
      "dest": "identifier: repeat [178183,178189]"
    },
    {
      "src": "block [70299,70341]",
      "dest": "block [71793,71835]"
    },
    {
      "src": "parenthesized_expression [77404,77425]",
      "dest": "parenthesized_expression [78898,78919]"
    },
    {
      "src": "identifier: i [161075,161076]",
      "dest": "identifier: i [162569,162570]"
    },
    {
      "src": "visibility: public [187688,187694]",
      "dest": "visibility: public [189182,189188]"
    },
    {
      "src": "method_invocation [104463,104509]",
      "dest": "method_invocation [105957,106003]"
    },
    {
      "src": "identifier: ordinal [45143,45150]",
      "dest": "identifier: ordinal [45143,45150]"
    },
    {
      "src": "argument_list [106409,106440]",
      "dest": "argument_list [107903,107934]"
    },
    {
      "src": "parenthesized_expression [81489,81524]",
      "dest": "parenthesized_expression [82983,83018]"
    },
    {
      "src": "formal_parameter [46553,46565]",
      "dest": "formal_parameter [46553,46565]"
    },
    {
      "src": "binary_expression [219943,219955]",
      "dest": "binary_expression [221437,221449]"
    },
    {
      "src": "formal_parameter [77249,77259]",
      "dest": "formal_parameter [78743,78753]"
    },
    {
      "src": "type: String [162395,162401]",
      "dest": "type: String [163889,163895]"
    },
    {
      "src": "comparison_operator: == [75620,75622]",
      "dest": "comparison_operator: == [77114,77116]"
    },
    {
      "src": "affectation_operator: = [174801,174802]",
      "dest": "affectation_operator: = [176295,176296]"
    },
    {
      "src": "argument_list [84910,84918]",
      "dest": "argument_list [86404,86412]"
    },
    {
      "src": "formal_parameter [183904,183912]",
      "dest": "formal_parameter [185398,185406]"
    },
    {
      "src": "local_variable_declaration [173178,173217]",
      "dest": "local_variable_declaration [174672,174711]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [43431,43446]",
      "dest": "identifier: INDEX_NOT_FOUND [43431,43446]"
    },
    {
      "src": "identifier: contains [51823,51831]",
      "dest": "identifier: contains [51823,51831]"
    },
    {
      "src": "\": \" [25093,25094]",
      "dest": "\": \" [25093,25094]"
    },
    {
      "src": "parenthesized_expression [134407,134426]",
      "dest": "parenthesized_expression [135901,135920]"
    },
    {
      "src": "array_access [159514,159532]",
      "dest": "array_access [161008,161026]"
    },
    {
      "src": "identifier: i [161781,161782]",
      "dest": "identifier: i [163275,163276]"
    },
    {
      "src": "line_comment: // there were no common initial characters [231508,231550]",
      "dest": "line_comment: // there were no common initial characters [233002,233044]"
    },
    {
      "src": "block [68130,68166]",
      "dest": "block [69624,69660]"
    },
    {
      "src": "method_declaration [145449,145870]",
      "dest": "method_declaration [146943,147364]"
    },
    {
      "src": "type: char [54743,54747]",
      "dest": "type: char [58047,58051]"
    },
    {
      "src": "assignment_expression [227759,227777]",
      "dest": "assignment_expression [229253,229271]"
    },
    {
      "src": "identifier: middle [221913,221919]",
      "dest": "identifier: middle [223407,223413]"
    },
    {
      "src": "identifier: str [42369,42372]",
      "dest": "identifier: str [42369,42372]"
    },
    {
      "src": "identifier: length [219743,219749]",
      "dest": "identifier: length [221237,221243]"
    },
    {
      "src": "binary_expression [59548,59567]",
      "dest": "binary_expression [59935,59954]"
    },
    {
      "src": "block [130746,131640]",
      "dest": "block [132240,133134]"
    },
    {
      "src": "?: ? [155296,155297]",
      "dest": "?: ? [156790,156791]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, separator string specified.\n     * Returns a maximum of <code>max</code> substrings.</p>\n     *\n     * <p>The separator(s) will not be included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparator(null, *, *)               = null\n     * StringUtils.splitByWholeSeparator(\"\", *, *)                 = []\n     * StringUtils.splitByWholeSeparator(\"ab de fg\", null, 0)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab   de fg\", null, 0)    = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab:cd:ef\", \":\", 2)       = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\", 5) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\", 2) = [\"ab\", \"cd-!-ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     */ [98183,99643]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, separator string specified.\n     * Returns a maximum of <code>max</code> substrings.</p>\n     *\n     * <p>The separator(s) will not be included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparator(null, *, *)               = null\n     * StringUtils.splitByWholeSeparator(\"\", *, *)                 = []\n     * StringUtils.splitByWholeSeparator(\"ab de fg\", null, 0)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab   de fg\", null, 0)    = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab:cd:ef\", \":\", 2)       = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\", 5) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\", 2) = [\"ab\", \"cd-!-ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     */ [99677,101137]"
    },
    {
      "src": "comparison_operator: != [228695,228697]",
      "dest": "comparison_operator: != [230189,230191]"
    },
    {
      "src": "return_statement [143507,143518]",
      "dest": "return_statement [145001,145012]"
    },
    {
      "src": "assignment_expression [175377,175393]",
      "dest": "assignment_expression [176871,176887]"
    },
    {
      "src": "identifier: length [221925,221931]",
      "dest": "identifier: length [223419,223425]"
    },
    {
      "src": "type: int [179043,179046]",
      "dest": "type: int [180537,180540]"
    },
    {
      "src": "identifier: end [168501,168504]",
      "dest": "identifier: end [169995,169998]"
    },
    {
      "src": "character_literal: ' ' [183077,183080]",
      "dest": "character_literal: ' ' [184571,184574]"
    },
    {
      "src": "type: String [84648,84654]",
      "dest": "type: String [86142,86148]"
    },
    {
      "src": "assignment_expression [105550,105577]",
      "dest": "assignment_expression [107044,107071]"
    },
    {
      "src": "unary_expression [92840,92842]",
      "dest": "unary_expression [94334,94336]"
    },
    {
      "src": "visibility: public [101192,101198]",
      "dest": "visibility: public [102686,102692]"
    },
    {
      "src": "variable_declarator [165782,165824]",
      "dest": "variable_declarator [167276,167318]"
    },
    {
      "src": "type: Object[] [125120,125128]",
      "dest": "type: Object[] [126614,126622]"
    },
    {
      "src": "type: int [57748,57751]",
      "dest": "type: int [54856,54859]"
    },
    {
      "src": "identifier: splitByWholeSeparator [98044,98065]",
      "dest": "identifier: splitByWholeSeparator [99538,99559]"
    },
    {
      "src": "true: true [45152,45156]",
      "dest": "true: true [45152,45156]"
    },
    {
      "src": "method_invocation [198759,198776]",
      "dest": "method_invocation [200253,200270]"
    },
    {
      "src": "identifier: sub [199800,199803]",
      "dest": "identifier: sub [201294,201297]"
    },
    {
      "src": "static: static [213823,213829]",
      "dest": "static: static [215317,215323]"
    },
    {
      "src": "identifier: cs [186670,186672]",
      "dest": "identifier: cs [188164,188166]"
    },
    {
      "src": "parenthesized_expression [131187,131259]",
      "dest": "parenthesized_expression [132681,132753]"
    },
    {
      "src": "return_statement [136251,136263]",
      "dest": "return_statement [137745,137757]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [62655,62670]",
      "dest": "identifier: INDEX_NOT_FOUND [63702,63717]"
    },
    {
      "src": "continue: continue [161701,161709]",
      "dest": "continue: continue [163195,163203]"
    },
    {
      "src": "identifier: bufSize [127838,127845]",
      "dest": "identifier: bufSize [129332,129339]"
    },
    {
      "src": "static: static [27412,27418]",
      "dest": "static: static [27412,27418]"
    },
    {
      "src": "comparison_operator: == [170020,170022]",
      "dest": "comparison_operator: == [171514,171516]"
    },
    {
      "src": "method_invocation [222361,222405]",
      "dest": "method_invocation [223855,223899]"
    },
    {
      "src": "affectation_operator: = [211285,211286]",
      "dest": "affectation_operator: = [212779,212780]"
    },
    {
      "src": "method_invocation [86548,86566]",
      "dest": "method_invocation [88042,88060]"
    },
    {
      "src": "method_invocation [196900,196935]",
      "dest": "method_invocation [198394,198429]"
    },
    {
      "src": "identifier: buf [134212,134215]",
      "dest": "identifier: buf [135706,135709]"
    },
    {
      "src": "binary_expression [159856,159877]",
      "dest": "binary_expression [161350,161371]"
    },
    {
      "src": "block [209257,209379]",
      "dest": "block [210751,210873]"
    },
    {
      "src": "comparison_operator: == [212990,212992]",
      "dest": "comparison_operator: == [214484,214486]"
    },
    {
      "src": "local_variable_declaration [160607,160674]",
      "dest": "local_variable_declaration [162101,162168]"
    },
    {
      "src": "return_statement [132640,132675]",
      "dest": "return_statement [134134,134169]"
    },
    {
      "src": "formal_parameter [81458,81474]",
      "dest": "formal_parameter [82952,82968]"
    },
    {
      "src": "comparison_operator: <= [174494,174496]",
      "dest": "comparison_operator: <= [175988,175990]"
    },
    {
      "src": "type: int [71944,71947]",
      "dest": "type: int [73438,73441]"
    },
    {
      "src": "affectation_operator: = [225176,225177]",
      "dest": "affectation_operator: = [226670,226671]"
    },
    {
      "src": "identifier: array [130760,130765]",
      "dest": "identifier: array [132254,132259]"
    },
    {
      "src": "argument_list [165909,165920]",
      "dest": "argument_list [167403,167414]"
    },
    {
      "src": "comparison_operator: < [123438,123439]",
      "dest": "comparison_operator: < [124932,124933]"
    },
    {
      "src": "if_statement [195463,195516]",
      "dest": "if_statement [196957,197010]"
    },
    {
      "src": "false: false [35225,35230]",
      "dest": "false: false [35225,35230]"
    },
    {
      "src": "identifier: separatorChar [215709,215722]",
      "dest": "identifier: separatorChar [217203,217216]"
    },
    {
      "src": "binary_expression [127604,127625]",
      "dest": "binary_expression [129098,129119]"
    },
    {
      "src": "argument_list [173070,173072]",
      "dest": "argument_list [174564,174566]"
    },
    {
      "src": "modifiers [6238,6258]",
      "dest": "modifiers [6238,6258]"
    },
    {
      "src": "expression_statement [133045,133061]",
      "dest": "expression_statement [134539,134555]"
    },
    {
      "src": "if_statement [57800,58355]",
      "dest": "if_statement [54905,55317]"
    },
    {
      "src": "block [20302,20430]",
      "dest": "block [20302,20430]"
    },
    {
      "src": "argument_list [25908,25977]",
      "dest": "argument_list [25908,25977]"
    },
    {
      "src": "method_invocation [84782,84808]",
      "dest": "method_invocation [86276,86302]"
    },
    {
      "src": "type: int [181605,181608]",
      "dest": "type: int [183099,183102]"
    },
    {
      "src": "identifier: str [51839,51842]",
      "dest": "identifier: str [51839,51842]"
    },
    {
      "src": "identifier: sz [206928,206930]",
      "dest": "identifier: sz [208422,208424]"
    },
    {
      "src": "formal_parameter [219359,219369]",
      "dest": "formal_parameter [220853,220863]"
    },
    {
      "src": "argument_list [150167,150169]",
      "dest": "argument_list [151661,151663]"
    },
    {
      "src": "block [202097,202240]",
      "dest": "block [203591,203734]"
    },
    {
      "src": "identifier: str1 [28473,28477]",
      "dest": "identifier: str1 [28473,28477]"
    },
    {
      "src": "identifier: index [36482,36487]",
      "dest": "identifier: index [36482,36487]"
    },
    {
      "src": "identifier: searchStrs [69737,69747]",
      "dest": "identifier: searchStrs [71231,71241]"
    },
    {
      "src": "identifier: removeEnd [176927,176936]",
      "dest": "identifier: removeEnd [178421,178430]"
    },
    {
      "src": "identifier: ret [173311,173314]",
      "dest": "identifier: ret [174805,174808]"
    },
    {
      "src": "identifier: charAt [18677,18683]",
      "dest": "identifier: charAt [18677,18683]"
    },
    {
      "src": "argument_list [79875,79877]",
      "dest": "argument_list [81369,81371]"
    },
    {
      "src": "argument_list [162371,162374]",
      "dest": "argument_list [163865,163868]"
    },
    {
      "src": "method_invocation [137240,137277]",
      "dest": "method_invocation [138734,138771]"
    },
    {
      "src": "false: false [66979,66984]",
      "dest": "false: false [68451,68456]"
    },
    {
      "src": "static: static [214523,214529]",
      "dest": "static: static [216017,216023]"
    },
    {
      "src": "modifiers [116277,116291]",
      "dest": "modifiers [117771,117785]"
    },
    {
      "src": "identifier: separatorChars [113386,113400]",
      "dest": "identifier: separatorChars [114880,114894]"
    },
    {
      "src": "comparison_operator: == [162010,162012]",
      "dest": "comparison_operator: == [163504,163506]"
    },
    {
      "src": "method_invocation [202135,202147]",
      "dest": "method_invocation [203629,203641]"
    },
    {
      "src": "argument_list [86658,86660]",
      "dest": "argument_list [88152,88154]"
    },
    {
      "src": "method_declaration [98021,98177]",
      "dest": "method_declaration [99515,99671]"
    },
    {
      "src": "affectation_operator: = [91065,91066]",
      "dest": "affectation_operator: = [92559,92560]"
    },
    {
      "src": "identifier: searchList [160458,160468]",
      "dest": "identifier: searchList [161952,161962]"
    },
    {
      "src": "method_invocation [136294,136313]",
      "dest": "method_invocation [137788,137807]"
    },
    {
      "src": "if_statement [150058,150122]",
      "dest": "if_statement [151552,151616]"
    },
    {
      "src": "type: SecurityException [26184,26201]",
      "dest": "type: SecurityException [26184,26201]"
    },
    {
      "src": "method_invocation [236257,236283]",
      "dest": "method_invocation [237751,237777]"
    },
    {
      "src": "assignment_expression [165704,165724]",
      "dest": "assignment_expression [167198,167218]"
    },
    {
      "src": "identifier: str [93913,93916]",
      "dest": "identifier: str [95407,95410]"
    },
    {
      "src": "identifier: cs [210152,210154]",
      "dest": "identifier: cs [211646,211648]"
    },
    {
      "src": "block [179053,179101]",
      "dest": "block [180547,180595]"
    },
    {
      "src": "type: CharSequence [203090,203102]",
      "dest": "type: CharSequence [204584,204596]"
    },
    {
      "src": "argument_list [134639,134641]",
      "dest": "argument_list [136133,136135]"
    },
    {
      "src": "binary_expression [158144,158297]",
      "dest": "binary_expression [159638,159791]"
    },
    {
      "src": "return_statement [78605,78646]",
      "dest": "return_statement [80099,80140]"
    },
    {
      "src": "string_literal [158903,158909]",
      "dest": "string_literal [160397,160403]"
    },
    {
      "src": "identifier: nfd [24912,24915]",
      "dest": "identifier: nfd [24912,24915]"
    },
    {
      "src": "line_comment: // (not sure who tested this) [5866,5895]",
      "dest": "line_comment: // (not sure who tested this) [5866,5895]"
    },
    {
      "src": "binary_expression [235611,235614]",
      "dest": "binary_expression [237105,237108]"
    },
    {
      "src": "identifier: left [77244,77248]",
      "dest": "identifier: left [78738,78742]"
    },
    {
      "src": "local_variable_declaration [235831,235840]",
      "dest": "local_variable_declaration [237325,237334]"
    },
    {
      "src": "affectation_operator: = [150543,150544]",
      "dest": "affectation_operator: = [152037,152038]"
    },
    {
      "src": "binary_expression [70288,70297]",
      "dest": "binary_expression [71782,71791]"
    },
    {
      "src": "block [205715,205752]",
      "dest": "block [207209,207246]"
    },
    {
      "src": "identifier: isEmpty [141659,141666]",
      "dest": "identifier: isEmpty [143153,143160]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     */ [52003,52945]",
      "dest": "block_comment:     \n     * <p>Checks if String contains a search String irrespective of case,\n     * handling <code>null</code>. Case-insensitivity is defined as by\n     * {@link String#equalsIgnoreCase(String)}.\n     *\n     * <p>A <code>null</code> String will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.contains(null, *) = false\n     * StringUtils.contains(*, null) = false\n     * StringUtils.contains(\"\", \"\") = true\n     * StringUtils.contains(\"abc\", \"\") = true\n     * StringUtils.contains(\"abc\", \"a\") = true\n     * StringUtils.contains(\"abc\", \"z\") = false\n     * StringUtils.contains(\"abc\", \"A\") = true\n     * StringUtils.contains(\"abc\", \"Z\") = false\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return true if the String contains the search String irrespective of\n     * case or false if not or <code>null</code> string input\n     */ [52003,52945]"
    },
    {
      "src": "identifier: str [189201,189204]",
      "dest": "identifier: str [190695,190698]"
    },
    {
      "src": "switch: switch [174833,174839]",
      "dest": "switch: switch [176327,176333]"
    },
    {
      "src": "identifier: EMPTY [77376,77381]",
      "dest": "identifier: EMPTY [78870,78875]"
    },
    {
      "src": "method_invocation [8079,8102]",
      "dest": "method_invocation [8079,8102]"
    },
    {
      "src": "binary_expression [190724,190733]",
      "dest": "binary_expression [192218,192227]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [173575,173648]",
      "dest": "line_comment: //----------------------------------------------------------------------- [175069,175142]"
    },
    {
      "src": "identifier: str [95167,95170]",
      "dest": "identifier: str [96661,96664]"
    },
    {
      "src": "block [61050,61285]",
      "dest": "block [61509,62024]"
    },
    {
      "src": "identifier: textLength [162318,162328]",
      "dest": "identifier: textLength [163812,163822]"
    },
    {
      "src": "for_statement [178189,178267]",
      "dest": "for_statement [179683,179761]"
    },
    {
      "src": "identifier: Character [117049,117058]",
      "dest": "identifier: Character [118543,118552]"
    },
    {
      "src": "expression_statement [124099,124118]",
      "dest": "expression_statement [125593,125612]"
    },
    {
      "src": "type: String [221894,221900]",
      "dest": "type: String [223388,223394]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [228172,228187]",
      "dest": "identifier: INDEX_NOT_FOUND [229666,229681]"
    },
    {
      "src": "affectation_operator: = [73727,73728]",
      "dest": "affectation_operator: = [75221,75222]"
    },
    {
      "src": "return_statement [239848,239887]",
      "dest": "return_statement [241342,241381]"
    },
    {
      "src": "visibility: public [15774,15780]",
      "dest": "visibility: public [15774,15780]"
    },
    {
      "src": "identifier: array [129194,129199]",
      "dest": "identifier: array [130688,130693]"
    },
    {
      "src": "identifier: size [184011,184015]",
      "dest": "identifier: size [185505,185509]"
    },
    {
      "src": "visibility: public [221856,221862]",
      "dest": "visibility: public [223350,223356]"
    },
    {
      "src": "type: int [180041,180044]",
      "dest": "type: int [181535,181538]"
    },
    {
      "src": "identifier: len [110567,110570]",
      "dest": "identifier: len [112061,112064]"
    },
    {
      "src": "type: int [73441,73444]",
      "dest": "type: int [74935,74938]"
    },
    {
      "src": "type: String [183004,183010]",
      "dest": "type: String [184498,184504]"
    },
    {
      "src": "identifier: charAt [8877,8883]",
      "dest": "identifier: charAt [8877,8883]"
    },
    {
      "src": "local_variable_declaration [190686,190711]",
      "dest": "local_variable_declaration [192180,192205]"
    },
    {
      "src": "type: String [185268,185274]",
      "dest": "type: String [186762,186768]"
    },
    {
      "src": "identifier: str [172970,172973]",
      "dest": "identifier: str [174464,174467]"
    },
    {
      "src": "local_variable_declaration [91143,91155]",
      "dest": "local_variable_declaration [92637,92649]"
    },
    {
      "src": "if_statement [225331,225406]",
      "dest": "if_statement [226825,226900]"
    },
    {
      "src": "variable_declarator [210282,210287]",
      "dest": "variable_declarator [211776,211781]"
    },
    {
      "src": "binary_expression [191898,191909]",
      "dest": "binary_expression [193392,193403]"
    },
    {
      "src": "parenthesized_expression [73587,73598]",
      "dest": "parenthesized_expression [75081,75092]"
    },
    {
      "src": "case: case [174868,174872]",
      "dest": "case: case [176362,176366]"
    },
    {
      "src": "return_statement [68175,68227]",
      "dest": "return_statement [69669,69721]"
    },
    {
      "src": "binary_expression [117838,117858]",
      "dest": "binary_expression [119332,119352]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [69819,69834]",
      "dest": "identifier: INDEX_NOT_FOUND [71313,71328]"
    },
    {
      "src": "identifier: i [161121,161122]",
      "dest": "identifier: i [162615,162616]"
    },
    {
      "src": "block [148310,148378]",
      "dest": "block [149804,149872]"
    },
    {
      "src": "comparison_operator: > [104843,104844]",
      "dest": "comparison_operator: > [106337,106338]"
    },
    {
      "src": "new: new [91644,91647]",
      "dest": "new: new [93138,93141]"
    },
    {
      "src": "arithmetic_operator: - [161288,161289]",
      "dest": "arithmetic_operator: - [162782,162783]"
    },
    {
      "src": "argument_list [222267,222269]",
      "dest": "argument_list [223761,223763]"
    },
    {
      "src": "identifier: get [24916,24919]",
      "dest": "identifier: get [24916,24919]"
    },
    {
      "src": "identifier: Character [211355,211364]",
      "dest": "identifier: Character [212849,212858]"
    },
    {
      "src": "line_comment: // which is the right calculation: [105491,105525]",
      "dest": "line_comment: // which is the right calculation: [106985,107019]"
    },
    {
      "src": "method_invocation [210252,210263]",
      "dest": "method_invocation [211746,211757]"
    },
    {
      "src": "argument_list [196783,196785]",
      "dest": "argument_list [198277,198279]"
    },
    {
      "src": "identifier: str [239856,239859]",
      "dest": "identifier: str [241350,241353]"
    },
    {
      "src": "while_statement [20316,20420]",
      "dest": "while_statement [20316,20420]"
    },
    {
      "src": "decimal_integer_literal: 0 [126234,126235]",
      "dest": "decimal_integer_literal: 0 [127728,127729]"
    },
    {
      "src": "identifier: type [124113,124117]",
      "dest": "identifier: type [125607,125611]"
    },
    {
      "src": "argument_list [107779,107800]",
      "dest": "argument_list [109273,109294]"
    },
    {
      "src": "affectation_operator: = [227318,227319]",
      "dest": "affectation_operator: = [228812,228813]"
    },
    {
      "src": "identifier: prefix [239871,239877]",
      "dest": "identifier: prefix [241365,241371]"
    },
    {
      "src": "identifier: ch [61176,61178]",
      "dest": "identifier: ch [61635,61637]"
    },
    {
      "src": "expression_statement [160722,160746]",
      "dest": "expression_statement [162216,162240]"
    },
    {
      "src": "string_literal [26093,26156]",
      "dest": "string_literal [26093,26156]"
    },
    {
      "src": "decimal_integer_literal: 0 [61031,61032]",
      "dest": "decimal_integer_literal: 0 [61490,61491]"
    },
    {
      "src": "array_access [160500,160513]",
      "dest": "array_access [161994,162007]"
    },
    {
      "src": "decimal_integer_literal: 1 [228435,228436]",
      "dest": "decimal_integer_literal: 1 [229929,229930]"
    },
    {
      "src": "method_invocation [236008,236021]",
      "dest": "method_invocation [237502,237515]"
    },
    {
      "src": "identifier: len [53119,53122]",
      "dest": "identifier: len [53119,53122]"
    },
    {
      "src": "return_statement [17234,17267]",
      "dest": "return_statement [17234,17267]"
    },
    {
      "src": "array_access [145736,145744]",
      "dest": "array_access [147230,147238]"
    },
    {
      "src": "comparison_operator: >= [222042,222044]",
      "dest": "comparison_operator: >= [223536,223538]"
    },
    {
      "src": "block [77355,77392]",
      "dest": "block [78849,78886]"
    },
    {
      "src": "identifier: len [104238,104241]",
      "dest": "identifier: len [105732,105735]"
    },
    {
      "src": "formal_parameter [214545,214555]",
      "dest": "formal_parameter [216039,216049]"
    },
    {
      "src": "type: String [42235,42241]",
      "dest": "type: String [42235,42241]"
    },
    {
      "src": "method_invocation [201006,201038]",
      "dest": "method_invocation [202500,202532]"
    },
    {
      "src": "method_invocation [20360,20379]",
      "dest": "method_invocation [20360,20379]"
    },
    {
      "src": "decimal_integer_literal: 1 [148369,148370]",
      "dest": "decimal_integer_literal: 1 [149863,149864]"
    },
    {
      "src": "decimal_integer_literal: 1 [107792,107793]",
      "dest": "decimal_integer_literal: 1 [109286,109287]"
    },
    {
      "src": "return_statement [36171,36194]",
      "dest": "return_statement [36171,36194]"
    },
    {
      "src": "identifier: length [49578,49584]",
      "dest": "identifier: length [49578,49584]"
    },
    {
      "src": "method_invocation [150465,150503]",
      "dest": "method_invocation [151959,151997]"
    },
    {
      "src": "if_statement [49403,49488]",
      "dest": "if_statement [49403,49488]"
    },
    {
      "src": "identifier: toString [134631,134639]",
      "dest": "identifier: toString [136125,136133]"
    },
    {
      "src": "identifier: strLen [18639,18645]",
      "dest": "identifier: strLen [18639,18645]"
    },
    {
      "src": "array_access [178240,178246]",
      "dest": "array_access [179734,179740]"
    },
    {
      "src": "argument_list [171929,171931]",
      "dest": "argument_list [173423,173425]"
    },
    {
      "src": "array_access [159634,159647]",
      "dest": "array_access [161128,161141]"
    },
    {
      "src": "expression_statement [76216,76224]",
      "dest": "expression_statement [77710,77718]"
    },
    {
      "src": "block_comment:     \n     * <p>Reverses a String that is delimited by a specific character.</p>\n     *\n     * <p>The Strings between the delimiters are not reversed.\n     * Thus java.lang.String becomes String.lang.java (if the delimiter\n     * is <code>'.'</code>).</p>\n     *\n     * <pre>\n     * StringUtils.reverseDelimited(null, *)      = null\n     * StringUtils.reverseDelimited(\"\", *)        = \"\"\n     * StringUtils.reverseDelimited(\"a.b.c\", 'x') = \"a.b.c\"\n     * StringUtils.reverseDelimited(\"a.b.c\", \".\") = \"c.b.a\"\n     * </pre>\n     *\n     * @param str  the String to reverse, may be null\n     * @param separatorChar  the separator character to use\n     * @return the reversed String, <code>null</code> if null String input\n     * @since 2.0\n     */ [214686,215427]",
      "dest": "block_comment:     \n     * <p>Reverses a String that is delimited by a specific character.</p>\n     *\n     * <p>The Strings between the delimiters are not reversed.\n     * Thus java.lang.String becomes String.lang.java (if the delimiter\n     * is <code>'.'</code>).</p>\n     *\n     * <pre>\n     * StringUtils.reverseDelimited(null, *)      = null\n     * StringUtils.reverseDelimited(\"\", *)        = \"\"\n     * StringUtils.reverseDelimited(\"a.b.c\", 'x') = \"a.b.c\"\n     * StringUtils.reverseDelimited(\"a.b.c\", \".\") = \"c.b.a\"\n     * </pre>\n     *\n     * @param str  the String to reverse, may be null\n     * @param separatorChar  the separator character to use\n     * @return the reversed String, <code>null</code> if null String input\n     * @since 2.0\n     */ [216180,216921]"
    },
    {
      "src": "false: false [110746,110751]",
      "dest": "false: false [112240,112245]"
    },
    {
      "src": "identifier: searchString [148276,148288]",
      "dest": "identifier: searchString [149770,149782]"
    },
    {
      "src": "return_statement [222105,222116]",
      "dest": "return_statement [223599,223610]"
    },
    {
      "src": "block_comment:     \n     * <p>Strips any of a set of characters from the start of a String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * An empty string (\"\") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is <code>null</code>, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripStart(null, *)          = null\n     * StringUtils.stripStart(\"\", *)            = \"\"\n     * StringUtils.stripStart(\"abc\", \"\")        = \"abc\"\n     * StringUtils.stripStart(\"abc\", null)      = \"abc\"\n     * StringUtils.stripStart(\"  abc\", null)    = \"abc\"\n     * StringUtils.stripStart(\"abc  \", null)    = \"abc  \"\n     * StringUtils.stripStart(\" abc \", null)    = \"abc \"\n     * StringUtils.stripStart(\"yxabc  \", \"xyz\") = \"abc  \"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, <code>null</code> if null String input\n     */ [17279,18370]",
      "dest": "block_comment:     \n     * <p>Strips any of a set of characters from the start of a String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * An empty string (\"\") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is <code>null</code>, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripStart(null, *)          = null\n     * StringUtils.stripStart(\"\", *)            = \"\"\n     * StringUtils.stripStart(\"abc\", \"\")        = \"abc\"\n     * StringUtils.stripStart(\"abc\", null)      = \"abc\"\n     * StringUtils.stripStart(\"  abc\", null)    = \"abc\"\n     * StringUtils.stripStart(\"abc  \", null)    = \"abc  \"\n     * StringUtils.stripStart(\" abc \", null)    = \"abc \"\n     * StringUtils.stripStart(\"yxabc  \", \"xyz\") = \"abc  \"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, <code>null</code> if null String input\n     */ [17279,18370]"
    },
    {
      "src": "for_statement [228446,228899]",
      "dest": "for_statement [229940,230393]"
    },
    {
      "src": "%: % [186136,186137]",
      "dest": "%: % [187630,187631]"
    },
    {
      "src": "switch_label [174868,174874]",
      "dest": "switch_label [176362,176368]"
    },
    {
      "src": "block [14722,14870]",
      "dest": "block [14722,14870]"
    },
    {
      "src": "argument_list [24460,24491]",
      "dest": "argument_list [24460,24491]"
    },
    {
      "src": "type: String [106414,106420]",
      "dest": "type: String [107908,107914]"
    },
    {
      "src": "increment_operator: ++ [53218,53220]",
      "dest": "increment_operator: ++ [53218,53220]"
    },
    {
      "src": "affectation_operator: = [159156,159157]",
      "dest": "affectation_operator: = [160650,160651]"
    },
    {
      "src": "identifier: cs [195449,195451]",
      "dest": "identifier: cs [196943,196945]"
    },
    {
      "src": "identifier: str [20213,20216]",
      "dest": "identifier: str [20213,20216]"
    },
    {
      "src": "identifier: cs [200871,200873]",
      "dest": "identifier: cs [202365,202367]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [145893,145966]",
      "dest": "line_comment: //----------------------------------------------------------------------- [147387,147460]"
    },
    {
      "src": "visibility: public [39321,39327]",
      "dest": "visibility: public [39321,39327]"
    },
    {
      "src": "visibility: public [95131,95137]",
      "dest": "visibility: public [96625,96631]"
    },
    {
      "src": "identifier: length [86558,86564]",
      "dest": "identifier: length [88052,88058]"
    },
    {
      "src": "return_statement [13704,13728]",
      "dest": "return_statement [13704,13728]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the n-th last index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lastOrdinalIndexOf(null, *, *)          = -1\n     * StringUtils.lastOrdinalIndexOf(*, null, *)          = -1\n     * StringUtils.lastOrdinalIndexOf(\"\", \"\", *)           = 0\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1)  = 7\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2)  = 6\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1)  = 5\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2)  = 2\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1) = 4\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2) = 1\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1)   = 8\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2)   = 8\n     * </pre>\n     *\n     * <p>Note that 'tail(String str, int n)' may be implemented as: </p>\n     *\n     * <pre>\n     *   str.substring(lastOrdinalIndexOf(str, \"\\n\", n) + 1)\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param ordinal  the n-th last <code>searchStr</code> to find\n     * @return the n-th last index of the search String,\n     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n     * @since 2.5\n     */ [43512,45010]",
      "dest": "block_comment:     \n     * <p>Finds the n-th last index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lastOrdinalIndexOf(null, *, *)          = -1\n     * StringUtils.lastOrdinalIndexOf(*, null, *)          = -1\n     * StringUtils.lastOrdinalIndexOf(\"\", \"\", *)           = 0\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1)  = 7\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2)  = 6\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1)  = 5\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2)  = 2\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1) = 4\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2) = 1\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1)   = 8\n     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2)   = 8\n     * </pre>\n     *\n     * <p>Note that 'tail(String str, int n)' may be implemented as: </p>\n     *\n     * <pre>\n     *   str.substring(lastOrdinalIndexOf(str, \"\\n\", n) + 1)\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param ordinal  the n-th last <code>searchStr</code> to find\n     * @return the n-th last index of the search String,\n     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n     * @since 2.5\n     */ [43512,45010]"
    },
    {
      "src": "block [181777,181846]",
      "dest": "block [183271,183340]"
    },
    {
      "src": "type: String [198158,198164]",
      "dest": "type: String [199652,199658]"
    },
    {
      "src": "identifier: str [179940,179943]",
      "dest": "identifier: str [181434,181437]"
    },
    {
      "src": "block_comment:     \n     * <p>Joins the elements of the provided <code>Iterator</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterator  the <code>Iterator</code> of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, <code>null</code> if null iterator input\n     * @since 2.0\n     */ [131646,132272]",
      "dest": "block_comment:     \n     * <p>Joins the elements of the provided <code>Iterator</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list. Null objects or empty\n     * strings within the iteration are represented by empty strings.</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n     *\n     * @param iterator  the <code>Iterator</code> of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, <code>null</code> if null iterator input\n     * @since 2.0\n     */ [133140,133766]"
    },
    {
      "src": "method_invocation [227882,227897]",
      "dest": "method_invocation [229376,229391]"
    },
    {
      "src": "argument_list [81497,81502]",
      "dest": "argument_list [82991,82996]"
    },
    {
      "src": "type: String [149785,149791]",
      "dest": "type: String [151279,151285]"
    },
    {
      "src": "binary_expression [51963,51990]",
      "dest": "binary_expression [51963,51990]"
    },
    {
      "src": "formal_parameter [138699,138712]",
      "dest": "formal_parameter [140193,140206]"
    },
    {
      "src": "identifier: remove [138752,138758]",
      "dest": "identifier: remove [140246,140252]"
    },
    {
      "src": "local_variable_declaration [178144,178180]",
      "dest": "local_variable_declaration [179638,179674]"
    },
    {
      "src": "parenthesized_expression [206865,206877]",
      "dest": "parenthesized_expression [208359,208371]"
    },
    {
      "src": "formal_parameters [12641,12653]",
      "dest": "formal_parameters [12641,12653]"
    },
    {
      "src": "parenthesized_expression [198455,198482]",
      "dest": "parenthesized_expression [199949,199976]"
    },
    {
      "src": "static: static [192650,192656]",
      "dest": "static: static [194144,194150]"
    },
    {
      "src": "method_invocation [68199,68225]",
      "dest": "method_invocation [69693,69719]"
    },
    {
      "src": "identifier: pads [182157,182161]",
      "dest": "identifier: pads [183651,183655]"
    },
    {
      "src": "identifier: s [233757,233758]",
      "dest": "identifier: s [235251,235252]"
    },
    {
      "src": "identifier: i [165946,165947]",
      "dest": "identifier: i [167440,167441]"
    },
    {
      "src": "formal_parameter [46523,46533]",
      "dest": "formal_parameter [46523,46533]"
    },
    {
      "src": "identifier: append [132937,132943]",
      "dest": "identifier: append [134431,134437]"
    },
    {
      "src": "if_statement [77401,77461]",
      "dest": "if_statement [78895,78955]"
    },
    {
      "src": "binary_expression [117886,117912]",
      "dest": "binary_expression [119380,119406]"
    },
    {
      "src": "identifier: searchLast [57619,57629]",
      "dest": "identifier: searchLast [57959,57969]"
    },
    {
      "src": "local_variable_declaration [200929,200950]",
      "dest": "local_variable_declaration [202423,202444]"
    },
    {
      "src": "update_expression [117986,117997]",
      "dest": "update_expression [119480,119491]"
    },
    {
      "src": "if_statement [105733,106098]",
      "dest": "if_statement [107227,107592]"
    },
    {
      "src": "identifier: c [124157,124158]",
      "dest": "identifier: c [125651,125652]"
    },
    {
      "src": "identifier: iterable [136177,136185]",
      "dest": "identifier: iterable [137671,137679]"
    },
    {
      "src": "identifier: t [235170,235171]",
      "dest": "identifier: t [236664,236665]"
    },
    {
      "src": "identifier: repeat [178172,178178]",
      "dest": "identifier: repeat [179666,179672]"
    },
    {
      "src": "identifier: searchChars [66447,66458]",
      "dest": "identifier: searchChars [67494,67505]"
    },
    {
      "src": "update_expression [118965,118968]",
      "dest": "update_expression [120459,120462]"
    },
    {
      "src": "block [105756,106098]",
      "dest": "block [107250,107592]"
    },
    {
      "src": "binary_expression [66488,66507]",
      "dest": "binary_expression [67535,67554]"
    },
    {
      "src": "parenthesized_expression [117806,117815]",
      "dest": "parenthesized_expression [119300,119309]"
    },
    {
      "src": "identifier: replacementList [158270,158285]",
      "dest": "identifier: replacementList [159764,159779]"
    },
    {
      "src": "method_invocation [235127,235137]",
      "dest": "method_invocation [236621,236631]"
    },
    {
      "src": "binary_expression [170338,170377]",
      "dest": "binary_expression [171832,171871]"
    },
    {
      "src": "static: static [223651,223657]",
      "dest": "static: static [225145,225151]"
    },
    {
      "src": "identifier: first [134296,134301]",
      "dest": "identifier: first [135790,135795]"
    },
    {
      "src": "decimal_integer_literal: 64 [150322,150324]",
      "dest": "decimal_integer_literal: 64 [151816,151818]"
    },
    {
      "src": "variable_declarator [11677,11691]",
      "dest": "variable_declarator [11677,11691]"
    },
    {
      "src": "return_statement [80026,80052]",
      "dest": "return_statement [81520,81546]"
    },
    {
      "src": "identifier: css [227957,227960]",
      "dest": "identifier: css [229451,229454]"
    },
    {
      "src": "formal_parameter [181368,181376]",
      "dest": "formal_parameter [182862,182870]"
    },
    {
      "src": "identifier: length [158584,158590]",
      "dest": "identifier: length [160078,160084]"
    },
    {
      "src": "identifier: isEmpty [149862,149869]",
      "dest": "identifier: isEmpty [151356,151363]"
    },
    {
      "src": "argument_list [123303,123305]",
      "dest": "argument_list [124797,124799]"
    },
    {
      "src": "decimal_integer_literal: 0 [62480,62481]",
      "dest": "decimal_integer_literal: 0 [63219,63220]"
    },
    {
      "src": "visibility: public [12609,12615]",
      "dest": "visibility: public [12609,12615]"
    },
    {
      "src": "decimal_integer_literal: 0 [174620,174621]",
      "dest": "decimal_integer_literal: 0 [176114,176115]"
    },
    {
      "src": "assignment_expression [190834,190867]",
      "dest": "assignment_expression [192328,192361]"
    },
    {
      "src": "block [95195,95262]",
      "dest": "block [96689,96756]"
    },
    {
      "src": "identifier: ArrayUtils [60837,60847]",
      "dest": "identifier: ArrayUtils [61224,61234]"
    },
    {
      "src": "catch_clause [25184,25346]",
      "dest": "catch_clause [25184,25346]"
    },
    {
      "src": "identifier: i [211332,211333]",
      "dest": "identifier: i [212826,212827]"
    },
    {
      "src": "visibility: public [98021,98027]",
      "dest": "visibility: public [99515,99521]"
    },
    {
      "src": "modifiers [208007,208020]",
      "dest": "modifiers [209501,209514]"
    },
    {
      "src": "logical_operator: || [54528,54530]",
      "dest": "logical_operator: || [54528,54530]"
    },
    {
      "src": "local_variable_declaration [208133,208154]",
      "dest": "local_variable_declaration [209627,209648]"
    },
    {
      "src": "identifier: str [170226,170229]",
      "dest": "identifier: str [171720,171723]"
    },
    {
      "src": "binary_expression [159409,159462]",
      "dest": "binary_expression [160903,160956]"
    },
    {
      "src": "modifiers [204212,204225]",
      "dest": "modifiers [205706,205719]"
    },
    {
      "src": "affectation_operator: = [236064,236065]",
      "dest": "affectation_operator: = [237558,237559]"
    },
    {
      "src": "block_comment:     \n     * <p>Compares all CharSequences in an array and returns the index at which the\n     * CharSequences begin to differ.</p>\n     *\n     * <p>For example,\n     * <code>indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) -> 7</code></p>\n     *\n     * <pre>\n     * StringUtils.indexOfDifference(null) = -1\n     * StringUtils.indexOfDifference(new String[] {}) = -1\n     * StringUtils.indexOfDifference(new String[] {\"abc\"}) = -1\n     * StringUtils.indexOfDifference(new String[] {null, null}) = -1\n     * StringUtils.indexOfDifference(new String[] {\"\", \"\"}) = -1\n     * StringUtils.indexOfDifference(new String[] {\"\", null}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"abc\", null, null}) = 0\n     * StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}) = -1\n     * StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}) = 1\n     * StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}) = 2\n     * StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}) = 2\n     * StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) = 7\n     * </pre>\n     *\n     * @param css  array of CharSequences, entries may be null\n     * @return the index where the strings begin to differ; -1 if they are all equal\n     * @since 2.4\n     */ [225450,227093]",
      "dest": "block_comment:     \n     * <p>Compares all CharSequences in an array and returns the index at which the\n     * CharSequences begin to differ.</p>\n     *\n     * <p>For example,\n     * <code>indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) -> 7</code></p>\n     *\n     * <pre>\n     * StringUtils.indexOfDifference(null) = -1\n     * StringUtils.indexOfDifference(new String[] {}) = -1\n     * StringUtils.indexOfDifference(new String[] {\"abc\"}) = -1\n     * StringUtils.indexOfDifference(new String[] {null, null}) = -1\n     * StringUtils.indexOfDifference(new String[] {\"\", \"\"}) = -1\n     * StringUtils.indexOfDifference(new String[] {\"\", null}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"abc\", null, null}) = 0\n     * StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}) = -1\n     * StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}) = 1\n     * StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}) = 2\n     * StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}) = 2\n     * StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}) = 0\n     * StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) = 7\n     * </pre>\n     *\n     * @param css  array of CharSequences, entries may be null\n     * @return the index where the strings begin to differ; -1 if they are all equal\n     * @since 2.4\n     */ [226944,228587]"
    },
    {
      "src": "parenthesized_expression [131077,131100]",
      "dest": "parenthesized_expression [132571,132594]"
    },
    {
      "src": "modifiers [90705,90718]",
      "dest": "modifiers [92199,92212]"
    },
    {
      "src": "affectation_operator: = [137110,137111]",
      "dest": "affectation_operator: = [138604,138605]"
    },
    {
      "src": "binary_expression [236068,236072]",
      "dest": "binary_expression [237562,237566]"
    },
    {
      "src": "identifier: length [7479,7485]",
      "dest": "identifier: length [7479,7485]"
    },
    {
      "src": "method_declaration [59463,59671]",
      "dest": "method_declaration [59856,60058]"
    },
    {
      "src": "formal_parameters [36030,36092]",
      "dest": "formal_parameters [36030,36092]"
    },
    {
      "src": "identifier: toString [222521,222529]",
      "dest": "identifier: toString [224015,224023]"
    },
    {
      "src": "variable_declarator [18565,18574]",
      "dest": "variable_declarator [18565,18574]"
    },
    {
      "src": "return_statement [39974,39997]",
      "dest": "return_statement [39974,39997]"
    },
    {
      "src": "identifier: searchStr [47924,47933]",
      "dest": "identifier: searchStr [47924,47933]"
    },
    {
      "src": "identifier: cs [209140,209142]",
      "dest": "identifier: cs [210634,210636]"
    },
    {
      "src": "identifier: PAD_LIMIT [181766,181775]",
      "dest": "identifier: PAD_LIMIT [183260,183269]"
    },
    {
      "src": "assignment_expression [104755,104788]",
      "dest": "assignment_expression [106249,106282]"
    },
    {
      "src": "identifier: j [66744,66745]",
      "dest": "identifier: j [67863,67864]"
    },
    {
      "src": "argument_list [20561,20582]",
      "dest": "argument_list [20561,20582]"
    },
    {
      "src": "visibility: public [7398,7404]",
      "dest": "visibility: public [7398,7404]"
    },
    {
      "src": "decimal_integer_literal: 0 [36290,36291]",
      "dest": "decimal_integer_literal: 0 [36290,36291]"
    },
    {
      "src": "identifier: str [101261,101264]",
      "dest": "identifier: str [102755,102758]"
    },
    {
      "src": "binary_expression [89213,89226]",
      "dest": "binary_expression [90707,90720]"
    },
    {
      "src": "method_declaration [20099,20696]",
      "dest": "method_declaration [20099,20696]"
    },
    {
      "src": "decimal_integer_literal: 1 [236129,236130]",
      "dest": "decimal_integer_literal: 1 [237623,237624]"
    },
    {
      "src": "comparison_operator: == [51880,51882]",
      "dest": "comparison_operator: == [51880,51882]"
    },
    {
      "src": "while_statement [18622,18733]",
      "dest": "while_statement [18622,18733]"
    },
    {
      "src": "formal_parameter [137019,137029]",
      "dest": "formal_parameter [138513,138523]"
    },
    {
      "src": "visibility: private [244037,244044]",
      "dest": "visibility: private [245531,245538]"
    },
    {
      "src": "formal_parameters [17087,17118]",
      "dest": "formal_parameters [17087,17118]"
    },
    {
      "src": "method_invocation [149879,149900]",
      "dest": "method_invocation [151373,151394]"
    },
    {
      "src": "return_statement [236601,236613]",
      "dest": "return_statement [238095,238107]"
    },
    {
      "src": "identifier: str [71817,71820]",
      "dest": "identifier: str [73311,73314]"
    },
    {
      "src": "block [71852,71899]",
      "dest": "block [73346,73393]"
    },
    {
      "src": "type: boolean [201928,201935]",
      "dest": "type: boolean [203422,203429]"
    },
    {
      "src": "identifier: increase [150287,150295]",
      "dest": "identifier: increase [151781,151789]"
    },
    {
      "src": "affectation_operator: = [185434,185435]",
      "dest": "affectation_operator: = [186928,186929]"
    },
    {
      "src": "null_literal: null [185368,185372]",
      "dest": "null_literal: null [186862,186866]"
    },
    {
      "src": "identifier: replacementList [160525,160540]",
      "dest": "identifier: replacementList [162019,162034]"
    },
    {
      "src": "method_invocation [140311,140326]",
      "dest": "method_invocation [141805,141820]"
    },
    {
      "src": "identifier: length [165854,165860]",
      "dest": "identifier: length [167348,167354]"
    },
    {
      "src": "visibility: public [23847,23853]",
      "dest": "visibility: public [23847,23853]"
    },
    {
      "src": "identifier: i [57688,57689]",
      "dest": "identifier: i [54796,54797]"
    },
    {
      "src": "if_statement [240992,241087]",
      "dest": "if_statement [242486,242581]"
    },
    {
      "src": "method_invocation [227957,227972]",
      "dest": "method_invocation [229451,229466]"
    },
    {
      "src": "parenthesized_expression [150061,150085]",
      "dest": "parenthesized_expression [151555,151579]"
    },
    {
      "src": "comparison_operator: == [18599,18601]",
      "dest": "comparison_operator: == [18599,18601]"
    },
    {
      "src": "type: String [167961,167967]",
      "dest": "type: String [169455,169461]"
    },
    {
      "src": "method_invocation [134507,134522]",
      "dest": "method_invocation [136001,136016]"
    },
    {
      "src": "parenthesized_expression [231114,231148]",
      "dest": "parenthesized_expression [232608,232642]"
    },
    {
      "src": "block_comment:     \n     * <p>Converts a String to upper case as per {@link String#toUpperCase(Locale)}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.upperCase(null, Locale.ENGLISH)  = null\n     * StringUtils.upperCase(\"\", Locale.ENGLISH)    = \"\"\n     * StringUtils.upperCase(\"aBc\", Locale.ENGLISH) = \"ABC\"\n     * </pre>\n     *\n     * @param str  the String to upper case, may be null\n     * @param locale  the locale that defines the case transformation rules, must not be null\n     * @return the upper cased String, <code>null</code> if null String input\n     * @since 2.5\n     */ [191993,192638]",
      "dest": "block_comment:     \n     * <p>Converts a String to upper case as per {@link String#toUpperCase(Locale)}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.upperCase(null, Locale.ENGLISH)  = null\n     * StringUtils.upperCase(\"\", Locale.ENGLISH)    = \"\"\n     * StringUtils.upperCase(\"aBc\", Locale.ENGLISH) = \"ABC\"\n     * </pre>\n     *\n     * @param str  the String to upper case, may be null\n     * @param locale  the locale that defines the case transformation rules, must not be null\n     * @return the upper cased String, <code>null</code> if null String input\n     * @since 2.5\n     */ [193487,194132]"
    },
    {
      "src": "formal_parameter [143275,143288]",
      "dest": "formal_parameter [144769,144782]"
    },
    {
      "src": "identifier: replacement [147112,147123]",
      "dest": "identifier: replacement [148606,148617]"
    },
    {
      "src": "null_literal: null [68100,68104]",
      "dest": "null_literal: null [69594,69598]"
    },
    {
      "src": "binary_expression [173311,173350]",
      "dest": "binary_expression [174805,174844]"
    },
    {
      "src": "type: int [159357,159360]",
      "dest": "type: int [160851,160854]"
    },
    {
      "src": "affectation_operator: = [198604,198605]",
      "dest": "affectation_operator: = [200098,200099]"
    },
    {
      "src": "identifier: strLen [190655,190661]",
      "dest": "identifier: strLen [192149,192155]"
    },
    {
      "src": "comparison_operator: < [168311,168312]",
      "dest": "comparison_operator: < [169805,169806]"
    },
    {
      "src": "variable_declarator [159146,159160]",
      "dest": "variable_declarator [160640,160654]"
    },
    {
      "src": "identifier: sz [206974,206976]",
      "dest": "identifier: sz [208468,208470]"
    },
    {
      "src": "parenthesized_expression [63948,63966]",
      "dest": "parenthesized_expression [64995,65013]"
    },
    {
      "src": "block [198583,198646]",
      "dest": "block [200077,200140]"
    },
    {
      "src": "identifier: str [171881,171884]",
      "dest": "identifier: str [173375,173378]"
    },
    {
      "src": "block_comment:     \n     * <p>Case insensitive removal of a substring if it is at the end of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeEndIgnoreCase(null, *)      = null\n     * StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n     * StringUtils.removeEndIgnoreCase(*, null)      = *\n     * StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com.\")  = \"www.domain.com\"\n     * StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\")   = \"www.domain\"\n     * StringUtils.removeEndIgnoreCase(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeEndIgnoreCase(\"abc\", \"\")    = \"abc\"\n     * StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\") = \"www.domain\")\n     * StringUtils.removeEndIgnoreCase(\"www.domain.COM\", \".com\") = \"www.domain\")\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for (case insensitive) and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.4\n     */ [141874,143217]",
      "dest": "block_comment:     \n     * <p>Case insensitive removal of a substring if it is at the end of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeEndIgnoreCase(null, *)      = null\n     * StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n     * StringUtils.removeEndIgnoreCase(*, null)      = *\n     * StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com.\")  = \"www.domain.com\"\n     * StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\")   = \"www.domain\"\n     * StringUtils.removeEndIgnoreCase(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeEndIgnoreCase(\"abc\", \"\")    = \"abc\"\n     * StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\") = \"www.domain\")\n     * StringUtils.removeEndIgnoreCase(\"www.domain.COM\", \".com\") = \"www.domain\")\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for (case insensitive) and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.4\n     */ [143368,144711]"
    },
    {
      "src": "if_statement [36600,36660]",
      "dest": "if_statement [36600,36660]"
    },
    {
      "src": "formal_parameters [244068,244115]",
      "dest": "formal_parameters [245562,245609]"
    },
    {
      "src": "block [127544,127580]",
      "dest": "block [129038,129074]"
    },
    {
      "src": "return_statement [81728,81739]",
      "dest": "return_statement [83222,83233]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets the String that is nested in between two Strings.\n     * Only the first match is returned.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> open/close returns <code>null</code> (no match).\n     * An empty (\"\") open and close returns an empty string.</p>\n     *\n     * <pre>\n     * StringUtils.substringBetween(\"wx[b]yz\", \"[\", \"]\") = \"b\"\n     * StringUtils.substringBetween(null, *, *)          = null\n     * StringUtils.substringBetween(*, null, *)          = null\n     * StringUtils.substringBetween(*, *, null)          = null\n     * StringUtils.substringBetween(\"\", \"\", \"\")          = \"\"\n     * StringUtils.substringBetween(\"\", \"\", \"]\")         = null\n     * StringUtils.substringBetween(\"\", \"[\", \"]\")        = null\n     * StringUtils.substringBetween(\"yabcz\", \"\", \"\")     = \"\"\n     * StringUtils.substringBetween(\"yabcz\", \"y\", \"z\")   = \"abc\"\n     * StringUtils.substringBetween(\"yabczyabcz\", \"y\", \"z\")   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String containing the substring, may be null\n     * @param open  the String before the substring, may be null\n     * @param close  the String after the substring, may be null\n     * @return the substring, <code>null</code> if no match\n     * @since 2.0\n     */ [87788,89086]",
      "dest": "block_comment:     \n     * <p>Gets the String that is nested in between two Strings.\n     * Only the first match is returned.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> open/close returns <code>null</code> (no match).\n     * An empty (\"\") open and close returns an empty string.</p>\n     *\n     * <pre>\n     * StringUtils.substringBetween(\"wx[b]yz\", \"[\", \"]\") = \"b\"\n     * StringUtils.substringBetween(null, *, *)          = null\n     * StringUtils.substringBetween(*, null, *)          = null\n     * StringUtils.substringBetween(*, *, null)          = null\n     * StringUtils.substringBetween(\"\", \"\", \"\")          = \"\"\n     * StringUtils.substringBetween(\"\", \"\", \"]\")         = null\n     * StringUtils.substringBetween(\"\", \"[\", \"]\")        = null\n     * StringUtils.substringBetween(\"yabcz\", \"\", \"\")     = \"\"\n     * StringUtils.substringBetween(\"yabcz\", \"y\", \"z\")   = \"abc\"\n     * StringUtils.substringBetween(\"yabczyabcz\", \"y\", \"z\")   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String containing the substring, may be null\n     * @param open  the String before the substring, may be null\n     * @param close  the String after the substring, may be null\n     * @return the substring, <code>null</code> if no match\n     * @since 2.0\n     */ [89282,90580]"
    },
    {
      "src": "parenthesized_expression [160104,160121]",
      "dest": "parenthesized_expression [161598,161615]"
    },
    {
      "src": "type: String[] [107707,107715]",
      "dest": "type: String[] [109201,109209]"
    },
    {
      "src": "comparison_operator: == [127535,127537]",
      "dest": "comparison_operator: == [129029,129031]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [56209,56282]",
      "dest": "line_comment: //----------------------------------------------------------------------- [56555,56628]"
    },
    {
      "src": "formal_parameters [145476,145501]",
      "dest": "formal_parameters [146970,146995]"
    },
    {
      "src": "argument_list [98140,98169]",
      "dest": "argument_list [99634,99663]"
    },
    {
      "src": "type: int [160303,160306]",
      "dest": "type: int [161797,161800]"
    },
    {
      "src": "identifier: str [163611,163614]",
      "dest": "identifier: str [165105,165108]"
    },
    {
      "src": "method_invocation [204447,204459]",
      "dest": "method_invocation [205941,205953]"
    },
    {
      "src": "comparison_operator: > [168425,168426]",
      "dest": "comparison_operator: > [169919,169920]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [213983,214056]",
      "dest": "line_comment: //----------------------------------------------------------------------- [215477,215550]"
    },
    {
      "src": "argument_list [105945,105965]",
      "dest": "argument_list [107439,107459]"
    },
    {
      "src": "formal_parameter [152597,152616]",
      "dest": "formal_parameter [154091,154110]"
    },
    {
      "src": "local_variable_declaration [110700,110721]",
      "dest": "local_variable_declaration [112194,112215]"
    },
    {
      "src": "identifier: separatorChars [116332,116346]",
      "dest": "identifier: separatorChars [117826,117840]"
    },
    {
      "src": "affectation_operator: = [182197,182198]",
      "dest": "affectation_operator: = [183691,183692]"
    },
    {
      "src": "parenthesized_expression [145735,145755]",
      "dest": "parenthesized_expression [147229,147249]"
    },
    {
      "src": "?: ? [70395,70396]",
      "dest": "?: ? [71889,71890]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator, preserving all tokens, including empty tokens created by \n     * adjacent separators. This is an alternative to using StringTokenizer.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null)       = null\n     * StringUtils.splitPreserveAllTokens(\"\")         = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\") = [\"abc\", \"\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\" abc \")    = [\"\", \"abc\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */ [106532,107688]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator, preserving all tokens, including empty tokens created by \n     * adjacent separators. This is an alternative to using StringTokenizer.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null)       = null\n     * StringUtils.splitPreserveAllTokens(\"\")         = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\") = [\"abc\", \"\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\" abc \")    = [\"\", \"abc\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */ [108026,109182]"
    },
    {
      "src": "if_statement [135370,135428]",
      "dest": "if_statement [136864,136922]"
    },
    {
      "src": "static: static [47723,47729]",
      "dest": "static: static [47723,47729]"
    },
    {
      "src": "identifier: i [203292,203293]",
      "dest": "identifier: i [204786,204787]"
    },
    {
      "src": "binary_expression [199776,199804]",
      "dest": "binary_expression [201270,201298]"
    },
    {
      "src": "\": \" [158852,158853]",
      "dest": "\": \" [160346,160347]"
    },
    {
      "src": "identifier: i [186134,186135]",
      "dest": "identifier: i [187628,187629]"
    },
    {
      "src": "identifier: CharUtils [170109,170118]",
      "dest": "identifier: CharUtils [171603,171612]"
    },
    {
      "src": "comparison_operator: == [223784,223786]",
      "dest": "comparison_operator: == [225278,225280]"
    },
    {
      "src": "comparison_operator: == [161885,161887]",
      "dest": "comparison_operator: == [163379,163381]"
    },
    {
      "src": "local_variable_declaration [54702,54712]",
      "dest": "local_variable_declaration [58003,58013]"
    },
    {
      "src": "arithmetic_operator: - [161888,161889]",
      "dest": "arithmetic_operator: - [163382,163383]"
    },
    {
      "src": "continue_statement [160571,160580]",
      "dest": "continue_statement [162065,162074]"
    },
    {
      "src": "method_declaration [10624,10717]",
      "dest": "method_declaration [10624,10717]"
    },
    {
      "src": "identifier: str [36107,36110]",
      "dest": "identifier: str [36107,36110]"
    },
    {
      "src": "binary_expression [134408,134425]",
      "dest": "binary_expression [135902,135919]"
    },
    {
      "src": "variable_declarator [60930,60949]",
      "dest": "variable_declarator [61317,61336]"
    },
    {
      "src": "identifier: allStringsNull [228093,228107]",
      "dest": "identifier: allStringsNull [229587,229601]"
    },
    {
      "src": "binary_expression [81506,81523]",
      "dest": "binary_expression [83000,83017]"
    },
    {
      "src": "formal_parameters [43331,43361]",
      "dest": "formal_parameters [43331,43361]"
    },
    {
      "src": "field_access [123625,123651]",
      "dest": "field_access [125119,125145]"
    },
    {
      "src": "identifier: toCharArray [59650,59661]",
      "dest": "identifier: toCharArray [60037,60048]"
    },
    {
      "src": "identifier: isEmpty [210184,210191]",
      "dest": "identifier: isEmpty [211678,211685]"
    },
    {
      "src": "identifier: str [103119,103122]",
      "dest": "identifier: str [104613,104616]"
    },
    {
      "src": "block [54815,54985]",
      "dest": "block [58122,58762]"
    },
    {
      "src": "return_statement [170506,170539]",
      "dest": "return_statement [172000,172033]"
    },
    {
      "src": "binary_expression [117114,117140]",
      "dest": "binary_expression [118608,118634]"
    },
    {
      "src": "identifier: overlay [167980,167987]",
      "dest": "identifier: overlay [169474,169481]"
    },
    {
      "src": "identifier: str [84749,84752]",
      "dest": "identifier: str [86243,86246]"
    },
    {
      "src": "affectation_operator: = [117950,117951]",
      "dest": "affectation_operator: = [119444,119445]"
    },
    {
      "src": "local_variable_declaration [235523,235546]",
      "dest": "local_variable_declaration [237017,237040]"
    },
    {
      "src": "comparison_operator: == [160514,160516]",
      "dest": "comparison_operator: == [162008,162010]"
    },
    {
      "src": "variable_declarator [36338,36388]",
      "dest": "variable_declarator [36338,36388]"
    },
    {
      "src": "type: int [46553,46556]",
      "dest": "type: int [46553,46556]"
    },
    {
      "src": "method_invocation [132495,132513]",
      "dest": "method_invocation [133989,134007]"
    },
    {
      "src": "if_statement [43372,43457]",
      "dest": "if_statement [43372,43457]"
    },
    {
      "src": "binary_expression [162560,162574]",
      "dest": "binary_expression [164054,164068]"
    },
    {
      "src": "identifier: length [143478,143484]",
      "dest": "identifier: length [144972,144978]"
    },
    {
      "src": "static: static [69694,69700]",
      "dest": "static: static [71188,71194]"
    },
    {
      "src": "modifiers [21622,21635]",
      "dest": "modifiers [21622,21635]"
    },
    {
      "src": "modifiers [157777,157791]",
      "dest": "modifiers [159271,159285]"
    },
    {
      "src": "formal_parameter [195436,195451]",
      "dest": "formal_parameter [196930,196945]"
    },
    {
      "src": "identifier: str [212160,212163]",
      "dest": "identifier: str [213654,213657]"
    },
    {
      "src": "method_declaration [179001,179101]",
      "dest": "method_declaration [180495,180595]"
    },
    {
      "src": "type: String [46535,46541]",
      "dest": "type: String [46535,46541]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [136352,136425]",
      "dest": "line_comment: //----------------------------------------------------------------------- [137846,137919]"
    },
    {
      "src": "expression_statement [170477,170487]",
      "dest": "expression_statement [171971,171981]"
    },
    {
      "src": "identifier: str [123035,123038]",
      "dest": "identifier: str [124529,124532]"
    },
    {
      "src": "argument_list [123145,123147]",
      "dest": "argument_list [124639,124641]"
    },
    {
      "src": "update_expression [36673,36680]",
      "dest": "update_expression [36673,36680]"
    },
    {
      "src": "identifier: cs [7441,7443]",
      "dest": "identifier: cs [7441,7443]"
    },
    {
      "src": "identifier: separator [176888,176897]",
      "dest": "identifier: separator [178382,178391]"
    },
    {
      "src": "block [22998,23297]",
      "dest": "block [22998,23297]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the n-th index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.ordinalIndexOf(null, *, *)          = -1\n     * StringUtils.ordinalIndexOf(*, null, *)          = -1\n     * StringUtils.ordinalIndexOf(\"\", \"\", *)           = 0\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1)  = 0\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2)  = 1\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1)  = 2\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2)  = 5\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1) = 1\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2) = 4\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1)   = 0\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2)   = 0\n     * </pre>\n     *\n     * <p>Note that 'head(String str, int n)' may be implemented as: </p>\n     *\n     * <pre>\n     *   str.substring(0, lastOrdinalIndexOf(str, \"\\n\", n))\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param ordinal  the n-th <code>searchStr</code> to find\n     * @return the n-th index of the search String,\n     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n     * @since 2.1\n     */ [33653,35087]",
      "dest": "block_comment:     \n     * <p>Finds the n-th index within a String, handling <code>null</code>.\n     * This method uses {@link String#indexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.ordinalIndexOf(null, *, *)          = -1\n     * StringUtils.ordinalIndexOf(*, null, *)          = -1\n     * StringUtils.ordinalIndexOf(\"\", \"\", *)           = 0\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 1)  = 0\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"a\", 2)  = 1\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 1)  = 2\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"b\", 2)  = 5\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 1) = 1\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"ab\", 2) = 4\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 1)   = 0\n     * StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2)   = 0\n     * </pre>\n     *\n     * <p>Note that 'head(String str, int n)' may be implemented as: </p>\n     *\n     * <pre>\n     *   str.substring(0, lastOrdinalIndexOf(str, \"\\n\", n))\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param ordinal  the n-th <code>searchStr</code> to find\n     * @return the n-th index of the search String,\n     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n     * @since 2.1\n     */ [33653,35087]"
    },
    {
      "src": "decimal_integer_literal: 3 [219830,219831]",
      "dest": "decimal_integer_literal: 3 [221324,221325]"
    },
    {
      "src": "parenthesized_expression [23970,24010]",
      "dest": "parenthesized_expression [23970,24010]"
    },
    {
      "src": "comparison_operator: == [174617,174619]",
      "dest": "comparison_operator: == [176111,176113]"
    },
    {
      "src": "block [23923,23959]",
      "dest": "block [23923,23959]"
    },
    {
      "src": "visibility: public [92765,92771]",
      "dest": "visibility: public [94259,94265]"
    },
    {
      "src": "type: int [159201,159204]",
      "dest": "type: int [160695,160698]"
    },
    {
      "src": "identifier: cs1 [27515,27518]",
      "dest": "identifier: cs1 [27515,27518]"
    },
    {
      "src": "identifier: Character [18650,18659]",
      "dest": "identifier: Character [18650,18659]"
    },
    {
      "src": "identifier: indexOf [104765,104772]",
      "dest": "identifier: indexOf [106259,106266]"
    },
    {
      "src": "block [66460,67054]",
      "dest": "block [67507,68548]"
    },
    {
      "src": "identifier: isNotEmpty [8033,8043]",
      "dest": "identifier: isNotEmpty [8033,8043]"
    },
    {
      "src": "local_variable_declaration [110647,110691]",
      "dest": "local_variable_declaration [112141,112185]"
    },
    {
      "src": "identifier: separator [81465,81474]",
      "dest": "identifier: separator [82959,82968]"
    },
    {
      "src": "method_invocation [158160,158173]",
      "dest": "method_invocation [159654,159667]"
    },
    {
      "src": "if_statement [198452,198746]",
      "dest": "if_statement [199946,200240]"
    },
    {
      "src": "identifier: inputLength [174550,174561]",
      "dest": "identifier: inputLength [176044,176055]"
    },
    {
      "src": "local_variable_declaration [162254,162285]",
      "dest": "local_variable_declaration [163748,163779]"
    },
    {
      "src": "identifier: text [162271,162275]",
      "dest": "identifier: text [163765,163769]"
    },
    {
      "src": "identifier: ordinal [35159,35166]",
      "dest": "identifier: ordinal [35159,35166]"
    },
    {
      "src": "identifier: css [227149,227152]",
      "dest": "identifier: css [228643,228646]"
    },
    {
      "src": "type: char [228525,228529]",
      "dest": "type: char [230019,230023]"
    },
    {
      "src": "identifier: hasNext [132615,132622]",
      "dest": "identifier: hasNext [134109,134116]"
    },
    {
      "src": "formal_parameters [148255,148309]",
      "dest": "formal_parameters [149749,149803]"
    },
    {
      "src": "if_statement [71813,71899]",
      "dest": "if_statement [73307,73393]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if a CharSequence is whitespace, empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isBlank(null)      = true\n     * StringUtils.isBlank(\"\")        = true\n     * StringUtils.isBlank(\" \")       = true\n     * StringUtils.isBlank(\"bob\")     = false\n     * StringUtils.isBlank(\"  bob  \") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if the CharSequence is null, empty or whitespace\n     * @since 2.0\n     */ [8115,8625]",
      "dest": "block_comment:     \n     * <p>Checks if a CharSequence is whitespace, empty (\"\") or null.</p>\n     *\n     * <pre>\n     * StringUtils.isBlank(null)      = true\n     * StringUtils.isBlank(\"\")        = true\n     * StringUtils.isBlank(\" \")       = true\n     * StringUtils.isBlank(\"bob\")     = false\n     * StringUtils.isBlank(\"  bob  \") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if the CharSequence is null, empty or whitespace\n     * @since 2.0\n     */ [8115,8625]"
    },
    {
      "src": "block_comment:     \n     * <p>Returns either the passed in CharSequence, or if the CharSequence is\n     * empty or <code>null</code>, the value of <code>defaultStr</code>.</p>\n     *\n     * <pre>\n     * StringUtils.defaultIfEmpty(null, \"NULL\")  = \"NULL\"\n     * StringUtils.defaultIfEmpty(\"\", \"NULL\")    = \"NULL\"\n     * StringUtils.defaultIfEmpty(\"bat\", \"NULL\") = \"bat\"\n     * StringUtils.defaultIfEmpty(\"\", null)      = null\n     * </pre>\n     * @param <T> the specific kind of CharSequence\n     * @param str  the CharSequence to check, may be null\n     * @param defaultStr  the default CharSequence to return\n     *  if the input is empty (\"\") or <code>null</code>, may be null\n     * @return the passed in CharSequence, or the default\n     * @see StringUtils#defaultString(String, String)\n     */ [213029,213811]",
      "dest": "block_comment:     \n     * <p>Returns either the passed in CharSequence, or if the CharSequence is\n     * empty or <code>null</code>, the value of <code>defaultStr</code>.</p>\n     *\n     * <pre>\n     * StringUtils.defaultIfEmpty(null, \"NULL\")  = \"NULL\"\n     * StringUtils.defaultIfEmpty(\"\", \"NULL\")    = \"NULL\"\n     * StringUtils.defaultIfEmpty(\"bat\", \"NULL\") = \"bat\"\n     * StringUtils.defaultIfEmpty(\"\", null)      = null\n     * </pre>\n     * @param <T> the specific kind of CharSequence\n     * @param str  the CharSequence to check, may be null\n     * @param defaultStr  the default CharSequence to return\n     *  if the input is empty (\"\") or <code>null</code>, may be null\n     * @return the passed in CharSequence, or the default\n     * @see StringUtils#defaultString(String, String)\n     */ [214523,215305]"
    },
    {
      "src": "identifier: preserveAllTokens [117895,117912]",
      "dest": "identifier: preserveAllTokens [119389,119406]"
    },
    {
      "src": "identifier: ret [70294,70297]",
      "dest": "identifier: ret [71788,71791]"
    },
    {
      "src": "method_invocation [185396,185411]",
      "dest": "method_invocation [186890,186905]"
    },
    {
      "src": "assignment_expression [168476,168487]",
      "dest": "assignment_expression [169970,169981]"
    },
    {
      "src": "variable_declarator [170257,170283]",
      "dest": "variable_declarator [171751,171777]"
    },
    {
      "src": "block [191884,191987]",
      "dest": "block [193378,193481]"
    },
    {
      "src": "identifier: abrevMarker [220278,220289]",
      "dest": "identifier: abrevMarker [221772,221783]"
    },
    {
      "src": "decimal_integer_literal: 0 [225133,225134]",
      "dest": "decimal_integer_literal: 0 [226627,226628]"
    },
    {
      "src": "identifier: p [236608,236609]",
      "dest": "identifier: p [238102,238103]"
    },
    {
      "src": "local_variable_declaration [137197,137207]",
      "dest": "local_variable_declaration [138691,138701]"
    },
    {
      "src": "method_invocation [91067,91080]",
      "dest": "method_invocation [92561,92574]"
    },
    {
      "src": "field_access [227183,227193]",
      "dest": "field_access [228677,228687]"
    },
    {
      "src": "formal_parameter [239150,239163]",
      "dest": "formal_parameter [240644,240657]"
    },
    {
      "src": "identifier: lastIndexOfIgnoreCase [47897,47918]",
      "dest": "identifier: lastIndexOfIgnoreCase [47897,47918]"
    },
    {
      "src": "identifier: length [158165,158171]",
      "dest": "identifier: length [159659,159665]"
    },
    {
      "src": "formal_parameters [101253,101283]",
      "dest": "formal_parameters [102747,102777]"
    },
    {
      "src": "binary_expression [211205,211215]",
      "dest": "binary_expression [212699,212709]"
    },
    {
      "src": "null_literal: null [14853,14857]",
      "dest": "null_literal: null [14853,14857]"
    },
    {
      "src": "comparison_operator: == [66500,66502]",
      "dest": "comparison_operator: == [67547,67549]"
    },
    {
      "src": "identifier: start [168419,168424]",
      "dest": "identifier: start [169913,169918]"
    },
    {
      "src": "comparison_operator: == [160544,160546]",
      "dest": "comparison_operator: == [162038,162040]"
    },
    {
      "src": "?: ? [27499,27500]",
      "dest": "?: ? [27499,27500]"
    },
    {
      "src": "variable_declarator [160307,160319]",
      "dest": "variable_declarator [161801,161813]"
    },
    {
      "src": "block [209152,209189]",
      "dest": "block [210646,210683]"
    },
    {
      "src": "identifier: Character [20337,20346]",
      "dest": "identifier: Character [20337,20346]"
    },
    {
      "src": "return_statement [183051,183082]",
      "dest": "return_statement [184545,184576]"
    },
    {
      "src": "block [235218,235251]",
      "dest": "block [236712,236745]"
    },
    {
      "src": "block [198406,198787]",
      "dest": "block [199900,200281]"
    },
    {
      "src": "field_access [116693,116722]",
      "dest": "field_access [118187,118216]"
    },
    {
      "src": "static: static [181333,181339]",
      "dest": "static: static [182827,182833]"
    },
    {
      "src": "affectation_operator: = [175002,175003]",
      "dest": "affectation_operator: = [176496,176497]"
    },
    {
      "src": "comparison_operator: == [23038,23040]",
      "dest": "comparison_operator: == [23038,23040]"
    },
    {
      "src": "affectation_operator: = [227871,227872]",
      "dest": "affectation_operator: = [229365,229366]"
    },
    {
      "src": "if_statement [174586,174658]",
      "dest": "if_statement [176080,176152]"
    },
    {
      "src": "identifier: CharSequenceUtils [195742,195759]",
      "dest": "identifier: CharSequenceUtils [197236,197253]"
    },
    {
      "src": "identifier: pos [86636,86639]",
      "dest": "identifier: pos [88130,88133]"
    },
    {
      "src": "binary_expression [77346,77353]",
      "dest": "binary_expression [78840,78847]"
    },
    {
      "src": "method_invocation [126211,126250]",
      "dest": "method_invocation [127705,127744]"
    },
    {
      "src": "binary_expression [127529,127542]",
      "dest": "binary_expression [129023,129036]"
    },
    {
      "src": "if_statement [73692,73741]",
      "dest": "if_statement [75186,75235]"
    },
    {
      "src": "identifier: str [239749,239752]",
      "dest": "identifier: str [241243,241246]"
    },
    {
      "src": "static: static [6102,6108]",
      "dest": "static: static [6102,6108]"
    },
    {
      "src": "modifiers [113271,113284]",
      "dest": "modifiers [114765,114778]"
    },
    {
      "src": "identifier: cs [57365,57367]",
      "dest": "identifier: cs [54478,54480]"
    },
    {
      "src": "identifier: str [194530,194533]",
      "dest": "identifier: str [196024,196027]"
    },
    {
      "src": "identifier: match [110738,110743]",
      "dest": "identifier: match [112232,112237]"
    },
    {
      "src": "block [221980,222015]",
      "dest": "block [223474,223509]"
    },
    {
      "src": "arithmetic_operator: + [158870,158871]",
      "dest": "arithmetic_operator: + [160364,160365]"
    },
    {
      "src": "affectation_operator: = [36537,36538]",
      "dest": "affectation_operator: = [36537,36538]"
    },
    {
      "src": "parenthesized_expression [168186,168197]",
      "dest": "parenthesized_expression [169680,169691]"
    },
    {
      "src": "method_invocation [99751,99806]",
      "dest": "method_invocation [101245,101300]"
    },
    {
      "src": "identifier: str [84700,84703]",
      "dest": "identifier: str [86194,86197]"
    },
    {
      "src": "identifier: str [101329,101332]",
      "dest": "identifier: str [102823,102826]"
    },
    {
      "src": "visibility: public [115413,115419]",
      "dest": "visibility: public [116907,116913]"
    },
    {
      "src": "modifiers [211137,211150]",
      "dest": "modifiers [212631,212644]"
    },
    {
      "src": "block [84728,84763]",
      "dest": "block [86222,86257]"
    },
    {
      "src": "argument_list [168171,168173]",
      "dest": "argument_list [169665,169667]"
    },
    {
      "src": "update_expression [208187,208190]",
      "dest": "update_expression [209681,209684]"
    },
    {
      "src": "identifier: end [105892,105895]",
      "dest": "identifier: end [107386,107389]"
    },
    {
      "src": "identifier: StringUtils [9628,9639]",
      "dest": "identifier: StringUtils [9628,9639]"
    },
    {
      "src": "method_invocation [181818,181834]",
      "dest": "method_invocation [183312,183328]"
    },
    {
      "src": "line_comment: // handle negatives [75675,75694]",
      "dest": "line_comment: // handle negatives [77169,77188]"
    },
    {
      "src": "type: int [116795,116798]",
      "dest": "type: int [118289,118292]"
    },
    {
      "src": "comparison_operator: == [49724,49726]",
      "dest": "comparison_operator: == [49724,49726]"
    },
    {
      "src": "affectation_operator: = [118906,118907]",
      "dest": "affectation_operator: = [120400,120401]"
    },
    {
      "src": "affectation_operator: = [159187,159188]",
      "dest": "affectation_operator: = [160681,160682]"
    },
    {
      "src": "argument_list [198772,198776]",
      "dest": "argument_list [200266,200270]"
    },
    {
      "src": "identifier: tokenStart [123867,123877]",
      "dest": "identifier: tokenStart [125361,125371]"
    },
    {
      "src": "?: ? [150308,150309]",
      "dest": "?: ? [151802,151803]"
    },
    {
      "src": "arithmetic_operator: + [89494,89495]",
      "dest": "arithmetic_operator: + [90988,90989]"
    },
    {
      "src": "variable_declarator [225158,225159]",
      "dest": "variable_declarator [226652,226653]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [223896,223911]",
      "dest": "identifier: INDEX_NOT_FOUND [225390,225405]"
    },
    {
      "src": "formal_parameter [11648,11658]",
      "dest": "formal_parameter [11648,11658]"
    },
    {
      "src": "affectation_operator: = [235168,235169]",
      "dest": "affectation_operator: = [236662,236663]"
    },
    {
      "src": "type: String [149798,149804]",
      "dest": "type: String [151292,151298]"
    },
    {
      "src": "assignment_expression [161745,161791]",
      "dest": "assignment_expression [163239,163285]"
    },
    {
      "src": "decimal_integer_literal: 0 [155298,155299]",
      "dest": "decimal_integer_literal: 0 [156792,156793]"
    },
    {
      "src": "argument_list [56174,56176]",
      "dest": "argument_list [56520,56522]"
    },
    {
      "src": "argument_list [168705,168710]",
      "dest": "argument_list [170199,170204]"
    },
    {
      "src": "identifier: max [149927,149930]",
      "dest": "identifier: max [151421,151424]"
    },
    {
      "src": "comparison_operator: == [210356,210358]",
      "dest": "comparison_operator: == [211850,211852]"
    },
    {
      "src": "local_variable_declaration [206924,206945]",
      "dest": "local_variable_declaration [208418,208439]"
    },
    {
      "src": "if_statement [31857,31942]",
      "dest": "if_statement [31857,31942]"
    },
    {
      "src": "identifier: regionMatches [49838,49851]",
      "dest": "identifier: regionMatches [49838,49851]"
    },
    {
      "src": "identifier: length [211290,211296]",
      "dest": "identifier: length [212784,212790]"
    },
    {
      "src": "identifier: separatorChar [110847,110860]",
      "dest": "identifier: separatorChar [112341,112354]"
    },
    {
      "src": "method_invocation [36217,36235]",
      "dest": "method_invocation [36217,36235]"
    },
    {
      "src": "identifier: isWhitespace [209286,209298]",
      "dest": "identifier: isWhitespace [210780,210792]"
    },
    {
      "src": "return_statement [87737,87776]",
      "dest": "return_statement [89231,89270]"
    },
    {
      "src": "comparison_operator: != [133018,133020]",
      "dest": "comparison_operator: != [134512,134514]"
    },
    {
      "src": "comparison_operator: != [204488,204490]",
      "dest": "comparison_operator: != [205982,205984]"
    },
    {
      "src": "affectation_operator: = [174901,174902]",
      "dest": "affectation_operator: = [176395,176396]"
    },
    {
      "src": "parenthesized_expression [180184,180202]",
      "dest": "parenthesized_expression [181678,181696]"
    },
    {
      "src": "affectation_operator: = [175218,175219]",
      "dest": "affectation_operator: = [176712,176713]"
    },
    {
      "src": "identifier: csLength [57678,57686]",
      "dest": "identifier: csLength [58018,58026]"
    },
    {
      "src": "argument_list [81778,81786]",
      "dest": "argument_list [83272,83280]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [49666,49681]",
      "dest": "identifier: INDEX_NOT_FOUND [49666,49681]"
    },
    {
      "src": "identifier: i [23226,23227]",
      "dest": "identifier: i [23226,23227]"
    },
    {
      "src": "new: new [219495,219498]",
      "dest": "new: new [220989,220992]"
    },
    {
      "src": "type: char [183914,183918]",
      "dest": "type: char [185408,185412]"
    },
    {
      "src": "binary_expression [91171,91196]",
      "dest": "binary_expression [92665,92690]"
    },
    {
      "src": "affectation_operator: = [116809,116810]",
      "dest": "affectation_operator: = [118303,118304]"
    },
    {
      "src": "binary_expression [49631,49643]",
      "dest": "binary_expression [49631,49643]"
    },
    {
      "src": "identifier: Character [8851,8860]",
      "dest": "identifier: Character [8851,8860]"
    },
    {
      "src": "expression_statement [118639,118656]",
      "dest": "expression_statement [120133,120150]"
    },
    {
      "src": "return_statement [80071,80108]",
      "dest": "return_statement [81565,81602]"
    },
    {
      "src": "identifier: i [117083,117084]",
      "dest": "identifier: i [118577,118578]"
    },
    {
      "src": "method_invocation [84708,84726]",
      "dest": "method_invocation [86202,86220]"
    },
    {
      "src": "decimal_integer_literal: 0 [36323,36324]",
      "dest": "decimal_integer_literal: 0 [36323,36324]"
    },
    {
      "src": "assignment_expression [118073,118090]",
      "dest": "assignment_expression [119567,119584]"
    },
    {
      "src": "type: String [157811,157817]",
      "dest": "type: String [159305,159311]"
    },
    {
      "src": "method_invocation [210342,210354]",
      "dest": "method_invocation [211836,211848]"
    },
    {
      "src": "method_invocation [150465,150523]",
      "dest": "method_invocation [151959,152017]"
    },
    {
      "src": "argument_list [62345,62350]",
      "dest": "argument_list [63084,63089]"
    },
    {
      "src": "affectation_operator: = [173156,173157]",
      "dest": "affectation_operator: = [174650,174651]"
    },
    {
      "src": "identifier: remove [145494,145500]",
      "dest": "identifier: remove [146988,146994]"
    },
    {
      "src": "parenthesized_expression [90798,90846]",
      "dest": "parenthesized_expression [92292,92340]"
    },
    {
      "src": "argument_list [227881,227914]",
      "dest": "argument_list [229375,229408]"
    },
    {
      "src": "block [50894,50931]",
      "dest": "block [50894,50931]"
    },
    {
      "src": "argument_list [159503,159505]",
      "dest": "argument_list [160997,160999]"
    },
    {
      "src": "block [51910,51947]",
      "dest": "block [51910,51947]"
    },
    {
      "src": "identifier: buf [132933,132936]",
      "dest": "identifier: buf [134427,134430]"
    },
    {
      "src": "decimal_integer_literal: 0 [188919,188920]",
      "dest": "decimal_integer_literal: 0 [190413,190414]"
    },
    {
      "src": "identifier: cs [7476,7478]",
      "dest": "identifier: cs [7476,7478]"
    },
    {
      "src": "argument_list [221970,221978]",
      "dest": "argument_list [223464,223472]"
    },
    {
      "src": "identifier: length [235129,235135]",
      "dest": "identifier: length [236623,236629]"
    },
    {
      "src": "identifier: j [61109,61110]",
      "dest": "identifier: j [61568,61569]"
    },
    {
      "src": "formal_parameter [40873,40888]",
      "dest": "formal_parameter [40873,40888]"
    },
    {
      "src": "method_invocation [120470,120502]",
      "dest": "method_invocation [121964,121996]"
    },
    {
      "src": "identifier: StringUtils [8079,8090]",
      "dest": "identifier: StringUtils [8079,8090]"
    },
    {
      "src": "string_fragment: Minimum abbreviation width is 4 [219525,219556]",
      "dest": "string_fragment: Minimum abbreviation width is 4 [221019,221050]"
    },
    {
      "src": "decimal_integer_literal: 0 [18776,18777]",
      "dest": "decimal_integer_literal: 0 [18776,18777]"
    },
    {
      "src": "type: int [60753,60756]",
      "dest": "type: int [61140,61143]"
    },
    {
      "src": "block [176621,176972]",
      "dest": "block [178115,178466]"
    },
    {
      "src": "decimal_integer_literal: 1 [236019,236020]",
      "dest": "decimal_integer_literal: 1 [237513,237514]"
    },
    {
      "src": "identifier: bufSize [131354,131361]",
      "dest": "identifier: bufSize [132848,132855]"
    },
    {
      "src": "parenthesized_expression [222034,222090]",
      "dest": "parenthesized_expression [223528,223584]"
    },
    {
      "src": "identifier: lastIndexOf [36459,36470]",
      "dest": "identifier: lastIndexOf [36459,36470]"
    },
    {
      "src": "affectation_operator: = [150246,150247]",
      "dest": "affectation_operator: = [151740,151741]"
    },
    {
      "src": "identifier: str [198270,198273]",
      "dest": "identifier: str [199764,199767]"
    },
    {
      "src": "line_comment: // Reversing [213966,213978]",
      "dest": "line_comment: // Reversing [215460,215472]"
    },
    {
      "src": "identifier: str2 [223751,223755]",
      "dest": "identifier: str2 [225245,225249]"
    },
    {
      "src": "modifiers [199707,199720]",
      "dest": "modifiers [201201,201214]"
    },
    {
      "src": "argument_list [61083,61086]",
      "dest": "argument_list [61542,61545]"
    },
    {
      "src": "identifier: searchString [149887,149899]",
      "dest": "identifier: searchString [151381,151393]"
    },
    {
      "src": "identifier: c [123836,123837]",
      "dest": "identifier: c [125330,125331]"
    },
    {
      "src": "identifier: i [202092,202093]",
      "dest": "identifier: i [203586,203587]"
    },
    {
      "src": "formal_parameter [33453,33463]",
      "dest": "formal_parameter [33453,33463]"
    },
    {
      "src": "logical_operator: && [204471,204473]",
      "dest": "logical_operator: && [205965,205967]"
    },
    {
      "src": "decimal_integer_literal: 1 [181753,181754]",
      "dest": "decimal_integer_literal: 1 [183247,183248]"
    },
    {
      "src": "type: int [57497,57500]",
      "dest": "type: int [57837,57840]"
    },
    {
      "src": "if_statement [91260,91313]",
      "dest": "if_statement [92754,92807]"
    },
    {
      "src": "static: static [169898,169904]",
      "dest": "static: static [171392,171398]"
    },
    {
      "src": "line_comment: // sure we are not exceeding the length of the string each time through [227526,227597]",
      "dest": "line_comment: // sure we are not exceeding the length of the string each time through [229020,229091]"
    },
    {
      "src": "type: int [127589,127592]",
      "dest": "type: int [129083,129086]"
    },
    {
      "src": "argument_list [200947,200949]",
      "dest": "argument_list [202441,202443]"
    },
    {
      "src": "binary_expression [104271,104279]",
      "dest": "binary_expression [105765,105773]"
    },
    {
      "src": "variable_declarator [131382,131396]",
      "dest": "variable_declarator [132876,132890]"
    },
    {
      "src": "static: static [71744,71750]",
      "dest": "static: static [73238,73244]"
    },
    {
      "src": "block_comment:     \n     * <p>Joins the elements of the provided <code>Iterable</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterable  the <code>Iterable</code> providing the values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, <code>null</code> if null iterator input\n     * @since 2.3\n     */ [135493,136134]",
      "dest": "block_comment:     \n     * <p>Joins the elements of the provided <code>Iterable</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterable  the <code>Iterable</code> providing the values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, <code>null</code> if null iterator input\n     * @since 2.3\n     */ [136987,137628]"
    },
    {
      "src": "identifier: str [174425,174428]",
      "dest": "identifier: str [175919,175922]"
    },
    {
      "src": "comparison_operator: < [70292,70293]",
      "dest": "comparison_operator: < [71786,71787]"
    },
    {
      "src": "identifier: getClass [24452,24460]",
      "dest": "identifier: getClass [24452,24460]"
    },
    {
      "src": "identifier: startsWith [238122,238132]",
      "dest": "identifier: startsWith [239616,239626]"
    },
    {
      "src": "identifier: EMPTY [81619,81624]",
      "dest": "identifier: EMPTY [83113,83118]"
    },
    {
      "src": "argument_list [162359,162375]",
      "dest": "argument_list [163853,163869]"
    },
    {
      "src": "if_statement [134536,134601]",
      "dest": "if_statement [136030,136095]"
    },
    {
      "src": "parenthesized_expression [174424,174437]",
      "dest": "parenthesized_expression [175918,175931]"
    },
    {
      "src": "block [25219,25346]",
      "dest": "block [25219,25346]"
    },
    {
      "src": "identifier: splitWorker [116301,116312]",
      "dest": "identifier: splitWorker [117795,117806]"
    },
    {
      "src": "modifiers [233703,233716]",
      "dest": "modifiers [235197,235210]"
    },
    {
      "src": "if_statement [111221,111326]",
      "dest": "if_statement [112715,112820]"
    },
    {
      "src": "argument_list [170526,170538]",
      "dest": "argument_list [172020,172032]"
    },
    {
      "src": "ternary_expression [150316,150335]",
      "dest": "ternary_expression [151810,151829]"
    },
    {
      "src": "parenthesized_expression [104379,104404]",
      "dest": "parenthesized_expression [105873,105898]"
    },
    {
      "src": "type: String [219347,219353]",
      "dest": "type: String [220841,220847]"
    },
    {
      "src": "variable_declarator [104599,104635]",
      "dest": "variable_declarator [106093,106129]"
    },
    {
      "src": "update_expression [227664,227667]",
      "dest": "update_expression [229158,229161]"
    },
    {
      "src": "affectation_operator: = [117492,117493]",
      "dest": "affectation_operator: = [118986,118987]"
    },
    {
      "src": "type: int [116822,116825]",
      "dest": "type: int [118316,118319]"
    },
    {
      "src": "decimal_integer_literal: 3 [219954,219955]",
      "dest": "decimal_integer_literal: 3 [221448,221449]"
    },
    {
      "src": "if_statement [39848,39955]",
      "dest": "if_statement [39848,39955]"
    },
    {
      "src": "affectation_operator: = [70059,70060]",
      "dest": "affectation_operator: = [71553,71554]"
    },
    {
      "src": "block_comment:     \n     * <p><code>StringUtils</code> instances should NOT be constructed in\n     * standard programming. Instead, the class should be used as\n     * <code>StringUtils.trim(\" foo \");</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean\n     * instance to operate.</p>\n     */ [6286,6605]",
      "dest": "block_comment:     \n     * <p><code>StringUtils</code> instances should NOT be constructed in\n     * standard programming. Instead, the class should be used as\n     * <code>StringUtils.trim(\" foo \");</code>.</p>\n     *\n     * <p>This constructor is public to permit tools that require a JavaBean\n     * instance to operate.</p>\n     */ [6286,6605]"
    },
    {
      "src": "identifier: match [110989,110994]",
      "dest": "identifier: match [112483,112488]"
    },
    {
      "src": "identifier: str [214571,214574]",
      "dest": "identifier: str [216065,216068]"
    },
    {
      "src": "method_invocation [204352,204363]",
      "dest": "method_invocation [205846,205857]"
    },
    {
      "src": "assignment_expression [168501,168511]",
      "dest": "assignment_expression [169995,170005]"
    },
    {
      "src": "identifier: str [171760,171763]",
      "dest": "identifier: str [173254,173257]"
    },
    {
      "src": "affectation_operator: = [241107,241108]",
      "dest": "affectation_operator: = [242601,242602]"
    },
    {
      "src": "type: String [24876,24882]",
      "dest": "type: String [24876,24882]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, separators specified, \n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)           = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)             = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\", null)   = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc def\", \" \")    = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\", \" \")   = [\"abc\", \"\", def\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\")   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef:\", \":\")  = [\"ab\", \"cd\", \"ef\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef::\", \":\") = [\"ab\", \"cd\", \"ef\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\")  = [\"ab\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef\", \":\")     = [\"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"::cd:ef\", \":\")    = [\"\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef:\", \":\")    = [\"\", cd\", \"ef\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */ [111392,113266]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, separators specified, \n     * preserving all tokens, including empty tokens created by adjacent\n     * separators. This is an alternative to using StringTokenizer.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separatorChars splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitPreserveAllTokens(null, *)           = null\n     * StringUtils.splitPreserveAllTokens(\"\", *)             = []\n     * StringUtils.splitPreserveAllTokens(\"abc def\", null)   = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc def\", \" \")    = [\"abc\", \"def\"]\n     * StringUtils.splitPreserveAllTokens(\"abc  def\", \" \")   = [\"abc\", \"\", def\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef\", \":\")   = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef:\", \":\")  = [\"ab\", \"cd\", \"ef\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab:cd:ef::\", \":\") = [\"ab\", \"cd\", \"ef\", \"\", \"\"]\n     * StringUtils.splitPreserveAllTokens(\"ab::cd:ef\", \":\")  = [\"ab\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef\", \":\")     = [\"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\"::cd:ef\", \":\")    = [\"\", \"\", cd\", \"ef\"]\n     * StringUtils.splitPreserveAllTokens(\":cd:ef:\", \":\")    = [\"\", cd\", \"ef\", \"\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be <code>null</code>\n     * @param separatorChars  the characters used as the delimiters,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.1\n     */ [112886,114760]"
    },
    {
      "src": "type: String [12623,12629]",
      "dest": "type: String [12623,12629]"
    },
    {
      "src": "return_statement [9620,9652]",
      "dest": "return_statement [9620,9652]"
    },
    {
      "src": "block [66663,67027]",
      "dest": "block [67782,68521]"
    },
    {
      "src": "increment_operator: ++ [117494,117496]",
      "dest": "increment_operator: ++ [118988,118990]"
    },
    {
      "src": "identifier: i [207029,207030]",
      "dest": "identifier: i [208523,208524]"
    },
    {
      "src": "true: true [101349,101353]",
      "dest": "true: true [102843,102847]"
    },
    {
      "src": "decimal_integer_literal: 0 [160701,160702]",
      "dest": "decimal_integer_literal: 0 [162195,162196]"
    },
    {
      "src": "method_invocation [24301,24356]",
      "dest": "method_invocation [24301,24356]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [9676,9749]",
      "dest": "line_comment: //----------------------------------------------------------------------- [9676,9749]"
    },
    {
      "src": "binary_expression [168556,168596]",
      "dest": "binary_expression [170050,170090]"
    },
    {
      "src": "variable_declarator [134501,134522]",
      "dest": "variable_declarator [135995,136016]"
    },
    {
      "src": "argument_list [40911,40916]",
      "dest": "argument_list [40911,40916]"
    },
    {
      "src": "modifiers [201914,201927]",
      "dest": "modifiers [203408,203421]"
    },
    {
      "src": "method_declaration [79717,80114]",
      "dest": "method_declaration [81211,81608]"
    },
    {
      "src": "null_literal: null [192722,192726]",
      "dest": "null_literal: null [194216,194220]"
    },
    {
      "src": "affectation_operator: = [117573,117574]",
      "dest": "affectation_operator: = [119067,119068]"
    },
    {
      "src": "variable_declarator [228530,228571]",
      "dest": "variable_declarator [230024,230065]"
    },
    {
      "src": "block_comment:     \n     * <p>Returns padding using the specified delimiter repeated\n     * to a given length.</p>\n     *\n     * <pre>\n     * StringUtils.padding(0, 'e')  = \"\"\n     * StringUtils.padding(3, 'e')  = \"eee\"\n     * StringUtils.padding(-2, 'e') = IndexOutOfBoundsException\n     * </pre>\n     *\n     * <p>Note: this method doesn't not support padding with\n     * <a href=\"http://www.unicode.org/glossary/#supplementary_character\">Unicode Supplementary Characters</a>\n     * as they require a pair of <code>char</code>s to be represented.\n     * If you are needing to support full I18N of your applications\n     * consider using {@link #repeat(String, int)} instead. \n     * </p>\n     *\n     * @param repeat  number of times to repeat delim\n     * @param padChar  character to repeat\n     * @return String with repeated character\n     * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>\n     * @see #repeat(String, int)\n     */ [176978,177912]",
      "dest": "block_comment:     \n     * <p>Returns padding using the specified delimiter repeated\n     * to a given length.</p>\n     *\n     * <pre>\n     * StringUtils.padding(0, 'e')  = \"\"\n     * StringUtils.padding(3, 'e')  = \"eee\"\n     * StringUtils.padding(-2, 'e') = IndexOutOfBoundsException\n     * </pre>\n     *\n     * <p>Note: this method doesn't not support padding with\n     * <a href=\"http://www.unicode.org/glossary/#supplementary_character\">Unicode Supplementary Characters</a>\n     * as they require a pair of <code>char</code>s to be represented.\n     * If you are needing to support full I18N of your applications\n     * consider using {@link #repeat(String, int)} instead. \n     * </p>\n     *\n     * @param repeat  number of times to repeat delim\n     * @param padChar  character to repeat\n     * @return String with repeated character\n     * @throws IndexOutOfBoundsException if <code>repeat &lt; 0</code>\n     * @see #repeat(String, int)\n     */ [178472,179406]"
    },
    {
      "src": "identifier: i [159645,159646]",
      "dest": "identifier: i [161139,161140]"
    },
    {
      "src": "identifier: bufSize [127593,127600]",
      "dest": "identifier: bufSize [129087,129094]"
    },
    {
      "src": "comparison_operator: < [54797,54798]",
      "dest": "comparison_operator: < [54869,54870]"
    },
    {
      "src": "identifier: pads [181860,181864]",
      "dest": "identifier: pads [183354,183358]"
    },
    {
      "src": "identifier: str [219354,219357]",
      "dest": "identifier: str [220848,220851]"
    },
    {
      "src": "argument_list [204446,204460]",
      "dest": "argument_list [205940,205954]"
    },
    {
      "src": "identifier: str [143312,143315]",
      "dest": "identifier: str [144806,144809]"
    },
    {
      "src": "type: CharSequence [63751,63763]",
      "dest": "type: CharSequence [64798,64810]"
    },
    {
      "src": "decimal_integer_literal: 1 [123431,123432]",
      "dest": "decimal_integer_literal: 1 [124925,124926]"
    },
    {
      "src": "method_invocation [168538,168735]",
      "dest": "method_invocation [170032,170229]"
    },
    {
      "src": "identifier: substringAfter [83034,83048]",
      "dest": "identifier: substringAfter [84528,84542]"
    },
    {
      "src": "identifier: toCharArray [186036,186047]",
      "dest": "identifier: toCharArray [187530,187541]"
    },
    {
      "src": "identifier: substring [84901,84910]",
      "dest": "identifier: substring [86395,86404]"
    },
    {
      "src": "identifier: size [184196,184200]",
      "dest": "identifier: size [185690,185694]"
    },
    {
      "src": "binary_expression [137363,137374]",
      "dest": "binary_expression [138857,138868]"
    },
    {
      "src": "identifier: j [54788,54789]",
      "dest": "identifier: j [58092,58093]"
    },
    {
      "src": "block [99734,99813]",
      "dest": "block [101228,101307]"
    },
    {
      "src": "argument_list [24320,24356]",
      "dest": "argument_list [24320,24356]"
    },
    {
      "src": "affectation_operator: = [211319,211320]",
      "dest": "affectation_operator: = [212813,212814]"
    },
    {
      "src": "object_creation_expression [178283,178298]",
      "dest": "object_creation_expression [179777,179792]"
    },
    {
      "src": "binary_expression [159837,159877]",
      "dest": "binary_expression [161331,161371]"
    },
    {
      "src": "method_declaration [163570,163773]",
      "dest": "method_declaration [165064,165267]"
    },
    {
      "src": "identifier: i [209252,209253]",
      "dest": "identifier: i [210746,210747]"
    },
    {
      "src": "static: static [149763,149769]",
      "dest": "static: static [151257,151263]"
    },
    {
      "src": "identifier: length [73766,73772]",
      "dest": "identifier: length [75260,75266]"
    },
    {
      "src": "return_statement [158322,158334]",
      "dest": "return_statement [159816,159828]"
    },
    {
      "src": "parenthesized_expression [219764,219778]",
      "dest": "parenthesized_expression [221258,221272]"
    },
    {
      "src": "type: String [144549,144555]",
      "dest": "type: String [146043,146049]"
    },
    {
      "src": "type: char[] [145616,145622]",
      "dest": "type: char[] [147110,147116]"
    },
    {
      "src": "formal_parameter [90746,90756]",
      "dest": "formal_parameter [92240,92250]"
    },
    {
      "src": "identifier: replaceChars [166198,166210]",
      "dest": "identifier: replaceChars [167692,167704]"
    },
    {
      "src": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, <code>null</code> if null array input\n     * @since 2.0\n     */ [125183,126066]",
      "dest": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @return the joined String, <code>null</code> if null array input\n     * @since 2.0\n     */ [126677,127560]"
    },
    {
      "src": "binary_expression [188911,188920]",
      "dest": "binary_expression [190405,190414]"
    },
    {
      "src": "identifier: text [147078,147082]",
      "dest": "identifier: text [148572,148576]"
    },
    {
      "src": "return_statement [162496,162576]",
      "dest": "return_statement [163990,164070]"
    },
    {
      "src": "formal_parameter [73429,73439]",
      "dest": "formal_parameter [74923,74933]"
    },
    {
      "src": "identifier: iterator [133784,133792]",
      "dest": "identifier: iterator [135278,135286]"
    },
    {
      "src": "identifier: substring [73419,73428]",
      "dest": "identifier: substring [74913,74922]"
    },
    {
      "src": "\": \" [233863,233864]",
      "dest": "\": \" [235357,235358]"
    },
    {
      "src": "binary_expression [180185,180201]",
      "dest": "binary_expression [181679,181695]"
    },
    {
      "src": "formal_parameter [8660,8675]",
      "dest": "formal_parameter [8660,8675]"
    },
    {
      "src": "identifier: strLen [196872,196878]",
      "dest": "identifier: strLen [198366,198372]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [42327,42342]",
      "dest": "identifier: INDEX_NOT_FOUND [42327,42342]"
    },
    {
      "src": "identifier: strLen [173051,173057]",
      "dest": "identifier: strLen [174545,174551]"
    },
    {
      "src": "identifier: searchStr [53010,53019]",
      "dest": "identifier: searchStr [53010,53019]"
    },
    {
      "src": "argument_list [106042,106049]",
      "dest": "argument_list [107536,107543]"
    },
    {
      "src": "parenthesized_expression [211354,211400]",
      "dest": "parenthesized_expression [212848,212894]"
    },
    {
      "src": "formal_parameters [217329,217355]",
      "dest": "formal_parameters [218823,218849]"
    },
    {
      "src": "formal_parameter [129201,129217]",
      "dest": "formal_parameter [130695,130711]"
    },
    {
      "src": "string_literal [26396,26461]",
      "dest": "string_literal [26396,26461]"
    },
    {
      "src": "identifier: str [212204,212207]",
      "dest": "identifier: str [213698,213701]"
    },
    {
      "src": "binary_expression [173271,173291]",
      "dest": "binary_expression [174765,174785]"
    },
    {
      "src": "modifiers [22932,22945]",
      "dest": "modifiers [22932,22945]"
    },
    {
      "src": "comparison_operator: == [39419,39421]",
      "dest": "comparison_operator: == [39419,39421]"
    },
    {
      "src": "variable_declarator [205765,205781]",
      "dest": "variable_declarator [207259,207275]"
    },
    {
      "src": "binary_expression [36699,36714]",
      "dest": "binary_expression [36699,36714]"
    },
    {
      "src": "binary_expression [240996,241048]",
      "dest": "binary_expression [242490,242542]"
    },
    {
      "src": "assignment_expression [20207,20225]",
      "dest": "assignment_expression [20207,20225]"
    },
    {
      "src": "formal_parameter [83049,83059]",
      "dest": "formal_parameter [84543,84553]"
    },
    {
      "src": "variable_declarator [8691,8697]",
      "dest": "variable_declarator [8691,8697]"
    },
    {
      "src": "return_statement [181965,182010]",
      "dest": "return_statement [183459,183504]"
    },
    {
      "src": "unary_expression [137239,137277]",
      "dest": "unary_expression [138733,138771]"
    },
    {
      "src": "argument_list [222375,222405]",
      "dest": "argument_list [223869,223899]"
    },
    {
      "src": "argument_list [80091,80107]",
      "dest": "argument_list [81585,81601]"
    },
    {
      "src": "block [231149,231186]",
      "dest": "block [232643,232680]"
    },
    {
      "src": "identifier: searchStr [43489,43498]",
      "dest": "identifier: searchStr [43489,43498]"
    },
    {
      "src": "logical_operator: || [118591,118593]",
      "dest": "logical_operator: || [120085,120087]"
    },
    {
      "src": "type: String [147084,147090]",
      "dest": "type: String [148578,148584]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [76311,76384]",
      "dest": "line_comment: //----------------------------------------------------------------------- [77805,77878]"
    },
    {
      "src": "return_statement [184176,184227]",
      "dest": "return_statement [185670,185721]"
    },
    {
      "src": "static: static [231056,231062]",
      "dest": "static: static [232550,232556]"
    },
    {
      "src": "comparison_operator: == [78423,78425]",
      "dest": "comparison_operator: == [79917,79919]"
    },
    {
      "src": "comparison_operator: == [71821,71823]",
      "dest": "comparison_operator: == [73315,73317]"
    },
    {
      "src": "identifier: str [17168,17171]",
      "dest": "identifier: str [17168,17171]"
    },
    {
      "src": "null_literal: null [191932,191936]",
      "dest": "null_literal: null [193426,193430]"
    },
    {
      "src": "formal_parameter [42247,42262]",
      "dest": "formal_parameter [42247,42262]"
    },
    {
      "src": "comparison_operator: == [129239,129241]",
      "dest": "comparison_operator: == [130733,130735]"
    },
    {
      "src": "decimal_integer_literal: 1 [58092,58093]",
      "dest": "decimal_integer_literal: 1 [55125,55126]"
    },
    {
      "src": "identifier: substring [185905,185914]",
      "dest": "identifier: substring [187399,187408]"
    },
    {
      "src": "type: String [172951,172957]",
      "dest": "type: String [174445,174451]"
    },
    {
      "src": "block [104161,106447]",
      "dest": "block [105655,107941]"
    },
    {
      "src": "identifier: startIndex [127923,127933]",
      "dest": "identifier: startIndex [129417,129427]"
    },
    {
      "src": "identifier: cost [236097,236101]",
      "dest": "identifier: cost [237591,237595]"
    },
    {
      "src": "comparison_operator: <= [180090,180092]",
      "dest": "comparison_operator: <= [181584,181586]"
    },
    {
      "src": "argument_list [228560,228571]",
      "dest": "argument_list [230054,230065]"
    },
    {
      "src": "identifier: i [160477,160478]",
      "dest": "identifier: i [161971,161972]"
    },
    {
      "src": "identifier: len [77346,77349]",
      "dest": "identifier: len [78840,78843]"
    },
    {
      "src": "variable_declarator [72009,72014]",
      "dest": "variable_declarator [73503,73508]"
    },
    {
      "src": "method_invocation [175661,175676]",
      "dest": "method_invocation [177155,177170]"
    },
    {
      "src": "logical_operator: && [20334,20336]",
      "dest": "logical_operator: && [20334,20336]"
    },
    {
      "src": "identifier: end [106125,106128]",
      "dest": "identifier: end [107619,107622]"
    },
    {
      "src": "identifier: found [36699,36704]",
      "dest": "identifier: found [36699,36704]"
    },
    {
      "src": "field_access [69953,69970]",
      "dest": "field_access [71447,71464]"
    },
    {
      "src": "identifier: str [187762,187765]",
      "dest": "identifier: str [189256,189259]"
    },
    {
      "src": "parenthesized_expression [143384,143417]",
      "dest": "parenthesized_expression [144878,144911]"
    },
    {
      "src": "binary_expression [149862,149923]",
      "dest": "binary_expression [151356,151417]"
    },
    {
      "src": "binary_expression [160691,160702]",
      "dest": "binary_expression [162185,162196]"
    },
    {
      "src": "identifier: padStr [185312,185318]",
      "dest": "identifier: padStr [186806,186812]"
    },
    {
      "src": "object_creation_expression [26230,26311]",
      "dest": "object_creation_expression [26230,26311]"
    },
    {
      "src": "formal_parameter [148256,148267]",
      "dest": "formal_parameter [149750,149761]"
    },
    {
      "src": "expression_statement [111172,111185]",
      "dest": "expression_statement [112666,112679]"
    },
    {
      "src": "block [20382,20420]",
      "dest": "block [20382,20420]"
    },
    {
      "src": "type: int [69854,69857]",
      "dest": "type: int [71348,71351]"
    },
    {
      "src": "formal_parameters [140253,140280]",
      "dest": "formal_parameters [141747,141774]"
    },
    {
      "src": "return_statement [191925,191937]",
      "dest": "return_statement [193419,193431]"
    },
    {
      "src": "binary_expression [228913,228963]",
      "dest": "binary_expression [230407,230457]"
    },
    {
      "src": "identifier: firstDiff [229245,229254]",
      "dest": "identifier: firstDiff [230739,230748]"
    },
    {
      "src": "argument_list [47918,47948]",
      "dest": "argument_list [47918,47948]"
    },
    {
      "src": "identifier: str [219739,219742]",
      "dest": "identifier: str [221233,221236]"
    },
    {
      "src": "?: ? [212194,212195]",
      "dest": "?: ? [213688,213689]"
    },
    {
      "src": "static: static [198135,198141]",
      "dest": "static: static [199629,199635]"
    },
    {
      "src": "formal_parameter [59514,59532]",
      "dest": "formal_parameter [59901,59919]"
    },
    {
      "src": "identifier: strsLen [23153,23160]",
      "dest": "identifier: strsLen [23153,23160]"
    },
    {
      "src": "comparison_operator: != [20328,20330]",
      "dest": "comparison_operator: != [20328,20330]"
    },
    {
      "src": "update_expression [127896,127899]",
      "dest": "update_expression [129390,129393]"
    },
    {
      "src": "identifier: i [62476,62477]",
      "dest": "identifier: i [63215,63216]"
    },
    {
      "src": "identifier: nsfe [25646,25650]",
      "dest": "identifier: nsfe [25646,25650]"
    },
    {
      "src": "identifier: str [99701,99704]",
      "dest": "identifier: str [101195,101198]"
    },
    {
      "src": "variable_declarator [174788,174823]",
      "dest": "variable_declarator [176282,176317]"
    },
    {
      "src": "argument_list [89296,89302]",
      "dest": "argument_list [90790,90796]"
    },
    {
      "src": "block_comment:     \n     * <p>Searches a String for substrings delimited by a start and end tag,\n     * returning all matching substrings in an array.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> open/close returns <code>null</code> (no match).\n     * An empty (\"\") open/close returns <code>null</code> (no match).</p>\n     *\n     * <pre>\n     * StringUtils.substringsBetween(\"[a][b][c]\", \"[\", \"]\") = [\"a\",\"b\",\"c\"]\n     * StringUtils.substringsBetween(null, *, *)            = null\n     * StringUtils.substringsBetween(*, null, *)            = null\n     * StringUtils.substringsBetween(*, *, null)            = null\n     * StringUtils.substringsBetween(\"\", \"[\", \"]\")          = []\n     * </pre>\n     *\n     * @param str  the String containing the substrings, null returns null, empty returns empty\n     * @param open  the String identifying the start of the substring, empty returns null\n     * @param close  the String identifying the end of the substring, empty returns null\n     * @return a String Array of substrings, or <code>null</code> if no match\n     * @since 2.3\n     */ [89573,90700]",
      "dest": "block_comment:     \n     * <p>Searches a String for substrings delimited by a start and end tag,\n     * returning all matching substrings in an array.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> open/close returns <code>null</code> (no match).\n     * An empty (\"\") open/close returns <code>null</code> (no match).</p>\n     *\n     * <pre>\n     * StringUtils.substringsBetween(\"[a][b][c]\", \"[\", \"]\") = [\"a\",\"b\",\"c\"]\n     * StringUtils.substringsBetween(null, *, *)            = null\n     * StringUtils.substringsBetween(*, null, *)            = null\n     * StringUtils.substringsBetween(*, *, null)            = null\n     * StringUtils.substringsBetween(\"\", \"[\", \"]\")          = []\n     * </pre>\n     *\n     * @param str  the String containing the substrings, null returns null, empty returns empty\n     * @param open  the String identifying the start of the substring, empty returns null\n     * @param close  the String identifying the end of the substring, empty returns null\n     * @return a String Array of substrings, or <code>null</code> if no match\n     * @since 2.3\n     */ [91067,92194]"
    },
    {
      "src": "identifier: separator [86548,86557]",
      "dest": "identifier: separator [88042,88051]"
    },
    {
      "src": "comparison_operator: == [231278,231280]",
      "dest": "comparison_operator: == [232772,232774]"
    },
    {
      "src": "identifier: n [235541,235542]",
      "dest": "identifier: n [237035,237036]"
    },
    {
      "src": "type: String [127441,127447]",
      "dest": "type: String [128935,128941]"
    },
    {
      "src": "identifier: str [181363,181366]",
      "dest": "identifier: str [182857,182860]"
    },
    {
      "src": "identifier: rightPad [190840,190848]",
      "dest": "identifier: rightPad [192334,192342]"
    },
    {
      "src": "argument_list [36368,36370]",
      "dest": "argument_list [36368,36370]"
    },
    {
      "src": "type: String [130670,130676]",
      "dest": "type: String [132164,132170]"
    },
    {
      "src": "argument_list [36550,36572]",
      "dest": "argument_list [36550,36572]"
    },
    {
      "src": "identifier: toString [166369,166377]",
      "dest": "identifier: toString [167863,167871]"
    },
    {
      "src": "binary_expression [33526,33543]",
      "dest": "binary_expression [33526,33543]"
    },
    {
      "src": "decimal_integer_literal: 0 [104712,104713]",
      "dest": "decimal_integer_literal: 0 [106206,106207]"
    },
    {
      "src": "binary_expression [158144,158200]",
      "dest": "binary_expression [159638,159694]"
    },
    {
      "src": "logical_operator: || [119146,119148]",
      "dest": "logical_operator: || [120640,120642]"
    },
    {
      "src": "array_creation_expression [175268,175290]",
      "dest": "array_creation_expression [176762,176784]"
    },
    {
      "src": "block_comment:     \n     * <p>Strips any of a set of characters from the end of a String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * An empty string (\"\") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is <code>null</code>, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripEnd(null, *)          = null\n     * StringUtils.stripEnd(\"\", *)            = \"\"\n     * StringUtils.stripEnd(\"abc\", \"\")        = \"abc\"\n     * StringUtils.stripEnd(\"abc\", null)      = \"abc\"\n     * StringUtils.stripEnd(\"  abc\", null)    = \"  abc\"\n     * StringUtils.stripEnd(\"abc  \", null)    = \"abc\"\n     * StringUtils.stripEnd(\" abc \", null)    = \" abc\"\n     * StringUtils.stripEnd(\"  abcyx\", \"xyz\") = \"  abc\"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, <code>null</code> if null String input\n     */ [19021,20094]",
      "dest": "block_comment:     \n     * <p>Strips any of a set of characters from the end of a String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * An empty string (\"\") input returns the empty string.</p>\n     *\n     * <p>If the stripChars String is <code>null</code>, whitespace is\n     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripEnd(null, *)          = null\n     * StringUtils.stripEnd(\"\", *)            = \"\"\n     * StringUtils.stripEnd(\"abc\", \"\")        = \"abc\"\n     * StringUtils.stripEnd(\"abc\", null)      = \"abc\"\n     * StringUtils.stripEnd(\"  abc\", null)    = \"  abc\"\n     * StringUtils.stripEnd(\"abc  \", null)    = \"abc\"\n     * StringUtils.stripEnd(\" abc \", null)    = \" abc\"\n     * StringUtils.stripEnd(\"  abcyx\", \"xyz\") = \"  abc\"\n     * </pre>\n     *\n     * @param str  the String to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped String, <code>null</code> if null String input\n     */ [19021,20094]"
    },
    {
      "src": "block_comment:     \n     * <p>Left pad a String with a specified character.</p>\n     *\n     * <p>Pad to a size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *, *)     = null\n     * StringUtils.leftPad(\"\", 3, 'z')     = \"zzz\"\n     * StringUtils.leftPad(\"bat\", 3, 'z')  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, 'z')  = \"zzbat\"\n     * StringUtils.leftPad(\"bat\", 1, 'z')  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1, 'z') = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padChar  the character to pad with\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [183094,183858]",
      "dest": "block_comment:     \n     * <p>Left pad a String with a specified character.</p>\n     *\n     * <p>Pad to a size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *, *)     = null\n     * StringUtils.leftPad(\"\", 3, 'z')     = \"zzz\"\n     * StringUtils.leftPad(\"bat\", 3, 'z')  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5, 'z')  = \"zzbat\"\n     * StringUtils.leftPad(\"bat\", 1, 'z')  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1, 'z') = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @param padChar  the character to pad with\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     * @since 2.0\n     */ [184588,185352]"
    },
    {
      "src": "identifier: isAlphanumeric [203075,203089]",
      "dest": "identifier: isAlphanumeric [204569,204583]"
    },
    {
      "src": "binary_expression [161875,161890]",
      "dest": "binary_expression [163369,163384]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [33566,33581]",
      "dest": "identifier: INDEX_NOT_FOUND [33566,33581]"
    },
    {
      "src": "block [69798,69845]",
      "dest": "block [71292,71339]"
    },
    {
      "src": "update_expression [70026,70029]",
      "dest": "update_expression [71520,71523]"
    },
    {
      "src": "expression_statement [75831,75860]",
      "dest": "expression_statement [77325,77354]"
    },
    {
      "src": "return_statement [211465,211477]",
      "dest": "return_statement [212959,212971]"
    },
    {
      "src": "parenthesized_expression [171751,171786]",
      "dest": "parenthesized_expression [173245,173280]"
    },
    {
      "src": "comparison_operator: > [104811,104812]",
      "dest": "comparison_operator: > [106305,106306]"
    },
    {
      "src": "type: StringBuilder [131316,131329]",
      "dest": "type: StringBuilder [132810,132823]"
    },
    {
      "src": "identifier: str [81735,81738]",
      "dest": "identifier: str [83229,83232]"
    },
    {
      "src": "type: char [42247,42251]",
      "dest": "type: char [42247,42251]"
    },
    {
      "src": "type: String [23881,23887]",
      "dest": "type: String [23881,23887]"
    },
    {
      "src": "argument_list [185914,185923]",
      "dest": "argument_list [187408,187417]"
    },
    {
      "src": "modifiers [178144,178149]",
      "dest": "modifiers [179638,179643]"
    },
    {
      "src": "increment_operator: ++ [227665,227667]",
      "dest": "increment_operator: ++ [229159,229161]"
    },
    {
      "src": "identifier: hasNext [134379,134386]",
      "dest": "identifier: hasNext [135873,135880]"
    },
    {
      "src": "variable_declarator [178198,178203]",
      "dest": "variable_declarator [179692,179697]"
    },
    {
      "src": "identifier: padStr [185427,185433]",
      "dest": "identifier: padStr [186921,186927]"
    },
    {
      "src": "type: int [168151,168154]",
      "dest": "type: int [169645,169648]"
    },
    {
      "src": "identifier: sz [203183,203185]",
      "dest": "identifier: sz [204677,204679]"
    },
    {
      "src": "local_variable_declaration [227256,227286]",
      "dest": "local_variable_declaration [228750,228780]"
    },
    {
      "src": "modifiers [89091,89104]",
      "dest": "modifiers [90585,90598]"
    },
    {
      "src": "block [136205,136332]",
      "dest": "block [137699,137826]"
    },
    {
      "src": "identifier: cs [54524,54526]",
      "dest": "identifier: cs [54524,54526]"
    },
    {
      "src": "identifier: i [61084,61085]",
      "dest": "identifier: i [61543,61544]"
    },
    {
      "src": "identifier: lastMatch [119171,119180]",
      "dest": "identifier: lastMatch [120665,120674]"
    },
    {
      "src": "identifier: tempIndex [159205,159214]",
      "dest": "identifier: tempIndex [160699,160708]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [166437,166510]",
      "dest": "line_comment: //----------------------------------------------------------------------- [167931,168004]"
    },
    {
      "src": "affectation_operator: = [185470,185471]",
      "dest": "affectation_operator: = [186964,186965]"
    },
    {
      "src": "block [42278,42413]",
      "dest": "block [42278,42413]"
    },
    {
      "src": "null_literal: null [14811,14815]",
      "dest": "null_literal: null [14811,14815]"
    },
    {
      "src": "formal_parameter [115494,115501]",
      "dest": "formal_parameter [116988,116995]"
    },
    {
      "src": "decimal_integer_literal: 1 [160119,160120]",
      "dest": "decimal_integer_literal: 1 [161613,161614]"
    },
    {
      "src": "identifier: end [75751,75754]",
      "dest": "identifier: end [77245,77248]"
    },
    {
      "src": "formal_parameter [167961,167971]",
      "dest": "formal_parameter [169455,169465]"
    },
    {
      "src": "binary_expression [57852,57918]",
      "dest": "binary_expression [54957,55018]"
    },
    {
      "src": "static: static [210109,210115]",
      "dest": "static: static [211603,211609]"
    },
    {
      "src": "identifier: strLen [62436,62442]",
      "dest": "identifier: strLen [63175,63181]"
    },
    {
      "src": ":: : [150330,150331]",
      "dest": ":: : [151824,151825]"
    },
    {
      "src": "formal_parameters [50836,50865]",
      "dest": "formal_parameters [50836,50865]"
    },
    {
      "src": "return_statement [56087,56110]",
      "dest": "return_statement [56433,56456]"
    },
    {
      "src": "throws: throws [177973,177979]",
      "dest": "throws: throws [179467,179473]"
    },
    {
      "src": "array_access [175415,175429]",
      "dest": "array_access [176909,176923]"
    },
    {
      "src": "method_invocation [119257,119294]",
      "dest": "method_invocation [120751,120788]"
    },
    {
      "src": "identifier: cs [8673,8675]",
      "dest": "identifier: cs [8673,8675]"
    },
    {
      "src": "identifier: cs [7462,7464]",
      "dest": "identifier: cs [7462,7464]"
    },
    {
      "src": "type: boolean [59477,59484]",
      "dest": "type: boolean [59870,59877]"
    },
    {
      "src": "affectation_operator: = [123330,123331]",
      "dest": "affectation_operator: = [124824,124825]"
    },
    {
      "src": "block_comment:     \n     * <p>Capitalizes a String changing the first letter to title case as\n     * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n     *\n     * <p>For a word based algorithm, see {@link WordUtils#capitalize(String)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.capitalize(null)  = null\n     * StringUtils.capitalize(\"\")    = \"\"\n     * StringUtils.capitalize(\"cat\") = \"Cat\"\n     * StringUtils.capitalize(\"cAt\") = \"CAt\"\n     * </pre>\n     *\n     * @param cs the String to capitalize, may be null\n     * @return the capitalized String, <code>null</code> if null String input\n     * @see WordUtils#capitalize(String)\n     * @see #uncapitalize(String)\n     * @since 2.0\n     */ [194631,195399]",
      "dest": "block_comment:     \n     * <p>Capitalizes a String changing the first letter to title case as\n     * per {@link Character#toTitleCase(char)}. No other letters are changed.</p>\n     *\n     * <p>For a word based algorithm, see {@link WordUtils#capitalize(String)}.\n     * A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.capitalize(null)  = null\n     * StringUtils.capitalize(\"\")    = \"\"\n     * StringUtils.capitalize(\"cat\") = \"Cat\"\n     * StringUtils.capitalize(\"cAt\") = \"CAt\"\n     * </pre>\n     *\n     * @param cs the String to capitalize, may be null\n     * @return the capitalized String, <code>null</code> if null String input\n     * @see WordUtils#capitalize(String)\n     * @see #uncapitalize(String)\n     * @since 2.0\n     */ [196125,196893]"
    },
    {
      "src": "assignment_expression [117168,117184]",
      "dest": "assignment_expression [118662,118678]"
    },
    {
      "src": "affectation_operator: = [190783,190784]",
      "dest": "affectation_operator: = [192277,192278]"
    },
    {
      "src": "identifier: searchChars [60975,60986]",
      "dest": "identifier: searchChars [61394,61405]"
    },
    {
      "src": "binary_expression [162019,162040]",
      "dest": "binary_expression [163513,163534]"
    },
    {
      "src": "return_statement [210430,210442]",
      "dest": "return_statement [211924,211936]"
    },
    {
      "src": "decimal_integer_literal: 0 [181832,181833]",
      "dest": "decimal_integer_literal: 0 [183326,183327]"
    },
    {
      "src": "assignment_expression [127701,127790]",
      "dest": "assignment_expression [129195,129284]"
    },
    {
      "src": "return_statement [78446,78458]",
      "dest": "return_statement [79940,79952]"
    },
    {
      "src": "identifier: prefix [238097,238103]",
      "dest": "identifier: prefix [239591,239597]"
    },
    {
      "src": "parenthesized_expression [170297,170319]",
      "dest": "parenthesized_expression [171791,171813]"
    },
    {
      "src": "binary_expression [173158,173168]",
      "dest": "binary_expression [174652,174662]"
    },
    {
      "src": "expression_statement [166100,166116]",
      "dest": "expression_statement [167594,167610]"
    },
    {
      "src": "affectation_operator: = [199904,199905]",
      "dest": "affectation_operator: = [201398,201399]"
    },
    {
      "src": "identifier: list [119281,119285]",
      "dest": "identifier: list [120775,120779]"
    },
    {
      "src": "type: StringBuilder [132751,132764]",
      "dest": "type: StringBuilder [134245,134258]"
    },
    {
      "src": "line_comment: // could implement manually, but simple way is to reuse other, [215574,215636]",
      "dest": "line_comment: // could implement manually, but simple way is to reuse other, [217068,217130]"
    },
    {
      "src": "comparison_operator: == [47804,47806]",
      "dest": "comparison_operator: == [47804,47806]"
    },
    {
      "src": "method_invocation [104552,104570]",
      "dest": "method_invocation [106046,106064]"
    },
    {
      "src": "binary_expression [209276,209321]",
      "dest": "binary_expression [210770,210815]"
    },
    {
      "src": "variable_declarator [198307,198341]",
      "dest": "variable_declarator [199801,199835]"
    },
    {
      "src": "identifier: separator [132944,132953]",
      "dest": "identifier: separator [134438,134447]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [47855,47870]",
      "dest": "identifier: INDEX_NOT_FOUND [47855,47870]"
    },
    {
      "src": "local_variable_declaration [159201,159220]",
      "dest": "local_variable_declaration [160695,160714]"
    },
    {
      "src": "identifier: text [155075,155079]",
      "dest": "identifier: text [156569,156573]"
    },
    {
      "src": "method_invocation [95212,95255]",
      "dest": "method_invocation [96706,96749]"
    },
    {
      "src": "identifier: iterator [134047,134055]",
      "dest": "identifier: iterator [135541,135549]"
    },
    {
      "src": "affectation_operator: = [57715,57716]",
      "dest": "affectation_operator: = [54823,54824]"
    },
    {
      "src": "identifier: str [90753,90756]",
      "dest": "identifier: str [92247,92250]"
    },
    {
      "src": "return_statement [241322,241335]",
      "dest": "return_statement [242816,242829]"
    },
    {
      "src": "identifier: append [196950,196956]",
      "dest": "identifier: append [198444,198450]"
    },
    {
      "src": "identifier: str [15837,15840]",
      "dest": "identifier: str [15837,15840]"
    },
    {
      "src": "argument_list [8873,8887]",
      "dest": "argument_list [8873,8887]"
    },
    {
      "src": "identifier: separator [83068,83077]",
      "dest": "identifier: separator [84562,84571]"
    },
    {
      "src": "identifier: separator [81573,81582]",
      "dest": "identifier: separator [83067,83076]"
    },
    {
      "src": "type: String [81446,81452]",
      "dest": "type: String [82940,82946]"
    },
    {
      "src": "variable_declarator [150183,150227]",
      "dest": "variable_declarator [151677,151721]"
    },
    {
      "src": "assignment_expression [70162,70187]",
      "dest": "assignment_expression [71656,71681]"
    },
    {
      "src": "method_invocation [166282,166296]",
      "dest": "method_invocation [167776,167790]"
    },
    {
      "src": "argument_list [181806,181835]",
      "dest": "argument_list [183300,183329]"
    },
    {
      "src": "identifier: toString [131623,131631]",
      "dest": "identifier: toString [133117,133125]"
    },
    {
      "src": "return_statement [136282,136326]",
      "dest": "return_statement [137776,137820]"
    },
    {
      "src": "arithmetic_operator: - [113402,113403]",
      "dest": "arithmetic_operator: - [114896,114897]"
    },
    {
      "src": "assignment_expression [160868,160916]",
      "dest": "assignment_expression [162362,162410]"
    },
    {
      "src": "formal_parameter [133794,133810]",
      "dest": "formal_parameter [135288,135304]"
    },
    {
      "src": "binary_expression [204475,204494]",
      "dest": "binary_expression [205969,205988]"
    },
    {
      "src": "ternary_expression [150249,150276]",
      "dest": "ternary_expression [151743,151770]"
    },
    {
      "src": "identifier: pos [91518,91521]",
      "dest": "identifier: pos [93012,93015]"
    },
    {
      "src": "identifier: length [78544,78550]",
      "dest": "identifier: length [80038,80044]"
    },
    {
      "src": "block [239789,240062]",
      "dest": "block [241283,241556]"
    },
    {
      "src": "binary_expression [162314,162328]",
      "dest": "binary_expression [163808,163822]"
    },
    {
      "src": "type: String [136187,136193]",
      "dest": "type: String [137681,137687]"
    },
    {
      "src": "identifier: isEmpty [149879,149886]",
      "dest": "identifier: isEmpty [151373,151380]"
    },
    {
      "src": "binary_expression [127882,127894]",
      "dest": "binary_expression [129376,129388]"
    },
    {
      "src": "line_comment: // Substring [72302,72314]",
      "dest": "line_comment: // Substring [73796,73808]"
    },
    {
      "src": "formal_parameters [30686,30729]",
      "dest": "formal_parameters [30686,30729]"
    },
    {
      "src": "update_expression [117628,117631]",
      "dest": "update_expression [119122,119125]"
    },
    {
      "src": "return_statement [129262,129274]",
      "dest": "return_statement [130756,130768]"
    },
    {
      "src": "argument_list [236016,236021]",
      "dest": "argument_list [237510,237515]"
    },
    {
      "src": "parenthesized_expression [91177,91196]",
      "dest": "parenthesized_expression [92671,92690]"
    },
    {
      "src": "argument_list [241003,241011]",
      "dest": "argument_list [242497,242505]"
    },
    {
      "src": "argument_list [138823,138831]",
      "dest": "argument_list [140317,140325]"
    },
    {
      "src": "binary_expression [181743,181775]",
      "dest": "binary_expression [183237,183269]"
    },
    {
      "src": "formal_parameter [43344,43360]",
      "dest": "formal_parameter [43344,43360]"
    },
    {
      "src": "identifier: min [160884,160887]",
      "dest": "identifier: min [162378,162381]"
    },
    {
      "src": "update_expression [170477,170486]",
      "dest": "update_expression [171971,171980]"
    },
    {
      "src": "variable_declarator [66640,66645]",
      "dest": "variable_declarator [67759,67764]"
    },
    {
      "src": "identifier: getClass [24312,24320]",
      "dest": "identifier: getClass [24312,24320]"
    },
    {
      "src": "type: String [99694,99700]",
      "dest": "type: String [101188,101194]"
    },
    {
      "src": "identifier: i [57667,57668]",
      "dest": "identifier: i [54778,54779]"
    },
    {
      "src": "identifier: defaultString [212924,212937]",
      "dest": "identifier: defaultString [214418,214431]"
    },
    {
      "src": "identifier: separatorLength [105562,105577]",
      "dest": "identifier: separatorLength [107056,107071]"
    },
    {
      "src": "identifier: length [91035,91041]",
      "dest": "identifier: length [92529,92535]"
    },
    {
      "src": "affectation_operator: = [14798,14799]",
      "dest": "affectation_operator: = [14798,14799]"
    },
    {
      "src": "type: String [243485,243491]",
      "dest": "type: String [244979,244985]"
    },
    {
      "src": ":: : [70413,70414]",
      "dest": ":: : [71907,71908]"
    },
    {
      "src": "identifier: mid [79738,79741]",
      "dest": "identifier: mid [81232,81235]"
    },
    {
      "src": "field_access [124172,124180]",
      "dest": "field_access [125666,125674]"
    },
    {
      "src": "identifier: size [180052,180056]",
      "dest": "identifier: size [181546,181550]"
    },
    {
      "src": "identifier: str [217384,217387]",
      "dest": "identifier: str [218878,218881]"
    },
    {
      "src": "binary_expression [236104,236122]",
      "dest": "binary_expression [237598,237616]"
    },
    {
      "src": "binary_expression [83155,83172]",
      "dest": "binary_expression [84649,84666]"
    },
    {
      "src": "identifier: separatorChar [110370,110383]",
      "dest": "identifier: separatorChar [111864,111877]"
    },
    {
      "src": "expression_statement [110989,111003]",
      "dest": "expression_statement [112483,112497]"
    },
    {
      "src": "identifier: textIndex [159837,159846]",
      "dest": "identifier: textIndex [161331,161340]"
    },
    {
      "src": "type: StringBuilder [175537,175550]",
      "dest": "type: StringBuilder [177031,177044]"
    },
    {
      "src": "true: true [107795,107799]",
      "dest": "true: true [109289,109293]"
    },
    {
      "src": "type: Object[] [126097,126105]",
      "dest": "type: Object[] [127591,127599]"
    },
    {
      "src": "if_statement [136215,136273]",
      "dest": "if_statement [137709,137767]"
    },
    {
      "src": "array_creation_expression [159055,159080]",
      "dest": "array_creation_expression [160549,160574]"
    },
    {
      "src": "method_invocation [210320,210355]",
      "dest": "method_invocation [211814,211849]"
    },
    {
      "src": "identifier: pads [182003,182007]",
      "dest": "identifier: pads [183497,183501]"
    },
    {
      "src": "comparison_operator: == [8748,8750]",
      "dest": "comparison_operator: == [8748,8750]"
    },
    {
      "src": "identifier: str [77284,77287]",
      "dest": "identifier: str [78778,78781]"
    },
    {
      "src": "comparison_operator: == [90803,90805]",
      "dest": "comparison_operator: == [92297,92299]"
    },
    {
      "src": "identifier: str [171898,171901]",
      "dest": "identifier: str [173392,173395]"
    },
    {
      "src": "identifier: str [18472,18475]",
      "dest": "identifier: str [18472,18475]"
    },
    {
      "src": "method_invocation [170050,170063]",
      "dest": "method_invocation [171544,171557]"
    },
    {
      "src": "return_statement [53305,53317]",
      "dest": "return_statement [53305,53317]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty String (\"\") always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", \"\")      = true\n     * StringUtils.containsNone(\"abab\", \"xyz\") = true\n     * StringUtils.containsNone(\"ab1\", \"xyz\")  = true\n     * StringUtils.containsNone(\"abz\", \"xyz\")  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param invalidChars  a String of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */ [67060,68002]",
      "dest": "block_comment:     \n     * <p>Checks that the CharSequence does not contain certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>true</code>.\n     * A <code>null</code> invalid character array will return <code>true</code>.\n     * An empty String (\"\") always returns true.</p>\n     *\n     * <pre>\n     * StringUtils.containsNone(null, *)       = true\n     * StringUtils.containsNone(*, null)       = true\n     * StringUtils.containsNone(\"\", *)         = true\n     * StringUtils.containsNone(\"ab\", \"\")      = true\n     * StringUtils.containsNone(\"abab\", \"xyz\") = true\n     * StringUtils.containsNone(\"ab1\", \"xyz\")  = true\n     * StringUtils.containsNone(\"abz\", \"xyz\")  = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @param invalidChars  a String of invalid chars, may be null\n     * @return true if it contains none of the invalid chars, or is null\n     * @since 2.0\n     */ [68554,69496]"
    },
    {
      "src": "if_statement [223712,223766]",
      "dest": "if_statement [225206,225260]"
    },
    {
      "src": "if_statement [169940,169993]",
      "dest": "if_statement [171434,171487]"
    },
    {
      "src": "logical_operator: || [159438,159440]",
      "dest": "logical_operator: || [160932,160934]"
    },
    {
      "src": "visibility: public [62260,62266]",
      "dest": "visibility: public [62999,63005]"
    },
    {
      "src": "line_comment: // SubStringAfter/SubStringBefore [80120,80153]",
      "dest": "line_comment: // SubStringAfter/SubStringBefore [81614,81647]"
    },
    {
      "src": "identifier: lastIdx [170397,170404]",
      "dest": "identifier: lastIdx [171891,171898]"
    },
    {
      "src": "binary_expression [228280,228299]",
      "dest": "binary_expression [229774,229793]"
    },
    {
      "src": "parenthesized_expression [131186,131305]",
      "dest": "parenthesized_expression [132680,132799]"
    },
    {
      "src": "throw_statement [25559,25652]",
      "dest": "throw_statement [25559,25652]"
    },
    {
      "src": "type: int [115494,115497]",
      "dest": "type: int [116988,116991]"
    },
    {
      "src": "block [35168,35238]",
      "dest": "block [35168,35238]"
    },
    {
      "src": "local_variable_declaration [116742,116786]",
      "dest": "local_variable_declaration [118236,118280]"
    },
    {
      "src": "identifier: separator [176598,176607]",
      "dest": "identifier: separator [178092,178101]"
    },
    {
      "src": "formal_parameter [157811,157822]",
      "dest": "formal_parameter [159305,159316]"
    },
    {
      "src": "parenthesized_expression [210319,210365]",
      "dest": "parenthesized_expression [211813,211859]"
    },
    {
      "src": "argument_list [185757,185760]",
      "dest": "argument_list [187251,187254]"
    },
    {
      "src": "binary_expression [172989,173000]",
      "dest": "binary_expression [174483,174494]"
    },
    {
      "src": "parenthesized_expression [70287,70298]",
      "dest": "parenthesized_expression [71781,71792]"
    },
    {
      "src": "array_access [161557,161570]",
      "dest": "array_access [163051,163064]"
    },
    {
      "src": "visibility: public [13655,13661]",
      "dest": "visibility: public [13655,13661]"
    },
    {
      "src": "block [225112,225145]",
      "dest": "block [226606,226639]"
    },
    {
      "src": "identifier: repeat [175321,175327]",
      "dest": "identifier: repeat [176815,176821]"
    },
    {
      "src": "comparison_operator: == [158193,158195]",
      "dest": "comparison_operator: == [159687,159689]"
    },
    {
      "src": "argument_list [57436,57449]",
      "dest": "argument_list [57776,57789]"
    },
    {
      "src": "type: int [160443,160446]",
      "dest": "type: int [161937,161940]"
    },
    {
      "src": "identifier: cs2 [225205,225208]",
      "dest": "identifier: cs2 [226699,226702]"
    },
    {
      "src": "if_statement [219652,219725]",
      "dest": "if_statement [221146,221219]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [225422,225437]",
      "dest": "identifier: INDEX_NOT_FOUND [226916,226931]"
    },
    {
      "src": "visibility: public [176551,176557]",
      "dest": "visibility: public [178045,178051]"
    },
    {
      "src": "type: String [28466,28472]",
      "dest": "type: String [28466,28472]"
    },
    {
      "src": "update_expression [160477,160480]",
      "dest": "update_expression [161971,161974]"
    },
    {
      "src": "affectation_operator: = [118737,118738]",
      "dest": "affectation_operator: = [120231,120232]"
    },
    {
      "src": "formal_parameters [212152,212164]",
      "dest": "formal_parameters [213646,213658]"
    },
    {
      "src": "binary_expression [20440,20464]",
      "dest": "binary_expression [20440,20464]"
    },
    {
      "src": "parenthesized_expression [223889,223912]",
      "dest": "parenthesized_expression [225383,225406]"
    },
    {
      "src": "binary_expression [71817,71828]",
      "dest": "binary_expression [73311,73322]"
    },
    {
      "src": "identifier: n [235210,235211]",
      "dest": "identifier: n [236704,236705]"
    },
    {
      "src": "argument_list [181831,181834]",
      "dest": "argument_list [183325,183328]"
    },
    {
      "src": "identifier: startPos [49563,49571]",
      "dest": "identifier: startPos [49563,49571]"
    },
    {
      "src": "binary_expression [192715,192726]",
      "dest": "binary_expression [194209,194220]"
    },
    {
      "src": "identifier: cs [208075,208077]",
      "dest": "identifier: cs [209569,209571]"
    },
    {
      "src": "line_comment: // returns original String when possible [181680,181720]",
      "dest": "line_comment: // returns original String when possible [183174,183214]"
    },
    {
      "src": "identifier: str [145631,145634]",
      "dest": "identifier: str [147125,147128]"
    },
    {
      "src": "method_invocation [150148,150169]",
      "dest": "method_invocation [151642,151663]"
    },
    {
      "src": "variable_declarator [70011,70016]",
      "dest": "variable_declarator [71505,71510]"
    },
    {
      "src": "?: ? [212998,212999]",
      "dest": "?: ? [214492,214493]"
    },
    {
      "src": "block [152644,152724]",
      "dest": "block [154138,154218]"
    },
    {
      "src": "type: char [185987,185991]",
      "dest": "type: char [187481,187485]"
    },
    {
      "src": "identifier: greater [160738,160745]",
      "dest": "identifier: greater [162232,162239]"
    },
    {
      "src": "identifier: str [141783,141786]",
      "dest": "identifier: str [143277,143280]"
    },
    {
      "src": "comparison_operator: == [117852,117854]",
      "dest": "comparison_operator: == [119346,119348]"
    },
    {
      "src": "static: static [21629,21635]",
      "dest": "static: static [21629,21635]"
    },
    {
      "src": "return_statement [195494,195506]",
      "dest": "return_statement [196988,197000]"
    },
    {
      "src": "return_statement [86583,86596]",
      "dest": "return_statement [88077,88090]"
    },
    {
      "src": "static: static [12616,12622]",
      "dest": "static: static [12616,12622]"
    },
    {
      "src": "identifier: str [12671,12674]",
      "dest": "identifier: str [12671,12674]"
    },
    {
      "src": "block [53069,53106]",
      "dest": "block [53069,53106]"
    },
    {
      "src": "return_statement [18531,18542]",
      "dest": "return_statement [18531,18542]"
    },
    {
      "src": "decimal_integer_literal: 0 [203222,203223]",
      "dest": "decimal_integer_literal: 0 [204716,204717]"
    },
    {
      "src": "method_invocation [222513,222531]",
      "dest": "method_invocation [224007,224025]"
    },
    {
      "src": "method_invocation [31958,31980]",
      "dest": "method_invocation [31958,31980]"
    },
    {
      "src": "identifier: ch0 [175172,175175]",
      "dest": "identifier: ch0 [176666,176669]"
    },
    {
      "src": "formal_parameter [143263,143273]",
      "dest": "formal_parameter [144757,144767]"
    },
    {
      "src": "identifier: closeLen [91187,91195]",
      "dest": "identifier: closeLen [92681,92689]"
    },
    {
      "src": "null_literal: null [158196,158200]",
      "dest": "null_literal: null [159690,159694]"
    },
    {
      "src": "null_literal: null [28517,28521]",
      "dest": "null_literal: null [28517,28521]"
    },
    {
      "src": "identifier: charAt [20364,20370]",
      "dest": "identifier: charAt [20364,20370]"
    },
    {
      "src": "variable_declarator [81648,81676]",
      "dest": "variable_declarator [83142,83170]"
    },
    {
      "src": "identifier: sub [199757,199760]",
      "dest": "identifier: sub [201251,201254]"
    },
    {
      "src": "identifier: subSequence [195760,195771]",
      "dest": "identifier: subSequence [197254,197265]"
    },
    {
      "src": "return_statement [124205,124250]",
      "dest": "return_statement [125699,125744]"
    },
    {
      "src": "identifier: i [198389,198390]",
      "dest": "identifier: i [199883,199884]"
    },
    {
      "src": "affectation_operator: = [134216,134217]",
      "dest": "affectation_operator: = [135710,135711]"
    },
    {
      "src": "binary_expression [214571,214582]",
      "dest": "binary_expression [216065,216076]"
    },
    {
      "src": "type: int [77261,77264]",
      "dest": "type: int [78755,78758]"
    },
    {
      "src": "argument_list [26250,26311]",
      "dest": "argument_list [26250,26311]"
    },
    {
      "src": "update_expression [225219,225222]",
      "dest": "update_expression [226713,226716]"
    },
    {
      "src": "identifier: i [118172,118173]",
      "dest": "identifier: i [119666,119667]"
    },
    {
      "src": "array_creation_expression [124225,124248]",
      "dest": "array_creation_expression [125719,125742]"
    },
    {
      "src": "visibility: public [208007,208013]",
      "dest": "visibility: public [209501,209507]"
    },
    {
      "src": "type: char [29435,29439]",
      "dest": "type: char [29435,29439]"
    },
    {
      "src": "binary_expression [79786,79797]",
      "dest": "binary_expression [81280,81291]"
    },
    {
      "src": "identifier: PAD_LIMIT [6263,6272]",
      "dest": "identifier: PAD_LIMIT [6263,6272]"
    },
    {
      "src": "affectation_operator: = [160877,160878]",
      "dest": "affectation_operator: = [162371,162372]"
    },
    {
      "src": "if_statement [235206,235302]",
      "dest": "if_statement [236700,236796]"
    },
    {
      "src": "return_statement [144655,144694]",
      "dest": "return_statement [146149,146188]"
    },
    {
      "src": "line_comment: // startsWith [237088,237101]",
      "dest": "line_comment: // startsWith [238582,238595]"
    },
    {
      "src": "identifier: length [185514,185520]",
      "dest": "identifier: length [187008,187014]"
    },
    {
      "src": "field_access [123440,123448]",
      "dest": "field_access [124934,124942]"
    },
    {
      "src": "static: static [242346,242352]",
      "dest": "static: static [243840,243846]"
    },
    {
      "src": "formal_parameter [155102,155126]",
      "dest": "formal_parameter [156596,156620]"
    },
    {
      "src": "formal_parameter [123028,123038]",
      "dest": "formal_parameter [124522,124532]"
    },
    {
      "src": "modifiers [110317,110331]",
      "dest": "modifiers [111811,111825]"
    },
    {
      "src": "parenthesized_expression [244129,244160]",
      "dest": "parenthesized_expression [245623,245654]"
    },
    {
      "src": "type: String [223689,223695]",
      "dest": "type: String [225183,225189]"
    },
    {
      "src": "visibility: public [65103,65109]",
      "dest": "visibility: public [66150,66156]"
    },
    {
      "src": "assignment_expression [117264,117271]",
      "dest": "assignment_expression [118758,118765]"
    },
    {
      "src": "identifier: array [131569,131574]",
      "dest": "identifier: array [133063,133068]"
    },
    {
      "src": "identifier: str [185602,185605]",
      "dest": "identifier: str [187096,187099]"
    },
    {
      "src": "type: int [36061,36064]",
      "dest": "type: int [36061,36064]"
    },
    {
      "src": ":: : [150266,150267]",
      "dest": ":: : [151760,151761]"
    },
    {
      "src": "if_statement [20278,20652]",
      "dest": "if_statement [20278,20652]"
    },
    {
      "src": "variable_declarator [181574,181595]",
      "dest": "variable_declarator [183068,183089]"
    },
    {
      "src": "block [37819,37879]",
      "dest": "block [37819,37879]"
    },
    {
      "src": "block [241259,241303]",
      "dest": "block [242753,242797]"
    },
    {
      "src": "catch_type [25514,25534]",
      "dest": "catch_type [25514,25534]"
    },
    {
      "src": "false: false [110781,110786]",
      "dest": "false: false [112275,112280]"
    },
    {
      "src": "identifier: cnfe [25326,25330]",
      "dest": "identifier: cnfe [25326,25330]"
    },
    {
      "src": "if_statement [53236,53331]",
      "dest": "if_statement [53236,53331]"
    },
    {
      "src": "false: false [210391,210396]",
      "dest": "false: false [211885,211890]"
    },
    {
      "src": "binary_expression [178205,178219]",
      "dest": "binary_expression [179699,179713]"
    },
    {
      "src": "new: new [185983,185986]",
      "dest": "new: new [187477,187480]"
    },
    {
      "src": "arithmetic_operator: + [175425,175426]",
      "dest": "arithmetic_operator: + [176919,176920]"
    },
    {
      "src": "identifier: isEmpty [185396,185403]",
      "dest": "identifier: isEmpty [186890,186897]"
    },
    {
      "src": "parenthesized_expression [170337,170378]",
      "dest": "parenthesized_expression [171831,171872]"
    },
    {
      "src": "logical_operator: || [33523,33525]",
      "dest": "logical_operator: || [33523,33525]"
    },
    {
      "src": "method_invocation [207001,207032]",
      "dest": "method_invocation [208495,208526]"
    },
    {
      "src": "expression_statement [123984,124038]",
      "dest": "expression_statement [125478,125532]"
    },
    {
      "src": "type: CharSequence [224962,224974]",
      "dest": "type: CharSequence [226456,226468]"
    },
    {
      "src": "method_declaration [22932,23297]",
      "dest": "method_declaration [22932,23297]"
    },
    {
      "src": "type: String [241157,241163]",
      "dest": "type: String [242651,242657]"
    },
    {
      "src": "comparison_operator: == [239807,239809]",
      "dest": "comparison_operator: == [241301,241303]"
    },
    {
      "src": "identifier: str [84782,84785]",
      "dest": "identifier: str [86276,86279]"
    },
    {
      "src": "if_statement [70201,70270]",
      "dest": "if_statement [71695,71764]"
    },
    {
      "src": "string_literal [24321,24348]",
      "dest": "string_literal [24321,24348]"
    },
    {
      "src": "binary_expression [212986,212997]",
      "dest": "binary_expression [214480,214491]"
    },
    {
      "src": "parenthesized_expression [204474,204495]",
      "dest": "parenthesized_expression [205968,205989]"
    },
    {
      "src": "while_statement [118477,119117]",
      "dest": "while_statement [119971,120611]"
    },
    {
      "src": "static: static [31798,31804]",
      "dest": "static: static [31798,31804]"
    },
    {
      "src": "block [243500,243551]",
      "dest": "block [244994,245045]"
    },
    {
      "src": "modifiers [13655,13668]",
      "dest": "modifiers [13655,13668]"
    },
    {
      "src": "for_statement [131373,131603]",
      "dest": "for_statement [132867,133097]"
    },
    {
      "src": "variable_declarator [57667,57672]",
      "dest": "variable_declarator [54778,54783]"
    },
    {
      "src": "identifier: i [131398,131399]",
      "dest": "identifier: i [132892,132893]"
    },
    {
      "src": "identifier: replacementList [159514,159529]",
      "dest": "identifier: replacementList [161008,161023]"
    },
    {
      "src": "identifier: charAt [211380,211386]",
      "dest": "identifier: charAt [212874,212880]"
    },
    {
      "src": "binary_expression [116922,116944]",
      "dest": "binary_expression [118416,118438]"
    },
    {
      "src": "identifier: str [118151,118154]",
      "dest": "identifier: str [119645,119648]"
    },
    {
      "src": "variable_declarator [123319,123333]",
      "dest": "variable_declarator [124813,124827]"
    },
    {
      "src": "formal_parameters [183891,183927]",
      "dest": "formal_parameters [185385,185421]"
    },
    {
      "src": "identifier: chars [145789,145794]",
      "dest": "identifier: chars [147283,147288]"
    },
    {
      "src": "null_literal: null [39443,39447]",
      "dest": "null_literal: null [39443,39447]"
    },
    {
      "src": "identifier: i [62483,62484]",
      "dest": "identifier: i [63222,63223]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the last index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *)         = -1\n     * StringUtils.lastIndexOf(\"\", *)           = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'a') = 7\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b') = 5\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the last index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [40106,40826]",
      "dest": "block_comment:     \n     * <p>Finds the last index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(int)}.</p>\n     *\n     * <p>A <code>null</code> or empty (\"\") String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *)         = -1\n     * StringUtils.lastIndexOf(\"\", *)           = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'a') = 7\n     * StringUtils.lastIndexOf(\"aabaabaa\", 'b') = 5\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchChar  the character to find\n     * @return the last index of the search character,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [40106,40826]"
    },
    {
      "src": "object_creation_expression [175557,175588]",
      "dest": "object_creation_expression [177051,177082]"
    },
    {
      "src": "type: int [75593,75596]",
      "dest": "type: int [77087,77090]"
    },
    {
      "src": "type: String [11670,11676]",
      "dest": "type: String [11670,11676]"
    },
    {
      "src": "null_literal: null [125165,125169]",
      "dest": "null_literal: null [126659,126663]"
    },
    {
      "src": "block [168372,168406]",
      "dest": "block [169866,169900]"
    },
    {
      "src": "method_invocation [89285,89302]",
      "dest": "method_invocation [90779,90796]"
    },
    {
      "src": "method_invocation [161228,161261]",
      "dest": "method_invocation [162722,162755]"
    },
    {
      "src": "modifiers [46493,46506]",
      "dest": "modifiers [46493,46506]"
    },
    {
      "src": "method_invocation [185725,185761]",
      "dest": "method_invocation [187219,187255]"
    },
    {
      "src": "parenthesized_expression [79999,80010]",
      "dest": "parenthesized_expression [81493,81504]"
    },
    {
      "src": "method_invocation [196854,196994]",
      "dest": "method_invocation [198348,198488]"
    },
    {
      "src": "increment_operator: ++ [117995,117997]",
      "dest": "increment_operator: ++ [119489,119491]"
    },
    {
      "src": "comparison_operator: == [227694,227696]",
      "dest": "comparison_operator: == [229188,229190]"
    },
    {
      "src": "logical_operator: || [79856,79858]",
      "dest": "logical_operator: || [81350,81352]"
    },
    {
      "src": "block_comment:         \n           The difference between this impl. and the previous is that, rather \n           than creating and retaining a matrix of size s.length()+1 by t.length()+1, \n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking \n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really \n           copied anymore, just switched...this is clearly much better than cloning an array \n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not \n           cause an out of memory condition when calculating the LD over two very large strings.\n         */ [233911,235109]",
      "dest": "block_comment:         \n           The difference between this impl. and the previous is that, rather \n           than creating and retaining a matrix of size s.length()+1 by t.length()+1, \n           we maintain two single-dimensional arrays of length s.length()+1.  The first, d,\n           is the 'current working' distance array that maintains the newest distance cost\n           counts as we iterate through the characters of String s.  Each time we increment\n           the index of String t we are comparing, d is copied to p, the second int[].  Doing so\n           allows us to retain the previous cost counts as required by the algorithm (taking \n           the minimum of the cost count to the left, up one, and diagonally up and to the left\n           of the current cost count being calculated).  (Note that the arrays aren't really \n           copied anymore, just switched...this is clearly much better than cloning an array \n           or doing a System.arraycopy() each time  through the outer loop.)\n\n           Effectively, the difference between the two implementations is this one does not \n           cause an out of memory condition when calculating the LD over two very large strings.\n         */ [235405,236603]"
    },
    {
      "src": "affectation_operator: = [165801,165802]",
      "dest": "affectation_operator: = [167295,167296]"
    },
    {
      "src": "identifier: str [70168,70171]",
      "dest": "identifier: str [71662,71665]"
    },
    {
      "src": "identifier: str [49574,49577]",
      "dest": "identifier: str [49574,49577]"
    },
    {
      "src": "assignment_expression [105782,105805]",
      "dest": "assignment_expression [107276,107299]"
    },
    {
      "src": "local_variable_declaration [134032,134063]",
      "dest": "local_variable_declaration [135526,135557]"
    },
    {
      "src": "identifier: beg [104784,104787]",
      "dest": "identifier: beg [106278,106281]"
    },
    {
      "src": "identifier: i [178221,178222]",
      "dest": "identifier: i [179715,179716]"
    },
    {
      "src": "modifiers [5217,5223]",
      "dest": "modifiers [5217,5223]"
    },
    {
      "src": "\": \" [25166,25167]",
      "dest": "\": \" [25166,25167]"
    },
    {
      "src": "identifier: charAt [110834,110840]",
      "dest": "identifier: charAt [112328,112334]"
    },
    {
      "src": "field_access [170087,170099]",
      "dest": "field_access [171581,171593]"
    },
    {
      "src": "type: int [199721,199724]",
      "dest": "type: int [201215,201218]"
    },
    {
      "src": "local_variable_declaration [104645,104672]",
      "dest": "local_variable_declaration [106139,106166]"
    },
    {
      "src": "while_statement [18834,18962]",
      "dest": "while_statement [18834,18962]"
    },
    {
      "src": "comparison_operator: < [228480,228481]",
      "dest": "comparison_operator: < [229974,229975]"
    },
    {
      "src": "if_statement [17129,17182]",
      "dest": "if_statement [17129,17182]"
    },
    {
      "src": "type: char [127469,127473]",
      "dest": "type: char [128963,128967]"
    },
    {
      "src": "comparison_operator: < [57676,57677]",
      "dest": "comparison_operator: < [58016,58017]"
    },
    {
      "src": "method_invocation [83343,83382]",
      "dest": "method_invocation [84837,84876]"
    },
    {
      "src": "binary_expression [222204,222231]",
      "dest": "binary_expression [223698,223725]"
    },
    {
      "src": "affectation_operator: = [205802,205803]",
      "dest": "affectation_operator: = [207296,207297]"
    },
    {
      "src": "local_variable_declaration [57497,57524]",
      "dest": "local_variable_declaration [57837,57864]"
    },
    {
      "src": "if_statement [127525,127580]",
      "dest": "if_statement [129019,129074]"
    },
    {
      "src": "comparison_operator: == [231488,231490]",
      "dest": "comparison_operator: == [232982,232984]"
    },
    {
      "src": "identifier: isEmpty [211219,211226]",
      "dest": "identifier: isEmpty [212713,212720]"
    },
    {
      "src": "formal_parameter [135322,135342]",
      "dest": "formal_parameter [136816,136836]"
    },
    {
      "src": "affectation_operator: = [235601,235602]",
      "dest": "affectation_operator: = [237095,237096]"
    },
    {
      "src": "method_invocation [225185,225197]",
      "dest": "method_invocation [226679,226691]"
    },
    {
      "src": "decimal_integer_literal: 0 [168195,168196]",
      "dest": "decimal_integer_literal: 0 [169689,169690]"
    },
    {
      "src": "binary_expression [104356,104404]",
      "dest": "binary_expression [105850,105898]"
    },
    {
      "src": "argument_list [206942,206944]",
      "dest": "argument_list [208436,208438]"
    },
    {
      "src": "affectation_operator: = [91222,91223]",
      "dest": "affectation_operator: = [92716,92717]"
    },
    {
      "src": "identifier: padChars [186125,186133]",
      "dest": "identifier: padChars [187619,187627]"
    },
    {
      "src": "return_statement [147135,147186]",
      "dest": "return_statement [148629,148680]"
    },
    {
      "src": "identifier: join [129180,129184]",
      "dest": "identifier: join [130674,130678]"
    },
    {
      "src": "decimal_integer_literal: 0 [18573,18574]",
      "dest": "decimal_integer_literal: 0 [18573,18574]"
    },
    {
      "src": "comparison_operator: > [127921,127922]",
      "dest": "comparison_operator: > [129415,129416]"
    },
    {
      "src": "affectation_operator: = [184009,184010]",
      "dest": "affectation_operator: = [185503,185504]"
    },
    {
      "src": "block [117696,118428]",
      "dest": "block [119190,119922]"
    },
    {
      "src": "expression_statement [161335,161350]",
      "dest": "expression_statement [162829,162844]"
    },
    {
      "src": "block [201049,201094]",
      "dest": "block [202543,202588]"
    },
    {
      "src": "comparison_operator: < [78485,78486]",
      "dest": "comparison_operator: < [79979,79980]"
    },
    {
      "src": "decimal_integer_literal: 0 [158238,158239]",
      "dest": "decimal_integer_literal: 0 [159732,159733]"
    },
    {
      "src": "line_comment: // ch is in the Basic Multilingual Plane [58238,58278]",
      "dest": "line_comment: // ch is in the Basic Multilingual Plane [58631,58671]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes a substring only if it is at the begining of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeStart(null, *)      = null\n     * StringUtils.removeStart(\"\", *)        = \"\"\n     * StringUtils.removeStart(*, null)      = *\n     * StringUtils.removeStart(\"www.domain.com\", \"www.\")   = \"domain.com\"\n     * StringUtils.removeStart(\"domain.com\", \"www.\")       = \"domain.com\"\n     * StringUtils.removeStart(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeStart(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     */ [137557,138649]",
      "dest": "block_comment:     \n     * <p>Removes a substring only if it is at the begining of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeStart(null, *)      = null\n     * StringUtils.removeStart(\"\", *)        = \"\"\n     * StringUtils.removeStart(*, null)      = *\n     * StringUtils.removeStart(\"www.domain.com\", \"www.\")   = \"domain.com\"\n     * StringUtils.removeStart(\"domain.com\", \"www.\")       = \"domain.com\"\n     * StringUtils.removeStart(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeStart(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     */ [139051,140143]"
    },
    {
      "src": "local_variable_declaration [60926,60950]",
      "dest": "local_variable_declaration [61313,61337]"
    },
    {
      "src": "local_variable_declaration [174893,174917]",
      "dest": "local_variable_declaration [176387,176411]"
    },
    {
      "src": "identifier: searchChars [62362,62373]",
      "dest": "identifier: searchChars [63101,63112]"
    },
    {
      "src": "comparison_operator: == [225088,225090]",
      "dest": "comparison_operator: == [226582,226584]"
    },
    {
      "src": "block [141762,141842]",
      "dest": "block [143256,143336]"
    },
    {
      "src": "method_invocation [132899,132917]",
      "dest": "method_invocation [134393,134411]"
    },
    {
      "src": "increment_operator: ++ [61046,61048]",
      "dest": "increment_operator: ++ [61505,61507]"
    },
    {
      "src": "identifier: size [190697,190701]",
      "dest": "identifier: size [192191,192195]"
    },
    {
      "src": "decimal_integer_literal: 3 [220249,220250]",
      "dest": "decimal_integer_literal: 3 [221743,221744]"
    },
    {
      "src": "line_comment: // missing low surrogate, fine, like String.indexOf(String) [57988,58047]",
      "dest": "line_comment: // ch is a supplementary character [55046,55080]"
    },
    {
      "src": "argument_list [184260,184275]",
      "dest": "argument_list [185754,185769]"
    },
    {
      "src": "identifier: substring [173195,173204]",
      "dest": "identifier: substring [174689,174698]"
    },
    {
      "src": "line_comment: // index on index that the match was found [159091,159133]",
      "dest": "line_comment: // index on index that the match was found [160585,160627]"
    },
    {
      "src": "return_statement [181890,181916]",
      "dest": "return_statement [183384,183410]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [150434,150449]",
      "dest": "identifier: INDEX_NOT_FOUND [151928,151943]"
    },
    {
      "src": "block [166165,166244]",
      "dest": "block [167659,167738]"
    },
    {
      "src": "increment_operator: ++ [137306,137308]",
      "dest": "increment_operator: ++ [138800,138802]"
    },
    {
      "src": "decimal_integer_literal: 2 [175330,175331]",
      "dest": "decimal_integer_literal: 2 [176824,176825]"
    },
    {
      "src": "binary_expression [28524,28536]",
      "dest": "binary_expression [28524,28536]"
    },
    {
      "src": "method_invocation [90814,90827]",
      "dest": "method_invocation [92308,92321]"
    },
    {
      "src": "type: RuntimeException [25247,25263]",
      "dest": "type: RuntimeException [25247,25263]"
    },
    {
      "src": "increment_operator: ++ [8828,8830]",
      "dest": "increment_operator: ++ [8828,8830]"
    },
    {
      "src": "identifier: isEmpty [91567,91574]",
      "dest": "identifier: isEmpty [93061,93068]"
    },
    {
      "src": "modifiers [9560,9573]",
      "dest": "modifiers [9560,9573]"
    },
    {
      "src": "visibility: public [148227,148233]",
      "dest": "visibility: public [149721,149727]"
    },
    {
      "src": "parenthesized_expression [201005,201048]",
      "dest": "parenthesized_expression [202499,202542]"
    },
    {
      "src": "parenthesized_expression [201979,201991]",
      "dest": "parenthesized_expression [203473,203485]"
    },
    {
      "src": "identifier: strLen [198220,198226]",
      "dest": "identifier: strLen [199714,199720]"
    },
    {
      "src": "formal_parameter [238078,238088]",
      "dest": "formal_parameter [239572,239582]"
    },
    {
      "src": "argument_list [196921,196935]",
      "dest": "argument_list [198415,198429]"
    },
    {
      "src": "for_statement [211308,211456]",
      "dest": "for_statement [212802,212950]"
    },
    {
      "src": "modifiers [11616,11629]",
      "dest": "modifiers [11616,11629]"
    },
    {
      "src": "method_invocation [12693,12703]",
      "dest": "method_invocation [12693,12703]"
    },
    {
      "src": "identifier: length [185479,185485]",
      "dest": "identifier: length [186973,186979]"
    },
    {
      "src": "block [228851,228889]",
      "dest": "block [230345,230383]"
    },
    {
      "src": "final: final [6253,6258]",
      "dest": "final: final [6253,6258]"
    },
    {
      "src": "identifier: numberOfSubstrings [104649,104667]",
      "dest": "identifier: numberOfSubstrings [106143,106161]"
    },
    {
      "src": "identifier: array [128006,128011]",
      "dest": "identifier: array [129500,129505]"
    },
    {
      "src": "visibility: public [181326,181332]",
      "dest": "visibility: public [182820,182826]"
    },
    {
      "src": "formal_parameters [22963,22997]",
      "dest": "formal_parameters [22963,22997]"
    },
    {
      "src": "if_statement [118681,118816]",
      "dest": "if_statement [120175,120310]"
    },
    {
      "src": "assignment_expression [118900,118913]",
      "dest": "assignment_expression [120394,120407]"
    },
    {
      "src": "argument_list [161769,161791]",
      "dest": "argument_list [163263,163285]"
    },
    {
      "src": "identifier: len [53178,53181]",
      "dest": "identifier: len [53178,53181]"
    },
    {
      "src": "identifier: str [137080,137083]",
      "dest": "identifier: str [138574,138577]"
    },
    {
      "src": "block_comment: \n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ [0,804]",
      "dest": "block_comment: \n * Licensed to the Apache Software Foundation (ASF) under one or more\n * contributor license agreements.  See the NOTICE file distributed with\n * this work for additional information regarding copyright ownership.\n * The ASF licenses this file to You under the Apache License, Version 2.0\n * (the \"License\"); you may not use this file except in compliance with\n * the License.  You may obtain a copy of the License at\n * \n *      http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ [0,804]"
    },
    {
      "src": "identifier: str [175672,175675]",
      "dest": "identifier: str [177166,177169]"
    },
    {
      "src": "visibility: public [195404,195410]",
      "dest": "visibility: public [196898,196904]"
    },
    {
      "src": "identifier: max [150300,150303]",
      "dest": "identifier: max [151794,151797]"
    },
    {
      "src": "type: String [83061,83067]",
      "dest": "type: String [84555,84561]"
    },
    {
      "src": "if_statement [137041,137094]",
      "dest": "if_statement [138535,138588]"
    },
    {
      "src": "null_literal: null [244189,244193]",
      "dest": "null_literal: null [245683,245687]"
    },
    {
      "src": "identifier: indexOf [150653,150660]",
      "dest": "identifier: indexOf [152147,152154]"
    },
    {
      "src": "method_invocation [79865,79877]",
      "dest": "method_invocation [81359,81371]"
    },
    {
      "src": "variable_declarator [158558,158590]",
      "dest": "variable_declarator [160052,160084]"
    },
    {
      "src": "binary_expression [123851,123877]",
      "dest": "binary_expression [125345,125371]"
    },
    {
      "src": "identifier: tokenStart [123782,123792]",
      "dest": "identifier: tokenStart [125276,125286]"
    },
    {
      "src": "method_invocation [123482,123507]",
      "dest": "method_invocation [124976,125001]"
    },
    {
      "src": "affectation_operator: = [165717,165718]",
      "dest": "affectation_operator: = [167211,167212]"
    },
    {
      "src": "argument_list [179078,179094]",
      "dest": "argument_list [180572,180588]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [241363,241436]",
      "dest": "line_comment: //----------------------------------------------------------------------- [242857,242930]"
    },
    {
      "src": "affectation_operator: = [236427,236428]",
      "dest": "affectation_operator: = [237921,237922]"
    },
    {
      "src": "identifier: end [105556,105559]",
      "dest": "identifier: end [107050,107053]"
    },
    {
      "src": "affectation_operator: = [118264,118265]",
      "dest": "affectation_operator: = [119758,119759]"
    },
    {
      "src": "array_access [236241,236245]",
      "dest": "array_access [237735,237739]"
    },
    {
      "src": "binary_expression [75839,75859]",
      "dest": "binary_expression [77333,77353]"
    },
    {
      "src": "decimal_integer_literal: 0 [175619,175620]",
      "dest": "decimal_integer_literal: 0 [177113,177114]"
    },
    {
      "src": "block [211232,211269]",
      "dest": "block [212726,212763]"
    },
    {
      "src": "parenthesized_expression [190513,190539]",
      "dest": "parenthesized_expression [192007,192033]"
    },
    {
      "src": "type: String[] [92779,92787]",
      "dest": "type: String[] [94273,94281]"
    },
    {
      "src": "method_invocation [80033,80051]",
      "dest": "method_invocation [81527,81545]"
    },
    {
      "src": "identifier: str [104040,104043]",
      "dest": "identifier: str [105534,105537]"
    },
    {
      "src": "identifier: size [187732,187736]",
      "dest": "identifier: size [189226,189230]"
    },
    {
      "src": "type: int [130732,130735]",
      "dest": "type: int [132226,132229]"
    },
    {
      "src": "?: ? [14851,14852]",
      "dest": "?: ? [14851,14852]"
    },
    {
      "src": "visibility: public [147038,147044]",
      "dest": "visibility: public [148532,148538]"
    },
    {
      "src": "return_statement [66523,66535]",
      "dest": "return_statement [67570,67582]"
    },
    {
      "src": "arithmetic_operator: * [175328,175329]",
      "dest": "arithmetic_operator: * [176822,176823]"
    },
    {
      "src": "parenthesized_expression [65187,65221]",
      "dest": "parenthesized_expression [66234,66268]"
    },
    {
      "src": "method_invocation [181583,181595]",
      "dest": "method_invocation [183077,183089]"
    },
    {
      "src": "parenthesized_expression [138727,138760]",
      "dest": "parenthesized_expression [140221,140254]"
    },
    {
      "src": "comparison_operator: == [117226,117228]",
      "dest": "comparison_operator: == [118720,118722]"
    },
    {
      "src": "for_statement [202068,202240]",
      "dest": "for_statement [203562,203734]"
    },
    {
      "src": "null_literal: null [110507,110511]",
      "dest": "null_literal: null [112001,112005]"
    },
    {
      "src": "binary_expression [20529,20537]",
      "dest": "binary_expression [20529,20537]"
    },
    {
      "src": "type: String[] [103996,104004]",
      "dest": "type: String[] [105490,105498]"
    },
    {
      "src": "identifier: cs [210170,210172]",
      "dest": "identifier: cs [211664,211666]"
    },
    {
      "src": "method_invocation [131221,131249]",
      "dest": "method_invocation [132715,132743]"
    },
    {
      "src": "parenthesized_expression [185785,185801]",
      "dest": "parenthesized_expression [187279,187295]"
    },
    {
      "src": "argument_list [42384,42406]",
      "dest": "argument_list [42384,42406]"
    },
    {
      "src": "affectation_operator: = [186027,186028]",
      "dest": "affectation_operator: = [187521,187522]"
    },
    {
      "src": "identifier: str [14736,14739]",
      "dest": "identifier: str [14736,14739]"
    },
    {
      "src": "formal_parameters [21653,21668]",
      "dest": "formal_parameters [21653,21668]"
    },
    {
      "src": "variable_declarator [6263,6279]",
      "dest": "variable_declarator [6263,6279]"
    },
    {
      "src": "unary_expression [162439,162446]",
      "dest": "unary_expression [163933,163940]"
    },
    {
      "src": "array_access [161914,161942]",
      "dest": "array_access [163408,163436]"
    },
    {
      "src": "comparison_operator: < [161482,161483]",
      "dest": "comparison_operator: < [162976,162977]"
    },
    {
      "src": "identifier: lastIndexOf [43320,43331]",
      "dest": "identifier: lastIndexOf [43320,43331]"
    },
    {
      "src": "affectation_operator: = [110706,110707]",
      "dest": "affectation_operator: = [112200,112201]"
    },
    {
      "src": "arithmetic_operator: - [124181,124182]",
      "dest": "arithmetic_operator: - [125675,125676]"
    },
    {
      "src": "identifier: indexOf [118530,118537]",
      "dest": "identifier: indexOf [120024,120031]"
    },
    {
      "src": "type: String[] [240958,240966]",
      "dest": "type: String[] [242452,242460]"
    },
    {
      "src": "argument_list [155347,155400]",
      "dest": "argument_list [156841,156894]"
    },
    {
      "src": "variable_declarator [116799,116812]",
      "dest": "variable_declarator [118293,118306]"
    },
    {
      "src": "identifier: length [49538,49544]",
      "dest": "identifier: length [49538,49544]"
    },
    {
      "src": "binary_expression [165668,165688]",
      "dest": "binary_expression [167162,167182]"
    },
    {
      "src": "type: NoSuchFieldException [25514,25534]",
      "dest": "type: NoSuchFieldException [25514,25534]"
    },
    {
      "src": "type: IllegalArgumentException [25834,25858]",
      "dest": "type: IllegalArgumentException [25834,25858]"
    },
    {
      "src": "argument_list [205874,205877]",
      "dest": "argument_list [207368,207371]"
    },
    {
      "src": "identifier: array [131522,131527]",
      "dest": "identifier: array [133016,133021]"
    },
    {
      "src": "identifier: locale [194611,194617]",
      "dest": "identifier: locale [196105,196111]"
    },
    {
      "src": "binary_expression [118484,118491]",
      "dest": "binary_expression [119978,119985]"
    },
    {
      "src": "expression_statement [134571,134587]",
      "dest": "expression_statement [136065,136081]"
    },
    {
      "src": "catch: catch [25993,25998]",
      "dest": "catch: catch [25993,25998]"
    },
    {
      "src": "return_statement [104295,104332]",
      "dest": "return_statement [105789,105826]"
    },
    {
      "src": "identifier: length [222168,222174]",
      "dest": "identifier: length [223662,223668]"
    },
    {
      "src": "argument_list [214671,214673]",
      "dest": "argument_list [216165,216167]"
    },
    {
      "src": "type: String [148269,148275]",
      "dest": "type: String [149763,149769]"
    },
    {
      "src": "modifiers [87665,87678]",
      "dest": "modifiers [89159,89172]"
    },
    {
      "src": "identifier: replacementList [162535,162550]",
      "dest": "identifier: replacementList [164029,164044]"
    },
    {
      "src": "argument_list [56058,56071]",
      "dest": "argument_list [56404,56417]"
    },
    {
      "src": "comparison_operator: == [170084,170086]",
      "dest": "comparison_operator: == [171578,171580]"
    },
    {
      "src": "comparison_operator: < [61036,61037]",
      "dest": "comparison_operator: < [61495,61496]"
    },
    {
      "src": "local_variable_declaration [175209,175234]",
      "dest": "local_variable_declaration [176703,176728]"
    },
    {
      "src": "\": \" [25059,25060]",
      "dest": "\": \" [25059,25060]"
    },
    {
      "src": "assignment_expression [106119,106146]",
      "dest": "assignment_expression [107613,107640]"
    },
    {
      "src": "binary_expression [185334,185345]",
      "dest": "binary_expression [186828,186839]"
    },
    {
      "src": "identifier: str [141740,141743]",
      "dest": "identifier: str [143234,143237]"
    },
    {
      "src": "block [166082,166258]",
      "dest": "block [167576,167752]"
    },
    {
      "src": "modifiers [51801,51814]",
      "dest": "modifiers [51801,51814]"
    },
    {
      "src": "\": \" [190628,190629]",
      "dest": "\": \" [192122,192123]"
    },
    {
      "src": "static: static [101199,101205]",
      "dest": "static: static [102693,102699]"
    },
    {
      "src": "method_invocation [181983,182008]",
      "dest": "method_invocation [183477,183502]"
    },
    {
      "src": "type: int [211313,211316]",
      "dest": "type: int [212807,212810]"
    },
    {
      "src": "identifier: i [72024,72025]",
      "dest": "identifier: i [73518,73519]"
    },
    {
      "src": "identifier: open [91236,91240]",
      "dest": "identifier: open [92730,92734]"
    },
    {
      "src": "identifier: isEmpty [221947,221954]",
      "dest": "identifier: isEmpty [223441,223448]"
    },
    {
      "src": "return_statement [181434,181446]",
      "dest": "return_statement [182928,182940]"
    },
    {
      "src": "new: new [25243,25246]",
      "dest": "new: new [25243,25246]"
    },
    {
      "src": "return_statement [53083,53096]",
      "dest": "return_statement [53083,53096]"
    },
    {
      "src": "identifier: i [49858,49859]",
      "dest": "identifier: i [49858,49859]"
    },
    {
      "src": "type: String [126085,126091]",
      "dest": "type: String [127579,127585]"
    },
    {
      "src": "formal_parameter [113317,113327]",
      "dest": "formal_parameter [114811,114821]"
    },
    {
      "src": "identifier: sub [199991,199994]",
      "dest": "identifier: sub [201485,201488]"
    },
    {
      "src": "increment_operator: ++ [119100,119102]",
      "dest": "increment_operator: ++ [120594,120596]"
    },
    {
      "src": "formal_parameters [104032,104155]",
      "dest": "formal_parameters [105526,105649]"
    },
    {
      "src": "block [161679,161728]",
      "dest": "block [163173,163222]"
    },
    {
      "src": "comparison_operator: == [116572,116574]",
      "dest": "comparison_operator: == [118066,118068]"
    },
    {
      "src": "null_literal: null [168030,168034]",
      "dest": "null_literal: null [169524,169528]"
    },
    {
      "src": "identifier: cs [65188,65190]",
      "dest": "identifier: cs [66235,66237]"
    },
    {
      "src": "block [176725,176966]",
      "dest": "block [178219,178460]"
    },
    {
      "src": "identifier: pos [83357,83360]",
      "dest": "identifier: pos [84851,84854]"
    },
    {
      "src": "identifier: append [131562,131568]",
      "dest": "identifier: append [133056,133062]"
    },
    {
      "src": "decimal_integer_literal: 0 [204386,204387]",
      "dest": "decimal_integer_literal: 0 [205880,205881]"
    },
    {
      "src": "identifier: str [50888,50891]",
      "dest": "identifier: str [50888,50891]"
    },
    {
      "src": "local_variable_declaration [137134,137160]",
      "dest": "local_variable_declaration [138628,138654]"
    },
    {
      "src": "array_access [161770,161783]",
      "dest": "array_access [163264,163277]"
    },
    {
      "src": "binary_expression [58108,58113]",
      "dest": "binary_expression [55141,55146]"
    },
    {
      "src": "identifier: n [236610,236611]",
      "dest": "identifier: n [238104,238105]"
    },
    {
      "src": "if_statement [72086,72147]",
      "dest": "if_statement [73580,73641]"
    },
    {
      "src": "binary_expression [66474,66507]",
      "dest": "binary_expression [67521,67554]"
    },
    {
      "src": "argument_list [175731,175733]",
      "dest": "argument_list [177225,177227]"
    },
    {
      "src": "comparison_operator: >= [175018,175020]",
      "dest": "comparison_operator: >= [176512,176514]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [190923,190996]",
      "dest": "line_comment: //----------------------------------------------------------------------- [192417,192490]"
    },
    {
      "src": "argument_list [70179,70187]",
      "dest": "argument_list [71673,71681]"
    },
    {
      "src": "block [184055,184131]",
      "dest": "block [185549,185625]"
    },
    {
      "src": "type: String [169918,169924]",
      "dest": "type: String [171412,171418]"
    },
    {
      "src": "identifier: add [123989,123992]",
      "dest": "identifier: add [125483,125486]"
    },
    {
      "src": "identifier: separator [134456,134465]",
      "dest": "identifier: separator [135950,135959]"
    },
    {
      "src": "identifier: tmp [71983,71986]",
      "dest": "identifier: tmp [73477,73480]"
    },
    {
      "src": "assignment_expression [106340,106349]",
      "dest": "assignment_expression [107834,107843]"
    },
    {
      "src": "type: String [182269,182275]",
      "dest": "type: String [183763,183769]"
    },
    {
      "src": "identifier: strs [23100,23104]",
      "dest": "identifier: strs [23100,23104]"
    },
    {
      "src": "array_creation_expression [119270,119293]",
      "dest": "array_creation_expression [120764,120787]"
    },
    {
      "src": "method_invocation [162271,162284]",
      "dest": "method_invocation [163765,163778]"
    },
    {
      "src": "type: int [195525,195528]",
      "dest": "type: int [197019,197022]"
    },
    {
      "src": "identifier: containsNone [68029,68041]",
      "dest": "identifier: containsNone [69523,69535]"
    },
    {
      "src": "argument_list [152672,152717]",
      "dest": "argument_list [154166,154211]"
    },
    {
      "src": "comparison_operator: < [159370,159371]",
      "dest": "comparison_operator: < [160864,160865]"
    },
    {
      "src": "comparison_operator: <= [185575,185577]",
      "dest": "comparison_operator: <= [187069,187071]"
    },
    {
      "src": "if_statement [8707,8790]",
      "dest": "if_statement [8707,8790]"
    },
    {
      "src": "formal_parameter [190485,190498]",
      "dest": "formal_parameter [191979,191992]"
    },
    {
      "src": "method_invocation [60837,60868]",
      "dest": "method_invocation [61224,61255]"
    },
    {
      "src": "decimal_integer_literal: 0 [198362,198363]",
      "dest": "decimal_integer_literal: 0 [199856,199857]"
    },
    {
      "src": "identifier: toArray [106402,106409]",
      "dest": "identifier: toArray [107896,107903]"
    },
    {
      "src": "parenthesized_expression [134075,134096]",
      "dest": "parenthesized_expression [135569,135590]"
    },
    {
      "src": "increment_operator: ++ [145714,145716]",
      "dest": "increment_operator: ++ [147208,147210]"
    },
    {
      "src": "type: String [186184,186190]",
      "dest": "type: String [187678,187684]"
    },
    {
      "src": "identifier: indexOf [161762,161769]",
      "dest": "identifier: indexOf [163256,163263]"
    },
    {
      "src": "modifiers [83013,83026]",
      "dest": "modifiers [84507,84520]"
    },
    {
      "src": "new: new [235603,235606]",
      "dest": "new: new [237097,237100]"
    },
    {
      "src": "binary_expression [184144,184160]",
      "dest": "binary_expression [185638,185654]"
    },
    {
      "src": "comparison_operator: < [73702,73703]",
      "dest": "comparison_operator: < [75196,75197]"
    },
    {
      "src": "block [203306,203351]",
      "dest": "block [204800,204845]"
    },
    {
      "src": "return_statement [225126,225135]",
      "dest": "return_statement [226620,226629]"
    },
    {
      "src": "identifier: i [160447,160448]",
      "dest": "identifier: i [161941,161942]"
    },
    {
      "src": "argument_list [185836,185841]",
      "dest": "argument_list [187330,187335]"
    },
    {
      "src": "block_comment:     \n     * <p>Case insensitive check if a String starts with a specified prefix.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.startsWithIgnoreCase(null, null)      = true\n     * StringUtils.startsWithIgnoreCase(null, \"abc\")     = false\n     * StringUtils.startsWithIgnoreCase(\"abcdef\", null)  = false\n     * StringUtils.startsWithIgnoreCase(\"abcdef\", \"abc\") = true\n     * StringUtils.startsWithIgnoreCase(\"ABCDEF\", \"abc\") = true\n     * </pre>\n     *\n     * @see java.lang.String#startsWith(String)\n     * @param str  the String to check, may be null\n     * @param prefix the prefix to find, may be null\n     * @return <code>true</code> if the String starts with the prefix, case insensitive, or\n     *  both <code>null</code>\n     * @since 2.4\n     */ [238165,239090]",
      "dest": "block_comment:     \n     * <p>Case insensitive check if a String starts with a specified prefix.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.startsWithIgnoreCase(null, null)      = true\n     * StringUtils.startsWithIgnoreCase(null, \"abc\")     = false\n     * StringUtils.startsWithIgnoreCase(\"abcdef\", null)  = false\n     * StringUtils.startsWithIgnoreCase(\"abcdef\", \"abc\") = true\n     * StringUtils.startsWithIgnoreCase(\"ABCDEF\", \"abc\") = true\n     * </pre>\n     *\n     * @see java.lang.String#startsWith(String)\n     * @param str  the String to check, may be null\n     * @param prefix the prefix to find, may be null\n     * @return <code>true</code> if the String starts with the prefix, case insensitive, or\n     *  both <code>null</code>\n     * @since 2.4\n     */ [239659,240584]"
    },
    {
      "src": "type: CharSequence [224980,224992]",
      "dest": "type: CharSequence [226474,226486]"
    },
    {
      "src": "identifier: i [204457,204458]",
      "dest": "identifier: i [205951,205952]"
    },
    {
      "src": "decimal_integer_literal: 0 [91153,91154]",
      "dest": "decimal_integer_literal: 0 [92647,92648]"
    },
    {
      "src": "identifier: str [170050,170053]",
      "dest": "identifier: str [171544,171547]"
    },
    {
      "src": "block [49896,49937]",
      "dest": "block [49896,49937]"
    },
    {
      "src": "return_statement [207107,207119]",
      "dest": "return_statement [208601,208613]"
    },
    {
      "src": "block [219905,219981]",
      "dest": "block [221399,221475]"
    },
    {
      "src": "binary_expression [174691,174710]",
      "dest": "binary_expression [176185,176204]"
    },
    {
      "src": "binary_expression [124172,124193]",
      "dest": "binary_expression [125666,125687]"
    },
    {
      "src": "return_statement [8917,8930]",
      "dest": "return_statement [8917,8930]"
    },
    {
      "src": "identifier: start [161053,161058]",
      "dest": "identifier: start [162547,162552]"
    },
    {
      "src": "identifier: comparisonChar [228698,228712]",
      "dest": "identifier: comparisonChar [230192,230206]"
    },
    {
      "src": "identifier: str [43473,43476]",
      "dest": "identifier: str [43473,43476]"
    },
    {
      "src": "identifier: separator [131286,131295]",
      "dest": "identifier: separator [132780,132789]"
    },
    {
      "src": "arithmetic_operator: + [161226,161227]",
      "dest": "arithmetic_operator: + [162720,162721]"
    },
    {
      "src": "method_invocation [42292,42304]",
      "dest": "method_invocation [42292,42304]"
    },
    {
      "src": "formal_parameter [233760,233774]",
      "dest": "formal_parameter [235254,235268]"
    },
    {
      "src": "block [20604,20642]",
      "dest": "block [20604,20642]"
    },
    {
      "src": "local_variable_declaration [53196,53206]",
      "dest": "local_variable_declaration [53196,53206]"
    },
    {
      "src": "identifier: j [57759,57760]",
      "dest": "identifier: j [58099,58100]"
    },
    {
      "src": "identifier: buf [161098,161101]",
      "dest": "identifier: buf [162592,162595]"
    },
    {
      "src": "identifier: startPos [33631,33639]",
      "dest": "identifier: startPos [33631,33639]"
    },
    {
      "src": "identifier: outer [61215,61220]",
      "dest": "identifier: outer [61932,61937]"
    },
    {
      "src": "identifier: pads [181609,181613]",
      "dest": "identifier: pads [183103,183107]"
    },
    {
      "src": "identifier: abrevMarker [219865,219876]",
      "dest": "identifier: abrevMarker [221359,221370]"
    },
    {
      "src": "if_statement [78536,78596]",
      "dest": "if_statement [80030,80090]"
    },
    {
      "src": "argument_list [14843,14845]",
      "dest": "argument_list [14843,14845]"
    },
    {
      "src": "type: String [137431,137437]",
      "dest": "type: String [138925,138931]"
    },
    {
      "src": "break_statement [91293,91299]",
      "dest": "break_statement [92787,92793]"
    },
    {
      "src": "affectation_operator: = [131334,131335]",
      "dest": "affectation_operator: = [132828,132829]"
    },
    {
      "src": "formal_parameter [190463,190473]",
      "dest": "formal_parameter [191957,191967]"
    },
    {
      "src": "decimal_integer_literal: 0 [20536,20537]",
      "dest": "decimal_integer_literal: 0 [20536,20537]"
    },
    {
      "src": "identifier: length [39589,39595]",
      "dest": "identifier: length [39589,39595]"
    },
    {
      "src": "logical_operator: && [18859,18861]",
      "dest": "logical_operator: && [18859,18861]"
    },
    {
      "src": "visibility: public [205633,205639]",
      "dest": "visibility: public [207127,207133]"
    },
    {
      "src": "decimal_integer_literal: 1 [162573,162574]",
      "dest": "decimal_integer_literal: 1 [164067,164068]"
    },
    {
      "src": "block [201966,202267]",
      "dest": "block [203460,203761]"
    },
    {
      "src": "logical_operator: && [239868,239870]",
      "dest": "logical_operator: && [241362,241364]"
    },
    {
      "src": "static: static [79724,79730]",
      "dest": "static: static [81218,81224]"
    },
    {
      "src": "if_statement [140372,140473]",
      "dest": "if_statement [141866,141967]"
    },
    {
      "src": "argument_list [86635,86661]",
      "dest": "argument_list [88129,88155]"
    },
    {
      "src": "identifier: i [145795,145796]",
      "dest": "identifier: i [147289,147290]"
    },
    {
      "src": "formal_parameters [163603,163650]",
      "dest": "formal_parameters [165097,165144]"
    },
    {
      "src": "identifier: text [160143,160147]",
      "dest": "identifier: text [161637,161641]"
    },
    {
      "src": "variable_declarator [199852,199861]",
      "dest": "variable_declarator [201346,201355]"
    },
    {
      "src": "identifier: substrings [106391,106401]",
      "dest": "identifier: substrings [107885,107895]"
    },
    {
      "src": "affectation_operator: = [24873,24874]",
      "dest": "affectation_operator: = [24873,24874]"
    },
    {
      "src": "binary_expression [181743,181754]",
      "dest": "binary_expression [183237,183248]"
    },
    {
      "src": "identifier: maxWidth [220138,220146]",
      "dest": "identifier: maxWidth [221632,221640]"
    },
    {
      "src": "block [69749,70425]",
      "dest": "block [71243,71919]"
    },
    {
      "src": "expression_statement [105257,105297]",
      "dest": "expression_statement [106751,106791]"
    },
    {
      "src": "affectation_operator: = [165848,165849]",
      "dest": "affectation_operator: = [167342,167343]"
    },
    {
      "src": "block [49441,49488]",
      "dest": "block [49441,49488]"
    },
    {
      "src": "affectation_operator: = [227946,227947]",
      "dest": "affectation_operator: = [229440,229441]"
    },
    {
      "src": "parenthesized_expression [198655,198682]",
      "dest": "parenthesized_expression [200149,200176]"
    },
    {
      "src": "identifier: chomp [171702,171707]",
      "dest": "identifier: chomp [173196,173201]"
    },
    {
      "src": "identifier: stripStart [17197,17207]",
      "dest": "identifier: stripStart [17197,17207]"
    },
    {
      "src": "type: RuntimeException [25892,25908]",
      "dest": "type: RuntimeException [25892,25908]"
    },
    {
      "src": "new: new [198316,198319]",
      "dest": "new: new [199810,199813]"
    },
    {
      "src": "identifier: isEmpty [84708,84715]",
      "dest": "identifier: isEmpty [86202,86209]"
    },
    {
      "src": "identifier: toString [196817,196825]",
      "dest": "identifier: toString [198311,198319]"
    },
    {
      "src": "identifier: str [183899,183902]",
      "dest": "identifier: str [185393,185396]"
    },
    {
      "src": "expression_statement [161276,161291]",
      "dest": "expression_statement [162770,162785]"
    },
    {
      "src": "comparison_operator: == [116937,116939]",
      "dest": "comparison_operator: == [118431,118433]"
    },
    {
      "src": "identifier: start [110711,110716]",
      "dest": "identifier: start [112205,112210]"
    },
    {
      "src": "type: int [47730,47733]",
      "dest": "type: int [47730,47733]"
    },
    {
      "src": "identifier: j [66722,66723]",
      "dest": "identifier: j [67841,67842]"
    },
    {
      "src": "local_variable_declaration [116626,116649]",
      "dest": "local_variable_declaration [118120,118143]"
    },
    {
      "src": "argument_list [215703,215723]",
      "dest": "argument_list [217197,217217]"
    },
    {
      "src": "field_access [158573,158590]",
      "dest": "field_access [160067,160084]"
    },
    {
      "src": "if_statement [219990,220114]",
      "dest": "if_statement [221484,221608]"
    },
    {
      "src": "method_declaration [201914,202267]",
      "dest": "method_declaration [203408,203761]"
    },
    {
      "src": "return_statement [49455,49478]",
      "dest": "return_statement [49455,49478]"
    },
    {
      "src": "method_declaration [199707,200042]",
      "dest": "method_declaration [201201,201536]"
    },
    {
      "src": "identifier: start [76135,76140]",
      "dest": "identifier: start [77629,77634]"
    },
    {
      "src": "variable_declarator [91216,91246]",
      "dest": "variable_declarator [92710,92740]"
    },
    {
      "src": "local_variable_declaration [123716,123744]",
      "dest": "local_variable_declaration [125210,125238]"
    },
    {
      "src": "affectation_operator: = [188977,188978]",
      "dest": "affectation_operator: = [190471,190472]"
    },
    {
      "src": "static: static [10631,10637]",
      "dest": "static: static [10631,10637]"
    },
    {
      "src": "visibility: public [239095,239101]",
      "dest": "visibility: public [240589,240595]"
    },
    {
      "src": "identifier: end [91409,91412]",
      "dest": "identifier: end [92903,92906]"
    },
    {
      "src": "identifier: cs [202135,202137]",
      "dest": "identifier: cs [203629,203631]"
    },
    {
      "src": "argument_list [211296,211298]",
      "dest": "argument_list [212790,212792]"
    },
    {
      "src": "binary_expression [239803,239832]",
      "dest": "binary_expression [241297,241326]"
    },
    {
      "src": "comparison_operator: < [72018,72019]",
      "dest": "comparison_operator: < [73512,73513]"
    },
    {
      "src": "parenthesized_expression [168022,168035]",
      "dest": "parenthesized_expression [169516,169529]"
    },
    {
      "src": "identifier: splitByWholeSeparatorWorker [98113,98140]",
      "dest": "identifier: splitByWholeSeparatorWorker [99607,99634]"
    },
    {
      "src": "variable_declarator [161473,161478]",
      "dest": "variable_declarator [162967,162972]"
    },
    {
      "src": "line_comment: // get Normlizer class [24375,24397]",
      "dest": "line_comment: // get Normlizer class [24375,24397]"
    },
    {
      "src": "identifier: str [215516,215519]",
      "dest": "identifier: str [217010,217013]"
    },
    {
      "src": "argument_list [86543,86545]",
      "dest": "argument_list [88037,88039]"
    },
    {
      "src": "comparison_operator: != [228844,228846]",
      "dest": "comparison_operator: != [230338,230340]"
    },
    {
      "src": "affectation_operator: = [200970,200971]",
      "dest": "affectation_operator: = [202464,202465]"
    },
    {
      "src": "expression_statement [91518,91539]",
      "dest": "expression_statement [93012,93033]"
    },
    {
      "src": "parenthesized_expression [123524,123545]",
      "dest": "parenthesized_expression [125018,125039]"
    },
    {
      "src": "formal_parameter [45064,45080]",
      "dest": "formal_parameter [45064,45080]"
    },
    {
      "src": "type: CharSequence [59497,59509]",
      "dest": "type: String [59890,59896]"
    },
    {
      "src": "formal_parameter [36043,36059]",
      "dest": "formal_parameter [36043,36059]"
    },
    {
      "src": "formal_parameter [194501,194514]",
      "dest": "formal_parameter [195995,196008]"
    },
    {
      "src": "identifier: Character [207001,207010]",
      "dest": "identifier: Character [208495,208504]"
    },
    {
      "src": "identifier: separator [98085,98094]",
      "dest": "identifier: separator [99579,99588]"
    },
    {
      "src": "binary_expression [143304,143335]",
      "dest": "binary_expression [144798,144829]"
    },
    {
      "src": "method_invocation [115520,115563]",
      "dest": "method_invocation [117014,117057]"
    },
    {
      "src": "assignment_expression [227816,227838]",
      "dest": "assignment_expression [229310,229332]"
    },
    {
      "src": "comparison_operator: <= [235978,235980]",
      "dest": "comparison_operator: <= [237472,237474]"
    },
    {
      "src": "decimal_integer_literal: 1 [236290,236291]",
      "dest": "decimal_integer_literal: 1 [237784,237785]"
    },
    {
      "src": "type: String [95160,95166]",
      "dest": "type: String [96654,96660]"
    },
    {
      "src": "static: static [77230,77236]",
      "dest": "static: static [78724,78730]"
    },
    {
      "src": "identifier: str [89285,89288]",
      "dest": "identifier: str [90779,90782]"
    },
    {
      "src": "argument_list [168590,168592]",
      "dest": "argument_list [170084,170086]"
    },
    {
      "src": "formal_parameter [174352,174362]",
      "dest": "formal_parameter [175846,175856]"
    },
    {
      "src": "local_variable_declaration [89273,89303]",
      "dest": "local_variable_declaration [90767,90797]"
    },
    {
      "src": "decimal_integer_literal: 3 [219776,219777]",
      "dest": "decimal_integer_literal: 3 [221270,221271]"
    },
    {
      "src": "static: static [52957,52963]",
      "dest": "static: static [52957,52963]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the last index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *)          = -1\n     * StringUtils.lastIndexOf(*, null)          = -1\n     * StringUtils.lastIndexOf(\"\", \"\")           = 0\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"\")   = 8\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the last index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [42419,43297]",
      "dest": "block_comment:     \n     * <p>Finds the last index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(String)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *)          = -1\n     * StringUtils.lastIndexOf(*, null)          = -1\n     * StringUtils.lastIndexOf(\"\", \"\")           = 0\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\") = 1\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"\")   = 8\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the last index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [42419,43297]"
    },
    {
      "src": "identifier: str [81546,81549]",
      "dest": "identifier: str [83040,83043]"
    },
    {
      "src": "variable_declarator [174941,174973]",
      "dest": "variable_declarator [176435,176467]"
    },
    {
      "src": "null_literal: null [244207,244211]",
      "dest": "null_literal: null [245701,245705]"
    },
    {
      "src": "identifier: cs [8711,8713]",
      "dest": "identifier: cs [8711,8713]"
    },
    {
      "src": "method_invocation [221947,221959]",
      "dest": "method_invocation [223441,223453]"
    },
    {
      "src": "decimal_integer_literal: 0 [66644,66645]",
      "dest": "decimal_integer_literal: 0 [67763,67764]"
    },
    {
      "src": "type: String [190485,190491]",
      "dest": "type: String [191979,191985]"
    },
    {
      "src": "identifier: strLen [173086,173092]",
      "dest": "identifier: strLen [174580,174586]"
    },
    {
      "src": "if_statement [196760,196838]",
      "dest": "if_statement [198254,198332]"
    },
    {
      "src": "block [195480,195516]",
      "dest": "block [196974,197010]"
    },
    {
      "src": "type: int [150005,150008]",
      "dest": "type: int [151499,151502]"
    },
    {
      "src": "type: int [30716,30719]",
      "dest": "type: int [30716,30719]"
    },
    {
      "src": "type: CharSequence [200840,200852]",
      "dest": "type: CharSequence [202334,202346]"
    },
    {
      "src": "decimal_integer_literal: 0 [54710,54711]",
      "dest": "decimal_integer_literal: 0 [58011,58012]"
    },
    {
      "src": "formal_parameter [116313,116323]",
      "dest": "formal_parameter [117807,117817]"
    },
    {
      "src": "type: String [239138,239144]",
      "dest": "type: String [240632,240638]"
    },
    {
      "src": "array_access [70061,70074]",
      "dest": "array_access [71555,71568]"
    },
    {
      "src": "affectation_operator: = [227831,227832]",
      "dest": "affectation_operator: = [229325,229326]"
    },
    {
      "src": "identifier: startIndex [127753,127763]",
      "dest": "identifier: startIndex [129247,129257]"
    },
    {
      "src": "binary_expression [185685,185702]",
      "dest": "binary_expression [187179,187196]"
    },
    {
      "src": "null_literal: null [233808,233812]",
      "dest": "null_literal: null [235302,235306]"
    },
    {
      "src": "if_statement [168183,168232]",
      "dest": "if_statement [169677,169726]"
    },
    {
      "src": "while_statement [117011,117646]",
      "dest": "while_statement [118505,119140]"
    },
    {
      "src": "type: boolean [208021,208028]",
      "dest": "type: boolean [209515,209522]"
    },
    {
      "src": "identifier: count [199852,199857]",
      "dest": "identifier: count [201346,201351]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [231755,231828]",
      "dest": "line_comment: //----------------------------------------------------------------------- [233249,233322]"
    },
    {
      "src": "field_access [25027,25042]",
      "dest": "field_access [25027,25042]"
    },
    {
      "src": "binary_expression [150579,150589]",
      "dest": "binary_expression [152073,152083]"
    },
    {
      "src": "identifier: str [90799,90802]",
      "dest": "identifier: str [92293,92296]"
    },
    {
      "src": "identifier: charAt [161114,161120]",
      "dest": "identifier: charAt [162608,162614]"
    },
    {
      "src": "identifier: length [131250,131256]",
      "dest": "identifier: length [132744,132750]"
    },
    {
      "src": "expression_statement [235429,235435]",
      "dest": "expression_statement [236923,236929]"
    },
    {
      "src": "affectation_operator: = [117435,117436]",
      "dest": "affectation_operator: = [118929,118930]"
    },
    {
      "src": "affectation_operator: = [104242,104243]",
      "dest": "affectation_operator: = [105736,105737]"
    },
    {
      "src": "false: false [24350,24355]",
      "dest": "false: false [24350,24355]"
    },
    {
      "src": "identifier: offset [219656,219662]",
      "dest": "identifier: offset [221150,221156]"
    },
    {
      "src": "identifier: sizePlus1 [116799,116808]",
      "dest": "identifier: sizePlus1 [118293,118302]"
    },
    {
      "src": "method_declaration [143222,143524]",
      "dest": "method_declaration [144716,145018]"
    },
    {
      "src": "modifiers [62260,62273]",
      "dest": "modifiers [62999,63012]"
    },
    {
      "src": "identifier: i [61034,61035]",
      "dest": "identifier: i [61493,61494]"
    },
    {
      "src": "variable_declarator [24586,24675]",
      "dest": "variable_declarator [24586,24675]"
    },
    {
      "src": "identifier: indexOf [91228,91235]",
      "dest": "identifier: indexOf [92722,92729]"
    },
    {
      "src": "identifier: iterator [133898,133906]",
      "dest": "identifier: iterator [135392,135400]"
    },
    {
      "src": "identifier: increase [150183,150191]",
      "dest": "identifier: increase [151677,151685]"
    },
    {
      "src": "parenthesized_expression [181468,181485]",
      "dest": "parenthesized_expression [182962,182979]"
    },
    {
      "src": "identifier: tempIndex [161335,161344]",
      "dest": "identifier: tempIndex [162829,162838]"
    },
    {
      "src": "identifier: cs [68055,68057]",
      "dest": "identifier: cs [69549,69551]"
    },
    {
      "src": "return_statement [219622,219633]",
      "dest": "return_statement [221116,221127]"
    },
    {
      "src": "expression_statement [104755,104789]",
      "dest": "expression_statement [106249,106283]"
    },
    {
      "src": "argument_list [25164,25168]",
      "dest": "argument_list [25164,25168]"
    },
    {
      "src": "variable_declarator [6119,6139]",
      "dest": "variable_declarator [6119,6139]"
    },
    {
      "src": "argument_list [132667,132674]",
      "dest": "argument_list [134161,134168]"
    },
    {
      "src": "type: int [202038,202041]",
      "dest": "type: int [203532,203535]"
    },
    {
      "src": "identifier: cs [211227,211229]",
      "dest": "identifier: cs [212721,212723]"
    },
    {
      "src": "null_literal: null [193747,193751]",
      "dest": "null_literal: null [195241,195245]"
    },
    {
      "src": "identifier: normalizerClass [24423,24438]",
      "dest": "identifier: normalizerClass [24423,24438]"
    },
    {
      "src": "argument_list [231238,231244]",
      "dest": "argument_list [232732,232738]"
    },
    {
      "src": "return_statement [83121,83132]",
      "dest": "return_statement [84615,84626]"
    },
    {
      "src": "static: static [126078,126084]",
      "dest": "static: static [127572,127578]"
    },
    {
      "src": "return_statement [7455,7493]",
      "dest": "return_statement [7455,7493]"
    },
    {
      "src": "type: int [208168,208171]",
      "dest": "type: int [209662,209665]"
    },
    {
      "src": "method_declaration [109592,109731]",
      "dest": "method_declaration [111086,111225]"
    },
    {
      "src": "identifier: length [110545,110551]",
      "dest": "identifier: length [112039,112045]"
    },
    {
      "src": "parenthesized_expression [86532,86567]",
      "dest": "parenthesized_expression [88026,88061]"
    },
    {
      "src": "identifier: EMPTY [83195,83200]",
      "dest": "identifier: EMPTY [84689,84694]"
    },
    {
      "src": "argument_list [168555,168597]",
      "dest": "argument_list [170049,170091]"
    },
    {
      "src": "logical_operator: || [111231,111233]",
      "dest": "logical_operator: || [112725,112727]"
    },
    {
      "src": "decimal_integer_literal: 0 [63964,63965]",
      "dest": "decimal_integer_literal: 0 [65011,65012]"
    },
    {
      "src": "expression_statement [227816,227839]",
      "dest": "expression_statement [229310,229333]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes the accents from a string. </p>\n     * <p>NOTE: This is a JDK 1.6 method, it will fail on JDK 1.5. </p>\n     *\n     * <pre>\n     * StringUtils.stripAccents(null)                = null\n     * StringUtils.stripAccents(\"\")                  = \"\"\n     * StringUtils.stripAccents(\"control\")           = \"control\"\n     * StringUtils.stripAccents(\"&ecute;clair\")      = \"eclair\"\n     * </pre>\n     * \n     * @param input String to be stripped\n     * @return String without accents on the text\n     *\n     * @since 3.0\n     */ [23303,23842]",
      "dest": "block_comment:     \n     * <p>Removes the accents from a string. </p>\n     * <p>NOTE: This is a JDK 1.6 method, it will fail on JDK 1.5. </p>\n     *\n     * <pre>\n     * StringUtils.stripAccents(null)                = null\n     * StringUtils.stripAccents(\"\")                  = \"\"\n     * StringUtils.stripAccents(\"control\")           = \"control\"\n     * StringUtils.stripAccents(\"&ecute;clair\")      = \"eclair\"\n     * </pre>\n     * \n     * @param input String to be stripped\n     * @return String without accents on the text\n     *\n     * @since 3.0\n     */ [23303,23842]"
    },
    {
      "src": "if_statement [39714,39783]",
      "dest": "if_statement [39714,39783]"
    },
    {
      "src": "variable_declarator [57584,57605]",
      "dest": "variable_declarator [57924,57945]"
    },
    {
      "src": "for_statement [61100,61253]",
      "dest": "for_statement [61559,61992]"
    },
    {
      "src": "visibility: public [33427,33433]",
      "dest": "visibility: public [33427,33433]"
    },
    {
      "src": "block [18693,18733]",
      "dest": "block [18693,18733]"
    },
    {
      "src": "identifier: indexOfIgnoreCase [37836,37853]",
      "dest": "identifier: indexOfIgnoreCase [37836,37853]"
    },
    {
      "src": "type: String[] [21654,21662]",
      "dest": "type: String[] [21654,21662]"
    },
    {
      "src": "type: int [123408,123411]",
      "dest": "type: int [124902,124905]"
    },
    {
      "src": "array_access [228547,228553]",
      "dest": "array_access [230041,230047]"
    },
    {
      "src": "type: int [75582,75585]",
      "dest": "type: int [77076,77079]"
    },
    {
      "src": "affectation_operator: = [175388,175389]",
      "dest": "affectation_operator: = [176882,176883]"
    },
    {
      "src": "logical_operator: || [149901,149903]",
      "dest": "logical_operator: || [151395,151397]"
    },
    {
      "src": "block [79772,80114]",
      "dest": "block [81266,81608]"
    },
    {
      "src": "affectation_operator: = [119044,119045]",
      "dest": "affectation_operator: = [120538,120539]"
    },
    {
      "src": "method_invocation [176927,176955]",
      "dest": "method_invocation [178421,178449]"
    },
    {
      "src": "identifier: close [91378,91383]",
      "dest": "identifier: close [92872,92877]"
    },
    {
      "src": "local_variable_declaration [91053,91081]",
      "dest": "local_variable_declaration [92547,92575]"
    },
    {
      "src": "argument_list [91643,91669]",
      "dest": "argument_list [93137,93163]"
    },
    {
      "src": "identifier: countMatches [199725,199737]",
      "dest": "identifier: countMatches [201219,201231]"
    },
    {
      "src": "if_statement [231464,231725]",
      "dest": "if_statement [232958,233219]"
    },
    {
      "src": "identifier: str [181972,181975]",
      "dest": "identifier: str [183466,183469]"
    },
    {
      "src": "identifier: startPos [49631,49639]",
      "dest": "identifier: startPos [49631,49639]"
    },
    {
      "src": "comparison_operator: == [149916,149918]",
      "dest": "comparison_operator: == [151410,151412]"
    },
    {
      "src": "logical_operator: || [143317,143319]",
      "dest": "logical_operator: || [144811,144813]"
    },
    {
      "src": "identifier: start [18893,18898]",
      "dest": "identifier: start [18893,18898]"
    },
    {
      "src": "if_statement [84688,84763]",
      "dest": "if_statement [86182,86257]"
    },
    {
      "src": "assignment_expression [117301,117318]",
      "dest": "assignment_expression [118795,118812]"
    },
    {
      "src": "variable_declarator [190655,190676]",
      "dest": "variable_declarator [192149,192170]"
    },
    {
      "src": "identifier: valid [64016,64021]",
      "dest": "identifier: valid [65063,65068]"
    },
    {
      "src": "binary_expression [131435,131449]",
      "dest": "binary_expression [132929,132943]"
    },
    {
      "src": "block_comment:     \n     * <p>Case in-sensitive find of the first index within a String.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfIgnoreCase(null, *)          = -1\n     * StringUtils.indexOfIgnoreCase(*, null)          = -1\n     * StringUtils.indexOfIgnoreCase(\"\", \"\")           = 0\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\") = 1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.5\n     */ [36750,37748]",
      "dest": "block_comment:     \n     * <p>Case in-sensitive find of the first index within a String.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfIgnoreCase(null, *)          = -1\n     * StringUtils.indexOfIgnoreCase(*, null)          = -1\n     * StringUtils.indexOfIgnoreCase(\"\", \"\")           = 0\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"a\")  = 0\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"b\")  = 2\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"ab\") = 1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.5\n     */ [36750,37748]"
    },
    {
      "src": "block [131451,131505]",
      "dest": "block [132945,132999]"
    },
    {
      "src": "increment_operator: ++ [118401,118403]",
      "dest": "increment_operator: ++ [119895,119897]"
    },
    {
      "src": "identifier: end [89511,89514]",
      "dest": "identifier: end [91005,91008]"
    },
    {
      "src": "return_statement [173016,173028]",
      "dest": "return_statement [174510,174522]"
    },
    {
      "src": "identifier: java.util.Iterator [875,893]",
      "dest": "identifier: java.util.Iterator [875,893]"
    },
    {
      "src": "ternary_expression [127714,127784]",
      "dest": "ternary_expression [129208,129278]"
    },
    {
      "src": "affectation_operator: = [185981,185982]",
      "dest": "affectation_operator: = [187475,187476]"
    },
    {
      "src": "binary_expression [161216,161261]",
      "dest": "binary_expression [162710,162755]"
    },
    {
      "src": "type: String [167946,167952]",
      "dest": "type: String [169440,169446]"
    },
    {
      "src": "formal_parameter [89154,89166]",
      "dest": "formal_parameter [90648,90660]"
    },
    {
      "src": "identifier: str [86329,86332]",
      "dest": "identifier: str [87823,87826]"
    },
    {
      "src": "type: String [176579,176585]",
      "dest": "type: String [178073,178079]"
    },
    {
      "src": "decimal_integer_literal: 0 [178202,178203]",
      "dest": "decimal_integer_literal: 0 [179696,179697]"
    },
    {
      "src": "comparison_operator: == [10683,10685]",
      "dest": "comparison_operator: == [10683,10685]"
    },
    {
      "src": "identifier: cs [59634,59636]",
      "dest": "identifier: cs [60021,60023]"
    },
    {
      "src": "block_comment:     \n     * <p>Check if a String starts with a specified prefix.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.startsWith(null, null)      = true\n     * StringUtils.startsWith(null, \"abc\")     = false\n     * StringUtils.startsWith(\"abcdef\", null)  = false\n     * StringUtils.startsWith(\"abcdef\", \"abc\") = true\n     * StringUtils.startsWith(\"ABCDEF\", \"abc\") = false\n     * </pre>\n     *\n     * @see java.lang.String#startsWith(String)\n     * @param str  the String to check, may be null\n     * @param prefix the prefix to find, may be null\n     * @return <code>true</code> if the String starts with the prefix, case sensitive, or\n     *  both <code>null</code>\n     * @since 2.4\n     */ [237185,238040]",
      "dest": "block_comment:     \n     * <p>Check if a String starts with a specified prefix.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.startsWith(null, null)      = true\n     * StringUtils.startsWith(null, \"abc\")     = false\n     * StringUtils.startsWith(\"abcdef\", null)  = false\n     * StringUtils.startsWith(\"abcdef\", \"abc\") = true\n     * StringUtils.startsWith(\"ABCDEF\", \"abc\") = false\n     * </pre>\n     *\n     * @see java.lang.String#startsWith(String)\n     * @param str  the String to check, may be null\n     * @param prefix the prefix to find, may be null\n     * @return <code>true</code> if the String starts with the prefix, case sensitive, or\n     *  both <code>null</code>\n     * @since 2.4\n     */ [238679,239534]"
    },
    {
      "src": "identifier: replace [144662,144669]",
      "dest": "identifier: replace [146156,146163]"
    },
    {
      "src": "null_literal: null [53063,53067]",
      "dest": "null_literal: null [53063,53067]"
    },
    {
      "src": "identifier: str [33460,33463]",
      "dest": "identifier: str [33460,33463]"
    },
    {
      "src": "identifier: removeEndIgnoreCase [143243,143262]",
      "dest": "identifier: removeEndIgnoreCase [144737,144756]"
    },
    {
      "src": "comparison_operator: == [83165,83167]",
      "dest": "comparison_operator: == [84659,84661]"
    },
    {
      "src": "formal_parameter [140254,140264]",
      "dest": "formal_parameter [141748,141758]"
    },
    {
      "src": "type: IllegalArgumentException [233838,233862]",
      "dest": "type: IllegalArgumentException [235332,235356]"
    },
    {
      "src": "return_statement [86349,86360]",
      "dest": "return_statement [87843,87854]"
    },
    {
      "src": "method_invocation [117838,117851]",
      "dest": "method_invocation [119332,119345]"
    },
    {
      "src": "while_statement [150420,150692]",
      "dest": "while_statement [151914,152186]"
    },
    {
      "src": "decimal_integer_literal: 1 [36570,36571]",
      "dest": "decimal_integer_literal: 1 [36570,36571]"
    },
    {
      "src": "variable_declarator [198382,198387]",
      "dest": "variable_declarator [199876,199881]"
    },
    {
      "src": "type: boolean [210116,210123]",
      "dest": "type: boolean [211610,211617]"
    },
    {
      "src": "type: int [209198,209201]",
      "dest": "type: int [210692,210695]"
    },
    {
      "src": "formal_parameter [130732,130744]",
      "dest": "formal_parameter [132226,132238]"
    },
    {
      "src": "object_creation_expression [198316,198341]",
      "dest": "object_creation_expression [199810,199835]"
    },
    {
      "src": "identifier: list [91562,91566]",
      "dest": "identifier: list [93056,93060]"
    },
    {
      "src": "formal_parameter [177947,177957]",
      "dest": "formal_parameter [179441,179451]"
    },
    {
      "src": "identifier: i [162303,162304]",
      "dest": "identifier: i [163797,163798]"
    },
    {
      "src": "parenthesized_expression [91263,91274]",
      "dest": "parenthesized_expression [92757,92768]"
    },
    {
      "src": "method_invocation [53163,53175]",
      "dest": "method_invocation [53163,53175]"
    },
    {
      "src": "identifier: str [174644,174647]",
      "dest": "identifier: str [176138,176141]"
    },
    {
      "src": "modifiers [120397,120410]",
      "dest": "modifiers [121891,121904]"
    },
    {
      "src": "identifier: str [81654,81657]",
      "dest": "identifier: str [83148,83151]"
    },
    {
      "src": "identifier: repeat [178117,178123]",
      "dest": "identifier: repeat [179611,179617]"
    },
    {
      "src": "new: new [134218,134221]",
      "dest": "new: new [135712,135715]"
    },
    {
      "src": "line_comment: // the length of the replace array [155217,155251]",
      "dest": "line_comment: // the length of the replace array [156711,156745]"
    },
    {
      "src": "return_statement [78575,78586]",
      "dest": "return_statement [80069,80080]"
    },
    {
      "src": "null_literal: null [104209,104213]",
      "dest": "null_literal: null [105703,105707]"
    },
    {
      "src": "identifier: searchChars [60856,60867]",
      "dest": "identifier: searchChars [61243,61254]"
    },
    {
      "src": "identifier: repeat [178020,178026]",
      "dest": "identifier: repeat [179514,179520]"
    },
    {
      "src": "binary_expression [75806,75815]",
      "dest": "binary_expression [77300,77309]"
    },
    {
      "src": "type: String [20113,20119]",
      "dest": "type: String [20113,20119]"
    },
    {
      "src": "for_statement [182137,182234]",
      "dest": "for_statement [183631,183728]"
    },
    {
      "src": "identifier: sz [203229,203231]",
      "dest": "identifier: sz [204723,204725]"
    },
    {
      "src": "if_statement [83151,83211]",
      "dest": "if_statement [84645,84705]"
    },
    {
      "src": "binary_expression [159409,159510]",
      "dest": "binary_expression [160903,161004]"
    },
    {
      "src": "decimal_integer_literal: 0 [53204,53205]",
      "dest": "decimal_integer_literal: 0 [53204,53205]"
    },
    {
      "src": "decimal_integer_literal: 0 [174760,174761]",
      "dest": "decimal_integer_literal: 0 [176254,176255]"
    },
    {
      "src": "identifier: builder [222447,222454]",
      "dest": "identifier: builder [223941,223948]"
    },
    {
      "src": "method_invocation [123984,124037]",
      "dest": "method_invocation [125478,125531]"
    },
    {
      "src": "identifier: EMPTY [6003,6008]",
      "dest": "identifier: EMPTY [6003,6008]"
    },
    {
      "src": "identifier: i [235943,235944]",
      "dest": "identifier: i [237437,237438]"
    },
    {
      "src": "identifier: java.util.Locale [925,941]",
      "dest": "identifier: java.util.Locale [925,941]"
    },
    {
      "src": "variable_declarator [159361,159366]",
      "dest": "variable_declarator [160855,160860]"
    },
    {
      "src": "comparison_operator: == [159734,159736]",
      "dest": "comparison_operator: == [161228,161230]"
    },
    {
      "src": "identifier: padding [177939,177946]",
      "dest": "identifier: padding [179433,179440]"
    },
    {
      "src": "decimal_integer_literal: 0 [77352,77353]",
      "dest": "decimal_integer_literal: 0 [78846,78847]"
    },
    {
      "src": "argument_list [219592,219594]",
      "dest": "argument_list [221086,221088]"
    },
    {
      "src": "affectation_operator: = [160449,160450]",
      "dest": "affectation_operator: = [161943,161944]"
    },
    {
      "src": "arithmetic_operator: - [222160,222161]",
      "dest": "arithmetic_operator: - [223654,223655]"
    },
    {
      "src": "method_invocation [196774,196785]",
      "dest": "method_invocation [198268,198279]"
    },
    {
      "src": "formal_parameters [20128,20159]",
      "dest": "formal_parameters [20128,20159]"
    },
    {
      "src": "block [75817,75900]",
      "dest": "block [77311,77394]"
    },
    {
      "src": "identifier: searchStr [39600,39609]",
      "dest": "identifier: searchStr [39600,39609]"
    },
    {
      "src": "parenthesized_expression [130823,130842]",
      "dest": "parenthesized_expression [132317,132336]"
    },
    {
      "src": "comparison_operator: <= [127648,127650]",
      "dest": "comparison_operator: <= [129142,129144]"
    },
    {
      "src": "type: int [162299,162302]",
      "dest": "type: int [163793,163796]"
    },
    {
      "src": "formal_parameters [135321,135359]",
      "dest": "formal_parameters [136815,136853]"
    },
    {
      "src": "identifier: str [138910,138913]",
      "dest": "identifier: str [140404,140407]"
    },
    {
      "src": "type: String [179015,179021]",
      "dest": "type: String [180509,180515]"
    },
    {
      "src": "identifier: max [53157,53160]",
      "dest": "identifier: max [53157,53160]"
    },
    {
      "src": "variable_declarator [57752,57757]",
      "dest": "variable_declarator [54860,54865]"
    },
    {
      "src": "parenthesized_expression [31860,31894]",
      "dest": "parenthesized_expression [31860,31894]"
    },
    {
      "src": "assignment_expression [198420,198438]",
      "dest": "assignment_expression [199914,199932]"
    },
    {
      "src": "binary_expression [233790,233799]",
      "dest": "binary_expression [235284,235293]"
    },
    {
      "src": "identifier: lastIdx [173322,173329]",
      "dest": "identifier: lastIdx [174816,174823]"
    },
    {
      "src": "identifier: trim [10704,10708]",
      "dest": "identifier: trim [10704,10708]"
    },
    {
      "src": "return_statement [235232,235241]",
      "dest": "return_statement [236726,236735]"
    },
    {
      "src": "type: int [183031,183034]",
      "dest": "type: int [184525,184528]"
    },
    {
      "src": "identifier: strLen [196765,196771]",
      "dest": "identifier: strLen [198259,198265]"
    },
    {
      "src": "identifier: length [202050,202056]",
      "dest": "identifier: length [203544,203550]"
    },
    {
      "src": "line_comment: // String.charAt(n) versus toCharArray(), then array[n] [5495,5550]",
      "dest": "line_comment: // String.charAt(n) versus toCharArray(), then array[n] [5495,5550]"
    },
    {
      "src": "formal_parameter [92794,92804]",
      "dest": "formal_parameter [94288,94298]"
    },
    {
      "src": "method_invocation [209207,209218]",
      "dest": "method_invocation [210701,210712]"
    },
    {
      "src": "identifier: indexOf [20554,20561]",
      "dest": "identifier: indexOf [20554,20561]"
    },
    {
      "src": "line_comment: // get java.text.Normalizer.Form class [24215,24253]",
      "dest": "line_comment: // get java.text.Normalizer.Form class [24215,24253]"
    },
    {
      "src": "parenthesized_expression [110802,110811]",
      "dest": "parenthesized_expression [112296,112305]"
    },
    {
      "src": "identifier: replaceChar [163638,163649]",
      "dest": "identifier: replaceChar [165132,165143]"
    },
    {
      "src": "type: int [176609,176612]",
      "dest": "type: int [178103,178106]"
    },
    {
      "src": "identifier: substring [77481,77490]",
      "dest": "identifier: substring [78975,78984]"
    },
    {
      "src": "identifier: cs [186630,186632]",
      "dest": "identifier: cs [188124,188126]"
    },
    {
      "src": "block [173002,173038]",
      "dest": "block [174496,174532]"
    },
    {
      "src": "identifier: next [132990,132994]",
      "dest": "identifier: next [134484,134488]"
    },
    {
      "src": "variable_declarator [170216,170242]",
      "dest": "variable_declarator [171710,171736]"
    },
    {
      "src": "identifier: remove [140319,140325]",
      "dest": "identifier: remove [141813,141819]"
    },
    {
      "src": "identifier: charAt [204478,204484]",
      "dest": "identifier: charAt [205972,205978]"
    },
    {
      "src": "block [161892,161968]",
      "dest": "block [163386,163462]"
    },
    {
      "src": "binary_expression [168023,168034]",
      "dest": "binary_expression [169517,169528]"
    },
    {
      "src": "identifier: str [109645,109648]",
      "dest": "identifier: str [111139,111142]"
    },
    {
      "src": ":: : [155300,155301]",
      "dest": ":: : [156794,156795]"
    },
    {
      "src": "block [59569,59606]",
      "dest": "block [59956,59993]"
    },
    {
      "src": "binary_expression [175321,175335]",
      "dest": "binary_expression [176815,176829]"
    },
    {
      "src": "return_statement [51956,51991]",
      "dest": "return_statement [51956,51991]"
    },
    {
      "src": "line_comment: // two or more elements [134166,134189]",
      "dest": "line_comment: // two or more elements [135660,135683]"
    },
    {
      "src": "identifier: i [160511,160512]",
      "dest": "identifier: i [162005,162006]"
    },
    {
      "src": "affectation_operator: = [185508,185509]",
      "dest": "affectation_operator: = [187002,187003]"
    },
    {
      "src": "identifier: searchChars [57804,57815]",
      "dest": "identifier: searchChars [54909,54920]"
    },
    {
      "src": "parenthesized_expression [127603,127626]",
      "dest": "parenthesized_expression [129097,129120]"
    },
    {
      "src": "comparison_operator: == [211208,211210]",
      "dest": "comparison_operator: == [212702,212704]"
    },
    {
      "src": "expression_statement [227759,227778]",
      "dest": "expression_statement [229253,229272]"
    },
    {
      "src": "if_statement [137235,137340]",
      "dest": "if_statement [138729,138834]"
    },
    {
      "src": "decimal_integer_literal: 0 [150264,150265]",
      "dest": "decimal_integer_literal: 0 [151758,151759]"
    },
    {
      "src": "static: static [89098,89104]",
      "dest": "static: static [90592,90598]"
    },
    {
      "src": "identifier: str [78626,78629]",
      "dest": "identifier: str [80120,80123]"
    },
    {
      "src": "identifier: padStr [185744,185750]",
      "dest": "identifier: padStr [187238,187244]"
    },
    {
      "src": "binary_expression [18863,18919]",
      "dest": "binary_expression [18863,18919]"
    },
    {
      "src": "type: ArrayList<String> [110671,110688]",
      "dest": "type: ArrayList<String> [112165,112182]"
    },
    {
      "src": "method_declaration [42205,42413]",
      "dest": "method_declaration [42205,42413]"
    },
    {
      "src": "expression_statement [131469,131491]",
      "dest": "expression_statement [132963,132985]"
    },
    {
      "src": "modifiers [12609,12622]",
      "dest": "modifiers [12609,12622]"
    },
    {
      "src": "identifier: tempIndex [159609,159618]",
      "dest": "identifier: tempIndex [161103,161112]"
    },
    {
      "src": "argument_list [161259,161261]",
      "dest": "argument_list [162753,162755]"
    },
    {
      "src": "block [223793,223829]",
      "dest": "block [225287,225323]"
    },
    {
      "src": "identifier: textIndex [162068,162077]",
      "dest": "identifier: textIndex [163562,163571]"
    },
    {
      "src": "formal_parameter [52991,53001]",
      "dest": "formal_parameter [52991,53001]"
    },
    {
      "src": "logical_operator: || [161579,161581]",
      "dest": "logical_operator: || [163073,163075]"
    },
    {
      "src": "parenthesized_expression [69762,69797]",
      "dest": "parenthesized_expression [71256,71291]"
    },
    {
      "src": "argument_list [135448,135480]",
      "dest": "argument_list [136942,136974]"
    },
    {
      "src": "identifier: endOffset [222476,222485]",
      "dest": "identifier: endOffset [223970,223979]"
    },
    {
      "src": "argument_list [57726,57729]",
      "dest": "argument_list [54834,54837]"
    },
    {
      "src": "local_variable_declaration [168446,168463]",
      "dest": "local_variable_declaration [169940,169957]"
    },
    {
      "src": "identifier: charAt [61077,61083]",
      "dest": "identifier: charAt [61536,61542]"
    },
    {
      "src": "identifier: ObjectUtils [132647,132658]",
      "dest": "identifier: ObjectUtils [134141,134152]"
    },
    {
      "src": "type: int [222136,222139]",
      "dest": "type: int [223630,223633]"
    },
    {
      "src": "identifier: str [173060,173063]",
      "dest": "identifier: str [174554,174557]"
    },
    {
      "src": "true: true [103217,103221]",
      "dest": "true: true [104711,104715]"
    },
    {
      "src": "identifier: searchChars [60795,60806]",
      "dest": "identifier: searchChars [61182,61193]"
    },
    {
      "src": "null_literal: null [165684,165688]",
      "dest": "null_literal: null [167178,167182]"
    },
    {
      "src": "identifier: len [105898,105901]",
      "dest": "identifier: len [107392,107395]"
    },
    {
      "src": "block_comment:     \n     * <p>Compares two CharSequences, returning <code>true</code> if they are equal.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * @see java.lang.String#equals(Object)\n     * @param cs1  the first CharSequence, may be null\n     * @param cs2  the second CharSequence, may be null\n     * @return <code>true</code> if the CharSequences are equal, case sensitive, or\n     *  both <code>null</code>\n     */ [26577,27400]",
      "dest": "block_comment:     \n     * <p>Compares two CharSequences, returning <code>true</code> if they are equal.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equals(null, null)   = true\n     * StringUtils.equals(null, \"abc\")  = false\n     * StringUtils.equals(\"abc\", null)  = false\n     * StringUtils.equals(\"abc\", \"abc\") = true\n     * StringUtils.equals(\"abc\", \"ABC\") = false\n     * </pre>\n     *\n     * @see java.lang.String#equals(Object)\n     * @param cs1  the first CharSequence, may be null\n     * @param cs2  the second CharSequence, may be null\n     * @return <code>true</code> if the CharSequences are equal, case sensitive, or\n     *  both <code>null</code>\n     */ [26577,27400]"
    },
    {
      "src": "formal_parameters [65137,65173]",
      "dest": "formal_parameters [66184,66220]"
    },
    {
      "src": "return_statement [43424,43447]",
      "dest": "return_statement [43424,43447]"
    },
    {
      "src": "identifier: splitByCharacterType [122094,122114]",
      "dest": "identifier: splitByCharacterType [123588,123608]"
    },
    {
      "src": "method_invocation [117072,117085]",
      "dest": "method_invocation [118566,118579]"
    },
    {
      "src": "unary_expression [160118,160120]",
      "dest": "unary_expression [161612,161614]"
    },
    {
      "src": "identifier: defaultStr [213881,213891]",
      "dest": "identifier: defaultStr [215375,215385]"
    },
    {
      "src": "local_variable_declaration [202038,202059]",
      "dest": "local_variable_declaration [203532,203553]"
    },
    {
      "src": "identifier: ch [198478,198480]",
      "dest": "identifier: ch [199972,199974]"
    },
    {
      "src": "identifier: str [214552,214555]",
      "dest": "identifier: str [216046,216049]"
    },
    {
      "src": "method_invocation [36455,36492]",
      "dest": "method_invocation [36455,36492]"
    },
    {
      "src": "identifier: end [75597,75600]",
      "dest": "identifier: end [77091,77094]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [36178,36193]",
      "dest": "identifier: INDEX_NOT_FOUND [36178,36193]"
    },
    {
      "src": "identifier: ArrayUtils [116693,116703]",
      "dest": "identifier: ArrayUtils [118187,118197]"
    },
    {
      "src": "method_invocation [124137,124195]",
      "dest": "method_invocation [125631,125689]"
    },
    {
      "src": "modifiers [66388,66401]",
      "dest": "modifiers [67435,67448]"
    },
    {
      "src": "visibility: public [224926,224932]",
      "dest": "visibility: public [226420,226426]"
    },
    {
      "src": "argument_list [184028,184030]",
      "dest": "argument_list [185522,185524]"
    },
    {
      "src": "formal_parameter [185283,185293]",
      "dest": "formal_parameter [186777,186787]"
    },
    {
      "src": "binary_expression [175622,175632]",
      "dest": "binary_expression [177116,177126]"
    },
    {
      "src": "identifier: indexOfAny [69705,69715]",
      "dest": "identifier: indexOfAny [71199,71209]"
    },
    {
      "src": "identifier: stringPos [228455,228464]",
      "dest": "identifier: stringPos [229949,229958]"
    },
    {
      "src": "return_statement [180010,180022]",
      "dest": "return_statement [181504,181516]"
    },
    {
      "src": "type: List<String> [116742,116754]",
      "dest": "type: List<String> [118236,118248]"
    },
    {
      "src": "local_variable_declaration [205796,205806]",
      "dest": "local_variable_declaration [207290,207300]"
    },
    {
      "src": "type: int [57580,57583]",
      "dest": "type: int [57920,57923]"
    },
    {
      "src": "expression_statement [118258,118270]",
      "dest": "expression_statement [119752,119764]"
    },
    {
      "src": "identifier: charAt [173242,173248]",
      "dest": "identifier: charAt [174736,174742]"
    },
    {
      "src": "if_statement [23029,23115]",
      "dest": "if_statement [23029,23115]"
    },
    {
      "src": "identifier: beg [105960,105963]",
      "dest": "identifier: beg [107454,107457]"
    },
    {
      "src": "ternary_expression [150300,150336]",
      "dest": "ternary_expression [151794,151830]"
    },
    {
      "src": "null_literal: null [127538,127542]",
      "dest": "null_literal: null [129032,129036]"
    },
    {
      "src": "identifier: replaceChars [165554,165566]",
      "dest": "identifier: replaceChars [167048,167060]"
    },
    {
      "src": "new: new [26230,26233]",
      "dest": "new: new [26230,26233]"
    },
    {
      "src": "identifier: max [96826,96829]",
      "dest": "identifier: max [98320,98323]"
    },
    {
      "src": "comparison_operator: == [28529,28531]",
      "dest": "comparison_operator: == [28529,28531]"
    },
    {
      "src": "visibility: public [113271,113277]",
      "dest": "visibility: public [114765,114771]"
    },
    {
      "src": "identifier: i [205875,205876]",
      "dest": "identifier: i [207369,207370]"
    },
    {
      "src": "?: ? [150325,150326]",
      "dest": "?: ? [151819,151820]"
    },
    {
      "src": "identifier: i [61045,61046]",
      "dest": "identifier: i [61504,61505]"
    },
    {
      "src": "decimal_integer_literal: 0 [116841,116842]",
      "dest": "decimal_integer_literal: 0 [118335,118336]"
    },
    {
      "src": "identifier: end [106340,106343]",
      "dest": "identifier: end [107834,107837]"
    },
    {
      "src": "logical_operator: && [123652,123654]",
      "dest": "logical_operator: && [125146,125148]"
    },
    {
      "src": "formal_parameter [59497,59512]",
      "dest": "formal_parameter [59890,59899]"
    },
    {
      "src": "identifier: length [126243,126249]",
      "dest": "identifier: length [127737,127743]"
    },
    {
      "src": "identifier: pos [123502,123505]",
      "dest": "identifier: pos [124996,124999]"
    },
    {
      "src": "affectation_operator: = [72011,72012]",
      "dest": "affectation_operator: = [73505,73506]"
    },
    {
      "src": "return_statement [184069,184080]",
      "dest": "return_statement [185563,185574]"
    },
    {
      "src": "method_invocation [49589,49607]",
      "dest": "method_invocation [49589,49607]"
    },
    {
      "src": "method_invocation [68182,68226]",
      "dest": "method_invocation [69676,69720]"
    },
    {
      "src": "identifier: buf [127814,127817]",
      "dest": "identifier: buf [129308,129311]"
    },
    {
      "src": "\": \" [26093,26094]",
      "dest": "\": \" [26093,26094]"
    },
    {
      "src": "local_variable_declaration [206959,206969]",
      "dest": "local_variable_declaration [208453,208463]"
    },
    {
      "src": "binary_expression [158270,158297]",
      "dest": "binary_expression [159764,159791]"
    },
    {
      "src": "block_comment:     \n     * <p>Joins the elements of the provided <code>Iterator</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterator  the <code>Iterator</code> of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, <code>null</code> if null iterator input\n     */ [133129,133741]",
      "dest": "block_comment:     \n     * <p>Joins the elements of the provided <code>Iterator</code> into\n     * a single String containing the provided elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n     *\n     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n     *\n     * @param iterator  the <code>Iterator</code> of values to join together, may be null\n     * @param separator  the separator character to use, null treated as \"\"\n     * @return the joined String, <code>null</code> if null iterator input\n     */ [134623,135235]"
    },
    {
      "src": "variable_declarator [89277,89302]",
      "dest": "variable_declarator [90771,90796]"
    },
    {
      "src": "comparison_operator: < [160456,160457]",
      "dest": "comparison_operator: < [161950,161951]"
    },
    {
      "src": "parenthesized_expression [198203,198248]",
      "dest": "parenthesized_expression [199697,199742]"
    },
    {
      "src": "type: String [190463,190469]",
      "dest": "type: String [191957,191963]"
    },
    {
      "src": "modifiers [183863,183876]",
      "dest": "modifiers [185357,185370]"
    },
    {
      "src": "identifier: isAlpha [200832,200839]",
      "dest": "identifier: isAlpha [202326,202333]"
    },
    {
      "src": "identifier: length [222049,222055]",
      "dest": "identifier: length [223543,223549]"
    },
    {
      "src": "type: int [127485,127488]",
      "dest": "type: int [128979,128982]"
    },
    {
      "src": "method_invocation [198506,198531]",
      "dest": "method_invocation [200000,200025]"
    },
    {
      "src": "arithmetic_operator: - [222269,222270]",
      "dest": "arithmetic_operator: - [223763,223764]"
    },
    {
      "src": "if_statement [144574,144646]",
      "dest": "if_statement [146068,146140]"
    },
    {
      "src": "block [65174,65324]",
      "dest": "block [66221,66371]"
    },
    {
      "src": "type: String [149819,149825]",
      "dest": "type: String [151313,151319]"
    },
    {
      "src": "method_declaration [169891,170545]",
      "dest": "method_declaration [171385,172039]"
    },
    {
      "src": "logical_operator: || [210181,210183]",
      "dest": "logical_operator: || [211675,211677]"
    },
    {
      "src": "null_literal: null [23944,23948]",
      "dest": "null_literal: null [23944,23948]"
    },
    {
      "src": "block [217356,217408]",
      "dest": "block [218850,218902]"
    },
    {
      "src": "binary_expression [198204,198215]",
      "dest": "binary_expression [199698,199709]"
    },
    {
      "src": "identifier: strs [22973,22977]",
      "dest": "identifier: strs [22973,22977]"
    },
    {
      "src": "block [47786,47955]",
      "dest": "block [47786,47955]"
    },
    {
      "src": "identifier: str [17141,17144]",
      "dest": "identifier: str [17141,17144]"
    },
    {
      "src": "identifier: buf [178240,178243]",
      "dest": "identifier: buf [179734,179737]"
    },
    {
      "src": "new: new [123993,123996]",
      "dest": "new: new [125487,125490]"
    },
    {
      "src": "identifier: suffix [244428,244434]",
      "dest": "identifier: suffix [245922,245928]"
    },
    {
      "src": "expression_statement [166187,166226]",
      "dest": "expression_statement [167681,167720]"
    },
    {
      "src": "identifier: i [206978,206979]",
      "dest": "identifier: i [208472,208473]"
    },
    {
      "src": "block [163678,163714]",
      "dest": "block [165172,165208]"
    },
    {
      "src": "affectation_operator: = [236246,236247]",
      "dest": "affectation_operator: = [237740,237741]"
    },
    {
      "src": "static: static [244045,244051]",
      "dest": "static: static [245539,245545]"
    },
    {
      "src": "local_variable_declaration [66718,66728]",
      "dest": "local_variable_declaration [67837,67847]"
    },
    {
      "src": "formal_parameter [63768,63780]",
      "dest": "formal_parameter [64815,64827]"
    },
    {
      "src": "type: int [217342,217345]",
      "dest": "type: int [218836,218839]"
    },
    {
      "src": "identifier: searchList [161770,161780]",
      "dest": "identifier: searchList [163264,163274]"
    },
    {
      "src": "identifier: str [89182,89185]",
      "dest": "identifier: str [90676,90679]"
    },
    {
      "src": "variable_declarator [235876,235880]",
      "dest": "variable_declarator [237370,237374]"
    },
    {
      "src": "local_variable_declaration [83220,83253]",
      "dest": "local_variable_declaration [84714,84747]"
    },
    {
      "src": "argument_list [30751,30756]",
      "dest": "argument_list [30751,30756]"
    },
    {
      "src": "expression_statement [104872,104896]",
      "dest": "expression_statement [106366,106390]"
    },
    {
      "src": "if_statement [174421,174474]",
      "dest": "if_statement [175915,175968]"
    },
    {
      "src": "object_creation_expression [186180,186199]",
      "dest": "object_creation_expression [187674,187693]"
    },
    {
      "src": "affectation_operator: = [86457,86458]",
      "dest": "affectation_operator: = [87951,87952]"
    },
    {
      "src": "arithmetic_operator: + [236272,236273]",
      "dest": "arithmetic_operator: + [237766,237767]"
    },
    {
      "src": "identifier: replacementList [161163,161178]",
      "dest": "identifier: replacementList [162657,162672]"
    },
    {
      "src": "type: boolean [239769,239776]",
      "dest": "type: boolean [241263,241270]"
    },
    {
      "src": "comparison_operator: < [165948,165949]",
      "dest": "comparison_operator: < [167442,167443]"
    },
    {
      "src": "type: int [91143,91146]",
      "dest": "type: int [92637,92640]"
    },
    {
      "src": "binary_expression [117018,117025]",
      "dest": "binary_expression [118512,118519]"
    },
    {
      "src": "if_statement [62334,62423]",
      "dest": "if_statement [63073,63162]"
    },
    {
      "src": "arithmetic_operator: - [219752,219753]",
      "dest": "arithmetic_operator: - [221246,221247]"
    },
    {
      "src": "new: new [196854,196857]",
      "dest": "new: new [198348,198351]"
    },
    {
      "src": "visibility: private [6238,6245]",
      "dest": "visibility: private [6238,6245]"
    },
    {
      "src": "method_invocation [143320,143335]",
      "dest": "method_invocation [144814,144829]"
    },
    {
      "src": "return_statement [194557,194569]",
      "dest": "return_statement [196051,196063]"
    },
    {
      "src": "block [24197,25183]",
      "dest": "block [24197,25183]"
    },
    {
      "src": "identifier: pos [79859,79862]",
      "dest": "identifier: pos [81353,81356]"
    },
    {
      "src": "comparison_operator: == [14740,14742]",
      "dest": "comparison_operator: == [14740,14742]"
    },
    {
      "src": "identifier: i [119227,119228]",
      "dest": "identifier: i [120721,120722]"
    },
    {
      "src": "modifiers [169891,169904]",
      "dest": "modifiers [171385,171398]"
    },
    {
      "src": "type: String [87715,87721]",
      "dest": "type: String [89209,89215]"
    },
    {
      "src": "block [137059,137094]",
      "dest": "block [138553,138588]"
    },
    {
      "src": "binary_expression [222204,222217]",
      "dest": "binary_expression [223698,223711]"
    },
    {
      "src": "comparison_operator: == [150585,150587]",
      "dest": "comparison_operator: == [152079,152081]"
    },
    {
      "src": "argument_list [64101,64112]",
      "dest": "argument_list [65148,65159]"
    },
    {
      "src": "local_variable_declaration [222186,222232]",
      "dest": "local_variable_declaration [223680,223726]"
    },
    {
      "src": "arithmetic_operator: + [189120,189121]",
      "dest": "arithmetic_operator: + [190614,190615]"
    },
    {
      "src": "comparison_operator: == [123077,123079]",
      "dest": "comparison_operator: == [124571,124573]"
    },
    {
      "src": "type: String [14691,14697]",
      "dest": "type: String [14691,14697]"
    },
    {
      "src": "block [75602,76283]",
      "dest": "block [77096,77777]"
    },
    {
      "src": "line_comment: // Whitespace: [5311,5325]",
      "dest": "line_comment: // Whitespace: [5311,5325]"
    },
    {
      "src": "identifier: type [123475,123479]",
      "dest": "identifier: type [124969,124973]"
    },
    {
      "src": "method_invocation [118151,118174]",
      "dest": "method_invocation [119645,119668]"
    },
    {
      "src": "identifier: startIndex [130720,130730]",
      "dest": "identifier: startIndex [132214,132224]"
    },
    {
      "src": "identifier: remove [144530,144536]",
      "dest": "identifier: remove [146024,146030]"
    },
    {
      "src": "formal_parameters [95159,95194]",
      "dest": "formal_parameters [96653,96688]"
    },
    {
      "src": "block [115503,115570]",
      "dest": "block [116997,117064]"
    },
    {
      "src": "identifier: str [10700,10703]",
      "dest": "identifier: str [10700,10703]"
    },
    {
      "src": "expression_statement [150465,150524]",
      "dest": "expression_statement [151959,152018]"
    },
    {
      "src": "identifier: padStr [181908,181914]",
      "dest": "identifier: padStr [183402,183408]"
    },
    {
      "src": "return_statement [63981,63993]",
      "dest": "return_statement [65028,65040]"
    },
    {
      "src": "new: new [195639,195642]",
      "dest": "new: new [197133,197136]"
    },
    {
      "src": "identifier: EMPTY_STRING_ARRAY [110609,110627]",
      "dest": "identifier: EMPTY_STRING_ARRAY [112103,112121]"
    },
    {
      "src": "formal_parameters [213871,213892]",
      "dest": "formal_parameters [215365,215386]"
    },
    {
      "src": "local_variable_declaration [185532,185557]",
      "dest": "local_variable_declaration [187026,187051]"
    },
    {
      "src": "identifier: strs [231440,231444]",
      "dest": "identifier: strs [232934,232938]"
    },
    {
      "src": "formal_parameters [167960,168008]",
      "dest": "formal_parameters [169454,169502]"
    },
    {
      "src": "null_literal: null [68124,68128]",
      "dest": "null_literal: null [69618,69622]"
    },
    {
      "src": "affectation_operator: = [104610,104611]",
      "dest": "affectation_operator: = [106104,106105]"
    },
    {
      "src": "type: String [145842,145848]",
      "dest": "type: String [147336,147342]"
    },
    {
      "src": "arithmetic_operator: / [222281,222282]",
      "dest": "arithmetic_operator: / [223775,223776]"
    },
    {
      "src": "identifier: i [203218,203219]",
      "dest": "identifier: i [204712,204713]"
    },
    {
      "src": "binary_expression [131187,131304]",
      "dest": "binary_expression [132681,132798]"
    },
    {
      "src": "comparison_operator: == [69789,69791]",
      "dest": "comparison_operator: == [71283,71285]"
    },
    {
      "src": "static: static [66395,66401]",
      "dest": "static: static [67442,67448]"
    },
    {
      "src": "method_invocation [198456,198481]",
      "dest": "method_invocation [199950,199975]"
    },
    {
      "src": "binary_expression [168307,168314]",
      "dest": "binary_expression [169801,169808]"
    },
    {
      "src": "null_literal: null [204291,204295]",
      "dest": "null_literal: null [205785,205789]"
    },
    {
      "src": "type: int [167989,167992]",
      "dest": "type: int [169483,169486]"
    },
    {
      "src": "null_literal: null [134547,134551]",
      "dest": "null_literal: null [136041,136045]"
    },
    {
      "src": "identifier: str [123235,123238]",
      "dest": "identifier: str [124729,124732]"
    },
    {
      "src": "decimal_integer_literal: 0 [49642,49643]",
      "dest": "decimal_integer_literal: 0 [49642,49643]"
    },
    {
      "src": "identifier: prefix [239761,239767]",
      "dest": "identifier: prefix [241255,241261]"
    },
    {
      "src": "affectation_operator: = [235471,235472]",
      "dest": "affectation_operator: = [236965,236966]"
    },
    {
      "src": "identifier: end [91524,91527]",
      "dest": "identifier: end [93018,93021]"
    },
    {
      "src": "comparison_operator: == [104275,104277]",
      "dest": "comparison_operator: == [105769,105771]"
    },
    {
      "src": "local_variable_declaration [137103,137125]",
      "dest": "local_variable_declaration [138597,138619]"
    },
    {
      "src": "argument_list [127963,127974]",
      "dest": "argument_list [129457,129468]"
    },
    {
      "src": "identifier: trim [11682,11686]",
      "dest": "identifier: trim [11682,11686]"
    },
    {
      "src": "affectation_operator: = [39803,39804]",
      "dest": "affectation_operator: = [39803,39804]"
    },
    {
      "src": "identifier: maxWidth [220238,220246]",
      "dest": "identifier: maxWidth [221732,221740]"
    },
    {
      "src": "update_expression [118266,118269]",
      "dest": "update_expression [119760,119763]"
    },
    {
      "src": "static: static [221863,221869]",
      "dest": "static: static [223357,223363]"
    },
    {
      "src": "increment_operator: ++ [54811,54813]",
      "dest": "increment_operator: ++ [58118,58120]"
    },
    {
      "src": "modifiers [79717,79730]",
      "dest": "modifiers [81211,81224]"
    },
    {
      "src": "identifier: at [223842,223844]",
      "dest": "identifier: at [225336,225338]"
    },
    {
      "src": "identifier: match [119140,119145]",
      "dest": "identifier: match [120634,120639]"
    },
    {
      "src": "identifier: strLen [8691,8697]",
      "dest": "identifier: strLen [8691,8697]"
    },
    {
      "src": "argument_list [10708,10710]",
      "dest": "argument_list [10708,10710]"
    },
    {
      "src": "type: String [20141,20147]",
      "dest": "type: String [20141,20147]"
    },
    {
      "src": "identifier: str [73621,73624]",
      "dest": "identifier: str [75115,75118]"
    },
    {
      "src": "binary_expression [158474,158532]",
      "dest": "binary_expression [159968,160026]"
    },
    {
      "src": "argument_list [138751,138759]",
      "dest": "argument_list [140245,140253]"
    },
    {
      "src": "type: char [30699,30703]",
      "dest": "type: char [30699,30703]"
    },
    {
      "src": "argument_list [90915,90917]",
      "dest": "argument_list [92409,92411]"
    },
    {
      "src": "argument_list [184190,184226]",
      "dest": "argument_list [185684,185720]"
    },
    {
      "src": "method_invocation [86533,86545]",
      "dest": "method_invocation [88027,88039]"
    },
    {
      "src": "return_statement [148320,148372]",
      "dest": "return_statement [149814,149866]"
    },
    {
      "src": "static: static [204219,204225]",
      "dest": "static: static [205713,205719]"
    },
    {
      "src": "identifier: n [236071,236072]",
      "dest": "identifier: n [237565,237566]"
    },
    {
      "src": "method_invocation [140295,140307]",
      "dest": "method_invocation [141789,141801]"
    },
    {
      "src": "variable_declarator [173185,173216]",
      "dest": "variable_declarator [174679,174710]"
    },
    {
      "src": "identifier: cs [204475,204477]",
      "dest": "identifier: cs [205969,205971]"
    },
    {
      "src": "binary_expression [71817,71850]",
      "dest": "binary_expression [73311,73344]"
    },
    {
      "src": "formal_parameter [185305,185318]",
      "dest": "formal_parameter [186799,186812]"
    },
    {
      "src": "type: CharSequence [206835,206847]",
      "dest": "type: CharSequence [208329,208341]"
    },
    {
      "src": "identifier: toLowerCase [193782,193793]",
      "dest": "identifier: toLowerCase [195276,195287]"
    },
    {
      "src": "identifier: i [202145,202146]",
      "dest": "identifier: i [203639,203640]"
    },
    {
      "src": "argument_list [39909,39911]",
      "dest": "argument_list [39909,39911]"
    },
    {
      "src": "visibility: public [66388,66394]",
      "dest": "visibility: public [67435,67441]"
    },
    {
      "src": "argument_list [36470,36492]",
      "dest": "argument_list [36470,36492]"
    },
    {
      "src": "identifier: buf [131469,131472]",
      "dest": "identifier: buf [132963,132966]"
    },
    {
      "src": "update_expression [205815,205818]",
      "dest": "update_expression [207309,207312]"
    },
    {
      "src": "parenthesized_expression [168244,168257]",
      "dest": "parenthesized_expression [169738,169751]"
    },
    {
      "src": "arithmetic_operator: - [160649,160650]",
      "dest": "arithmetic_operator: - [162143,162144]"
    },
    {
      "src": "identifier: increase [160981,160989]",
      "dest": "identifier: increase [162475,162483]"
    },
    {
      "src": "return_statement [53350,53363]",
      "dest": "return_statement [53350,53363]"
    },
    {
      "src": "if_statement [66470,66545]",
      "dest": "if_statement [67517,67592]"
    },
    {
      "src": "argument_list [86564,86566]",
      "dest": "argument_list [88058,88060]"
    },
    {
      "src": "return_statement [168531,168736]",
      "dest": "return_statement [170025,170230]"
    },
    {
      "src": "identifier: ch [61069,61071]",
      "dest": "identifier: ch [61528,61530]"
    },
    {
      "src": "identifier: str [179983,179986]",
      "dest": "identifier: str [181477,181480]"
    },
    {
      "src": "identifier: str [188853,188856]",
      "dest": "identifier: str [190347,190350]"
    },
    {
      "src": "identifier: regionMatches [239999,240012]",
      "dest": "identifier: regionMatches [241493,241506]"
    },
    {
      "src": "binary_expression [225084,225110]",
      "dest": "binary_expression [226578,226604]"
    },
    {
      "src": "identifier: StringUtils [5230,5241]",
      "dest": "identifier: StringUtils [5230,5241]"
    },
    {
      "src": "logical_operator: || [233800,233802]",
      "dest": "logical_operator: || [235294,235296]"
    },
    {
      "src": "type: String [51844,51850]",
      "dest": "type: String [51844,51850]"
    },
    {
      "src": "parenthesized_expression [123764,123793]",
      "dest": "parenthesized_expression [125258,125287]"
    },
    {
      "src": "identifier: replacementList [152627,152642]",
      "dest": "identifier: replacementList [154121,154136]"
    },
    {
      "src": "identifier: start [89385,89390]",
      "dest": "identifier: start [90879,90884]"
    },
    {
      "src": "decimal_integer_literal: 0 [205804,205805]",
      "dest": "decimal_integer_literal: 0 [207298,207299]"
    },
    {
      "src": "formal_parameter [62304,62322]",
      "dest": "formal_parameter [63043,63061]"
    },
    {
      "src": "identifier: remove [141637,141643]",
      "dest": "identifier: remove [143131,143137]"
    },
    {
      "src": "expression_statement [124055,124072]",
      "dest": "expression_statement [125549,125566]"
    },
    {
      "src": "decimal_integer_literal: 4 [219902,219903]",
      "dest": "decimal_integer_literal: 4 [221396,221397]"
    },
    {
      "src": "binary_expression [131078,131099]",
      "dest": "binary_expression [132572,132593]"
    },
    {
      "src": "for_statement [236058,236313]",
      "dest": "for_statement [237552,237807]"
    },
    {
      "src": "formal_parameter [104063,104070]",
      "dest": "formal_parameter [105557,105564]"
    },
    {
      "src": "local_variable_declaration [180041,180072]",
      "dest": "local_variable_declaration [181535,181566]"
    },
    {
      "src": "decimal_integer_literal: 0 [91415,91416]",
      "dest": "decimal_integer_literal: 0 [92909,92910]"
    },
    {
      "src": "identifier: startIndex [127720,127730]",
      "dest": "identifier: startIndex [129214,129224]"
    },
    {
      "src": "if_statement [190510,190575]",
      "dest": "if_statement [192004,192069]"
    },
    {
      "src": "block [203238,203361]",
      "dest": "block [204732,204855]"
    },
    {
      "src": "increment_operator: ++ [23201,23203]",
      "dest": "increment_operator: ++ [23201,23203]"
    },
    {
      "src": "variable_declarator [86453,86485]",
      "dest": "variable_declarator [87947,87979]"
    },
    {
      "src": "identifier: remove [140446,140452]",
      "dest": "identifier: remove [141940,141946]"
    },
    {
      "src": "type: int [235537,235540]",
      "dest": "type: int [237031,237034]"
    },
    {
      "src": "variable_declarator [132741,132769]",
      "dest": "variable_declarator [134235,134263]"
    },
    {
      "src": "block [186634,186677]",
      "dest": "block [188128,188171]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits a String by Character type as returned by\n     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n     * characters of the same type are returned as complete tokens. \n     * <pre>\n     * StringUtils.splitByCharacterType(null)         = null\n     * StringUtils.splitByCharacterType(\"\")           = []\n     * StringUtils.splitByCharacterType(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n     * StringUtils.splitByCharacterType(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n     * StringUtils.splitByCharacterType(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n     * StringUtils.splitByCharacterType(\"number5\")    = [\"number\", \"5\"]\n     * StringUtils.splitByCharacterType(\"fooBar\")     = [\"foo\", \"B\", \"ar\"]\n     * StringUtils.splitByCharacterType(\"foo200Bar\")  = [\"foo\", \"200\", \"B\", \"ar\"]\n     * StringUtils.splitByCharacterType(\"ASFRules\")   = [\"ASFR\", \"ules\"]\n     * </pre>\n     * @param str the String to split, may be <code>null</code>\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.4\n     */ [119307,120392]",
      "dest": "block_comment:     \n     * <p>Splits a String by Character type as returned by\n     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n     * characters of the same type are returned as complete tokens. \n     * <pre>\n     * StringUtils.splitByCharacterType(null)         = null\n     * StringUtils.splitByCharacterType(\"\")           = []\n     * StringUtils.splitByCharacterType(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n     * StringUtils.splitByCharacterType(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n     * StringUtils.splitByCharacterType(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n     * StringUtils.splitByCharacterType(\"number5\")    = [\"number\", \"5\"]\n     * StringUtils.splitByCharacterType(\"fooBar\")     = [\"foo\", \"B\", \"ar\"]\n     * StringUtils.splitByCharacterType(\"foo200Bar\")  = [\"foo\", \"200\", \"B\", \"ar\"]\n     * StringUtils.splitByCharacterType(\"ASFRules\")   = [\"ASFR\", \"ules\"]\n     * </pre>\n     * @param str the String to split, may be <code>null</code>\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.4\n     */ [120801,121886]"
    },
    {
      "src": "block [39401,40003]",
      "dest": "block [39401,40003]"
    },
    {
      "src": "identifier: str [31861,31864]",
      "dest": "identifier: str [31861,31864]"
    },
    {
      "src": "local_variable_declaration [127589,127627]",
      "dest": "local_variable_declaration [129083,129121]"
    },
    {
      "src": "method_invocation [20543,20582]",
      "dest": "method_invocation [20543,20582]"
    },
    {
      "src": "type: String [143275,143281]",
      "dest": "type: String [144769,144775]"
    },
    {
      "src": "identifier: str [140489,140492]",
      "dest": "identifier: str [141983,141986]"
    },
    {
      "src": "block [26048,26177]",
      "dest": "block [26048,26177]"
    },
    {
      "src": "binary_expression [8725,8752]",
      "dest": "binary_expression [8725,8752]"
    },
    {
      "src": "method_invocation [132933,132954]",
      "dest": "method_invocation [134427,134448]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets the String that is nested in between two instances of the\n     * same String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> tag returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.substringBetween(null, *)            = null\n     * StringUtils.substringBetween(\"\", \"\")             = \"\"\n     * StringUtils.substringBetween(\"\", \"tag\")          = null\n     * StringUtils.substringBetween(\"tagabctag\", null)  = null\n     * StringUtils.substringBetween(\"tagabctag\", \"\")    = \"\"\n     * StringUtils.substringBetween(\"tagabctag\", \"tag\") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String containing the substring, may be null\n     * @param tag  the String before and after the substring, may be null\n     * @return the substring, <code>null</code> if no match\n     * @since 2.0\n     */ [86777,87660]",
      "dest": "block_comment:     \n     * <p>Gets the String that is nested in between two instances of the\n     * same String.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> tag returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.substringBetween(null, *)            = null\n     * StringUtils.substringBetween(\"\", \"\")             = \"\"\n     * StringUtils.substringBetween(\"\", \"tag\")          = null\n     * StringUtils.substringBetween(\"tagabctag\", null)  = null\n     * StringUtils.substringBetween(\"tagabctag\", \"\")    = \"\"\n     * StringUtils.substringBetween(\"tagabctag\", \"tag\") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String containing the substring, may be null\n     * @param tag  the String before and after the substring, may be null\n     * @return the substring, <code>null</code> if no match\n     * @since 2.0\n     */ [88271,89154]"
    },
    {
      "src": "\": \" [178113,178114]",
      "dest": "\": \" [179607,179608]"
    },
    {
      "src": "identifier: ch [198420,198422]",
      "dest": "identifier: ch [199914,199916]"
    },
    {
      "src": "variable_declarator [134212,134240]",
      "dest": "variable_declarator [135706,135734]"
    },
    {
      "src": "identifier: beg [104845,104848]",
      "dest": "identifier: beg [106339,106342]"
    },
    {
      "src": "argument_list [86328,86333]",
      "dest": "argument_list [87822,87827]"
    },
    {
      "src": "identifier: substrings [105010,105020]",
      "dest": "identifier: substrings [106504,106514]"
    },
    {
      "src": "formal_parameter [116357,116382]",
      "dest": "formal_parameter [117851,117876]"
    },
    {
      "src": "comparison_operator: == [191902,191904]",
      "dest": "comparison_operator: == [193396,193398]"
    },
    {
      "src": "type: int [83220,83223]",
      "dest": "type: int [84714,84717]"
    },
    {
      "src": "affectation_operator: = [145666,145667]",
      "dest": "affectation_operator: = [147160,147161]"
    },
    {
      "src": "identifier: searchList [159483,159493]",
      "dest": "identifier: searchList [160977,160987]"
    },
    {
      "src": "modifiers [59463,59476]",
      "dest": "modifiers [59856,59869]"
    },
    {
      "src": "identifier: ts [11716,11718]",
      "dest": "identifier: ts [11716,11718]"
    },
    {
      "src": "binary_expression [171898,171931]",
      "dest": "binary_expression [173392,173425]"
    },
    {
      "src": "identifier: i [165961,165962]",
      "dest": "identifier: i [167455,167456]"
    },
    {
      "src": "identifier: sizePlus1 [117214,117223]",
      "dest": "identifier: sizePlus1 [118708,118717]"
    },
    {
      "src": "affectation_operator: = [117604,117605]",
      "dest": "affectation_operator: = [119098,119099]"
    },
    {
      "src": "identifier: sz [137107,137109]",
      "dest": "identifier: sz [138601,138603]"
    },
    {
      "src": "identifier: n [235316,235317]",
      "dest": "identifier: n [236810,236811]"
    },
    {
      "src": "binary_expression [54516,54562]",
      "dest": "binary_expression [54516,54562]"
    },
    {
      "src": "type: String [89129,89135]",
      "dest": "type: String [90623,90629]"
    },
    {
      "src": "identifier: list [119197,119201]",
      "dest": "identifier: list [120691,120695]"
    },
    {
      "src": "return_statement [174452,174464]",
      "dest": "return_statement [175946,175958]"
    },
    {
      "src": "final: final [219852,219857]",
      "dest": "final: final [221346,221351]"
    },
    {
      "src": "identifier: substring [76255,76264]",
      "dest": "identifier: substring [77749,77758]"
    },
    {
      "src": "parenthesized_expression [116567,116580]",
      "dest": "parenthesized_expression [118061,118074]"
    },
    {
      "src": "binary_expression [127713,127789]",
      "dest": "binary_expression [129207,129283]"
    },
    {
      "src": "return_statement [145586,145597]",
      "dest": "return_statement [147080,147091]"
    },
    {
      "src": "identifier: end [75707,75710]",
      "dest": "identifier: end [77201,77204]"
    },
    {
      "src": "new: new [127820,127823]",
      "dest": "new: new [129314,129317]"
    },
    {
      "src": "update_expression [66744,66747]",
      "dest": "update_expression [67863,67866]"
    },
    {
      "src": "type: String [223658,223664]",
      "dest": "type: String [225152,225158]"
    },
    {
      "src": "parenthesized_expression [77283,77296]",
      "dest": "parenthesized_expression [78777,78790]"
    },
    {
      "src": "assignment_expression [166100,166115]",
      "dest": "assignment_expression [167594,167609]"
    },
    {
      "src": "identifier: end [168307,168310]",
      "dest": "identifier: end [169801,169804]"
    },
    {
      "src": "comparison_operator: == [158259,158261]",
      "dest": "comparison_operator: == [159753,159755]"
    },
    {
      "src": "binary_expression [104807,104815]",
      "dest": "binary_expression [106301,106309]"
    },
    {
      "src": "modifiers [188818,188831]",
      "dest": "modifiers [190312,190325]"
    },
    {
      "src": "identifier: buf [133045,133048]",
      "dest": "identifier: buf [134539,134542]"
    },
    {
      "src": "return_statement [192742,192754]",
      "dest": "return_statement [194236,194248]"
    },
    {
      "src": "argument_list [186190,186199]",
      "dest": "argument_list [187684,187693]"
    },
    {
      "src": "?: ? [28522,28523]",
      "dest": "?: ? [28522,28523]"
    },
    {
      "src": "type: String [109638,109644]",
      "dest": "type: String [111132,111138]"
    },
    {
      "src": "type: int [235162,235165]",
      "dest": "type: int [236656,236659]"
    },
    {
      "src": "?: ? [15849,15850]",
      "dest": "?: ? [15849,15850]"
    },
    {
      "src": "if_statement [185666,185772]",
      "dest": "if_statement [187160,187266]"
    },
    {
      "src": "local_variable_declaration [89356,89408]",
      "dest": "local_variable_declaration [90850,90902]"
    },
    {
      "src": "comparison_operator: != [208270,208272]",
      "dest": "comparison_operator: != [209764,209766]"
    },
    {
      "src": "block [132840,132882]",
      "dest": "block [134334,134376]"
    },
    {
      "src": "binary_expression [190807,190815]",
      "dest": "binary_expression [192301,192309]"
    },
    {
      "src": "type: String[] [122026,122034]",
      "dest": "type: String[] [123520,123528]"
    },
    {
      "src": "identifier: join [129300,129304]",
      "dest": "identifier: join [130794,130798]"
    },
    {
      "src": "argument_list [132589,132591]",
      "dest": "argument_list [134083,134085]"
    },
    {
      "src": "affectation_operator: = [210250,210251]",
      "dest": "affectation_operator: = [211744,211745]"
    },
    {
      "src": "return_statement [31951,31981]",
      "dest": "return_statement [31951,31981]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, separator string specified.\n     * Returns a maximum of <code>max</code> substrings.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *, *)               = null\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"\", *, *)                 = []\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab de fg\", null, 0)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab   de fg\", null, 0)    = [\"ab\", \"\", \"\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab:cd:ef\", \":\", 2)       = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab-!-cd-!-ef\", \"-!-\", 5) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab-!-cd-!-ef\", \"-!-\", 2) = [\"ab\", \"cd-!-ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     * @since 2.4\n     */ [101367,103045]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, separator string specified.\n     * Returns a maximum of <code>max</code> substrings.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as separators for empty tokens.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(null, *, *)               = null\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"\", *, *)                 = []\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab de fg\", null, 0)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab   de fg\", null, 0)    = [\"ab\", \"\", \"\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab:cd:ef\", \":\", 2)       = [\"ab\", \"cd:ef\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab-!-cd-!-ef\", \"-!-\", 5) = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparatorPreserveAllTokens(\"ab-!-cd-!-ef\", \"-!-\", 2) = [\"ab\", \"cd-!-ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @param max  the maximum number of elements to include in the returned\n     *  array. A zero or negative value implies no limit.\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     * @since 2.4\n     */ [102861,104539]"
    },
    {
      "src": "parenthesized_expression [140294,140327]",
      "dest": "parenthesized_expression [141788,141821]"
    },
    {
      "src": "static: static [8018,8024]",
      "dest": "static: static [8018,8024]"
    },
    {
      "src": "block_comment:     \n     * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n     *\n     * @see java.lang.String#endsWith(String)\n     * @param str  the String to check, may be null\n     * @param suffix the suffix to find, may be null\n     * @param ignoreCase inidicates whether the compare should ignore case\n     *  (case insensitive) or not.\n     * @return <code>true</code> if the String starts with the prefix or\n     *  both <code>null</code>\n     */ [243557,244032]",
      "dest": "block_comment:     \n     * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n     *\n     * @see java.lang.String#endsWith(String)\n     * @param str  the String to check, may be null\n     * @param suffix the suffix to find, may be null\n     * @param ignoreCase inidicates whether the compare should ignore case\n     *  (case insensitive) or not.\n     * @return <code>true</code> if the String starts with the prefix or\n     *  both <code>null</code>\n     */ [245051,245526]"
    },
    {
      "src": "parenthesized_expression [150578,150590]",
      "dest": "parenthesized_expression [152072,152084]"
    },
    {
      "src": "formal_parameters [143262,143289]",
      "dest": "formal_parameters [144756,144783]"
    },
    {
      "src": "comparison_operator: == [161571,161573]",
      "dest": "comparison_operator: == [163065,163067]"
    },
    {
      "src": "affectation_operator: = [53161,53162]",
      "dest": "affectation_operator: = [53161,53162]"
    },
    {
      "src": "affectation_operator: = [116760,116761]",
      "dest": "affectation_operator: = [118254,118255]"
    },
    {
      "src": "string_literal [24621,24632]",
      "dest": "string_literal [24621,24632]"
    },
    {
      "src": "type: int [53153,53156]",
      "dest": "type: int [53153,53156]"
    },
    {
      "src": "affectation_operator: = [190838,190839]",
      "dest": "affectation_operator: = [192332,192333]"
    },
    {
      "src": "identifier: result [162469,162475]",
      "dest": "identifier: result [163963,163969]"
    },
    {
      "src": "identifier: substringsBetween [90728,90745]",
      "dest": "identifier: substringsBetween [92222,92239]"
    },
    {
      "src": "block [183928,184294]",
      "dest": "block [185422,185788]"
    },
    {
      "src": "method_invocation [83363,83381]",
      "dest": "method_invocation [84857,84875]"
    },
    {
      "src": "formal_parameters [68041,68079]",
      "dest": "formal_parameters [69535,69573]"
    },
    {
      "src": "binary_expression [195549,195576]",
      "dest": "binary_expression [197043,197070]"
    },
    {
      "src": "expression_statement [18940,18948]",
      "dest": "expression_statement [18940,18948]"
    },
    {
      "src": "binary_expression [219765,219777]",
      "dest": "binary_expression [221259,221271]"
    },
    {
      "src": "method_declaration [29397,29573]",
      "dest": "method_declaration [29397,29573]"
    },
    {
      "src": "identifier: next [134056,134060]",
      "dest": "identifier: next [135550,135554]"
    },
    {
      "src": "block_comment:     \n     * <p>Replaces a String with another String inside a larger String,\n     * for the first <code>max</code> values of the search String.</p>\n     *\n     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replace(null, *, *, *)         = null\n     * StringUtils.replace(\"\", *, *, *)           = \"\"\n     * StringUtils.replace(\"any\", null, *, *)     = \"any\"\n     * StringUtils.replace(\"any\", *, null, *)     = \"any\"\n     * StringUtils.replace(\"any\", \"\", *, *)       = \"any\"\n     * StringUtils.replace(\"any\", *, *, 0)        = \"any\"\n     * StringUtils.replace(\"abaa\", \"a\", null, -1) = \"abaa\"\n     * StringUtils.replace(\"abaa\", \"a\", \"\", -1)   = \"b\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", 0)   = \"abaa\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", 1)   = \"zbaa\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", 2)   = \"zbza\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", -1)  = \"zbzz\"\n     * </pre>\n     *\n     * @param text  text to search and replace in, may be null\n     * @param searchString  the String to search for, may be null\n     * @param replacement  the String to replace it with, may be null\n     * @param max  maximum number of values to replace, or <code>-1</code> if no maximum\n     * @return the text with any replacements processed,\n     *  <code>null</code> if null String input\n     */ [148384,149751]",
      "dest": "block_comment:     \n     * <p>Replaces a String with another String inside a larger String,\n     * for the first <code>max</code> values of the search String.</p>\n     *\n     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replace(null, *, *, *)         = null\n     * StringUtils.replace(\"\", *, *, *)           = \"\"\n     * StringUtils.replace(\"any\", null, *, *)     = \"any\"\n     * StringUtils.replace(\"any\", *, null, *)     = \"any\"\n     * StringUtils.replace(\"any\", \"\", *, *)       = \"any\"\n     * StringUtils.replace(\"any\", *, *, 0)        = \"any\"\n     * StringUtils.replace(\"abaa\", \"a\", null, -1) = \"abaa\"\n     * StringUtils.replace(\"abaa\", \"a\", \"\", -1)   = \"b\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", 0)   = \"abaa\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", 1)   = \"zbaa\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", 2)   = \"zbza\"\n     * StringUtils.replace(\"abaa\", \"a\", \"z\", -1)  = \"zbzz\"\n     * </pre>\n     *\n     * @param text  text to search and replace in, may be null\n     * @param searchString  the String to search for, may be null\n     * @param replacement  the String to replace it with, may be null\n     * @param max  maximum number of values to replace, or <code>-1</code> if no maximum\n     * @return the text with any replacements processed,\n     *  <code>null</code> if null String input\n     */ [149878,151245]"
    },
    {
      "src": "identifier: i [128012,128013]",
      "dest": "identifier: i [129506,129507]"
    },
    {
      "src": "method_invocation [54531,54562]",
      "dest": "method_invocation [54531,54562]"
    },
    {
      "src": "block_comment:     \n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */ [58413,59458]",
      "dest": "block_comment:     \n     * <p>\n     * Checks if the CharSequence contains any character in the given set of characters.\n     * </p>\n     * \n     * <p>\n     * A <code>null</code> CharSequence will return <code>false</code>. A <code>null</code> search CharSequence will return\n     * <code>false</code>.\n     * </p>\n     * \n     * <pre>\n     * StringUtils.containsAny(null, *)            = false\n     * StringUtils.containsAny(\"\", *)              = false\n     * StringUtils.containsAny(*, null)            = false\n     * StringUtils.containsAny(*, \"\")              = false\n     * StringUtils.containsAny(\"zzabyycdxx\", \"za\") = true\n     * StringUtils.containsAny(\"zzabyycdxx\", \"by\") = true\n     * StringUtils.containsAny(\"aba\",\"z\")          = false\n     * </pre>\n     * \n     * @param cs\n     *            the CharSequence to check, may be null\n     * @param searchChars\n     *            the chars to search for, may be null\n     * @return the <code>true</code> if any of the chars are found, <code>false</code> if no match or null input\n     * @since 2.4\n     */ [58806,59851]"
    },
    {
      "src": "block [168258,168294]",
      "dest": "block [169752,169788]"
    },
    {
      "src": "identifier: padChars [182199,182207]",
      "dest": "identifier: padChars [183693,183701]"
    },
    {
      "src": "identifier: str [71777,71780]",
      "dest": "identifier: str [73271,73274]"
    },
    {
      "src": "identifier: max [105857,105860]",
      "dest": "identifier: max [107351,107354]"
    },
    {
      "src": "line_comment: // END of 1.5 reflection [24945,24969]",
      "dest": "line_comment: // END of 1.5 reflection [24945,24969]"
    },
    {
      "src": "block [40918,40965]",
      "dest": "block [40918,40965]"
    },
    {
      "src": "parenthesized_expression [33510,33544]",
      "dest": "parenthesized_expression [33510,33544]"
    },
    {
      "src": "binary_expression [160525,160551]",
      "dest": "binary_expression [162019,162045]"
    },
    {
      "src": "if_statement [244126,244222]",
      "dest": "if_statement [245620,245716]"
    },
    {
      "src": "identifier: ite [26043,26046]",
      "dest": "identifier: ite [26043,26046]"
    },
    {
      "src": "identifier: i [227650,227651]",
      "dest": "identifier: i [229144,229145]"
    },
    {
      "src": "increment_operator: -- [20403,20405]",
      "dest": "increment_operator: -- [20403,20405]"
    },
    {
      "src": "binary_expression [219461,219473]",
      "dest": "binary_expression [220955,220967]"
    },
    {
      "src": "identifier: start [150675,150680]",
      "dest": "identifier: start [152169,152174]"
    },
    {
      "src": "identifier: EMPTY [134007,134012]",
      "dest": "identifier: EMPTY [135501,135506]"
    },
    {
      "src": "if_statement [118581,118936]",
      "dest": "if_statement [120075,120430]"
    },
    {
      "src": "decimal_integer_literal: 0 [184052,184053]",
      "dest": "decimal_integer_literal: 0 [185546,185547]"
    },
    {
      "src": "binary_expression [168085,168100]",
      "dest": "binary_expression [169579,169594]"
    },
    {
      "src": "arithmetic_operator: - [49587,49588]",
      "dest": "arithmetic_operator: - [49587,49588]"
    },
    {
      "src": "decimal_integer_literal: 0 [137205,137206]",
      "dest": "decimal_integer_literal: 0 [138699,138700]"
    },
    {
      "src": "string_literal [158474,158490]",
      "dest": "string_literal [159968,159984]"
    },
    {
      "src": "identifier: array [127714,127719]",
      "dest": "identifier: array [129208,129213]"
    },
    {
      "src": "visibility: public [144509,144515]",
      "dest": "visibility: public [146003,146009]"
    },
    {
      "src": "method_declaration [208007,208361]",
      "dest": "method_declaration [209501,209855]"
    },
    {
      "src": "method_invocation [184018,184030]",
      "dest": "method_invocation [185512,185524]"
    },
    {
      "src": "type: int [206924,206927]",
      "dest": "type: int [208418,208421]"
    },
    {
      "src": "argument_list [200001,200003]",
      "dest": "argument_list [201495,201497]"
    },
    {
      "src": "identifier: str [188943,188946]",
      "dest": "identifier: str [190437,190440]"
    },
    {
      "src": "identifier: i [54706,54707]",
      "dest": "identifier: i [58007,58008]"
    },
    {
      "src": "decimal_integer_literal: 0 [71989,71990]",
      "dest": "decimal_integer_literal: 0 [73483,73484]"
    },
    {
      "src": "local_variable_declaration [69854,69881]",
      "dest": "local_variable_declaration [71348,71375]"
    },
    {
      "src": "block [56022,56184]",
      "dest": "block [56368,56530]"
    },
    {
      "src": "variable_declarator [175615,175620]",
      "dest": "variable_declarator [177109,177114]"
    },
    {
      "src": "formal_parameter [179031,179041]",
      "dest": "formal_parameter [180525,180535]"
    },
    {
      "src": "false: false [210359,210364]",
      "dest": "false: false [211853,211858]"
    },
    {
      "src": "null_literal: null [205709,205713]",
      "dest": "null_literal: null [207203,207207]"
    },
    {
      "src": "type: String [107739,107745]",
      "dest": "type: String [109233,109239]"
    },
    {
      "src": "formal_parameter [84660,84676]",
      "dest": "formal_parameter [86154,86170]"
    },
    {
      "src": "type: int [209233,209236]",
      "dest": "type: int [210727,210730]"
    },
    {
      "src": "decimal_integer_literal: 0 [174914,174915]",
      "dest": "decimal_integer_literal: 0 [176408,176409]"
    },
    {
      "src": "block [173352,173421]",
      "dest": "block [174846,174915]"
    },
    {
      "src": "affectation_operator: = [168505,168506]",
      "dest": "affectation_operator: = [169999,170000]"
    },
    {
      "src": "local_variable_declaration [176859,176907]",
      "dest": "local_variable_declaration [178353,178401]"
    },
    {
      "src": "identifier: c [123379,123380]",
      "dest": "identifier: c [124873,124874]"
    },
    {
      "src": "logical_operator: || [161631,161633]",
      "dest": "logical_operator: || [163125,163127]"
    },
    {
      "src": "binary_expression [62338,62374]",
      "dest": "binary_expression [63077,63113]"
    },
    {
      "src": "identifier: tag [87766,87769]",
      "dest": "identifier: tag [89260,89263]"
    },
    {
      "src": "block [126158,126194]",
      "dest": "block [127652,127688]"
    },
    {
      "src": "identifier: i [57852,57853]",
      "dest": "identifier: i [54957,54958]"
    },
    {
      "src": "visibility: public [188818,188824]",
      "dest": "visibility: public [190312,190318]"
    },
    {
      "src": "block [198683,198746]",
      "dest": "block [200177,200240]"
    },
    {
      "src": "identifier: str [188979,188982]",
      "dest": "identifier: str [190473,190476]"
    },
    {
      "src": "method_invocation [160651,160673]",
      "dest": "method_invocation [162145,162167]"
    },
    {
      "src": "block [199949,200014]",
      "dest": "block [201443,201508]"
    },
    {
      "src": "argument_list [51974,51985]",
      "dest": "argument_list [51974,51985]"
    },
    {
      "src": "affectation_operator: = [118207,118208]",
      "dest": "affectation_operator: = [119701,119702]"
    },
    {
      "src": "identifier: locale [192693,192699]",
      "dest": "identifier: locale [194187,194193]"
    },
    {
      "src": "affectation_operator: = [127868,127869]",
      "dest": "affectation_operator: = [129362,129363]"
    },
    {
      "src": "affectation_operator: = [175555,175556]",
      "dest": "affectation_operator: = [177049,177050]"
    },
    {
      "src": "block [117914,118237]",
      "dest": "block [119408,119731]"
    },
    {
      "src": "static: static [195411,195417]",
      "dest": "static: static [196905,196911]"
    },
    {
      "src": "argument_list [175188,175191]",
      "dest": "argument_list [176682,176685]"
    },
    {
      "src": "argument_list [198627,198631]",
      "dest": "argument_list [200121,200125]"
    },
    {
      "src": "binary_expression [36122,36139]",
      "dest": "binary_expression [36122,36139]"
    },
    {
      "src": "argument_list [117687,117689]",
      "dest": "argument_list [119181,119183]"
    },
    {
      "src": "formal_parameters [231085,231100]",
      "dest": "formal_parameters [232579,232594]"
    },
    {
      "src": "local_variable_declaration [90892,90918]",
      "dest": "local_variable_declaration [92386,92412]"
    },
    {
      "src": "comparison_operator: <= [235912,235914]",
      "dest": "comparison_operator: <= [237406,237408]"
    },
    {
      "src": "identifier: substring [110947,110956]",
      "dest": "identifier: substring [112441,112450]"
    },
    {
      "src": "catch_clause [25508,25666]",
      "dest": "catch_clause [25508,25666]"
    },
    {
      "src": "block [72218,72260]",
      "dest": "block [73712,73754]"
    },
    {
      "src": "local_variable_declaration [127800,127847]",
      "dest": "local_variable_declaration [129294,129341]"
    },
    {
      "src": "affectation_operator: = [198314,198315]",
      "dest": "affectation_operator: = [199808,199809]"
    },
    {
      "src": "identifier: padStr [185898,185904]",
      "dest": "identifier: padStr [187392,187398]"
    },
    {
      "src": "identifier: str [14860,14863]",
      "dest": "identifier: str [14860,14863]"
    },
    {
      "src": "identifier: length [160469,160475]",
      "dest": "identifier: length [161963,161969]"
    },
    {
      "src": "false: false [116903,116908]",
      "dest": "false: false [118397,118402]"
    },
    {
      "src": "identifier: searchStr [46542,46551]",
      "dest": "identifier: searchStr [46542,46551]"
    },
    {
      "src": "identifier: repeat [174691,174697]",
      "dest": "identifier: repeat [176185,176191]"
    },
    {
      "src": "identifier: append [222423,222429]",
      "dest": "identifier: append [223917,223923]"
    },
    {
      "src": "block [175029,175085]",
      "dest": "block [176523,176579]"
    },
    {
      "src": "decimal_integer_literal: 0 [116830,116831]",
      "dest": "decimal_integer_literal: 0 [118324,118325]"
    },
    {
      "src": "method_invocation [162360,162374]",
      "dest": "method_invocation [163854,163868]"
    },
    {
      "src": "argument_list [33619,33640]",
      "dest": "argument_list [33619,33640]"
    },
    {
      "src": "type: StringBuilder [150347,150360]",
      "dest": "type: StringBuilder [151841,151854]"
    },
    {
      "src": "type: char [188868,188872]",
      "dest": "type: char [190362,190366]"
    },
    {
      "src": "decimal_integer_literal: 0 [190732,190733]",
      "dest": "decimal_integer_literal: 0 [192226,192227]"
    },
    {
      "src": "identifier: validChars [65162,65172]",
      "dest": "identifier: validChars [66209,66219]"
    },
    {
      "src": "type: String [124229,124235]",
      "dest": "type: String [125723,125729]"
    },
    {
      "src": "visibility: public [103050,103056]",
      "dest": "visibility: public [104544,104550]"
    },
    {
      "src": "return_statement [192773,192804]",
      "dest": "return_statement [194267,194298]"
    },
    {
      "src": "binary_expression [158805,158945]",
      "dest": "binary_expression [160299,160439]"
    },
    {
      "src": "formal_parameter [185295,185303]",
      "dest": "formal_parameter [186789,186797]"
    },
    {
      "src": "binary_expression [79929,79936]",
      "dest": "binary_expression [81423,81430]"
    },
    {
      "src": "binary_expression [123434,123448]",
      "dest": "binary_expression [124928,124942]"
    },
    {
      "src": "affectation_operator: += [91332,91334]",
      "dest": "affectation_operator: += [92826,92828]"
    },
    {
      "src": "parenthesized_expression [56035,56072]",
      "dest": "parenthesized_expression [56381,56418]"
    },
    {
      "src": "identifier: padChar [180320,180327]",
      "dest": "identifier: padChar [181814,181821]"
    },
    {
      "src": "argument_list [196956,196994]",
      "dest": "argument_list [198450,198488]"
    },
    {
      "src": "block [24011,26336]",
      "dest": "block [24011,26336]"
    },
    {
      "src": "affectation_operator: = [110744,110745]",
      "dest": "affectation_operator: = [112238,112239]"
    },
    {
      "src": "variable_declarator [53119,53143]",
      "dest": "variable_declarator [53119,53143]"
    },
    {
      "src": "block_comment:     \n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * An empty (\"\") search String always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *, *)          = -1\n     * StringUtils.lastIndexOf(*, null, *)          = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8)  = 7\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8) = 4\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1) = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0)  = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [45170,46488]",
      "dest": "block_comment:     \n     * <p>Finds the first index within a String, handling <code>null</code>.\n     * This method uses {@link String#lastIndexOf(String, int)}.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position returns <code>-1</code>.\n     * An empty (\"\") search String always matches unless the start position is negative.\n     * A start position greater than the string length searches the whole string.</p>\n     *\n     * <pre>\n     * StringUtils.lastIndexOf(null, *, *)          = -1\n     * StringUtils.lastIndexOf(*, null, *)          = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 8)  = 7\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 8)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"ab\", 8) = 4\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 9)  = 5\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", -1) = -1\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"a\", 0)  = 0\n     * StringUtils.lastIndexOf(\"aabaabaa\", \"b\", 0)  = -1\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.0\n     */ [45170,46488]"
    },
    {
      "src": "identifier: str [184191,184194]",
      "dest": "identifier: str [185685,185688]"
    },
    {
      "src": "argument_list [198727,198731]",
      "dest": "argument_list [200221,200225]"
    },
    {
      "src": "type: String [183892,183898]",
      "dest": "type: String [185386,185392]"
    },
    {
      "src": "variable_declarator [54657,54687]",
      "dest": "variable_declarator [54689,54719]"
    },
    {
      "src": "new: new [91110,91113]",
      "dest": "new: new [92604,92607]"
    },
    {
      "src": "binary_expression [20323,20380]",
      "dest": "binary_expression [20323,20380]"
    },
    {
      "src": "logical_operator: || [158240,158242]",
      "dest": "logical_operator: || [159734,159736]"
    },
    {
      "src": "if_statement [119136,119241]",
      "dest": "if_statement [120630,120735]"
    },
    {
      "src": "identifier: str [168161,168164]",
      "dest": "identifier: str [169655,169658]"
    },
    {
      "src": "parenthesized_expression [219818,219832]",
      "dest": "parenthesized_expression [221312,221326]"
    },
    {
      "src": "identifier: currentType [123533,123544]",
      "dest": "identifier: currentType [125027,125038]"
    },
    {
      "src": "block [36401,36691]",
      "dest": "block [36401,36691]"
    },
    {
      "src": "block [133812,134648]",
      "dest": "block [135306,136142]"
    },
    {
      "src": "increment_operator: ++ [182164,182166]",
      "dest": "increment_operator: ++ [183658,183660]"
    },
    {
      "src": "type: IllegalArgumentException [219499,219523]",
      "dest": "type: IllegalArgumentException [220993,221017]"
    },
    {
      "src": "method_invocation [125153,125170]",
      "dest": "method_invocation [126647,126664]"
    },
    {
      "src": "formal_parameter [152618,152642]",
      "dest": "formal_parameter [154112,154136]"
    },
    {
      "src": "true: true [166111,166115]",
      "dest": "true: true [167605,167609]"
    },
    {
      "src": "visibility: public [143222,143228]",
      "dest": "visibility: public [144716,144722]"
    },
    {
      "src": "identifier: beg [105039,105042]",
      "dest": "identifier: beg [106533,106536]"
    },
    {
      "src": "formal_parameter [28466,28477]",
      "dest": "formal_parameter [28466,28477]"
    },
    {
      "src": "type: int [174784,174787]",
      "dest": "type: int [176278,176281]"
    },
    {
      "src": "method_invocation [173377,173406]",
      "dest": "method_invocation [174871,174900]"
    },
    {
      "src": "identifier: cs1 [27447,27450]",
      "dest": "identifier: cs1 [27447,27450]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets the leftmost <code>len</code> characters of a String.</p>\n     *\n     * <p>If <code>len</code> characters are not available, or the\n     * String is <code>null</code>, the String will be returned without\n     * an exception. An exception is thrown if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.left(null, *)    = null\n     * StringUtils.left(*, -ve)     = \"\"\n     * StringUtils.left(\"\", *)      = \"\"\n     * StringUtils.left(\"abc\", 0)   = \"\"\n     * StringUtils.left(\"abc\", 2)   = \"ab\"\n     * StringUtils.left(\"abc\", 4)   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the leftmost characters from, may be null\n     * @param len  the length of the required String, must be zero or positive\n     * @return the leftmost characters, <code>null</code> if null String input\n     */ [76389,77218]",
      "dest": "block_comment:     \n     * <p>Gets the leftmost <code>len</code> characters of a String.</p>\n     *\n     * <p>If <code>len</code> characters are not available, or the\n     * String is <code>null</code>, the String will be returned without\n     * an exception. An exception is thrown if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.left(null, *)    = null\n     * StringUtils.left(*, -ve)     = \"\"\n     * StringUtils.left(\"\", *)      = \"\"\n     * StringUtils.left(\"abc\", 0)   = \"\"\n     * StringUtils.left(\"abc\", 2)   = \"ab\"\n     * StringUtils.left(\"abc\", 4)   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the leftmost characters from, may be null\n     * @param len  the length of the required String, must be zero or positive\n     * @return the leftmost characters, <code>null</code> if null String input\n     */ [77883,78712]"
    },
    {
      "src": "argument_list [182264,182285]",
      "dest": "argument_list [183758,183779]"
    },
    {
      "src": "\": \" [158805,158806]",
      "dest": "\": \" [160299,160300]"
    },
    {
      "src": "line_comment: //@Immutable [5204,5216]",
      "dest": "line_comment: //@Immutable [5204,5216]"
    },
    {
      "src": "true: true [8970,8974]",
      "dest": "true: true [8970,8974]"
    },
    {
      "src": "type: int [158554,158557]",
      "dest": "type: int [160048,160051]"
    },
    {
      "src": "binary_expression [70205,70227]",
      "dest": "binary_expression [71699,71721]"
    },
    {
      "src": "identifier: end [76079,76082]",
      "dest": "identifier: end [77573,77576]"
    },
    {
      "src": "visibility: public [75539,75545]",
      "dest": "visibility: public [77033,77039]"
    },
    {
      "src": "decimal_integer_literal: 8192 [6275,6279]",
      "dest": "decimal_integer_literal: 8192 [6275,6279]"
    },
    {
      "src": "method_invocation [173060,173072]",
      "dest": "method_invocation [174554,174566]"
    },
    {
      "src": "modifiers [213816,213829]",
      "dest": "modifiers [215310,215323]"
    },
    {
      "src": "unary_expression [161347,161349]",
      "dest": "unary_expression [162841,162843]"
    },
    {
      "src": "argument_list [105959,105964]",
      "dest": "argument_list [107453,107458]"
    },
    {
      "src": "identifier: list [123275,123279]",
      "dest": "identifier: list [124769,124773]"
    },
    {
      "src": "identifier: containsOnly [65125,65137]",
      "dest": "identifier: containsOnly [66172,66184]"
    },
    {
      "src": "argument_list [120490,120502]",
      "dest": "argument_list [121984,121996]"
    },
    {
      "src": "binary_expression [228093,228149]",
      "dest": "binary_expression [229587,229643]"
    },
    {
      "src": "identifier: isEmpty [8091,8098]",
      "dest": "identifier: isEmpty [8091,8098]"
    },
    {
      "src": "local_variable_declaration [235593,235616]",
      "dest": "local_variable_declaration [237087,237110]"
    },
    {
      "src": "type: int [184000,184003]",
      "dest": "type: int [185494,185497]"
    },
    {
      "src": "argument_list [150490,150502]",
      "dest": "argument_list [151984,151996]"
    },
    {
      "src": "comparison_operator: < [77350,77351]",
      "dest": "comparison_operator: < [78844,78845]"
    },
    {
      "src": "identifier: tokenStart [124055,124065]",
      "dest": "identifier: tokenStart [125549,125559]"
    },
    {
      "src": "local_variable_declaration [104530,104571]",
      "dest": "local_variable_declaration [106024,106065]"
    },
    {
      "src": "identifier: searchList [152679,152689]",
      "dest": "identifier: searchList [154173,154183]"
    },
    {
      "src": "formal_parameter [127485,127499]",
      "dest": "formal_parameter [128979,128993]"
    },
    {
      "src": "identifier: first [132568,132573]",
      "dest": "identifier: first [134062,134067]"
    },
    {
      "src": "variable_declarator [69947,69970]",
      "dest": "variable_declarator [71441,71464]"
    },
    {
      "src": "type: Iterator<?> [133772,133783]",
      "dest": "type: Iterator<?> [135266,135277]"
    },
    {
      "src": "catch_formal_parameter [25190,25217]",
      "dest": "catch_formal_parameter [25190,25217]"
    },
    {
      "src": "identifier: pos [91242,91245]",
      "dest": "identifier: pos [92736,92739]"
    },
    {
      "src": ":: : [174875,174876]",
      "dest": ":: : [176369,176370]"
    },
    {
      "src": "type: String [23861,23867]",
      "dest": "type: String [23861,23867]"
    },
    {
      "src": "identifier: tmp [70323,70326]",
      "dest": "identifier: tmp [71817,71820]"
    },
    {
      "src": "formal_parameter [60771,60786]",
      "dest": "formal_parameter [61158,61173]"
    },
    {
      "src": "identifier: preserveAllTokens [110393,110410]",
      "dest": "identifier: preserveAllTokens [111887,111904]"
    },
    {
      "src": "parenthesized_expression [132824,132839]",
      "dest": "parenthesized_expression [134318,134333]"
    },
    {
      "src": "for_statement [54697,54995]",
      "dest": "for_statement [57998,58772]"
    },
    {
      "src": "unary_expression [228926,228928]",
      "dest": "unary_expression [230420,230422]"
    },
    {
      "src": "identifier: indexOfAny [56136,56146]",
      "dest": "identifier: indexOfAny [56482,56492]"
    },
    {
      "src": "binary_expression [225335,225371]",
      "dest": "binary_expression [226829,226865]"
    },
    {
      "src": "expression_statement [168330,168338]",
      "dest": "expression_statement [169824,169832]"
    },
    {
      "src": "identifier: lastIndexOf [40985,40996]",
      "dest": "identifier: lastIndexOf [40985,40996]"
    },
    {
      "src": "decimal_integer_literal: 0 [39740,39741]",
      "dest": "decimal_integer_literal: 0 [39740,39741]"
    },
    {
      "src": "method_invocation [131558,131578]",
      "dest": "method_invocation [133052,133072]"
    },
    {
      "src": "method_invocation [240039,240054]",
      "dest": "method_invocation [241533,241548]"
    },
    {
      "src": "identifier: i [131382,131383]",
      "dest": "identifier: i [132876,132877]"
    },
    {
      "src": "visibility: public [163570,163576]",
      "dest": "visibility: public [165064,165070]"
    },
    {
      "src": "null_literal: null [134305,134309]",
      "dest": "null_literal: null [135799,135803]"
    },
    {
      "src": "variable_declarator [24279,24356]",
      "dest": "variable_declarator [24279,24356]"
    },
    {
      "src": "ternary_expression [36263,36291]",
      "dest": "ternary_expression [36263,36291]"
    },
    {
      "src": "identifier: length [160903,160909]",
      "dest": "identifier: length [162397,162403]"
    },
    {
      "src": "identifier: str [141713,141716]",
      "dest": "identifier: str [143207,143210]"
    },
    {
      "src": "method_invocation [105946,105964]",
      "dest": "method_invocation [107440,107458]"
    },
    {
      "src": "visibility: public [35092,35098]",
      "dest": "visibility: public [35092,35098]"
    },
    {
      "src": "binary_expression [23033,23077]",
      "dest": "binary_expression [23033,23077]"
    },
    {
      "src": "identifier: startOffset [222392,222403]",
      "dest": "identifier: startOffset [223886,223897]"
    },
    {
      "src": "block [165620,165655]",
      "dest": "block [167114,167149]"
    },
    {
      "src": "return_statement [134111,134146]",
      "dest": "return_statement [135605,135640]"
    },
    {
      "src": "formal_parameter [224962,224978]",
      "dest": "formal_parameter [226456,226472]"
    },
    {
      "src": "modifiers [186592,186605]",
      "dest": "modifiers [188086,188099]"
    },
    {
      "src": "decimal_integer_literal: 0 [227776,227777]",
      "dest": "decimal_integer_literal: 0 [229270,229271]"
    },
    {
      "src": "static: static [240914,240920]",
      "dest": "static: static [242408,242414]"
    },
    {
      "src": "binary_expression [149904,149923]",
      "dest": "binary_expression [151398,151417]"
    },
    {
      "src": "comparison_operator: == [63890,63892]",
      "dest": "comparison_operator: == [64937,64939]"
    },
    {
      "src": "modifiers [200810,200823]",
      "dest": "modifiers [202304,202317]"
    },
    {
      "src": "argument_list [170274,170283]",
      "dest": "argument_list [171768,171777]"
    },
    {
      "src": "affectation_operator: = [161475,161476]",
      "dest": "affectation_operator: = [162969,162970]"
    },
    {
      "src": "method_invocation [66566,66577]",
      "dest": "method_invocation [67613,67624]"
    },
    {
      "src": "identifier: isBlank [8652,8659]",
      "dest": "identifier: isBlank [8652,8659]"
    },
    {
      "src": "block [39523,39560]",
      "dest": "block [39523,39560]"
    },
    {
      "src": "identifier: charAt [54756,54762]",
      "dest": "identifier: charAt [58060,58066]"
    },
    {
      "src": "array_access [57804,57818]",
      "dest": "array_access [54909,54923]"
    },
    {
      "src": "identifier: length [235494,235500]",
      "dest": "identifier: length [236988,236994]"
    },
    {
      "src": "assignment_expression [118957,118968]",
      "dest": "assignment_expression [120451,120462]"
    },
    {
      "src": "type: String [17088,17094]",
      "dest": "type: String [17088,17094]"
    },
    {
      "src": "argument_list [117082,117085]",
      "dest": "argument_list [118576,118579]"
    },
    {
      "src": "type: String [103112,103118]",
      "dest": "type: String [104606,104612]"
    },
    {
      "src": "false: false [50915,50920]",
      "dest": "false: false [50915,50920]"
    },
    {
      "src": "identifier: str [192681,192684]",
      "dest": "identifier: str [194175,194178]"
    },
    {
      "src": "formal_parameters [51831,51861]",
      "dest": "formal_parameters [51831,51861]"
    },
    {
      "src": "method_invocation [168538,168671]",
      "dest": "method_invocation [170032,170165]"
    },
    {
      "src": "identifier: firstDiff [228422,228431]",
      "dest": "identifier: firstDiff [229916,229925]"
    },
    {
      "src": "if_statement [168081,168142]",
      "dest": "if_statement [169575,169636]"
    },
    {
      "src": "type: boolean [104129,104136]",
      "dest": "type: boolean [105623,105630]"
    },
    {
      "src": "identifier: preserveAllTokens [105737,105754]",
      "dest": "identifier: preserveAllTokens [107231,107248]"
    },
    {
      "src": "method_invocation [211355,211390]",
      "dest": "method_invocation [212849,212884]"
    },
    {
      "src": "formal_parameter [204254,204269]",
      "dest": "formal_parameter [205748,205763]"
    },
    {
      "src": "argument_list [173204,173216]",
      "dest": "argument_list [174698,174710]"
    },
    {
      "src": "affectation_operator: = [168124,168125]",
      "dest": "affectation_operator: = [169618,169619]"
    },
    {
      "src": "decimal_integer_literal: 0 [150306,150307]",
      "dest": "decimal_integer_literal: 0 [151800,151801]"
    },
    {
      "src": "modifiers [73398,73411]",
      "dest": "modifiers [74892,74905]"
    },
    {
      "src": "method_invocation [165582,165594]",
      "dest": "method_invocation [167076,167088]"
    },
    {
      "src": "method_invocation [39600,39618]",
      "dest": "method_invocation [39600,39618]"
    },
    {
      "src": "array_access [128053,128061]",
      "dest": "array_access [129547,129555]"
    },
    {
      "src": "variable_declarator [123231,123252]",
      "dest": "variable_declarator [124725,124746]"
    },
    {
      "src": "argument_list [101328,101354]",
      "dest": "argument_list [102822,102848]"
    },
    {
      "src": "identifier: cs [8735,8737]",
      "dest": "identifier: cs [8735,8737]"
    },
    {
      "src": "if_statement [181403,181456]",
      "dest": "if_statement [182897,182950]"
    },
    {
      "src": "comparison_operator: == [73470,73472]",
      "dest": "comparison_operator: == [74964,74966]"
    },
    {
      "src": "identifier: prefix [239818,239824]",
      "dest": "identifier: prefix [241312,241318]"
    },
    {
      "src": "identifier: start [76160,76165]",
      "dest": "identifier: start [77654,77659]"
    },
    {
      "src": "affectation_operator: = [160945,160946]",
      "dest": "affectation_operator: = [162439,162440]"
    },
    {
      "src": "if_statement [244231,244304]",
      "dest": "if_statement [245725,245798]"
    },
    {
      "src": "if_statement [128002,128077]",
      "dest": "if_statement [129496,129571]"
    },
    {
      "src": "method_invocation [81654,81676]",
      "dest": "method_invocation [83148,83170]"
    },
    {
      "src": "identifier: replaceChars [165668,165680]",
      "dest": "identifier: replaceChars [167162,167174]"
    },
    {
      "src": "type: String [75570,75576]",
      "dest": "type: String [77064,77070]"
    },
    {
      "src": "identifier: stripAll [21686,21694]",
      "dest": "identifier: stripAll [21686,21694]"
    },
    {
      "src": "type: int [204343,204346]",
      "dest": "type: int [205837,205840]"
    },
    {
      "src": "type: Object[] [129185,129193]",
      "dest": "type: Object[] [130679,130687]"
    },
    {
      "src": "block [79938,79970]",
      "dest": "block [81432,81464]"
    },
    {
      "src": "if_statement [228276,228334]",
      "dest": "if_statement [229770,229828]"
    },
    {
      "src": "argument_list [104633,104635]",
      "dest": "argument_list [106127,106129]"
    },
    {
      "src": "ternary_expression [12671,12703]",
      "dest": "ternary_expression [12671,12703]"
    },
    {
      "src": "formal_parameter [141618,141628]",
      "dest": "formal_parameter [143112,143122]"
    },
    {
      "src": "binary_expression [189113,189130]",
      "dest": "binary_expression [190607,190624]"
    },
    {
      "src": "throw_statement [26066,26163]",
      "dest": "throw_statement [26066,26163]"
    },
    {
      "src": "false: false [209316,209321]",
      "dest": "false: false [210810,210815]"
    },
    {
      "src": "null_literal: null [46609,46613]",
      "dest": "null_literal: null [46609,46613]"
    },
    {
      "src": "method_invocation [101301,101354]",
      "dest": "method_invocation [102795,102848]"
    },
    {
      "src": "return_statement [244175,244212]",
      "dest": "return_statement [245669,245706]"
    },
    {
      "src": "method_invocation [73830,73850]",
      "dest": "method_invocation [75324,75344]"
    },
    {
      "src": "type: int [168000,168003]",
      "dest": "type: int [169494,169497]"
    },
    {
      "src": "identifier: ret [72286,72289]",
      "dest": "identifier: ret [73780,73783]"
    },
    {
      "src": "argument_list [217383,217401]",
      "dest": "argument_list [218877,218895]"
    },
    {
      "src": "static: static [33434,33440]",
      "dest": "static: static [33434,33440]"
    },
    {
      "src": "return_statement [129293,129340]",
      "dest": "return_statement [130787,130834]"
    },
    {
      "src": "null_literal: null [27494,27498]",
      "dest": "null_literal: null [27494,27498]"
    },
    {
      "src": "identifier: length [186610,186616]",
      "dest": "identifier: length [188104,188110]"
    },
    {
      "src": "local_variable_declaration [71908,71935]",
      "dest": "local_variable_declaration [73402,73429]"
    },
    {
      "src": "modifiers [187688,187701]",
      "dest": "modifiers [189182,189195]"
    },
    {
      "src": "type: boolean [243446,243453]",
      "dest": "type: boolean [244940,244947]"
    },
    {
      "src": ":: : [236127,236128]",
      "dest": ":: : [237621,237622]"
    },
    {
      "src": "line_comment: // cost array, horizontally [235617,235644]",
      "dest": "line_comment: // cost array, horizontally [237111,237138]"
    },
    {
      "src": "binary_expression [36217,36240]",
      "dest": "binary_expression [36217,36240]"
    },
    {
      "src": "identifier: EMPTY [83311,83316]",
      "dest": "identifier: EMPTY [84805,84810]"
    },
    {
      "src": "method_invocation [104244,104256]",
      "dest": "method_invocation [105738,105750]"
    },
    {
      "src": "object_creation_expression [196854,196879]",
      "dest": "object_creation_expression [198348,198373]"
    },
    {
      "src": "identifier: size [106432,106436]",
      "dest": "identifier: size [107926,107930]"
    },
    {
      "src": "static: static [183870,183876]",
      "dest": "static: static [185364,185370]"
    },
    {
      "src": "argument_list [49605,49607]",
      "dest": "argument_list [49605,49607]"
    },
    {
      "src": "method_invocation [77405,77417]",
      "dest": "method_invocation [78899,78911]"
    },
    {
      "src": "argument_list [201034,201037]",
      "dest": "argument_list [202528,202531]"
    },
    {
      "src": "decimal_integer_literal: 0 [36154,36155]",
      "dest": "decimal_integer_literal: 0 [36154,36155]"
    },
    {
      "src": "block_comment:     \n     * The empty String <code>\"\"</code>.\n     * @since 2.0\n     */ [5901,5971]",
      "dest": "block_comment:     \n     * The empty String <code>\"\"</code>.\n     * @since 2.0\n     */ [5901,5971]"
    },
    {
      "src": "unary_expression [132605,132624]",
      "dest": "unary_expression [134099,134118]"
    },
    {
      "src": "type: String [143236,143242]",
      "dest": "type: String [144730,144736]"
    },
    {
      "src": "local_variable_declaration [61023,61033]",
      "dest": "local_variable_declaration [61482,61492]"
    },
    {
      "src": "identifier: defaultString [212139,212152]",
      "dest": "identifier: defaultString [213633,213646]"
    },
    {
      "src": "identifier: EMPTY_STRING_ARRAY [123186,123204]",
      "dest": "identifier: EMPTY_STRING_ARRAY [124680,124698]"
    },
    {
      "src": "comparison_operator: == [49432,49434]",
      "dest": "comparison_operator: == [49432,49434]"
    },
    {
      "src": "identifier: searchStr [39893,39902]",
      "dest": "identifier: searchStr [39893,39902]"
    },
    {
      "src": "type: int [181532,181535]",
      "dest": "type: int [183026,183029]"
    },
    {
      "src": "affectation_operator: = [162269,162270]",
      "dest": "affectation_operator: = [163763,163764]"
    },
    {
      "src": "parenthesized_expression [117665,117695]",
      "dest": "parenthesized_expression [119159,119189]"
    },
    {
      "src": "if_statement [158408,158544]",
      "dest": "if_statement [159902,160038]"
    },
    {
      "src": "visibility: public [136981,136987]",
      "dest": "visibility: public [138475,138481]"
    },
    {
      "src": "binary_expression [203256,203304]",
      "dest": "binary_expression [204750,204798]"
    },
    {
      "src": "parenthesized_expression [170440,170462]",
      "dest": "parenthesized_expression [171934,171956]"
    },
    {
      "src": "identifier: length [159497,159503]",
      "dest": "identifier: length [160991,160997]"
    },
    {
      "src": "if_statement [183938,183991]",
      "dest": "if_statement [185432,185485]"
    },
    {
      "src": "logical_operator: || [86522,86524]",
      "dest": "logical_operator: || [88016,88018]"
    },
    {
      "src": "null_literal: null [130837,130841]",
      "dest": "null_literal: null [132331,132335]"
    },
    {
      "src": "line_comment: // we found a common initial character sequence [231606,231653]",
      "dest": "line_comment: // we found a common initial character sequence [233100,233147]"
    },
    {
      "src": "affectation_operator: = [181543,181544]",
      "dest": "affectation_operator: = [183037,183038]"
    },
    {
      "src": "arithmetic_operator: - [228847,228848]",
      "dest": "arithmetic_operator: - [230341,230342]"
    },
    {
      "src": "block [49645,49692]",
      "dest": "block [49645,49692]"
    },
    {
      "src": "modifiers [84607,84620]",
      "dest": "modifiers [86101,86114]"
    },
    {
      "src": "parenthesized_expression [117048,117087]",
      "dest": "parenthesized_expression [118542,118581]"
    },
    {
      "src": "formal_parameter [217342,217354]",
      "dest": "formal_parameter [218836,218848]"
    },
    {
      "src": "identifier: substring [73834,73843]",
      "dest": "identifier: substring [75328,75337]"
    },
    {
      "src": "visibility: public [219315,219321]",
      "dest": "visibility: public [220809,220815]"
    },
    {
      "src": "identifier: arrayLen [228619,228627]",
      "dest": "identifier: arrayLen [230113,230121]"
    },
    {
      "src": "block [219679,219725]",
      "dest": "block [221173,221219]"
    },
    {
      "src": "argument_list [31969,31980]",
      "dest": "argument_list [31969,31980]"
    },
    {
      "src": "block [185320,186228]",
      "dest": "block [186814,187722]"
    },
    {
      "src": "continue: continue [61206,61214]",
      "dest": "continue: continue [61923,61931]"
    },
    {
      "src": "formal_parameter [165547,165566]",
      "dest": "formal_parameter [167041,167060]"
    },
    {
      "src": "arithmetic_operator: - [57602,57603]",
      "dest": "arithmetic_operator: - [57942,57943]"
    },
    {
      "src": "variable_declarator [53200,53205]",
      "dest": "variable_declarator [53200,53205]"
    },
    {
      "src": "object_creation_expression [175109,175128]",
      "dest": "object_creation_expression [176603,176622]"
    },
    {
      "src": "modifiers [45015,45028]",
      "dest": "modifiers [45015,45028]"
    },
    {
      "src": "identifier: cs [206848,206850]",
      "dest": "identifier: cs [208342,208344]"
    },
    {
      "src": "binary_expression [231358,231373]",
      "dest": "binary_expression [232852,232867]"
    },
    {
      "src": "parenthesized_expression [79982,80011]",
      "dest": "parenthesized_expression [81476,81505]"
    },
    {
      "src": "argument_list [49523,49525]",
      "dest": "argument_list [49523,49525]"
    },
    {
      "src": "method_invocation [20213,20225]",
      "dest": "method_invocation [20213,20225]"
    },
    {
      "src": "identifier: str [215477,215480]",
      "dest": "identifier: str [216971,216974]"
    },
    {
      "src": "block_comment:     \n     * <p>Converts a String to lower case as per {@link String#toLowerCase(Locale)}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lowerCase(null, Locale.ENGLISH)  = null\n     * StringUtils.lowerCase(\"\", Locale.ENGLISH)    = \"\"\n     * StringUtils.lowerCase(\"aBc\", Locale.ENGLISH) = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to lower case, may be null\n     * @param locale  the locale that defines the case transformation rules, must not be null\n     * @return the lower cased String, <code>null</code> if null String input\n     * @since 2.5\n     */ [193808,194453]",
      "dest": "block_comment:     \n     * <p>Converts a String to lower case as per {@link String#toLowerCase(Locale)}.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.lowerCase(null, Locale.ENGLISH)  = null\n     * StringUtils.lowerCase(\"\", Locale.ENGLISH)    = \"\"\n     * StringUtils.lowerCase(\"aBc\", Locale.ENGLISH) = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to lower case, may be null\n     * @param locale  the locale that defines the case transformation rules, must not be null\n     * @return the lower cased String, <code>null</code> if null String input\n     * @since 2.5\n     */ [195302,195947]"
    },
    {
      "src": "binary_expression [39509,39521]",
      "dest": "binary_expression [39509,39521]"
    },
    {
      "src": "visibility: public [11616,11622]",
      "dest": "visibility: public [11616,11622]"
    },
    {
      "src": "continue: continue [118990,118998]",
      "dest": "continue: continue [120484,120492]"
    },
    {
      "src": "binary_expression [166137,166163]",
      "dest": "binary_expression [167631,167657]"
    },
    {
      "src": "binary_expression [62483,62493]",
      "dest": "binary_expression [63222,63232]"
    },
    {
      "src": "method_invocation [65292,65316]",
      "dest": "method_invocation [66339,66363]"
    },
    {
      "src": "identifier: ArrayUtils [54531,54541]",
      "dest": "identifier: ArrayUtils [54531,54541]"
    },
    {
      "src": "identifier: searchChar [29440,29450]",
      "dest": "identifier: searchChar [29440,29450]"
    },
    {
      "src": "block_comment:     \n     * <p>Left pad a String with spaces (' ').</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *)   = null\n     * StringUtils.leftPad(\"\", 3)     = \"   \"\n     * StringUtils.leftPad(\"bat\", 3)  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5)  = \"  bat\"\n     * StringUtils.leftPad(\"bat\", 1)  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1) = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     */ [182308,182985]",
      "dest": "block_comment:     \n     * <p>Left pad a String with spaces (' ').</p>\n     *\n     * <p>The String is padded to the size of <code>size</code>.</p>\n     *\n     * <pre>\n     * StringUtils.leftPad(null, *)   = null\n     * StringUtils.leftPad(\"\", 3)     = \"   \"\n     * StringUtils.leftPad(\"bat\", 3)  = \"bat\"\n     * StringUtils.leftPad(\"bat\", 5)  = \"  bat\"\n     * StringUtils.leftPad(\"bat\", 1)  = \"bat\"\n     * StringUtils.leftPad(\"bat\", -1) = \"bat\"\n     * </pre>\n     *\n     * @param str  the String to pad out, may be null\n     * @param size  the size to pad to\n     * @return left padded String or original String if no padding is necessary,\n     *  <code>null</code> if null String input\n     */ [183802,184479]"
    },
    {
      "src": "identifier: sz [210247,210249]",
      "dest": "identifier: sz [211741,211743]"
    },
    {
      "src": "formal_parameters [194488,194515]",
      "dest": "formal_parameters [195982,196009]"
    },
    {
      "src": "logical_operator: || [149876,149878]",
      "dest": "logical_operator: || [151370,151372]"
    },
    {
      "src": "return_statement [223959,223985]",
      "dest": "return_statement [225453,225479]"
    },
    {
      "src": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, <code>null</code> if null array input\n     * @since 2.0\n     */ [126263,127422]",
      "dest": "block_comment:     \n     * <p>Joins the elements of the provided array into a single String\n     * containing the provided list of elements.</p>\n     *\n     * <p>No delimiter is added before or after the list.\n     * Null objects or empty strings within the array are represented by\n     * empty strings.</p>\n     *\n     * <pre>\n     * StringUtils.join(null, *)               = null\n     * StringUtils.join([], *)                 = \"\"\n     * StringUtils.join([null], *)             = \"\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n     * </pre>\n     *\n     * @param array  the array of values to join together, may be null\n     * @param separator  the separator character to use\n     * @param startIndex the first index to start joining from.  It is\n     * an error to pass in an end index past the end of the array\n     * @param endIndex the index to stop joining from (exclusive). It is\n     * an error to pass in an end index past the end of the array\n     * @return the joined String, <code>null</code> if null array input\n     * @since 2.0\n     */ [127757,128916]"
    },
    {
      "src": "identifier: ret [70317,70320]",
      "dest": "identifier: ret [71811,71814]"
    },
    {
      "src": "local_variable_declaration [91014,91044]",
      "dest": "local_variable_declaration [92508,92538]"
    },
    {
      "src": "identifier: size [190529,190533]",
      "dest": "identifier: size [192023,192027]"
    },
    {
      "src": "identifier: iterable [136219,136227]",
      "dest": "identifier: iterable [137713,137721]"
    },
    {
      "src": "decimal_integer_literal: 5 [160914,160915]",
      "dest": "decimal_integer_literal: 5 [162408,162409]"
    },
    {
      "src": "identifier: str [78419,78422]",
      "dest": "identifier: str [79913,79916]"
    },
    {
      "src": "argument_list [227956,227988]",
      "dest": "argument_list [229450,229482]"
    },
    {
      "src": "decimal_integer_literal: 0 [228129,228130]",
      "dest": "decimal_integer_literal: 0 [229623,229624]"
    },
    {
      "src": "identifier: textIndex [160105,160114]",
      "dest": "identifier: textIndex [161599,161608]"
    },
    {
      "src": "comparison_operator: <= [188916,188918]",
      "dest": "comparison_operator: <= [190410,190412]"
    },
    {
      "src": "identifier: i [70072,70073]",
      "dest": "identifier: i [71566,71567]"
    },
    {
      "src": "type: String [84621,84627]",
      "dest": "type: String [86115,86121]"
    },
    {
      "src": "continue_statement [123564,123573]",
      "dest": "continue_statement [125058,125067]"
    },
    {
      "src": "increment_operator: ++ [62496,62498]",
      "dest": "increment_operator: ++ [63235,63237]"
    },
    {
      "src": "method_declaration [239708,240062]",
      "dest": "method_declaration [241202,241556]"
    },
    {
      "src": "identifier: String [184202,184208]",
      "dest": "identifier: String [185696,185702]"
    },
    {
      "src": ":: : [131219,131220]",
      "dest": ":: : [132713,132714]"
    },
    {
      "src": "modifiers [224926,224939]",
      "dest": "modifiers [226420,226433]"
    },
    {
      "src": "explicit_constructor_invocation [6641,6649]",
      "dest": "explicit_constructor_invocation [6641,6649]"
    },
    {
      "src": "binary_expression [145516,145570]",
      "dest": "binary_expression [147010,147064]"
    },
    {
      "src": "identifier: CharUtils [173338,173347]",
      "dest": "identifier: CharUtils [174832,174841]"
    },
    {
      "src": "if_statement [173307,173421]",
      "dest": "if_statement [174801,174915]"
    },
    {
      "src": "identifier: open [90822,90826]",
      "dest": "identifier: open [92316,92320]"
    },
    {
      "src": "type: String [123997,124003]",
      "dest": "type: String [125491,125497]"
    },
    {
      "src": "identifier: String [180244,180250]",
      "dest": "identifier: String [181738,181744]"
    },
    {
      "src": "expression_statement [111076,111088]",
      "dest": "expression_statement [112570,112582]"
    },
    {
      "src": "increment_operator: ++ [57689,57691]",
      "dest": "increment_operator: ++ [54797,54799]"
    },
    {
      "src": "!: ! [9627,9628]",
      "dest": "!: ! [9627,9628]"
    },
    {
      "src": "identifier: strLen [181623,181629]",
      "dest": "identifier: strLen [183117,183123]"
    },
    {
      "src": "block [118705,118816]",
      "dest": "block [120199,120310]"
    },
    {
      "src": "return_statement [23277,23291]",
      "dest": "return_statement [23277,23291]"
    },
    {
      "src": "false: false [119046,119051]",
      "dest": "false: false [120540,120545]"
    },
    {
      "src": "formal_parameter [98078,98094]",
      "dest": "formal_parameter [99572,99588]"
    },
    {
      "src": "identifier: list [118841,118845]",
      "dest": "identifier: list [120335,120339]"
    },
    {
      "src": "static: static [194465,194471]",
      "dest": "static: static [195959,195965]"
    },
    {
      "src": "decimal_integer_literal: 0 [76168,76169]",
      "dest": "decimal_integer_literal: 0 [77662,77663]"
    },
    {
      "src": "block [185347,185383]",
      "dest": "block [186841,186877]"
    },
    {
      "src": "identifier: str [219629,219632]",
      "dest": "identifier: str [221123,221126]"
    },
    {
      "src": "affectation_operator: = [180050,180051]",
      "dest": "affectation_operator: = [181544,181545]"
    },
    {
      "src": "if_statement [133894,133952]",
      "dest": "if_statement [135388,135446]"
    },
    {
      "src": "method_invocation [166198,166224]",
      "dest": "method_invocation [167692,167718]"
    },
    {
      "src": "variable_declarator [104685,104692]",
      "dest": "variable_declarator [106179,106186]"
    },
    {
      "src": "method_invocation [181545,181560]",
      "dest": "method_invocation [183039,183054]"
    },
    {
      "src": "type: String [149770,149776]",
      "dest": "type: String [151264,151270]"
    },
    {
      "src": "formal_parameter [22979,22996]",
      "dest": "formal_parameter [22979,22996]"
    },
    {
      "src": "argument_list [113380,113411]",
      "dest": "argument_list [114874,114905]"
    },
    {
      "src": "type: String [145463,145469]",
      "dest": "type: String [146957,146963]"
    },
    {
      "src": "visibility: public [127427,127433]",
      "dest": "visibility: public [128921,128927]"
    },
    {
      "src": "parenthesized_expression [50879,50893]",
      "dest": "parenthesized_expression [50879,50893]"
    },
    {
      "src": "parenthesized_expression [62554,62583]",
      "dest": "parenthesized_expression [63353,63402]"
    },
    {
      "src": "arithmetic_operator: + [168560,168561]",
      "dest": "arithmetic_operator: + [170054,170055]"
    },
    {
      "src": "identifier: length [53167,53173]",
      "dest": "identifier: length [53167,53173]"
    },
    {
      "src": "identifier: length [141822,141828]",
      "dest": "identifier: length [143316,143322]"
    },
    {
      "src": "binary_expression [20282,20300]",
      "dest": "binary_expression [20282,20300]"
    },
    {
      "src": "comparison_operator: == [196685,196687]",
      "dest": "comparison_operator: == [198179,198181]"
    },
    {
      "src": "type: String [17075,17081]",
      "dest": "type: String [17075,17081]"
    },
    {
      "src": "if_statement [211201,211269]",
      "dest": "if_statement [212695,212763]"
    },
    {
      "src": "parenthesized_expression [196681,196694]",
      "dest": "parenthesized_expression [198175,198188]"
    },
    {
      "src": "identifier: newTokenStart [123765,123778]",
      "dest": "identifier: newTokenStart [125259,125272]"
    },
    {
      "src": "identifier: str [174903,174906]",
      "dest": "identifier: str [176397,176400]"
    },
    {
      "src": "identifier: ch [198528,198530]",
      "dest": "identifier: ch [200022,200024]"
    },
    {
      "src": "identifier: endLimit [39648,39656]",
      "dest": "identifier: endLimit [39648,39656]"
    },
    {
      "src": "false: false [211394,211399]",
      "dest": "false: false [212888,212893]"
    },
    {
      "src": "binary_expression [239910,239940]",
      "dest": "binary_expression [241404,241434]"
    },
    {
      "src": "for_statement [175606,175695]",
      "dest": "for_statement [177100,177189]"
    },
    {
      "src": "method_invocation [176689,176708]",
      "dest": "method_invocation [178183,178202]"
    },
    {
      "src": "identifier: str [116636,116639]",
      "dest": "identifier: str [118130,118133]"
    },
    {
      "src": "identifier: lastIdx [173249,173256]",
      "dest": "identifier: lastIdx [174743,174750]"
    },
    {
      "src": "block [235988,236461]",
      "dest": "block [237482,237955]"
    },
    {
      "src": "binary_expression [244130,244159]",
      "dest": "binary_expression [245624,245653]"
    },
    {
      "src": "argument_list [25425,25492]",
      "dest": "argument_list [25425,25492]"
    },
    {
      "src": "identifier: strLen [198393,198399]",
      "dest": "identifier: strLen [199887,199893]"
    },
    {
      "src": "binary_expression [77284,77295]",
      "dest": "binary_expression [78778,78789]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [64116,64131]",
      "dest": "identifier: INDEX_NOT_FOUND [65163,65178]"
    },
    {
      "src": "formal_parameter [68042,68057]",
      "dest": "formal_parameter [69536,69551]"
    },
    {
      "src": "block [89168,89567]",
      "dest": "block [90662,91061]"
    },
    {
      "src": "argument_list [118849,118874]",
      "dest": "argument_list [120343,120368]"
    },
    {
      "src": "identifier: i [49811,49812]",
      "dest": "identifier: i [49811,49812]"
    },
    {
      "src": "return_statement [81612,81625]",
      "dest": "return_statement [83106,83119]"
    },
    {
      "src": "parenthesized_expression [57851,57957]",
      "dest": "parenthesized_expression [54956,55019]"
    },
    {
      "src": "method_invocation [168161,168173]",
      "dest": "method_invocation [169655,169667]"
    },
    {
      "src": "line_comment: // returns original String when possible [185607,185647]",
      "dest": "line_comment: // returns original String when possible [187101,187141]"
    },
    {
      "src": "identifier: EMPTY [79900,79905]",
      "dest": "identifier: EMPTY [81394,81399]"
    },
    {
      "src": "null_literal: null [43383,43387]",
      "dest": "null_literal: null [43383,43387]"
    },
    {
      "src": "line_comment: // make sure lengths are ok, these need to be equal [158657,158708]",
      "dest": "line_comment: // make sure lengths are ok, these need to be equal [160151,160202]"
    },
    {
      "src": "static: static [73405,73411]",
      "dest": "static: static [74899,74905]"
    },
    {
      "src": "logical_operator: || [51888,51890]",
      "dest": "logical_operator: || [51888,51890]"
    },
    {
      "src": "visibility: public [171681,171687]",
      "dest": "visibility: public [173175,173181]"
    },
    {
      "src": "null_literal: null [227697,227701]",
      "dest": "null_literal: null [229191,229195]"
    },
    {
      "src": "method_declaration [195404,195810]",
      "dest": "method_declaration [196898,197304]"
    },
    {
      "src": "binary_expression [185670,185681]",
      "dest": "binary_expression [187164,187175]"
    },
    {
      "src": "identifier: lastIdx [173208,173215]",
      "dest": "identifier: lastIdx [174702,174709]"
    },
    {
      "src": "comparison_operator: == [204461,204463]",
      "dest": "comparison_operator: == [205955,205957]"
    },
    {
      "src": "block_comment:     \n     * <p>Strips any of a set of characters from the start and end of every\n     * String in an array.</p>\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A new array is returned each time, except for length zero.\n     * A <code>null</code> array will return <code>null</code>.\n     * An empty array will return itself.\n     * A <code>null</code> array entry will be ignored.\n     * A <code>null</code> stripChars will strip whitespace as defined by\n     * {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripAll(null, *)                = null\n     * StringUtils.stripAll([], *)                  = []\n     * StringUtils.stripAll([\"abc\", \"  abc\"], null) = [\"abc\", \"abc\"]\n     * StringUtils.stripAll([\"abc  \", null], null)  = [\"abc\", null]\n     * StringUtils.stripAll([\"abc  \", null], \"yz\")  = [\"abc  \", null]\n     * StringUtils.stripAll([\"yabcz\", null], \"yz\")  = [\"abc\", null]\n     * </pre>\n     *\n     * @param strs  the array to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped Strings, <code>null</code> if null array input\n     */ [21719,22927]",
      "dest": "block_comment:     \n     * <p>Strips any of a set of characters from the start and end of every\n     * String in an array.</p>\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>A new array is returned each time, except for length zero.\n     * A <code>null</code> array will return <code>null</code>.\n     * An empty array will return itself.\n     * A <code>null</code> array entry will be ignored.\n     * A <code>null</code> stripChars will strip whitespace as defined by\n     * {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripAll(null, *)                = null\n     * StringUtils.stripAll([], *)                  = []\n     * StringUtils.stripAll([\"abc\", \"  abc\"], null) = [\"abc\", \"abc\"]\n     * StringUtils.stripAll([\"abc  \", null], null)  = [\"abc\", null]\n     * StringUtils.stripAll([\"abc  \", null], \"yz\")  = [\"abc  \", null]\n     * StringUtils.stripAll([\"yabcz\", null], \"yz\")  = [\"abc\", null]\n     * </pre>\n     *\n     * @param strs  the array to remove characters from, may be null\n     * @param stripChars  the characters to remove, null treated as whitespace\n     * @return the stripped Strings, <code>null</code> if null array input\n     */ [21719,22927]"
    },
    {
      "src": "identifier: charAt [202166,202172]",
      "dest": "identifier: charAt [203660,203666]"
    },
    {
      "src": "update_expression [161075,161078]",
      "dest": "update_expression [162569,162572]"
    },
    {
      "src": "argument_list [225252,225255]",
      "dest": "argument_list [226746,226749]"
    },
    {
      "src": "identifier: length [91072,91078]",
      "dest": "identifier: length [92566,92572]"
    },
    {
      "src": "null_literal: null [46588,46592]",
      "dest": "null_literal: null [46588,46592]"
    },
    {
      "src": "type: String [144537,144543]",
      "dest": "type: String [146031,146037]"
    },
    {
      "src": "modifiers [50806,50819]",
      "dest": "modifiers [50806,50819]"
    },
    {
      "src": "line_comment: // Centering [186687,186699]",
      "dest": "line_comment: // Centering [188181,188193]"
    },
    {
      "src": "identifier: str [84897,84900]",
      "dest": "identifier: str [86391,86394]"
    },
    {
      "src": "method_invocation [8851,8887]",
      "dest": "method_invocation [8851,8887]"
    },
    {
      "src": "identifier: noMoreMatchesForReplIndex [159027,159052]",
      "dest": "identifier: noMoreMatchesForReplIndex [160521,160546]"
    },
    {
      "src": "affectation_operator: = [66724,66725]",
      "dest": "affectation_operator: = [67843,67844]"
    },
    {
      "src": "binary_expression [65188,65198]",
      "dest": "binary_expression [66235,66245]"
    },
    {
      "src": "type: int [54450,54453]",
      "dest": "type: int [54450,54453]"
    },
    {
      "src": "decimal_integer_literal: 16 [131216,131218]",
      "dest": "decimal_integer_literal: 16 [132710,132712]"
    },
    {
      "src": "affectation_operator: = [70321,70322]",
      "dest": "affectation_operator: = [71815,71816]"
    },
    {
      "src": "identifier: separator [101334,101343]",
      "dest": "identifier: separator [102828,102837]"
    },
    {
      "src": "comparison_operator: == [18773,18775]",
      "dest": "comparison_operator: == [18773,18775]"
    },
    {
      "src": "assignment_expression [18488,18509]",
      "dest": "assignment_expression [18488,18509]"
    },
    {
      "src": "block [126129,126257]",
      "dest": "block [127623,127751]"
    },
    {
      "src": "identifier: length [160665,160671]",
      "dest": "identifier: length [162159,162165]"
    },
    {
      "src": "formal_parameter [192686,192699]",
      "dest": "formal_parameter [194180,194193]"
    },
    {
      "src": "type: String [11648,11654]",
      "dest": "type: String [11648,11654]"
    },
    {
      "src": "method_invocation [149862,149875]",
      "dest": "method_invocation [151356,151369]"
    },
    {
      "src": "affectation_operator: = [182055,182056]",
      "dest": "affectation_operator: = [183549,183550]"
    },
    {
      "src": "identifier: buffer [198759,198765]",
      "dest": "identifier: buffer [200253,200259]"
    },
    {
      "src": "method_invocation [110943,110966]",
      "dest": "method_invocation [112437,112460]"
    },
    {
      "src": "argument_list [77415,77417]",
      "dest": "argument_list [78909,78911]"
    },
    {
      "src": "identifier: substring [18992,19001]",
      "dest": "identifier: substring [18992,19001]"
    },
    {
      "src": "identifier: replacementList [155111,155126]",
      "dest": "identifier: replacementList [156605,156620]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String returning an empty String (\"\") if the String\n     * is empty (\"\") after the trim or if it is <code>null</code>.\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #stripToEmpty(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.trimToEmpty(null)          = \"\"\n     * StringUtils.trimToEmpty(\"\")            = \"\"\n     * StringUtils.trimToEmpty(\"     \")       = \"\"\n     * StringUtils.trimToEmpty(\"abc\")         = \"abc\"\n     * StringUtils.trimToEmpty(\"    abc    \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed String, or an empty String if <code>null</code> input\n     * @since 2.0\n     */ [11744,12604]",
      "dest": "block_comment:     \n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String returning an empty String (\"\") if the String\n     * is empty (\"\") after the trim or if it is <code>null</code>.\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #stripToEmpty(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.trimToEmpty(null)          = \"\"\n     * StringUtils.trimToEmpty(\"\")            = \"\"\n     * StringUtils.trimToEmpty(\"     \")       = \"\"\n     * StringUtils.trimToEmpty(\"abc\")         = \"abc\"\n     * StringUtils.trimToEmpty(\"    abc    \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed String, or an empty String if <code>null</code> input\n     * @since 2.0\n     */ [11744,12604]"
    },
    {
      "src": "for_statement [62467,62639]",
      "dest": "for_statement [63206,63686]"
    },
    {
      "src": "argument_list [50958,50970]",
      "dest": "argument_list [50958,50970]"
    },
    {
      "src": "argument_list [182121,182123]",
      "dest": "argument_list [183615,183617]"
    },
    {
      "src": "return_statement [140482,140493]",
      "dest": "return_statement [141976,141987]"
    },
    {
      "src": "binary_expression [231468,231492]",
      "dest": "binary_expression [232962,232986]"
    },
    {
      "src": "identifier: j [61170,61171]",
      "dest": "identifier: j [61629,61630]"
    },
    {
      "src": "if_statement [78415,78468]",
      "dest": "if_statement [79909,79962]"
    },
    {
      "src": "type: Locale [194501,194507]",
      "dest": "type: Locale [195995,196001]"
    },
    {
      "src": "identifier: replaceIndex [161239,161251]",
      "dest": "identifier: replaceIndex [162733,162745]"
    },
    {
      "src": "for_statement [161464,162186]",
      "dest": "for_statement [162958,163680]"
    },
    {
      "src": "argument_list [54641,54643]",
      "dest": "argument_list [54641,54643]"
    },
    {
      "src": "type: int [33483,33486]",
      "dest": "type: int [33483,33486]"
    },
    {
      "src": "switch_label [175142,175148]",
      "dest": "switch_label [176636,176642]"
    },
    {
      "src": "if_statement [176631,176966]",
      "dest": "if_statement [178125,178460]"
    },
    {
      "src": "comparison_operator: == [181750,181752]",
      "dest": "comparison_operator: == [183244,183246]"
    },
    {
      "src": "parenthesized_expression [83092,83106]",
      "dest": "parenthesized_expression [84586,84600]"
    },
    {
      "src": "type: String[] [152618,152626]",
      "dest": "type: String[] [154112,154120]"
    },
    {
      "src": "identifier: css [227183,227186]",
      "dest": "identifier: css [228677,228680]"
    },
    {
      "src": "identifier: end [150427,150430]",
      "dest": "identifier: end [151921,151924]"
    },
    {
      "src": "identifier: i [211317,211318]",
      "dest": "identifier: i [212811,212812]"
    },
    {
      "src": "string_fragment: Minimum abbreviation width with offset is 7 [220058,220101]",
      "dest": "string_fragment: Minimum abbreviation width with offset is 7 [221552,221595]"
    },
    {
      "src": "for_statement [72000,72270]",
      "dest": "for_statement [73494,73764]"
    },
    {
      "src": "identifier: str [96805,96808]",
      "dest": "identifier: str [98299,98302]"
    },
    {
      "src": "binary_expression [18487,18515]",
      "dest": "binary_expression [18487,18515]"
    },
    {
      "src": "if_statement [181932,182296]",
      "dest": "if_statement [183426,183790]"
    },
    {
      "src": "formal_parameters [13681,13693]",
      "dest": "formal_parameters [13681,13693]"
    },
    {
      "src": "block [21669,21713]",
      "dest": "block [21669,21713]"
    },
    {
      "src": "identifier: charAt [225263,225269]",
      "dest": "identifier: charAt [226757,226763]"
    },
    {
      "src": "line_comment: // ContainsNone [65330,65345]",
      "dest": "line_comment: // ContainsNone [66377,66392]"
    },
    {
      "src": "method_invocation [161098,161124]",
      "dest": "method_invocation [162592,162618]"
    },
    {
      "src": "variable_declarator [186072,186077]",
      "dest": "variable_declarator [187566,187571]"
    },
    {
      "src": "\": \" [25805,25806]",
      "dest": "\": \" [25805,25806]"
    },
    {
      "src": "identifier: ch [165985,165987]",
      "dest": "identifier: ch [167479,167481]"
    },
    {
      "src": "comparison_operator: < [79852,79853]",
      "dest": "comparison_operator: < [81346,81347]"
    },
    {
      "src": "method_invocation [117379,117402]",
      "dest": "method_invocation [118873,118896]"
    },
    {
      "src": "binary_expression [68094,68128]",
      "dest": "binary_expression [69588,69622]"
    },
    {
      "src": "type: int [203214,203217]",
      "dest": "type: int [204708,204711]"
    },
    {
      "src": "identifier: text [150476,150480]",
      "dest": "identifier: text [151970,151974]"
    },
    {
      "src": "assignment_expression [236425,236430]",
      "dest": "assignment_expression [237919,237924]"
    },
    {
      "src": "type: IllegalArgumentException [158780,158804]",
      "dest": "type: IllegalArgumentException [160274,160298]"
    },
    {
      "src": "comparison_operator: == [174597,174599]",
      "dest": "comparison_operator: == [176091,176093]"
    },
    {
      "src": "variable_declarator [176866,176906]",
      "dest": "variable_declarator [178360,178400]"
    },
    {
      "src": "affectation_operator: = [159957,159958]",
      "dest": "affectation_operator: = [161451,161452]"
    },
    {
      "src": "return_statement [204561,204573]",
      "dest": "return_statement [206055,206067]"
    },
    {
      "src": "variable_declarator [227643,227648]",
      "dest": "variable_declarator [229137,229142]"
    },
    {
      "src": "field_declaration [6238,6280]",
      "dest": "field_declaration [6238,6280]"
    },
    {
      "src": "block [25541,25666]",
      "dest": "block [25541,25666]"
    },
    {
      "src": "binary_expression [159368,159384]",
      "dest": "binary_expression [160862,160878]"
    },
    {
      "src": "decimal_integer_literal: 0 [227647,227648]",
      "dest": "decimal_integer_literal: 0 [229141,229142]"
    },
    {
      "src": "identifier: first [134039,134044]",
      "dest": "identifier: first [135533,135538]"
    },
    {
      "src": "identifier: text [160898,160902]",
      "dest": "identifier: text [162392,162396]"
    },
    {
      "src": "identifier: str [168618,168621]",
      "dest": "identifier: str [170112,170115]"
    },
    {
      "src": "block [147125,147192]",
      "dest": "block [148619,148686]"
    },
    {
      "src": "type: char [174955,174959]",
      "dest": "type: char [176449,176453]"
    },
    {
      "src": "visibility: public [135296,135302]",
      "dest": "visibility: public [136790,136796]"
    },
    {
      "src": "block [110862,111128]",
      "dest": "block [112356,112622]"
    },
    {
      "src": "object_creation_expression [222326,222351]",
      "dest": "object_creation_expression [223820,223845]"
    },
    {
      "src": "identifier: stripChars [18863,18873]",
      "dest": "identifier: stripChars [18863,18873]"
    },
    {
      "src": "identifier: CR [173348,173350]",
      "dest": "identifier: CR [174842,174844]"
    },
    {
      "src": "block [190605,190642]",
      "dest": "block [192099,192136]"
    },
    {
      "src": "expression_statement [118400,118404]",
      "dest": "expression_statement [119894,119898]"
    },
    {
      "src": "static: static [40838,40844]",
      "dest": "static: static [40838,40844]"
    },
    {
      "src": "object_creation_expression [25405,25492]",
      "dest": "object_creation_expression [25405,25492]"
    },
    {
      "src": "identifier: getField [24788,24796]",
      "dest": "identifier: getField [24788,24796]"
    },
    {
      "src": "throw_statement [26356,26463]",
      "dest": "throw_statement [26356,26463]"
    },
    {
      "src": "method_invocation [220215,220236]",
      "dest": "method_invocation [221709,221730]"
    },
    {
      "src": "identifier: end [168361,168364]",
      "dest": "identifier: end [169855,169858]"
    },
    {
      "src": "identifier: indexOf [50951,50958]",
      "dest": "identifier: indexOf [50951,50958]"
    },
    {
      "src": "expression_statement [161914,161950]",
      "dest": "expression_statement [163408,163444]"
    },
    {
      "src": "static: static [13662,13668]",
      "dest": "static: static [13662,13668]"
    },
    {
      "src": "local_variable_declaration [123471,123508]",
      "dest": "local_variable_declaration [124965,125002]"
    },
    {
      "src": "identifier: isEmpty [42292,42299]",
      "dest": "identifier: isEmpty [42292,42299]"
    },
    {
      "src": "comparison_operator: < [219762,219763]",
      "dest": "comparison_operator: < [221256,221257]"
    },
    {
      "src": "identifier: i [236288,236289]",
      "dest": "identifier: i [237782,237783]"
    },
    {
      "src": "local_variable_declaration [116822,116843]",
      "dest": "local_variable_declaration [118316,118337]"
    },
    {
      "src": "argument_list [115531,115563]",
      "dest": "argument_list [117025,117057]"
    },
    {
      "src": ":: : [212202,212203]",
      "dest": ":: : [213696,213697]"
    },
    {
      "src": "affectation_operator: = [75981,75982]",
      "dest": "affectation_operator: = [77475,77476]"
    },
    {
      "src": "method_invocation [75949,75961]",
      "dest": "method_invocation [77443,77455]"
    },
    {
      "src": "identifier: add [118846,118849]",
      "dest": "identifier: add [120340,120343]"
    },
    {
      "src": "identifier: open [91067,91071]",
      "dest": "identifier: open [92561,92565]"
    },
    {
      "src": "argument_list [225215,225217]",
      "dest": "argument_list [226709,226711]"
    },
    {
      "src": "block [40890,41015]",
      "dest": "block [40890,41015]"
    },
    {
      "src": "if_statement [123761,123946]",
      "dest": "if_statement [125255,125440]"
    },
    {
      "src": "identifier: list [124236,124240]",
      "dest": "identifier: list [125730,125734]"
    },
    {
      "src": "decimal_integer_literal: 0 [209241,209242]",
      "dest": "decimal_integer_literal: 0 [210735,210736]"
    },
    {
      "src": "logical_operator: || [63884,63886]",
      "dest": "logical_operator: || [64931,64933]"
    },
    {
      "src": "identifier: isEmpty [213922,213929]",
      "dest": "identifier: isEmpty [215416,215423]"
    },
    {
      "src": "parenthesized_expression [239802,239833]",
      "dest": "parenthesized_expression [241296,241327]"
    },
    {
      "src": "identifier: open [89393,89397]",
      "dest": "identifier: open [90887,90891]"
    },
    {
      "src": "identifier: output1 [175051,175058]",
      "dest": "identifier: output1 [176545,176552]"
    },
    {
      "src": "formal_parameter [239754,239767]",
      "dest": "formal_parameter [241248,241261]"
    },
    {
      "src": "\": \" [185436,185437]",
      "dest": "\": \" [186930,186931]"
    },
    {
      "src": "argument_list [173321,173334]",
      "dest": "argument_list [174815,174828]"
    },
    {
      "src": "ternary_expression [155277,155319]",
      "dest": "ternary_expression [156771,156813]"
    },
    {
      "src": "comparison_operator: == [239860,239862]",
      "dest": "comparison_operator: == [241354,241356]"
    },
    {
      "src": "parenthesized_expression [165667,165689]",
      "dest": "parenthesized_expression [167161,167183]"
    },
    {
      "src": "binary_expression [178020,178030]",
      "dest": "binary_expression [179514,179524]"
    },
    {
      "src": "method_invocation [118850,118873]",
      "dest": "method_invocation [120344,120367]"
    },
    {
      "src": "argument_list [18672,18691]",
      "dest": "argument_list [18672,18691]"
    },
    {
      "src": "method_invocation [86622,86661]",
      "dest": "method_invocation [88116,88155]"
    },
    {
      "src": "parenthesized_expression [231257,231297]",
      "dest": "parenthesized_expression [232751,232791]"
    },
    {
      "src": "identifier: sz [208183,208185]",
      "dest": "identifier: sz [209677,209679]"
    },
    {
      "src": "identifier: remove [144675,144681]",
      "dest": "identifier: remove [146169,146175]"
    },
    {
      "src": "identifier: LF [170119,170121]",
      "dest": "identifier: LF [171613,171615]"
    },
    {
      "src": "argument_list [219749,219751]",
      "dest": "argument_list [221243,221245]"
    },
    {
      "src": "assignment_expression [91518,91538]",
      "dest": "assignment_expression [93012,93032]"
    },
    {
      "src": "method_invocation [176875,176906]",
      "dest": "method_invocation [178369,178400]"
    },
    {
      "src": "binary_expression [190697,190710]",
      "dest": "binary_expression [192191,192204]"
    },
    {
      "src": "parenthesized_expression [149861,149936]",
      "dest": "parenthesized_expression [151355,151430]"
    },
    {
      "src": "return_statement [241064,241077]",
      "dest": "return_statement [242558,242571]"
    },
    {
      "src": "for_statement [53191,53341]",
      "dest": "for_statement [53191,53341]"
    },
    {
      "src": "formal_parameters [215469,215501]",
      "dest": "formal_parameters [216963,216995]"
    },
    {
      "src": "method_invocation [208142,208153]",
      "dest": "method_invocation [209636,209647]"
    },
    {
      "src": "identifier: substringAfterLast [86258,86276]",
      "dest": "identifier: substringAfterLast [87752,87770]"
    },
    {
      "src": "return_statement [90958,90995]",
      "dest": "return_statement [92452,92489]"
    },
    {
      "src": "identifier: str [191963,191966]",
      "dest": "identifier: str [193457,193460]"
    },
    {
      "src": "identifier: lastIndex [36418,36427]",
      "dest": "identifier: lastIndex [36418,36427]"
    },
    {
      "src": "continue_statement [72124,72133]",
      "dest": "continue_statement [73618,73627]"
    },
    {
      "src": "affectation_operator: = [170224,170225]",
      "dest": "affectation_operator: = [171718,171719]"
    },
    {
      "src": "character_literal: ' ' [202179,202182]",
      "dest": "character_literal: ' ' [203673,203676]"
    },
    {
      "src": "binary_expression [159483,159510]",
      "dest": "binary_expression [160977,161004]"
    },
    {
      "src": "comparison_operator: == [81694,81696]",
      "dest": "comparison_operator: == [83188,83190]"
    },
    {
      "src": "type: Object[] [130682,130690]",
      "dest": "type: Object[] [132176,132184]"
    },
    {
      "src": "type: int [37767,37770]",
      "dest": "type: int [37767,37770]"
    },
    {
      "src": "argument_list [209308,209311]",
      "dest": "argument_list [210802,210805]"
    },
    {
      "src": "block [208087,208124]",
      "dest": "block [209581,209618]"
    },
    {
      "src": "update_expression [72024,72027]",
      "dest": "update_expression [73518,73521]"
    },
    {
      "src": "formal_parameters [81445,81475]",
      "dest": "formal_parameters [82939,82969]"
    },
    {
      "src": "block [119183,119241]",
      "dest": "block [120677,120735]"
    },
    {
      "src": "type: boolean [227256,227263]",
      "dest": "type: boolean [228750,228757]"
    },
    {
      "src": "if_statement [79979,80062]",
      "dest": "if_statement [81473,81556]"
    },
    {
      "src": "binary_expression [64088,64131]",
      "dest": "binary_expression [65135,65178]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null)       = null\n     * StringUtils.split(\"\")         = []\n     * StringUtils.split(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\") = [\"abc\", \"def\"]\n     * StringUtils.split(\" abc \")    = [\"abc\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [91881,92760]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, using whitespace as the\n     * separator.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <p>The separator is not included in the returned String array.\n     * Adjacent separators are treated as one separator.\n     * For more control over the split use the StrTokenizer class.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.split(null)       = null\n     * StringUtils.split(\"\")         = []\n     * StringUtils.split(\"abc def\")  = [\"abc\", \"def\"]\n     * StringUtils.split(\"abc  def\") = [\"abc\", \"def\"]\n     * StringUtils.split(\" abc \")    = [\"abc\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     */ [93375,94254]"
    },
    {
      "src": "assignment_expression [182186,182219]",
      "dest": "assignment_expression [183680,183713]"
    },
    {
      "src": "parenthesized_expression [91561,91577]",
      "dest": "parenthesized_expression [93055,93071]"
    },
    {
      "src": "new: new [158776,158779]",
      "dest": "new: new [160270,160273]"
    },
    {
      "src": "comparison_operator: == [244204,244206]",
      "dest": "comparison_operator: == [245698,245700]"
    },
    {
      "src": "identifier: replace [147142,147149]",
      "dest": "identifier: replace [148636,148643]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes all occurrences of a character from within the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.</p>\n     *\n     * <pre>\n     * StringUtils.remove(null, *)       = null\n     * StringUtils.remove(\"\", *)         = \"\"\n     * StringUtils.remove(\"queued\", 'u') = \"qeed\"\n     * StringUtils.remove(\"queued\", 'z') = \"queued\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the char to search for and remove, may be null\n     * @return the substring with the char removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     */ [144706,145444]",
      "dest": "block_comment:     \n     * <p>Removes all occurrences of a character from within the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.</p>\n     *\n     * <pre>\n     * StringUtils.remove(null, *)       = null\n     * StringUtils.remove(\"\", *)         = \"\"\n     * StringUtils.remove(\"queued\", 'u') = \"qeed\"\n     * StringUtils.remove(\"queued\", 'z') = \"queued\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the char to search for and remove, may be null\n     * @return the substring with the char removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     */ [146200,146938]"
    },
    {
      "src": "identifier: cs [195467,195469]",
      "dest": "identifier: cs [196961,196963]"
    },
    {
      "src": "binary_expression [49407,49439]",
      "dest": "binary_expression [49407,49439]"
    },
    {
      "src": "identifier: buf [166187,166190]",
      "dest": "identifier: buf [167681,167684]"
    },
    {
      "src": "argument_list [219939,219956]",
      "dest": "argument_list [221433,221450]"
    },
    {
      "src": "identifier: tag [87722,87725]",
      "dest": "identifier: tag [89216,89219]"
    },
    {
      "src": "type: String [231063,231069]",
      "dest": "type: String [232557,232563]"
    },
    {
      "src": "false: false [53090,53095]",
      "dest": "false: false [53090,53095]"
    },
    {
      "src": "expression_statement [36531,36573]",
      "dest": "expression_statement [36531,36573]"
    },
    {
      "src": "identifier: searchString [148341,148353]",
      "dest": "identifier: searchString [149835,149847]"
    },
    {
      "src": "identifier: i [110964,110965]",
      "dest": "identifier: i [112458,112459]"
    },
    {
      "src": "arithmetic_operator: / [160912,160913]",
      "dest": "arithmetic_operator: / [162406,162407]"
    },
    {
      "src": "identifier: charAt [210345,210351]",
      "dest": "identifier: charAt [211839,211845]"
    },
    {
      "src": "identifier: substring [81769,81778]",
      "dest": "identifier: substring [83263,83272]"
    },
    {
      "src": "unary_expression [161888,161890]",
      "dest": "unary_expression [163382,163384]"
    },
    {
      "src": "identifier: length [174568,174574]",
      "dest": "identifier: length [176062,176068]"
    },
    {
      "src": "method_invocation [62338,62350]",
      "dest": "method_invocation [63077,63089]"
    },
    {
      "src": "comparison_operator: < [158423,158424]",
      "dest": "comparison_operator: < [159917,159918]"
    },
    {
      "src": "formal_parameter [127469,127483]",
      "dest": "formal_parameter [128963,128977]"
    },
    {
      "src": "identifier: pos [79929,79932]",
      "dest": "identifier: pos [81423,81426]"
    },
    {
      "src": "identifier: i [145713,145714]",
      "dest": "identifier: i [147207,147208]"
    },
    {
      "src": "modifiers [40831,40844]",
      "dest": "modifiers [40831,40844]"
    },
    {
      "src": "identifier: cs [61074,61076]",
      "dest": "identifier: cs [61533,61535]"
    },
    {
      "src": "type: String [141618,141624]",
      "dest": "type: String [143112,143118]"
    },
    {
      "src": "false: false [207068,207073]",
      "dest": "false: false [208562,208567]"
    },
    {
      "src": "comparison_operator: == [27505,27507]",
      "dest": "comparison_operator: == [27505,27507]"
    },
    {
      "src": "\": \" [26155,26156]",
      "dest": "\": \" [26155,26156]"
    },
    {
      "src": "unary_expression [159189,159191]",
      "dest": "unary_expression [160683,160685]"
    },
    {
      "src": "null_literal: null [27508,27512]",
      "dest": "null_literal: null [27508,27512]"
    },
    {
      "src": "return_statement [83336,83383]",
      "dest": "return_statement [84830,84877]"
    },
    {
      "src": "affectation_operator: = [160316,160317]",
      "dest": "affectation_operator: = [161810,161811]"
    },
    {
      "src": "string_literal [25426,25485]",
      "dest": "string_literal [25426,25485]"
    },
    {
      "src": "type: String [113317,113323]",
      "dest": "type: String [114811,114817]"
    },
    {
      "src": "binary_expression [39415,39426]",
      "dest": "binary_expression [39415,39426]"
    },
    {
      "src": "identifier: iae [25808,25811]",
      "dest": "identifier: iae [25808,25811]"
    },
    {
      "src": "parenthesized_expression [117985,118005]",
      "dest": "parenthesized_expression [119479,119499]"
    },
    {
      "src": "expression_statement [111024,111041]",
      "dest": "expression_statement [112518,112535]"
    },
    {
      "src": "affectation_operator: += [104891,104893]",
      "dest": "affectation_operator: += [106385,106387]"
    },
    {
      "src": "null_literal: null [51883,51887]",
      "dest": "null_literal: null [51883,51887]"
    },
    {
      "src": "method_invocation [21686,21706]",
      "dest": "method_invocation [21686,21706]"
    },
    {
      "src": "identifier: cs [211287,211289]",
      "dest": "identifier: cs [212781,212783]"
    },
    {
      "src": "method_invocation [175220,175233]",
      "dest": "method_invocation [176714,176727]"
    },
    {
      "src": "method_invocation [199906,199927]",
      "dest": "method_invocation [201400,201421]"
    },
    {
      "src": "method_invocation [45112,45157]",
      "dest": "method_invocation [45112,45157]"
    },
    {
      "src": "argument_list [127782,127784]",
      "dest": "argument_list [129276,129278]"
    },
    {
      "src": "type: int [45082,45085]",
      "dest": "type: int [45082,45085]"
    },
    {
      "src": "null_literal: null [196688,196692]",
      "dest": "null_literal: null [198182,198186]"
    },
    {
      "src": "block [196793,196838]",
      "dest": "block [198287,198332]"
    },
    {
      "src": "identifier: beg [106119,106122]",
      "dest": "identifier: beg [107613,107616]"
    },
    {
      "src": "identifier: toLowerCase [196910,196921]",
      "dest": "identifier: toLowerCase [198404,198415]"
    },
    {
      "src": "type: String[] [109606,109614]",
      "dest": "type: String[] [111100,111108]"
    },
    {
      "src": "block [209126,209406]",
      "dest": "block [210620,210900]"
    },
    {
      "src": "type: int [33441,33444]",
      "dest": "type: int [33441,33444]"
    },
    {
      "src": "formal_parameter [37789,37799]",
      "dest": "formal_parameter [37789,37799]"
    },
    {
      "src": "identifier: last [170257,170261]",
      "dest": "identifier: last [171751,171755]"
    },
    {
      "src": "expression_statement [235936,235945]",
      "dest": "expression_statement [237430,237439]"
    },
    {
      "src": "visibility: public [14677,14683]",
      "dest": "visibility: public [14677,14683]"
    },
    {
      "src": "parenthesized_expression [49630,49644]",
      "dest": "parenthesized_expression [49630,49644]"
    },
    {
      "src": "modifiers [29397,29410]",
      "dest": "modifiers [29397,29410]"
    },
    {
      "src": "arithmetic_operator: - [20577,20578]",
      "dest": "arithmetic_operator: - [20577,20578]"
    },
    {
      "src": "formal_parameters [78383,78404]",
      "dest": "formal_parameters [79877,79898]"
    },
    {
      "src": "line_comment: // cost [235882,235889]",
      "dest": "line_comment: // cost [237376,237383]"
    },
    {
      "src": "null_literal: null [244155,244159]",
      "dest": "null_literal: null [245649,245653]"
    },
    {
      "src": "method_invocation [239995,240055]",
      "dest": "method_invocation [241489,241549]"
    },
    {
      "src": "modifiers [240907,240920]",
      "dest": "modifiers [242401,242414]"
    },
    {
      "src": "identifier: lastMatch [118772,118781]",
      "dest": "identifier: lastMatch [120266,120275]"
    },
    {
      "src": "method_invocation [220204,220251]",
      "dest": "method_invocation [221698,221745]"
    },
    {
      "src": "null_literal: null [201986,201990]",
      "dest": "null_literal: null [203480,203484]"
    },
    {
      "src": "ternary_expression [36346,36388]",
      "dest": "ternary_expression [36346,36388]"
    },
    {
      "src": "null_literal: null [63893,63897]",
      "dest": "null_literal: null [64940,64944]"
    },
    {
      "src": "formal_parameter [177959,177971]",
      "dest": "formal_parameter [179453,179465]"
    },
    {
      "src": "binary_expression [231115,231147]",
      "dest": "binary_expression [232609,232641]"
    },
    {
      "src": "identifier: append [128046,128052]",
      "dest": "identifier: append [129540,129546]"
    },
    {
      "src": "identifier: result [176937,176943]",
      "dest": "identifier: result [178431,178437]"
    },
    {
      "src": "type: int [36012,36015]",
      "dest": "type: int [36012,36015]"
    },
    {
      "src": "return_statement [77311,77323]",
      "dest": "return_statement [78805,78817]"
    },
    {
      "src": "type: int [123716,123719]",
      "dest": "type: int [125210,125213]"
    },
    {
      "src": "for_statement [210273,210421]",
      "dest": "for_statement [211767,211915]"
    },
    {
      "src": "parenthesized_expression [86382,86402]",
      "dest": "parenthesized_expression [87876,87896]"
    },
    {
      "src": "variable_declarator [182047,182071]",
      "dest": "variable_declarator [183541,183565]"
    },
    {
      "src": "method_declaration [211137,211483]",
      "dest": "method_declaration [212631,212977]"
    },
    {
      "src": "string_fragment:  is less than 0:  [158507,158524]",
      "dest": "string_fragment:  is less than 0:  [160001,160018]"
    },
    {
      "src": "decimal_integer_literal: 3 [220149,220150]",
      "dest": "decimal_integer_literal: 3 [221643,221644]"
    },
    {
      "src": "field_access [155302,155319]",
      "dest": "field_access [156796,156813]"
    },
    {
      "src": "parenthesized_expression [209139,209151]",
      "dest": "parenthesized_expression [210633,210645]"
    },
    {
      "src": "method_invocation [201025,201037]",
      "dest": "method_invocation [202519,202531]"
    },
    {
      "src": "identifier: i [137201,137202]",
      "dest": "identifier: i [138695,138696]"
    },
    {
      "src": "identifier: length [241130,241136]",
      "dest": "identifier: length [242624,242630]"
    },
    {
      "src": "identifier: i [8827,8828]",
      "dest": "identifier: i [8827,8828]"
    },
    {
      "src": "type: String[] [157845,157853]",
      "dest": "type: String[] [159339,159347]"
    },
    {
      "src": "affectation_operator: = [161943,161944]",
      "dest": "affectation_operator: = [163437,163438]"
    },
    {
      "src": "\": \" [158489,158490]",
      "dest": "\": \" [159983,159984]"
    },
    {
      "src": "binary_expression [57674,57686]",
      "dest": "binary_expression [58014,58026]"
    },
    {
      "src": "decimal_integer_literal: 0 [158425,158426]",
      "dest": "decimal_integer_literal: 0 [159919,159920]"
    },
    {
      "src": "expression_statement [20622,20628]",
      "dest": "expression_statement [20622,20628]"
    },
    {
      "src": "binary_expression [222270,222283]",
      "dest": "binary_expression [223764,223777]"
    },
    {
      "src": "argument_list [166048,166052]",
      "dest": "argument_list [167542,167546]"
    },
    {
      "src": "binary_expression [144578,144609]",
      "dest": "binary_expression [146072,146103]"
    },
    {
      "src": "argument_list [140459,140461]",
      "dest": "argument_list [141953,141955]"
    },
    {
      "src": "identifier: charAt [165994,166000]",
      "dest": "identifier: charAt [167488,167494]"
    },
    {
      "src": "return_statement [225387,225396]",
      "dest": "return_statement [226881,226890]"
    },
    {
      "src": "null_literal: null [75650,75654]",
      "dest": "null_literal: null [77144,77148]"
    },
    {
      "src": "binary_expression [174487,174498]",
      "dest": "binary_expression [175981,175992]"
    },
    {
      "src": "local_variable_declaration [23176,23186]",
      "dest": "local_variable_declaration [23176,23186]"
    },
    {
      "src": "identifier: replacement [148297,148308]",
      "dest": "identifier: replacement [149791,149802]"
    },
    {
      "src": "variable_declarator [57501,57523]",
      "dest": "variable_declarator [57841,57863]"
    },
    {
      "src": "block [28492,28573]",
      "dest": "block [28492,28573]"
    },
    {
      "src": "string_literal [219524,219557]",
      "dest": "string_literal [221018,221051]"
    },
    {
      "src": "return_statement [150100,150112]",
      "dest": "return_statement [151594,151606]"
    },
    {
      "src": "static: static [87672,87678]",
      "dest": "static: static [89166,89172]"
    },
    {
      "src": "formal_parameter [40861,40871]",
      "dest": "formal_parameter [40861,40871]"
    },
    {
      "src": "identifier: array [125129,125134]",
      "dest": "identifier: array [126623,126628]"
    },
    {
      "src": "block [225274,225312]",
      "dest": "block [226768,226806]"
    },
    {
      "src": "arithmetic_operator: - [236289,236290]",
      "dest": "arithmetic_operator: - [237783,237784]"
    },
    {
      "src": "type: int [200964,200967]",
      "dest": "type: int [202458,202461]"
    },
    {
      "src": "identifier: str [143514,143517]",
      "dest": "identifier: str [145008,145011]"
    },
    {
      "src": "binary_expression [66647,66656]",
      "dest": "binary_expression [67766,67775]"
    },
    {
      "src": "decimal_integer_literal: 0 [161629,161630]",
      "dest": "decimal_integer_literal: 0 [163123,163124]"
    },
    {
      "src": "identifier: endsWith [171839,171847]",
      "dest": "identifier: endsWith [173333,173341]"
    },
    {
      "src": "identifier: buf [165886,165889]",
      "dest": "identifier: buf [167380,167383]"
    },
    {
      "src": "identifier: concat [185830,185836]",
      "dest": "identifier: concat [187324,187330]"
    },
    {
      "src": "formal_parameter [188858,188866]",
      "dest": "formal_parameter [190352,190360]"
    },
    {
      "src": "identifier: match [111172,111177]",
      "dest": "identifier: match [112666,112671]"
    },
    {
      "src": "affectation_operator: = [236040,236041]",
      "dest": "affectation_operator: = [237534,237535]"
    },
    {
      "src": "identifier: i [70026,70027]",
      "dest": "identifier: i [71520,71521]"
    },
    {
      "src": "type: String [215470,215476]",
      "dest": "type: String [216964,216970]"
    },
    {
      "src": "return_statement [180217,180269]",
      "dest": "return_statement [181711,181763]"
    },
    {
      "src": "block [117027,117646]",
      "dest": "block [118521,119140]"
    },
    {
      "src": "assignment_expression [162068,162089]",
      "dest": "assignment_expression [163562,163583]"
    },
    {
      "src": "identifier: tempIndex [162080,162089]",
      "dest": "identifier: tempIndex [163574,163583]"
    },
    {
      "src": "identifier: idx [199900,199903]",
      "dest": "identifier: idx [201394,201397]"
    },
    {
      "src": "identifier: cs [66566,66568]",
      "dest": "identifier: cs [67613,67615]"
    },
    {
      "src": "comparison_operator: < [166143,166144]",
      "dest": "comparison_operator: < [167637,167638]"
    },
    {
      "src": "method_invocation [60938,60949]",
      "dest": "method_invocation [61325,61336]"
    },
    {
      "src": "identifier: strLength [165950,165959]",
      "dest": "identifier: strLength [167444,167453]"
    },
    {
      "src": "binary_expression [235541,235544]",
      "dest": "binary_expression [237035,237038]"
    },
    {
      "src": "null_literal: null [123080,123084]",
      "dest": "null_literal: null [124574,124578]"
    },
    {
      "src": "type: String [136995,137001]",
      "dest": "type: String [138489,138495]"
    },
    {
      "src": "method_invocation [56036,56047]",
      "dest": "method_invocation [56382,56393]"
    },
    {
      "src": "decimal_integer_literal: 0 [168336,168337]",
      "dest": "decimal_integer_literal: 0 [169830,169831]"
    },
    {
      "src": "identifier: i [208239,208240]",
      "dest": "identifier: i [209733,209734]"
    },
    {
      "src": "comparison_operator: == [51901,51903]",
      "dest": "comparison_operator: == [51901,51903]"
    },
    {
      "src": "comparison_operator: == [36111,36113]",
      "dest": "comparison_operator: == [36111,36113]"
    },
    {
      "src": "identifier: rightPad [181347,181355]",
      "dest": "identifier: rightPad [182841,182849]"
    },
    {
      "src": "identifier: separator [104357,104366]",
      "dest": "identifier: separator [105851,105860]"
    },
    {
      "src": "method_invocation [165803,165824]",
      "dest": "method_invocation [167297,167318]"
    },
    {
      "src": "identifier: arrayPos [228608,228616]",
      "dest": "identifier: arrayPos [230102,230110]"
    },
    {
      "src": "return_statement [185816,185842]",
      "dest": "return_statement [187310,187336]"
    },
    {
      "src": "logical_operator: && [208253,208255]",
      "dest": "logical_operator: && [209747,209749]"
    },
    {
      "src": "formal_parameter [35137,35153]",
      "dest": "formal_parameter [35137,35153]"
    },
    {
      "src": "argument_list [195610,195612]",
      "dest": "argument_list [197104,197106]"
    },
    {
      "src": "comparison_operator: == [201039,201041]",
      "dest": "comparison_operator: == [202533,202535]"
    },
    {
      "src": "affectation_operator: = [223845,223846]",
      "dest": "affectation_operator: = [225339,225340]"
    },
    {
      "src": "type: int [205761,205764]",
      "dest": "type: int [207255,207258]"
    },
    {
      "src": "expression_statement [159759,159795]",
      "dest": "expression_statement [161253,161289]"
    },
    {
      "src": "identifier: toArray [124217,124224]",
      "dest": "identifier: toArray [125711,125718]"
    },
    {
      "src": "identifier: openLen [91335,91342]",
      "dest": "identifier: openLen [92829,92836]"
    },
    {
      "src": "argument_list [78625,78645]",
      "dest": "argument_list [80119,80139]"
    },
    {
      "src": "block [8061,8109]",
      "dest": "block [8061,8109]"
    },
    {
      "src": "identifier: str [109699,109702]",
      "dest": "identifier: str [111193,111196]"
    },
    {
      "src": "formal_parameter [57352,57367]",
      "dest": "formal_parameter [54465,54480]"
    },
    {
      "src": "formal_parameter [227134,227152]",
      "dest": "formal_parameter [228628,228646]"
    },
    {
      "src": "assignment_expression [150642,150681]",
      "dest": "assignment_expression [152136,152175]"
    },
    {
      "src": "identifier: i [162314,162315]",
      "dest": "identifier: i [163808,163809]"
    },
    {
      "src": "parenthesized_expression [192714,192727]",
      "dest": "parenthesized_expression [194208,194221]"
    },
    {
      "src": "string_fragment: InvocationTargetException occurred during 1.6 backcompat code [26094,26155]",
      "dest": "string_fragment: InvocationTargetException occurred during 1.6 backcompat code [26094,26155]"
    },
    {
      "src": "if_statement [90795,90883]",
      "dest": "if_statement [92289,92377]"
    },
    {
      "src": "formal_parameters [96731,96775]",
      "dest": "formal_parameters [98225,98269]"
    },
    {
      "src": "array_creation_expression [91644,91668]",
      "dest": "array_creation_expression [93138,93162]"
    },
    {
      "src": "local_variable_declaration [228525,228572]",
      "dest": "local_variable_declaration [230019,230066]"
    },
    {
      "src": "parenthesized_expression [181742,181776]",
      "dest": "parenthesized_expression [183236,183270]"
    },
    {
      "src": "false: false [201074,201079]",
      "dest": "false: false [202568,202573]"
    },
    {
      "src": "formal_parameter [163633,163649]",
      "dest": "formal_parameter [165127,165143]"
    },
    {
      "src": "comparison_operator: == [171778,171780]",
      "dest": "comparison_operator: == [173272,173274]"
    },
    {
      "src": "type: String[] [155102,155110]",
      "dest": "type: String[] [156596,156604]"
    },
    {
      "src": "block [143337,143372]",
      "dest": "block [144831,144866]"
    },
    {
      "src": "identifier: str2 [223696,223700]",
      "dest": "identifier: str2 [225190,225194]"
    },
    {
      "src": "block [51862,51997]",
      "dest": "block [51862,51997]"
    },
    {
      "src": "block_comment:     \n     * <p>Check if a String ends with a specified suffix.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.endsWith(null, null)      = true\n     * StringUtils.endsWith(null, \"def\")     = false\n     * StringUtils.endsWith(\"abcdef\", null)  = false\n     * StringUtils.endsWith(\"abcdef\", \"def\") = true\n     * StringUtils.endsWith(\"ABCDEF\", \"def\") = false\n     * StringUtils.endsWith(\"ABCDEF\", \"cde\") = false\n     * </pre>\n     *\n     * @see java.lang.String#endsWith(String)\n     * @param str  the String to check, may be null\n     * @param suffix the suffix to find, may be null\n     * @return <code>true</code> if the String ends with the suffix, case sensitive, or\n     *  both <code>null</code>\n     * @since 2.4\n     */ [241442,242334]",
      "dest": "block_comment:     \n     * <p>Check if a String ends with a specified suffix.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered to be equal. The comparison is case sensitive.</p>\n     *\n     * <pre>\n     * StringUtils.endsWith(null, null)      = true\n     * StringUtils.endsWith(null, \"def\")     = false\n     * StringUtils.endsWith(\"abcdef\", null)  = false\n     * StringUtils.endsWith(\"abcdef\", \"def\") = true\n     * StringUtils.endsWith(\"ABCDEF\", \"def\") = false\n     * StringUtils.endsWith(\"ABCDEF\", \"cde\") = false\n     * </pre>\n     *\n     * @see java.lang.String#endsWith(String)\n     * @param str  the String to check, may be null\n     * @param suffix the suffix to find, may be null\n     * @return <code>true</code> if the String ends with the suffix, case sensitive, or\n     *  both <code>null</code>\n     * @since 2.4\n     */ [242936,243828]"
    },
    {
      "src": "argument_list [150726,150733]",
      "dest": "argument_list [152220,152227]"
    },
    {
      "src": "identifier: builder [222415,222422]",
      "dest": "identifier: builder [223909,223916]"
    },
    {
      "src": "catch_clause [25993,26177]",
      "dest": "catch_clause [25993,26177]"
    },
    {
      "src": "dimensions_expr [111365,111378]",
      "dest": "dimensions_expr [112859,112872]"
    },
    {
      "src": "if_statement [204281,204334]",
      "dest": "if_statement [205775,205828]"
    },
    {
      "src": "true: true [201120,201124]",
      "dest": "true: true [202614,202618]"
    },
    {
      "src": "argument_list [40996,41008]",
      "dest": "argument_list [40996,41008]"
    },
    {
      "src": "identifier: length [222078,222084]",
      "dest": "identifier: length [223572,223578]"
    },
    {
      "src": "identifier: str [180117,180120]",
      "dest": "identifier: str [181611,181614]"
    },
    {
      "src": "assignment_expression [159759,159794]",
      "dest": "assignment_expression [161253,161288]"
    },
    {
      "src": "expression_statement [175377,175394]",
      "dest": "expression_statement [176871,176888]"
    },
    {
      "src": "static: static [84614,84620]",
      "dest": "static: static [86108,86114]"
    },
    {
      "src": "binary_expression [49705,49728]",
      "dest": "binary_expression [49705,49728]"
    },
    {
      "src": "identifier: i [161940,161941]",
      "dest": "identifier: i [163434,163435]"
    },
    {
      "src": "argument_list [158473,158533]",
      "dest": "argument_list [159967,160027]"
    },
    {
      "src": "identifier: splitPreserveAllTokens [107716,107738]",
      "dest": "identifier: splitPreserveAllTokens [109210,109232]"
    },
    {
      "src": "method_invocation [83230,83252]",
      "dest": "method_invocation [84724,84746]"
    },
    {
      "src": "identifier: str [20562,20565]",
      "dest": "identifier: str [20562,20565]"
    },
    {
      "src": "method_invocation [171752,171764]",
      "dest": "method_invocation [173246,173258]"
    },
    {
      "src": "affectation_operator: = [66685,66686]",
      "dest": "affectation_operator: = [67804,67805]"
    },
    {
      "src": "identifier: charAt [236010,236016]",
      "dest": "identifier: charAt [237504,237510]"
    },
    {
      "src": "identifier: stripChars [22986,22996]",
      "dest": "identifier: stripChars [22986,22996]"
    },
    {
      "src": "parenthesized_expression [174486,174499]",
      "dest": "parenthesized_expression [175980,175993]"
    },
    {
      "src": "variable_declarator [189005,189025]",
      "dest": "variable_declarator [190499,190519]"
    },
    {
      "src": "identifier: end [104730,104733]",
      "dest": "identifier: end [106224,106227]"
    },
    {
      "src": "affectation_operator: = [110717,110718]",
      "dest": "affectation_operator: = [112211,112212]"
    },
    {
      "src": "argument_list [17249,17266]",
      "dest": "argument_list [17249,17266]"
    },
    {
      "src": "formal_parameters [9592,9609]",
      "dest": "formal_parameters [9592,9609]"
    },
    {
      "src": "return_statement [47848,47871]",
      "dest": "return_statement [47848,47871]"
    },
    {
      "src": "variable_declarator [71983,71990]",
      "dest": "variable_declarator [73477,73484]"
    },
    {
      "src": "identifier: str [84867,84870]",
      "dest": "identifier: str [86361,86364]"
    },
    {
      "src": "increment_operator: ++ [111199,111201]",
      "dest": "increment_operator: ++ [112693,112695]"
    },
    {
      "src": "null_literal: null [174432,174436]",
      "dest": "null_literal: null [175926,175930]"
    },
    {
      "src": "static: static [92772,92778]",
      "dest": "static: static [94266,94272]"
    },
    {
      "src": "null_literal: null [192749,192753]",
      "dest": "null_literal: null [194243,194247]"
    },
    {
      "src": "identifier: substring [20672,20681]",
      "dest": "identifier: substring [20672,20681]"
    },
    {
      "src": "binary_expression [39430,39447]",
      "dest": "binary_expression [39430,39447]"
    },
    {
      "src": "identifier: timeToLive [157930,157940]",
      "dest": "identifier: timeToLive [159424,159434]"
    },
    {
      "src": "type: UnsupportedOperationException [26366,26395]",
      "dest": "type: UnsupportedOperationException [26366,26395]"
    },
    {
      "src": "identifier: charAt [118542,118548]",
      "dest": "identifier: charAt [120036,120042]"
    },
    {
      "src": "method_declaration [116277,119301]",
      "dest": "method_declaration [117771,120795]"
    },
    {
      "src": "local_variable_declaration [235119,235138]",
      "dest": "local_variable_declaration [236613,236632]"
    },
    {
      "src": "block_comment:     \n     * <p>Repeat a String <code>repeat</code> times to form a\n     * new String, with a String separator injected each time. </p>\n     *\n     * <pre>\n     * StringUtils.repeat(null, null, 2) = null\n     * StringUtils.repeat(null, \"x\", 2)  = null\n     * StringUtils.repeat(\"\", null, 0)   = \"\"\n     * StringUtils.repeat(\"\", \"\", 2)     = \"\"\n     * StringUtils.repeat(\"\", \"x\", 3)    = \"xxx\"\n     * StringUtils.repeat(\"?\", \", \", 3)  = \"?, ?, ?\"\n     * </pre>\n     *\n     * @param str        the String to repeat, may be null\n     * @param separator  the String to inject, may be null\n     * @param repeat     number of times to repeat str, negative treated as zero\n     * @return a new String consisting of the original String repeated,\n     *  <code>null</code> if null String input\n     */ [175756,176546]",
      "dest": "block_comment:     \n     * <p>Repeat a String <code>repeat</code> times to form a\n     * new String, with a String separator injected each time. </p>\n     *\n     * <pre>\n     * StringUtils.repeat(null, null, 2) = null\n     * StringUtils.repeat(null, \"x\", 2)  = null\n     * StringUtils.repeat(\"\", null, 0)   = \"\"\n     * StringUtils.repeat(\"\", \"\", 2)     = \"\"\n     * StringUtils.repeat(\"\", \"x\", 3)    = \"xxx\"\n     * StringUtils.repeat(\"?\", \", \", 3)  = \"?, ?, ?\"\n     * </pre>\n     *\n     * @param str        the String to repeat, may be null\n     * @param separator  the String to inject, may be null\n     * @param repeat     number of times to repeat str, negative treated as zero\n     * @return a new String consisting of the original String repeated,\n     *  <code>null</code> if null String input\n     */ [177250,178040]"
    },
    {
      "src": "binary_expression [127714,127739]",
      "dest": "binary_expression [129208,129233]"
    },
    {
      "src": "identifier: pos [123736,123739]",
      "dest": "identifier: pos [125230,125233]"
    },
    {
      "src": "return_statement [106384,106441]",
      "dest": "return_statement [107878,107935]"
    },
    {
      "src": "identifier: max [103212,103215]",
      "dest": "identifier: max [104706,104709]"
    },
    {
      "src": "modifiers [212903,212916]",
      "dest": "modifiers [214397,214410]"
    },
    {
      "src": "identifier: size [124241,124245]",
      "dest": "identifier: size [125735,125739]"
    },
    {
      "src": "argument_list [174913,174916]",
      "dest": "argument_list [176407,176410]"
    },
    {
      "src": "identifier: count [199963,199968]",
      "dest": "identifier: count [201457,201462]"
    },
    {
      "src": "identifier: append [168611,168617]",
      "dest": "identifier: append [170105,170111]"
    },
    {
      "src": "assignment_expression [72236,72245]",
      "dest": "assignment_expression [73730,73739]"
    },
    {
      "src": "block [205889,205934]",
      "dest": "block [207383,207428]"
    },
    {
      "src": "identifier: str [39852,39855]",
      "dest": "identifier: str [39852,39855]"
    },
    {
      "src": "decimal_integer_literal: 0 [236125,236126]",
      "dest": "decimal_integer_literal: 0 [237619,237620]"
    },
    {
      "src": "decimal_integer_literal: 1 [159851,159852]",
      "dest": "decimal_integer_literal: 1 [161345,161346]"
    },
    {
      "src": "local_variable_declaration [8687,8698]",
      "dest": "local_variable_declaration [8687,8698]"
    },
    {
      "src": "argument_list [54762,54765]",
      "dest": "argument_list [58066,58069]"
    },
    {
      "src": "array_access [235936,235940]",
      "dest": "array_access [237430,237434]"
    },
    {
      "src": "identifier: chars [145736,145741]",
      "dest": "identifier: chars [147230,147235]"
    },
    {
      "src": "logical_operator: && [18647,18649]",
      "dest": "logical_operator: && [18647,18649]"
    },
    {
      "src": "identifier: start [110957,110962]",
      "dest": "identifier: start [112451,112456]"
    },
    {
      "src": "update_expression [61131,61134]",
      "dest": "update_expression [61590,61593]"
    },
    {
      "src": "binary_expression [201006,201047]",
      "dest": "binary_expression [202500,202541]"
    },
    {
      "src": "if_statement [219457,219569]",
      "dest": "if_statement [220951,221063]"
    },
    {
      "src": "argument_list [133055,133060]",
      "dest": "argument_list [134549,134554]"
    },
    {
      "src": "argument_list [126215,126250]",
      "dest": "argument_list [127709,127744]"
    },
    {
      "src": "identifier: separator [129208,129217]",
      "dest": "identifier: separator [130702,130711]"
    },
    {
      "src": "return_statement [18793,18804]",
      "dest": "return_statement [18793,18804]"
    },
    {
      "src": "arithmetic_operator: - [170239,170240]",
      "dest": "arithmetic_operator: - [171733,171734]"
    },
    {
      "src": "argument_list [30832,30854]",
      "dest": "argument_list [30832,30854]"
    },
    {
      "src": "argument_list [131479,131490]",
      "dest": "argument_list [132973,132984]"
    },
    {
      "src": "argument_list [163741,163766]",
      "dest": "argument_list [165235,165260]"
    },
    {
      "src": "identifier: iae [25696,25699]",
      "dest": "identifier: iae [25696,25699]"
    },
    {
      "src": "identifier: min [236253,236256]",
      "dest": "identifier: min [237747,237750]"
    },
    {
      "src": "identifier: length [116640,116646]",
      "dest": "identifier: length [118134,118140]"
    },
    {
      "src": "binary_expression [15837,15848]",
      "dest": "binary_expression [15837,15848]"
    },
    {
      "src": "comparison_operator: < [117020,117021]",
      "dest": "comparison_operator: < [118514,118515]"
    },
    {
      "src": "decimal_integer_literal: 0 [104278,104279]",
      "dest": "decimal_integer_literal: 0 [105772,105773]"
    },
    {
      "src": "block [20507,20652]",
      "dest": "block [20507,20652]"
    },
    {
      "src": "binary_expression [23049,23077]",
      "dest": "binary_expression [23049,23077]"
    },
    {
      "src": "identifier: rightPad [179924,179932]",
      "dest": "identifier: rightPad [181418,181426]"
    },
    {
      "src": "identifier: searchStr [39376,39385]",
      "dest": "identifier: searchStr [39376,39385]"
    },
    {
      "src": "identifier: str [49513,49516]",
      "dest": "identifier: str [49513,49516]"
    },
    {
      "src": "block [72106,72147]",
      "dest": "block [73600,73641]"
    },
    {
      "src": "method_invocation [244428,244443]",
      "dest": "method_invocation [245922,245937]"
    },
    {
      "src": "type: CharSequence [210139,210151]",
      "dest": "type: CharSequence [211633,211645]"
    },
    {
      "src": "null_literal: null [13722,13726]",
      "dest": "null_literal: null [13722,13726]"
    },
    {
      "src": "identifier: array [126143,126148]",
      "dest": "identifier: array [127637,127642]"
    },
    {
      "src": "update_expression [66658,66661]",
      "dest": "update_expression [67777,67780]"
    },
    {
      "src": "binary_expression [86499,86521]",
      "dest": "binary_expression [87993,88015]"
    },
    {
      "src": "argument_list [168617,168642]",
      "dest": "argument_list [170111,170136]"
    },
    {
      "src": "method_invocation [91029,91043]",
      "dest": "method_invocation [92523,92537]"
    },
    {
      "src": "block_comment:     \n     * <p>Replaces multiple characters in a String in one go.\n     * This method can also be used to delete characters.</p>\n     *\n     * <p>For example:<br />\n     * <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p>\n     *\n     * <p>A <code>null</code> string input returns <code>null</code>.\n     * An empty (\"\") string input returns an empty string.\n     * A null or empty set of search characters returns the input string.</p>\n     *\n     * <p>The length of the search characters should normally equal the length\n     * of the replace characters.\n     * If the search characters is longer, then the extra search characters\n     * are deleted.\n     * If the search characters is shorter, then the extra replace characters\n     * are ignored.</p>\n     *\n     * <pre>\n     * StringUtils.replaceChars(null, *, *)           = null\n     * StringUtils.replaceChars(\"\", *, *)             = \"\"\n     * StringUtils.replaceChars(\"abc\", null, *)       = \"abc\"\n     * StringUtils.replaceChars(\"abc\", \"\", *)         = \"abc\"\n     * StringUtils.replaceChars(\"abc\", \"b\", null)     = \"ac\"\n     * StringUtils.replaceChars(\"abc\", \"b\", \"\")       = \"ac\"\n     * StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\")  = \"ayzya\"\n     * StringUtils.replaceChars(\"abcba\", \"bc\", \"y\")   = \"ayya\"\n     * StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\") = \"ayzya\"\n     * </pre>\n     *\n     * @param str  String to replace characters in, may be null\n     * @param searchChars  a set of characters to search for, may be null\n     * @param replaceChars  a set of characters to replace, may be null\n     * @return modified String, <code>null</code> if null string input\n     * @since 2.0\n     */ [163779,165476]",
      "dest": "block_comment:     \n     * <p>Replaces multiple characters in a String in one go.\n     * This method can also be used to delete characters.</p>\n     *\n     * <p>For example:<br />\n     * <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p>\n     *\n     * <p>A <code>null</code> string input returns <code>null</code>.\n     * An empty (\"\") string input returns an empty string.\n     * A null or empty set of search characters returns the input string.</p>\n     *\n     * <p>The length of the search characters should normally equal the length\n     * of the replace characters.\n     * If the search characters is longer, then the extra search characters\n     * are deleted.\n     * If the search characters is shorter, then the extra replace characters\n     * are ignored.</p>\n     *\n     * <pre>\n     * StringUtils.replaceChars(null, *, *)           = null\n     * StringUtils.replaceChars(\"\", *, *)             = \"\"\n     * StringUtils.replaceChars(\"abc\", null, *)       = \"abc\"\n     * StringUtils.replaceChars(\"abc\", \"\", *)         = \"abc\"\n     * StringUtils.replaceChars(\"abc\", \"b\", null)     = \"ac\"\n     * StringUtils.replaceChars(\"abc\", \"b\", \"\")       = \"ac\"\n     * StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\")  = \"ayzya\"\n     * StringUtils.replaceChars(\"abcba\", \"bc\", \"y\")   = \"ayya\"\n     * StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\") = \"ayzya\"\n     * </pre>\n     *\n     * @param str  String to replace characters in, may be null\n     * @param searchChars  a set of characters to search for, may be null\n     * @param replaceChars  a set of characters to replace, may be null\n     * @return modified String, <code>null</code> if null string input\n     * @since 2.0\n     */ [165273,166970]"
    },
    {
      "src": "method_declaration [149756,150772]",
      "dest": "method_declaration [151250,152266]"
    },
    {
      "src": "identifier: i [186072,186073]",
      "dest": "identifier: i [187566,187567]"
    },
    {
      "src": "binary_expression [150194,150227]",
      "dest": "binary_expression [151688,151721]"
    },
    {
      "src": "formal_parameter [122065,122075]",
      "dest": "formal_parameter [123559,123569]"
    },
    {
      "src": "type: int [173144,173147]",
      "dest": "type: int [174638,174641]"
    },
    {
      "src": "identifier: searchStr [49705,49714]",
      "dest": "identifier: searchStr [49705,49714]"
    },
    {
      "src": "affectation_operator: = [196772,196773]",
      "dest": "affectation_operator: = [198266,198267]"
    },
    {
      "src": "line_comment: // Character access: [5470,5490]",
      "dest": "line_comment: // Character access: [5470,5490]"
    },
    {
      "src": "argument_list [56043,56047]",
      "dest": "argument_list [56389,56393]"
    },
    {
      "src": "identifier: str [20136,20139]",
      "dest": "identifier: str [20136,20139]"
    },
    {
      "src": "identifier: EMPTY [106043,106048]",
      "dest": "identifier: EMPTY [107537,107542]"
    },
    {
      "src": "identifier: size [185299,185303]",
      "dest": "identifier: size [186793,186797]"
    },
    {
      "src": "identifier: array [129233,129238]",
      "dest": "identifier: array [130727,130732]"
    },
    {
      "src": "affectation_operator: = [227278,227279]",
      "dest": "affectation_operator: = [228772,228773]"
    },
    {
      "src": "binary_expression [202116,202157]",
      "dest": "binary_expression [203610,203651]"
    },
    {
      "src": "parenthesized_expression [168418,168431]",
      "dest": "parenthesized_expression [169912,169925]"
    },
    {
      "src": "affectation_operator: = [175319,175320]",
      "dest": "affectation_operator: = [176813,176814]"
    },
    {
      "src": "method_declaration [37753,37879]",
      "dest": "method_declaration [37753,37879]"
    },
    {
      "src": "variable_declarator [23133,23161]",
      "dest": "variable_declarator [23133,23161]"
    },
    {
      "src": "type: int [46507,46510]",
      "dest": "type: int [46507,46510]"
    },
    {
      "src": "static: static [133753,133759]",
      "dest": "static: static [135247,135253]"
    },
    {
      "src": "identifier: org.apache.commons.lang3 [813,837]",
      "dest": "identifier: org.apache.commons.lang3 [813,837]"
    },
    {
      "src": "affectation_operator: = [189154,189155]",
      "dest": "affectation_operator: = [190648,190649]"
    },
    {
      "src": "type: StringBuilder [195643,195656]",
      "dest": "type: StringBuilder [197137,197150]"
    },
    {
      "src": "identifier: i [118871,118872]",
      "dest": "identifier: i [120365,120366]"
    },
    {
      "src": "identifier: text [158528,158532]",
      "dest": "identifier: text [160022,160026]"
    },
    {
      "src": "method_invocation [141815,141830]",
      "dest": "method_invocation [143309,143324]"
    },
    {
      "src": "increment_operator: ++ [228637,228639]",
      "dest": "increment_operator: ++ [230131,230133]"
    },
    {
      "src": "identifier: str [46678,46681]",
      "dest": "identifier: str [46678,46681]"
    },
    {
      "src": "identifier: i [236278,236279]",
      "dest": "identifier: i [237772,237773]"
    },
    {
      "src": "local_variable_declaration [39797,39814]",
      "dest": "local_variable_declaration [39797,39814]"
    },
    {
      "src": "return_statement [76098,76111]",
      "dest": "return_statement [77592,77605]"
    },
    {
      "src": "block [104850,105618]",
      "dest": "block [106344,107112]"
    },
    {
      "src": "modifiers [33427,33440]",
      "dest": "modifiers [33427,33440]"
    },
    {
      "src": "line_comment: // the character at the position 'end'. [105193,105232]",
      "dest": "line_comment: // the character at the position 'end'. [106687,106726]"
    },
    {
      "src": "method_invocation [14800,14816]",
      "dest": "method_invocation [14800,14816]"
    },
    {
      "src": "identifier: append [161156,161162]",
      "dest": "identifier: append [162650,162656]"
    },
    {
      "src": "comparison_operator: == [36132,36134]",
      "dest": "comparison_operator: == [36132,36134]"
    },
    {
      "src": "identifier: length [123442,123448]",
      "dest": "identifier: length [124936,124942]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [53399,53472]",
      "dest": "line_comment: //----------------------------------------------------------------------- [53399,53472]"
    },
    {
      "src": "argument_list [39734,39736]",
      "dest": "argument_list [39734,39736]"
    },
    {
      "src": "type: String [238078,238084]",
      "dest": "type: String [239572,239578]"
    },
    {
      "src": "comparison_operator: == [194534,194536]",
      "dest": "comparison_operator: == [196028,196030]"
    },
    {
      "src": "identifier: substrings [105257,105267]",
      "dest": "identifier: substrings [106751,106761]"
    },
    {
      "src": "identifier: EMPTY [12685,12690]",
      "dest": "identifier: EMPTY [12685,12690]"
    },
    {
      "src": "identifier: closeLen [91530,91538]",
      "dest": "identifier: closeLen [93024,93032]"
    },
    {
      "src": "identifier: length [140453,140459]",
      "dest": "identifier: length [141947,141953]"
    },
    {
      "src": "binary_expression [141800,141830]",
      "dest": "binary_expression [143294,143324]"
    },
    {
      "src": "if_statement [174483,174537]",
      "dest": "if_statement [175977,176031]"
    },
    {
      "src": "null_literal: null [92834,92838]",
      "dest": "null_literal: null [94328,94332]"
    },
    {
      "src": "affectation_operator: = [118782,118783]",
      "dest": "affectation_operator: = [120276,120277]"
    },
    {
      "src": "identifier: cs [8099,8101]",
      "dest": "identifier: cs [8099,8101]"
    },
    {
      "src": "continue_statement [111105,111114]",
      "dest": "continue_statement [112599,112608]"
    },
    {
      "src": "argument_list [24003,24009]",
      "dest": "argument_list [24003,24009]"
    },
    {
      "src": "method_invocation [59638,59663]",
      "dest": "method_invocation [60025,60050]"
    },
    {
      "src": "variable_declarator [23180,23185]",
      "dest": "variable_declarator [23180,23185]"
    },
    {
      "src": "identifier: max [118001,118004]",
      "dest": "identifier: max [119495,119498]"
    },
    {
      "src": "identifier: str [123073,123076]",
      "dest": "identifier: str [124567,124570]"
    },
    {
      "src": "update_expression [39829,39832]",
      "dest": "update_expression [39829,39832]"
    },
    {
      "src": "method_declaration [8011,8109]",
      "dest": "method_declaration [8011,8109]"
    },
    {
      "src": "method_declaration [54436,55033]",
      "dest": "method_declaration [54436,55379]"
    },
    {
      "src": "method_declaration [15774,15882]",
      "dest": "method_declaration [15774,15882]"
    },
    {
      "src": "type: String [183877,183883]",
      "dest": "type: String [185371,185377]"
    },
    {
      "src": "identifier: EMPTY [131149,131154]",
      "dest": "identifier: EMPTY [132643,132648]"
    },
    {
      "src": "binary_expression [208211,208251]",
      "dest": "binary_expression [209705,209745]"
    },
    {
      "src": "type: int [203179,203182]",
      "dest": "type: int [204673,204676]"
    },
    {
      "src": "identifier: greater [160691,160698]",
      "dest": "identifier: greater [162185,162192]"
    },
    {
      "src": "parenthesized_expression [181935,181950]",
      "dest": "parenthesized_expression [183429,183444]"
    },
    {
      "src": "visibility: public [172937,172943]",
      "dest": "visibility: public [174431,174437]"
    },
    {
      "src": "type: int [71979,71982]",
      "dest": "type: int [73473,73476]"
    },
    {
      "src": "identifier: method [24884,24890]",
      "dest": "identifier: method [24884,24890]"
    },
    {
      "src": "identifier: lastIndexOf [42373,42384]",
      "dest": "identifier: lastIndexOf [42373,42384]"
    },
    {
      "src": "if_statement [75612,75665]",
      "dest": "if_statement [77106,77159]"
    },
    {
      "src": "parenthesized_expression [117017,117026]",
      "dest": "parenthesized_expression [118511,118520]"
    },
    {
      "src": "method_invocation [170226,170238]",
      "dest": "method_invocation [171720,171732]"
    },
    {
      "src": "variable_declarator [175551,175588]",
      "dest": "variable_declarator [177045,177082]"
    },
    {
      "src": ":: : [175519,175520]",
      "dest": ":: : [177013,177014]"
    },
    {
      "src": "identifier: str [105946,105949]",
      "dest": "identifier: str [107440,107443]"
    },
    {
      "src": "identifier: startIndex [127489,127499]",
      "dest": "identifier: startIndex [128983,128993]"
    },
    {
      "src": "argument_list [148334,148371]",
      "dest": "argument_list [149828,149865]"
    },
    {
      "src": "identifier: tokenStart [123418,123428]",
      "dest": "identifier: tokenStart [124912,124922]"
    },
    {
      "src": "method_invocation [91656,91667]",
      "dest": "method_invocation [93150,93161]"
    },
    {
      "src": "identifier: replaceEach [152572,152583]",
      "dest": "identifier: replaceEach [154066,154077]"
    },
    {
      "src": "increment_operator: ++ [225219,225221]",
      "dest": "increment_operator: ++ [226713,226715]"
    },
    {
      "src": "identifier: CharUtils [170365,170374]",
      "dest": "identifier: CharUtils [171859,171868]"
    },
    {
      "src": "static: static [57325,57331]",
      "dest": "static: static [54443,54449]"
    },
    {
      "src": "identifier: getLevenshteinDistance [233721,233743]",
      "dest": "identifier: getLevenshteinDistance [235215,235237]"
    },
    {
      "src": "identifier: start [75854,75859]",
      "dest": "identifier: start [77348,77353]"
    },
    {
      "src": "line_comment: // NOTE: logic duplicated below START [159306,159343]",
      "dest": "line_comment: // NOTE: logic duplicated below START [160800,160837]"
    },
    {
      "src": "type: String [187716,187722]",
      "dest": "type: String [189210,189216]"
    },
    {
      "src": "method_declaration [17061,17273]",
      "dest": "method_declaration [17061,17273]"
    },
    {
      "src": "identifier: length [90909,90915]",
      "dest": "identifier: length [92403,92409]"
    },
    {
      "src": "argument_list [137273,137276]",
      "dest": "argument_list [138767,138770]"
    },
    {
      "src": "variable_declarator [83224,83252]",
      "dest": "variable_declarator [84718,84746]"
    },
    {
      "src": "type: RuntimeException [26076,26092]",
      "dest": "type: RuntimeException [26076,26092]"
    },
    {
      "src": "binary_expression [111225,111266]",
      "dest": "binary_expression [112719,112760]"
    },
    {
      "src": "binary_expression [137208,137214]",
      "dest": "binary_expression [138702,138708]"
    },
    {
      "src": "identifier: tempIndex [159724,159733]",
      "dest": "identifier: tempIndex [161218,161227]"
    },
    {
      "src": "new: new [124146,124149]",
      "dest": "new: new [125640,125643]"
    },
    {
      "src": "binary_expression [180085,180094]",
      "dest": "binary_expression [181579,181588]"
    },
    {
      "src": "method_declaration [18375,19015]",
      "dest": "method_declaration [18375,19015]"
    },
    {
      "src": "identifier: stripChars [20282,20292]",
      "dest": "identifier: stripChars [20282,20292]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets the rightmost <code>len</code> characters of a String.</p>\n     *\n     * <p>If <code>len</code> characters are not available, or the String\n     * is <code>null</code>, the String will be returned without an\n     * an exception. An exception is thrown if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.right(null, *)    = null\n     * StringUtils.right(*, -ve)     = \"\"\n     * StringUtils.right(\"\", *)      = \"\"\n     * StringUtils.right(\"abc\", 0)   = \"\"\n     * StringUtils.right(\"abc\", 2)   = \"bc\"\n     * StringUtils.right(\"abc\", 4)   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the rightmost characters from, may be null\n     * @param len  the length of the required String, must be zero or positive\n     * @return the rightmost characters, <code>null</code> if null String input\n     */ [77511,78352]",
      "dest": "block_comment:     \n     * <p>Gets the rightmost <code>len</code> characters of a String.</p>\n     *\n     * <p>If <code>len</code> characters are not available, or the String\n     * is <code>null</code>, the String will be returned without an\n     * an exception. An exception is thrown if len is negative.</p>\n     *\n     * <pre>\n     * StringUtils.right(null, *)    = null\n     * StringUtils.right(*, -ve)     = \"\"\n     * StringUtils.right(\"\", *)      = \"\"\n     * StringUtils.right(\"abc\", 0)   = \"\"\n     * StringUtils.right(\"abc\", 2)   = \"bc\"\n     * StringUtils.right(\"abc\", 4)   = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the rightmost characters from, may be null\n     * @param len  the length of the required String, must be zero or positive\n     * @return the rightmost characters, <code>null</code> if null String input\n     */ [79005,79846]"
    },
    {
      "src": "local_variable_declaration [227639,227649]",
      "dest": "local_variable_declaration [229133,229143]"
    },
    {
      "src": "formal_parameter [183019,183029]",
      "dest": "formal_parameter [184513,184523]"
    },
    {
      "src": "identifier: str [77447,77450]",
      "dest": "identifier: str [78941,78944]"
    },
    {
      "src": "type: int [170212,170215]",
      "dest": "type: int [171706,171709]"
    },
    {
      "src": "return_statement [225415,225438]",
      "dest": "return_statement [226909,226932]"
    },
    {
      "src": "method_declaration [130656,131640]",
      "dest": "method_declaration [132150,133134]"
    },
    {
      "src": "identifier: i [119099,119100]",
      "dest": "identifier: i [120593,120594]"
    },
    {
      "src": "identifier: lastMatch [111024,111033]",
      "dest": "identifier: lastMatch [112518,112527]"
    },
    {
      "src": "binary_expression [23187,23198]",
      "dest": "binary_expression [23187,23198]"
    },
    {
      "src": "identifier: separator [136194,136203]",
      "dest": "identifier: separator [137688,137697]"
    },
    {
      "src": "comparison_operator: == [118697,118699]",
      "dest": "comparison_operator: == [120191,120193]"
    },
    {
      "src": "identifier: ch [198728,198730]",
      "dest": "identifier: ch [200222,200224]"
    },
    {
      "src": "\": \" [219556,219557]",
      "dest": "\": \" [221050,221051]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [39679,39694]",
      "dest": "identifier: INDEX_NOT_FOUND [39679,39694]"
    },
    {
      "src": "identifier: str [168692,168695]",
      "dest": "identifier: str [170186,170189]"
    },
    {
      "src": "type: String [47768,47774]",
      "dest": "type: String [47768,47774]"
    },
    {
      "src": "identifier: len [117022,117025]",
      "dest": "identifier: len [118516,118519]"
    },
    {
      "src": "if_statement [159833,159979]",
      "dest": "if_statement [161327,161473]"
    },
    {
      "src": "identifier: last [173231,173235]",
      "dest": "identifier: last [174725,174729]"
    },
    {
      "src": "identifier: length [208145,208151]",
      "dest": "identifier: length [209639,209645]"
    },
    {
      "src": "decimal_integer_literal: 0 [143453,143454]",
      "dest": "decimal_integer_literal: 0 [144947,144948]"
    },
    {
      "src": "increment_operator: ++ [209253,209255]",
      "dest": "increment_operator: ++ [210747,210749]"
    },
    {
      "src": "comparison_operator: > [150320,150321]",
      "dest": "comparison_operator: > [151814,151815]"
    },
    {
      "src": "parenthesized_expression [165581,165619]",
      "dest": "parenthesized_expression [167075,167113]"
    },
    {
      "src": "identifier: offset [219794,219800]",
      "dest": "identifier: offset [221288,221294]"
    },
    {
      "src": "identifier: append [166191,166197]",
      "dest": "identifier: append [167685,167691]"
    },
    {
      "src": "method_invocation [124236,124247]",
      "dest": "method_invocation [125730,125741]"
    },
    {
      "src": "identifier: buf [175551,175554]",
      "dest": "identifier: buf [177045,177048]"
    },
    {
      "src": "static: static [90712,90718]",
      "dest": "static: static [92206,92212]"
    },
    {
      "src": "method_invocation [75983,75995]",
      "dest": "method_invocation [77477,77489]"
    },
    {
      "src": "parenthesized_expression [60821,60869]",
      "dest": "parenthesized_expression [61208,61256]"
    },
    {
      "src": "formal_parameter [233744,233758]",
      "dest": "formal_parameter [235238,235252]"
    },
    {
      "src": "identifier: EMPTY [173119,173124]",
      "dest": "identifier: EMPTY [174613,174618]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [145555,145570]",
      "dest": "identifier: INDEX_NOT_FOUND [147049,147064]"
    },
    {
      "src": "formal_parameters [204253,204270]",
      "dest": "formal_parameters [205747,205764]"
    },
    {
      "src": "expression_statement [127701,127791]",
      "dest": "expression_statement [129195,129285]"
    },
    {
      "src": "argument_list [137122,137124]",
      "dest": "argument_list [138616,138618]"
    },
    {
      "src": "argument_list [186206,186211]",
      "dest": "argument_list [187700,187705]"
    },
    {
      "src": "method_invocation [87744,87775]",
      "dest": "method_invocation [89238,89269]"
    },
    {
      "src": "identifier: str [81498,81501]",
      "dest": "identifier: str [82992,82995]"
    },
    {
      "src": "block [56073,56120]",
      "dest": "block [56419,56466]"
    },
    {
      "src": "string_literal [220057,220102]",
      "dest": "string_literal [221551,221596]"
    },
    {
      "src": "continue: continue [118291,118299]",
      "dest": "continue: continue [119785,119793]"
    },
    {
      "src": "identifier: pads [185786,185790]",
      "dest": "identifier: pads [187280,187284]"
    },
    {
      "src": "identifier: startsWithAny [240929,240942]",
      "dest": "identifier: startsWithAny [242423,242436]"
    },
    {
      "src": "return_statement [231163,231176]",
      "dest": "return_statement [232657,232670]"
    },
    {
      "src": "return_statement [10672,10711]",
      "dest": "return_statement [10672,10711]"
    },
    {
      "src": "identifier: replacement [148355,148366]",
      "dest": "identifier: replacement [149849,149860]"
    },
    {
      "src": "method_invocation [174903,174916]",
      "dest": "method_invocation [176397,176410]"
    },
    {
      "src": "identifier: cs [202163,202165]",
      "dest": "identifier: cs [203657,203659]"
    },
    {
      "src": "identifier: currentType [124099,124110]",
      "dest": "identifier: currentType [125593,125604]"
    },
    {
      "src": "arithmetic_operator: - [190702,190703]",
      "dest": "arithmetic_operator: - [192196,192197]"
    },
    {
      "src": "binary_expression [83357,83381]",
      "dest": "binary_expression [84851,84875]"
    },
    {
      "src": "null_literal: null [132834,132838]",
      "dest": "null_literal: null [134328,134332]"
    },
    {
      "src": "continue: continue [70126,70134]",
      "dest": "continue: continue [71620,71628]"
    },
    {
      "src": "identifier: Character [198656,198665]",
      "dest": "identifier: Character [200150,200159]"
    },
    {
      "src": "expression_statement [175661,175677]",
      "dest": "expression_statement [177155,177171]"
    },
    {
      "src": "assignment_expression [235469,235474]",
      "dest": "assignment_expression [236963,236968]"
    },
    {
      "src": "static: static [63723,63729]",
      "dest": "static: static [64770,64776]"
    },
    {
      "src": "binary_expression [136219,136235]",
      "dest": "binary_expression [137713,137729]"
    },
    {
      "src": "formal_parameter [109650,109668]",
      "dest": "formal_parameter [111144,111162]"
    },
    {
      "src": "return_statement [194588,194619]",
      "dest": "return_statement [196082,196113]"
    },
    {
      "src": "method_invocation [180306,180328]",
      "dest": "method_invocation [181800,181822]"
    },
    {
      "src": "formal_parameters [239137,239164]",
      "dest": "formal_parameters [240631,240658]"
    },
    {
      "src": "block [10662,10717]",
      "dest": "block [10662,10717]"
    },
    {
      "src": "identifier: append [134575,134581]",
      "dest": "identifier: append [136069,136075]"
    },
    {
      "src": "identifier: cs [210192,210194]",
      "dest": "identifier: cs [211686,211688]"
    },
    {
      "src": "type: String [165527,165533]",
      "dest": "type: String [167021,167027]"
    },
    {
      "src": "binary_expression [174803,174823]",
      "dest": "binary_expression [176297,176317]"
    },
    {
      "src": "argument_list [137437,137452]",
      "dest": "argument_list [138931,138946]"
    },
    {
      "src": "method_invocation [17197,17224]",
      "dest": "method_invocation [17197,17224]"
    },
    {
      "src": "argument_list [83100,83105]",
      "dest": "argument_list [84594,84599]"
    },
    {
      "src": "type: String [35137,35143]",
      "dest": "type: String [35137,35143]"
    },
    {
      "src": "return_statement [186173,186212]",
      "dest": "return_statement [187667,187706]"
    },
    {
      "src": "identifier: str [145593,145596]",
      "dest": "identifier: str [147087,147090]"
    },
    {
      "src": "variable_declarator [227373,227407]",
      "dest": "variable_declarator [228867,228901]"
    },
    {
      "src": "null_literal: null [18602,18606]",
      "dest": "null_literal: null [18602,18606]"
    },
    {
      "src": "identifier: longestStrLen [227421,227434]",
      "dest": "identifier: longestStrLen [228915,228928]"
    },
    {
      "src": "identifier: Math [227948,227952]",
      "dest": "identifier: Math [229442,229446]"
    },
    {
      "src": "comparison_operator: == [195470,195472]",
      "dest": "comparison_operator: == [196964,196966]"
    },
    {
      "src": "identifier: indexOfDifference [231221,231238]",
      "dest": "identifier: indexOfDifference [232715,232732]"
    },
    {
      "src": "identifier: add [124142,124145]",
      "dest": "identifier: add [125636,125639]"
    },
    {
      "src": "identifier: close [89213,89218]",
      "dest": "identifier: close [90707,90712]"
    },
    {
      "src": "identifier: charAt [185751,185757]",
      "dest": "identifier: charAt [187245,187251]"
    },
    {
      "src": "decimal_integer_literal: 0 [186076,186077]",
      "dest": "decimal_integer_literal: 0 [187570,187571]"
    },
    {
      "src": "binary_expression [188896,188920]",
      "dest": "binary_expression [190390,190414]"
    },
    {
      "src": "local_variable_declaration [165872,165921]",
      "dest": "local_variable_declaration [167366,167415]"
    },
    {
      "src": "expression_statement [168476,168488]",
      "dest": "expression_statement [169970,169982]"
    },
    {
      "src": "affectation_operator: = [54630,54631]",
      "dest": "affectation_operator: = [54630,54631]"
    },
    {
      "src": "local_variable_declaration [159170,159192]",
      "dest": "local_variable_declaration [160664,160686]"
    },
    {
      "src": "identifier: array [126216,126221]",
      "dest": "identifier: array [127710,127715]"
    },
    {
      "src": "new: new [123825,123828]",
      "dest": "new: new [125319,125322]"
    },
    {
      "src": "comparison_operator: == [228295,228297]",
      "dest": "comparison_operator: == [229789,229791]"
    },
    {
      "src": "decimal_integer_literal: 64 [150327,150329]",
      "dest": "decimal_integer_literal: 64 [151821,151823]"
    },
    {
      "src": "type: String [78371,78377]",
      "dest": "type: String [79865,79871]"
    },
    {
      "src": "false: false [211253,211258]",
      "dest": "false: false [212747,212752]"
    },
    {
      "src": "type: String [86251,86257]",
      "dest": "type: String [87745,87751]"
    },
    {
      "src": "decimal_integer_literal: 0 [231491,231492]",
      "dest": "decimal_integer_literal: 0 [232985,232986]"
    },
    {
      "src": "identifier: concat [181976,181982]",
      "dest": "identifier: concat [183470,183476]"
    },
    {
      "src": "parenthesized_expression [49406,49440]",
      "dest": "parenthesized_expression [49406,49440]"
    },
    {
      "src": "string_fragment: The stripAccents(String) method is not supported until Java 1.6 [26397,26460]",
      "dest": "string_fragment: The stripAccents(String) method is not supported until Java 1.6 [26397,26460]"
    },
    {
      "src": "expression_statement [104975,104985]",
      "dest": "expression_statement [106469,106479]"
    },
    {
      "src": "if_statement [131431,131505]",
      "dest": "if_statement [132925,132999]"
    },
    {
      "src": "comparison_operator: == [66477,66479]",
      "dest": "comparison_operator: == [67524,67526]"
    },
    {
      "src": "method_declaration [213816,213960]",
      "dest": "method_declaration [215310,215454]"
    },
    {
      "src": "identifier: pos [81782,81785]",
      "dest": "identifier: pos [83276,83279]"
    },
    {
      "src": "return_statement [30814,30855]",
      "dest": "return_statement [30814,30855]"
    },
    {
      "src": "return_statement [31909,31932]",
      "dest": "return_statement [31909,31932]"
    },
    {
      "src": "affectation_operator: = [8810,8811]",
      "dest": "affectation_operator: = [8810,8811]"
    },
    {
      "src": "variable_declarator [110704,110709]",
      "dest": "variable_declarator [112198,112203]"
    },
    {
      "src": "identifier: start [168476,168481]",
      "dest": "identifier: start [169970,169975]"
    },
    {
      "src": "identifier: css [227349,227352]",
      "dest": "identifier: css [228843,228846]"
    },
    {
      "src": "null_literal: null [33518,33522]",
      "dest": "null_literal: null [33518,33522]"
    },
    {
      "src": "parenthesized_expression [64015,64034]",
      "dest": "parenthesized_expression [65062,65081]"
    },
    {
      "src": "comparison_operator: == [233792,233794]",
      "dest": "comparison_operator: == [235286,235288]"
    },
    {
      "src": "method_invocation [132647,132674]",
      "dest": "method_invocation [134141,134168]"
    },
    {
      "src": "identifier: cs1 [225185,225188]",
      "dest": "identifier: cs1 [226679,226682]"
    },
    {
      "src": "identifier: i [186089,186090]",
      "dest": "identifier: i [187583,187584]"
    },
    {
      "src": "identifier: Integer [70376,70383]",
      "dest": "identifier: Integer [71870,71877]"
    },
    {
      "src": "block [66749,67017]",
      "dest": "block [67868,68511]"
    },
    {
      "src": "null_literal: null [195501,195505]",
      "dest": "null_literal: null [196995,196999]"
    },
    {
      "src": "local_variable_declaration [184000,184031]",
      "dest": "local_variable_declaration [185494,185525]"
    },
    {
      "src": "argument_list [123499,123507]",
      "dest": "argument_list [124993,125001]"
    },
    {
      "src": "comparison_operator: > [235318,235319]",
      "dest": "comparison_operator: > [236812,236813]"
    },
    {
      "src": "identifier: padChar [180259,180266]",
      "dest": "identifier: padChar [181753,181760]"
    },
    {
      "src": "method_declaration [47716,47955]",
      "dest": "method_declaration [47716,47955]"
    },
    {
      "src": "comparison_operator: != [134544,134546]",
      "dest": "comparison_operator: != [136038,136040]"
    },
    {
      "src": "identifier: str [84655,84658]",
      "dest": "identifier: str [86149,86152]"
    },
    {
      "src": "method_declaration [8630,8981]",
      "dest": "method_declaration [8630,8981]"
    },
    {
      "src": "type: int [150179,150182]",
      "dest": "type: int [151673,151676]"
    },
    {
      "src": "formal_parameters [188845,188881]",
      "dest": "formal_parameters [190339,190375]"
    },
    {
      "src": "identifier: charAt [203285,203291]",
      "dest": "identifier: charAt [204779,204785]"
    },
    {
      "src": "block_comment:     \n     * <p>Abbreviates a String to the length passed, replacing the middle characters with the supplied\n     * replacement String.</p>\n     *\n     * <p>This abbreviation only occurs if the following criteria is met:\n     * <ul>\n     * <li>Neither the String for abbreviation nor the replacement String are null or empty </li>\n     * <li>The length to truncate to is less than the length of the supplied String</li>\n     * <li>The length to truncate to is greater than 0</li>\n     * <li>The abbreviated String will have enough room for the length supplied replacement String\n     * and the first and last characters of the supplied String for abbreviation</li>\n     * </ul>\n     * Otherwise, the returned String will be the same as the supplied String for abbreviation.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviateMiddle(null, null, 0)      = null\n     * StringUtils.abbreviateMiddle(\"abc\", null, 0)      = \"abc\"\n     * StringUtils.abbreviateMiddle(\"abc\", \".\", 0)      = \"abc\"\n     * StringUtils.abbreviateMiddle(\"abc\", \".\", 3)      = \"abc\"\n     * StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4)     = \"ab.f\"\n     * </pre>\n     *\n     * @param str  the String to abbreviate, may be null\n     * @param middle the String to replace the middle characters with, may be null\n     * @param length the length to abbreviate <code>str</code> to.\n     * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.\n     * @since 2.5\n     */ [220353,221851]",
      "dest": "block_comment:     \n     * <p>Abbreviates a String to the length passed, replacing the middle characters with the supplied\n     * replacement String.</p>\n     *\n     * <p>This abbreviation only occurs if the following criteria is met:\n     * <ul>\n     * <li>Neither the String for abbreviation nor the replacement String are null or empty </li>\n     * <li>The length to truncate to is less than the length of the supplied String</li>\n     * <li>The length to truncate to is greater than 0</li>\n     * <li>The abbreviated String will have enough room for the length supplied replacement String\n     * and the first and last characters of the supplied String for abbreviation</li>\n     * </ul>\n     * Otherwise, the returned String will be the same as the supplied String for abbreviation.\n     * </p>\n     *\n     * <pre>\n     * StringUtils.abbreviateMiddle(null, null, 0)      = null\n     * StringUtils.abbreviateMiddle(\"abc\", null, 0)      = \"abc\"\n     * StringUtils.abbreviateMiddle(\"abc\", \".\", 0)      = \"abc\"\n     * StringUtils.abbreviateMiddle(\"abc\", \".\", 3)      = \"abc\"\n     * StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4)     = \"ab.f\"\n     * </pre>\n     *\n     * @param str  the String to abbreviate, may be null\n     * @param middle the String to replace the middle characters with, may be null\n     * @param length the length to abbreviate <code>str</code> to.\n     * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.\n     * @since 2.5\n     */ [221847,223345]"
    },
    {
      "src": "identifier: leftPad [185275,185282]",
      "dest": "identifier: leftPad [186769,186776]"
    },
    {
      "src": "visibility: public [9560,9566]",
      "dest": "visibility: public [9560,9566]"
    },
    {
      "src": "argument_list [105038,105043]",
      "dest": "argument_list [106532,106537]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only whitespace.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isWhitespace(null)   = false\n     * StringUtils.isWhitespace(\"\")     = true\n     * StringUtils.isWhitespace(\"  \")   = true\n     * StringUtils.isWhitespace(\"abc\")  = false\n     * StringUtils.isWhitespace(\"ab2c\") = false\n     * StringUtils.isWhitespace(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains whitespace, and is non-null\n     * @since 2.0\n     */ [208367,209069]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only whitespace.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isWhitespace(null)   = false\n     * StringUtils.isWhitespace(\"\")     = true\n     * StringUtils.isWhitespace(\"  \")   = true\n     * StringUtils.isWhitespace(\"abc\")  = false\n     * StringUtils.isWhitespace(\"ab2c\") = false\n     * StringUtils.isWhitespace(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains whitespace, and is non-null\n     * @since 2.0\n     */ [209861,210563]"
    },
    {
      "src": "type: int [18448,18451]",
      "dest": "type: int [18448,18451]"
    },
    {
      "src": "identifier: i [111198,111199]",
      "dest": "identifier: i [112692,112693]"
    },
    {
      "src": "method_invocation [89393,89406]",
      "dest": "method_invocation [90887,90900]"
    },
    {
      "src": "identifier: endIndex [131078,131086]",
      "dest": "identifier: endIndex [132572,132580]"
    },
    {
      "src": "decimal_integer_literal: 0 [222390,222391]",
      "dest": "decimal_integer_literal: 0 [223884,223885]"
    },
    {
      "src": "return_statement [205907,205920]",
      "dest": "return_statement [207401,207414]"
    },
    {
      "src": "decimal_integer_literal: 0 [75713,75714]",
      "dest": "decimal_integer_literal: 0 [77207,77208]"
    },
    {
      "src": "decimal_integer_literal: 0 [116669,116670]",
      "dest": "decimal_integer_literal: 0 [118163,118164]"
    },
    {
      "src": "type: Object[] [127453,127461]",
      "dest": "type: Object[] [128947,128955]"
    },
    {
      "src": "if_statement [126139,126194]",
      "dest": "if_statement [127633,127688]"
    },
    {
      "src": "comparison_operator: == [31886,31888]",
      "dest": "comparison_operator: == [31886,31888]"
    },
    {
      "src": "identifier: padLen [181536,181542]",
      "dest": "identifier: padLen [183030,183036]"
    },
    {
      "src": "formal_parameter [49349,49359]",
      "dest": "formal_parameter [49349,49359]"
    },
    {
      "src": "block [190540,190575]",
      "dest": "block [192034,192069]"
    },
    {
      "src": "parenthesized_expression [39414,39448]",
      "dest": "parenthesized_expression [39414,39448]"
    },
    {
      "src": "visibility: public [194458,194464]",
      "dest": "visibility: public [195952,195958]"
    },
    {
      "src": "argument_list [118537,118552]",
      "dest": "argument_list [120031,120046]"
    },
    {
      "src": "formal_parameters [60770,60807]",
      "dest": "formal_parameters [61157,61194]"
    },
    {
      "src": "if_statement [104835,106165]",
      "dest": "if_statement [106329,107659]"
    },
    {
      "src": "formal_parameter [46535,46551]",
      "dest": "formal_parameter [46535,46551]"
    },
    {
      "src": "block [160122,160158]",
      "dest": "block [161616,161652]"
    },
    {
      "src": "identifier: searchChars [165606,165617]",
      "dest": "identifier: searchChars [167100,167111]"
    },
    {
      "src": "formal_parameter [29435,29450]",
      "dest": "formal_parameter [29435,29450]"
    },
    {
      "src": "argument_list [150660,150681]",
      "dest": "argument_list [152154,152175]"
    },
    {
      "src": "type: CharSequence [65138,65150]",
      "dest": "type: CharSequence [66185,66197]"
    },
    {
      "src": "dimensions_expr [235610,235615]",
      "dest": "dimensions_expr [237104,237109]"
    },
    {
      "src": "comparison_operator: == [206869,206871]",
      "dest": "comparison_operator: == [208363,208365]"
    },
    {
      "src": "identifier: length [222261,222267]",
      "dest": "identifier: length [223755,223761]"
    },
    {
      "src": "variable_declarator [90896,90917]",
      "dest": "variable_declarator [92390,92411]"
    },
    {
      "src": "null_literal: null [206872,206876]",
      "dest": "null_literal: null [208366,208370]"
    },
    {
      "src": "true: true [243539,243543]",
      "dest": "true: true [245033,245037]"
    },
    {
      "src": "affectation_operator: = [168334,168335]",
      "dest": "affectation_operator: = [169828,169829]"
    },
    {
      "src": "block [27470,27537]",
      "dest": "block [27470,27537]"
    },
    {
      "src": "block [101284,101361]",
      "dest": "block [102778,102855]"
    },
    {
      "src": "arithmetic_operator: + [158504,158505]",
      "dest": "arithmetic_operator: + [159998,159999]"
    },
    {
      "src": "argument_list [225369,225371]",
      "dest": "argument_list [226863,226865]"
    },
    {
      "src": "false: false [202013,202018]",
      "dest": "false: false [203507,203512]"
    },
    {
      "src": "identifier: valid [63870,63875]",
      "dest": "identifier: valid [64917,64922]"
    },
    {
      "src": "true: true [111036,111040]",
      "dest": "true: true [112530,112534]"
    },
    {
      "src": "identifier: remove [143471,143477]",
      "dest": "identifier: remove [144965,144971]"
    },
    {
      "src": "line_comment: // standard case [118448,118464]",
      "dest": "line_comment: // standard case [119942,119958]"
    },
    {
      "src": "formal_parameter [75570,75580]",
      "dest": "formal_parameter [77064,77074]"
    },
    {
      "src": "identifier: s [236104,236105]",
      "dest": "identifier: s [237598,237599]"
    },
    {
      "src": "parenthesized_expression [70204,70228]",
      "dest": "parenthesized_expression [71698,71722]"
    },
    {
      "src": "identifier: search [70180,70186]",
      "dest": "identifier: search [71674,71680]"
    },
    {
      "src": "identifier: suffix [244235,244241]",
      "dest": "identifier: suffix [245729,245735]"
    },
    {
      "src": "argument_list [168662,168671]",
      "dest": "argument_list [170156,170165]"
    },
    {
      "src": "binary_expression [46596,46613]",
      "dest": "binary_expression [46596,46613]"
    },
    {
      "src": "identifier: match [111225,111230]",
      "dest": "identifier: match [112719,112724]"
    },
    {
      "src": "ternary_expression [131188,131258]",
      "dest": "ternary_expression [132682,132752]"
    },
    {
      "src": "formal_parameters [132302,132340]",
      "dest": "formal_parameters [133796,133834]"
    },
    {
      "src": "identifier: length [49715,49721]",
      "dest": "identifier: length [49715,49721]"
    },
    {
      "src": "identifier: i [182153,182154]",
      "dest": "identifier: i [183647,183648]"
    },
    {
      "src": "binary_expression [36143,36155]",
      "dest": "binary_expression [36143,36155]"
    },
    {
      "src": "identifier: substring [78616,78625]",
      "dest": "identifier: substring [80110,80119]"
    },
    {
      "src": "expression_statement [160868,160917]",
      "dest": "expression_statement [162362,162411]"
    },
    {
      "src": "identifier: cs1 [225084,225087]",
      "dest": "identifier: cs1 [226578,226581]"
    },
    {
      "src": "identifier: i [175024,175025]",
      "dest": "identifier: i [176518,176519]"
    },
    {
      "src": "if_statement [127915,127989]",
      "dest": "if_statement [129409,129483]"
    },
    {
      "src": "return_statement [202006,202019]",
      "dest": "return_statement [203500,203513]"
    },
    {
      "src": "decimal_integer_literal: 1 [105804,105805]",
      "dest": "decimal_integer_literal: 1 [107298,107299]"
    },
    {
      "src": "while_statement [91164,91549]",
      "dest": "while_statement [92658,93043]"
    },
    {
      "src": "variable_declarator [54788,54793]",
      "dest": "variable_declarator [58092,58097]"
    },
    {
      "src": "update_expression [175634,175637]",
      "dest": "update_expression [177128,177131]"
    },
    {
      "src": "comparison_operator: < [162029,162030]",
      "dest": "comparison_operator: < [163523,163524]"
    },
    {
      "src": "argument_list [135466,135468]",
      "dest": "argument_list [136960,136962]"
    },
    {
      "src": "identifier: increase [150237,150245]",
      "dest": "identifier: increase [151731,151739]"
    },
    {
      "src": "modifiers [242339,242352]",
      "dest": "modifiers [243833,243846]"
    },
    {
      "src": "binary_expression [18472,18515]",
      "dest": "binary_expression [18472,18515]"
    },
    {
      "src": "binary_expression [168556,168592]",
      "dest": "binary_expression [170050,170086]"
    },
    {
      "src": "string_literal [24461,24483]",
      "dest": "string_literal [24461,24483]"
    },
    {
      "src": "method_declaration [33427,33647]",
      "dest": "method_declaration [33427,33647]"
    },
    {
      "src": "identifier: length [227353,227359]",
      "dest": "identifier: length [228847,228853]"
    },
    {
      "src": "identifier: start [73613,73618]",
      "dest": "identifier: start [75107,75112]"
    },
    {
      "src": "arithmetic_operator: - [184016,184017]",
      "dest": "arithmetic_operator: - [185510,185511]"
    },
    {
      "src": "identifier: noMoreMatchesForReplIndex [161914,161939]",
      "dest": "identifier: noMoreMatchesForReplIndex [163408,163433]"
    },
    {
      "src": "method_invocation [171913,171931]",
      "dest": "method_invocation [173407,173425]"
    },
    {
      "src": "line_comment: // Null separator means use whitespace [116960,116998]",
      "dest": "line_comment: // Null separator means use whitespace [118454,118492]"
    },
    {
      "src": "expression_statement [236425,236431]",
      "dest": "expression_statement [237919,237925]"
    },
    {
      "src": "type: boolean [110730,110737]",
      "dest": "type: boolean [112224,112231]"
    },
    {
      "src": "return_statement [123100,123112]",
      "dest": "return_statement [124594,124606]"
    },
    {
      "src": "binary_expression [89182,89193]",
      "dest": "binary_expression [90676,90687]"
    },
    {
      "src": "block [49730,49770]",
      "dest": "block [49730,49770]"
    },
    {
      "src": "object_creation_expression [219495,219558]",
      "dest": "object_creation_expression [220989,221052]"
    },
    {
      "src": "string_fragment:   [181510,181511]",
      "dest": "string_fragment:   [183004,183005]"
    },
    {
      "src": "formal_parameters [183018,183040]",
      "dest": "formal_parameters [184512,184534]"
    },
    {
      "src": "type: int [223838,223841]",
      "dest": "type: int [225332,225335]"
    },
    {
      "src": "binary_expression [165582,165618]",
      "dest": "binary_expression [167076,167112]"
    },
    {
      "src": "affectation_operator: = [137145,137146]",
      "dest": "affectation_operator: = [138639,138640]"
    },
    {
      "src": "increment_operator: ++ [57778,57780]",
      "dest": "increment_operator: ++ [54883,54885]"
    },
    {
      "src": "identifier: i [236113,236114]",
      "dest": "identifier: i [237607,237608]"
    },
    {
      "src": "static: static [172944,172950]",
      "dest": "static: static [174438,174444]"
    },
    {
      "src": "identifier: join [125153,125157]",
      "dest": "identifier: join [126647,126651]"
    },
    {
      "src": "method_invocation [211287,211298]",
      "dest": "method_invocation [212781,212792]"
    },
    {
      "src": "method_invocation [182103,182123]",
      "dest": "method_invocation [183597,183617]"
    },
    {
      "src": "parenthesized_expression [174589,174622]",
      "dest": "parenthesized_expression [176083,176116]"
    },
    {
      "src": "unary_expression [107791,107793]",
      "dest": "unary_expression [109285,109287]"
    },
    {
      "src": "method_invocation [198425,198438]",
      "dest": "method_invocation [199919,199932]"
    },
    {
      "src": "argument_list [78550,78552]",
      "dest": "argument_list [80044,80046]"
    },
    {
      "src": "type: T [213879,213880]",
      "dest": "type: T [215373,215374]"
    },
    {
      "src": "line_comment: // get static method on Normalizer [24510,24544]",
      "dest": "line_comment: // get static method on Normalizer [24510,24544]"
    },
    {
      "src": "binary_expression [241112,241136]",
      "dest": "binary_expression [242606,242630]"
    },
    {
      "src": "block [210156,210448]",
      "dest": "block [211650,211942]"
    },
    {
      "src": "identifier: str [75577,75580]",
      "dest": "identifier: str [77071,77074]"
    },
    {
      "src": "assignment_expression [195550,195570]",
      "dest": "assignment_expression [197044,197064]"
    },
    {
      "src": "method_declaration [35092,35238]",
      "dest": "method_declaration [35092,35238]"
    },
    {
      "src": "decimal_integer_literal: 0 [231363,231364]",
      "dest": "decimal_integer_literal: 0 [232857,232858]"
    },
    {
      "src": "identifier: isWhitespace [20347,20359]",
      "dest": "identifier: isWhitespace [20347,20359]"
    },
    {
      "src": "identifier: input [24905,24910]",
      "dest": "identifier: input [24905,24910]"
    },
    {
      "src": "return_statement [81758,81787]",
      "dest": "return_statement [83252,83281]"
    },
    {
      "src": "modifiers [215432,215445]",
      "dest": "modifiers [216926,216939]"
    },
    {
      "src": "identifier: separatorChars [95229,95243]",
      "dest": "identifier: separatorChars [96723,96737]"
    },
    {
      "src": "type: int [123471,123474]",
      "dest": "type: int [124965,124968]"
    },
    {
      "src": "identifier: match [117114,117119]",
      "dest": "identifier: match [118608,118613]"
    },
    {
      "src": "identifier: length [150206,150212]",
      "dest": "identifier: length [151700,151706]"
    },
    {
      "src": "identifier: str [62346,62349]",
      "dest": "identifier: str [63085,63088]"
    },
    {
      "src": "identifier: searchChar [42385,42395]",
      "dest": "identifier: searchChar [42385,42395]"
    },
    {
      "src": "variable_declarator [116826,116831]",
      "dest": "variable_declarator [118320,118325]"
    },
    {
      "src": "expression_statement [168501,168512]",
      "dest": "expression_statement [169995,170006]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [211505,211578]",
      "dest": "line_comment: //----------------------------------------------------------------------- [212999,213072]"
    },
    {
      "src": "identifier: str [143358,143361]",
      "dest": "identifier: str [144852,144855]"
    },
    {
      "src": "method_invocation [90905,90917]",
      "dest": "method_invocation [92399,92411]"
    },
    {
      "src": "identifier: cs [58098,58100]",
      "dest": "identifier: cs [55131,55133]"
    },
    {
      "src": "identifier: defaultStr [212957,212967]",
      "dest": "identifier: defaultStr [214451,214461]"
    },
    {
      "src": "comparison_operator: < [75812,75813]",
      "dest": "comparison_operator: < [77306,77307]"
    },
    {
      "src": "binary_expression [204285,204295]",
      "dest": "binary_expression [205779,205789]"
    },
    {
      "src": "type: String [239150,239156]",
      "dest": "type: String [240644,240650]"
    },
    {
      "src": "identifier: str [92801,92804]",
      "dest": "identifier: str [94295,94298]"
    },
    {
      "src": "parenthesized_expression [91408,91417]",
      "dest": "parenthesized_expression [92902,92911]"
    },
    {
      "src": "identifier: len [79767,79770]",
      "dest": "identifier: len [81261,81264]"
    },
    {
      "src": "method_invocation [202163,202175]",
      "dest": "method_invocation [203657,203669]"
    },
    {
      "src": "identifier: str [219399,219402]",
      "dest": "identifier: str [220893,220896]"
    },
    {
      "src": "formal_parameters [169917,169929]",
      "dest": "formal_parameters [171411,171423]"
    },
    {
      "src": "array_creation_expression [182057,182071]",
      "dest": "array_creation_expression [183551,183565]"
    },
    {
      "src": "local_variable_declaration [72005,72015]",
      "dest": "local_variable_declaration [73499,73509]"
    },
    {
      "src": "formal_parameter [127453,127467]",
      "dest": "formal_parameter [128947,128961]"
    },
    {
      "src": "type: String[] [21636,21644]",
      "dest": "type: String[] [21636,21644]"
    },
    {
      "src": "formal_parameter [211174,211189]",
      "dest": "formal_parameter [212668,212683]"
    },
    {
      "src": "identifier: maxWidth [219461,219469]",
      "dest": "identifier: maxWidth [220955,220963]"
    },
    {
      "src": "?: ? [127740,127741]",
      "dest": "?: ? [129234,129235]"
    },
    {
      "src": "argument_list [195568,195570]",
      "dest": "argument_list [197062,197064]"
    },
    {
      "src": "identifier: searchString [147091,147103]",
      "dest": "identifier: searchString [148585,148597]"
    },
    {
      "src": "block [123086,123122]",
      "dest": "block [124580,124616]"
    },
    {
      "src": "identifier: EMPTY [78511,78516]",
      "dest": "identifier: EMPTY [80005,80010]"
    },
    {
      "src": "identifier: buf [128042,128045]",
      "dest": "identifier: buf [129536,129539]"
    },
    {
      "src": "identifier: i [186079,186080]",
      "dest": "identifier: i [187573,187574]"
    },
    {
      "src": "return_statement [132459,132471]",
      "dest": "return_statement [133953,133965]"
    },
    {
      "src": "identifier: stripToEmpty [15795,15807]",
      "dest": "identifier: stripToEmpty [15795,15807]"
    },
    {
      "src": "visibility: public [45015,45021]",
      "dest": "visibility: public [45015,45021]"
    },
    {
      "src": "method_invocation [24884,24927]",
      "dest": "method_invocation [24884,24927]"
    },
    {
      "src": "identifier: strLen [190798,190804]",
      "dest": "identifier: strLen [192292,192298]"
    },
    {
      "src": "logical_operator: || [62351,62353]",
      "dest": "logical_operator: || [63090,63092]"
    },
    {
      "src": "identifier: stripChars [18426,18436]",
      "dest": "identifier: stripChars [18426,18436]"
    },
    {
      "src": "for_statement [162294,162386]",
      "dest": "for_statement [163788,163880]"
    },
    {
      "src": "variable_declarator [235597,235615]",
      "dest": "variable_declarator [237091,237109]"
    },
    {
      "src": "binary_expression [175004,175014]",
      "dest": "binary_expression [176498,176508]"
    },
    {
      "src": "identifier: str [73436,73439]",
      "dest": "identifier: str [74930,74933]"
    },
    {
      "src": "method_invocation [141659,141671]",
      "dest": "method_invocation [143153,143165]"
    },
    {
      "src": "identifier: locale [194508,194514]",
      "dest": "identifier: locale [196002,196008]"
    },
    {
      "src": "block [182026,182296]",
      "dest": "block [183520,183790]"
    },
    {
      "src": "identifier: i [162130,162131]",
      "dest": "identifier: i [163624,163625]"
    },
    {
      "src": "type: Locale [192686,192692]",
      "dest": "type: Locale [194180,194186]"
    },
    {
      "src": "identifier: i [159494,159495]",
      "dest": "identifier: i [160988,160989]"
    },
    {
      "src": "static: static [81416,81422]",
      "dest": "static: static [82910,82916]"
    },
    {
      "src": "assignment_expression [235429,235434]",
      "dest": "assignment_expression [236923,236928]"
    },
    {
      "src": "line_comment: // returns original String when possible [180122,180162]",
      "dest": "line_comment: // returns original String when possible [181616,181656]"
    },
    {
      "src": "identifier: lastIndex [36346,36355]",
      "dest": "identifier: lastIndex [36346,36355]"
    },
    {
      "src": "type_body [5242,244453]",
      "dest": "type_body [5242,245947]"
    },
    {
      "src": "affectation_operator: = [132979,132980]",
      "dest": "affectation_operator: = [134473,134474]"
    },
    {
      "src": "block [81525,81560]",
      "dest": "block [83019,83054]"
    },
    {
      "src": "\": \" [6011,6012]",
      "dest": "\": \" [6011,6012]"
    },
    {
      "src": "object_creation_expression [91110,91133]",
      "dest": "object_creation_expression [92604,92627]"
    },
    {
      "src": "binary_expression [208257,208276]",
      "dest": "binary_expression [209751,209770]"
    },
    {
      "src": "binary_expression [86533,86566]",
      "dest": "binary_expression [88027,88060]"
    },
    {
      "src": "identifier: EMPTY [212196,212201]",
      "dest": "identifier: EMPTY [213690,213695]"
    },
    {
      "src": "block [225373,225406]",
      "dest": "block [226867,226900]"
    },
    {
      "src": "null_literal: null [225091,225095]",
      "dest": "null_literal: null [226585,226589]"
    },
    {
      "src": "block_comment:     \n     * <p>Strips whitespace from the start and end of a String  returning\n     * an empty String if <code>null</code> input.</p>\n     *\n     * <p>This is similar to {@link #trimToEmpty(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripToEmpty(null)     = \"\"\n     * StringUtils.stripToEmpty(\"\")       = \"\"\n     * StringUtils.stripToEmpty(\"   \")    = \"\"\n     * StringUtils.stripToEmpty(\"abc\")    = \"abc\"\n     * StringUtils.stripToEmpty(\"  abc\")  = \"abc\"\n     * StringUtils.stripToEmpty(\"abc  \")  = \"abc\"\n     * StringUtils.stripToEmpty(\" abc \")  = \"abc\"\n     * StringUtils.stripToEmpty(\" ab c \") = \"ab c\"\n     * </pre>\n     *\n     * @param str  the String to be stripped, may be null\n     * @return the trimmed String, or an empty String if <code>null</code> input\n     * @since 2.0\n     */ [14876,15769]",
      "dest": "block_comment:     \n     * <p>Strips whitespace from the start and end of a String  returning\n     * an empty String if <code>null</code> input.</p>\n     *\n     * <p>This is similar to {@link #trimToEmpty(String)} but removes whitespace.\n     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n     *\n     * <pre>\n     * StringUtils.stripToEmpty(null)     = \"\"\n     * StringUtils.stripToEmpty(\"\")       = \"\"\n     * StringUtils.stripToEmpty(\"   \")    = \"\"\n     * StringUtils.stripToEmpty(\"abc\")    = \"abc\"\n     * StringUtils.stripToEmpty(\"  abc\")  = \"abc\"\n     * StringUtils.stripToEmpty(\"abc  \")  = \"abc\"\n     * StringUtils.stripToEmpty(\" abc \")  = \"abc\"\n     * StringUtils.stripToEmpty(\" ab c \") = \"ab c\"\n     * </pre>\n     *\n     * @param str  the String to be stripped, may be null\n     * @return the trimmed String, or an empty String if <code>null</code> input\n     * @since 2.0\n     */ [14876,15769]"
    },
    {
      "src": "identifier: invoke [24891,24897]",
      "dest": "identifier: invoke [24891,24897]"
    },
    {
      "src": "argument_list [158171,158173]",
      "dest": "argument_list [159665,159667]"
    },
    {
      "src": "formal_parameters [141617,141644]",
      "dest": "formal_parameters [143111,143138]"
    },
    {
      "src": "method_invocation [86459,86485]",
      "dest": "method_invocation [87953,87979]"
    },
    {
      "src": "identifier: max [99728,99731]",
      "dest": "identifier: max [101222,101225]"
    },
    {
      "src": "affectation_operator: = [185541,185542]",
      "dest": "affectation_operator: = [187035,187036]"
    },
    {
      "src": "false: false [117437,117442]",
      "dest": "false: false [118931,118936]"
    },
    {
      "src": "decimal_integer_literal: 1 [235613,235614]",
      "dest": "decimal_integer_literal: 1 [237107,237108]"
    },
    {
      "src": "argument_list [227970,227972]",
      "dest": "argument_list [229464,229466]"
    },
    {
      "src": "static: static [174319,174325]",
      "dest": "static: static [175813,175819]"
    },
    {
      "src": "identifier: str [11655,11658]",
      "dest": "identifier: str [11655,11658]"
    },
    {
      "src": "increment_operator: ++ [39830,39832]",
      "dest": "increment_operator: ++ [39830,39832]"
    },
    {
      "src": "identifier: i [208267,208268]",
      "dest": "identifier: i [209761,209762]"
    },
    {
      "src": "assignment_expression [199984,200003]",
      "dest": "assignment_expression [201478,201497]"
    },
    {
      "src": "identifier: separator [101273,101282]",
      "dest": "identifier: separator [102767,102776]"
    },
    {
      "src": "return_statement [166399,166410]",
      "dest": "return_statement [167893,167904]"
    },
    {
      "src": "if_statement [168357,168406]",
      "dest": "if_statement [169851,169900]"
    },
    {
      "src": "binary_expression [168361,168370]",
      "dest": "binary_expression [169855,169864]"
    },
    {
      "src": "identifier: chars [145623,145628]",
      "dest": "identifier: chars [147117,147122]"
    },
    {
      "src": "argument_list [75746,75748]",
      "dest": "argument_list [77240,77242]"
    },
    {
      "src": "identifier: array [127747,127752]",
      "dest": "identifier: array [129241,129246]"
    },
    {
      "src": "return_statement [21679,21707]",
      "dest": "return_statement [21679,21707]"
    },
    {
      "src": "method_invocation [20668,20689]",
      "dest": "method_invocation [20668,20689]"
    },
    {
      "src": "dimensions_expr [91655,91668]",
      "dest": "dimensions_expr [93149,93162]"
    },
    {
      "src": "identifier: start [73445,73450]",
      "dest": "identifier: start [74939,74944]"
    },
    {
      "src": "character_literal: ' ' [204491,204494]",
      "dest": "character_literal: ' ' [205985,205988]"
    },
    {
      "src": "identifier: offset [219754,219760]",
      "dest": "identifier: offset [221248,221254]"
    },
    {
      "src": "parenthesized_expression [223715,223729]",
      "dest": "parenthesized_expression [225209,225223]"
    },
    {
      "src": "identifier: separatorChar [215785,215798]",
      "dest": "identifier: separatorChar [217279,217292]"
    },
    {
      "src": "assignment_expression [91326,91342]",
      "dest": "assignment_expression [92820,92836]"
    },
    {
      "src": "return_statement [202203,202216]",
      "dest": "return_statement [203697,203710]"
    },
    {
      "src": "variable_declarator [150135,150169]",
      "dest": "variable_declarator [151629,151663]"
    },
    {
      "src": "formal_parameters [233743,233775]",
      "dest": "formal_parameters [235237,235269]"
    },
    {
      "src": "new: new [111355,111358]",
      "dest": "new: new [112849,112852]"
    },
    {
      "src": "argument_list [160976,160978]",
      "dest": "argument_list [162470,162472]"
    },
    {
      "src": "identifier: Character [123625,123634]",
      "dest": "identifier: Character [125119,125128]"
    },
    {
      "src": "if_statement [220123,220262]",
      "dest": "if_statement [221617,221756]"
    },
    {
      "src": "type: char[] [60788,60794]",
      "dest": "type: char[] [61175,61181]"
    },
    {
      "src": "if_statement [66767,67003]",
      "dest": "if_statement [67886,68497]"
    },
    {
      "src": "block [83079,83389]",
      "dest": "block [84573,84883]"
    },
    {
      "src": "formal_parameter [168000,168007]",
      "dest": "formal_parameter [169494,169501]"
    },
    {
      "src": "variable_declarator [116833,116842]",
      "dest": "variable_declarator [118327,118336]"
    },
    {
      "src": "identifier: searchList [157833,157843]",
      "dest": "identifier: searchList [159327,159337]"
    },
    {
      "src": "identifier: startPos [39537,39545]",
      "dest": "identifier: startPos [39537,39545]"
    },
    {
      "src": "update_expression [235983,235986]",
      "dest": "update_expression [237477,237480]"
    },
    {
      "src": "identifier: list [110660,110664]",
      "dest": "identifier: list [112154,112158]"
    },
    {
      "src": "identifier: iae [25973,25976]",
      "dest": "identifier: iae [25973,25976]"
    },
    {
      "src": "false: false [227833,227838]",
      "dest": "false: false [229327,229332]"
    },
    {
      "src": "identifier: startPos [39509,39517]",
      "dest": "identifier: startPos [39509,39517]"
    },
    {
      "src": "block [42306,42353]",
      "dest": "block [42306,42353]"
    },
    {
      "src": "null_literal: null [195473,195477]",
      "dest": "null_literal: null [196967,196971]"
    },
    {
      "src": "identifier: start [116833,116838]",
      "dest": "identifier: start [118327,118332]"
    },
    {
      "src": "null_literal: null [132466,132470]",
      "dest": "null_literal: null [133960,133964]"
    },
    {
      "src": "argument_list [171894,171932]",
      "dest": "argument_list [173388,173426]"
    },
    {
      "src": "identifier: str [18882,18885]",
      "dest": "identifier: str [18882,18885]"
    },
    {
      "src": "identifier: tmp [70288,70291]",
      "dest": "identifier: tmp [71782,71785]"
    },
    {
      "src": "return_statement [89467,89516]",
      "dest": "return_statement [90961,91010]"
    },
    {
      "src": "method_invocation [134571,134586]",
      "dest": "method_invocation [136065,136080]"
    },
    {
      "src": "type_parameters [213830,213854]",
      "dest": "type_parameters [215324,215348]"
    },
    {
      "src": "catch: catch [26178,26183]",
      "dest": "catch: catch [26178,26183]"
    },
    {
      "src": "expression_statement [106028,106050]",
      "dest": "expression_statement [107522,107544]"
    },
    {
      "src": "identifier: searchLength [158872,158884]",
      "dest": "identifier: searchLength [160366,160378]"
    },
    {
      "src": "block [14749,14785]",
      "dest": "block [14749,14785]"
    },
    {
      "src": "modifiers [179903,179916]",
      "dest": "modifiers [181397,181410]"
    },
    {
      "src": "static: static [191848,191854]",
      "dest": "static: static [193342,193348]"
    },
    {
      "src": "comparison_operator: == [117690,117692]",
      "dest": "comparison_operator: == [119184,119186]"
    },
    {
      "src": "if_statement [188892,188957]",
      "dest": "if_statement [190386,190451]"
    },
    {
      "src": "type: int [205796,205799]",
      "dest": "type: int [207290,207293]"
    },
    {
      "src": "block_comment:     \n     * <p>Replaces all occurrences of a String within another String.</p>\n     *\n     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replace(null, *, *)        = null\n     * StringUtils.replace(\"\", *, *)          = \"\"\n     * StringUtils.replace(\"any\", null, *)    = \"any\"\n     * StringUtils.replace(\"any\", *, null)    = \"any\"\n     * StringUtils.replace(\"any\", \"\", *)      = \"any\"\n     * StringUtils.replace(\"aba\", \"a\", null)  = \"aba\"\n     * StringUtils.replace(\"aba\", \"a\", \"\")    = \"b\"\n     * StringUtils.replace(\"aba\", \"a\", \"z\")   = \"zbz\"\n     * </pre>\n     *\n     * @see #replace(String text, String searchString, String replacement, int max)\n     * @param text  text to search and replace in, may be null\n     * @param searchString  the String to search for, may be null\n     * @param replacement  the String to replace it with, may be null\n     * @return the text with any replacements processed,\n     *  <code>null</code> if null String input\n     */ [147198,148222]",
      "dest": "block_comment:     \n     * <p>Replaces all occurrences of a String within another String.</p>\n     *\n     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replace(null, *, *)        = null\n     * StringUtils.replace(\"\", *, *)          = \"\"\n     * StringUtils.replace(\"any\", null, *)    = \"any\"\n     * StringUtils.replace(\"any\", *, null)    = \"any\"\n     * StringUtils.replace(\"any\", \"\", *)      = \"any\"\n     * StringUtils.replace(\"aba\", \"a\", null)  = \"aba\"\n     * StringUtils.replace(\"aba\", \"a\", \"\")    = \"b\"\n     * StringUtils.replace(\"aba\", \"a\", \"z\")   = \"zbz\"\n     * </pre>\n     *\n     * @see #replace(String text, String searchString, String replacement, int max)\n     * @param text  text to search and replace in, may be null\n     * @param searchString  the String to search for, may be null\n     * @param replacement  the String to replace it with, may be null\n     * @return the text with any replacements processed,\n     *  <code>null</code> if null String input\n     */ [148692,149716]"
    },
    {
      "src": "formal_parameter [17100,17117]",
      "dest": "formal_parameter [17100,17117]"
    },
    {
      "src": "comparison_operator: == [57819,57821]",
      "dest": "comparison_operator: == [54924,54926]"
    },
    {
      "src": "binary_expression [70092,70106]",
      "dest": "binary_expression [71586,71600]"
    },
    {
      "src": "method_invocation [163730,163766]",
      "dest": "method_invocation [165224,165260]"
    },
    {
      "src": "logical_operator: || [225096,225098]",
      "dest": "logical_operator: || [226590,226592]"
    },
    {
      "src": "decimal_integer_literal: 1 [175427,175428]",
      "dest": "decimal_integer_literal: 1 [176921,176922]"
    },
    {
      "src": "argument_list [50887,50892]",
      "dest": "argument_list [50887,50892]"
    },
    {
      "src": "type: String [90758,90764]",
      "dest": "type: String [92252,92258]"
    },
    {
      "src": "identifier: length [244435,244441]",
      "dest": "identifier: length [245929,245935]"
    },
    {
      "src": "array_access [161525,161553]",
      "dest": "array_access [163019,163047]"
    },
    {
      "src": "identifier: substringBetween [87686,87702]",
      "dest": "identifier: substringBetween [89180,89196]"
    },
    {
      "src": "identifier: indexOfDifference [223847,223864]",
      "dest": "identifier: indexOfDifference [225341,225358]"
    },
    {
      "src": "formal_parameters [99692,99733]",
      "dest": "formal_parameters [101186,101227]"
    },
    {
      "src": "local_variable_declaration [175313,175336]",
      "dest": "local_variable_declaration [176807,176830]"
    },
    {
      "src": "formal_parameter [145489,145500]",
      "dest": "formal_parameter [146983,146994]"
    },
    {
      "src": "parenthesized_expression [239909,239941]",
      "dest": "parenthesized_expression [241403,241435]"
    },
    {
      "src": "identifier: replaceCharsLength [166145,166163]",
      "dest": "identifier: replaceCharsLength [167639,167657]"
    },
    {
      "src": "field_access [60975,60993]",
      "dest": "field_access [61394,61412]"
    },
    {
      "src": "identifier: isEmpty [144578,144585]",
      "dest": "identifier: isEmpty [146072,146079]"
    },
    {
      "src": "identifier: EMPTY [15851,15856]",
      "dest": "identifier: EMPTY [15851,15856]"
    },
    {
      "src": "identifier: add [111287,111290]",
      "dest": "identifier: add [112781,112784]"
    },
    {
      "src": "method_invocation [190785,190824]",
      "dest": "method_invocation [192279,192318]"
    },
    {
      "src": "method_declaration [157777,162582]",
      "dest": "method_declaration [159271,164076]"
    },
    {
      "src": "method_invocation [182254,182285]",
      "dest": "method_invocation [183748,183779]"
    },
    {
      "src": "identifier: substring [80082,80091]",
      "dest": "identifier: substring [81576,81585]"
    },
    {
      "src": "argument_list [89377,89407]",
      "dest": "argument_list [90871,90901]"
    },
    {
      "src": "line_comment: // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator)) [130895,130980]",
      "dest": "line_comment: // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator)) [132389,132474]"
    },
    {
      "src": "affectation_operator: = [222202,222203]",
      "dest": "affectation_operator: = [223696,223697]"
    },
    {
      "src": "binary_expression [76193,76200]",
      "dest": "binary_expression [77687,77694]"
    },
    {
      "src": "type_keyword: class [5224,5229]",
      "dest": "type_keyword: class [5224,5229]"
    },
    {
      "src": "modifiers [18375,18388]",
      "dest": "modifiers [18375,18388]"
    },
    {
      "src": "comparison_operator: >= [51986,51988]",
      "dest": "comparison_operator: >= [51986,51988]"
    },
    {
      "src": "formal_parameter [96744,96765]",
      "dest": "formal_parameter [98238,98259]"
    },
    {
      "src": "parenthesized_expression [29465,29479]",
      "dest": "parenthesized_expression [29465,29479]"
    },
    {
      "src": "method_invocation [144662,144693]",
      "dest": "method_invocation [146156,146187]"
    },
    {
      "src": "type: CharSequence [195436,195448]",
      "dest": "type: CharSequence [196930,196942]"
    },
    {
      "src": "identifier: bufSize [131175,131182]",
      "dest": "identifier: bufSize [132669,132676]"
    },
    {
      "src": "method_declaration [140211,140499]",
      "dest": "method_declaration [141705,141993]"
    },
    {
      "src": "formal_parameters [133771,133811]",
      "dest": "formal_parameters [135265,135305]"
    },
    {
      "src": "line_comment: // length of t [235182,235196]",
      "dest": "line_comment: // length of t [236676,236690]"
    },
    {
      "src": "logical_operator: || [39427,39429]",
      "dest": "logical_operator: || [39427,39429]"
    },
    {
      "src": ":: : [127745,127746]",
      "dest": ":: : [129239,129240]"
    },
    {
      "src": "local_variable_declaration [166017,166053]",
      "dest": "local_variable_declaration [167511,167547]"
    },
    {
      "src": "logical_operator: || [89194,89196]",
      "dest": "logical_operator: || [90688,90690]"
    },
    {
      "src": "decimal_integer_literal: 0 [123332,123333]",
      "dest": "decimal_integer_literal: 0 [124826,124827]"
    },
    {
      "src": "if_statement [225080,225145]",
      "dest": "if_statement [226574,226639]"
    },
    {
      "src": "parenthesized_expression [223778,223792]",
      "dest": "parenthesized_expression [225272,225286]"
    },
    {
      "src": "identifier: Character [210320,210329]",
      "dest": "identifier: Character [211814,211823]"
    },
    {
      "src": "identifier: str [220306,220309]",
      "dest": "identifier: str [221800,221803]"
    },
    {
      "src": "comparison_operator: == [239878,239880]",
      "dest": "comparison_operator: == [241372,241374]"
    },
    {
      "src": "decimal_integer_literal: 0 [66726,66727]",
      "dest": "decimal_integer_literal: 0 [67845,67846]"
    },
    {
      "src": "block [208061,208361]",
      "dest": "block [209555,209855]"
    },
    {
      "src": "return_statement [39757,39773]",
      "dest": "return_statement [39757,39773]"
    },
    {
      "src": "modifiers [140211,140224]",
      "dest": "modifiers [141705,141718]"
    },
    {
      "src": "binary_expression [222035,222089]",
      "dest": "binary_expression [223529,223583]"
    },
    {
      "src": "return_statement [61294,61317]",
      "dest": "return_statement [62033,62056]"
    },
    {
      "src": "identifier: str2 [223966,223970]",
      "dest": "identifier: str2 [225460,225464]"
    },
    {
      "src": "increment_operator: ++ [66745,66747]",
      "dest": "increment_operator: ++ [67864,67866]"
    },
    {
      "src": "type: String [145477,145483]",
      "dest": "type: String [146971,146977]"
    },
    {
      "src": "expression_statement [105010,105045]",
      "dest": "expression_statement [106504,106539]"
    },
    {
      "src": "identifier: isEmpty [90831,90838]",
      "dest": "identifier: isEmpty [92325,92332]"
    },
    {
      "src": "type: char [110365,110369]",
      "dest": "type: char [111859,111863]"
    },
    {
      "src": "modifiers [55956,55969]",
      "dest": "modifiers [56302,56315]"
    },
    {
      "src": "type: int [54653,54656]",
      "dest": "type: int [54685,54688]"
    },
    {
      "src": "identifier: leftPad [183011,183018]",
      "dest": "identifier: leftPad [184505,184512]"
    },
    {
      "src": "identifier: PAD_LIMIT [180192,180201]",
      "dest": "identifier: PAD_LIMIT [181686,181695]"
    },
    {
      "src": "identifier: containsOnly [65275,65287]",
      "dest": "identifier: containsOnly [66322,66334]"
    },
    {
      "src": "identifier: str [87761,87764]",
      "dest": "identifier: str [89255,89258]"
    },
    {
      "src": "identifier: pads [189005,189009]",
      "dest": "identifier: pads [190499,190503]"
    },
    {
      "src": "method_invocation [113369,113411]",
      "dest": "method_invocation [114863,114905]"
    },
    {
      "src": "parenthesized_expression [196763,196792]",
      "dest": "parenthesized_expression [198257,198286]"
    },
    {
      "src": "identifier: str [62299,62302]",
      "dest": "identifier: str [63038,63041]"
    },
    {
      "src": "formal_parameters [45051,45094]",
      "dest": "formal_parameters [45051,45094]"
    },
    {
      "src": "identifier: Character [201006,201015]",
      "dest": "identifier: Character [202500,202509]"
    },
    {
      "src": "true: true [239206,239210]",
      "dest": "true: true [240700,240704]"
    },
    {
      "src": "if_statement [210316,210411]",
      "dest": "if_statement [211810,211905]"
    },
    {
      "src": "argument_list [118164,118174]",
      "dest": "argument_list [119658,119668]"
    },
    {
      "src": "decimal_integer_literal: 0 [23076,23077]",
      "dest": "decimal_integer_literal: 0 [23076,23077]"
    },
    {
      "src": "decimal_integer_literal: 0 [90941,90942]",
      "dest": "decimal_integer_literal: 0 [92435,92436]"
    },
    {
      "src": "method_invocation [148327,148371]",
      "dest": "method_invocation [149821,149865]"
    },
    {
      "src": "block [8899,8944]",
      "dest": "block [8899,8944]"
    },
    {
      "src": "array_access [127714,127731]",
      "dest": "array_access [129208,129225]"
    },
    {
      "src": "visibility: public [211137,211143]",
      "dest": "visibility: public [212631,212637]"
    },
    {
      "src": "identifier: str [190514,190517]",
      "dest": "identifier: str [192008,192011]"
    },
    {
      "src": "comparison_operator: == [130834,130836]",
      "dest": "comparison_operator: == [132328,132330]"
    },
    {
      "src": "for_statement [39792,39965]",
      "dest": "for_statement [39792,39965]"
    },
    {
      "src": "identifier: EMPTY [231400,231405]",
      "dest": "identifier: EMPTY [232894,232899]"
    },
    {
      "src": "block [186094,186160]",
      "dest": "block [187588,187654]"
    },
    {
      "src": "identifier: end [150009,150012]",
      "dest": "identifier: end [151503,151506]"
    },
    {
      "src": "type: int [208133,208136]",
      "dest": "type: int [209627,209630]"
    },
    {
      "src": "return_statement [84742,84753]",
      "dest": "return_statement [86236,86247]"
    },
    {
      "src": "if_statement [61154,61239]",
      "dest": "if_statement [61613,61978]"
    },
    {
      "src": "identifier: indexOf [145536,145543]",
      "dest": "identifier: indexOf [147030,147037]"
    },
    {
      "src": "type: String [179031,179037]",
      "dest": "type: String [180525,180531]"
    },
    {
      "src": "binary_expression [225355,225371]",
      "dest": "binary_expression [226849,226865]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only uppercase characters.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty String (length()=0) will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAllUpperCase(null)   = false\n     * StringUtils.isAllUpperCase(\"\")     = false\n     * StringUtils.isAllUpperCase(\"  \")   = false\n     * StringUtils.isAllUpperCase(\"ABC\")  = true\n     * StringUtils.isAllUpperCase(\"aBC\") = false\n     * </pre>\n     *\n     * @param cs the CharSequence to check, may be null\n     * @return <code>true</code> if only contains uppercase characters, and is non-null\n     * @since 2.5\n     */ [210454,211132]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only uppercase characters.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty String (length()=0) will return <code>false</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAllUpperCase(null)   = false\n     * StringUtils.isAllUpperCase(\"\")     = false\n     * StringUtils.isAllUpperCase(\"  \")   = false\n     * StringUtils.isAllUpperCase(\"ABC\")  = true\n     * StringUtils.isAllUpperCase(\"aBC\") = false\n     * </pre>\n     *\n     * @param cs the CharSequence to check, may be null\n     * @return <code>true</code> if only contains uppercase characters, and is non-null\n     * @since 2.5\n     */ [211948,212626]"
    },
    {
      "src": "variable_declarator [235166,235180]",
      "dest": "variable_declarator [236660,236674]"
    },
    {
      "src": "update_expression [206978,206981]",
      "dest": "update_expression [208472,208475]"
    },
    {
      "src": "import_declaration [944,991]",
      "dest": "import_declaration [944,991]"
    },
    {
      "src": "field_declaration [6095,6140]",
      "dest": "field_declaration [6095,6140]"
    },
    {
      "src": "identifier: length [20451,20457]",
      "dest": "identifier: length [20451,20457]"
    },
    {
      "src": "identifier: str [189150,189153]",
      "dest": "identifier: str [190644,190647]"
    },
    {
      "src": "binary_expression [168419,168430]",
      "dest": "binary_expression [169913,169924]"
    },
    {
      "src": "update_expression [186089,186092]",
      "dest": "update_expression [187583,187586]"
    },
    {
      "src": "argument_list [209298,209312]",
      "dest": "argument_list [210792,210806]"
    },
    {
      "src": "arithmetic_operator: - [124023,124024]",
      "dest": "arithmetic_operator: - [125517,125518]"
    },
    {
      "src": "identifier: split [215698,215703]",
      "dest": "identifier: split [217192,217197]"
    },
    {
      "src": "binary_expression [60822,60868]",
      "dest": "binary_expression [61209,61255]"
    },
    {
      "src": "block [8677,8981]",
      "dest": "block [8677,8981]"
    },
    {
      "src": "type: String [15788,15794]",
      "dest": "type: String [15788,15794]"
    },
    {
      "src": "block [206852,207125]",
      "dest": "block [208346,208619]"
    },
    {
      "src": "if_statement [204416,204542]",
      "dest": "if_statement [205910,206036]"
    },
    {
      "src": "block [70229,70270]",
      "dest": "block [71723,71764]"
    },
    {
      "src": "identifier: str [166406,166409]",
      "dest": "identifier: str [167900,167903]"
    },
    {
      "src": "argument_list [235135,235137]",
      "dest": "argument_list [236629,236631]"
    },
    {
      "src": "affectation_operator: = [208140,208141]",
      "dest": "affectation_operator: = [209634,209635]"
    },
    {
      "src": "block [104817,106179]",
      "dest": "block [106311,107673]"
    },
    {
      "src": "comparison_operator: < [225203,225204]",
      "dest": "comparison_operator: < [226697,226698]"
    },
    {
      "src": "continue_statement [118990,118999]",
      "dest": "continue_statement [120484,120493]"
    },
    {
      "src": "argument_list [181476,181484]",
      "dest": "argument_list [182970,182978]"
    },
    {
      "src": "block [185581,185657]",
      "dest": "block [187075,187151]"
    },
    {
      "src": "logical_operator: || [158157,158159]",
      "dest": "logical_operator: || [159651,159653]"
    },
    {
      "src": "array_access [131221,131238]",
      "dest": "array_access [132715,132732]"
    },
    {
      "src": "identifier: remove [141753,141759]",
      "dest": "identifier: remove [143247,143253]"
    },
    {
      "src": "array_creation_expression [111355,111378]",
      "dest": "array_creation_expression [112849,112872]"
    },
    {
      "src": "identifier: searchLength [159067,159079]",
      "dest": "identifier: searchLength [160561,160573]"
    },
    {
      "src": "if_statement [59544,59606]",
      "dest": "if_statement [59931,59993]"
    },
    {
      "src": "visibility: public [86237,86243]",
      "dest": "visibility: public [87731,87737]"
    },
    {
      "src": "identifier: cs [57512,57514]",
      "dest": "identifier: cs [57852,57854]"
    },
    {
      "src": "parenthesized_expression [23049,23072]",
      "dest": "parenthesized_expression [23049,23072]"
    },
    {
      "src": "if_statement [198200,198284]",
      "dest": "if_statement [199694,199778]"
    },
    {
      "src": "affectation_operator: = [170262,170263]",
      "dest": "affectation_operator: = [171756,171757]"
    },
    {
      "src": "parenthesized_expression [118684,118704]",
      "dest": "parenthesized_expression [120178,120198]"
    },
    {
      "src": "binary_expression [228834,228849]",
      "dest": "binary_expression [230328,230343]"
    },
    {
      "src": "expression_statement [118735,118743]",
      "dest": "expression_statement [120229,120237]"
    },
    {
      "src": "variable_declarator [49789,49801]",
      "dest": "variable_declarator [49789,49801]"
    },
    {
      "src": "affectation_operator: = [182148,182149]",
      "dest": "affectation_operator: = [183642,183643]"
    },
    {
      "src": "binary_expression [39718,39741]",
      "dest": "binary_expression [39718,39741]"
    },
    {
      "src": "method_invocation [173238,173257]",
      "dest": "method_invocation [174732,174751]"
    },
    {
      "src": "\": \" [158474,158475]",
      "dest": "\": \" [159968,159969]"
    },
    {
      "src": "affectation_operator: = [8733,8734]",
      "dest": "affectation_operator: = [8733,8734]"
    },
    {
      "src": "assignment_expression [8726,8746]",
      "dest": "assignment_expression [8726,8746]"
    },
    {
      "src": "method_declaration [55956,56184]",
      "dest": "method_declaration [56302,56530]"
    },
    {
      "src": "modifiers [17061,17074]",
      "dest": "modifiers [17061,17074]"
    },
    {
      "src": "identifier: length [222035,222041]",
      "dest": "identifier: length [223529,223535]"
    },
    {
      "src": "identifier: searchStr [53125,53134]",
      "dest": "identifier: searchStr [53125,53134]"
    },
    {
      "src": "visibility: public [238045,238051]",
      "dest": "visibility: public [239539,239545]"
    },
    {
      "src": "binary_expression [227687,227701]",
      "dest": "binary_expression [229181,229195]"
    },
    {
      "src": "field_access [160458,160475]",
      "dest": "field_access [161952,161969]"
    },
    {
      "src": "formal_parameter [201949,201964]",
      "dest": "formal_parameter [203443,203458]"
    },
    {
      "src": "identifier: decomposed [24862,24872]",
      "dest": "identifier: decomposed [24862,24872]"
    },
    {
      "src": "ternary_expression [11708,11731]",
      "dest": "ternary_expression [11708,11731]"
    },
    {
      "src": "identifier: size [181812,181816]",
      "dest": "identifier: size [183306,183310]"
    },
    {
      "src": "identifier: lastIndex [36263,36272]",
      "dest": "identifier: lastIndex [36263,36272]"
    },
    {
      "src": "variable_declarator [196744,196750]",
      "dest": "variable_declarator [198238,198244]"
    },
    {
      "src": "identifier: separator [134408,134417]",
      "dest": "identifier: separator [135902,135911]"
    },
    {
      "src": "identifier: start [73754,73759]",
      "dest": "identifier: start [75248,75253]"
    },
    {
      "src": "return_statement [109680,109725]",
      "dest": "return_statement [111174,111219]"
    },
    {
      "src": "formal_parameter [243473,243483]",
      "dest": "formal_parameter [244967,244977]"
    },
    {
      "src": "true: true [113406,113410]",
      "dest": "true: true [114900,114904]"
    },
    {
      "src": "identifier: length [199995,200001]",
      "dest": "identifier: length [201489,201495]"
    },
    {
      "src": "method_declaration [152551,152724]",
      "dest": "method_declaration [154045,154218]"
    },
    {
      "src": "variable_declarator [62436,62457]",
      "dest": "variable_declarator [63175,63196]"
    },
    {
      "src": "binary_expression [116568,116579]",
      "dest": "binary_expression [118062,118073]"
    },
    {
      "src": "identifier: charAt [175224,175230]",
      "dest": "identifier: charAt [176718,176724]"
    },
    {
      "src": "type: IndexOutOfBoundsException [177980,178005]",
      "dest": "type: IndexOutOfBoundsException [179474,179499]"
    },
    {
      "src": "identifier: isEmpty [145516,145523]",
      "dest": "identifier: isEmpty [147010,147017]"
    },
    {
      "src": "assignment_expression [236405,236411]",
      "dest": "assignment_expression [237899,237905]"
    },
    {
      "src": "binary_expression [219819,219831]",
      "dest": "binary_expression [221313,221325]"
    },
    {
      "src": "identifier: isEmpty [56051,56058]",
      "dest": "identifier: isEmpty [56397,56404]"
    },
    {
      "src": "argument_list [181999,182008]",
      "dest": "argument_list [183493,183502]"
    },
    {
      "src": "identifier: str [14794,14797]",
      "dest": "identifier: str [14794,14797]"
    },
    {
      "src": "identifier: count [137446,137451]",
      "dest": "identifier: count [138940,138945]"
    },
    {
      "src": "local_variable_declaration [149982,149996]",
      "dest": "local_variable_declaration [151476,151490]"
    },
    {
      "src": "visibility: public [87665,87671]",
      "dest": "visibility: public [89159,89165]"
    },
    {
      "src": "argument_list [150475,150503]",
      "dest": "argument_list [151969,151997]"
    },
    {
      "src": "formal_parameters [203089,203106]",
      "dest": "formal_parameters [204583,204600]"
    },
    {
      "src": "null_literal: null [31889,31893]",
      "dest": "null_literal: null [31889,31893]"
    },
    {
      "src": "block [242397,242449]",
      "dest": "block [243891,243943]"
    },
    {
      "src": "identifier: outputLength [174788,174800]",
      "dest": "identifier: outputLength [176282,176294]"
    },
    {
      "src": "static: static [18382,18388]",
      "dest": "static: static [18382,18388]"
    },
    {
      "src": "method_invocation [150712,150733]",
      "dest": "method_invocation [152206,152227]"
    },
    {
      "src": "identifier: iterator [132427,132435]",
      "dest": "identifier: iterator [133921,133929]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [39981,39996]",
      "dest": "identifier: INDEX_NOT_FOUND [39981,39996]"
    },
    {
      "src": "binary_expression [223779,223791]",
      "dest": "binary_expression [225273,225285]"
    },
    {
      "src": "null_literal: null [200877,200881]",
      "dest": "null_literal: null [202371,202375]"
    },
    {
      "src": "type: int [159142,159145]",
      "dest": "type: int [160636,160639]"
    },
    {
      "src": "block_comment:     \n     * <p>Compares two Strings, returning <code>true</code> if they are equal ignoring\n     * the case.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered equal. Comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equalsIgnoreCase(null, null)   = true\n     * StringUtils.equalsIgnoreCase(null, \"abc\")  = false\n     * StringUtils.equalsIgnoreCase(\"abc\", null)  = false\n     * StringUtils.equalsIgnoreCase(\"abc\", \"abc\") = true\n     * StringUtils.equalsIgnoreCase(\"abc\", \"ABC\") = true\n     * </pre>\n     *\n     * @see java.lang.String#equalsIgnoreCase(String)\n     * @param str1  the first String, may be null\n     * @param str2  the second String, may be null\n     * @return <code>true</code> if the Strings are equal, case insensitive, or\n     *  both <code>null</code>\n     */ [27543,28422]",
      "dest": "block_comment:     \n     * <p>Compares two Strings, returning <code>true</code> if they are equal ignoring\n     * the case.</p>\n     *\n     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n     * references are considered equal. Comparison is case insensitive.</p>\n     *\n     * <pre>\n     * StringUtils.equalsIgnoreCase(null, null)   = true\n     * StringUtils.equalsIgnoreCase(null, \"abc\")  = false\n     * StringUtils.equalsIgnoreCase(\"abc\", null)  = false\n     * StringUtils.equalsIgnoreCase(\"abc\", \"abc\") = true\n     * StringUtils.equalsIgnoreCase(\"abc\", \"ABC\") = true\n     * </pre>\n     *\n     * @see java.lang.String#equalsIgnoreCase(String)\n     * @param str1  the first String, may be null\n     * @param str2  the second String, may be null\n     * @return <code>true</code> if the Strings are equal, case insensitive, or\n     *  both <code>null</code>\n     */ [27543,28422]"
    },
    {
      "src": "false: false [205882,205887]",
      "dest": "false: false [207376,207381]"
    },
    {
      "src": "return_statement [144625,144636]",
      "dest": "return_statement [146119,146130]"
    },
    {
      "src": "variable_declarator [61109,61114]",
      "dest": "variable_declarator [61568,61573]"
    },
    {
      "src": "comparison_operator: < [61118,61119]",
      "dest": "comparison_operator: < [61577,61578]"
    },
    {
      "src": "identifier: padding [182186,182193]",
      "dest": "identifier: padding [183680,183687]"
    },
    {
      "src": "argument_list [210261,210263]",
      "dest": "argument_list [211755,211757]"
    },
    {
      "src": "static: static [83020,83026]",
      "dest": "static: static [84514,84520]"
    },
    {
      "src": "type: int [104234,104237]",
      "dest": "type: int [105728,105731]"
    },
    {
      "src": "block [206983,207098]",
      "dest": "block [208477,208592]"
    },
    {
      "src": "identifier: endIndex [127886,127894]",
      "dest": "identifier: endIndex [129380,129388]"
    },
    {
      "src": "type: int [190475,190478]",
      "dest": "type: int [191969,191972]"
    },
    {
      "src": "argument_list [228683,228694]",
      "dest": "argument_list [230177,230188]"
    },
    {
      "src": "method_invocation [198656,198681]",
      "dest": "method_invocation [200150,200175]"
    },
    {
      "src": "increment_operator: ++ [210298,210300]",
      "dest": "increment_operator: ++ [211792,211794]"
    },
    {
      "src": "binary_expression [170007,170024]",
      "dest": "binary_expression [171501,171518]"
    },
    {
      "src": "parenthesized_expression [39636,39657]",
      "dest": "parenthesized_expression [39636,39657]"
    },
    {
      "src": "binary_expression [239856,239867]",
      "dest": "binary_expression [241350,241361]"
    },
    {
      "src": "affectation_operator: = [150646,150647]",
      "dest": "affectation_operator: = [152140,152141]"
    },
    {
      "src": "return_statement [223807,223819]",
      "dest": "return_statement [225301,225313]"
    },
    {
      "src": "comparison_operator: == [27491,27493]",
      "dest": "comparison_operator: == [27491,27493]"
    },
    {
      "src": "affectation_operator: = [119075,119076]",
      "dest": "affectation_operator: = [120569,120570]"
    },
    {
      "src": "logical_operator: || [162016,162018]",
      "dest": "logical_operator: || [163510,163512]"
    },
    {
      "src": "variable_declarator [235657,235661]",
      "dest": "variable_declarator [237151,237155]"
    },
    {
      "src": "local_variable_declaration [150005,150049]",
      "dest": "local_variable_declaration [151499,151543]"
    },
    {
      "src": "identifier: start [89488,89493]",
      "dest": "identifier: start [90982,90987]"
    },
    {
      "src": "type: Object [132968,132974]",
      "dest": "type: Object [134462,134468]"
    },
    {
      "src": "type: boolean [8025,8032]",
      "dest": "type: boolean [8025,8032]"
    },
    {
      "src": "identifier: arrayPos [228629,228637]",
      "dest": "identifier: arrayPos [230123,230131]"
    },
    {
      "src": "affectation_operator: = [161214,161215]",
      "dest": "affectation_operator: = [162708,162709]"
    },
    {
      "src": "identifier: end [104755,104758]",
      "dest": "identifier: end [106249,106252]"
    },
    {
      "src": "identifier: isEmpty [143320,143327]",
      "dest": "identifier: isEmpty [144814,144821]"
    },
    {
      "src": "local_variable_declaration [235793,235799]",
      "dest": "local_variable_declaration [237287,237293]"
    },
    {
      "src": "formal_parameters [92793,92805]",
      "dest": "formal_parameters [94287,94299]"
    },
    {
      "src": "switch_block_statement_group [175511,175734]",
      "dest": "switch_block_statement_group [177005,177228]"
    },
    {
      "src": "identifier: str [239928,239931]",
      "dest": "identifier: str [241422,241425]"
    },
    {
      "src": "return_statement [23093,23105]",
      "dest": "return_statement [23093,23105]"
    },
    {
      "src": "\": \" [24461,24462]",
      "dest": "\": \" [24461,24462]"
    },
    {
      "src": "argument_list [198818,198820]",
      "dest": "argument_list [200312,200314]"
    },
    {
      "src": "true: true [39870,39874]",
      "dest": "true: true [39870,39874]"
    },
    {
      "src": "identifier: stripChars [20440,20450]",
      "dest": "identifier: stripChars [20440,20450]"
    },
    {
      "src": "visibility: public [145449,145455]",
      "dest": "visibility: public [146943,146949]"
    },
    {
      "src": "return_statement [185718,185762]",
      "dest": "return_statement [187212,187256]"
    },
    {
      "src": "identifier: ch [198501,198503]",
      "dest": "identifier: ch [199995,199997]"
    },
    {
      "src": "identifier: obj [133056,133059]",
      "dest": "identifier: obj [134550,134553]"
    },
    {
      "src": "identifier: str [76251,76254]",
      "dest": "identifier: str [77745,77748]"
    },
    {
      "src": "identifier: end [20371,20374]",
      "dest": "identifier: end [20371,20374]"
    },
    {
      "src": "type: int [228418,228421]",
      "dest": "type: int [229912,229915]"
    },
    {
      "src": "affectation_operator: = [228746,228747]",
      "dest": "affectation_operator: = [230240,230241]"
    },
    {
      "src": "throw_statement [25237,25332]",
      "dest": "throw_statement [25237,25332]"
    },
    {
      "src": "identifier: endIndex [127505,127513]",
      "dest": "identifier: endIndex [128999,129007]"
    },
    {
      "src": "identifier: targetSting [222270,222281]",
      "dest": "identifier: targetSting [223764,223775]"
    },
    {
      "src": "assignment_expression [137297,137325]",
      "dest": "assignment_expression [138791,138819]"
    },
    {
      "src": "binary_expression [43376,43387]",
      "dest": "binary_expression [43376,43387]"
    },
    {
      "src": "decimal_integer_literal: 0 [180093,180094]",
      "dest": "decimal_integer_literal: 0 [181587,181588]"
    },
    {
      "src": "null_literal: null [78426,78430]",
      "dest": "null_literal: null [79920,79924]"
    },
    {
      "src": "type: String [171708,171714]",
      "dest": "type: String [173202,173208]"
    },
    {
      "src": "method_invocation [109687,109724]",
      "dest": "method_invocation [111181,111218]"
    },
    {
      "src": "argument_list [60855,60868]",
      "dest": "argument_list [61242,61255]"
    },
    {
      "src": "formal_parameters [57351,57388]",
      "dest": "formal_parameters [54464,54501]"
    },
    {
      "src": "identifier: str [137397,137400]",
      "dest": "identifier: str [138891,138894]"
    },
    {
      "src": "assignment_expression [111172,111184]",
      "dest": "assignment_expression [112666,112678]"
    },
    {
      "src": "affectation_operator: = [123359,123360]",
      "dest": "affectation_operator: = [124853,124854]"
    },
    {
      "src": "if_statement [83262,83327]",
      "dest": "if_statement [84756,84821]"
    },
    {
      "src": "array_access [161163,161192]",
      "dest": "array_access [162657,162686]"
    },
    {
      "src": "identifier: start [149986,149991]",
      "dest": "identifier: start [151480,151485]"
    },
    {
      "src": "block_comment:     \n     * <p>Replaces a String with another String inside a larger String, once.</p>\n     *\n     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replaceOnce(null, *, *)        = null\n     * StringUtils.replaceOnce(\"\", *, *)          = \"\"\n     * StringUtils.replaceOnce(\"any\", null, *)    = \"any\"\n     * StringUtils.replaceOnce(\"any\", *, null)    = \"any\"\n     * StringUtils.replaceOnce(\"any\", \"\", *)      = \"any\"\n     * StringUtils.replaceOnce(\"aba\", \"a\", null)  = \"aba\"\n     * StringUtils.replaceOnce(\"aba\", \"a\", \"\")    = \"ba\"\n     * StringUtils.replaceOnce(\"aba\", \"a\", \"z\")   = \"zba\"\n     * </pre>\n     *\n     * @see #replace(String text, String searchString, String replacement, int max)\n     * @param text  text to search and replace in, may be null\n     * @param searchString  the String to search for, may be null\n     * @param replacement  the String to replace with, may be null\n     * @return the text with any replacements processed,\n     *  <code>null</code> if null String input\n     */ [145971,147033]",
      "dest": "block_comment:     \n     * <p>Replaces a String with another String inside a larger String, once.</p>\n     *\n     * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n     *\n     * <pre>\n     * StringUtils.replaceOnce(null, *, *)        = null\n     * StringUtils.replaceOnce(\"\", *, *)          = \"\"\n     * StringUtils.replaceOnce(\"any\", null, *)    = \"any\"\n     * StringUtils.replaceOnce(\"any\", *, null)    = \"any\"\n     * StringUtils.replaceOnce(\"any\", \"\", *)      = \"any\"\n     * StringUtils.replaceOnce(\"aba\", \"a\", null)  = \"aba\"\n     * StringUtils.replaceOnce(\"aba\", \"a\", \"\")    = \"ba\"\n     * StringUtils.replaceOnce(\"aba\", \"a\", \"z\")   = \"zba\"\n     * </pre>\n     *\n     * @see #replace(String text, String searchString, String replacement, int max)\n     * @param text  text to search and replace in, may be null\n     * @param searchString  the String to search for, may be null\n     * @param replacement  the String to replace with, may be null\n     * @return the text with any replacements processed,\n     *  <code>null</code> if null String input\n     */ [147465,148527]"
    },
    {
      "src": "string_fragment: ClassNotFoundException occurred during 1.6 backcompat code [25265,25323]",
      "dest": "string_fragment: ClassNotFoundException occurred during 1.6 backcompat code [25265,25323]"
    },
    {
      "src": "type: char [62514,62518]",
      "dest": "type: char [63253,63257]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [83273,83288]",
      "dest": "identifier: INDEX_NOT_FOUND [84767,84782]"
    },
    {
      "src": "formal_parameters [79741,79771]",
      "dest": "formal_parameters [81235,81265]"
    },
    {
      "src": "decimal_integer_literal: 1 [161289,161290]",
      "dest": "decimal_integer_literal: 1 [162783,162784]"
    },
    {
      "src": "local_variable_declaration [175251,175291]",
      "dest": "local_variable_declaration [176745,176785]"
    },
    {
      "src": "binary_expression [160898,160915]",
      "dest": "binary_expression [162392,162409]"
    },
    {
      "src": "identifier: closeLen [91018,91026]",
      "dest": "identifier: closeLen [92512,92520]"
    },
    {
      "src": "ternary_expression [212986,213016]",
      "dest": "ternary_expression [214480,214510]"
    },
    {
      "src": "identifier: str [220215,220218]",
      "dest": "identifier: str [221709,221712]"
    },
    {
      "src": "unary_expression [113402,113404]",
      "dest": "unary_expression [114896,114898]"
    },
    {
      "src": "variable_declarator [60963,60993]",
      "dest": "variable_declarator [61382,61412]"
    },
    {
      "src": "identifier: camelCase [123604,123613]",
      "dest": "identifier: camelCase [125098,125107]"
    },
    {
      "src": "while_statement [199892,200014]",
      "dest": "while_statement [201386,201508]"
    },
    {
      "src": "identifier: str [190756,190759]",
      "dest": "identifier: str [192250,192253]"
    },
    {
      "src": "parenthesized_expression [70091,70107]",
      "dest": "parenthesized_expression [71585,71601]"
    },
    {
      "src": "parenthesized_expression [54515,54563]",
      "dest": "parenthesized_expression [54515,54563]"
    },
    {
      "src": "block [188882,189211]",
      "dest": "block [190376,190705]"
    },
    {
      "src": "static: static [227105,227111]",
      "dest": "static: static [228599,228605]"
    },
    {
      "src": "affectation_operator: = [168482,168483]",
      "dest": "affectation_operator: = [169976,169977]"
    },
    {
      "src": "method_declaration [188818,189211]",
      "dest": "method_declaration [190312,190705]"
    },
    {
      "src": "identifier: cs [205865,205867]",
      "dest": "identifier: cs [207359,207361]"
    },
    {
      "src": "for_statement [159352,160003]",
      "dest": "for_statement [160846,161497]"
    },
    {
      "src": "identifier: indexOf [33612,33619]",
      "dest": "identifier: indexOf [33612,33619]"
    },
    {
      "src": "method_invocation [25027,25095]",
      "dest": "method_invocation [25027,25095]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String returning <code>null</code> if the String is\n     * empty (\"\") after the trim or if it is <code>null</code>.\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #stripToNull(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.trimToNull(null)          = null\n     * StringUtils.trimToNull(\"\")            = null\n     * StringUtils.trimToNull(\"     \")       = null\n     * StringUtils.trimToNull(\"abc\")         = \"abc\"\n     * StringUtils.trimToNull(\"    abc    \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed String,\n     *  <code>null</code> if only chars &lt;= 32, empty or null String input\n     * @since 2.0\n     */ [10723,11611]",
      "dest": "block_comment:     \n     * <p>Removes control characters (char &lt;= 32) from both\n     * ends of this String returning <code>null</code> if the String is\n     * empty (\"\") after the trim or if it is <code>null</code>.\n     *\n     * <p>The String is trimmed using {@link String#trim()}.\n     * Trim removes start and end characters &lt;= 32.\n     * To strip whitespace use {@link #stripToNull(String)}.</p>\n     *\n     * <pre>\n     * StringUtils.trimToNull(null)          = null\n     * StringUtils.trimToNull(\"\")            = null\n     * StringUtils.trimToNull(\"     \")       = null\n     * StringUtils.trimToNull(\"abc\")         = \"abc\"\n     * StringUtils.trimToNull(\"    abc    \") = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to be trimmed, may be null\n     * @return the trimmed String,\n     *  <code>null</code> if only chars &lt;= 32, empty or null String input\n     * @since 2.0\n     */ [10723,11611]"
    },
    {
      "src": "identifier: add [105021,105024]",
      "dest": "identifier: add [106515,106518]"
    },
    {
      "src": "identifier: buf [134445,134448]",
      "dest": "identifier: buf [135939,135942]"
    },
    {
      "src": "variable_declarator [223842,223876]",
      "dest": "variable_declarator [225336,225370]"
    },
    {
      "src": "identifier: ret [69947,69950]",
      "dest": "identifier: ret [71441,71444]"
    },
    {
      "src": "return_statement [60884,60907]",
      "dest": "return_statement [61271,61294]"
    },
    {
      "src": "comparison_operator: == [65191,65193]",
      "dest": "comparison_operator: == [66238,66240]"
    },
    {
      "src": "comparison_operator: == [72097,72099]",
      "dest": "comparison_operator: == [73591,73593]"
    },
    {
      "src": "identifier: length [78630,78636]",
      "dest": "identifier: length [80124,80130]"
    },
    {
      "src": "variable_declarator [116860,116873]",
      "dest": "variable_declarator [118354,118367]"
    },
    {
      "src": "if_statement [54833,54971]",
      "dest": "if_statement [58140,58748]"
    },
    {
      "src": "object_creation_expression [104612,104635]",
      "dest": "object_creation_expression [106106,106129]"
    },
    {
      "src": "block [162448,162486]",
      "dest": "block [163942,163980]"
    },
    {
      "src": "variable_declarator [54624,54643]",
      "dest": "variable_declarator [54624,54643]"
    },
    {
      "src": "local_variable_declaration [69981,69993]",
      "dest": "local_variable_declaration [71475,71487]"
    },
    {
      "src": "comparison_operator: == [225016,225018]",
      "dest": "comparison_operator: == [226510,226512]"
    },
    {
      "src": "expression_statement [190834,190868]",
      "dest": "expression_statement [192328,192362]"
    },
    {
      "src": "assignment_expression [118370,118382]",
      "dest": "assignment_expression [119864,119876]"
    },
    {
      "src": "argument_list [20457,20459]",
      "dest": "argument_list [20457,20459]"
    },
    {
      "src": "block [104406,104520]",
      "dest": "block [105900,106014]"
    },
    {
      "src": "formal_parameters [219346,219384]",
      "dest": "formal_parameters [220840,220878]"
    },
    {
      "src": "identifier: str [189165,189168]",
      "dest": "identifier: str [190659,190662]"
    },
    {
      "src": "formal_parameter [212938,212948]",
      "dest": "formal_parameter [214432,214442]"
    },
    {
      "src": "identifier: strs [215779,215783]",
      "dest": "identifier: strs [217273,217277]"
    },
    {
      "src": "identifier: str [165590,165593]",
      "dest": "identifier: str [167084,167087]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits a String by Character type as returned by\n     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n     * characters of the same type are returned as complete tokens, with the\n     * following exception: if <code>camelCase</code> is <code>true</code>,\n     * the character of type <code>Character.UPPERCASE_LETTER</code>, if any,\n     * immediately preceding a token of type <code>Character.LOWERCASE_LETTER</code>\n     * will belong to the following token rather than to the preceding, if any,\n     * <code>Character.UPPERCASE_LETTER</code> token. \n     * @param str the String to split, may be <code>null</code>\n     * @param camelCase whether to use so-called \"camel-case\" for letter types\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.4\n     */ [122138,122978]",
      "dest": "block_comment:     \n     * <p>Splits a String by Character type as returned by\n     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n     * characters of the same type are returned as complete tokens, with the\n     * following exception: if <code>camelCase</code> is <code>true</code>,\n     * the character of type <code>Character.UPPERCASE_LETTER</code>, if any,\n     * immediately preceding a token of type <code>Character.LOWERCASE_LETTER</code>\n     * will belong to the following token rather than to the preceding, if any,\n     * <code>Character.UPPERCASE_LETTER</code> token. \n     * @param str the String to split, may be <code>null</code>\n     * @param camelCase whether to use so-called \"camel-case\" for letter types\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.4\n     */ [123632,124472]"
    },
    {
      "src": "identifier: charAt [170054,170060]",
      "dest": "identifier: charAt [171548,171554]"
    },
    {
      "src": "for_statement [8799,8954]",
      "dest": "for_statement [8799,8954]"
    },
    {
      "src": "local_variable_declaration [170212,170243]",
      "dest": "local_variable_declaration [171706,171737]"
    },
    {
      "src": "decimal_integer_literal: 0 [118556,118557]",
      "dest": "decimal_integer_literal: 0 [120050,120051]"
    },
    {
      "src": "affectation_operator: = [24766,24767]",
      "dest": "affectation_operator: = [24766,24767]"
    },
    {
      "src": "identifier: bufSize [131114,131121]",
      "dest": "identifier: bufSize [132608,132615]"
    },
    {
      "src": "binary_expression [104730,104739]",
      "dest": "binary_expression [106224,106233]"
    },
    {
      "src": "parenthesized_expression [199775,199805]",
      "dest": "parenthesized_expression [201269,201299]"
    },
    {
      "src": "binary_expression [161634,161660]",
      "dest": "binary_expression [163128,163154]"
    },
    {
      "src": "for_statement [127857,128087]",
      "dest": "for_statement [129351,129581]"
    },
    {
      "src": "return_statement [176920,176956]",
      "dest": "return_statement [178414,178450]"
    },
    {
      "src": "method_invocation [227873,227914]",
      "dest": "method_invocation [229367,229408]"
    },
    {
      "src": "if_statement [76189,76234]",
      "dest": "if_statement [77683,77728]"
    },
    {
      "src": "arithmetic_operator: + [158491,158492]",
      "dest": "arithmetic_operator: + [159985,159986]"
    },
    {
      "src": "block [54859,54971]",
      "dest": "block [58166,58748]"
    },
    {
      "src": "return_statement [135437,135481]",
      "dest": "return_statement [136931,136975]"
    },
    {
      "src": "decimal_integer_literal: 0 [110574,110575]",
      "dest": "decimal_integer_literal: 0 [112068,112069]"
    },
    {
      "src": "identifier: cs [208057,208059]",
      "dest": "identifier: cs [209551,209553]"
    },
    {
      "src": "type: int [200929,200932]",
      "dest": "type: int [202423,202426]"
    },
    {
      "src": "identifier: str [49407,49410]",
      "dest": "identifier: str [49407,49410]"
    },
    {
      "src": "block [158756,158957]",
      "dest": "block [160250,160451]"
    },
    {
      "src": "return_statement [62606,62615]",
      "dest": "return_statement [63635,63644]"
    },
    {
      "src": "identifier: length [180063,180069]",
      "dest": "identifier: length [181557,181563]"
    },
    {
      "src": "arithmetic_operator: - [92840,92841]",
      "dest": "arithmetic_operator: - [94334,94335]"
    },
    {
      "src": "return_statement [198263,198274]",
      "dest": "return_statement [199757,199768]"
    },
    {
      "src": "array_access [227687,227693]",
      "dest": "array_access [229181,229187]"
    },
    {
      "src": "identifier: add [91474,91477]",
      "dest": "identifier: add [92968,92971]"
    },
    {
      "src": "continue_statement [161701,161710]",
      "dest": "continue_statement [163195,163204]"
    },
    {
      "src": "block [25701,25827]",
      "dest": "block [25701,25827]"
    },
    {
      "src": "identifier: prefix [238138,238144]",
      "dest": "identifier: prefix [239632,239638]"
    },
    {
      "src": "type: String [178287,178293]",
      "dest": "type: String [179781,179787]"
    },
    {
      "src": "identifier: text [158329,158333]",
      "dest": "identifier: text [159823,159827]"
    },
    {
      "src": "arithmetic_operator: - [159189,159190]",
      "dest": "arithmetic_operator: - [160683,160684]"
    },
    {
      "src": "identifier: t_j [235836,235839]",
      "dest": "identifier: t_j [237330,237333]"
    },
    {
      "src": "block_comment:     \n     * <p>Removes a substring only if it is at the end of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeEnd(null, *)      = null\n     * StringUtils.removeEnd(\"\", *)        = \"\"\n     * StringUtils.removeEnd(*, null)      = *\n     * StringUtils.removeEnd(\"www.domain.com\", \".com.\")  = \"www.domain.com\"\n     * StringUtils.removeEnd(\"www.domain.com\", \".com\")   = \"www.domain\"\n     * StringUtils.removeEnd(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeEnd(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     */ [140505,141582]",
      "dest": "block_comment:     \n     * <p>Removes a substring only if it is at the end of a source string,\n     * otherwise returns the source string.</p>\n     *\n     * <p>A <code>null</code> source string will return <code>null</code>.\n     * An empty (\"\") source string will return the empty string.\n     * A <code>null</code> search string will return the source string.</p>\n     *\n     * <pre>\n     * StringUtils.removeEnd(null, *)      = null\n     * StringUtils.removeEnd(\"\", *)        = \"\"\n     * StringUtils.removeEnd(*, null)      = *\n     * StringUtils.removeEnd(\"www.domain.com\", \".com.\")  = \"www.domain.com\"\n     * StringUtils.removeEnd(\"www.domain.com\", \".com\")   = \"www.domain\"\n     * StringUtils.removeEnd(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n     * StringUtils.removeEnd(\"abc\", \"\")    = \"abc\"\n     * </pre>\n     *\n     * @param str  the source String to search, may be null\n     * @param remove  the String to search for and remove, may be null\n     * @return the substring with the string removed if found,\n     *  <code>null</code> if null String input\n     * @since 2.1\n     */ [141999,143076]"
    },
    {
      "src": "expression_statement [134325,134343]",
      "dest": "expression_statement [135819,135837]"
    },
    {
      "src": "comparison_operator: > [76077,76078]",
      "dest": "comparison_operator: > [77571,77572]"
    },
    {
      "src": "identifier: suffix [242428,242434]",
      "dest": "identifier: suffix [243922,243928]"
    },
    {
      "src": "identifier: str [13689,13692]",
      "dest": "identifier: str [13689,13692]"
    },
    {
      "src": "increment_operator: ++ [118965,118967]",
      "dest": "increment_operator: ++ [120459,120461]"
    },
    {
      "src": "line_comment: //           (Assuming that all Strings are roughly equally long) [130989,131054]",
      "dest": "line_comment: //           (Assuming that all Strings are roughly equally long) [132483,132548]"
    },
    {
      "src": "binary_expression [210320,210364]",
      "dest": "binary_expression [211814,211858]"
    },
    {
      "src": "arithmetic_operator: - [86546,86547]",
      "dest": "arithmetic_operator: - [88040,88041]"
    },
    {
      "src": "identifier: cs [205770,205772]",
      "dest": "identifier: cs [207264,207266]"
    },
    {
      "src": "expression_statement [14794,14817]",
      "dest": "expression_statement [14794,14817]"
    },
    {
      "src": "identifier: shortestStrLen [228482,228496]",
      "dest": "identifier: shortestStrLen [229976,229990]"
    },
    {
      "src": "block [9610,9658]",
      "dest": "block [9610,9658]"
    },
    {
      "src": "formal_parameters [15807,15819]",
      "dest": "formal_parameters [15807,15819]"
    },
    {
      "src": "identifier: separator [136315,136324]",
      "dest": "identifier: separator [137809,137818]"
    },
    {
      "src": "type: int [54620,54623]",
      "dest": "type: int [54620,54623]"
    },
    {
      "src": "identifier: isAsciiPrintable [205655,205671]",
      "dest": "identifier: isAsciiPrintable [207149,207165]"
    },
    {
      "src": "field_access [173338,173350]",
      "dest": "field_access [174832,174844]"
    },
    {
      "src": "argument_list [188989,188991]",
      "dest": "argument_list [190483,190485]"
    },
    {
      "src": "false: false [203331,203336]",
      "dest": "false: false [204825,204830]"
    },
    {
      "src": "null_literal: null [75623,75627]",
      "dest": "null_literal: null [77117,77121]"
    },
    {
      "src": "parenthesized_expression [8725,8747]",
      "dest": "parenthesized_expression [8725,8747]"
    },
    {
      "src": "identifier: tokenStart [123319,123329]",
      "dest": "identifier: tokenStart [124813,124823]"
    },
    {
      "src": "argument_list [91477,91504]",
      "dest": "argument_list [92971,92998]"
    },
    {
      "src": "if_statement [228659,228803]",
      "dest": "if_statement [230153,230297]"
    },
    {
      "src": "local_variable_declaration [145616,145649]",
      "dest": "local_variable_declaration [147110,147143]"
    },
    {
      "src": "local_variable_declaration [60959,60994]",
      "dest": "local_variable_declaration [61378,61413]"
    },
    {
      "src": "block [30758,30805]",
      "dest": "block [30758,30805]"
    },
    {
      "src": "identifier: i [111086,111087]",
      "dest": "identifier: i [112580,112581]"
    },
    {
      "src": "affectation_operator: = [118345,118346]",
      "dest": "affectation_operator: = [119839,119840]"
    },
    {
      "src": "method_invocation [166029,166052]",
      "dest": "method_invocation [167523,167546]"
    },
    {
      "src": "field_access [126237,126249]",
      "dest": "field_access [127731,127743]"
    },
    {
      "src": "type: boolean [165744,165751]",
      "dest": "type: boolean [167238,167245]"
    },
    {
      "src": "type_keyword: class [24647,24652]",
      "dest": "type_keyword: class [24647,24652]"
    },
    {
      "src": "parenthesized_expression [78539,78560]",
      "dest": "parenthesized_expression [80033,80054]"
    },
    {
      "src": "method_invocation [40904,40916]",
      "dest": "method_invocation [40904,40916]"
    },
    {
      "src": "block [11660,11738]",
      "dest": "block [11660,11738]"
    },
    {
      "src": "string_literal [25586,25644]",
      "dest": "string_literal [25586,25644]"
    },
    {
      "src": "local_variable_declaration [123315,123334]",
      "dest": "local_variable_declaration [124809,124828]"
    },
    {
      "src": "identifier: i [204382,204383]",
      "dest": "identifier: i [205876,205877]"
    },
    {
      "src": "identifier: substring [219930,219939]",
      "dest": "identifier: substring [221424,221433]"
    },
    {
      "src": "identifier: i [225253,225254]",
      "dest": "identifier: i [226747,226748]"
    },
    {
      "src": "block [185704,185772]",
      "dest": "block [187198,187266]"
    },
    {
      "src": "assignment_expression [118335,118352]",
      "dest": "assignment_expression [119829,119846]"
    },
    {
      "src": "line_comment: // Direct code is quicker than StringTokenizer. [116440,116487]",
      "dest": "line_comment: // Direct code is quicker than StringTokenizer. [117934,117981]"
    },
    {
      "src": "argument_list [73843,73850]",
      "dest": "argument_list [75337,75344]"
    },
    {
      "src": "return_statement [215767,215800]",
      "dest": "return_statement [217261,217294]"
    },
    {
      "src": "identifier: splitByWholeSeparatorWorker [104005,104032]",
      "dest": "identifier: splitByWholeSeparatorWorker [105499,105526]"
    },
    {
      "src": "comparison_operator: == [18511,18513]",
      "dest": "comparison_operator: == [18511,18513]"
    },
    {
      "src": "argument_list [141810,141812]",
      "dest": "argument_list [143304,143306]"
    },
    {
      "src": "method_invocation [141800,141812]",
      "dest": "method_invocation [143294,143306]"
    },
    {
      "src": "identifier: cost [235876,235880]",
      "dest": "identifier: cost [237370,237374]"
    },
    {
      "src": "block [228301,228334]",
      "dest": "block [229795,229828]"
    },
    {
      "src": "update_expression [204397,204400]",
      "dest": "update_expression [205891,205894]"
    },
    {
      "src": "identifier: strLen [185501,185507]",
      "dest": "identifier: strLen [186995,187001]"
    },
    {
      "src": "identifier: last [170298,170302]",
      "dest": "identifier: last [171792,171796]"
    },
    {
      "src": "%: % [222229,222230]",
      "dest": "%: % [223723,223724]"
    },
    {
      "src": "binary_expression [57866,57880]",
      "dest": "binary_expression [54971,54985]"
    },
    {
      "src": "block [118006,118117]",
      "dest": "block [119500,119611]"
    },
    {
      "src": "binary_expression [145695,145711]",
      "dest": "binary_expression [147189,147205]"
    },
    {
      "src": "assignment_expression [117486,117497]",
      "dest": "assignment_expression [118980,118991]"
    },
    {
      "src": "expression_statement [117628,117632]",
      "dest": "expression_statement [119122,119126]"
    },
    {
      "src": "block [220008,220114]",
      "dest": "block [221502,221608]"
    },
    {
      "src": "identifier: pos [84776,84779]",
      "dest": "identifier: pos [86270,86273]"
    },
    {
      "src": "identifier: searchChar [40997,41007]",
      "dest": "identifier: searchChar [40997,41007]"
    },
    {
      "src": "method_invocation [117666,117689]",
      "dest": "method_invocation [119160,119183]"
    },
    {
      "src": "type: String [239742,239748]",
      "dest": "type: String [241236,241242]"
    },
    {
      "src": "identifier: toString [150755,150763]",
      "dest": "identifier: toString [152249,152257]"
    },
    {
      "src": "identifier: append [168656,168662]",
      "dest": "identifier: append [170150,170156]"
    },
    {
      "src": "type: char[] [178150,178156]",
      "dest": "type: char[] [179644,179650]"
    },
    {
      "src": "assignment_expression [17191,17224]",
      "dest": "assignment_expression [17191,17224]"
    },
    {
      "src": "method_invocation [159621,159648]",
      "dest": "method_invocation [161115,161142]"
    },
    {
      "src": "method_invocation [37836,37872]",
      "dest": "method_invocation [37836,37872]"
    },
    {
      "src": "argument_list [106316,106321]",
      "dest": "argument_list [107810,107815]"
    },
    {
      "src": "type: int [235872,235875]",
      "dest": "type: int [237366,237369]"
    },
    {
      "src": "binary_expression [207001,207041]",
      "dest": "binary_expression [208495,208535]"
    },
    {
      "src": "modifiers [203053,203066]",
      "dest": "modifiers [204547,204560]"
    },
    {
      "src": "method_invocation [78612,78645]",
      "dest": "method_invocation [80106,80139]"
    },
    {
      "src": "type: boolean [51815,51822]",
      "dest": "type: boolean [51815,51822]"
    },
    {
      "src": "identifier: repeat [174356,174362]",
      "dest": "identifier: repeat [175850,175856]"
    },
    {
      "src": "parenthesized_expression [144577,144610]",
      "dest": "parenthesized_expression [146071,146104]"
    },
    {
      "src": "method_declaration [84607,84925]",
      "dest": "method_declaration [86101,86419]"
    },
    {
      "src": "identifier: str [183942,183945]",
      "dest": "identifier: str [185436,185439]"
    },
    {
      "src": "identifier: rightPad [189156,189164]",
      "dest": "identifier: rightPad [190650,190658]"
    },
    {
      "src": "parenthesized_expression [204284,204296]",
      "dest": "parenthesized_expression [205778,205790]"
    },
    {
      "src": "decimal_integer_literal: 0 [8812,8813]",
      "dest": "decimal_integer_literal: 0 [8812,8813]"
    },
    {
      "src": "if_statement [145512,145607]",
      "dest": "if_statement [147006,147101]"
    },
    {
      "src": "identifier: iterator [133966,133974]",
      "dest": "identifier: iterator [135460,135468]"
    },
    {
      "src": "type: String [95172,95178]",
      "dest": "type: String [96666,96672]"
    },
    {
      "src": "argument_list [175671,175676]",
      "dest": "argument_list [177165,177170]"
    },
    {
      "src": "method_invocation [62445,62457]",
      "dest": "method_invocation [63184,63196]"
    },
    {
      "src": "return_statement [222506,222532]",
      "dest": "return_statement [224000,224026]"
    },
    {
      "src": "binary_expression [244182,244211]",
      "dest": "binary_expression [245676,245705]"
    },
    {
      "src": "increment_operator: ++ [123453,123455]",
      "dest": "increment_operator: ++ [124947,124949]"
    },
    {
      "src": "identifier: start [168187,168192]",
      "dest": "identifier: start [169681,169686]"
    },
    {
      "src": "parenthesized_expression [104838,104849]",
      "dest": "parenthesized_expression [106332,106343]"
    },
    {
      "src": "return_statement [185595,185606]",
      "dest": "return_statement [187089,187100]"
    },
    {
      "src": "assignment_expression [124055,124071]",
      "dest": "assignment_expression [125549,125565]"
    },
    {
      "src": "comparison_operator: == [53060,53062]",
      "dest": "comparison_operator: == [53060,53062]"
    },
    {
      "src": "variable_declarator [116891,116908]",
      "dest": "variable_declarator [118385,118402]"
    },
    {
      "src": "block [207043,207088]",
      "dest": "block [208537,208582]"
    },
    {
      "src": "identifier: len [104271,104274]",
      "dest": "identifier: len [105765,105768]"
    },
    {
      "src": "identifier: iterator [132606,132614]",
      "dest": "identifier: iterator [134100,134108]"
    },
    {
      "src": "variable_declarator [66682,66699]",
      "dest": "variable_declarator [67801,67818]"
    },
    {
      "src": "binary_expression [131114,131126]",
      "dest": "binary_expression [132608,132620]"
    },
    {
      "src": "identifier: _d [236405,236407]",
      "dest": "identifier: _d [237899,237901]"
    },
    {
      "src": "identifier: text [148263,148267]",
      "dest": "identifier: text [149757,149761]"
    },
    {
      "src": "line_comment: // jth character of t [235841,235862]",
      "dest": "line_comment: // jth character of t [237335,237356]"
    },
    {
      "src": "visibility: public [193656,193662]",
      "dest": "visibility: public [195150,195156]"
    },
    {
      "src": "method_invocation [105010,105044]",
      "dest": "method_invocation [106504,106538]"
    },
    {
      "src": "if_statement [198552,198746]",
      "dest": "if_statement [200046,200240]"
    },
    {
      "src": "identifier: currentType [123655,123666]",
      "dest": "identifier: currentType [125149,125160]"
    },
    {
      "src": "assignment_expression [159609,159648]",
      "dest": "assignment_expression [161103,161142]"
    },
    {
      "src": "binary_expression [231115,231127]",
      "dest": "binary_expression [232609,232621]"
    },
    {
      "src": "block_comment: \t\n\t * Gets a CharSequence length or <code>0</code> if the CharSequence is\n\t * <code>null</code>.\n\t * \n\t * @param cs\n\t *            a CharSequence or <code>null</code>\n\t * @return CharSequence length or <code>0</code> if the CharSequence is\n\t *         <code>null</code>.\n\t * @since 2.4\n\t * @deprecated See {@link CharSequenceUtils#length(CharSequence)}\n\t */ [186231,186590]",
      "dest": "block_comment: \t\n\t * Gets a CharSequence length or <code>0</code> if the CharSequence is\n\t * <code>null</code>.\n\t * \n\t * @param cs\n\t *            a CharSequence or <code>null</code>\n\t * @return CharSequence length or <code>0</code> if the CharSequence is\n\t *         <code>null</code>.\n\t * @since 2.4\n\t * @deprecated See {@link CharSequenceUtils#length(CharSequence)}\n\t */ [187725,188084]"
    },
    {
      "src": "comparison_operator: == [63876,63878]",
      "dest": "comparison_operator: == [64923,64925]"
    },
    {
      "src": "visibility: public [179001,179007]",
      "dest": "visibility: public [180495,180501]"
    },
    {
      "src": "binary_expression [57403,57449]",
      "dest": "binary_expression [57743,57789]"
    },
    {
      "src": "argument_list [178081,178124]",
      "dest": "argument_list [179575,179618]"
    },
    {
      "src": "variable_declarator [155264,155319]",
      "dest": "variable_declarator [156758,156813]"
    },
    {
      "src": "argument_list [180232,180268]",
      "dest": "argument_list [181726,181762]"
    },
    {
      "src": "assignment_expression [36447,36492]",
      "dest": "assignment_expression [36447,36492]"
    },
    {
      "src": "variable_declarator [8808,8813]",
      "dest": "variable_declarator [8808,8813]"
    },
    {
      "src": "null_literal: null [18479,18483]",
      "dest": "null_literal: null [18479,18483]"
    },
    {
      "src": "type: String [86289,86295]",
      "dest": "type: String [87783,87789]"
    },
    {
      "src": "argument_list [144601,144609]",
      "dest": "argument_list [146095,146103]"
    },
    {
      "src": "identifier: end [20207,20210]",
      "dest": "identifier: end [20207,20210]"
    },
    {
      "src": "identifier: str [175178,175181]",
      "dest": "identifier: str [176672,176675]"
    },
    {
      "src": "formal_parameters [125119,125135]",
      "dest": "formal_parameters [126613,126629]"
    },
    {
      "src": "\": \" [220101,220102]",
      "dest": "\": \" [221595,221596]"
    },
    {
      "src": "identifier: sizePlus1 [117986,117995]",
      "dest": "identifier: sizePlus1 [119480,119489]"
    },
    {
      "src": "comparison_operator: != [228947,228949]",
      "dest": "comparison_operator: != [230441,230443]"
    },
    {
      "src": "return_statement [58388,58401]",
      "dest": "return_statement [58781,58794]"
    },
    {
      "src": "method_invocation [72166,72189]",
      "dest": "method_invocation [73660,73683]"
    },
    {
      "src": "field_access [129326,129338]",
      "dest": "field_access [130820,130832]"
    },
    {
      "src": "local_variable_declaration [223838,223877]",
      "dest": "local_variable_declaration [225332,225371]"
    },
    {
      "src": "identifier: substring [117383,117392]",
      "dest": "identifier: substring [118877,118886]"
    },
    {
      "src": "return_statement [12664,12704]",
      "dest": "return_statement [12664,12704]"
    },
    {
      "src": "method_invocation [86642,86660]",
      "dest": "method_invocation [88136,88154]"
    },
    {
      "src": "decimal_integer_literal: 1 [168595,168596]",
      "dest": "decimal_integer_literal: 1 [170089,170090]"
    },
    {
      "src": "assignment_expression [198501,198531]",
      "dest": "assignment_expression [199995,200025]"
    },
    {
      "src": "identifier: increase [160307,160315]",
      "dest": "identifier: increase [161801,161809]"
    },
    {
      "src": "if_statement [181856,182296]",
      "dest": "if_statement [183350,183790]"
    },
    {
      "src": "assignment_expression [73721,73730]",
      "dest": "assignment_expression [75215,75224]"
    },
    {
      "src": "formal_parameter [63751,63766]",
      "dest": "formal_parameter [64798,64813]"
    },
    {
      "src": "identifier: len [78400,78403]",
      "dest": "identifier: len [79894,79897]"
    },
    {
      "src": "argument_list [196986,196993]",
      "dest": "argument_list [198480,198487]"
    },
    {
      "src": "affectation_operator: = [181581,181582]",
      "dest": "affectation_operator: = [183075,183076]"
    },
    {
      "src": "block [238105,238159]",
      "dest": "block [239599,239653]"
    },
    {
      "src": "formal_parameters [77248,77269]",
      "dest": "formal_parameters [78742,78763]"
    },
    {
      "src": "binary_expression [196682,196692]",
      "dest": "binary_expression [198176,198186]"
    },
    {
      "src": "formal_parameter [31829,31845]",
      "dest": "formal_parameter [31829,31845]"
    },
    {
      "src": "type: char [175272,175276]",
      "dest": "type: char [176766,176770]"
    },
    {
      "src": "block [215502,215806]",
      "dest": "block [216996,217300]"
    },
    {
      "src": "parenthesized_expression [104729,104740]",
      "dest": "parenthesized_expression [106223,106234]"
    },
    {
      "src": "argument_list [190792,190824]",
      "dest": "argument_list [192286,192318]"
    },
    {
      "src": "assignment_expression [79952,79959]",
      "dest": "assignment_expression [81446,81453]"
    },
    {
      "src": "binary_expression [51891,51908]",
      "dest": "binary_expression [51891,51908]"
    },
    {
      "src": "comparison_operator: == [231366,231368]",
      "dest": "comparison_operator: == [232860,232862]"
    },
    {
      "src": "block [178006,178305]",
      "dest": "block [179500,179799]"
    },
    {
      "src": "decimal_integer_literal: 0 [20230,20231]",
      "dest": "decimal_integer_literal: 0 [20230,20231]"
    },
    {
      "src": "local_variable_declaration [165744,165769]",
      "dest": "local_variable_declaration [167238,167263]"
    },
    {
      "src": "array_access [159759,159787]",
      "dest": "array_access [161253,161281]"
    },
    {
      "src": "expression_statement [123901,123928]",
      "dest": "expression_statement [125395,125422]"
    },
    {
      "src": "type: StringBuilder [160951,160964]",
      "dest": "type: StringBuilder [162445,162458]"
    },
    {
      "src": "identifier: substring [105276,105285]",
      "dest": "identifier: substring [106770,106779]"
    },
    {
      "src": "type: int [186068,186071]",
      "dest": "type: int [187562,187565]"
    },
    {
      "src": "identifier: accentPattern [25011,25024]",
      "dest": "identifier: accentPattern [25011,25024]"
    },
    {
      "src": "method_invocation [150194,150214]",
      "dest": "method_invocation [151688,151708]"
    },
    {
      "src": "local_variable_declaration [160927,160991]",
      "dest": "local_variable_declaration [162421,162485]"
    },
    {
      "src": "throw_statement [25719,25813]",
      "dest": "throw_statement [25719,25813]"
    },
    {
      "src": "identifier: sz [209248,209250]",
      "dest": "identifier: sz [210742,210744]"
    },
    {
      "src": "identifier: str [212182,212185]",
      "dest": "identifier: str [213676,213679]"
    },
    {
      "src": "affectation_operator: = [204350,204351]",
      "dest": "affectation_operator: = [205844,205845]"
    },
    {
      "src": "arithmetic_operator: - [161021,161022]",
      "dest": "arithmetic_operator: - [162515,162516]"
    },
    {
      "src": "type: String [165495,165501]",
      "dest": "type: String [166989,166995]"
    },
    {
      "src": "static: static [78364,78370]",
      "dest": "static: static [79858,79864]"
    },
    {
      "src": "variable_declarator [159174,159191]",
      "dest": "variable_declarator [160668,160685]"
    },
    {
      "src": "identifier: i [159959,159960]",
      "dest": "identifier: i [161453,161454]"
    },
    {
      "src": "identifier: str [189094,189097]",
      "dest": "identifier: str [190588,190591]"
    },
    {
      "src": "if_statement [138724,138796]",
      "dest": "if_statement [140218,140290]"
    },
    {
      "src": "formal_parameter [239138,239148]",
      "dest": "formal_parameter [240632,240642]"
    },
    {
      "src": "block_comment:     \n     * <p>Compares all Strings in an array and returns the initial sequence of \n     * characters that is common to all of them.</p>\n     *\n     * <p>For example,\n     * <code>getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) -> \"i am a \"</code></p>\n     *\n     * <pre>\n     * StringUtils.getCommonPrefix(null) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\"}) = \"abc\"\n     * StringUtils.getCommonPrefix(new String[] {null, null}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"\", \"\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"\", null}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}) = \"abc\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}) = \"a\"\n     * StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}) = \"ab\"\n     * StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}) = \"ab\"\n     * StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) = \"i am a \"\n     * </pre>\n     *\n     * @param strs  array of String objects, entries may be null\n     * @return the initial sequence of characters that are common to all Strings\n     * in the array; empty String if the array is null, the elements are all null \n     * or if there is no common prefix. \n     * @since 2.4\n     */ [229271,231044]",
      "dest": "block_comment:     \n     * <p>Compares all Strings in an array and returns the initial sequence of \n     * characters that is common to all of them.</p>\n     *\n     * <p>For example,\n     * <code>getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) -> \"i am a \"</code></p>\n     *\n     * <pre>\n     * StringUtils.getCommonPrefix(null) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\"}) = \"abc\"\n     * StringUtils.getCommonPrefix(new String[] {null, null}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"\", \"\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"\", null}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}) = \"abc\"\n     * StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}) = \"a\"\n     * StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}) = \"ab\"\n     * StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}) = \"ab\"\n     * StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}) = \"\"\n     * StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) = \"i am a \"\n     * </pre>\n     *\n     * @param strs  array of String objects, entries may be null\n     * @return the initial sequence of characters that are common to all Strings\n     * in the array; empty String if the array is null, the elements are all null \n     * or if there is no common prefix. \n     * @since 2.4\n     */ [230765,232538]"
    },
    {
      "src": "identifier: EMPTY [76105,76110]",
      "dest": "identifier: EMPTY [77599,77604]"
    },
    {
      "src": "increment_operator: ++ [205816,205818]",
      "dest": "increment_operator: ++ [207310,207312]"
    },
    {
      "src": "formal_parameter [163616,163631]",
      "dest": "formal_parameter [165110,165125]"
    },
    {
      "src": "identifier: Character [123482,123491]",
      "dest": "identifier: Character [124976,124985]"
    },
    {
      "src": "binary_expression [73621,73641]",
      "dest": "binary_expression [75115,75135]"
    },
    {
      "src": "identifier: str [171835,171838]",
      "dest": "identifier: str [173329,173332]"
    },
    {
      "src": "identifier: end [76193,76196]",
      "dest": "identifier: end [77687,77690]"
    },
    {
      "src": "identifier: i [160454,160455]",
      "dest": "identifier: i [161948,161949]"
    },
    {
      "src": "affectation_operator: = [57754,57755]",
      "dest": "affectation_operator: = [54862,54863]"
    },
    {
      "src": "binary_expression [233803,233812]",
      "dest": "binary_expression [235297,235306]"
    },
    {
      "src": "type: char [215482,215486]",
      "dest": "type: char [216976,216980]"
    },
    {
      "src": "modifiers [214516,214529]",
      "dest": "modifiers [216010,216023]"
    },
    {
      "src": "null_literal: null [49414,49418]",
      "dest": "null_literal: null [49414,49418]"
    },
    {
      "src": "identifier: str [140432,140435]",
      "dest": "identifier: str [141926,141929]"
    },
    {
      "src": "identifier: numberOfSubstrings [104922,104940]",
      "dest": "identifier: numberOfSubstrings [106416,106434]"
    },
    {
      "src": "method_invocation [191963,191980]",
      "dest": "method_invocation [193457,193474]"
    },
    {
      "src": "line_comment: // given that repeat(String, int) is quite optimized, better to rely on it than try and splice this into it [176739,176846]",
      "dest": "line_comment: // given that repeat(String, int) is quite optimized, better to rely on it than try and splice this into it [178233,178340]"
    },
    {
      "src": "ternary_expression [213910,213953]",
      "dest": "ternary_expression [215404,215447]"
    },
    {
      "src": "assignment_expression [39537,39549]",
      "dest": "assignment_expression [39537,39549]"
    },
    {
      "src": "comparison_operator: == [130766,130768]",
      "dest": "comparison_operator: == [132260,132262]"
    },
    {
      "src": "if_statement [133010,133075]",
      "dest": "if_statement [134504,134569]"
    },
    {
      "src": "identifier: str [18538,18541]",
      "dest": "identifier: str [18538,18541]"
    },
    {
      "src": "logical_operator: || [117120,117122]",
      "dest": "logical_operator: || [118614,118616]"
    },
    {
      "src": "identifier: match [117598,117603]",
      "dest": "identifier: match [119092,119097]"
    },
    {
      "src": "type: String [181378,181384]",
      "dest": "type: String [182872,182878]"
    },
    {
      "src": "decimal_integer_literal: 0 [20682,20683]",
      "dest": "decimal_integer_literal: 0 [20682,20683]"
    },
    {
      "src": "formal_parameter [29423,29433]",
      "dest": "formal_parameter [29423,29433]"
    },
    {
      "src": "type: int [185459,185462]",
      "dest": "type: int [186953,186956]"
    },
    {
      "src": "line_comment: // copy current distance counts to 'previous row' distance counts [236327,236392]",
      "dest": "line_comment: // copy current distance counts to 'previous row' distance counts [237821,237886]"
    },
    {
      "src": "formal_parameter [37801,37817]",
      "dest": "formal_parameter [37801,37817]"
    },
    {
      "src": "null_literal: null [181441,181445]",
      "dest": "null_literal: null [182935,182939]"
    },
    {
      "src": "type: String [123028,123034]",
      "dest": "type: String [124522,124528]"
    },
    {
      "src": "method_declaration [68007,68233]",
      "dest": "method_declaration [69501,69727]"
    },
    {
      "src": "identifier: newArr [23133,23139]",
      "dest": "identifier: newArr [23133,23139]"
    },
    {
      "src": "type: StringBuilder [134222,134235]",
      "dest": "type: StringBuilder [135716,135729]"
    },
    {
      "src": "dimensions_expr [159066,159080]",
      "dest": "dimensions_expr [160560,160574]"
    },
    {
      "src": ":: : [10698,10699]",
      "dest": ":: : [10698,10699]"
    },
    {
      "src": "argument_list [124156,124194]",
      "dest": "argument_list [125650,125688]"
    },
    {
      "src": "identifier: pos [123412,123415]",
      "dest": "identifier: pos [124906,124909]"
    },
    {
      "src": "formal_parameter [223689,223700]",
      "dest": "formal_parameter [225183,225194]"
    },
    {
      "src": "identifier: searchStr [31970,31979]",
      "dest": "identifier: searchStr [31970,31979]"
    },
    {
      "src": "method_invocation [231673,231714]",
      "dest": "method_invocation [233167,233208]"
    },
    {
      "src": "logical_operator: || [84705,84707]",
      "dest": "logical_operator: || [86199,86201]"
    },
    {
      "src": "new: new [145838,145841]",
      "dest": "new: new [147332,147335]"
    },
    {
      "src": "identifier: start [118165,118170]",
      "dest": "identifier: start [119659,119664]"
    },
    {
      "src": "variable_declarator [71912,71934]",
      "dest": "variable_declarator [73406,73428]"
    },
    {
      "src": "assignment_expression [123901,123927]",
      "dest": "assignment_expression [125395,125421]"
    },
    {
      "src": "comparison_operator: < [127884,127885]",
      "dest": "comparison_operator: < [129378,129379]"
    },
    {
      "src": "static: static [39328,39334]",
      "dest": "static: static [39328,39334]"
    },
    {
      "src": "identifier: end [75977,75980]",
      "dest": "identifier: end [77471,77474]"
    },
    {
      "src": "binary_expression [50947,50975]",
      "dest": "binary_expression [50947,50975]"
    },
    {
      "src": "method_invocation [134325,134342]",
      "dest": "method_invocation [135819,135836]"
    },
    {
      "src": "comparison_operator: == [20227,20229]",
      "dest": "comparison_operator: == [20227,20229]"
    },
    {
      "src": "method_declaration [35997,36744]",
      "dest": "method_declaration [35997,36744]"
    },
    {
      "src": "identifier: length [158640,158646]",
      "dest": "identifier: length [160134,160140]"
    },
    {
      "src": "identifier: length [181552,181558]",
      "dest": "identifier: length [183046,183052]"
    },
    {
      "src": "string_literal [24797,24802]",
      "dest": "string_literal [24797,24802]"
    },
    {
      "src": "decimal_integer_literal: 0 [64032,64033]",
      "dest": "decimal_integer_literal: 0 [65079,65080]"
    },
    {
      "src": "type: String [212132,212138]",
      "dest": "type: String [213626,213632]"
    },
    {
      "src": "type: char [117751,117755]",
      "dest": "type: char [119245,119249]"
    },
    {
      "src": "argument_list [202172,202175]",
      "dest": "argument_list [203666,203669]"
    },
    {
      "src": "formal_parameter [43332,43342]",
      "dest": "formal_parameter [43332,43342]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits a String by Character type as returned by\n     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n     * characters of the same type are returned as complete tokens, with the\n     * following exception: the character of type\n     * <code>Character.UPPERCASE_LETTER</code>, if any, immediately\n     * preceding a token of type <code>Character.LOWERCASE_LETTER</code>\n     * will belong to the following token rather than to the preceding, if any,\n     * <code>Character.UPPERCASE_LETTER</code> token. \n     * <pre>\n     * StringUtils.splitByCharacterTypeCamelCase(null)         = null\n     * StringUtils.splitByCharacterTypeCamelCase(\"\")           = []\n     * StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"number5\")    = [\"number\", \"5\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")     = [\"foo\", \"Bar\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")  = [\"foo\", \"200\", \"Bar\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")   = [\"ASF\", \"Rules\"]\n     * </pre>\n     * @param str the String to split, may be <code>null</code>\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.4\n     */ [120515,122007]",
      "dest": "block_comment:     \n     * <p>Splits a String by Character type as returned by\n     * <code>java.lang.Character.getType(char)</code>. Groups of contiguous\n     * characters of the same type are returned as complete tokens, with the\n     * following exception: the character of type\n     * <code>Character.UPPERCASE_LETTER</code>, if any, immediately\n     * preceding a token of type <code>Character.LOWERCASE_LETTER</code>\n     * will belong to the following token rather than to the preceding, if any,\n     * <code>Character.UPPERCASE_LETTER</code> token. \n     * <pre>\n     * StringUtils.splitByCharacterTypeCamelCase(null)         = null\n     * StringUtils.splitByCharacterTypeCamelCase(\"\")           = []\n     * StringUtils.splitByCharacterTypeCamelCase(\"ab de fg\")   = [\"ab\", \" \", \"de\", \" \", \"fg\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"ab   de fg\") = [\"ab\", \"   \", \"de\", \" \", \"fg\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"ab:cd:ef\")   = [\"ab\", \":\", \"cd\", \":\", \"ef\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"number5\")    = [\"number\", \"5\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"fooBar\")     = [\"foo\", \"Bar\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"foo200Bar\")  = [\"foo\", \"200\", \"Bar\"]\n     * StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")   = [\"ASF\", \"Rules\"]\n     * </pre>\n     * @param str the String to split, may be <code>null</code>\n     * @return an array of parsed Strings, <code>null</code> if null String input\n     * @since 2.4\n     */ [122009,123501]"
    },
    {
      "src": "identifier: substring [105950,105959]",
      "dest": "identifier: substring [107444,107453]"
    },
    {
      "src": "null_literal: null [131209,131213]",
      "dest": "null_literal: null [132703,132707]"
    },
    {
      "src": "variable_declarator [231199,231244]",
      "dest": "variable_declarator [232693,232738]"
    },
    {
      "src": "method_invocation [174733,174763]",
      "dest": "method_invocation [176227,176257]"
    },
    {
      "src": "decimal_integer_literal: 2 [222230,222231]",
      "dest": "decimal_integer_literal: 2 [223724,223725]"
    },
    {
      "src": "variable_declarator [53157,53181]",
      "dest": "variable_declarator [53157,53181]"
    },
    {
      "src": "return_statement [127668,127681]",
      "dest": "return_statement [129162,129175]"
    },
    {
      "src": "static: static [122019,122025]",
      "dest": "static: static [123513,123519]"
    },
    {
      "src": "identifier: suffix [243531,243537]",
      "dest": "identifier: suffix [245025,245031]"
    },
    {
      "src": "binary_expression [8711,8752]",
      "dest": "binary_expression [8711,8752]"
    },
    {
      "src": "identifier: searchStrs [69863,69873]",
      "dest": "identifier: searchStrs [71357,71367]"
    },
    {
      "src": "character_literal: ' ' [208273,208276]",
      "dest": "character_literal: ' ' [209767,209770]"
    },
    {
      "src": "type: boolean [123040,123047]",
      "dest": "type: boolean [124534,124541]"
    },
    {
      "src": "expression_statement [118201,118215]",
      "dest": "expression_statement [119695,119709]"
    },
    {
      "src": "identifier: buf [178209,178212]",
      "dest": "identifier: buf [179703,179706]"
    },
    {
      "src": "identifier: end [168004,168007]",
      "dest": "identifier: end [169498,169501]"
    },
    {
      "src": "identifier: searchStr [31876,31885]",
      "dest": "identifier: searchStr [31876,31885]"
    },
    {
      "src": "identifier: separator [131480,131489]",
      "dest": "identifier: separator [132974,132983]"
    },
    {
      "src": "if_statement [90927,91005]",
      "dest": "if_statement [92421,92499]"
    },
    {
      "src": "identifier: stripChars [17213,17223]",
      "dest": "identifier: stripChars [17213,17223]"
    },
    {
      "src": "decimal_integer_literal: 0 [196932,196933]",
      "dest": "decimal_integer_literal: 0 [198426,198427]"
    },
    {
      "src": "if_statement [116658,116733]",
      "dest": "if_statement [118152,118227]"
    },
    {
      "src": "return_statement [152654,152718]",
      "dest": "return_statement [154148,154212]"
    },
    {
      "src": "variable_declarator [54706,54711]",
      "dest": "variable_declarator [58007,58012]"
    },
    {
      "src": "identifier: overlay [168116,168123]",
      "dest": "identifier: overlay [169610,169617]"
    },
    {
      "src": "for_statement [175308,175454]",
      "dest": "for_statement [176802,176948]"
    },
    {
      "src": "local_variable_declaration [219852,219885]",
      "dest": "local_variable_declaration [221346,221379]"
    },
    {
      "src": "type: StringBuilder [222302,222315]",
      "dest": "type: StringBuilder [223796,223809]"
    },
    {
      "src": "type: String [52991,52997]",
      "dest": "type: String [52991,52997]"
    },
    {
      "src": "block [30730,30861]",
      "dest": "block [30730,30861]"
    },
    {
      "src": "identifier: padLen [181868,181874]",
      "dest": "identifier: padLen [183362,183368]"
    },
    {
      "src": "argument_list [141752,141760]",
      "dest": "argument_list [143246,143254]"
    },
    {
      "src": "static: static [238052,238058]",
      "dest": "static: static [239546,239552]"
    },
    {
      "src": "formal_parameters [29422,29451]",
      "dest": "formal_parameters [29422,29451]"
    },
    {
      "src": "return_statement [173112,173125]",
      "dest": "return_statement [174606,174619]"
    },
    {
      "src": "binary_expression [198219,198247]",
      "dest": "binary_expression [199713,199741]"
    },
    {
      "src": "type: String [199738,199744]",
      "dest": "type: String [201232,201238]"
    },
    {
      "src": "variable_declarator [91103,91133]",
      "dest": "variable_declarator [92597,92627]"
    },
    {
      "src": "affectation_operator: = [116828,116829]",
      "dest": "affectation_operator: = [118322,118323]"
    },
    {
      "src": "identifier: cs2 [224993,224996]",
      "dest": "identifier: cs2 [226487,226490]"
    },
    {
      "src": "arithmetic_operator: + [123429,123430]",
      "dest": "arithmetic_operator: + [124923,124924]"
    },
    {
      "src": "type: int [185532,185535]",
      "dest": "type: int [187026,187029]"
    },
    {
      "src": "array_access [159409,159437]",
      "dest": "array_access [160903,160931]"
    },
    {
      "src": "identifier: str [103196,103199]",
      "dest": "identifier: str [104690,104693]"
    },
    {
      "src": "identifier: i [162330,162331]",
      "dest": "identifier: i [163824,163825]"
    },
    {
      "src": "comparison_operator: != [199929,199931]",
      "dest": "comparison_operator: != [201423,201425]"
    },
    {
      "src": "identifier: textIndex [161216,161225]",
      "dest": "identifier: textIndex [162710,162719]"
    },
    {
      "src": "modifiers [210102,210115]",
      "dest": "modifiers [211596,211609]"
    },
    {
      "src": "decimal_integer_literal: 0 [182150,182151]",
      "dest": "decimal_integer_literal: 0 [183644,183645]"
    },
    {
      "src": "method_declaration [99648,99813]",
      "dest": "method_declaration [101142,101307]"
    },
    {
      "src": "type: int [175313,175316]",
      "dest": "type: int [176807,176810]"
    },
    {
      "src": "identifier: startsWith [138813,138823]",
      "dest": "identifier: startsWith [140307,140317]"
    },
    {
      "src": "expression_statement [190779,190825]",
      "dest": "expression_statement [192273,192319]"
    },
    {
      "src": "identifier: repeat [176875,176881]",
      "dest": "identifier: repeat [178369,178375]"
    },
    {
      "src": "if_statement [231254,231725]",
      "dest": "if_statement [232748,233219]"
    },
    {
      "src": "block [231494,231586]",
      "dest": "block [232988,233080]"
    },
    {
      "src": "return_statement [123168,123205]",
      "dest": "return_statement [124662,124699]"
    },
    {
      "src": "block [195578,195623]",
      "dest": "block [197072,197117]"
    },
    {
      "src": "visibility: public [5217,5223]",
      "dest": "visibility: public [5217,5223]"
    },
    {
      "src": "formal_parameter [93918,93936]",
      "dest": "formal_parameter [95412,95430]"
    },
    {
      "src": "argument_list [168631,168641]",
      "dest": "argument_list [170125,170135]"
    },
    {
      "src": "block [150591,150629]",
      "dest": "block [152085,152123]"
    },
    {
      "src": "if_statement [75802,75900]",
      "dest": "if_statement [77296,77394]"
    },
    {
      "src": "null_literal: null [21701,21705]",
      "dest": "null_literal: null [21701,21705]"
    },
    {
      "src": "parenthesized_expression [104355,104405]",
      "dest": "parenthesized_expression [105849,105899]"
    },
    {
      "src": "identifier: length [66615,66621]",
      "dest": "identifier: length [67694,67700]"
    },
    {
      "src": "identifier: separatorChar [109655,109668]",
      "dest": "identifier: separatorChar [111149,111162]"
    },
    {
      "src": "binary_expression [225201,225217]",
      "dest": "binary_expression [226695,226711]"
    },
    {
      "src": "identifier: match [118201,118206]",
      "dest": "identifier: match [119695,119700]"
    },
    {
      "src": "static: static [96710,96716]",
      "dest": "static: static [98204,98210]"
    },
    {
      "src": "null_literal: null [160517,160521]",
      "dest": "null_literal: null [162011,162015]"
    },
    {
      "src": "throw_statement [25399,25493]",
      "dest": "throw_statement [25399,25493]"
    },
    {
      "src": "field_access [57552,57570]",
      "dest": "field_access [57892,57910]"
    },
    {
      "src": "affectation_operator: = [168278,168279]",
      "dest": "affectation_operator: = [169772,169773]"
    },
    {
      "src": "unary_expression [98158,98160]",
      "dest": "unary_expression [99652,99654]"
    },
    {
      "src": "if_statement [134292,134353]",
      "dest": "if_statement [135786,135847]"
    },
    {
      "src": "type: String [152584,152590]",
      "dest": "type: String [154078,154084]"
    },
    {
      "src": "final: final [5990,5995]",
      "dest": "final: final [5990,5995]"
    },
    {
      "src": "identifier: css [227882,227885]",
      "dest": "identifier: css [229376,229379]"
    },
    {
      "src": "binary_expression [133014,133025]",
      "dest": "binary_expression [134508,134519]"
    },
    {
      "src": "identifier: str [79786,79789]",
      "dest": "identifier: str [81280,81283]"
    },
    {
      "src": "binary_expression [209140,209150]",
      "dest": "binary_expression [210634,210644]"
    },
    {
      "src": "identifier: substring [119210,119219]",
      "dest": "identifier: substring [120704,120713]"
    },
    {
      "src": "identifier: sub [199918,199921]",
      "dest": "identifier: sub [201412,201415]"
    },
    {
      "src": "affectation_operator: = [57630,57631]",
      "dest": "affectation_operator: = [57970,57971]"
    },
    {
      "src": "method_invocation [24441,24491]",
      "dest": "method_invocation [24441,24491]"
    },
    {
      "src": "expression_statement [20400,20406]",
      "dest": "expression_statement [20400,20406]"
    },
    {
      "src": "visibility: public [43302,43308]",
      "dest": "visibility: public [43302,43308]"
    },
    {
      "src": "decimal_integer_literal: 0 [173391,173392]",
      "dest": "decimal_integer_literal: 0 [174885,174886]"
    },
    {
      "src": "identifier: cs [204352,204354]",
      "dest": "identifier: cs [205846,205848]"
    },
    {
      "src": "dimensions_expr [23152,23161]",
      "dest": "dimensions_expr [23152,23161]"
    },
    {
      "src": "affectation_operator: = [110779,110780]",
      "dest": "affectation_operator: = [112273,112274]"
    },
    {
      "src": "arithmetic_operator: - [161319,161320]",
      "dest": "arithmetic_operator: - [162813,162814]"
    },
    {
      "src": "method_invocation [195639,195721]",
      "dest": "method_invocation [197133,197215]"
    },
    {
      "src": "\": \" [25586,25587]",
      "dest": "\": \" [25586,25587]"
    },
    {
      "src": "expression_statement [79952,79960]",
      "dest": "expression_statement [81446,81454]"
    },
    {
      "src": "identifier: str [183066,183069]",
      "dest": "identifier: str [184560,184563]"
    },
    {
      "src": "\": \" [158524,158525]",
      "dest": "\": \" [160018,160019]"
    },
    {
      "src": "type: String [173178,173184]",
      "dest": "type: String [174672,174678]"
    },
    {
      "src": "static: static [93884,93890]",
      "dest": "static: static [95378,95384]"
    },
    {
      "src": "identifier: isNotBlank [9582,9592]",
      "dest": "identifier: isNotBlank [9582,9592]"
    },
    {
      "src": "type: boolean [27419,27426]",
      "dest": "type: boolean [27419,27426]"
    },
    {
      "src": "identifier: strip [15859,15864]",
      "dest": "identifier: strip [15859,15864]"
    },
    {
      "src": "identifier: ch [57822,57824]",
      "dest": "identifier: ch [54927,54929]"
    },
    {
      "src": "return_statement [141851,141862]",
      "dest": "return_statement [143345,143356]"
    },
    {
      "src": "identifier: separatorLength [104534,104549]",
      "dest": "identifier: separatorLength [106028,106043]"
    },
    {
      "src": "type: char[] [66440,66446]",
      "dest": "type: char[] [67487,67493]"
    },
    {
      "src": "binary_expression [161480,161496]",
      "dest": "binary_expression [162974,162990]"
    },
    {
      "src": "new: new [233834,233837]",
      "dest": "new: new [235328,235331]"
    },
    {
      "src": "array_access [236286,236292]",
      "dest": "array_access [237780,237786]"
    },
    {
      "src": "comparison_operator: == [84826,84828]",
      "dest": "comparison_operator: == [86320,86322]"
    },
    {
      "src": "argument_list [244263,244265]",
      "dest": "argument_list [245757,245759]"
    },
    {
      "src": "block_comment:     \n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>A <code>null</code> String will return <code>null</code>.\n     * An empty (\"\") String will return \"\".</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *)   = null\n     * StringUtils.substring(\"\", *)     = \"\"\n     * StringUtils.substring(\"abc\", 0)  = \"abc\"\n     * StringUtils.substring(\"abc\", 2)  = \"c\"\n     * StringUtils.substring(\"abc\", 4)  = \"\"\n     * StringUtils.substring(\"abc\", -2) = \"bc\"\n     * StringUtils.substring(\"abc\", -4) = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position, <code>null</code> if null String input\n     */ [72397,73393]",
      "dest": "block_comment:     \n     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n     *\n     * <p>A negative start position can be used to start <code>n</code>\n     * characters from the end of the String.</p>\n     *\n     * <p>A <code>null</code> String will return <code>null</code>.\n     * An empty (\"\") String will return \"\".</p>\n     *\n     * <pre>\n     * StringUtils.substring(null, *)   = null\n     * StringUtils.substring(\"\", *)     = \"\"\n     * StringUtils.substring(\"abc\", 0)  = \"abc\"\n     * StringUtils.substring(\"abc\", 2)  = \"c\"\n     * StringUtils.substring(\"abc\", 4)  = \"\"\n     * StringUtils.substring(\"abc\", -2) = \"bc\"\n     * StringUtils.substring(\"abc\", -4) = \"abc\"\n     * </pre>\n     *\n     * @param str  the String to get the substring from, may be null\n     * @param start  the position to start from, negative means\n     *  count back from the end of the String by this many characters\n     * @return substring from start position, <code>null</code> if null String input\n     */ [73891,74887]"
    },
    {
      "src": "argument_list [241033,241048]",
      "dest": "argument_list [242527,242542]"
    },
    {
      "src": "if_statement [91405,91456]",
      "dest": "if_statement [92899,92950]"
    },
    {
      "src": "for_statement [66631,67027]",
      "dest": "for_statement [67750,68521]"
    },
    {
      "src": "identifier: lastMatch [117940,117949]",
      "dest": "identifier: lastMatch [119434,119443]"
    },
    {
      "src": "return_statement [84890,84919]",
      "dest": "return_statement [86384,86413]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [60891,60906]",
      "dest": "identifier: INDEX_NOT_FOUND [61278,61293]"
    },
    {
      "src": "formal_parameter [45052,45062]",
      "dest": "formal_parameter [45052,45062]"
    },
    {
      "src": "binary_expression [57632,57648]",
      "dest": "binary_expression [57972,57988]"
    },
    {
      "src": "visibility: public [212903,212909]",
      "dest": "visibility: public [214397,214403]"
    },
    {
      "src": "binary_expression [236017,236020]",
      "dest": "binary_expression [237511,237514]"
    },
    {
      "src": "identifier: searchStr [49861,49870]",
      "dest": "identifier: searchStr [49861,49870]"
    },
    {
      "src": "identifier: str [73830,73833]",
      "dest": "identifier: str [75324,75327]"
    },
    {
      "src": "binary_expression [33511,33522]",
      "dest": "binary_expression [33511,33522]"
    },
    {
      "src": "return_statement [175471,175498]",
      "dest": "return_statement [176965,176992]"
    },
    {
      "src": "argument_list [118548,118551]",
      "dest": "argument_list [120042,120045]"
    },
    {
      "src": "identifier: length [209210,209216]",
      "dest": "identifier: length [210704,210710]"
    },
    {
      "src": "identifier: startIndex [131194,131204]",
      "dest": "identifier: startIndex [132688,132698]"
    },
    {
      "src": "identifier: length [200941,200947]",
      "dest": "identifier: length [202435,202441]"
    },
    {
      "src": "affectation_operator: = [57591,57592]",
      "dest": "affectation_operator: = [57931,57932]"
    },
    {
      "src": "comparison_operator: == [203296,203298]",
      "dest": "comparison_operator: == [204790,204792]"
    },
    {
      "src": "formal_parameter [200840,200855]",
      "dest": "formal_parameter [202334,202349]"
    },
    {
      "src": "parenthesized_expression [134369,134389]",
      "dest": "parenthesized_expression [135863,135883]"
    },
    {
      "src": "block [158308,158344]",
      "dest": "block [159802,159838]"
    },
    {
      "src": "identifier: cs [206866,206868]",
      "dest": "identifier: cs [208360,208362]"
    },
    {
      "src": "binary_expression [244197,244211]",
      "dest": "binary_expression [245691,245705]"
    },
    {
      "src": "binary_expression [202115,202183]",
      "dest": "binary_expression [203609,203677]"
    },
    {
      "src": "null_literal: null [212993,212997]",
      "dest": "null_literal: null [214487,214491]"
    },
    {
      "src": "formal_parameter [149798,149817]",
      "dest": "formal_parameter [151292,151311]"
    },
    {
      "src": "visibility: public [47716,47722]",
      "dest": "visibility: public [47716,47722]"
    },
    {
      "src": "identifier: substring [231681,231690]",
      "dest": "identifier: substring [233175,233184]"
    },
    {
      "src": "identifier: modified [166334,166342]",
      "dest": "identifier: modified [167828,167836]"
    },
    {
      "src": "\": \" [24631,24632]",
      "dest": "\": \" [24631,24632]"
    },
    {
      "src": "type: String [176859,176865]",
      "dest": "type: String [178353,178359]"
    },
    {
      "src": "continue: continue [111105,111113]",
      "dest": "continue: continue [112599,112607]"
    },
    {
      "src": "formal_parameter [42264,42276]",
      "dest": "formal_parameter [42264,42276]"
    },
    {
      "src": "identifier: normalizerFormClass [24768,24787]",
      "dest": "identifier: normalizerFormClass [24768,24787]"
    },
    {
      "src": "argument_list [198333,198341]",
      "dest": "argument_list [199827,199835]"
    },
    {
      "src": "type: CharSequence [8044,8056]",
      "dest": "type: CharSequence [8044,8056]"
    },
    {
      "src": "identifier: list [110934,110938]",
      "dest": "identifier: list [112428,112432]"
    },
    {
      "src": "assignment_expression [131175,131305]",
      "dest": "assignment_expression [132669,132799]"
    },
    {
      "src": "affectation_operator: = [168218,168219]",
      "dest": "affectation_operator: = [169712,169713]"
    },
    {
      "src": "identifier: str [115466,115469]",
      "dest": "identifier: str [116960,116963]"
    },
    {
      "src": "affectation_operator: = [241177,241178]",
      "dest": "affectation_operator: = [242671,242672]"
    },
    {
      "src": "identifier: str [104244,104247]",
      "dest": "identifier: str [105738,105741]"
    },
    {
      "src": "type: CharSequence [204254,204266]",
      "dest": "type: CharSequence [205748,205760]"
    },
    {
      "src": "comparison_operator: < [198391,198392]",
      "dest": "comparison_operator: < [199885,199886]"
    },
    {
      "src": "decimal_integer_literal: 0 [185578,185579]",
      "dest": "decimal_integer_literal: 0 [187072,187073]"
    },
    {
      "src": "identifier: LF [173289,173291]",
      "dest": "identifier: LF [174783,174785]"
    },
    {
      "src": "logical_operator: && [228929,228931]",
      "dest": "logical_operator: && [230423,230425]"
    },
    {
      "src": "identifier: str [110360,110363]",
      "dest": "identifier: str [111854,111857]"
    },
    {
      "src": "type: RuntimeException [26234,26250]",
      "dest": "type: RuntimeException [26234,26250]"
    },
    {
      "src": "line_comment: // They are about equal for a length 50 string [5615,5661]",
      "dest": "line_comment: // They are about equal for a length 50 string [5615,5661]"
    },
    {
      "src": "identifier: i [161473,161474]",
      "dest": "identifier: i [162967,162968]"
    },
    {
      "src": "binary_expression [239818,239832]",
      "dest": "binary_expression [241312,241326]"
    },
    {
      "src": "identifier: i [159785,159786]",
      "dest": "identifier: i [161279,161280]"
    },
    {
      "src": "binary_expression [66729,66742]",
      "dest": "binary_expression [67848,67861]"
    },
    {
      "src": "argument_list [205864,205878]",
      "dest": "argument_list [207358,207372]"
    },
    {
      "src": "if_statement [180081,180172]",
      "dest": "if_statement [181575,181666]"
    },
    {
      "src": "unary_expression [132494,132513]",
      "dest": "unary_expression [133988,134007]"
    },
    {
      "src": "identifier: reverse [215744,215751]",
      "dest": "identifier: reverse [217238,217245]"
    },
    {
      "src": "identifier: i [159452,159453]",
      "dest": "identifier: i [160946,160947]"
    },
    {
      "src": "comparison_operator: == [116666,116668]",
      "dest": "comparison_operator: == [118160,118162]"
    },
    {
      "src": "formal_parameters [240942,240981]",
      "dest": "formal_parameters [242436,242475]"
    },
    {
      "src": "identifier: substring [138857,138866]",
      "dest": "identifier: substring [140351,140360]"
    },
    {
      "src": "object_creation_expression [145838,145863]",
      "dest": "object_creation_expression [147332,147357]"
    },
    {
      "src": "null_literal: null [160547,160551]",
      "dest": "null_literal: null [162041,162045]"
    },
    {
      "src": "method_invocation [119197,119230]",
      "dest": "method_invocation [120691,120724]"
    },
    {
      "src": "comparison_operator: == [159847,159849]",
      "dest": "comparison_operator: == [161341,161343]"
    },
    {
      "src": "type: String [155039,155045]",
      "dest": "type: String [156533,156539]"
    },
    {
      "src": "identifier: str [194496,194499]",
      "dest": "identifier: str [195990,195993]"
    },
    {
      "src": "modifiers [23847,23860]",
      "dest": "modifiers [23847,23860]"
    },
    {
      "src": "formal_parameter [213872,213877]",
      "dest": "formal_parameter [215366,215371]"
    },
    {
      "src": "block [81476,81793]",
      "dest": "block [82970,83287]"
    },
    {
      "src": "method_invocation [205865,205877]",
      "dest": "method_invocation [207359,207371]"
    },
    {
      "src": "catch_clause [25828,25992]",
      "dest": "catch_clause [25828,25992]"
    },
    {
      "src": "identifier: beg [105286,105289]",
      "dest": "identifier: beg [106780,106783]"
    },
    {
      "src": "\": \" [6012,6013]",
      "dest": "\": \" [6012,6013]"
    },
    {
      "src": "binary_expression [219803,219832]",
      "dest": "binary_expression [221297,221326]"
    },
    {
      "src": "identifier: t [235448,235449]",
      "dest": "identifier: t [236942,236943]"
    },
    {
      "src": "identifier: str [105025,105028]",
      "dest": "identifier: str [106519,106522]"
    },
    {
      "src": "type: String [143263,143269]",
      "dest": "type: String [144757,144763]"
    },
    {
      "src": "variable_declarator [222245,222283]",
      "dest": "variable_declarator [223739,223777]"
    },
    {
      "src": "parenthesized_expression [225011,225023]",
      "dest": "parenthesized_expression [226505,226517]"
    },
    {
      "src": "binary_expression [14833,14850]",
      "dest": "binary_expression [14833,14850]"
    },
    {
      "src": "identifier: searchStr [39718,39727]",
      "dest": "identifier: searchStr [39718,39727]"
    },
    {
      "src": "line_comment: // Performance tuned for 2.0 (JDK1.4) [116394,116431]",
      "dest": "line_comment: // Performance tuned for 2.0 (JDK1.4) [117888,117925]"
    },
    {
      "src": "if_statement [81569,81635]",
      "dest": "if_statement [83063,83129]"
    },
    {
      "src": "identifier: cs [195599,195601]",
      "dest": "identifier: cs [197093,197095]"
    },
    {
      "src": "block_comment:     \n     * <p>Splits the provided text into an array, separator string specified.</p>\n     *\n     * <p>The separator(s) will not be included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparator(null, *)               = null\n     * StringUtils.splitByWholeSeparator(\"\", *)                 = []\n     * StringUtils.splitByWholeSeparator(\"ab de fg\", null)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab   de fg\", null)    = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab:cd:ef\", \":\")       = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     */ [96850,98016]",
      "dest": "block_comment:     \n     * <p>Splits the provided text into an array, separator string specified.</p>\n     *\n     * <p>The separator(s) will not be included in the returned String array.\n     * Adjacent separators are treated as one separator.</p>\n     *\n     * <p>A <code>null</code> input String returns <code>null</code>.\n     * A <code>null</code> separator splits on whitespace.</p>\n     *\n     * <pre>\n     * StringUtils.splitByWholeSeparator(null, *)               = null\n     * StringUtils.splitByWholeSeparator(\"\", *)                 = []\n     * StringUtils.splitByWholeSeparator(\"ab de fg\", null)      = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab   de fg\", null)    = [\"ab\", \"de\", \"fg\"]\n     * StringUtils.splitByWholeSeparator(\"ab:cd:ef\", \":\")       = [\"ab\", \"cd\", \"ef\"]\n     * StringUtils.splitByWholeSeparator(\"ab-!-cd-!-ef\", \"-!-\") = [\"ab\", \"cd\", \"ef\"]\n     * </pre>\n     *\n     * @param str  the String to parse, may be null\n     * @param separator  String containing the String to be used as a delimiter,\n     *  <code>null</code> splits on whitespace\n     * @return an array of parsed Strings, <code>null</code> if null String was input\n     */ [98344,99510]"
    },
    {
      "src": "identifier: substrings [106028,106038]",
      "dest": "identifier: substrings [107522,107532]"
    },
    {
      "src": "arithmetic_operator: + [150399,150400]",
      "dest": "arithmetic_operator: + [151893,151894]"
    },
    {
      "src": "identifier: str [52998,53001]",
      "dest": "identifier: str [52998,53001]"
    },
    {
      "src": "comparison_operator: == [205706,205708]",
      "dest": "comparison_operator: == [207200,207202]"
    },
    {
      "src": "type: String [198142,198148]",
      "dest": "type: String [199636,199642]"
    },
    {
      "src": "line_comment: // Replace, character based [162588,162615]",
      "dest": "line_comment: // Replace, character based [164082,164109]"
    },
    {
      "src": "decimal_integer_literal: 0 [117784,117785]",
      "dest": "decimal_integer_literal: 0 [119278,119279]"
    },
    {
      "src": "method_invocation [222447,222487]",
      "dest": "method_invocation [223941,223981]"
    },
    {
      "src": "identifier: str1 [223814,223818]",
      "dest": "identifier: str1 [225308,225312]"
    },
    {
      "src": "identifier: str [17250,17253]",
      "dest": "identifier: str [17250,17253]"
    },
    {
      "src": "identifier: cs [210252,210254]",
      "dest": "identifier: cs [211746,211748]"
    },
    {
      "src": "formal_parameters [33452,33496]",
      "dest": "formal_parameters [33452,33496]"
    },
    {
      "src": "identifier: arrayPos [228594,228602]",
      "dest": "identifier: arrayPos [230088,230096]"
    },
    {
      "src": "return_statement [47890,47949]",
      "dest": "return_statement [47890,47949]"
    },
    {
      "src": "identifier: str [86533,86536]",
      "dest": "identifier: str [88027,88030]"
    },
    {
      "src": "visibility: public [210102,210108]",
      "dest": "visibility: public [211596,211602]"
    },
    {
      "src": "argument_list [127773,127775]",
      "dest": "argument_list [129267,129269]"
    },
    {
      "src": "identifier: prefix [240039,240045]",
      "dest": "identifier: prefix [241533,241539]"
    },
    {
      "src": "type: String [73429,73435]",
      "dest": "type: String [74923,74929]"
    },
    {
      "src": "binary_expression [118685,118703]",
      "dest": "binary_expression [120179,120197]"
    },
    {
      "src": "assignment_expression [14794,14816]",
      "dest": "assignment_expression [14794,14816]"
    },
    {
      "src": "binary_expression [166070,166080]",
      "dest": "binary_expression [167564,167574]"
    },
    {
      "src": "method_invocation [80078,80107]",
      "dest": "method_invocation [81572,81601]"
    },
    {
      "src": "update_expression [228498,228509]",
      "dest": "update_expression [229992,230003]"
    },
    {
      "src": "identifier: indexOfIgnoreCase [39339,39356]",
      "dest": "identifier: indexOfIgnoreCase [39339,39356]"
    },
    {
      "src": "comparison_operator: > [160699,160700]",
      "dest": "comparison_operator: > [162193,162194]"
    },
    {
      "src": "logical_operator: || [158267,158269]",
      "dest": "logical_operator: || [159761,159763]"
    },
    {
      "src": "identifier: replaceIndex [161179,161191]",
      "dest": "identifier: replaceIndex [162673,162685]"
    },
    {
      "src": "method_invocation [106028,106049]",
      "dest": "method_invocation [107522,107543]"
    },
    {
      "src": "method_invocation [215774,215799]",
      "dest": "method_invocation [217268,217293]"
    },
    {
      "src": "identifier: repeat [175626,175632]",
      "dest": "identifier: repeat [177120,177126]"
    },
    {
      "src": "identifier: strLen [18488,18494]",
      "dest": "identifier: strLen [18488,18494]"
    },
    {
      "src": "identifier: removeStartIgnoreCase [140232,140253]",
      "dest": "identifier: removeStartIgnoreCase [141726,141747]"
    },
    {
      "src": "parenthesized_expression [57803,57825]",
      "dest": "parenthesized_expression [54908,54930]"
    },
    {
      "src": "binary_expression [160621,160673]",
      "dest": "binary_expression [162115,162167]"
    },
    {
      "src": "identifier: searchChars [62555,62566]",
      "dest": "identifier: searchChars [63308,63319]"
    },
    {
      "src": "null_literal: null [172996,173000]",
      "dest": "null_literal: null [174490,174494]"
    },
    {
      "src": "identifier: str [53163,53166]",
      "dest": "identifier: str [53163,53166]"
    },
    {
      "src": "return_statement [73790,73803]",
      "dest": "return_statement [75284,75297]"
    },
    {
      "src": "visibility: private [122983,122990]",
      "dest": "visibility: private [124477,124484]"
    },
    {
      "src": "argument_list [190674,190676]",
      "dest": "argument_list [192168,192170]"
    },
    {
      "src": "block [110577,110638]",
      "dest": "block [112071,112132]"
    },
    {
      "src": "line_comment: // Java default is 16, probably too small [132771,132812]",
      "dest": "line_comment: // Java default is 16, probably too small [134265,134306]"
    },
    {
      "src": "identifier: join [127448,127452]",
      "dest": "identifier: join [128942,128946]"
    },
    {
      "src": "formal_parameter [13682,13692]",
      "dest": "formal_parameter [13682,13692]"
    },
    {
      "src": "type: String [133794,133800]",
      "dest": "type: String [135288,135294]"
    },
    {
      "src": "arithmetic_operator: - [220319,220320]",
      "dest": "arithmetic_operator: - [221813,221814]"
    },
    {
      "src": "null_literal: null [159458,159462]",
      "dest": "null_literal: null [160952,160956]"
    },
    {
      "src": "catch_formal_parameter [25514,25539]",
      "dest": "catch_formal_parameter [25514,25539]"
    },
    {
      "src": "block_comment:     \n     * <p>Returns either the passed in String, or if the String is\n     * <code>null</code>, the value of <code>defaultStr</code>.</p>\n     *\n     * <pre>\n     * StringUtils.defaultString(null, \"NULL\")  = \"NULL\"\n     * StringUtils.defaultString(\"\", \"NULL\")    = \"\"\n     * StringUtils.defaultString(\"bat\", \"NULL\") = \"bat\"\n     * </pre>\n     *\n     * @see ObjectUtils#toString(Object,String)\n     * @see String#valueOf(Object)\n     * @param str  the String to check, may be null\n     * @param defaultStr  the default String to return\n     *  if the input is <code>null</code>, may be null\n     * @return the passed in String, or the default if it was <code>null</code>\n     */ [212220,212898]",
      "dest": "block_comment:     \n     * <p>Returns either the passed in String, or if the String is\n     * <code>null</code>, the value of <code>defaultStr</code>.</p>\n     *\n     * <pre>\n     * StringUtils.defaultString(null, \"NULL\")  = \"NULL\"\n     * StringUtils.defaultString(\"\", \"NULL\")    = \"\"\n     * StringUtils.defaultString(\"bat\", \"NULL\") = \"bat\"\n     * </pre>\n     *\n     * @see ObjectUtils#toString(Object,String)\n     * @see String#valueOf(Object)\n     * @param str  the String to check, may be null\n     * @param defaultStr  the default String to return\n     *  if the input is <code>null</code>, may be null\n     * @return the passed in String, or the default if it was <code>null</code>\n     */ [213714,214392]"
    },
    {
      "src": "unary_expression [161319,161321]",
      "dest": "unary_expression [162813,162815]"
    },
    {
      "src": "formal_parameter [181378,181391]",
      "dest": "formal_parameter [182872,182885]"
    },
    {
      "src": "comparison_operator: < [225337,225338]",
      "dest": "comparison_operator: < [226831,226832]"
    },
    {
      "src": "method_declaration [87665,87782]",
      "dest": "method_declaration [89159,89276]"
    },
    {
      "src": "identifier: hasNext [134086,134093]",
      "dest": "identifier: hasNext [135580,135587]"
    },
    {
      "src": "identifier: separator [126223,126232]",
      "dest": "identifier: separator [127717,127726]"
    },
    {
      "src": "null_literal: null [239881,239885]",
      "dest": "null_literal: null [241375,241379]"
    },
    {
      "src": "binary_expression [86636,86660]",
      "dest": "binary_expression [88130,88154]"
    },
    {
      "src": "line_comment: // probably slower, methods. [215645,215673]",
      "dest": "line_comment: // probably slower, methods. [217139,217167]"
    },
    {
      "src": "variable_declarator [175000,175014]",
      "dest": "variable_declarator [176494,176508]"
    },
    {
      "src": "block [170463,170497]",
      "dest": "block [171957,171991]"
    },
    {
      "src": "variable_declarator [149986,149995]",
      "dest": "variable_declarator [151480,151489]"
    },
    {
      "src": "null_literal: null [158262,158266]",
      "dest": "null_literal: null [159756,159760]"
    },
    {
      "src": "object_creation_expression [233834,233890]",
      "dest": "object_creation_expression [235328,235384]"
    },
    {
      "src": "binary_expression [150427,150449]",
      "dest": "binary_expression [151921,151943]"
    },
    {
      "src": "return_statement [220183,220252]",
      "dest": "return_statement [221677,221746]"
    },
    {
      "src": "return_statement [113362,113412]",
      "dest": "return_statement [114856,114906]"
    },
    {
      "src": "binary_expression [158160,158178]",
      "dest": "binary_expression [159654,159672]"
    },
    {
      "src": "method_declaration [215432,215806]",
      "dest": "method_declaration [216926,217300]"
    },
    {
      "src": "array_creation_expression [137147,137159]",
      "dest": "array_creation_expression [138641,138653]"
    },
    {
      "src": "argument_list [137262,137277]",
      "dest": "argument_list [138756,138771]"
    },
    {
      "src": "if_statement [14732,14785]",
      "dest": "if_statement [14732,14785]"
    },
    {
      "src": "type: String [179917,179923]",
      "dest": "type: String [181411,181417]"
    },
    {
      "src": "decimal_integer_literal: 1 [147183,147184]",
      "dest": "decimal_integer_literal: 1 [148677,148678]"
    },
    {
      "src": "argument_list [209216,209218]",
      "dest": "argument_list [210710,210712]"
    },
    {
      "src": "affectation_operator: = [118038,118039]",
      "dest": "affectation_operator: = [119532,119533]"
    },
    {
      "src": "if_statement [160687,160780]",
      "dest": "if_statement [162181,162274]"
    },
    {
      "src": "expression_statement [175051,175067]",
      "dest": "expression_statement [176545,176561]"
    },
    {
      "src": "identifier: str [81765,81768]",
      "dest": "identifier: str [83259,83262]"
    },
    {
      "src": "type: String[] [113285,113293]",
      "dest": "type: String[] [114779,114787]"
    },
    {
      "src": "object_creation_expression [220028,220103]",
      "dest": "object_creation_expression [221522,221597]"
    },
    {
      "src": "update_expression [53217,53220]",
      "dest": "update_expression [53217,53220]"
    },
    {
      "src": "local_variable_declaration [104581,104636]",
      "dest": "local_variable_declaration [106075,106130]"
    },
    {
      "src": "argument_list [166000,166003]",
      "dest": "argument_list [167494,167497]"
    },
    {
      "src": "affectation_operator: = [219700,219701]",
      "dest": "affectation_operator: = [221194,221195]"
    },
    {
      "src": "binary_expression [220322,220334]",
      "dest": "binary_expression [221816,221828]"
    },
    {
      "src": "block [181420,181456]",
      "dest": "block [182914,182950]"
    },
    {
      "src": "identifier: str [181675,181678]",
      "dest": "identifier: str [183169,183172]"
    },
    {
      "src": "identifier: substring [106307,106316]",
      "dest": "identifier: substring [107801,107810]"
    },
    {
      "src": "identifier: charAt [208260,208266]",
      "dest": "identifier: charAt [209754,209760]"
    },
    {
      "src": "method_invocation [105931,105965]",
      "dest": "method_invocation [107425,107459]"
    },
    {
      "src": "false: false [118908,118913]",
      "dest": "false: false [120402,120407]"
    },
    {
      "src": "method_declaration [52950,53369]",
      "dest": "method_declaration [52950,53369]"
    },
    {
      "src": "variable_declarator [62476,62481]",
      "dest": "variable_declarator [63215,63220]"
    },
    {
      "src": "comparison_operator: < [219470,219471]",
      "dest": "comparison_operator: < [220964,220965]"
    },
    {
      "src": "identifier: EMPTY [73797,73802]",
      "dest": "identifier: EMPTY [75291,75296]"
    },
    {
      "src": "argument_list [202134,202148]",
      "dest": "argument_list [203628,203642]"
    },
    {
      "src": "if_statement [123600,124086]",
      "dest": "if_statement [125094,125580]"
    },
    {
      "src": "identifier: pads [180045,180049]",
      "dest": "identifier: pads [181539,181543]"
    },
    {
      "src": "type: CharSequence [196651,196663]",
      "dest": "type: CharSequence [198145,198157]"
    },
    {
      "src": "identifier: i [118967,118968]",
      "dest": "identifier: i [120461,120462]"
    },
    {
      "src": "binary_expression [212182,212193]",
      "dest": "binary_expression [213676,213687]"
    },
    {
      "src": "block [63782,64138]",
      "dest": "block [64829,65185]"
    },
    {
      "src": "method_invocation [70168,70187]",
      "dest": "method_invocation [71662,71681]"
    },
    {
      "src": "expression_statement [117264,117272]",
      "dest": "expression_statement [118758,118766]"
    },
    {
      "src": "comparison_operator: != [89429,89431]",
      "dest": "comparison_operator: != [90923,90925]"
    },
    {
      "src": "identifier: strLen [198334,198340]",
      "dest": "identifier: strLen [199828,199834]"
    },
    {
      "src": "method_invocation [91478,91503]",
      "dest": "method_invocation [92972,92997]"
    },
    {
      "src": "decimal_integer_literal: 0 [53278,53279]",
      "dest": "decimal_integer_literal: 0 [53278,53279]"
    },
    {
      "src": "return_statement [131612,131634]",
      "dest": "return_statement [133106,133128]"
    },
    {
      "src": "formal_parameter [71770,71780]",
      "dest": "formal_parameter [73264,73274]"
    },
    {
      "src": "formal_parameter [75582,75591]",
      "dest": "formal_parameter [77076,77085]"
    },
    {
      "src": "binary_expression [123617,123651]",
      "dest": "binary_expression [125111,125145]"
    },
    {
      "src": "type: int [18561,18564]",
      "dest": "type: int [18561,18564]"
    },
    {
      "src": "identifier: isUpperCase [198466,198477]",
      "dest": "identifier: isUpperCase [199960,199971]"
    },
    {
      "src": "parenthesized_expression [200870,200882]",
      "dest": "parenthesized_expression [202364,202376]"
    },
    {
      "src": "comparison_operator: == [117998,118000]",
      "dest": "comparison_operator: == [119492,119494]"
    },
    {
      "src": "argument_list [124245,124247]",
      "dest": "argument_list [125739,125741]"
    },
    {
      "src": "if_statement [39633,39705]",
      "dest": "if_statement [39633,39705]"
    },
    {
      "src": "identifier: size [180238,180242]",
      "dest": "identifier: size [181732,181736]"
    },
    {
      "src": "static: static [65110,65116]",
      "dest": "static: static [66157,66163]"
    },
    {
      "src": "identifier: i [225270,225271]",
      "dest": "identifier: i [226764,226765]"
    },
    {
      "src": "identifier: StringUtils [213910,213921]",
      "dest": "identifier: StringUtils [215404,215415]"
    },
    {
      "src": "assignment_expression [178240,178256]",
      "dest": "assignment_expression [179734,179750]"
    },
    {
      "src": "identifier: isEmpty [57403,57410]",
      "dest": "identifier: isEmpty [57743,57750]"
    },
    {
      "src": "block [204402,204552]",
      "dest": "block [205896,206046]"
    },
    {
      "src": "comparison_operator: < [203227,203228]",
      "dest": "comparison_operator: < [204721,204722]"
    },
    {
      "src": "block [63967,64003]",
      "dest": "block [65014,65050]"
    },
    {
      "src": "local_variable_declaration [222241,222284]",
      "dest": "local_variable_declaration [223735,223778]"
    },
    {
      "src": "arithmetic_operator: - [123865,123866]",
      "dest": "arithmetic_operator: - [125359,125360]"
    },
    {
      "src": "identifier: start [162307,162312]",
      "dest": "identifier: start [163801,163806]"
    },
    {
      "src": "formal_parameter [104045,104061]",
      "dest": "formal_parameter [105539,105555]"
    },
    {
      "src": "array_access [236276,236280]",
      "dest": "array_access [237770,237774]"
    },
    {
      "src": "identifier: replaceIndex [161304,161316]",
      "dest": "identifier: replaceIndex [162798,162810]"
    },
    {
      "src": "type: boolean [242353,242360]",
      "dest": "type: boolean [243847,243854]"
    },
    {
      "src": "false: false [244288,244293]",
      "dest": "false: false [245782,245787]"
    },
    {
      "src": "assignment_expression [236063,236066]",
      "dest": "assignment_expression [237557,237560]"
    },
    {
      "src": "method_invocation [91562,91576]",
      "dest": "method_invocation [93056,93070]"
    },
    {
      "src": "binary_expression [235261,235267]",
      "dest": "binary_expression [236755,236761]"
    },
    {
      "src": "static: static [167939,167945]",
      "dest": "static: static [169433,169439]"
    },
    {
      "src": "local_variable_declaration [54653,54688]",
      "dest": "local_variable_declaration [54685,54720]"
    },
    {
      "src": "block [66509,66545]",
      "dest": "block [67556,67592]"
    },
    {
      "src": "identifier: str [15815,15818]",
      "dest": "identifier: str [15815,15818]"
    },
    {
      "src": "identifier: substring [83347,83356]",
      "dest": "identifier: substring [84841,84850]"
    },
    {
      "src": "formal_parameter [239742,239752]",
      "dest": "formal_parameter [241236,241246]"
    },
    {
      "src": "block [240982,241341]",
      "dest": "block [242476,242835]"
    },
    {
      "src": "identifier: m [235166,235167]",
      "dest": "identifier: m [236660,236661]"
    },
    {
      "src": "identifier: sz [137156,137158]",
      "dest": "identifier: sz [138650,138652]"
    },
    {
      "src": "identifier: i [131528,131529]",
      "dest": "identifier: i [133022,133023]"
    },
    {
      "src": "visibility: public [217298,217304]",
      "dest": "visibility: public [218792,218798]"
    },
    {
      "src": "decimal_integer_literal: 0 [57671,57672]",
      "dest": "decimal_integer_literal: 0 [54782,54783]"
    },
    {
      "src": "decimal_integer_literal: 3 [160734,160735]",
      "dest": "decimal_integer_literal: 3 [162228,162229]"
    },
    {
      "src": "object_creation_expression [168538,168597]",
      "dest": "object_creation_expression [170032,170091]"
    },
    {
      "src": "type: String [90771,90777]",
      "dest": "type: String [92265,92271]"
    },
    {
      "src": "unary_expression [134076,134095]",
      "dest": "unary_expression [135570,135589]"
    },
    {
      "src": "increment_operator: -- [20625,20627]",
      "dest": "increment_operator: -- [20625,20627]"
    },
    {
      "src": "identifier: charAt [18886,18892]",
      "dest": "identifier: charAt [18886,18892]"
    },
    {
      "src": "identifier: len [118739,118742]",
      "dest": "identifier: len [120233,120236]"
    },
    {
      "src": "argument_list [222429,222437]",
      "dest": "argument_list [223923,223931]"
    },
    {
      "src": "identifier: start [18842,18847]",
      "dest": "identifier: start [18842,18847]"
    },
    {
      "src": "identifier: searchList [159634,159644]",
      "dest": "identifier: searchList [161128,161138]"
    },
    {
      "src": "increment_operator: ++ [203234,203236]",
      "dest": "increment_operator: ++ [204728,204730]"
    },
    {
      "src": "identifier: str [238133,238136]",
      "dest": "identifier: str [239627,239630]"
    },
    {
      "src": "argument_list [166377,166379]",
      "dest": "argument_list [167871,167873]"
    },
    {
      "src": "variable_declarator [200933,200949]",
      "dest": "variable_declarator [202427,202443]"
    },
    {
      "src": "type: int [131063,131066]",
      "dest": "type: int [132557,132560]"
    },
    {
      "src": "return_statement [200023,200036]",
      "dest": "return_statement [201517,201530]"
    },
    {
      "src": "formal_parameters [214544,214556]",
      "dest": "formal_parameters [216038,216050]"
    },
    {
      "src": "return_statement [43466,43500]",
      "dest": "return_statement [43466,43500]"
    },
    {
      "src": "argument_list [117783,117786]",
      "dest": "argument_list [119277,119280]"
    },
    {
      "src": "block [239165,239218]",
      "dest": "block [240659,240712]"
    },
    {
      "src": "identifier: str [117072,117075]",
      "dest": "identifier: str [118566,118569]"
    },
    {
      "src": "block_comment:     \n     * <p>Case in-sensitive find of the first index within a String\n     * from the specified position.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfIgnoreCase(null, *, *)          = -1\n     * StringUtils.indexOfIgnoreCase(*, null, *)          = -1\n     * StringUtils.indexOfIgnoreCase(\"\", \"\", 0)           = 0\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\", 0)  = 0\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 0)  = 2\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0) = 1\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 3)  = 5\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 9)  = -1\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", -1) = 2\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOfIgnoreCase(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.5\n     */ [37885,39316]",
      "dest": "block_comment:     \n     * <p>Case in-sensitive find of the first index within a String\n     * from the specified position.</p>\n     *\n     * <p>A <code>null</code> String will return <code>-1</code>.\n     * A negative start position is treated as zero.\n     * An empty (\"\") search String always matches.\n     * A start position greater than the string length only matches\n     * an empty search String.</p>\n     *\n     * <pre>\n     * StringUtils.indexOfIgnoreCase(null, *, *)          = -1\n     * StringUtils.indexOfIgnoreCase(*, null, *)          = -1\n     * StringUtils.indexOfIgnoreCase(\"\", \"\", 0)           = 0\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"A\", 0)  = 0\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 0)  = 2\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"AB\", 0) = 1\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 3)  = 5\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", 9)  = -1\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"B\", -1) = 2\n     * StringUtils.indexOfIgnoreCase(\"aabaabaa\", \"\", 2)   = 2\n     * StringUtils.indexOfIgnoreCase(\"abc\", \"\", 9)        = 3\n     * </pre>\n     *\n     * @param str  the String to check, may be null\n     * @param searchStr  the String to find, may be null\n     * @param startPos  the start position, negative treated as zero\n     * @return the first index of the search String,\n     *  -1 if no match or <code>null</code> string input\n     * @since 2.5\n     */ [37885,39316]"
    },
    {
      "src": "\": \" [24321,24322]",
      "dest": "\": \" [24321,24322]"
    },
    {
      "src": "parenthesized_expression [202115,202158]",
      "dest": "parenthesized_expression [203609,203652]"
    },
    {
      "src": "comparison_operator: == [208078,208080]",
      "dest": "comparison_operator: == [209572,209574]"
    },
    {
      "src": "type: String [5996,6002]",
      "dest": "type: String [5996,6002]"
    },
    {
      "src": "type: CharSequence [68042,68054]",
      "dest": "type: CharSequence [69536,69548]"
    },
    {
      "src": "decimal_integer_literal: 0 [81779,81780]",
      "dest": "decimal_integer_literal: 0 [83273,83274]"
    },
    {
      "src": "for_statement [208163,208334]",
      "dest": "for_statement [209657,209828]"
    },
    {
      "src": "binary_expression [10679,10690]",
      "dest": "binary_expression [10679,10690]"
    },
    {
      "src": "array_access [175377,175387]",
      "dest": "array_access [176871,176881]"
    },
    {
      "src": "if_statement [46577,46662]",
      "dest": "if_statement [46577,46662]"
    },
    {
      "src": "method_invocation [140376,140409]",
      "dest": "method_invocation [141870,141903]"
    },
    {
      "src": "identifier: Math [227873,227877]",
      "dest": "identifier: Math [229367,229371]"
    },
    {
      "src": "if_statement [189035,189085]",
      "dest": "if_statement [190529,190579]"
    },
    {
      "src": "binary_expression [210170,210195]",
      "dest": "binary_expression [211664,211689]"
    },
    {
      "src": "if_statement [39505,39560]",
      "dest": "if_statement [39505,39560]"
    },
    {
      "src": "block [137221,137350]",
      "dest": "block [138715,138844]"
    },
    {
      "src": "identifier: searchStr [37859,37868]",
      "dest": "identifier: searchStr [37859,37868]"
    },
    {
      "src": "identifier: str [89474,89477]",
      "dest": "identifier: str [90968,90971]"
    },
    {
      "src": "identifier: comparisonChar [228530,228544]",
      "dest": "identifier: comparisonChar [230024,230038]"
    },
    {
      "src": "parenthesized_expression [235209,235217]",
      "dest": "parenthesized_expression [236703,236711]"
    },
    {
      "src": "arithmetic_operator: - [162013,162014]",
      "dest": "arithmetic_operator: - [163507,163508]"
    },
    {
      "src": "argument_list [99778,99806]",
      "dest": "argument_list [101272,101300]"
    },
    {
      "src": "assignment_expression [198701,198731]",
      "dest": "assignment_expression [200195,200225]"
    },
    {
      "src": "parenthesized_expression [239855,239886]",
      "dest": "parenthesized_expression [241349,241380]"
    },
    {
      "src": "argument_list [110956,110966]",
      "dest": "argument_list [112450,112460]"
    },
    {
      "src": "identifier: i [175317,175318]",
      "dest": "identifier: i [176811,176812]"
    },
    {
      "src": "block [49816,49947]",
      "dest": "block [49816,49947]"
    },
    {
      "src": "formal_parameters [198157,198169]",
      "dest": "formal_parameters [199651,199663]"
    },
    {
      "src": "\": \" [190630,190631]",
      "dest": "\": \" [192124,192125]"
    },
    {
      "src": "identifier: EMPTY [104380,104385]",
      "dest": "identifier: EMPTY [105874,105879]"
    },
    {
      "src": "identifier: normalizerClass [24595,24610]",
      "dest": "identifier: normalizerClass [24595,24610]"
    },
    {
      "src": "argument_list [244339,244341]",
      "dest": "argument_list [245833,245835]"
    },
    {
      "src": "identifier: i [117400,117401]",
      "dest": "identifier: i [118894,118895]"
    },
    {
      "src": "affectation_operator: = [165890,165891]",
      "dest": "affectation_operator: = [167384,167385]"
    },
    {
      "src": "identifier: array [127529,127534]",
      "dest": "identifier: array [129023,129028]"
    },
    {
      "src": "method_invocation [81490,81502]",
      "dest": "method_invocation [82984,82996]"
    },
    {
      "src": "identifier: i [225394,225395]",
      "dest": "identifier: i [226888,226889]"
    },
    {
      "src": "identifier: t [233803,233804]",
      "dest": "identifier: t [235297,235298]"
    },
    {
      "src": "identifier: search [72182,72188]",
      "dest": "identifier: search [73676,73682]"
    },
    {
      "src": "method_invocation [223966,223984]",
      "dest": "method_invocation [225460,225478]"
    },
    {
      "src": "block [228151,228198]",
      "dest": "block [229645,229692]"
    },
    {
      "src": "formal_parameter [35155,35166]",
      "dest": "formal_parameter [35155,35166]"
    },
    {
      "src": "modifiers [6095,6114]",
      "dest": "modifiers [6095,6114]"
    },
    {
      "src": "return_statement [40974,41009]",
      "dest": "return_statement [40974,41009]"
    },
    {
      "src": "identifier: cs [211205,211207]",
      "dest": "identifier: cs [212699,212701]"
    },
    {
      "src": "binary_expression [141659,141690]",
      "dest": "binary_expression [143153,143184]"
    },
    {
      "src": "assignment_expression [236097,236130]",
      "dest": "assignment_expression [237591,237624]"
    },
    {
      "src": "visibility: public [109592,109598]",
      "dest": "visibility: public [111086,111092]"
    },
    {
      "src": "new: new [116762,116765]",
      "dest": "new: new [118256,118259]"
    },
    {
      "src": "identifier: len [118488,118491]",
      "dest": "identifier: len [119982,119985]"
    },
    {
      "src": "identifier: min [227878,227881]",
      "dest": "identifier: min [229372,229375]"
    },
    {
      "src": "binary_expression [79848,79877]",
      "dest": "binary_expression [81342,81371]"
    },
    {
      "src": "block [104741,106374]",
      "dest": "block [106235,107868]"
    },
    {
      "src": "block [78405,78652]",
      "dest": "block [79899,80146]"
    },
    {
      "src": "identifier: ret [72213,72216]",
      "dest": "identifier: ret [73707,73710]"
    },
    {
      "src": "type: String [37789,37795]",
      "dest": "type: String [37789,37795]"
    },
    {
      "src": "formal_parameter [126113,126127]",
      "dest": "formal_parameter [127607,127621]"
    },
    {
      "src": "static: static [224933,224939]",
      "dest": "static: static [226427,226433]"
    },
    {
      "src": "binary_expression [159441,159462]",
      "dest": "binary_expression [160935,160956]"
    },
    {
      "src": "identifier: padding [185973,185980]",
      "dest": "identifier: padding [187467,187474]"
    },
    {
      "src": "return_statement [140425,140463]",
      "dest": "return_statement [141919,141957]"
    },
    {
      "src": "type: String [39369,39375]",
      "dest": "type: String [39369,39375]"
    },
    {
      "src": "if_statement [77280,77333]",
      "dest": "if_statement [78774,78827]"
    },
    {
      "src": "identifier: Character [202116,202125]",
      "dest": "identifier: Character [203610,203619]"
    },
    {
      "src": "argument_list [210191,210195]",
      "dest": "argument_list [211685,211689]"
    },
    {
      "src": "block [174438,174474]",
      "dest": "block [175932,175968]"
    },
    {
      "src": "block [161503,162186]",
      "dest": "block [162997,163680]"
    },
    {
      "src": "comparison_operator: < [91175,91176]",
      "dest": "comparison_operator: < [92669,92670]"
    },
    {
      "src": "formal_parameters [11647,11659]",
      "dest": "formal_parameters [11647,11659]"
    },
    {
      "src": "identifier: str [193694,193697]",
      "dest": "identifier: str [195188,195191]"
    },
    {
      "src": "affectation_operator: = [227774,227775]",
      "dest": "affectation_operator: = [229268,229269]"
    },
    {
      "src": "identifier: input [23888,23893]",
      "dest": "identifier: input [23888,23893]"
    },
    {
      "src": "modifiers [190435,190448]",
      "dest": "modifiers [191929,191942]"
    },
    {
      "src": "identifier: substrings [105931,105941]",
      "dest": "identifier: substrings [107425,107435]"
    },
    {
      "src": "formal_parameter [174340,174350]",
      "dest": "formal_parameter [175834,175844]"
    },
    {
      "src": "identifier: append [150469,150475]",
      "dest": "identifier: append [151963,151969]"
    },
    {
      "src": "identifier: bufSize [127640,127647]",
      "dest": "identifier: bufSize [129134,129141]"
    },
    {
      "src": "identifier: targetSting [222218,222229]",
      "dest": "identifier: targetSting [223712,223723]"
    },
    {
      "src": "binary_expression [185862,185875]",
      "dest": "binary_expression [187356,187369]"
    },
    {
      "src": "binary_expression [70018,70024]",
      "dest": "binary_expression [71512,71518]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only ASCII printable characters.</p>\n     * \n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     * \n     * <pre>\n     * StringUtils.isAsciiPrintable(null)     = false\n     * StringUtils.isAsciiPrintable(\"\")       = true\n     * StringUtils.isAsciiPrintable(\" \")      = true\n     * StringUtils.isAsciiPrintable(\"Ceki\")   = true\n     * StringUtils.isAsciiPrintable(\"ab2c\")   = true\n     * StringUtils.isAsciiPrintable(\"!ab-c~\") = true\n     * StringUtils.isAsciiPrintable(\"\\u0020\") = true\n     * StringUtils.isAsciiPrintable(\"\\u0021\") = true\n     * StringUtils.isAsciiPrintable(\"\\u007e\") = true\n     * StringUtils.isAsciiPrintable(\"\\u007f\") = false\n     * StringUtils.isAsciiPrintable(\"Ceki G\\u00fclc\\u00fc\") = false\n     * </pre>\n     *\n     * @param cs the CharSequence to check, may be null\n     * @return <code>true</code> if every character is in the range\n     *  32 thru 126\n     * @since 2.1\n     */ [204585,205628]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only ASCII printable characters.</p>\n     * \n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     * \n     * <pre>\n     * StringUtils.isAsciiPrintable(null)     = false\n     * StringUtils.isAsciiPrintable(\"\")       = true\n     * StringUtils.isAsciiPrintable(\" \")      = true\n     * StringUtils.isAsciiPrintable(\"Ceki\")   = true\n     * StringUtils.isAsciiPrintable(\"ab2c\")   = true\n     * StringUtils.isAsciiPrintable(\"!ab-c~\") = true\n     * StringUtils.isAsciiPrintable(\"\\u0020\") = true\n     * StringUtils.isAsciiPrintable(\"\\u0021\") = true\n     * StringUtils.isAsciiPrintable(\"\\u007e\") = true\n     * StringUtils.isAsciiPrintable(\"\\u007f\") = false\n     * StringUtils.isAsciiPrintable(\"Ceki G\\u00fclc\\u00fc\") = false\n     * </pre>\n     *\n     * @param cs the CharSequence to check, may be null\n     * @return <code>true</code> if every character is in the range\n     *  32 thru 126\n     * @since 2.1\n     */ [206079,207122]"
    },
    {
      "src": "identifier: cs [9606,9608]",
      "dest": "identifier: cs [9606,9608]"
    },
    {
      "src": "return_statement [223744,223756]",
      "dest": "return_statement [225238,225250]"
    },
    {
      "src": "null_literal: null [193720,193724]",
      "dest": "null_literal: null [195214,195218]"
    },
    {
      "src": "logical_operator: || [176646,176648]",
      "dest": "logical_operator: || [178140,178142]"
    },
    {
      "src": "binary_expression [182208,182218]",
      "dest": "binary_expression [183702,183712]"
    },
    {
      "src": "binary_expression [64016,64033]",
      "dest": "binary_expression [65063,65080]"
    },
    {
      "src": "static: static [212910,212916]",
      "dest": "static: static [214404,214410]"
    },
    {
      "src": "object_creation_expression [165892,165920]",
      "dest": "object_creation_expression [167386,167414]"
    },
    {
      "src": "type: String [140254,140260]",
      "dest": "type: String [141748,141754]"
    },
    {
      "src": "identifier: i [72009,72010]",
      "dest": "identifier: i [73503,73504]"
    },
    {
      "src": "identifier: shortestStrLen [228932,228946]",
      "dest": "identifier: shortestStrLen [230426,230440]"
    },
    {
      "src": "identifier: separator [83242,83251]",
      "dest": "identifier: separator [84736,84745]"
    },
    {
      "src": "null_literal: null [10686,10690]",
      "dest": "null_literal: null [10686,10690]"
    },
    {
      "src": "type: CharSequence [186617,186629]",
      "dest": "type: CharSequence [188111,188123]"
    },
    {
      "src": "formal_parameter [123040,123057]",
      "dest": "formal_parameter [124534,124551]"
    },
    {
      "src": "line_comment: // Case conversion [190900,190918]",
      "dest": "line_comment: // Case conversion [192394,192412]"
    },
    {
      "src": "identifier: str [173238,173241]",
      "dest": "identifier: str [174732,174735]"
    },
    {
      "src": "identifier: str [170007,170010]",
      "dest": "identifier: str [171501,171504]"
    },
    {
      "src": "binary_expression [33511,33543]",
      "dest": "binary_expression [33511,33543]"
    },
    {
      "src": "method_invocation [57717,57729]",
      "dest": "method_invocation [54825,54837]"
    },
    {
      "src": "identifier: substring [181990,181999]",
      "dest": "identifier: substring [183484,183493]"
    },
    {
      "src": "identifier: str [29474,29477]",
      "dest": "identifier: str [29474,29477]"
    },
    {
      "src": "increment_operator: ++ [70027,70029]",
      "dest": "increment_operator: ++ [71521,71523]"
    },
    {
      "src": "type: String [141601,141607]",
      "dest": "type: String [143095,143101]"
    },
    {
      "src": "modifiers [7398,7411]",
      "dest": "modifiers [7398,7411]"
    },
    {
      "src": "block [199762,200042]",
      "dest": "block [201256,201536]"
    },
    {
      "src": "comparison_operator: == [196787,196789]",
      "dest": "comparison_operator: == [198281,198283]"
    },
    {
      "src": "identifier: stripChars [20543,20553]",
      "dest": "identifier: stripChars [20543,20553]"
    },
    {
      "src": "type: int [227334,227337]",
      "dest": "type: int [228828,228831]"
    },
    {
      "src": "formal_parameter [87703,87713]",
      "dest": "formal_parameter [89197,89207]"
    },
    {
      "src": "expression_statement [228736,228758]",
      "dest": "expression_statement [230230,230252]"
    },
    {
      "src": "formal_parameter [196651,196666]",
      "dest": "formal_parameter [198145,198160]"
    },
    {
      "src": "affectation_operator: = [203186,203187]",
      "dest": "affectation_operator: = [204680,204681]"
    },
    {
      "src": "identifier: strs [21695,21699]",
      "dest": "identifier: strs [21695,21699]"
    },
    {
      "src": "block [203133,203170]",
      "dest": "block [204627,204664]"
    },
    {
      "src": "type: boolean [159059,159066]",
      "dest": "type: boolean [160553,160560]"
    },
    {
      "src": "local_variable_declaration [228418,228437]",
      "dest": "local_variable_declaration [229912,229931]"
    },
    {
      "src": "identifier: i [235917,235918]",
      "dest": "identifier: i [237411,237412]"
    },
    {
      "src": "block [162042,162154]",
      "dest": "block [163536,163648]"
    },
    {
      "src": "array_access [58076,58094]",
      "dest": "array_access [55109,55127]"
    },
    {
      "src": "null_literal: null [20198,20202]",
      "dest": "null_literal: null [20198,20202]"
    },
    {
      "src": "comparison_operator: > [184149,184150]",
      "dest": "comparison_operator: > [185643,185644]"
    },
    {
      "src": "identifier: i [131412,131413]",
      "dest": "identifier: i [132906,132907]"
    },
    {
      "src": "affectation_operator: = [222255,222256]",
      "dest": "affectation_operator: = [223749,223750]"
    },
    {
      "src": "return_statement [189064,189075]",
      "dest": "return_statement [190558,190569]"
    },
    {
      "src": "identifier: str1 [28539,28543]",
      "dest": "identifier: str1 [28539,28543]"
    },
    {
      "src": "affectation_operator: = [105554,105555]",
      "dest": "affectation_operator: = [107048,107049]"
    },
    {
      "src": "identifier: splitByCharacterType [123007,123027]",
      "dest": "identifier: splitByCharacterType [124501,124521]"
    },
    {
      "src": "increment_operator: ++ [18716,18718]",
      "dest": "increment_operator: ++ [18716,18718]"
    },
    {
      "src": "local_variable_declaration [66587,66622]",
      "dest": "local_variable_declaration [67666,67701]"
    },
    {
      "src": "method_declaration [40831,41015]",
      "dest": "method_declaration [40831,41015]"
    },
    {
      "src": "identifier: str [219803,219806]",
      "dest": "identifier: str [221297,221300]"
    },
    {
      "src": "comparison_operator: == [70373,70375]",
      "dest": "comparison_operator: == [71867,71869]"
    },
    {
      "src": "identifier: modified [165752,165760]",
      "dest": "identifier: modified [167246,167254]"
    },
    {
      "src": "modifiers [135296,135309]",
      "dest": "modifiers [136790,136803]"
    },
    {
      "src": "variable_declarator [23012,23019]",
      "dest": "variable_declarator [23012,23019]"
    },
    {
      "src": "modifiers [92765,92778]",
      "dest": "modifiers [94259,94272]"
    },
    {
      "src": "identifier: append [166286,166292]",
      "dest": "identifier: append [167780,167786]"
    },
    {
      "src": "binary_expression [46581,46613]",
      "dest": "binary_expression [46581,46613]"
    },
    {
      "src": "affectation_operator: = [200936,200937]",
      "dest": "affectation_operator: = [202430,202431]"
    },
    {
      "src": "update_expression [54810,54813]",
      "dest": "update_expression [58117,58120]"
    },
    {
      "src": "comparison_operator: < [150304,150305]",
      "dest": "comparison_operator: < [151798,151799]"
    },
    {
      "src": "block_comment:     \n     * <p>Centers a String in a larger String of size <code>size</code>.\n     * Uses a supplied String as the value to pad the String with.</p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A <code>null</code> String returns <code>null</code>.\n     * A negative size is treated as zero.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *, *)     = null\n     * StringUtils.center(\"\", 4, \" \")     = \"    \"\n     * StringUtils.center(\"ab\", -1, \" \")  = \"ab\"\n     * StringUtils.center(\"ab\", 4, \" \")   = \" ab\"\n     * StringUtils.center(\"abcd\", 2, \" \") = \"abcd\"\n     * StringUtils.center(\"a\", 4, \" \")    = \" a  \"\n     * StringUtils.center(\"a\", 4, \"yz\")   = \"yayz\"\n     * StringUtils.center(\"abc\", 7, null) = \"  abc  \"\n     * StringUtils.center(\"abc\", 7, \"\")   = \"  abc  \"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @param padStr  the String to pad the new String with, must not be null or empty\n     * @return centered String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if padStr is <code>null</code> or empty\n     */ [189217,190430]",
      "dest": "block_comment:     \n     * <p>Centers a String in a larger String of size <code>size</code>.\n     * Uses a supplied String as the value to pad the String with.</p>\n     *\n     * <p>If the size is less than the String length, the String is returned.\n     * A <code>null</code> String returns <code>null</code>.\n     * A negative size is treated as zero.</p>\n     *\n     * <pre>\n     * StringUtils.center(null, *, *)     = null\n     * StringUtils.center(\"\", 4, \" \")     = \"    \"\n     * StringUtils.center(\"ab\", -1, \" \")  = \"ab\"\n     * StringUtils.center(\"ab\", 4, \" \")   = \" ab\"\n     * StringUtils.center(\"abcd\", 2, \" \") = \"abcd\"\n     * StringUtils.center(\"a\", 4, \" \")    = \" a  \"\n     * StringUtils.center(\"a\", 4, \"yz\")   = \"yayz\"\n     * StringUtils.center(\"abc\", 7, null) = \"  abc  \"\n     * StringUtils.center(\"abc\", 7, \"\")   = \"  abc  \"\n     * </pre>\n     *\n     * @param str  the String to center, may be null\n     * @param size  the int size of new String, negative treated as zero\n     * @param padStr  the String to pad the new String with, must not be null or empty\n     * @return centered String, <code>null</code> if null String input\n     * @throws IllegalArgumentException if padStr is <code>null</code> or empty\n     */ [190711,191924]"
    },
    {
      "src": "line_comment: // Left/Right/Mid [76289,76306]",
      "dest": "line_comment: // Left/Right/Mid [77783,77800]"
    },
    {
      "src": "binary_expression [244235,244265]",
      "dest": "binary_expression [245729,245759]"
    },
    {
      "src": "identifier: isWhitespace [18660,18672]",
      "dest": "identifier: isWhitespace [18660,18672]"
    },
    {
      "src": "comparison_operator: == [159455,159457]",
      "dest": "comparison_operator: == [160949,160951]"
    },
    {
      "src": "assignment_expression [198601,198631]",
      "dest": "assignment_expression [200095,200125]"
    },
    {
      "src": "affectation_operator: = [118649,118650]",
      "dest": "affectation_operator: = [120143,120144]"
    },
    {
      "src": "binary_expression [128006,128022]",
      "dest": "binary_expression [129500,129516]"
    },
    {
      "src": "binary_expression [36107,36118]",
      "dest": "binary_expression [36107,36118]"
    },
    {
      "src": "identifier: i [53217,53218]",
      "dest": "identifier: i [53217,53218]"
    },
    {
      "src": "identifier: str [83056,83059]",
      "dest": "identifier: str [84550,84553]"
    },
    {
      "src": "field_access [54669,54687]",
      "dest": "field_access [54701,54719]"
    },
    {
      "src": "program [0,244453]",
      "dest": "program [0,245947]"
    },
    {
      "src": "visibility: public [30661,30667]",
      "dest": "visibility: public [30661,30667]"
    },
    {
      "src": "logical_operator: || [8722,8724]",
      "dest": "logical_operator: || [8722,8724]"
    },
    {
      "src": "method_declaration [209074,209406]",
      "dest": "method_declaration [210568,210900]"
    },
    {
      "src": "local_variable_declaration [131316,131363]",
      "dest": "local_variable_declaration [132810,132857]"
    },
    {
      "src": "block [127654,127691]",
      "dest": "block [129148,129185]"
    },
    {
      "src": "method_declaration [147038,147192]",
      "dest": "method_declaration [148532,148686]"
    },
    {
      "src": "method_invocation [162503,162575]",
      "dest": "method_invocation [163997,164069]"
    },
    {
      "src": "return_statement [196807,196828]",
      "dest": "return_statement [198301,198322]"
    },
    {
      "src": "argument_list [145543,145551]",
      "dest": "argument_list [147037,147045]"
    },
    {
      "src": "method_invocation [123235,123252]",
      "dest": "method_invocation [124729,124746]"
    },
    {
      "src": "method_invocation [123361,123393]",
      "dest": "method_invocation [124855,124887]"
    },
    {
      "src": "null_literal: null [15870,15874]",
      "dest": "null_literal: null [15870,15874]"
    },
    {
      "src": "type: String [81423,81429]",
      "dest": "type: String [82917,82923]"
    },
    {
      "src": "affectation_operator: = [175430,175431]",
      "dest": "affectation_operator: = [176924,176925]"
    },
    {
      "src": "expression_statement [236444,236451]",
      "dest": "expression_statement [237938,237945]"
    },
    {
      "src": "identifier: charAt [170268,170274]",
      "dest": "identifier: charAt [171762,171768]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> valid character array will return <code>false</code>.\n     * An empty CharSequence (length()=0) always returns <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsOnly(null, *)       = false\n     * StringUtils.containsOnly(*, null)       = false\n     * StringUtils.containsOnly(\"\", *)         = true\n     * StringUtils.containsOnly(\"ab\", '')      = false\n     * StringUtils.containsOnly(\"abab\", 'abc') = true\n     * StringUtils.containsOnly(\"ab1\", 'abc')  = false\n     * StringUtils.containsOnly(\"abz\", 'abc')  = false\n     * </pre>\n     *\n     * @param cs  the String to check, may be null\n     * @param valid  an array of valid chars, may be null\n     * @return true if it only contains valid chars and is non-null\n     */ [62781,63711]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only certain characters.</p>\n     *\n     * <p>A <code>null</code> CharSequence will return <code>false</code>.\n     * A <code>null</code> valid character array will return <code>false</code>.\n     * An empty CharSequence (length()=0) always returns <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.containsOnly(null, *)       = false\n     * StringUtils.containsOnly(*, null)       = false\n     * StringUtils.containsOnly(\"\", *)         = true\n     * StringUtils.containsOnly(\"ab\", '')      = false\n     * StringUtils.containsOnly(\"abab\", 'abc') = true\n     * StringUtils.containsOnly(\"ab1\", 'abc')  = false\n     * StringUtils.containsOnly(\"abz\", 'abc')  = false\n     * </pre>\n     *\n     * @param cs  the String to check, may be null\n     * @param valid  an array of valid chars, may be null\n     * @return true if it only contains valid chars and is non-null\n     */ [63828,64758]"
    },
    {
      "src": "identifier: add [106039,106042]",
      "dest": "identifier: add [107533,107536]"
    },
    {
      "src": "identifier: bufSize [127701,127708]",
      "dest": "identifier: bufSize [129195,129202]"
    },
    {
      "src": "block [70031,70351]",
      "dest": "block [71525,71845]"
    },
    {
      "src": "binary_expression [63949,63965]",
      "dest": "binary_expression [64996,65012]"
    },
    {
      "src": "binary_expression [54713,54722]",
      "dest": "binary_expression [54785,54794]"
    },
    {
      "src": "identifier: isNumeric [206825,206834]",
      "dest": "identifier: isNumeric [208319,208328]"
    },
    {
      "src": "comparison_operator: == [173335,173337]",
      "dest": "comparison_operator: == [174829,174831]"
    },
    {
      "src": "identifier: searchLen [60963,60972]",
      "dest": "identifier: searchLen [61382,61391]"
    },
    {
      "src": "assignment_expression [118735,118742]",
      "dest": "assignment_expression [120229,120236]"
    },
    {
      "src": "identifier: i [159530,159531]",
      "dest": "identifier: i [161024,161025]"
    },
    {
      "src": "block [57782,58369]",
      "dest": "block [54887,55331]"
    },
    {
      "src": "identifier: i [23242,23243]",
      "dest": "identifier: i [23242,23243]"
    },
    {
      "src": "method_invocation [57418,57449]",
      "dest": "method_invocation [57758,57789]"
    },
    {
      "src": "identifier: length [204355,204361]",
      "dest": "identifier: length [205849,205855]"
    },
    {
      "src": "identifier: charAt [137316,137322]",
      "dest": "identifier: charAt [138810,138816]"
    },
    {
      "src": "arithmetic_operator: - [168568,168569]",
      "dest": "arithmetic_operator: - [170062,170063]"
    },
    {
      "src": "block [193699,193802]",
      "dest": "block [195193,195296]"
    },
    {
      "src": "formal_parameters [28465,28491]",
      "dest": "formal_parameters [28465,28491]"
    },
    {
      "src": "identifier: i [204389,204390]",
      "dest": "identifier: i [205883,205884]"
    },
    {
      "src": "identifier: i [160541,160542]",
      "dest": "identifier: i [162035,162036]"
    },
    {
      "src": "argument_list [140396,140409]",
      "dest": "argument_list [141890,141903]"
    },
    {
      "src": "method_declaration [187688,187784]",
      "dest": "method_declaration [189182,189278]"
    },
    {
      "src": "return_statement [132529,132542]",
      "dest": "return_statement [134023,134036]"
    },
    {
      "src": "comparison_operator: != [89322,89324]",
      "dest": "comparison_operator: != [90816,90818]"
    },
    {
      "src": "modifiers [57318,57331]",
      "dest": "modifiers [54436,54449]"
    },
    {
      "src": "modifiers [49309,49322]",
      "dest": "modifiers [49309,49322]"
    },
    {
      "src": "method_invocation [137045,137057]",
      "dest": "method_invocation [138539,138551]"
    },
    {
      "src": "visibility: public [31791,31797]",
      "dest": "visibility: public [31791,31797]"
    },
    {
      "src": "comparison_operator: < [66649,66650]",
      "dest": "comparison_operator: < [67768,67769]"
    },
    {
      "src": "parenthesized_expression [57402,57450]",
      "dest": "parenthesized_expression [57742,57790]"
    },
    {
      "src": "argument_list [79993,79995]",
      "dest": "argument_list [81487,81489]"
    },
    {
      "src": "decimal_integer_literal: 1 [228605,228606]",
      "dest": "decimal_integer_literal: 1 [230099,230100]"
    },
    {
      "src": "static: static [120404,120410]",
      "dest": "static: static [121898,121904]"
    },
    {
      "src": "identifier: strOffset [244317,244326]",
      "dest": "identifier: strOffset [245811,245820]"
    },
    {
      "src": "identifier: cs [9648,9650]",
      "dest": "identifier: cs [9648,9650]"
    },
    {
      "src": "affectation_operator: = [49572,49573]",
      "dest": "affectation_operator: = [49572,49573]"
    },
    {
      "src": "field_access [23060,23071]",
      "dest": "field_access [23060,23071]"
    },
    {
      "src": "expression_statement [162068,162090]",
      "dest": "expression_statement [163562,163584]"
    },
    {
      "src": "argument_list [244441,244443]",
      "dest": "argument_list [245935,245937]"
    },
    {
      "src": "block [233776,236619]",
      "dest": "block [235270,238113]"
    },
    {
      "src": "argument_list [87760,87775]",
      "dest": "argument_list [89254,89269]"
    },
    {
      "src": "identifier: cs2 [27526,27529]",
      "dest": "identifier: cs2 [27526,27529]"
    },
    {
      "src": "affectation_operator: = [186123,186124]",
      "dest": "affectation_operator: = [187617,187618]"
    },
    {
      "src": "method_declaration [65103,65324]",
      "dest": "method_declaration [66150,66371]"
    },
    {
      "src": "decimal_integer_literal: 0 [198386,198387]",
      "dest": "decimal_integer_literal: 0 [199880,199881]"
    },
    {
      "src": "false: false [201042,201047]",
      "dest": "false: false [202536,202541]"
    },
    {
      "src": "identifier: se [26308,26310]",
      "dest": "identifier: se [26308,26310]"
    },
    {
      "src": "method_invocation [20337,20380]",
      "dest": "method_invocation [20337,20380]"
    },
    {
      "src": "variable_declarator [61069,61086]",
      "dest": "variable_declarator [61528,61545]"
    },
    {
      "src": "modifiers [54436,54449]",
      "dest": "modifiers [57664,57677]"
    },
    {
      "src": "argument_list [223864,223876]",
      "dest": "argument_list [225358,225370]"
    },
    {
      "src": "argument_list [131631,131633]",
      "dest": "argument_list [133125,133127]"
    },
    {
      "src": "parenthesized_expression [20322,20381]",
      "dest": "parenthesized_expression [20322,20381]"
    },
    {
      "src": "update_expression [161498,161501]",
      "dest": "update_expression [162992,162995]"
    },
    {
      "src": "parenthesized_expression [18840,18921]",
      "dest": "parenthesized_expression [18840,18921]"
    },
    {
      "src": "affectation_operator: = [91364,91365]",
      "dest": "affectation_operator: = [92858,92859]"
    },
    {
      "src": "type: String [68059,68065]",
      "dest": "type: String [69553,69559]"
    },
    {
      "src": "variable_declarator [215691,215723]",
      "dest": "variable_declarator [217185,217217]"
    },
    {
      "src": "switch_expression [174833,175744]",
      "dest": "switch_expression [176327,177238]"
    },
    {
      "src": "block [77426,77461]",
      "dest": "block [78920,78955]"
    },
    {
      "src": "identifier: chars [145699,145704]",
      "dest": "identifier: chars [147193,147198]"
    },
    {
      "src": "identifier: indexOf [150020,150027]",
      "dest": "identifier: indexOf [151514,151521]"
    },
    {
      "src": "identifier: strip [13676,13681]",
      "dest": "identifier: strip [13676,13681]"
    },
    {
      "src": "method_invocation [111342,111379]",
      "dest": "method_invocation [112836,112873]"
    },
    {
      "src": "type: char[] [175251,175257]",
      "dest": "type: char[] [176745,176751]"
    },
    {
      "src": "identifier: separator [86475,86484]",
      "dest": "identifier: separator [87969,87978]"
    },
    {
      "src": "if_statement [178016,178135]",
      "dest": "if_statement [179510,179629]"
    },
    {
      "src": "identifier: end [76272,76275]",
      "dest": "identifier: end [77766,77769]"
    },
    {
      "src": "method_invocation [18497,18509]",
      "dest": "method_invocation [18497,18509]"
    },
    {
      "src": "identifier: i [111312,111313]",
      "dest": "identifier: i [112806,112807]"
    },
    {
      "src": "comparison_operator: == [20195,20197]",
      "dest": "comparison_operator: == [20195,20197]"
    },
    {
      "src": "identifier: str [198165,198168]",
      "dest": "identifier: str [199659,199662]"
    },
    {
      "src": "method_invocation [202047,202058]",
      "dest": "method_invocation [203541,203552]"
    },
    {
      "src": "line_comment: // see if we need to keep searching for this [159663,159707]",
      "dest": "line_comment: // see if we need to keep searching for this [161157,161201]"
    },
    {
      "src": "method_invocation [190840,190867]",
      "dest": "method_invocation [192334,192361]"
    },
    {
      "src": "parenthesized_expression [225083,225111]",
      "dest": "parenthesized_expression [226577,226605]"
    },
    {
      "src": "identifier: list [111282,111286]",
      "dest": "identifier: list [112776,112780]"
    },
    {
      "src": "formal_parameter [171708,171718]",
      "dest": "formal_parameter [173202,173212]"
    },
    {
      "src": "block [141645,141868]",
      "dest": "block [143139,143362]"
    },
    {
      "src": "break_statement [228779,228785]",
      "dest": "break_statement [230273,230279]"
    },
    {
      "src": "identifier: lastIdx [173394,173401]",
      "dest": "identifier: lastIdx [174888,174895]"
    },
    {
      "src": "binary_expression [118515,118557]",
      "dest": "binary_expression [120009,120051]"
    },
    {
      "src": "method_invocation [185823,185841]",
      "dest": "method_invocation [187317,187335]"
    },
    {
      "src": "formal_parameter [181356,181366]",
      "dest": "formal_parameter [182850,182860]"
    },
    {
      "src": "type: int [225154,225157]",
      "dest": "type: int [226648,226651]"
    },
    {
      "src": "type: String [123829,123835]",
      "dest": "type: String [125323,125329]"
    },
    {
      "src": "static: static [103057,103063]",
      "dest": "static: static [104551,104557]"
    },
    {
      "src": "identifier: isEmpty [62354,62361]",
      "dest": "identifier: isEmpty [63093,63100]"
    },
    {
      "src": "method_invocation [215733,215757]",
      "dest": "method_invocation [217227,217251]"
    },
    {
      "src": "comparison_operator: == [81592,81594]",
      "dest": "comparison_operator: == [83086,83088]"
    },
    {
      "src": "argument_list [236112,236117]",
      "dest": "argument_list [237606,237611]"
    },
    {
      "src": "argument_list [207018,207032]",
      "dest": "argument_list [208512,208526]"
    },
    {
      "src": "identifier: length [104248,104254]",
      "dest": "identifier: length [105742,105748]"
    },
    {
      "src": "identifier: repeat [157918,157924]",
      "dest": "identifier: repeat [159412,159418]"
    },
    {
      "src": "block [212165,212214]",
      "dest": "block [213659,213708]"
    },
    {
      "src": "if_statement [132423,132481]",
      "dest": "if_statement [133917,133975]"
    },
    {
      "src": "argument_list [131568,131578]",
      "dest": "argument_list [133062,133072]"
    },
    {
      "src": "true: true [227320,227324]",
      "dest": "true: true [228814,228818]"
    },
    {
      "src": "formal_parameter [212950,212967]",
      "dest": "formal_parameter [214444,214461]"
    },
    {
      "src": "binary_expression [235210,235216]",
      "dest": "binary_expression [236704,236710]"
    },
    {
      "src": "block [54502,55033]",
      "dest": "block [54502,55379]"
    },
    {
      "src": "variable_declarator [110711,110720]",
      "dest": "variable_declarator [112205,112214]"
    },
    {
      "src": "type: boolean [68021,68028]",
      "dest": "type: boolean [69515,69522]"
    },
    {
      "src": "identifier: tokenStart [123901,123911]",
      "dest": "identifier: tokenStart [125395,125405]"
    },
    {
      "src": "array_access [145789,145797]",
      "dest": "array_access [147283,147291]"
    },
    {
      "src": "variable_declarator [211282,211298]",
      "dest": "variable_declarator [212776,212792]"
    },
    {
      "src": "type: int [60926,60929]",
      "dest": "type: int [61313,61316]"
    },
    {
      "src": "identifier: chs [137297,137300]",
      "dest": "identifier: chs [138791,138794]"
    },
    {
      "src": "identifier: m [235488,235489]",
      "dest": "identifier: m [236982,236983]"
    },
    {
      "src": "if_statement [166330,166390]",
      "dest": "if_statement [167824,167884]"
    },
    {
      "src": "identifier: smallestIndexOfDiff [231694,231713]",
      "dest": "identifier: smallestIndexOfDiff [233188,233207]"
    },
    {
      "src": "type: String [152565,152571]",
      "dest": "type: String [154059,154065]"
    },
    {
      "src": "identifier: iterator [134077,134085]",
      "dest": "identifier: iterator [135571,135579]"
    },
    {
      "src": "identifier: replaceEach [157799,157810]",
      "dest": "identifier: replaceEach [159293,159304]"
    },
    {
      "src": "argument_list [54549,54562]",
      "dest": "argument_list [54549,54562]"
    },
    {
      "src": "modifiers [136139,136152]",
      "dest": "modifiers [137633,137646]"
    },
    {
      "src": "identifier: center [188839,188845]",
      "dest": "identifier: center [190333,190339]"
    },
    {
      "src": "method_invocation [208229,208241]",
      "dest": "method_invocation [209723,209735]"
    },
    {
      "src": "method_invocation [42369,42406]",
      "dest": "method_invocation [42369,42406]"
    },
    {
      "src": "identifier: length [145705,145711]",
      "dest": "identifier: length [147199,147205]"
    },
    {
      "src": "type: CharSequence [27452,27464]",
      "dest": "type: CharSequence [27452,27464]"
    },
    {
      "src": "arithmetic_operator: + [91528,91529]",
      "dest": "arithmetic_operator: + [93022,93023]"
    },
    {
      "src": "parenthesized_expression [214570,214583]",
      "dest": "parenthesized_expression [216064,216077]"
    },
    {
      "src": "argument_list [91491,91503]",
      "dest": "argument_list [92985,92997]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [6119,6134]",
      "dest": "identifier: INDEX_NOT_FOUND [6119,6134]"
    },
    {
      "src": "identifier: lastIdx [173148,173155]",
      "dest": "identifier: lastIdx [174642,174649]"
    },
    {
      "src": "comparison_operator: != [123779,123781]",
      "dest": "comparison_operator: != [125273,125275]"
    },
    {
      "src": "type: int [162254,162257]",
      "dest": "type: int [163748,163751]"
    },
    {
      "src": "type: boolean [65117,65124]",
      "dest": "type: boolean [66164,66171]"
    },
    {
      "src": "identifier: search [70092,70098]",
      "dest": "identifier: search [71586,71592]"
    },
    {
      "src": "method_invocation [111282,111315]",
      "dest": "method_invocation [112776,112809]"
    },
    {
      "src": "type: char [170040,170044]",
      "dest": "type: char [171534,171538]"
    },
    {
      "src": "return_statement [130789,130801]",
      "dest": "return_statement [132283,132295]"
    },
    {
      "src": "affectation_operator: = [174949,174950]",
      "dest": "affectation_operator: = [176443,176444]"
    },
    {
      "src": "parenthesized_expression [89181,89227]",
      "dest": "parenthesized_expression [90675,90721]"
    },
    {
      "src": "line_comment: // length of s [235139,235153]",
      "dest": "line_comment: // length of s [236633,236647]"
    },
    {
      "src": "\": \" [25426,25427]",
      "dest": "\": \" [25426,25427]"
    },
    {
      "src": "identifier: add [105942,105945]",
      "dest": "identifier: add [107436,107439]"
    },
    {
      "src": "logical_operator: && [119168,119170]",
      "dest": "logical_operator: && [120662,120664]"
    },
    {
      "src": "identifier: bufSize [131067,131074]",
      "dest": "identifier: bufSize [132561,132568]"
    },
    {
      "src": "null_literal: null [81519,81523]",
      "dest": "null_literal: null [83013,83017]"
    },
    {
      "src": "identifier: stripChars [18588,18598]",
      "dest": "identifier: stripChars [18588,18598]"
    },
    {
      "src": "affectation_operator: = [160619,160620]",
      "dest": "affectation_operator: = [162113,162114]"
    },
    {
      "src": "field_access [25027,25036]",
      "dest": "field_access [25027,25036]"
    },
    {
      "src": "comparison_operator: != [131531,131533]",
      "dest": "comparison_operator: != [133025,133027]"
    },
    {
      "src": "decimal_integer_literal: 0 [7491,7492]",
      "dest": "decimal_integer_literal: 0 [7491,7492]"
    },
    {
      "src": "binary_expression [185570,185579]",
      "dest": "binary_expression [187064,187073]"
    },
    {
      "src": "formal_parameters [165514,165567]",
      "dest": "formal_parameters [167008,167061]"
    },
    {
      "src": "arithmetic_operator: - [148368,148369]",
      "dest": "arithmetic_operator: - [149862,149863]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if a CharSequence is not empty (\"\"), not null and not whitespace only.</p>\n     *\n     * <pre>\n     * StringUtils.isNotBlank(null)      = false\n     * StringUtils.isNotBlank(\"\")        = false\n     * StringUtils.isNotBlank(\" \")       = false\n     * StringUtils.isNotBlank(\"bob\")     = true\n     * StringUtils.isNotBlank(\"  bob  \") = true\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if the CharSequence is\n     *  not empty and not null and not whitespace\n     * @since 2.0\n     */ [8987,9555]",
      "dest": "block_comment:     \n     * <p>Checks if a CharSequence is not empty (\"\"), not null and not whitespace only.</p>\n     *\n     * <pre>\n     * StringUtils.isNotBlank(null)      = false\n     * StringUtils.isNotBlank(\"\")        = false\n     * StringUtils.isNotBlank(\" \")       = false\n     * StringUtils.isNotBlank(\"bob\")     = true\n     * StringUtils.isNotBlank(\"  bob  \") = true\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if the CharSequence is\n     *  not empty and not null and not whitespace\n     * @since 2.0\n     */ [8987,9555]"
    },
    {
      "src": "\": \" [220057,220058]",
      "dest": "\": \" [221551,221552]"
    },
    {
      "src": "formal_parameter [157845,157869]",
      "dest": "formal_parameter [159339,159363]"
    },
    {
      "src": "argument_list [66696,66699]",
      "dest": "argument_list [67815,67818]"
    },
    {
      "src": "identifier: CharSequenceUtils [186645,186662]",
      "dest": "identifier: CharSequenceUtils [188139,188156]"
    },
    {
      "src": "block [166344,166390]",
      "dest": "block [167838,167884]"
    },
    {
      "src": "method_declaration [219315,220343]",
      "dest": "method_declaration [220809,221837]"
    },
    {
      "src": "formal_parameter [167973,167987]",
      "dest": "formal_parameter [169467,169481]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [18904,18919]",
      "dest": "identifier: INDEX_NOT_FOUND [18904,18919]"
    },
    {
      "src": "affectation_operator: = [176873,176874]",
      "dest": "affectation_operator: = [178367,178368]"
    },
    {
      "src": "variable_declarator [178157,178179]",
      "dest": "variable_declarator [179651,179673]"
    },
    {
      "src": "method_invocation [170264,170283]",
      "dest": "method_invocation [171758,171777]"
    },
    {
      "src": "expression_statement [161208,161262]",
      "dest": "expression_statement [162702,162756]"
    },
    {
      "src": "assignment_expression [227721,227741]",
      "dest": "assignment_expression [229215,229235]"
    },
    {
      "src": "array_access [131188,131205]",
      "dest": "array_access [132682,132699]"
    },
    {
      "src": "constructor_declaration [6610,6655]",
      "dest": "constructor_declaration [6610,6655]"
    },
    {
      "src": "null_literal: null [183949,183953]",
      "dest": "null_literal: null [185443,185447]"
    },
    {
      "src": "identifier: len [168367,168370]",
      "dest": "identifier: len [169861,169864]"
    },
    {
      "src": "false: false [238146,238151]",
      "dest": "false: false [239640,239645]"
    },
    {
      "src": "modifiers [198128,198141]",
      "dest": "modifiers [199622,199635]"
    },
    {
      "src": "variable_declarator [228422,228436]",
      "dest": "variable_declarator [229916,229930]"
    },
    {
      "src": "type: String [45052,45058]",
      "dest": "type: String [45052,45058]"
    },
    {
      "src": "type: int [235119,235122]",
      "dest": "type: int [236613,236616]"
    },
    {
      "src": "identifier: stringPos [228470,228479]",
      "dest": "identifier: stringPos [229964,229973]"
    },
    {
      "src": "binary_expression [36107,36139]",
      "dest": "binary_expression [36107,36139]"
    },
    {
      "src": "binary_expression [236268,236271]",
      "dest": "binary_expression [237762,237765]"
    },
    {
      "src": "affectation_operator: = [202079,202080]",
      "dest": "affectation_operator: = [203573,203574]"
    },
    {
      "src": "return_statement [61266,61275]",
      "dest": "return_statement [62005,62014]"
    },
    {
      "src": "local_variable_declaration [23008,23020]",
      "dest": "local_variable_declaration [23008,23020]"
    },
    {
      "src": "return_statement [196709,196721]",
      "dest": "return_statement [198203,198215]"
    },
    {
      "src": "method_invocation [144594,144609]",
      "dest": "method_invocation [146088,146103]"
    },
    {
      "src": "identifier: s [235414,235415]",
      "dest": "identifier: s [236908,236909]"
    },
    {
      "src": "identifier: str [14717,14720]",
      "dest": "identifier: str [14717,14720]"
    },
    {
      "src": "block [195453,195810]",
      "dest": "block [196947,197304]"
    },
    {
      "src": "binary_expression [57852,57880]",
      "dest": "binary_expression [54957,54985]"
    },
    {
      "src": "visibility: public [52950,52956]",
      "dest": "visibility: public [52950,52956]"
    },
    {
      "src": "line_comment: //----------------------------------------------------------------------- [28594,28667]",
      "dest": "line_comment: //----------------------------------------------------------------------- [28594,28667]"
    },
    {
      "src": "identifier: str [185510,185513]",
      "dest": "identifier: str [187004,187007]"
    },
    {
      "src": "for_statement [186063,186160]",
      "dest": "for_statement [187557,187654]"
    },
    {
      "src": "decimal_integer_literal: 0 [49808,49809]",
      "dest": "decimal_integer_literal: 0 [49808,49809]"
    },
    {
      "src": "\": \" [25264,25265]",
      "dest": "\": \" [25264,25265]"
    },
    {
      "src": "identifier: i [210297,210298]",
      "dest": "identifier: i [211791,211792]"
    },
    {
      "src": "block [200988,201104]",
      "dest": "block [202482,202598]"
    },
    {
      "src": "identifier: pos [91171,91174]",
      "dest": "identifier: pos [92665,92668]"
    },
    {
      "src": "type: CharSequence [27434,27446]",
      "dest": "type: CharSequence [27434,27446]"
    },
    {
      "src": "identifier: ch [198628,198630]",
      "dest": "identifier: ch [200122,200124]"
    },
    {
      "src": "affectation_operator: = [61111,61112]",
      "dest": "affectation_operator: = [61570,61571]"
    },
    {
      "src": "identifier: csLength [57501,57509]",
      "dest": "identifier: csLength [57841,57849]"
    },
    {
      "src": "comparison_operator: == [244186,244188]",
      "dest": "comparison_operator: == [245680,245682]"
    },
    {
      "src": "assignment_expression [117940,117956]",
      "dest": "assignment_expression [119434,119450]"
    },
    {
      "src": "formal_parameters [27433,27469]",
      "dest": "formal_parameters [27433,27469]"
    },
    {
      "src": "for_statement [205791,205944]",
      "dest": "for_statement [207285,207438]"
    },
    {
      "src": "identifier: cs [54753,54755]",
      "dest": "identifier: cs [58057,58059]"
    },
    {
      "src": "identifier: str [190664,190667]",
      "dest": "identifier: str [192158,192161]"
    },
    {
      "src": "decimal_integer_literal: 0 [195717,195718]",
      "dest": "decimal_integer_literal: 0 [197211,197212]"
    },
    {
      "src": "comparison_operator: == [126149,126151]",
      "dest": "comparison_operator: == [127643,127645]"
    },
    {
      "src": "type: boolean [7412,7419]",
      "dest": "type: boolean [7412,7419]"
    },
    {
      "src": "return_statement [209166,209179]",
      "dest": "return_statement [210660,210673]"
    },
    {
      "src": "argument_list [118150,118175]",
      "dest": "argument_list [119644,119669]"
    },
    {
      "src": "if_statement [53031,53106]",
      "dest": "if_statement [53031,53106]"
    },
    {
      "src": "comparison_operator: > [168365,168366]",
      "dest": "comparison_operator: > [169859,169860]"
    },
    {
      "src": "binary_expression [168556,168567]",
      "dest": "binary_expression [170050,170061]"
    },
    {
      "src": "identifier: searchStr [47815,47824]",
      "dest": "identifier: searchStr [47815,47824]"
    },
    {
      "src": "true: true [118378,118382]",
      "dest": "true: true [119872,119876]"
    },
    {
      "src": "type: int [235756,235759]",
      "dest": "type: int [237250,237253]"
    },
    {
      "src": "catch_formal_parameter [25999,26046]",
      "dest": "catch_formal_parameter [25999,26046]"
    },
    {
      "src": "if_statement [185858,186222]",
      "dest": "if_statement [187352,187716]"
    },
    {
      "src": "decimal_integer_literal: 1 [174686,174687]",
      "dest": "decimal_integer_literal: 1 [176180,176181]"
    },
    {
      "src": "line_comment: // count the replacement text elements that are larger than their corresponding text being replaced [160330,160429]",
      "dest": "line_comment: // count the replacement text elements that are larger than their corresponding text being replaced [161824,161923]"
    },
    {
      "src": "local_variable_declaration [145684,145694]",
      "dest": "local_variable_declaration [147178,147188]"
    },
    {
      "src": "parenthesized_expression [20528,20538]",
      "dest": "parenthesized_expression [20528,20538]"
    },
    {
      "src": "logical_operator: || [145529,145531]",
      "dest": "logical_operator: || [147023,147025]"
    },
    {
      "src": "identifier: splitPreserveAllTokens [115436,115458]",
      "dest": "identifier: splitPreserveAllTokens [116930,116952]"
    },
    {
      "src": "local_variable_declaration [132561,132592]",
      "dest": "local_variable_declaration [134055,134086]"
    },
    {
      "src": "visibility: public [231049,231055]",
      "dest": "visibility: public [232543,232549]"
    },
    {
      "src": "identifier: pads [180314,180318]",
      "dest": "identifier: pads [181808,181812]"
    },
    {
      "src": "identifier: j [235977,235978]",
      "dest": "identifier: j [237471,237472]"
    },
    {
      "src": "local_variable_declaration [36334,36389]",
      "dest": "local_variable_declaration [36334,36389]"
    },
    {
      "src": "identifier: pads [190690,190694]",
      "dest": "identifier: pads [192184,192188]"
    },
    {
      "src": "return_statement [162462,162476]",
      "dest": "return_statement [163956,163970]"
    },
    {
      "src": "logical_operator: && [57881,57883]",
      "dest": "logical_operator: && [54986,54988]"
    },
    {
      "src": "local_variable_declaration [241157,241196]",
      "dest": "local_variable_declaration [242651,242690]"
    },
    {
      "src": "identifier: startPos [49383,49391]",
      "dest": "identifier: startPos [49383,49391]"
    },
    {
      "src": "type: String [221906,221912]",
      "dest": "type: String [223400,223406]"
    },
    {
      "src": "identifier: str [49834,49837]",
      "dest": "identifier: str [49834,49837]"
    },
    {
      "src": "parenthesized_expression [18587,18607]",
      "dest": "parenthesized_expression [18587,18607]"
    },
    {
      "src": "identifier: pads [185862,185866]",
      "dest": "identifier: pads [187356,187360]"
    },
    {
      "src": "block [132445,132481]",
      "dest": "block [133939,133975]"
    },
    {
      "src": ":: : [36371,36372]",
      "dest": ":: : [36371,36372]"
    },
    {
      "src": "return_statement [190877,190888]",
      "dest": "return_statement [192371,192382]"
    },
    {
      "src": "method_invocation [65275,65317]",
      "dest": "method_invocation [66322,66364]"
    },
    {
      "src": "method_invocation [76251,76276]",
      "dest": "method_invocation [77745,77770]"
    },
    {
      "src": "visibility: public [54436,54442]",
      "dest": "visibility: public [57664,57670]"
    },
    {
      "src": "if_statement [49627,49692]",
      "dest": "if_statement [49627,49692]"
    },
    {
      "src": "array_access [160621,160639]",
      "dest": "array_access [162115,162133]"
    },
    {
      "src": "identifier: array [126106,126111]",
      "dest": "identifier: array [127600,127605]"
    },
    {
      "src": "object_creation_expression [25565,25651]",
      "dest": "object_creation_expression [25565,25651]"
    },
    {
      "src": "identifier: i [175615,175616]",
      "dest": "identifier: i [177109,177110]"
    },
    {
      "src": "method_invocation [30821,30854]",
      "dest": "method_invocation [30821,30854]"
    },
    {
      "src": "logical_operator: || [170100,170102]",
      "dest": "logical_operator: || [171594,171596]"
    },
    {
      "src": "binary_expression [110567,110575]",
      "dest": "binary_expression [112061,112069]"
    },
    {
      "src": "identifier: lastIndexOfAny [71755,71769]",
      "dest": "identifier: lastIndexOfAny [73249,73263]"
    },
    {
      "src": "block [168316,168348]",
      "dest": "block [169810,169842]"
    },
    {
      "src": "catch_formal_parameter [25353,25379]",
      "dest": "catch_formal_parameter [25353,25379]"
    },
    {
      "src": "identifier: length [81583,81589]",
      "dest": "identifier: length [83077,83083]"
    },
    {
      "src": "identifier: sz [205765,205767]",
      "dest": "identifier: sz [207259,207261]"
    },
    {
      "src": "type: int [190651,190654]",
      "dest": "type: int [192145,192148]"
    },
    {
      "src": "binary_expression [219656,219677]",
      "dest": "binary_expression [221150,221171]"
    },
    {
      "src": "identifier: text [150385,150389]",
      "dest": "identifier: text [151879,151883]"
    },
    {
      "src": "decimal_integer_literal: 0 [210286,210287]",
      "dest": "decimal_integer_literal: 0 [211780,211781]"
    },
    {
      "src": "return_statement [39463,39486]",
      "dest": "return_statement [39463,39486]"
    },
    {
      "src": "identifier: d [236266,236267]",
      "dest": "identifier: d [237760,237761]"
    },
    {
      "src": "identifier: separatorChars [115537,115551]",
      "dest": "identifier: separatorChars [117031,117045]"
    },
    {
      "src": "type: int [110700,110703]",
      "dest": "type: int [112194,112197]"
    },
    {
      "src": "method_declaration [148227,148378]",
      "dest": "method_declaration [149721,149872]"
    },
    {
      "src": "argument_list [196931,196934]",
      "dest": "argument_list [198425,198428]"
    },
    {
      "src": "affectation_operator: = [228603,228604]",
      "dest": "affectation_operator: = [230097,230098]"
    },
    {
      "src": "local_variable_declaration [235872,235881]",
      "dest": "local_variable_declaration [237366,237375]"
    },
    {
      "src": "new: new [124225,124228]",
      "dest": "new: new [125719,125722]"
    },
    {
      "src": "type: StringBuilder [175561,175574]",
      "dest": "type: StringBuilder [177055,177068]"
    },
    {
      "src": "type: int [91212,91215]",
      "dest": "type: int [92706,92709]"
    },
    {
      "src": "parenthesized_expression [132898,132918]",
      "dest": "parenthesized_expression [134392,134412]"
    },
    {
      "src": "increment_operator: ++ [54725,54727]",
      "dest": "increment_operator: ++ [58029,58031]"
    },
    {
      "src": "affectation_operator: = [60936,60937]",
      "dest": "affectation_operator: = [61323,61324]"
    },
    {
      "src": "return_statement [89242,89254]",
      "dest": "return_statement [90736,90748]"
    },
    {
      "src": "identifier: trimToEmpty [12630,12641]",
      "dest": "identifier: trimToEmpty [12630,12641]"
    },
    {
      "src": "comparison_operator: != [225256,225258]",
      "dest": "comparison_operator: != [226750,226752]"
    },
    {
      "src": "visibility: public [22932,22938]",
      "dest": "visibility: public [22932,22938]"
    },
    {
      "src": "null_literal: null [10693,10697]",
      "dest": "null_literal: null [10693,10697]"
    },
    {
      "src": "identifier: StringUtils [6617,6628]",
      "dest": "identifier: StringUtils [6617,6628]"
    },
    {
      "src": "return_statement [228165,228188]",
      "dest": "return_statement [229659,229682]"
    },
    {
      "src": "string_fragment: Cannot pad a negative amount:  [178083,178113]",
      "dest": "string_fragment: Cannot pad a negative amount:  [179577,179607]"
    },
    {
      "src": "comparison_operator: == [244152,244154]",
      "dest": "comparison_operator: == [245646,245648]"
    },
    {
      "src": "identifier: length [49885,49891]",
      "dest": "identifier: length [49885,49891]"
    },
    {
      "src": "expression_statement [190619,190632]",
      "dest": "expression_statement [192113,192126]"
    },
    {
      "src": "identifier: toCharArray [68212,68223]",
      "dest": "identifier: toCharArray [69706,69717]"
    },
    {
      "src": "identifier: indexOf [70172,70179]",
      "dest": "identifier: indexOf [71666,71673]"
    },
    {
      "src": "identifier: center [187709,187715]",
      "dest": "identifier: center [189203,189209]"
    },
    {
      "src": "return_statement [20247,20258]",
      "dest": "return_statement [20247,20258]"
    },
    {
      "src": "comparison_operator: <= [77418,77420]",
      "dest": "comparison_operator: <= [78912,78914]"
    },
    {
      "src": "local_variable_declaration [123262,123306]",
      "dest": "local_variable_declaration [124756,124800]"
    },
    {
      "src": "identifier: startPos [46705,46713]",
      "dest": "identifier: startPos [46705,46713]"
    },
    {
      "src": "modifiers [194458,194471]",
      "dest": "modifiers [195952,195965]"
    },
    {
      "src": "null_literal: null [244137,244141]",
      "dest": "null_literal: null [245631,245635]"
    },
    {
      "src": "increment_operator: ++ [127897,127899]",
      "dest": "increment_operator: ++ [129391,129393]"
    },
    {
      "src": "identifier: pos [123450,123453]",
      "dest": "identifier: pos [124944,124947]"
    },
    {
      "src": "argument_list [185485,185487]",
      "dest": "argument_list [186979,186981]"
    },
    {
      "src": "identifier: substring [170517,170526]",
      "dest": "identifier: substring [172011,172020]"
    },
    {
      "src": "block [219608,219643]",
      "dest": "block [221102,221137]"
    },
    {
      "src": "identifier: start [167993,167998]",
      "dest": "identifier: start [169487,169492]"
    },
    {
      "src": "return_statement [173370,173407]",
      "dest": "return_statement [174864,174901]"
    },
    {
      "src": "identifier: max [149843,149846]",
      "dest": "identifier: max [151337,151340]"
    },
    {
      "src": "identifier: j [54795,54796]",
      "dest": "identifier: j [54867,54868]"
    },
    {
      "src": "identifier: j [57752,57753]",
      "dest": "identifier: j [54860,54861]"
    },
    {
      "src": "affectation_operator: = [54790,54791]",
      "dest": "affectation_operator: = [58094,58095]"
    },
    {
      "src": "formal_parameters [171707,171737]",
      "dest": "formal_parameters [173201,173231]"
    },
    {
      "src": "type: int [188966,188969]",
      "dest": "type: int [190460,190463]"
    },
    {
      "src": "formal_parameter [224980,224996]",
      "dest": "formal_parameter [226474,226490]"
    },
    {
      "src": "method_declaration [136139,136332]",
      "dest": "method_declaration [137633,137826]"
    },
    {
      "src": "type: boolean [157910,157917]",
      "dest": "type: boolean [159404,159411]"
    },
    {
      "src": "binary_expression [161603,161630]",
      "dest": "binary_expression [163097,163124]"
    },
    {
      "src": "method_declaration [49309,49985]",
      "dest": "method_declaration [49309,49985]"
    },
    {
      "src": "binary_expression [150300,150307]",
      "dest": "binary_expression [151794,151801]"
    },
    {
      "src": "method_declaration [46493,46721]",
      "dest": "method_declaration [46493,46721]"
    },
    {
      "src": "binary_expression [110473,110484]",
      "dest": "binary_expression [111967,111978]"
    },
    {
      "src": "method_invocation [186029,186049]",
      "dest": "method_invocation [187523,187543]"
    },
    {
      "src": "block [187738,187784]",
      "dest": "block [189232,189278]"
    },
    {
      "src": "identifier: length [203191,203197]",
      "dest": "identifier: length [204685,204691]"
    },
    {
      "src": ":: : [27513,27514]",
      "dest": ":: : [27513,27514]"
    },
    {
      "src": "method_declaration [212903,213023]",
      "dest": "method_declaration [214397,214517]"
    },
    {
      "src": "return_statement [73493,73505]",
      "dest": "return_statement [74987,74999]"
    },
    {
      "src": "formal_parameter [66440,66458]",
      "dest": "formal_parameter [67487,67505]"
    },
    {
      "src": "identifier: searchStr [53267,53276]",
      "dest": "identifier: searchStr [53267,53276]"
    },
    {
      "src": "if_statement [58072,58184]",
      "dest": "if_statement [55105,55214]"
    },
    {
      "src": "method_invocation [144578,144590]",
      "dest": "method_invocation [146072,146084]"
    },
    {
      "src": "type: int [235523,235526]",
      "dest": "type: int [237017,237020]"
    },
    {
      "src": "\": \" [25323,25324]",
      "dest": "\": \" [25323,25324]"
    },
    {
      "src": "identifier: str [221955,221958]",
      "dest": "identifier: str [223449,223452]"
    },
    {
      "src": "block [109670,109731]",
      "dest": "block [111164,111225]"
    },
    {
      "src": "binary_expression [119150,119180]",
      "dest": "binary_expression [120644,120674]"
    },
    {
      "src": "argument_list [194610,194618]",
      "dest": "argument_list [196104,196112]"
    },
    {
      "src": "array_access [160525,160543]",
      "dest": "array_access [162019,162037]"
    },
    {
      "src": "method_invocation [129300,129339]",
      "dest": "method_invocation [130794,130833]"
    },
    {
      "src": "identifier: sz [202042,202044]",
      "dest": "identifier: sz [203536,203538]"
    },
    {
      "src": "visibility: public [182990,182996]",
      "dest": "visibility: public [184484,184490]"
    },
    {
      "src": "identifier: add [110939,110942]",
      "dest": "identifier: add [112433,112436]"
    },
    {
      "src": "identifier: csLen [66558,66563]",
      "dest": "identifier: csLen [67605,67610]"
    },
    {
      "src": "block [168102,168142]",
      "dest": "block [169596,169636]"
    },
    {
      "src": "affectation_operator: = [104759,104760]",
      "dest": "affectation_operator: = [106253,106254]"
    },
    {
      "src": "affectation_operator: = [134045,134046]",
      "dest": "affectation_operator: = [135539,135540]"
    },
    {
      "src": "identifier: cs1 [224975,224978]",
      "dest": "identifier: cs1 [226469,226472]"
    },
    {
      "src": "type: int [30675,30678]",
      "dest": "type: int [30675,30678]"
    },
    {
      "src": "argument_list [196871,196879]",
      "dest": "argument_list [198365,198373]"
    },
    {
      "src": "modifiers [93877,93890]",
      "dest": "modifiers [95371,95384]"
    },
    {
      "src": "null_literal: null [133910,133914]",
      "dest": "null_literal: null [135404,135408]"
    },
    {
      "src": "argument_list [84797,84808]",
      "dest": "argument_list [86291,86302]"
    },
    {
      "src": "decimal_integer_literal: 0 [173205,173206]",
      "dest": "decimal_integer_literal: 0 [174699,174700]"
    },
    {
      "src": "modifiers [35997,36011]",
      "dest": "modifiers [35997,36011]"
    },
    {
      "src": "binary_expression [175423,175428]",
      "dest": "binary_expression [176917,176922]"
    },
    {
      "src": "identifier: cs [203188,203190]",
      "dest": "identifier: cs [204682,204684]"
    },
    {
      "src": "block [64035,64072]",
      "dest": "block [65082,65119]"
    },
    {
      "src": "comparison_operator: < [137210,137211]",
      "dest": "comparison_operator: < [138704,138705]"
    },
    {
      "src": "block [137279,137340]",
      "dest": "block [138773,138834]"
    },
    {
      "src": "argument_list [25141,25153]",
      "dest": "argument_list [25141,25153]"
    },
    {
      "src": "false: false [204522,204527]",
      "dest": "false: false [206016,206021]"
    },
    {
      "src": "if_statement [91558,91614]",
      "dest": "if_statement [93052,93108]"
    },
    {
      "src": "argument_list [6646,6648]",
      "dest": "argument_list [6646,6648]"
    },
    {
      "src": "block [123546,123587]",
      "dest": "block [125040,125081]"
    },
    {
      "src": "identifier: searchChars [166029,166040]",
      "dest": "identifier: searchChars [167523,167534]"
    },
    {
      "src": "parenthesized_expression [166333,166343]",
      "dest": "parenthesized_expression [167827,167837]"
    },
    {
      "src": "type: StringBuilder [150371,150384]",
      "dest": "type: StringBuilder [151865,151878]"
    },
    {
      "src": "visibility: public [99648,99654]",
      "dest": "visibility: public [101142,101148]"
    },
    {
      "src": "decimal_integer_literal: 0 [244425,244426]",
      "dest": "decimal_integer_literal: 0 [245919,245920]"
    },
    {
      "src": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode letters or digits.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphanumeric(null)   = false\n     * StringUtils.isAlphanumeric(\"\")     = true\n     * StringUtils.isAlphanumeric(\"  \")   = false\n     * StringUtils.isAlphanumeric(\"abc\")  = true\n     * StringUtils.isAlphanumeric(\"ab c\") = false\n     * StringUtils.isAlphanumeric(\"ab2c\") = true\n     * StringUtils.isAlphanumeric(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains letters or digits,\n     *  and is non-null\n     */ [202273,203048]",
      "dest": "block_comment:     \n     * <p>Checks if the CharSequence contains only unicode letters or digits.</p>\n     *\n     * <p><code>null</code> will return <code>false</code>.\n     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n     *\n     * <pre>\n     * StringUtils.isAlphanumeric(null)   = false\n     * StringUtils.isAlphanumeric(\"\")     = true\n     * StringUtils.isAlphanumeric(\"  \")   = false\n     * StringUtils.isAlphanumeric(\"abc\")  = true\n     * StringUtils.isAlphanumeric(\"ab c\") = false\n     * StringUtils.isAlphanumeric(\"ab2c\") = true\n     * StringUtils.isAlphanumeric(\"ab-c\") = false\n     * </pre>\n     *\n     * @param cs  the CharSequence to check, may be null\n     * @return <code>true</code> if only contains letters or digits,\n     *  and is non-null\n     */ [203767,204542]"
    },
    {
      "src": "logical_operator: || [244142,244144]",
      "dest": "logical_operator: || [245636,245638]"
    },
    {
      "src": "method_invocation [236104,236117]",
      "dest": "method_invocation [237598,237611]"
    },
    {
      "src": "parenthesized_expression [209274,209323]",
      "dest": "parenthesized_expression [210768,210817]"
    },
    {
      "src": "identifier: length [235172,235178]",
      "dest": "identifier: length [236666,236672]"
    },
    {
      "src": "null_literal: null [161656,161660]",
      "dest": "null_literal: null [163150,163154]"
    },
    {
      "src": "if_statement [117662,119127]",
      "dest": "if_statement [119156,120621]"
    },
    {
      "src": "parenthesized_expression [135373,135391]",
      "dest": "parenthesized_expression [136867,136885]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [231281,231296]",
      "dest": "identifier: INDEX_NOT_FOUND [232775,232790]"
    },
    {
      "src": "decimal_integer_literal: 1 [116811,116812]",
      "dest": "decimal_integer_literal: 1 [118305,118306]"
    },
    {
      "src": "identifier: str [185837,185840]",
      "dest": "identifier: str [187331,187334]"
    },
    {
      "src": "method_invocation [225205,225217]",
      "dest": "method_invocation [226699,226711]"
    },
    {
      "src": "identifier: str [18800,18803]",
      "dest": "identifier: str [18800,18803]"
    },
    {
      "src": "identifier: i [210352,210353]",
      "dest": "identifier: i [211846,211847]"
    },
    {
      "src": "identifier: substring [143443,143452]",
      "dest": "identifier: substring [144937,144946]"
    },
    {
      "src": "identifier: str [190834,190837]",
      "dest": "identifier: str [192328,192331]"
    },
    {
      "src": "expression_statement [236035,236044]",
      "dest": "expression_statement [237529,237538]"
    },
    {
      "src": "type: int [20170,20173]",
      "dest": "type: int [20170,20173]"
    },
    {
      "src": "comparison_operator: >= [50971,50973]",
      "dest": "comparison_operator: >= [50971,50973]"
    },
    {
      "src": "block_comment:     \n     * <p>Reverses a String as per {@link StringBuilder#reverse()}.</p>\n     *\n     * <p>A <code>null</code> String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.reverse(null)  = null\n     * StringUtils.reverse(\"\")    = \"\"\n     * StringUtils.reverse(\"bat\") = \"tab\"\n     * </pre>\n     *\n     * @param str  the String to reverse, may be null\n     * @return the reversed String, <code>null</code> if null String input\n     */ [214061,214511]",
      "dest": "block_comment:     \n     * <p>Reverses a String as per {@link StringBuilder#reverse()}.</p>\n     *\n     * <p>A <code>null</code> String returns <code>null</code>.</p>\n     *\n     * <pre>\n     * StringUtils.reverse(null)  = null\n     * StringUtils.reverse(\"\")    = \"\"\n     * StringUtils.reverse(\"bat\") = \"tab\"\n     * </pre>\n     *\n     * @param str  the String to reverse, may be null\n     * @return the reversed String, <code>null</code> if null String input\n     */ [215555,216005]"
    },
    {
      "src": "argument_list [160964,160990]",
      "dest": "argument_list [162458,162484]"
    },
    {
      "src": "return_statement [187748,187778]",
      "dest": "return_statement [189242,189272]"
    },
    {
      "src": "static: static [15781,15787]",
      "dest": "static: static [15781,15787]"
    },
    {
      "src": "argument_list [193793,193795]",
      "dest": "argument_list [195287,195289]"
    },
    {
      "src": "logical_operator: || [149924,149926]",
      "dest": "logical_operator: || [151418,151420]"
    },
    {
      "src": "type: String [31817,31823]",
      "dest": "type: String [31817,31823]"
    },
    {
      "src": "comparison_operator: <= [53209,53211]",
      "dest": "comparison_operator: <= [53209,53211]"
    },
    {
      "src": "return_statement [140342,140353]",
      "dest": "return_statement [141836,141847]"
    },
    {
      "src": "modifiers [14677,14690]",
      "dest": "modifiers [14677,14690]"
    },
    {
      "src": "\": \" [25484,25485]",
      "dest": "\": \" [25484,25485]"
    },
    {
      "src": "comparison_operator: == [239825,239827]",
      "dest": "comparison_operator: == [241319,241321]"
    },
    {
      "src": "block [208192,208334]",
      "dest": "block [209686,209828]"
    },
    {
      "src": "comparison_operator: == [211391,211393]",
      "dest": "comparison_operator: == [212885,212887]"
    },
    {
      "src": "identifier: middle [221971,221977]",
      "dest": "identifier: middle [223465,223471]"
    },
    {
      "src": "expression_statement [117168,117185]",
      "dest": "expression_statement [118662,118679]"
    },
    {
      "src": "parenthesized_expression [231357,231374]",
      "dest": "parenthesized_expression [232851,232868]"
    },
    {
      "src": "identifier: pos [123434,123437]",
      "dest": "identifier: pos [124928,124931]"
    },
    {
      "src": "method_declaration [238045,238159]",
      "dest": "method_declaration [239539,239653]"
    },
    {
      "src": "local_variable_declaration [209198,209219]",
      "dest": "local_variable_declaration [210692,210713]"
    },
    {
      "src": "identifier: str [91478,91481]",
      "dest": "identifier: str [92972,92975]"
    },
    {
      "src": "identifier: length [36279,36285]",
      "dest": "identifier: length [36279,36285]"
    },
    {
      "src": "binary_expression [140295,140326]",
      "dest": "binary_expression [141789,141820]"
    },
    {
      "src": "binary_expression [231258,231296]",
      "dest": "binary_expression [232752,232790]"
    },
    {
      "src": "comparison_operator: == [104941,104943]",
      "dest": "comparison_operator: == [106435,106437]"
    },
    {
      "src": "identifier: strLen [18452,18458]",
      "dest": "identifier: strLen [18452,18458]"
    },
    {
      "src": "comparison_operator: == [20460,20462]",
      "dest": "comparison_operator: == [20460,20462]"
    },
    {
      "src": "identifier: separator [133801,133810]",
      "dest": "identifier: separator [135295,135304]"
    },
    {
      "src": "variable_declarator [174898,174916]",
      "dest": "variable_declarator [176392,176410]"
    },
    {
      "src": "formal_parameters [199737,199761]",
      "dest": "formal_parameters [201231,201255]"
    },
    {
      "src": "null_literal: null [223724,223728]",
      "dest": "null_literal: null [225218,225222]"
    },
    {
      "src": "method_invocation [219665,219677]",
      "dest": "method_invocation [221159,221171]"
    },
    {
      "src": "binary_expression [160500,160521]",
      "dest": "binary_expression [161994,162015]"
    },
    {
      "src": "return_statement [195632,195804]",
      "dest": "return_statement [197126,197298]"
    },
    {
      "src": "method_invocation [185744,185760]",
      "dest": "method_invocation [187238,187254]"
    },
    {
      "src": "method_invocation [47897,47948]",
      "dest": "method_invocation [47897,47948]"
    },
    {
      "src": "identifier: separator [98147,98156]",
      "dest": "identifier: separator [99641,99650]"
    },
    {
      "src": "identifier: endsWith [243517,243525]",
      "dest": "identifier: endsWith [245011,245019]"
    },
    {
      "src": "affectation_operator: = [123416,123417]",
      "dest": "affectation_operator: = [124910,124911]"
    },
    {
      "src": "method_invocation [186645,186673]",
      "dest": "method_invocation [188139,188167]"
    },
    {
      "src": "type: List<String> [91090,91102]",
      "dest": "type: List<String> [92584,92596]"
    },
    {
      "src": "local_variable_declaration [235756,235762]",
      "dest": "local_variable_declaration [237250,237256]"
    },
    {
      "src": "type: String [177932,177938]",
      "dest": "type: String [179426,179432]"
    },
    {
      "src": "block [43410,43457]",
      "dest": "block [43410,43457]"
    },
    {
      "src": "dimensions_expr [106420,106439]",
      "dest": "dimensions_expr [107914,107933]"
    },
    {
      "src": "false: false [98162,98167]",
      "dest": "false: false [99656,99661]"
    },
    {
      "src": "type: int [60959,60962]",
      "dest": "type: int [61378,61381]"
    },
    {
      "src": "type: String [115471,115477]",
      "dest": "type: String [116965,116971]"
    },
    {
      "src": "type: int [175611,175614]",
      "dest": "type: int [177105,177108]"
    },
    {
      "src": "affectation_operator: = [60973,60974]",
      "dest": "affectation_operator: = [61392,61393]"
    },
    {
      "src": "if_statement [132490,132552]",
      "dest": "if_statement [133984,134046]"
    },
    {
      "src": "identifier: str [190884,190887]",
      "dest": "identifier: str [192378,192381]"
    },
    {
      "src": "parenthesized_expression [227686,227702]",
      "dest": "parenthesized_expression [229180,229196]"
    },
    {
      "src": "identifier: Character [123361,123370]",
      "dest": "identifier: Character [124855,124864]"
    },
    {
      "src": "block [203107,203388]",
      "dest": "block [204601,204882]"
    },
    {
      "src": "logical_operator: || [241012,241014]",
      "dest": "logical_operator: || [242506,242508]"
    },
    {
      "src": "if_statement [127636,127691]",
      "dest": "if_statement [129130,129185]"
    },
    {
      "src": "block [159555,159596]",
      "dest": "block [161049,161090]"
    },
    {
      "src": "identifier: toTitleCase [195695,195706]",
      "dest": "identifier: toTitleCase [197189,197200]"
    },
    {
      "src": "method_declaration [182990,183088]",
      "dest": "method_declaration [184484,184582]"
    },
    {
      "src": "argument_list [104254,104256]",
      "dest": "argument_list [105748,105750]"
    },
    {
      "src": "block [168036,168072]",
      "dest": "block [169530,169566]"
    },
    {
      "src": "method_invocation [207019,207031]",
      "dest": "method_invocation [208513,208525]"
    },
    {
      "src": "affectation_operator: = [173058,173059]",
      "dest": "affectation_operator: = [174552,174553]"
    },
    {
      "src": "identifier: i [175059,175060]",
      "dest": "identifier: i [176553,176554]"
    },
    {
      "src": "visibility: public [209074,209080]",
      "dest": "visibility: public [210568,210574]"
    },
    {
      "src": "method_invocation [165598,165618]",
      "dest": "method_invocation [167092,167112]"
    },
    {
      "src": "identifier: max [104486,104489]",
      "dest": "identifier: max [105980,105983]"
    },
    {
      "src": "identifier: size [185738,185742]",
      "dest": "identifier: size [187232,187236]"
    },
    {
      "src": "static: static [5983,5989]",
      "dest": "static: static [5983,5989]"
    },
    {
      "src": "identifier: cs2 [225339,225342]",
      "dest": "identifier: cs2 [226833,226836]"
    },
    {
      "src": "argument_list [84715,84726]",
      "dest": "argument_list [86209,86220]"
    },
    {
      "src": "identifier: end [91499,91502]",
      "dest": "identifier: end [92993,92996]"
    },
    {
      "src": "type: int [69701,69704]",
      "dest": "type: int [71195,71198]"
    },
    {
      "src": "identifier: leftPad [183884,183891]",
      "dest": "identifier: leftPad [185378,185385]"
    },
    {
      "src": "argument_list [213929,213934]",
      "dest": "argument_list [215423,215428]"
    },
    {
      "src": "array_access [145774,145786]",
      "dest": "array_access [147268,147280]"
    },
    {
      "src": "null_literal: null [90868,90872]",
      "dest": "null_literal: null [92362,92366]"
    },
    {
      "src": "affectation_operator: = [190626,190627]",
      "dest": "affectation_operator: = [192120,192121]"
    },
    {
      "src": "identifier: end [75943,75946]",
      "dest": "identifier: end [77437,77440]"
    },
    {
      "src": "argument_list [202144,202147]",
      "dest": "argument_list [203638,203641]"
    },
    {
      "src": "binary_expression [235977,235981]",
      "dest": "binary_expression [237471,237475]"
    },
    {
      "src": "binary_expression [49574,49607]",
      "dest": "binary_expression [49574,49607]"
    },
    {
      "src": "identifier: padLen [185463,185469]",
      "dest": "identifier: padLen [186957,186963]"
    },
    {
      "src": "variable_declarator [137201,137206]",
      "dest": "variable_declarator [138695,138700]"
    },
    {
      "src": "identifier: toString [195602,195610]",
      "dest": "identifier: toString [197096,197104]"
    },
    {
      "src": "identifier: i [225335,225336]",
      "dest": "identifier: i [226829,226830]"
    },
    {
      "src": "if_statement [63866,63936]",
      "dest": "if_statement [64913,64983]"
    },
    {
      "src": "comparison_operator: == [70209,70211]",
      "dest": "comparison_operator: == [71703,71705]"
    },
    {
      "src": "parenthesized_expression [83154,83173]",
      "dest": "parenthesized_expression [84648,84667]"
    },
    {
      "src": "identifier: append [127957,127963]",
      "dest": "identifier: append [129451,129457]"
    },
    {
      "src": "identifier: length [86537,86543]",
      "dest": "identifier: length [88031,88037]"
    },
    {
      "src": "true: true [155383,155387]",
      "dest": "true: true [156877,156881]"
    },
    {
      "src": "type: int [173047,173050]",
      "dest": "type: int [174541,174544]"
    },
    {
      "src": "null_literal: null [123107,123111]",
      "dest": "null_literal: null [124601,124605]"
    },
    {
      "src": "argument_list [219813,219815]",
      "dest": "argument_list [221307,221309]"
    },
    {
      "src": "visibility: public [167932,167938]",
      "dest": "visibility: public [169426,169432]"
    },
    {
      "src": "comparison_operator: <= [131122,131124]",
      "dest": "comparison_operator: <= [132616,132618]"
    },
    {
      "src": "identifier: length [219586,219592]",
      "dest": "identifier: length [221080,221086]"
    },
    {
      "src": "method_invocation [18863,18900]",
      "dest": "method_invocation [18863,18900]"
    },
    {
      "src": "identifier: stripChars [18753,18763]",
      "dest": "identifier: stripChars [18753,18763]"
    },
    {
      "src": "line_comment: // Trim [9664,9671]",
      "dest": "line_comment: // Trim [9664,9671]"
    },
    {
      "src": "type: String [219858,219864]",
      "dest": "type: String [221352,221358]"
    },
    {
      "src": "null_literal: null [116575,116579]",
      "dest": "null_literal: null [118069,118073]"
    },
    {
      "src": "binary_expression [110803,110810]",
      "dest": "binary_expression [112297,112304]"
    },
    {
      "src": "identifier: tempIndex [162019,162028]",
      "dest": "identifier: tempIndex [163513,163522]"
    },
    {
      "src": "visibility: public [206803,206809]",
      "dest": "visibility: public [208297,208303]"
    },
    {
      "src": "identifier: cs [196682,196684]",
      "dest": "identifier: cs [198176,198178]"
    },
    {
      "src": "block [223702,223991]",
      "dest": "block [225196,225485]"
    },
    {
      "src": "identifier: str [222376,222379]",
      "dest": "identifier: str [223870,223873]"
    },
    {
      "src": "arithmetic_operator: - [159850,159851]",
      "dest": "arithmetic_operator: - [161344,161345]"
    },
    {
      "src": "binary_expression [244182,244193]",
      "dest": "binary_expression [245676,245687]"
    },
    {
      "src": "identifier: textIndex [162031,162040]",
      "dest": "identifier: textIndex [163525,163534]"
    },
    {
      "src": "comparison_operator: < [208181,208182]",
      "dest": "comparison_operator: < [209675,209676]"
    },
    {
      "src": "identifier: j [61116,61117]",
      "dest": "identifier: j [61575,61576]"
    },
    {
      "src": "local_variable_declaration [57533,57571]",
      "dest": "local_variable_declaration [57873,57911]"
    },
    {
      "src": "type: StringBuilder [132727,132740]",
      "dest": "type: StringBuilder [134221,134234]"
    },
    {
      "src": "identifier: indexOf [18874,18881]",
      "dest": "identifier: indexOf [18874,18881]"
    },
    {
      "src": "if_statement [185392,185450]",
      "dest": "if_statement [186886,186944]"
    },
    {
      "src": "null_literal: null [28532,28536]",
      "dest": "null_literal: null [28532,28536]"
    },
    {
      "src": "identifier: str [77477,77480]",
      "dest": "identifier: str [78971,78974]"
    },
    {
      "src": "visibility: public [60739,60745]",
      "dest": "visibility: public [61126,61132]"
    },
    {
      "src": "identifier: searchLength [158558,158570]",
      "dest": "identifier: searchLength [160052,160064]"
    },
    {
      "src": "binary_expression [145736,145754]",
      "dest": "binary_expression [147230,147248]"
    },
    {
      "src": "type: char [165980,165984]",
      "dest": "type: char [167474,167478]"
    },
    {
      "src": "binary_expression [117986,118004]",
      "dest": "binary_expression [119480,119498]"
    },
    {
      "src": "identifier: splitWorker [93955,93966]",
      "dest": "identifier: splitWorker [95449,95460]"
    },
    {
      "src": "type: IllegalAccessException [25673,25695]",
      "dest": "type: IllegalAccessException [25673,25695]"
    },
    {
      "src": "return_statement [79813,79825]",
      "dest": "return_statement [81307,81319]"
    },
    {
      "src": "arithmetic_operator: + [158926,158927]",
      "dest": "arithmetic_operator: + [160420,160421]"
    },
    {
      "src": "identifier: start [76265,76270]",
      "dest": "identifier: start [77759,77764]"
    },
    {
      "src": "comparison_operator: == [158174,158176]",
      "dest": "comparison_operator: == [159668,159670]"
    },
    {
      "src": "affectation_operator: = [24593,24594]",
      "dest": "affectation_operator: = [24593,24594]"
    },
    {
      "src": "variable_declarator [209202,209218]",
      "dest": "variable_declarator [210696,210712]"
    },
    {
      "src": "identifier: str [170264,170267]",
      "dest": "identifier: str [171758,171761]"
    },
    {
      "src": "type: StringBuilder [222330,222343]",
      "dest": "type: StringBuilder [223824,223837]"
    },
    {
      "src": "method_declaration [83013,83389]",
      "dest": "method_declaration [84507,84883]"
    },
    {
      "src": "line_comment: // let me know if there are performance requests, we can create a harness to measure [158046,158130]",
      "dest": "line_comment: // let me know if there are performance requests, we can create a harness to measure [159540,159624]"
    },
    {
      "src": "formal_parameter [188868,188880]",
      "dest": "formal_parameter [190362,190374]"
    },
    {
      "src": "identifier: cs [196774,196776]",
      "dest": "identifier: cs [198268,198270]"
    },
    {
      "src": "identifier: INDEX_NOT_FOUND [225045,225060]",
      "dest": "identifier: INDEX_NOT_FOUND [226539,226554]"
    },
    {
      "src": "identifier: cs [211377,211379]",
      "dest": "identifier: cs [212871,212873]"
    },
    {
      "src": "identifier: str [180059,180062]",
      "dest": "identifier: str [181553,181556]"
    },
    {
      "src": "return_statement [181668,181679]",
      "dest": "return_statement [183162,183173]"
    },
    {
      "src": "parenthesized_expression [185669,185703]",
      "dest": "parenthesized_expression [187163,187197]"
    },
    {
      "src": "type: String [221870,221876]",
      "dest": "type: String [223364,223370]"
    },
    {
      "src": "method_invocation [244344,244359]",
      "dest": "method_invocation [245838,245853]"
    },
    {
      "src": "new: new [220028,220031]",
      "dest": "new: new [221522,221525]"
    },
    {
      "src": "return_statement [93948,93994]",
      "dest": "return_statement [95442,95488]"
    },
    {
      "src": "formal_parameter [127501,127513]",
      "dest": "formal_parameter [128995,129007]"
    },
    {
      "src": "variable_declarator [137141,137159]",
      "dest": "variable_declarator [138635,138653]"
    },
    {
      "src": "type: int [62472,62475]",
      "dest": "type: int [63211,63214]"
    },
    {
      "src": "comparison_operator: < [206972,206973]",
      "dest": "comparison_operator: < [208466,208467]"
    },
    {
      "src": "type: String [171720,171726]",
      "dest": "type: String [173214,173220]"
    },
    {
      "src": "identifier: remove [143409,143415]",
      "dest": "identifier: remove [144903,144909]"
    },
    {
      "src": "binary_expression [235911,235915]",
      "dest": "binary_expression [237405,237409]"
    },
    {
      "src": "identifier: toLowerCase [198516,198527]",
      "dest": "identifier: toLowerCase [200010,200021]"
    },
    {
      "src": "argument_list [91665,91667]",
      "dest": "argument_list [93159,93161]"
    },
    {
      "src": "decimal_integer_literal: 2 [222216,222217]",
      "dest": "decimal_integer_literal: 2 [223710,223711]"
    },
    {
      "src": "affectation_operator: = [168455,168456]",
      "dest": "affectation_operator: = [169949,169950]"
    },
    {
      "src": "true: true [205960,205964]",
      "dest": "true: true [207454,207458]"
    },
    {
      "src": "affectation_operator: = [54708,54709]",
      "dest": "affectation_operator: = [58009,58010]"
    },
    {
      "src": "binary_expression [18842,18857]",
      "dest": "binary_expression [18842,18857]"
    },
    {
      "src": "\": \" [24347,24348]",
      "dest": "\": \" [24347,24348]"
    },
    {
      "src": "identifier: i [117018,117019]",
      "dest": "identifier: i [118512,118513]"
    },
    {
      "src": "null_literal: null [171781,171785]",
      "dest": "null_literal: null [173275,173279]"
    },
    {
      "src": "switch_block [174854,175744]",
      "dest": "switch_block [176348,177238]"
    },
    {
      "src": "line_comment: // handle negatives, which means last n characters [73525,73575]",
      "dest": "line_comment: // handle negatives, which means last n characters [75019,75069]"
    },
    {
      "src": "identifier: cs [195772,195774]",
      "dest": "identifier: cs [197266,197268]"
    },
    {
      "src": "type: boolean [206817,206824]",
      "dest": "type: boolean [208311,208318]"
    },
    {
      "src": "identifier: length [219807,219813]",
      "dest": "identifier: length [221301,221307]"
    },
    {
      "src": "type: String [104033,104039]",
      "dest": "type: String [105527,105533]"
    },
    {
      "src": "binary_expression [211355,211399]",
      "dest": "binary_expression [212849,212893]"
    },
    {
      "src": "variable_declarator [165838,165862]",
      "dest": "variable_declarator [167332,167356]"
    },
    {
      "src": "identifier: str1 [223716,223720]",
      "dest": "identifier: str1 [225210,225214]"
    },
    {
      "src": "formal_parameter [163604,163614]",
      "dest": "formal_parameter [165098,165108]"
    },
    {
      "src": "identifier: cost [236293,236297]",
      "dest": "identifier: cost [237787,237791]"
    },
    {
      "src": "method_declaration [126071,126257]",
      "dest": "method_declaration [127565,127751]"
    },
    {
      "src": "object_creation_expression [123825,123878]",
      "dest": "object_creation_expression [125319,125372]"
    },
    {
      "src": "identifier: lastMatch [118639,118648]",
      "dest": "identifier: lastMatch [120133,120142]"
    },
    {
      "src": "line_comment: // Abbreviating [215812,215827]",
      "dest": "line_comment: // Abbreviating [217306,217321]"
    },
    {
      "src": "block_comment:     \n     * <p>Returns either the passed in String,\n     * or if the String is <code>null</code>, an empty String (\"\").</p>\n     *\n     * <pre>\n     * StringUtils.defaultString(null)  = \"\"\n     * StringUtils.defaultString(\"\")    = \"\"\n     * StringUtils.defaultString(\"bat\") = \"bat\"\n     * </pre>\n     *\n     * @see ObjectUtils#toString(Object)\n     * @see String#valueOf(Object)\n     * @param str  the String to check, may be null\n     * @return the passed in String, or the empty String if it\n     *  was <code>null</code>\n     */ [211583,212113]",
      "dest": "block_comment:     \n     * <p>Returns either the passed in String,\n     * or if the String is <code>null</code>, an empty String (\"\").</p>\n     *\n     * <pre>\n     * StringUtils.defaultString(null)  = \"\"\n     * StringUtils.defaultString(\"\")    = \"\"\n     * StringUtils.defaultString(\"bat\") = \"bat\"\n     * </pre>\n     *\n     * @see ObjectUtils#toString(Object)\n     * @see String#valueOf(Object)\n     * @param str  the String to check, may be null\n     * @return the passed in String, or the empty String if it\n     *  was <code>null</code>\n     */ [213077,213607]"
    },
    {
      "src": "block [39743,39783]",
      "dest": "block [39743,39783]"
    },
    {
      "src": "block [171787,171822]",
      "dest": "block [173281,173316]"
    },
    {
      "src": "parenthesized_expression [244234,244266]",
      "dest": "parenthesized_expression [245728,245760]"
    },
    {
      "src": "decimal_integer_literal: 1 [196991,196992]",
      "dest": "decimal_integer_literal: 1 [198485,198486]"
    },
    {
      "src": "method_invocation [168576,168592]",
      "dest": "method_invocation [170070,170086]"
    },
    {
      "src": "affectation_operator: = [190695,190696]",
      "dest": "affectation_operator: = [192189,192190]"
    },
    {
      "src": "argument_list [8883,8886]",
      "dest": "argument_list [8883,8886]"
    },
    {
      "src": "type: String [83027,83033]",
      "dest": "type: String [84521,84527]"
    },
    {
      "src": "block [168198,168232]",
      "dest": "block [169692,169726]"
    },
    {
      "src": "affectation_operator: = [228465,228466]",
      "dest": "affectation_operator: = [229959,229960]"
    },
    {
      "src": "affectation_operator: = [116839,116840]",
      "dest": "affectation_operator: = [118333,118334]"
    },
    {
      "src": "identifier: separator [171768,171777]",
      "dest": "identifier: separator [173262,173271]"
    },
    {
      "src": "assignment_expression [119034,119051]",
      "dest": "assignment_expression [120528,120545]"
    },
    {
      "src": "expression_statement [111141,111159]",
      "dest": "expression_statement [112635,112653]"
    },
    {
      "src": "increment_operator: ++ [117629,117631]",
      "dest": "increment_operator: ++ [119123,119125]"
    },
    {
      "src": "identifier: i [118268,118269]",
      "dest": "identifier: i [119762,119763]"
    },
    {
      "src": "identifier: timeToLive [158493,158503]",
      "dest": "identifier: timeToLive [159987,159997]"
    },
    {
      "src": "modifiers [75539,75552]",
      "dest": "modifiers [77033,77046]"
    },
    {
      "src": "binary_expression [236276,236282]",
      "dest": "binary_expression [237770,237776]"
    },
    {
      "src": "identifier: start [168272,168277]",
      "dest": "identifier: start [169766,169771]"
    },
    {
      "src": "identifier: array [129326,129331]",
      "dest": "identifier: array [130820,130825]"
    },
    {
      "src": "identifier: chop [172958,172962]",
      "dest": "identifier: chop [174452,174456]"
    },
    {
      "src": "expression_statement [119069,119082]",
      "dest": "expression_statement [120563,120576]"
    },
    {
      "src": "affectation_operator: = [54751,54752]",
      "dest": "affectation_operator: = [58055,58056]"
    },
    {
      "src": "argument_list [39595,39597]",
      "dest": "argument_list [39595,39597]"
    },
    {
      "src": "identifier: strOffset [244406,244415]",
      "dest": "identifier: strOffset [245900,245909]"
    },
    {
      "src": "parenthesized_expression [174840,174853]",
      "dest": "parenthesized_expression [176334,176347]"
    },
    {
      "src": "return_statement [33601,33641]",
      "dest": "return_statement [33601,33641]"
    },
    {
      "src": "affectation_operator: = [199879,199880]",
      "dest": "affectation_operator: = [201373,201374]"
    },
    {
      "src": "new: new [132747,132750]",
      "dest": "new: new [134241,134244]"
    },
    {
      "src": "method_invocation [208211,208242]",
      "dest": "method_invocation [209705,209736]"
    },
    {
      "src": "identifier: pos [80047,80050]",
      "dest": "identifier: pos [81541,81544]"
    },
    {
      "src": "affectation_operator: = [158622,158623]",
      "dest": "affectation_operator: = [160116,160117]"
    },
    {
      "src": "type: int [161469,161472]",
      "dest": "type: int [162963,162966]"
    },
    {
      "src": "argument_list [21694,21706]",
      "dest": "argument_list [21694,21706]"
    },
    {
      "src": "method_invocation [110934,110967]",
      "dest": "method_invocation [112428,112461]"
    },
    {
      "src": "identifier: str [47800,47803]",
      "dest": "identifier: str [47800,47803]"
    },
    {
      "src": "identifier: i [225181,225182]",
      "dest": "identifier: i [226675,226676]"
    },
    {
      "src": "formal_parameter [68059,68078]",
      "dest": "formal_parameter [69553,69572]"
    },
    {
      "src": "identifier: isWhitespace [117059,117071]",
      "dest": "identifier: isWhitespace [118553,118565]"
    },
    {
      "src": "argument_list [141796,141831]",
      "dest": "argument_list [143290,143325]"
    },
    {
      "src": "expression_statement [166282,166297]",
      "dest": "expression_statement [167776,167791]"
    },
    {
      "src": "method_declaration [191841,191987]",
      "dest": "method_declaration [193335,193481]"
    },
    {
      "src": "identifier: strs [23237,23241]",
      "dest": "identifier: strs [23237,23241]"
    },
    {
      "src": "field_access [123670,123696]",
      "dest": "field_access [125164,125190]"
    },
    {
      "src": "true: true [117180,117184]",
      "dest": "true: true [118674,118678]"
    },
    {
      "src": "unary_expression [159737,159739]",
      "dest": "unary_expression [161231,161233]"
    },
    {
      "src": "identifier: i [241112,241113]",
      "dest": "identifier: i [242606,242607]"
    },
    {
      "src": "identifier: append [131473,131479]",
      "dest": "identifier: append [132967,132973]"
    },
    {
      "src": "new: new [26072,26075]",
      "dest": "new: new [26072,26075]"
    },
    {
      "src": "argument_list [90838,90845]",
      "dest": "argument_list [92332,92339]"
    },
    {
      "src": "parenthesized_expression [161524,161661]",
      "dest": "parenthesized_expression [163018,163155]"
    },
    {
      "src": "identifier: toCharArray [145635,145646]",
      "dest": "identifier: toCharArray [147129,147140]"
    },
    {
      "src": "argument_list [165860,165862]",
      "dest": "argument_list [167354,167356]"
    },
    {
      "src": "block [36429,36507]",
      "dest": "block [36429,36507]"
    },
    {
      "src": "type: CharSequence [57352,57364]",
      "dest": "type: CharSequence [54465,54477]"
    },
    {
      "src": "logical_operator: && [57863,57865]",
      "dest": "logical_operator: && [54968,54970]"
    },
    {
      "src": "block [183955,183991]",
      "dest": "block [185449,185485]"
    },
    {
      "src": "modifiers [132277,132290]",
      "dest": "modifiers [133771,133784]"
    },
    {
      "src": "binary_expression [133898,133914]",
      "dest": "binary_expression [135392,135408]"
    },
    {
      "src": "parenthesized_expression [208209,208278]",
      "dest": "parenthesized_expression [209703,209772]"
    },
    {
      "src": "null_literal: null [47807,47811]",
      "dest": "null_literal: null [47807,47811]"
    },
    {
      "src": "identifier: strLen [189019,189025]",
      "dest": "identifier: strLen [190513,190519]"
    },
    {
      "src": "identifier: searchChars [56009,56020]",
      "dest": "identifier: searchChars [56355,56366]"
    },
    {
      "src": "identifier: searchList [158182,158192]",
      "dest": "identifier: searchList [159676,159686]"
    },
    {
      "src": "identifier: ch [198601,198603]",
      "dest": "identifier: ch [200095,200097]"
    },
    {
      "src": "block [18922,18962]",
      "dest": "block [18922,18962]"
    },
    {
      "src": "local_variable_declaration [160443,160453]",
      "dest": "local_variable_declaration [161937,161947]"
    },
    {
      "src": "block [134097,134156]",
      "dest": "block [135591,135650]"
    },
    {
      "src": "identifier: EMPTY_STRING_ARRAY [90976,90994]",
      "dest": "identifier: EMPTY_STRING_ARRAY [92470,92488]"
    },
    {
      "src": "identifier: found [36673,36678]",
      "dest": "identifier: found [36673,36678]"
    },
    {
      "src": "expression_statement [75730,75755]",
      "dest": "expression_statement [77224,77249]"
    },
    {
      "src": "assignment_expression [236002,236021]",
      "dest": "assignment_expression [237496,237515]"
    },
    {
      "src": "identifier: str [33511,33514]",
      "dest": "identifier: str [33511,33514]"
    },
    {
      "src": "identifier: newTokenStart [123914,123927]",
      "dest": "identifier: newTokenStart [125408,125421]"
    },
    {
      "src": "identifier: padStr [190492,190498]",
      "dest": "identifier: padStr [191986,191992]"
    },
    {
      "src": "method_invocation [145532,145551]",
      "dest": "method_invocation [147026,147045]"
    },
    {
      "src": "binary_expression [8711,8721]",
      "dest": "binary_expression [8711,8721]"
    },
    {
      "src": "formal_parameters [212937,212968]",
      "dest": "formal_parameters [214431,214462]"
    },
    {
      "src": "comparison_operator: <= [185690,185692]",
      "dest": "comparison_operator: <= [187184,187186]"
    },
    {
      "src": "method_invocation [195685,195720]",
      "dest": "method_invocation [197179,197214]"
    },
    {
      "src": "type: String [137019,137025]",
      "dest": "type: String [138513,138519]"
    },
    {
      "src": "null_literal: null [173023,173027]",
      "dest": "null_literal: null [174517,174521]"
    },
    {
      "src": "array_creation_expression [235533,235545]",
      "dest": "array_creation_expression [237027,237039]"
    },
    {
      "src": "identifier: index [36338,36343]",
      "dest": "identifier: index [36338,36343]"
    },
    {
      "src": "arithmetic_operator: - [20375,20376]",
      "dest": "arithmetic_operator: - [20375,20376]"
    },
    {
      "src": "identifier: length [47939,47945]",
      "dest": "identifier: length [47939,47945]"
    },
    {
      "src": "argument_list [208228,208242]",
      "dest": "argument_list [209722,209736]"
    },
    {
      "src": "binary_expression [84692,84726]",
      "dest": "binary_expression [86186,86220]"
    },
    {
      "src": "identifier: substring [86626,86635]",
      "dest": "identifier: substring [88120,88129]"
    },
    {
      "src": "identifier: i [54724,54725]",
      "dest": "identifier: i [58028,58029]"
    },
    {
      "src": "block [71803,72296]",
      "dest": "block [73297,73790]"
    },
    {
      "src": "identifier: str [244253,244256]",
      "dest": "identifier: str [245747,245750]"
    },
    {
      "src": "expression_statement [150287,150338]",
      "dest": "expression_statement [151781,151832]"
    },
    {
      "src": "modifiers [8011,8024]",
      "dest": "modifiers [8011,8024]"
    },
    {
      "src": "if_statement [110880,111059]",
      "dest": "if_statement [112374,112553]"
    }
  ],
  "actions": [
    {
      "action": "move-tree",
      "tree": "modifiers [57318,57331]",
      "parent": "method_declaration [54436,55379]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "formal_parameters [57351,57388]",
      "parent": "method_declaration [54436,55379]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "modifiers [54436,54449]",
      "parent": "method_declaration [57664,58800]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "formal_parameters [57697,57728]",
      "parent": "method_declaration [57664,58800]",
      "at": 3
    },
    {
      "action": "insert-tree",
      "tree": "local_variable_declaration [54653,54676]",
      "parent": "block [54502,55379]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "local_variable_declaration [54729,54760]",
      "parent": "block [54502,55379]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "for_statement [57658,58379]",
      "parent": "block [54502,55379]",
      "at": 5
    },
    {
      "action": "move-tree",
      "tree": "for_statement [54697,54995]",
      "parent": "block [57729,58800]",
      "at": 5
    },
    {
      "action": "insert-tree",
      "tree": "local_variable_declaration [61346,61369]",
      "parent": "block [61195,62062]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "local_variable_declaration [61422,61453]",
      "parent": "block [61195,62062]",
      "at": 4
    },
    {
      "action": "insert-tree",
      "tree": "local_variable_declaration [67634,67657]",
      "parent": "block [67507,68548]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "local_variable_declaration [67710,67741]",
      "parent": "block [67507,68548]",
      "at": 4
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [54713,54722]",
      "parent": "for_statement [54769,55341]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [57674,57686]",
      "parent": "for_statement [57998,58772]",
      "at": 1
    },
    {
      "action": "update-node",
      "tree": "type: CharSequence [59497,59509]",
      "label": "String"
    },
    {
      "action": "insert-node",
      "tree": "local_variable_declaration [63290,63337]",
      "parent": "block [63239,63686]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [54795,54808]",
      "parent": "for_statement [54851,55331]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [57759,57775]",
      "parent": "for_statement [58083,58762]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "type: boolean [63290,63297]",
      "parent": "local_variable_declaration [63290,63337]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "variable_declarator [63298,63336]",
      "parent": "local_variable_declaration [63290,63337]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "block [63403,63575]",
      "parent": "if_statement [63350,63676]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "block [63581,63676]",
      "parent": "if_statement [63350,63676]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "identifier: chFound [63298,63305]",
      "parent": "variable_declarator [63298,63336]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "affectation_operator: = [63306,63307]",
      "parent": "variable_declarator [63298,63336]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [62555,62582]",
      "parent": "variable_declarator [63298,63336]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "binary_expression [63354,63401]",
      "parent": "parenthesized_expression [63353,63402]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "if_statement [63599,63662]",
      "parent": "block [63581,63676]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "comparison_operator: < [62579,62580]",
      "label": ">="
    },
    {
      "action": "insert-tree",
      "tree": "parenthesized_expression [63602,63612]",
      "parent": "if_statement [63599,63662]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "block [62584,62629]",
      "parent": "if_statement [63599,63662]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "block [67912,68497]",
      "parent": "if_statement [67886,68497]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "if_statement [58188,58730]",
      "parent": "block [58166,58748]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "block [61639,61978]",
      "parent": "if_statement [61613,61978]",
      "at": 1
    },
    {
      "action": "insert-node",
      "tree": "if_statement [67934,68479]",
      "parent": "block [67912,68497]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "block [55242,55299]",
      "parent": "if_statement [54953,55299]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "parenthesized_expression [58191,58222]",
      "parent": "if_statement [58188,58730]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "block [58223,58599]",
      "parent": "if_statement [58188,58730]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "block [58212,58337]",
      "parent": "if_statement [58188,58730]",
      "at": 2
    },
    {
      "action": "insert-node",
      "tree": "if_statement [61661,61960]",
      "parent": "block [61639,61978]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "parenthesized_expression [67937,67968]",
      "parent": "if_statement [67934,68479]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "block [67969,68347]",
      "parent": "if_statement [67934,68479]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "block [66793,67003]",
      "parent": "if_statement [67934,68479]",
      "at": 2
    },
    {
      "action": "move-tree",
      "tree": "binary_expression [57852,57918]",
      "parent": "parenthesized_expression [54956,55019]",
      "at": 0
    },
    {
      "action": "update-node",
      "tree": "line_comment: // missing low surrogate, fine, like String.indexOf(String) [57988,58047]",
      "label": "// ch is a supplementary character"
    },
    {
      "action": "insert-tree",
      "tree": "if_statement [58249,58426]",
      "parent": "block [58223,58599]",
      "at": 0
    },
    {
      "action": "insert-node",
      "tree": "if_statement [58451,58577]",
      "parent": "block [58223,58599]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "parenthesized_expression [61664,61727]",
      "parent": "if_statement [61661,61960]",
      "at": 0
    },
    {
      "action": "insert-tree",
      "tree": "block [61728,61891]",
      "parent": "if_statement [61661,61960]",
      "at": 1
    },
    {
      "action": "move-tree",
      "tree": "block [61180,61239]",
      "parent": "if_statement [61661,61960]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "method_invocation [54989,55018]",
      "parent": "binary_expression [54957,55018]",
      "at": 2
    },
    {
      "action": "insert-tree",
      "tree": "block [55149,55214]",
      "parent": "if_statement [55105,55214]",
      "at": 1
    },
    {
      "action": "insert-tree",
      "tree": "parenthesized_expression [58454,58508]",
      "parent": "if_statement [58451,58577]",
      "at": 0
    },
    {
      "action": "move-tree",
      "tree": "block [58116,58184]",
      "parent": "if_statement [58451,58577]",
      "at": 1
    },
    {
      "action": "delete-tree",
      "tree": "formal_parameters [54464,54501]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [57884,57918]"
    },
    {
      "action": "delete-node",
      "tree": "logical_operator: && [57919,57921]"
    },
    {
      "action": "delete-tree",
      "tree": "binary_expression [57922,57956]"
    },
    {
      "action": "delete-node",
      "tree": "binary_expression [57852,57956]"
    },
    {
      "action": "delete-node",
      "tree": "line_comment: // ch is a supplementary character [54885,54919]"
    },
    {
      "action": "delete-tree",
      "tree": "return_statement [54944,54953]"
    },
    {
      "action": "delete-node",
      "tree": "line_comment: // missing low surrogate, fine, like String.indexOf(String) [66823,66882]"
    }
  ]
}