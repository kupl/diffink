translation_unit (1,1)-(4630,1)
  comment: '/*
 * subst.c - various substitutions
 *
 * This file is part of zsh, the Z shell.
 *
 * Copyright (c) 1992-1997 Paul Falstad
 * All rights reserved.
 *
 * Permission is hereby granted, without written agreement and without
 * license or royalty fees, to use, copy, modify, and distribute this
 * software and to distribute modified versions of this software for any
 * purpose, provided that the above copyright notice and the following
 * two paragraphs appear in all copies of this software.
 *
 * In no event shall Paul Falstad or the Zsh Development Group be liable
 * to any party for direct, indirect, special, incidental, or consequential
 * damages arising out of the use of this software and its documentation,
 * even if Paul Falstad and the Zsh Development Group have been advised of
 * the possibility of such damage.
 *
 * Paul Falstad and the Zsh Development Group specifically disclaim any
 * warranties, including, but not limited to, the implied warranties of
 * merchantability and fitness for a particular purpose.  The software
 * provided hereunder is on an "as is" basis, and Paul Falstad and the
 * Zsh Development Group have no obligation to provide maintenance,
 * support, updates, enhancements, or modifications.
 *
 */' (1,1)-(28,4)
  preproc_include (30,1)-(31,1)
    #include: '#include' (30,1)-(30,9)
    string_literal (30,10)-(30,19)
      ": '"' (30,10)-(30,11)
      string_content: 'zsh.mdh' (30,11)-(30,18)
      ": '"' (30,18)-(30,19)
  preproc_include (31,1)-(32,1)
    #include: '#include' (31,1)-(31,9)
    string_literal (31,10)-(31,21)
      ": '"' (31,10)-(31,11)
      string_content: 'subst.pro' (31,11)-(31,20)
      ": '"' (31,20)-(31,21)
  preproc_def (33,1)-(34,1)
    #define: '#define' (33,1)-(33,8)
    identifier: 'LF_ARRAY' (33,9)-(33,17)
    preproc_arg: '1' (33,18)-(33,19)
  comment: '/**/' (35,1)-(35,5)
  declaration (36,1)-(36,35)
    primitive_type: 'char' (36,1)-(36,5)
    init_declarator (36,6)-(36,34)
      array_declarator (36,6)-(36,17)
        identifier: 'nulstring' (36,6)-(36,15)
        [: '[' (36,15)-(36,16)
        ]: ']' (36,16)-(36,17)
      =: '=' (36,18)-(36,19)
      initializer_list (36,20)-(36,34)
        {: '{' (36,20)-(36,21)
        identifier: 'Nularg' (36,21)-(36,27)
        ,: ',' (36,27)-(36,28)
        char_literal (36,29)-(36,33)
          ': ''' (36,29)-(36,30)
          escape_sequence: '\0' (36,30)-(36,32)
          ': ''' (36,32)-(36,33)
        }: '}' (36,33)-(36,34)
    ;: ';' (36,34)-(36,35)
  comment: '/* Check for array assignent with entries like [key]=val.
 *
 * Insert Marker node, convert following nodes to list to alternate key
 * / val form, perform appropriate substitution, and return last
 * inserted (value) node if found.
 *
 * Caller to check errflag.
 */' (38,1)-(45,4)
  comment: '/**/' (47,1)-(47,5)
  function_definition (48,1)-(80,2)
    storage_class_specifier (48,1)-(48,7)
      static: 'static' (48,1)-(48,7)
    type_identifier: 'LinkNode' (48,8)-(48,16)
    function_declarator (49,1)-(49,48)
      identifier: 'keyvalpairelement' (49,1)-(49,18)
      parameter_list (49,18)-(49,48)
        (: '(' (49,18)-(49,19)
        parameter_declaration (49,19)-(49,32)
          type_identifier: 'LinkList' (49,19)-(49,27)
          identifier: 'list' (49,28)-(49,32)
        ,: ',' (49,32)-(49,33)
        parameter_declaration (49,34)-(49,47)
          type_identifier: 'LinkNode' (49,34)-(49,42)
          identifier: 'node' (49,43)-(49,47)
        ): ')' (49,47)-(49,48)
    compound_statement (50,1)-(80,2)
      {: '{' (50,1)-(50,2)
      declaration (51,5)-(51,29)
        primitive_type: 'char' (51,5)-(51,9)
        pointer_declarator (51,10)-(51,16)
          *: '*' (51,10)-(51,11)
          identifier: 'start' (51,11)-(51,16)
        ,: ',' (51,16)-(51,17)
        pointer_declarator (51,18)-(51,22)
          *: '*' (51,18)-(51,19)
          identifier: 'end' (51,19)-(51,22)
        ,: ',' (51,22)-(51,23)
        pointer_declarator (51,24)-(51,28)
          *: '*' (51,24)-(51,25)
          identifier: 'dat' (51,25)-(51,28)
        ;: ';' (51,28)-(51,29)
      if_statement (53,5)-(78,6)
        if: 'if' (53,5)-(53,7)
        parenthesized_expression (53,8)-(58,40)
          (: '(' (53,8)-(53,9)
          binary_expression (53,9)-(58,39)
            binary_expression (53,9)-(55,35)
              binary_expression (53,9)-(54,21)
                parenthesized_expression (53,9)-(53,40)
                  (: '(' (53,9)-(53,10)
                  assignment_expression (53,10)-(53,39)
                    identifier: 'start' (53,10)-(53,15)
                    =: '=' (53,16)-(53,17)
                    cast_expression (53,18)-(53,39)
                      (: '(' (53,18)-(53,19)
                      type_descriptor (53,19)-(53,25)
                        primitive_type: 'char' (53,19)-(53,23)
                        abstract_pointer_declarator (53,24)-(53,25)
                          *: '*' (53,24)-(53,25)
                      ): ')' (53,25)-(53,26)
                      call_expression (53,26)-(53,39)
                        identifier: 'getdata' (53,26)-(53,33)
                        argument_list (53,33)-(53,39)
                          (: '(' (53,33)-(53,34)
                          identifier: 'node' (53,34)-(53,38)
                          ): ')' (53,38)-(53,39)
                  ): ')' (53,39)-(53,40)
                &&: '&&' (53,41)-(53,43)
                binary_expression (54,2)-(54,21)
                  subscript_expression (54,2)-(54,10)
                    identifier: 'start' (54,2)-(54,7)
                    [: '[' (54,7)-(54,8)
                    number_literal: '0' (54,8)-(54,9)
                    ]: ']' (54,9)-(54,10)
                  ==: '==' (54,11)-(54,13)
                  identifier: 'Inbrack' (54,14)-(54,21)
              &&: '&&' (54,22)-(54,24)
              parenthesized_expression (55,2)-(55,35)
                (: '(' (55,2)-(55,3)
                assignment_expression (55,3)-(55,34)
                  identifier: 'end' (55,3)-(55,6)
                  =: '=' (55,7)-(55,8)
                  call_expression (55,9)-(55,34)
                    identifier: 'strchr' (55,9)-(55,15)
                    argument_list (55,15)-(55,34)
                      (: '(' (55,15)-(55,16)
                      binary_expression (55,16)-(55,23)
                        identifier: 'start' (55,16)-(55,21)
                        +: '+' (55,21)-(55,22)
                        number_literal: '1' (55,22)-(55,23)
                      ,: ',' (55,23)-(55,24)
                      identifier: 'Outbrack' (55,25)-(55,33)
                      ): ')' (55,33)-(55,34)
                ): ')' (55,34)-(55,35)
            &&: '&&' (55,36)-(55,38)
            comment: '/* ..]=value or ]+=Value */' (56,2)-(56,29)
            parenthesized_expression (57,2)-(58,39)
              (: '(' (57,2)-(57,3)
              binary_expression (57,3)-(58,38)
                binary_expression (57,3)-(57,19)
                  subscript_expression (57,3)-(57,9)
                    identifier: 'end' (57,3)-(57,6)
                    [: '[' (57,6)-(57,7)
                    number_literal: '1' (57,7)-(57,8)
                    ]: ']' (57,8)-(57,9)
                  ==: '==' (57,10)-(57,12)
                  identifier: 'Equals' (57,13)-(57,19)
                ||: '||' (57,20)-(57,22)
                parenthesized_expression (58,3)-(58,38)
                  (: '(' (58,3)-(58,4)
                  binary_expression (58,4)-(58,37)
                    binary_expression (58,4)-(58,17)
                      subscript_expression (58,4)-(58,10)
                        identifier: 'end' (58,4)-(58,7)
                        [: '[' (58,7)-(58,8)
                        number_literal: '1' (58,8)-(58,9)
                        ]: ']' (58,9)-(58,10)
                      ==: '==' (58,11)-(58,13)
                      char_literal (58,14)-(58,17)
                        ': ''' (58,14)-(58,15)
                        character: '+' (58,15)-(58,16)
                        ': ''' (58,16)-(58,17)
                    &&: '&&' (58,18)-(58,20)
                    binary_expression (58,21)-(58,37)
                      subscript_expression (58,21)-(58,27)
                        identifier: 'end' (58,21)-(58,24)
                        [: '[' (58,24)-(58,25)
                        number_literal: '2' (58,25)-(58,26)
                        ]: ']' (58,26)-(58,27)
                      ==: '==' (58,28)-(58,30)
                      identifier: 'Equals' (58,31)-(58,37)
                  ): ')' (58,37)-(58,38)
              ): ')' (58,38)-(58,39)
          ): ')' (58,39)-(58,40)
        compound_statement (58,41)-(78,6)
          {: '{' (58,41)-(58,42)
          declaration (59,2)-(59,43)
            storage_class_specifier (59,2)-(59,8)
              static: 'static' (59,2)-(59,8)
            primitive_type: 'char' (59,9)-(59,13)
            init_declarator (59,14)-(59,42)
              array_declarator (59,14)-(59,23)
                identifier: 'marker' (59,14)-(59,20)
                [: '[' (59,20)-(59,21)
                number_literal: '2' (59,21)-(59,22)
                ]: ']' (59,22)-(59,23)
              =: '=' (59,24)-(59,25)
              initializer_list (59,26)-(59,42)
                {: '{' (59,26)-(59,27)
                identifier: 'Marker' (59,28)-(59,34)
                ,: ',' (59,34)-(59,35)
                char_literal (59,36)-(59,40)
                  ': ''' (59,36)-(59,37)
                  escape_sequence: '\0' (59,37)-(59,39)
                  ': ''' (59,39)-(59,40)
                }: '}' (59,41)-(59,42)
            ;: ';' (59,42)-(59,43)
          declaration (60,2)-(60,53)
            storage_class_specifier (60,2)-(60,8)
              static: 'static' (60,2)-(60,8)
            primitive_type: 'char' (60,9)-(60,13)
            init_declarator (60,14)-(60,52)
              array_declarator (60,14)-(60,28)
                identifier: 'marker_plus' (60,14)-(60,25)
                [: '[' (60,25)-(60,26)
                number_literal: '3' (60,26)-(60,27)
                ]: ']' (60,27)-(60,28)
              =: '=' (60,29)-(60,30)
              initializer_list (60,31)-(60,52)
                {: '{' (60,31)-(60,32)
                identifier: 'Marker' (60,33)-(60,39)
                ,: ',' (60,39)-(60,40)
                char_literal (60,41)-(60,44)
                  ': ''' (60,41)-(60,42)
                  character: '+' (60,42)-(60,43)
                  ': ''' (60,43)-(60,44)
                ,: ',' (60,44)-(60,45)
                char_literal (60,46)-(60,50)
                  ': ''' (60,46)-(60,47)
                  escape_sequence: '\0' (60,47)-(60,49)
                  ': ''' (60,49)-(60,50)
                }: '}' (60,51)-(60,52)
            ;: ';' (60,52)-(60,53)
          expression_statement (61,2)-(61,14)
            assignment_expression (61,2)-(61,13)
              pointer_expression (61,2)-(61,6)
                *: '*' (61,2)-(61,3)
                identifier: 'end' (61,3)-(61,6)
              =: '=' (61,7)-(61,8)
              char_literal (61,9)-(61,13)
                ': ''' (61,9)-(61,10)
                escape_sequence: '\0' (61,10)-(61,12)
                ': ''' (61,12)-(61,13)
            ;: ';' (61,13)-(61,14)
          expression_statement (63,2)-(63,18)
            assignment_expression (63,2)-(63,17)
              identifier: 'dat' (63,2)-(63,5)
              =: '=' (63,6)-(63,7)
              binary_expression (63,8)-(63,17)
                identifier: 'start' (63,8)-(63,13)
                +: '+' (63,14)-(63,15)
                number_literal: '1' (63,16)-(63,17)
            ;: ';' (63,17)-(63,18)
          expression_statement (64,2)-(64,16)
            call_expression (64,2)-(64,15)
              identifier: 'singsub' (64,2)-(64,9)
              argument_list (64,9)-(64,15)
                (: '(' (64,9)-(64,10)
                pointer_expression (64,10)-(64,14)
                  &: '&' (64,10)-(64,11)
                  identifier: 'dat' (64,11)-(64,14)
                ): ')' (64,14)-(64,15)
            ;: ';' (64,15)-(64,16)
          expression_statement (65,2)-(65,18)
            call_expression (65,2)-(65,17)
              identifier: 'untokenize' (65,2)-(65,12)
              argument_list (65,12)-(65,17)
                (: '(' (65,12)-(65,13)
                identifier: 'dat' (65,13)-(65,16)
                ): ')' (65,16)-(65,17)
            ;: ';' (65,17)-(65,18)
          if_statement (66,2)-(74,3)
            if: 'if' (66,2)-(66,4)
            parenthesized_expression (66,5)-(66,20)
              (: '(' (66,5)-(66,6)
              binary_expression (66,6)-(66,19)
                subscript_expression (66,6)-(66,12)
                  identifier: 'end' (66,6)-(66,9)
                  [: '[' (66,9)-(66,10)
                  number_literal: '1' (66,10)-(66,11)
                  ]: ']' (66,11)-(66,12)
                ==: '==' (66,13)-(66,15)
                char_literal (66,16)-(66,19)
                  ': ''' (66,16)-(66,17)
                  character: '+' (66,17)-(66,18)
                  ': ''' (66,18)-(66,19)
              ): ')' (66,19)-(66,20)
            compound_statement (66,21)-(70,3)
              {: '{' (66,21)-(66,22)
              expression_statement (67,6)-(67,33)
                call_expression (67,6)-(67,32)
                  identifier: 'setdata' (67,6)-(67,13)
                  argument_list (67,13)-(67,32)
                    (: '(' (67,13)-(67,14)
                    identifier: 'node' (67,14)-(67,18)
                    ,: ',' (67,18)-(67,19)
                    identifier: 'marker_plus' (67,20)-(67,31)
                    ): ')' (67,31)-(67,32)
                ;: ';' (67,32)-(67,33)
              expression_statement (68,6)-(68,45)
                assignment_expression (68,6)-(68,44)
                  identifier: 'node' (68,6)-(68,10)
                  =: '=' (68,11)-(68,12)
                  call_expression (68,13)-(68,44)
                    identifier: 'insertlinknode' (68,13)-(68,27)
                    argument_list (68,27)-(68,44)
                      (: '(' (68,27)-(68,28)
                      identifier: 'list' (68,28)-(68,32)
                      ,: ',' (68,32)-(68,33)
                      identifier: 'node' (68,34)-(68,38)
                      ,: ',' (68,38)-(68,39)
                      identifier: 'dat' (68,40)-(68,43)
                      ): ')' (68,43)-(68,44)
                ;: ';' (68,44)-(68,45)
              expression_statement (69,6)-(69,20)
                assignment_expression (69,6)-(69,19)
                  identifier: 'dat' (69,6)-(69,9)
                  =: '=' (69,10)-(69,11)
                  binary_expression (69,12)-(69,19)
                    identifier: 'end' (69,12)-(69,15)
                    +: '+' (69,16)-(69,17)
                    number_literal: '3' (69,18)-(69,19)
                ;: ';' (69,19)-(69,20)
              }: '}' (70,2)-(70,3)
            else_clause (70,4)-(74,3)
              else: 'else' (70,4)-(70,8)
              compound_statement (70,9)-(74,3)
                {: '{' (70,9)-(70,10)
                expression_statement (71,6)-(71,28)
                  call_expression (71,6)-(71,27)
                    identifier: 'setdata' (71,6)-(71,13)
                    argument_list (71,13)-(71,27)
                      (: '(' (71,13)-(71,14)
                      identifier: 'node' (71,14)-(71,18)
                      ,: ',' (71,18)-(71,19)
                      identifier: 'marker' (71,20)-(71,26)
                      ): ')' (71,26)-(71,27)
                  ;: ';' (71,27)-(71,28)
                expression_statement (72,6)-(72,45)
                  assignment_expression (72,6)-(72,44)
                    identifier: 'node' (72,6)-(72,10)
                    =: '=' (72,11)-(72,12)
                    call_expression (72,13)-(72,44)
                      identifier: 'insertlinknode' (72,13)-(72,27)
                      argument_list (72,27)-(72,44)
                        (: '(' (72,27)-(72,28)
                        identifier: 'list' (72,28)-(72,32)
                        ,: ',' (72,32)-(72,33)
                        identifier: 'node' (72,34)-(72,38)
                        ,: ',' (72,38)-(72,39)
                        identifier: 'dat' (72,40)-(72,43)
                        ): ')' (72,43)-(72,44)
                  ;: ';' (72,44)-(72,45)
                expression_statement (73,6)-(73,20)
                  assignment_expression (73,6)-(73,19)
                    identifier: 'dat' (73,6)-(73,9)
                    =: '=' (73,10)-(73,11)
                    binary_expression (73,12)-(73,19)
                      identifier: 'end' (73,12)-(73,15)
                      +: '+' (73,16)-(73,17)
                      number_literal: '2' (73,18)-(73,19)
                  ;: ';' (73,19)-(73,20)
                }: '}' (74,2)-(74,3)
          expression_statement (75,2)-(75,16)
            call_expression (75,2)-(75,15)
              identifier: 'singsub' (75,2)-(75,9)
              argument_list (75,9)-(75,15)
                (: '(' (75,9)-(75,10)
                pointer_expression (75,10)-(75,14)
                  &: '&' (75,10)-(75,11)
                  identifier: 'dat' (75,11)-(75,14)
                ): ')' (75,14)-(75,15)
            ;: ';' (75,15)-(75,16)
          expression_statement (76,2)-(76,18)
            call_expression (76,2)-(76,17)
              identifier: 'untokenize' (76,2)-(76,12)
              argument_list (76,12)-(76,17)
                (: '(' (76,12)-(76,13)
                identifier: 'dat' (76,13)-(76,16)
                ): ')' (76,16)-(76,17)
            ;: ';' (76,17)-(76,18)
          return_statement (77,2)-(77,41)
            return: 'return' (77,2)-(77,8)
            call_expression (77,9)-(77,40)
              identifier: 'insertlinknode' (77,9)-(77,23)
              argument_list (77,23)-(77,40)
                (: '(' (77,23)-(77,24)
                identifier: 'list' (77,24)-(77,28)
                ,: ',' (77,28)-(77,29)
                identifier: 'node' (77,30)-(77,34)
                ,: ',' (77,34)-(77,35)
                identifier: 'dat' (77,36)-(77,39)
                ): ')' (77,39)-(77,40)
            ;: ';' (77,40)-(77,41)
          }: '}' (78,5)-(78,6)
      return_statement (79,5)-(79,17)
        return: 'return' (79,5)-(79,11)
        null (79,12)-(79,16)
          NULL: 'NULL' (79,12)-(79,16)
        ;: ';' (79,16)-(79,17)
      }: '}' (80,1)-(80,2)
  comment: '/* Do substitutions before fork. These are:
 *  - Process substitution: <(...), >(...), =(...)
 *  - Parameter substitution
 *  - Command substitution
 * Followed by
 *  - Quote removal
 *  - Brace expansion
 *  - Tilde and equals substitution
 *
 * "flag"s contains PREFORK_* flags, defined in zsh.h.
 *
 * "ret_flags" is used to return PREFORK_* values from nested parameter
 * substitutions.  It may be NULL in which case PREFORK_SUBEXP must not
 * appear in flags; any return value from below will be discarded.
 */' (82,1)-(96,4)
  comment: '/**/' (98,1)-(98,5)
  function_definition (99,1)-(193,2)
    type_identifier: 'mod_export' (99,1)-(99,11)
    ERROR (99,12)-(99,16)
      identifier: 'void' (99,12)-(99,16)
    function_declarator (100,1)-(100,50)
      identifier: 'prefork' (100,1)-(100,8)
      parameter_list (100,8)-(100,50)
        (: '(' (100,8)-(100,9)
        parameter_declaration (100,9)-(100,22)
          type_identifier: 'LinkList' (100,9)-(100,17)
          identifier: 'list' (100,18)-(100,22)
        ,: ',' (100,22)-(100,23)
        parameter_declaration (100,24)-(100,33)
          primitive_type: 'int' (100,24)-(100,27)
          identifier: 'flags' (100,28)-(100,33)
        ,: ',' (100,33)-(100,34)
        parameter_declaration (100,35)-(100,49)
          primitive_type: 'int' (100,35)-(100,38)
          pointer_declarator (100,39)-(100,49)
            *: '*' (100,39)-(100,40)
            identifier: 'ret_flags' (100,40)-(100,49)
        ): ')' (100,49)-(100,50)
    compound_statement (101,1)-(193,2)
      {: '{' (101,1)-(101,2)
      declaration (102,5)-(102,38)
        type_identifier: 'LinkNode' (102,5)-(102,13)
        identifier: 'node' (102,14)-(102,18)
        ,: ',' (102,18)-(102,19)
        identifier: 'insnode' (102,20)-(102,27)
        ,: ',' (102,27)-(102,28)
        init_declarator (102,29)-(102,37)
          identifier: 'stop' (102,29)-(102,33)
          =: '=' (102,34)-(102,35)
          number_literal: '0' (102,36)-(102,37)
        ;: ';' (102,37)-(102,38)
      declaration (103,5)-(103,75)
        primitive_type: 'int' (103,5)-(103,8)
        init_declarator (103,9)-(103,17)
          identifier: 'keep' (103,9)-(103,13)
          =: '=' (103,14)-(103,15)
          number_literal: '0' (103,16)-(103,17)
        ,: ',' (103,17)-(103,18)
        init_declarator (103,19)-(103,74)
          identifier: 'asssub' (103,19)-(103,25)
          =: '=' (103,26)-(103,27)
          binary_expression (103,28)-(103,74)
            parenthesized_expression (103,28)-(103,53)
              (: '(' (103,28)-(103,29)
              binary_expression (103,29)-(103,52)
                identifier: 'flags' (103,29)-(103,34)
                &: '&' (103,35)-(103,36)
                identifier: 'PREFORK_TYPESET' (103,37)-(103,52)
              ): ')' (103,52)-(103,53)
            &&: '&&' (103,54)-(103,56)
            call_expression (103,57)-(103,74)
              identifier: 'isset' (103,57)-(103,62)
              argument_list (103,62)-(103,74)
                (: '(' (103,62)-(103,63)
                identifier: 'KSHTYPESET' (103,63)-(103,73)
                ): ')' (103,73)-(103,74)
        ;: ';' (103,74)-(103,75)
      declaration (104,5)-(104,29)
        primitive_type: 'int' (104,5)-(104,8)
        init_declarator (104,9)-(104,28)
          identifier: 'ret_flags_local' (104,9)-(104,24)
          =: '=' (104,25)-(104,26)
          number_literal: '0' (104,27)-(104,28)
        ;: ';' (104,28)-(104,29)
      if_statement (105,5)-(106,31)
        if: 'if' (105,5)-(105,7)
        parenthesized_expression (105,8)-(105,20)
          (: '(' (105,8)-(105,9)
          unary_expression (105,9)-(105,19)
            !: '!' (105,9)-(105,10)
            identifier: 'ret_flags' (105,10)-(105,19)
          ): ')' (105,19)-(105,20)
        expression_statement (106,2)-(106,31)
          assignment_expression (106,2)-(106,30)
            identifier: 'ret_flags' (106,2)-(106,11)
            =: '=' (106,12)-(106,13)
            pointer_expression (106,14)-(106,30)
              &: '&' (106,14)-(106,15)
              identifier: 'ret_flags_local' (106,15)-(106,30)
          ;: ';' (106,30)-(106,31)
      comment: '/* will be discarded */' (106,32)-(106,55)
      expression_statement (108,5)-(108,21)
        call_expression (108,5)-(108,20)
          identifier: 'queue_signals' (108,5)-(108,18)
          argument_list (108,18)-(108,20)
            (: '(' (108,18)-(108,19)
            ): ')' (108,19)-(108,20)
        ;: ';' (108,20)-(108,21)
      expression_statement (109,5)-(109,28)
        assignment_expression (109,5)-(109,27)
          identifier: 'node' (109,5)-(109,9)
          =: '=' (109,10)-(109,11)
          call_expression (109,12)-(109,27)
            identifier: 'firstnode' (109,12)-(109,21)
            argument_list (109,21)-(109,27)
              (: '(' (109,21)-(109,22)
              identifier: 'list' (109,22)-(109,26)
              ): ')' (109,26)-(109,27)
        ;: ';' (109,27)-(109,28)
      while_statement (110,5)-(150,6)
        while: 'while' (110,5)-(110,10)
        parenthesized_expression (110,11)-(110,17)
          (: '(' (110,11)-(110,12)
          identifier: 'node' (110,12)-(110,16)
          ): ')' (110,16)-(110,17)
        compound_statement (110,18)-(150,6)
          {: '{' (110,18)-(110,19)
          if_statement (111,2)-(117,3)
            if: 'if' (111,2)-(111,4)
            parenthesized_expression (111,5)-(112,48)
              (: '(' (111,5)-(111,6)
              binary_expression (111,6)-(112,47)
                binary_expression (111,6)-(111,65)
                  parenthesized_expression (111,6)-(111,47)
                    (: '(' (111,6)-(111,7)
                    binary_expression (111,7)-(111,46)
                      identifier: 'flags' (111,7)-(111,12)
                      &: '&' (111,13)-(111,14)
                      parenthesized_expression (111,15)-(111,46)
                        (: '(' (111,15)-(111,16)
                        binary_expression (111,16)-(111,45)
                          identifier: 'PREFORK_SINGLE' (111,16)-(111,30)
                          |: '|' (111,30)-(111,31)
                          identifier: 'PREFORK_ASSIGN' (111,31)-(111,45)
                        ): ')' (111,45)-(111,46)
                    ): ')' (111,46)-(111,47)
                  ==: '==' (111,48)-(111,50)
                  identifier: 'PREFORK_ASSIGN' (111,51)-(111,65)
                &&: '&&' (111,66)-(111,68)
                parenthesized_expression (112,6)-(112,47)
                  (: '(' (112,6)-(112,7)
                  assignment_expression (112,7)-(112,46)
                    identifier: 'insnode' (112,7)-(112,14)
                    =: '=' (112,15)-(112,16)
                    call_expression (112,17)-(112,46)
                      identifier: 'keyvalpairelement' (112,17)-(112,34)
                      argument_list (112,34)-(112,46)
                        (: '(' (112,34)-(112,35)
                        identifier: 'list' (112,35)-(112,39)
                        ,: ',' (112,39)-(112,40)
                        identifier: 'node' (112,41)-(112,45)
                        ): ')' (112,45)-(112,46)
                  ): ')' (112,46)-(112,47)
              ): ')' (112,47)-(112,48)
            compound_statement (112,49)-(117,3)
              {: '{' (112,49)-(112,50)
              expression_statement (113,6)-(113,21)
                assignment_expression (113,6)-(113,20)
                  identifier: 'node' (113,6)-(113,10)
                  =: '=' (113,11)-(113,12)
                  identifier: 'insnode' (113,13)-(113,20)
                ;: ';' (113,20)-(113,21)
              expression_statement (114,6)-(114,20)
                call_expression (114,6)-(114,19)
                  identifier: 'incnode' (114,6)-(114,13)
                  argument_list (114,13)-(114,19)
                    (: '(' (114,13)-(114,14)
                    identifier: 'node' (114,14)-(114,18)
                    ): ')' (114,18)-(114,19)
                ;: ';' (114,19)-(114,20)
              expression_statement (115,6)-(115,38)
                assignment_expression (115,6)-(115,37)
                  pointer_expression (115,6)-(115,16)
                    *: '*' (115,6)-(115,7)
                    identifier: 'ret_flags' (115,7)-(115,16)
                  |=: '|=' (115,17)-(115,19)
                  identifier: 'PREFORK_KEY_VALUE' (115,20)-(115,37)
                ;: ';' (115,37)-(115,38)
              continue_statement (116,6)-(116,15)
                continue: 'continue' (116,6)-(116,14)
                ;: ';' (116,14)-(116,15)
              }: '}' (117,2)-(117,3)
          if_statement (118,2)-(121,3)
            if: 'if' (118,2)-(118,4)
            parenthesized_expression (118,5)-(118,14)
              (: '(' (118,5)-(118,6)
              identifier: 'errflag' (118,6)-(118,13)
              ): ')' (118,13)-(118,14)
            compound_statement (118,15)-(121,3)
              {: '{' (118,15)-(118,16)
              expression_statement (119,6)-(119,24)
                call_expression (119,6)-(119,23)
                  identifier: 'unqueue_signals' (119,6)-(119,21)
                  argument_list (119,21)-(119,23)
                    (: '(' (119,21)-(119,22)
                    ): ')' (119,22)-(119,23)
                ;: ';' (119,23)-(119,24)
              return_statement (120,6)-(120,13)
                return: 'return' (120,6)-(120,12)
                ;: ';' (120,12)-(120,13)
              }: '}' (121,2)-(121,3)
          if_statement (122,2)-(148,3)
            if: 'if' (122,2)-(122,4)
            parenthesized_expression (122,5)-(122,29)
              (: '(' (122,5)-(122,6)
              call_expression (122,6)-(122,28)
                identifier: 'isset' (122,6)-(122,11)
                argument_list (122,11)-(122,28)
                  (: '(' (122,11)-(122,12)
                  identifier: 'SHFILEEXPANSION' (122,12)-(122,27)
                  ): ')' (122,27)-(122,28)
              ): ')' (122,28)-(122,29)
            compound_statement (122,30)-(139,3)
              {: '{' (122,30)-(122,31)
              comment: '/*
	     * Here and below we avoid taking the address
	     * of a void * and then pretending it's a char **
	     * instead of a void ** by a little inefficiency.
	     * This could be avoided with some extra linked list
	     * machinery, but that would need quite a lot of work
	     * to ensure consistency.  What we really need is
	     * templates...
	     */' (123,6)-(131,9)
              declaration (132,6)-(132,41)
                primitive_type: 'char' (132,6)-(132,10)
                init_declarator (132,11)-(132,40)
                  pointer_declarator (132,11)-(132,16)
                    *: '*' (132,11)-(132,12)
                    identifier: 'cptr' (132,12)-(132,16)
                  =: '=' (132,17)-(132,18)
                  cast_expression (132,19)-(132,40)
                    (: '(' (132,19)-(132,20)
                    type_descriptor (132,20)-(132,26)
                      primitive_type: 'char' (132,20)-(132,24)
                      abstract_pointer_declarator (132,25)-(132,26)
                        *: '*' (132,25)-(132,26)
                    ): ')' (132,26)-(132,27)
                    call_expression (132,27)-(132,40)
                      identifier: 'getdata' (132,27)-(132,34)
                      argument_list (132,34)-(132,40)
                        (: '(' (132,34)-(132,35)
                        identifier: 'node' (132,35)-(132,39)
                        ): ')' (132,39)-(132,40)
                ;: ';' (132,40)-(132,41)
              expression_statement (133,6)-(133,63)
                call_expression (133,6)-(133,62)
                  identifier: 'filesub' (133,6)-(133,13)
                  argument_list (133,13)-(133,62)
                    (: '(' (133,13)-(133,14)
                    pointer_expression (133,14)-(133,19)
                      &: '&' (133,14)-(133,15)
                      identifier: 'cptr' (133,15)-(133,19)
                    ,: ',' (133,19)-(133,20)
                    binary_expression (133,21)-(133,61)
                      identifier: 'flags' (133,21)-(133,26)
                      &: '&' (133,27)-(133,28)
                      parenthesized_expression (133,29)-(133,61)
                        (: '(' (133,29)-(133,30)
                        binary_expression (133,30)-(133,60)
                          identifier: 'PREFORK_TYPESET' (133,30)-(133,45)
                          |: '|' (133,45)-(133,46)
                          identifier: 'PREFORK_ASSIGN' (133,46)-(133,60)
                        ): ')' (133,60)-(133,61)
                    ): ')' (133,61)-(133,62)
                ;: ';' (133,62)-(133,63)
              comment: '/*
	     * The assignment is so simple it's not worth
	     * testing if cptr changed...
	     */' (134,6)-(137,9)
              expression_statement (138,6)-(138,26)
                call_expression (138,6)-(138,25)
                  identifier: 'setdata' (138,6)-(138,13)
                  argument_list (138,13)-(138,25)
                    (: '(' (138,13)-(138,14)
                    identifier: 'node' (138,14)-(138,18)
                    ,: ',' (138,18)-(138,19)
                    identifier: 'cptr' (138,20)-(138,24)
                    ): ')' (138,24)-(138,25)
                ;: ';' (138,25)-(138,26)
              }: '}' (139,2)-(139,3)
            else_clause (140,2)-(148,3)
              else: 'else' (140,2)-(140,6)
              compound_statement (141,2)-(148,3)
                {: '{' (141,2)-(141,3)
                if_statement (142,6)-(147,7)
                  if: 'if' (142,6)-(142,8)
                  parenthesized_expression (142,9)-(144,30)
                    (: '(' (142,9)-(142,10)
                    unary_expression (142,10)-(144,29)
                      !: '!' (142,10)-(142,11)
                      parenthesized_expression (142,11)-(144,29)
                        (: '(' (142,11)-(142,12)
                        assignment_expression (142,12)-(144,28)
                          identifier: 'node' (142,12)-(142,16)
                          =: '=' (142,17)-(142,18)
                          call_expression (142,19)-(144,28)
                            identifier: 'stringsubst' (142,19)-(142,30)
                            argument_list (142,30)-(144,28)
                              (: '(' (142,30)-(142,31)
                              identifier: 'list' (142,31)-(142,35)
                              ,: ',' (142,35)-(142,36)
                              identifier: 'node' (142,37)-(142,41)
                              ,: ',' (142,41)-(142,42)
                              binary_expression (143,10)-(143,51)
                                identifier: 'flags' (143,10)-(143,15)
                                &: '&' (143,16)-(143,17)
                                unary_expression (143,18)-(143,51)
                                  ~: '~' (143,18)-(143,19)
                                  parenthesized_expression (143,19)-(143,51)
                                    (: '(' (143,19)-(143,20)
                                    binary_expression (143,20)-(143,50)
                                      identifier: 'PREFORK_TYPESET' (143,20)-(143,35)
                                      |: '|' (143,35)-(143,36)
                                      identifier: 'PREFORK_ASSIGN' (143,36)-(143,50)
                                    ): ')' (143,50)-(143,51)
                              ,: ',' (143,51)-(143,52)
                              identifier: 'ret_flags' (144,10)-(144,19)
                              ,: ',' (144,19)-(144,20)
                              identifier: 'asssub' (144,21)-(144,27)
                              ): ')' (144,27)-(144,28)
                        ): ')' (144,28)-(144,29)
                    ): ')' (144,29)-(144,30)
                  compound_statement (144,31)-(147,7)
                    {: '{' (144,31)-(144,32)
                    expression_statement (145,3)-(145,21)
                      call_expression (145,3)-(145,20)
                        identifier: 'unqueue_signals' (145,3)-(145,18)
                        argument_list (145,18)-(145,20)
                          (: '(' (145,18)-(145,19)
                          ): ')' (145,19)-(145,20)
                      ;: ';' (145,20)-(145,21)
                    return_statement (146,3)-(146,10)
                      return: 'return' (146,3)-(146,9)
                      ;: ';' (146,9)-(146,10)
                    }: '}' (147,6)-(147,7)
                }: '}' (148,2)-(148,3)
          expression_statement (149,2)-(149,16)
            call_expression (149,2)-(149,15)
              identifier: 'incnode' (149,2)-(149,9)
              argument_list (149,9)-(149,15)
                (: '(' (149,9)-(149,10)
                identifier: 'node' (149,10)-(149,14)
                ): ')' (149,14)-(149,15)
            ;: ';' (149,15)-(149,16)
          }: '}' (150,5)-(150,6)
      if_statement (151,5)-(164,6)
        if: 'if' (151,5)-(151,7)
        parenthesized_expression (151,8)-(151,32)
          (: '(' (151,8)-(151,9)
          call_expression (151,9)-(151,31)
            identifier: 'isset' (151,9)-(151,14)
            argument_list (151,14)-(151,31)
              (: '(' (151,14)-(151,15)
              identifier: 'SHFILEEXPANSION' (151,15)-(151,30)
              ): ')' (151,30)-(151,31)
          ): ')' (151,31)-(151,32)
        compound_statement (151,33)-(164,6)
          {: '{' (151,33)-(151,34)
          comment: '/*
	 * stringsubst() may insert new nodes, so doesn't work
	 * well in the same loop as file expansion.
	 */' (152,2)-(155,5)
          for_statement (156,2)-(163,3)
            for: 'for' (156,2)-(156,5)
            (: '(' (156,6)-(156,7)
            assignment_expression (156,7)-(156,29)
              identifier: 'node' (156,7)-(156,11)
              =: '=' (156,12)-(156,13)
              call_expression (156,14)-(156,29)
                identifier: 'firstnode' (156,14)-(156,23)
                argument_list (156,23)-(156,29)
                  (: '(' (156,23)-(156,24)
                  identifier: 'list' (156,24)-(156,28)
                  ): ')' (156,28)-(156,29)
            ;: ';' (156,29)-(156,30)
            identifier: 'node' (156,31)-(156,35)
            ;: ';' (156,35)-(156,36)
            call_expression (156,37)-(156,50)
              identifier: 'incnode' (156,37)-(156,44)
              argument_list (156,44)-(156,50)
                (: '(' (156,44)-(156,45)
                identifier: 'node' (156,45)-(156,49)
                ): ')' (156,49)-(156,50)
            ): ')' (156,50)-(156,51)
            compound_statement (156,52)-(163,3)
              {: '{' (156,52)-(156,53)
              if_statement (157,6)-(162,7)
                if: 'if' (157,6)-(157,8)
                parenthesized_expression (157,9)-(159,30)
                  (: '(' (157,9)-(157,10)
                  unary_expression (157,10)-(159,29)
                    !: '!' (157,10)-(157,11)
                    parenthesized_expression (157,11)-(159,29)
                      (: '(' (157,11)-(157,12)
                      assignment_expression (157,12)-(159,28)
                        identifier: 'node' (157,12)-(157,16)
                        =: '=' (157,17)-(157,18)
                        call_expression (157,19)-(159,28)
                          identifier: 'stringsubst' (157,19)-(157,30)
                          argument_list (157,30)-(159,28)
                            (: '(' (157,30)-(157,31)
                            identifier: 'list' (157,31)-(157,35)
                            ,: ',' (157,35)-(157,36)
                            identifier: 'node' (157,37)-(157,41)
                            ,: ',' (157,41)-(157,42)
                            binary_expression (158,10)-(158,51)
                              identifier: 'flags' (158,10)-(158,15)
                              &: '&' (158,16)-(158,17)
                              unary_expression (158,18)-(158,51)
                                ~: '~' (158,18)-(158,19)
                                parenthesized_expression (158,19)-(158,51)
                                  (: '(' (158,19)-(158,20)
                                  binary_expression (158,20)-(158,50)
                                    identifier: 'PREFORK_TYPESET' (158,20)-(158,35)
                                    |: '|' (158,35)-(158,36)
                                    identifier: 'PREFORK_ASSIGN' (158,36)-(158,50)
                                  ): ')' (158,50)-(158,51)
                            ,: ',' (158,51)-(158,52)
                            identifier: 'ret_flags' (159,10)-(159,19)
                            ,: ',' (159,19)-(159,20)
                            identifier: 'asssub' (159,21)-(159,27)
                            ): ')' (159,27)-(159,28)
                      ): ')' (159,28)-(159,29)
                  ): ')' (159,29)-(159,30)
                compound_statement (159,31)-(162,7)
                  {: '{' (159,31)-(159,32)
                  expression_statement (160,3)-(160,21)
                    call_expression (160,3)-(160,20)
                      identifier: 'unqueue_signals' (160,3)-(160,18)
                      argument_list (160,18)-(160,20)
                        (: '(' (160,18)-(160,19)
                        ): ')' (160,19)-(160,20)
                    ;: ';' (160,20)-(160,21)
                  return_statement (161,3)-(161,10)
                    return: 'return' (161,3)-(161,9)
                    ;: ';' (161,9)-(161,10)
                  }: '}' (162,6)-(162,7)
              }: '}' (163,2)-(163,3)
          }: '}' (164,5)-(164,6)
      for_statement (165,5)-(191,6)
        for: 'for' (165,5)-(165,8)
        (: '(' (165,9)-(165,10)
        assignment_expression (165,10)-(165,32)
          identifier: 'node' (165,10)-(165,14)
          =: '=' (165,15)-(165,16)
          call_expression (165,17)-(165,32)
            identifier: 'firstnode' (165,17)-(165,26)
            argument_list (165,26)-(165,32)
              (: '(' (165,26)-(165,27)
              identifier: 'list' (165,27)-(165,31)
              ): ')' (165,31)-(165,32)
        ;: ';' (165,32)-(165,33)
        identifier: 'node' (165,34)-(165,38)
        ;: ';' (165,38)-(165,39)
        call_expression (165,40)-(165,53)
          identifier: 'incnode' (165,40)-(165,47)
          argument_list (165,47)-(165,53)
            (: '(' (165,47)-(165,48)
            identifier: 'node' (165,48)-(165,52)
            ): ')' (165,52)-(165,53)
        ): ')' (165,53)-(165,54)
        compound_statement (165,55)-(191,6)
          {: '{' (165,55)-(165,56)
          if_statement (166,2)-(167,15)
            if: 'if' (166,2)-(166,4)
            parenthesized_expression (166,5)-(166,19)
              (: '(' (166,5)-(166,6)
              binary_expression (166,6)-(166,18)
                identifier: 'node' (166,6)-(166,10)
                ==: '==' (166,11)-(166,13)
                identifier: 'stop' (166,14)-(166,18)
              ): ')' (166,18)-(166,19)
            expression_statement (167,6)-(167,15)
              assignment_expression (167,6)-(167,14)
                identifier: 'keep' (167,6)-(167,10)
                =: '=' (167,11)-(167,12)
                number_literal: '0' (167,13)-(167,14)
              ;: ';' (167,14)-(167,15)
          if_statement (168,2)-(186,27)
            if: 'if' (168,2)-(168,4)
            parenthesized_expression (168,5)-(168,29)
              (: '(' (168,5)-(168,6)
              pointer_expression (168,6)-(168,28)
                *: '*' (168,6)-(168,7)
                cast_expression (168,7)-(168,28)
                  (: '(' (168,7)-(168,8)
                  type_descriptor (168,8)-(168,14)
                    primitive_type: 'char' (168,8)-(168,12)
                    abstract_pointer_declarator (168,13)-(168,14)
                      *: '*' (168,13)-(168,14)
                  ): ')' (168,14)-(168,15)
                  call_expression (168,15)-(168,28)
                    identifier: 'getdata' (168,15)-(168,22)
                    argument_list (168,22)-(168,28)
                      (: '(' (168,22)-(168,23)
                      identifier: 'node' (168,23)-(168,27)
                      ): ')' (168,27)-(168,28)
              ): ')' (168,28)-(168,29)
            compound_statement (168,30)-(183,3)
              {: '{' (168,30)-(168,31)
              expression_statement (169,6)-(169,32)
                call_expression (169,6)-(169,31)
                  identifier: 'remnulargs' (169,6)-(169,16)
                  argument_list (169,16)-(169,31)
                    (: '(' (169,16)-(169,17)
                    call_expression (169,17)-(169,30)
                      identifier: 'getdata' (169,17)-(169,24)
                      argument_list (169,24)-(169,30)
                        (: '(' (169,24)-(169,25)
                        identifier: 'node' (169,25)-(169,29)
                        ): ')' (169,29)-(169,30)
                    ): ')' (169,30)-(169,31)
                ;: ';' (169,31)-(169,32)
              if_statement (170,6)-(177,7)
                if: 'if' (170,6)-(170,8)
                parenthesized_expression (170,9)-(170,59)
                  (: '(' (170,9)-(170,10)
                  binary_expression (170,10)-(170,58)
                    call_expression (170,10)-(170,29)
                      identifier: 'unset' (170,10)-(170,15)
                      argument_list (170,15)-(170,29)
                        (: '(' (170,15)-(170,16)
                        identifier: 'IGNOREBRACES' (170,16)-(170,28)
                        ): ')' (170,28)-(170,29)
                    &&: '&&' (170,30)-(170,32)
                    unary_expression (170,33)-(170,58)
                      !: '!' (170,33)-(170,34)
                      parenthesized_expression (170,34)-(170,58)
                        (: '(' (170,34)-(170,35)
                        binary_expression (170,35)-(170,57)
                          identifier: 'flags' (170,35)-(170,40)
                          &: '&' (170,41)-(170,42)
                          identifier: 'PREFORK_SINGLE' (170,43)-(170,57)
                        ): ')' (170,57)-(170,58)
                  ): ')' (170,58)-(170,59)
                compound_statement (170,60)-(177,7)
                  {: '{' (170,60)-(170,61)
                  if_statement (171,3)-(172,29)
                    if: 'if' (171,3)-(171,5)
                    parenthesized_expression (171,6)-(171,13)
                      (: '(' (171,6)-(171,7)
                      unary_expression (171,7)-(171,12)
                        !: '!' (171,7)-(171,8)
                        identifier: 'keep' (171,8)-(171,12)
                      ): ')' (171,12)-(171,13)
                    expression_statement (172,7)-(172,29)
                      assignment_expression (172,7)-(172,28)
                        identifier: 'stop' (172,7)-(172,11)
                        =: '=' (172,12)-(172,13)
                        call_expression (172,14)-(172,28)
                          identifier: 'nextnode' (172,14)-(172,22)
                          argument_list (172,22)-(172,28)
                            (: '(' (172,22)-(172,23)
                            identifier: 'node' (172,23)-(172,27)
                            ): ')' (172,27)-(172,28)
                      ;: ';' (172,28)-(172,29)
                  while_statement (173,3)-(176,4)
                    while: 'while' (173,3)-(173,8)
                    parenthesized_expression (173,9)-(173,35)
                      (: '(' (173,9)-(173,10)
                      call_expression (173,10)-(173,34)
                        identifier: 'hasbraces' (173,10)-(173,19)
                        argument_list (173,19)-(173,34)
                          (: '(' (173,19)-(173,20)
                          call_expression (173,20)-(173,33)
                            identifier: 'getdata' (173,20)-(173,27)
                            argument_list (173,27)-(173,33)
                              (: '(' (173,27)-(173,28)
                              identifier: 'node' (173,28)-(173,32)
                              ): ')' (173,32)-(173,33)
                          ): ')' (173,33)-(173,34)
                      ): ')' (173,34)-(173,35)
                    compound_statement (173,36)-(176,4)
                      {: '{' (173,36)-(173,37)
                      expression_statement (174,7)-(174,16)
                        assignment_expression (174,7)-(174,15)
                          identifier: 'keep' (174,7)-(174,11)
                          =: '=' (174,12)-(174,13)
                          number_literal: '1' (174,14)-(174,15)
                        ;: ';' (174,15)-(174,16)
                      expression_statement (175,7)-(175,32)
                        call_expression (175,7)-(175,31)
                          identifier: 'xpandbraces' (175,7)-(175,18)
                          argument_list (175,18)-(175,31)
                            (: '(' (175,18)-(175,19)
                            identifier: 'list' (175,19)-(175,23)
                            ,: ',' (175,23)-(175,24)
                            pointer_expression (175,25)-(175,30)
                              &: '&' (175,25)-(175,26)
                              identifier: 'node' (175,26)-(175,30)
                            ): ')' (175,30)-(175,31)
                        ;: ';' (175,31)-(175,32)
                      }: '}' (176,3)-(176,4)
                  }: '}' (177,6)-(177,7)
              if_statement (178,6)-(182,7)
                if: 'if' (178,6)-(178,8)
                parenthesized_expression (178,9)-(178,33)
                  (: '(' (178,9)-(178,10)
                  call_expression (178,10)-(178,32)
                    identifier: 'unset' (178,10)-(178,15)
                    argument_list (178,15)-(178,32)
                      (: '(' (178,15)-(178,16)
                      identifier: 'SHFILEEXPANSION' (178,16)-(178,31)
                      ): ')' (178,31)-(178,32)
                  ): ')' (178,32)-(178,33)
                compound_statement (178,34)-(182,7)
                  {: '{' (178,34)-(178,35)
                  declaration (179,3)-(179,38)
                    primitive_type: 'char' (179,3)-(179,7)
                    init_declarator (179,8)-(179,37)
                      pointer_declarator (179,8)-(179,13)
                        *: '*' (179,8)-(179,9)
                        identifier: 'cptr' (179,9)-(179,13)
                      =: '=' (179,14)-(179,15)
                      cast_expression (179,16)-(179,37)
                        (: '(' (179,16)-(179,17)
                        type_descriptor (179,17)-(179,23)
                          primitive_type: 'char' (179,17)-(179,21)
                          abstract_pointer_declarator (179,22)-(179,23)
                            *: '*' (179,22)-(179,23)
                        ): ')' (179,23)-(179,24)
                        call_expression (179,24)-(179,37)
                          identifier: 'getdata' (179,24)-(179,31)
                          argument_list (179,31)-(179,37)
                            (: '(' (179,31)-(179,32)
                            identifier: 'node' (179,32)-(179,36)
                            ): ')' (179,36)-(179,37)
                    ;: ';' (179,37)-(179,38)
                  expression_statement (180,3)-(180,60)
                    call_expression (180,3)-(180,59)
                      identifier: 'filesub' (180,3)-(180,10)
                      argument_list (180,10)-(180,59)
                        (: '(' (180,10)-(180,11)
                        pointer_expression (180,11)-(180,16)
                          &: '&' (180,11)-(180,12)
                          identifier: 'cptr' (180,12)-(180,16)
                        ,: ',' (180,16)-(180,17)
                        binary_expression (180,18)-(180,58)
                          identifier: 'flags' (180,18)-(180,23)
                          &: '&' (180,24)-(180,25)
                          parenthesized_expression (180,26)-(180,58)
                            (: '(' (180,26)-(180,27)
                            binary_expression (180,27)-(180,57)
                              identifier: 'PREFORK_TYPESET' (180,27)-(180,42)
                              |: '|' (180,42)-(180,43)
                              identifier: 'PREFORK_ASSIGN' (180,43)-(180,57)
                            ): ')' (180,57)-(180,58)
                        ): ')' (180,58)-(180,59)
                    ;: ';' (180,59)-(180,60)
                  expression_statement (181,3)-(181,23)
                    call_expression (181,3)-(181,22)
                      identifier: 'setdata' (181,3)-(181,10)
                      argument_list (181,10)-(181,22)
                        (: '(' (181,10)-(181,11)
                        identifier: 'node' (181,11)-(181,15)
                        ,: ',' (181,15)-(181,16)
                        identifier: 'cptr' (181,17)-(181,21)
                        ): ')' (181,21)-(181,22)
                    ;: ';' (181,22)-(181,23)
                  }: '}' (182,6)-(182,7)
              }: '}' (183,2)-(183,3)
            else_clause (183,4)-(186,27)
              else: 'else' (183,4)-(183,8)
              if_statement (183,9)-(186,27)
                if: 'if' (183,9)-(183,11)
                parenthesized_expression (183,12)-(185,12)
                  (: '(' (183,12)-(183,13)
                  binary_expression (183,13)-(185,11)
                    binary_expression (183,13)-(184,39)
                      unary_expression (183,13)-(183,38)
                        !: '!' (183,13)-(183,14)
                        parenthesized_expression (183,14)-(183,38)
                          (: '(' (183,14)-(183,15)
                          binary_expression (183,15)-(183,37)
                            identifier: 'flags' (183,15)-(183,20)
                            &: '&' (183,21)-(183,22)
                            identifier: 'PREFORK_SINGLE' (183,23)-(183,37)
                          ): ')' (183,37)-(183,38)
                      &&: '&&' (183,39)-(183,41)
                      unary_expression (184,6)-(184,39)
                        !: '!' (184,6)-(184,7)
                        parenthesized_expression (184,7)-(184,39)
                          (: '(' (184,7)-(184,8)
                          binary_expression (184,8)-(184,38)
                            pointer_expression (184,8)-(184,18)
                              *: '*' (184,8)-(184,9)
                              identifier: 'ret_flags' (184,9)-(184,18)
                            &: '&' (184,19)-(184,20)
                            identifier: 'PREFORK_KEY_VALUE' (184,21)-(184,38)
                          ): ')' (184,38)-(184,39)
                    &&: '&&' (184,40)-(184,42)
                    unary_expression (185,6)-(185,11)
                      !: '!' (185,6)-(185,7)
                      identifier: 'keep' (185,7)-(185,11)
                  ): ')' (185,11)-(185,12)
                expression_statement (186,6)-(186,27)
                  call_expression (186,6)-(186,26)
                    identifier: 'uremnode' (186,6)-(186,14)
                    argument_list (186,14)-(186,26)
                      (: '(' (186,14)-(186,15)
                      identifier: 'list' (186,15)-(186,19)
                      ,: ',' (186,19)-(186,20)
                      identifier: 'node' (186,21)-(186,25)
                      ): ')' (186,25)-(186,26)
                  ;: ';' (186,26)-(186,27)
          if_statement (187,2)-(190,3)
            if: 'if' (187,2)-(187,4)
            parenthesized_expression (187,5)-(187,14)
              (: '(' (187,5)-(187,6)
              identifier: 'errflag' (187,6)-(187,13)
              ): ')' (187,13)-(187,14)
            compound_statement (187,15)-(190,3)
              {: '{' (187,15)-(187,16)
              expression_statement (188,6)-(188,24)
                call_expression (188,6)-(188,23)
                  identifier: 'unqueue_signals' (188,6)-(188,21)
                  argument_list (188,21)-(188,23)
                    (: '(' (188,21)-(188,22)
                    ): ')' (188,22)-(188,23)
                ;: ';' (188,23)-(188,24)
              return_statement (189,6)-(189,13)
                return: 'return' (189,6)-(189,12)
                ;: ';' (189,12)-(189,13)
              }: '}' (190,2)-(190,3)
          }: '}' (191,5)-(191,6)
      expression_statement (192,5)-(192,23)
        call_expression (192,5)-(192,22)
          identifier: 'unqueue_signals' (192,5)-(192,20)
          argument_list (192,20)-(192,22)
            (: '(' (192,20)-(192,21)
            ): ')' (192,21)-(192,22)
        ;: ';' (192,22)-(192,23)
      }: '}' (193,1)-(193,2)
  comment: '/*
 * Perform $'...' quoting.  The arguments are
 *   strstart   The start of the string
 *   pstrdpos   Initially, *pstrdpos is the position where the $ of the $'
 *              occurs.  It will be updated to the next character after the
 *              last ' of the $'...'.
 * The return value is the entire allocated string from strstart on the heap.
 * Note the original string may be modified in the process.
 */' (195,1)-(203,4)
  comment: '/**/' (204,1)-(204,5)
  function_definition (205,1)-(233,2)
    storage_class_specifier (205,1)-(205,7)
      static: 'static' (205,1)-(205,7)
    primitive_type: 'char' (205,8)-(205,12)
    pointer_declarator (205,13)-(206,50)
      *: '*' (205,13)-(205,14)
      function_declarator (206,1)-(206,50)
        identifier: 'stringsubstquote' (206,1)-(206,17)
        parameter_list (206,17)-(206,50)
          (: '(' (206,17)-(206,18)
          parameter_declaration (206,18)-(206,32)
            primitive_type: 'char' (206,18)-(206,22)
            pointer_declarator (206,23)-(206,32)
              *: '*' (206,23)-(206,24)
              identifier: 'strstart' (206,24)-(206,32)
          ,: ',' (206,32)-(206,33)
          parameter_declaration (206,34)-(206,49)
            primitive_type: 'char' (206,34)-(206,38)
            pointer_declarator (206,39)-(206,49)
              *: '*' (206,39)-(206,40)
              pointer_declarator (206,40)-(206,49)
                *: '*' (206,40)-(206,41)
                identifier: 'pstrdpos' (206,41)-(206,49)
          ): ')' (206,49)-(206,50)
    compound_statement (207,1)-(233,2)
      {: '{' (207,1)-(207,2)
      declaration (208,5)-(208,13)
        primitive_type: 'int' (208,5)-(208,8)
        identifier: 'len' (208,9)-(208,12)
        ;: ';' (208,12)-(208,13)
      declaration (209,5)-(209,49)
        primitive_type: 'char' (209,5)-(209,9)
        init_declarator (209,10)-(209,30)
          pointer_declarator (209,10)-(209,18)
            *: '*' (209,10)-(209,11)
            identifier: 'strdpos' (209,11)-(209,18)
          =: '=' (209,19)-(209,20)
          pointer_expression (209,21)-(209,30)
            *: '*' (209,21)-(209,22)
            identifier: 'pstrdpos' (209,22)-(209,30)
        ,: ',' (209,30)-(209,31)
        pointer_declarator (209,32)-(209,39)
          *: '*' (209,32)-(209,33)
          identifier: 'strsub' (209,33)-(209,39)
        ,: ',' (209,39)-(209,40)
        pointer_declarator (209,41)-(209,48)
          *: '*' (209,41)-(209,42)
          identifier: 'strret' (209,42)-(209,48)
        ;: ';' (209,48)-(209,49)
      expression_statement (211,5)-(212,35)
        assignment_expression (211,5)-(212,34)
          identifier: 'strsub' (211,5)-(211,11)
          =: '=' (211,12)-(211,13)
          call_expression (211,14)-(212,34)
            identifier: 'getkeystring' (211,14)-(211,26)
            argument_list (211,26)-(212,34)
              (: '(' (211,26)-(211,27)
              binary_expression (211,27)-(211,36)
                identifier: 'strdpos' (211,27)-(211,34)
                +: '+' (211,34)-(211,35)
                number_literal: '2' (211,35)-(211,36)
              ,: ',' (211,36)-(211,37)
              pointer_expression (211,38)-(211,42)
                &: '&' (211,38)-(211,39)
                identifier: 'len' (211,39)-(211,42)
              ,: ',' (211,42)-(211,43)
              identifier: 'GETKEYS_DOLLARS_QUOTE' (212,6)-(212,27)
              ,: ',' (212,27)-(212,28)
              null (212,29)-(212,33)
                NULL: 'NULL' (212,29)-(212,33)
              ): ')' (212,33)-(212,34)
        ;: ';' (212,34)-(212,35)
      expression_statement (213,5)-(213,14)
        assignment_expression (213,5)-(213,13)
          identifier: 'len' (213,5)-(213,8)
          +=: '+=' (213,9)-(213,11)
          number_literal: '2' (213,12)-(213,13)
        ;: ';' (213,13)-(213,14)
      comment: '/* measured from strdpos */' (213,17)-(213,44)
      if_statement (215,5)-(228,6)
        if: 'if' (215,5)-(215,7)
        parenthesized_expression (215,8)-(215,29)
          (: '(' (215,8)-(215,9)
          binary_expression (215,9)-(215,28)
            identifier: 'strstart' (215,9)-(215,17)
            !=: '!=' (215,18)-(215,20)
            identifier: 'strdpos' (215,21)-(215,28)
          ): ')' (215,28)-(215,29)
        compound_statement (215,30)-(221,6)
          {: '{' (215,30)-(215,31)
          expression_statement (216,2)-(216,18)
            assignment_expression (216,2)-(216,17)
              pointer_expression (216,2)-(216,10)
                *: '*' (216,2)-(216,3)
                identifier: 'strdpos' (216,3)-(216,10)
              =: '=' (216,11)-(216,12)
              char_literal (216,13)-(216,17)
                ': ''' (216,13)-(216,14)
                escape_sequence: '\0' (216,14)-(216,16)
                ': ''' (216,16)-(216,17)
            ;: ';' (216,17)-(216,18)
          if_statement (217,2)-(220,40)
            if: 'if' (217,2)-(217,4)
            parenthesized_expression (217,5)-(217,19)
              (: '(' (217,5)-(217,6)
              subscript_expression (217,6)-(217,18)
                identifier: 'strdpos' (217,6)-(217,13)
                [: '[' (217,13)-(217,14)
                identifier: 'len' (217,14)-(217,17)
                ]: ']' (217,17)-(217,18)
              ): ')' (217,18)-(217,19)
            expression_statement (218,6)-(218,57)
              assignment_expression (218,6)-(218,56)
                identifier: 'strret' (218,6)-(218,12)
                =: '=' (218,13)-(218,14)
                call_expression (218,15)-(218,56)
                  identifier: 'zhtricat' (218,15)-(218,23)
                  argument_list (218,23)-(218,56)
                    (: '(' (218,23)-(218,24)
                    identifier: 'strstart' (218,24)-(218,32)
                    ,: ',' (218,32)-(218,33)
                    identifier: 'strsub' (218,34)-(218,40)
                    ,: ',' (218,40)-(218,41)
                    binary_expression (218,42)-(218,55)
                      identifier: 'strdpos' (218,42)-(218,49)
                      +: '+' (218,50)-(218,51)
                      identifier: 'len' (218,52)-(218,55)
                    ): ')' (218,55)-(218,56)
              ;: ';' (218,56)-(218,57)
            else_clause (219,2)-(220,40)
              else: 'else' (219,2)-(219,6)
              expression_statement (220,6)-(220,40)
                assignment_expression (220,6)-(220,39)
                  identifier: 'strret' (220,6)-(220,12)
                  =: '=' (220,13)-(220,14)
                  call_expression (220,15)-(220,39)
                    identifier: 'dyncat' (220,15)-(220,21)
                    argument_list (220,21)-(220,39)
                      (: '(' (220,21)-(220,22)
                      identifier: 'strstart' (220,22)-(220,30)
                      ,: ',' (220,30)-(220,31)
                      identifier: 'strsub' (220,32)-(220,38)
                      ): ')' (220,38)-(220,39)
                ;: ';' (220,39)-(220,40)
          }: '}' (221,5)-(221,6)
        else_clause (221,7)-(228,6)
          else: 'else' (221,7)-(221,11)
          if_statement (221,12)-(228,6)
            if: 'if' (221,12)-(221,14)
            parenthesized_expression (221,15)-(221,29)
              (: '(' (221,15)-(221,16)
              subscript_expression (221,16)-(221,28)
                identifier: 'strdpos' (221,16)-(221,23)
                [: '[' (221,23)-(221,24)
                identifier: 'len' (221,24)-(221,27)
                ]: ']' (221,27)-(221,28)
              ): ')' (221,28)-(221,29)
            expression_statement (222,2)-(222,41)
              assignment_expression (222,2)-(222,40)
                identifier: 'strret' (222,2)-(222,8)
                =: '=' (222,9)-(222,10)
                call_expression (222,11)-(222,40)
                  identifier: 'dyncat' (222,11)-(222,17)
                  argument_list (222,17)-(222,40)
                    (: '(' (222,17)-(222,18)
                    identifier: 'strsub' (222,18)-(222,24)
                    ,: ',' (222,24)-(222,25)
                    binary_expression (222,26)-(222,39)
                      identifier: 'strdpos' (222,26)-(222,33)
                      +: '+' (222,34)-(222,35)
                      identifier: 'len' (222,36)-(222,39)
                    ): ')' (222,39)-(222,40)
              ;: ';' (222,40)-(222,41)
            else_clause (223,5)-(228,6)
              else: 'else' (223,5)-(223,9)
              if_statement (223,10)-(228,6)
                if: 'if' (223,10)-(223,12)
                parenthesized_expression (223,13)-(223,22)
                  (: '(' (223,13)-(223,14)
                  pointer_expression (223,14)-(223,21)
                    *: '*' (223,14)-(223,15)
                    identifier: 'strsub' (223,15)-(223,21)
                  ): ')' (223,21)-(223,22)
                expression_statement (224,2)-(224,18)
                  assignment_expression (224,2)-(224,17)
                    identifier: 'strret' (224,2)-(224,8)
                    =: '=' (224,9)-(224,10)
                    identifier: 'strsub' (224,11)-(224,17)
                  ;: ';' (224,17)-(224,18)
                else_clause (225,5)-(228,6)
                  else: 'else' (225,5)-(225,9)
                  compound_statement (225,10)-(228,6)
                    {: '{' (225,10)-(225,11)
                    comment: '/* This ensures a $'' doesn't get elided. */' (226,2)-(226,46)
                    expression_statement (227,2)-(227,32)
                      assignment_expression (227,2)-(227,31)
                        identifier: 'strret' (227,2)-(227,8)
                        =: '=' (227,9)-(227,10)
                        call_expression (227,11)-(227,31)
                          identifier: 'dupstring' (227,11)-(227,20)
                          argument_list (227,20)-(227,31)
                            (: '(' (227,20)-(227,21)
                            identifier: 'nulstring' (227,21)-(227,30)
                            ): ')' (227,30)-(227,31)
                      ;: ';' (227,31)-(227,32)
                    }: '}' (228,5)-(228,6)
      expression_statement (230,5)-(230,64)
        assignment_expression (230,5)-(230,63)
          pointer_expression (230,5)-(230,14)
            *: '*' (230,5)-(230,6)
            identifier: 'pstrdpos' (230,6)-(230,14)
          =: '=' (230,15)-(230,16)
          binary_expression (230,17)-(230,63)
            binary_expression (230,17)-(230,46)
              identifier: 'strret' (230,17)-(230,23)
              +: '+' (230,24)-(230,25)
              parenthesized_expression (230,26)-(230,46)
                (: '(' (230,26)-(230,27)
                binary_expression (230,27)-(230,45)
                  identifier: 'strdpos' (230,27)-(230,34)
                  -: '-' (230,35)-(230,36)
                  identifier: 'strstart' (230,37)-(230,45)
                ): ')' (230,45)-(230,46)
            +: '+' (230,47)-(230,48)
            call_expression (230,49)-(230,63)
              identifier: 'strlen' (230,49)-(230,55)
              argument_list (230,55)-(230,63)
                (: '(' (230,55)-(230,56)
                identifier: 'strsub' (230,56)-(230,62)
                ): ')' (230,62)-(230,63)
        ;: ';' (230,63)-(230,64)
      return_statement (232,5)-(232,19)
        return: 'return' (232,5)-(232,11)
        identifier: 'strret' (232,12)-(232,18)
        ;: ';' (232,18)-(232,19)
      }: '}' (233,1)-(233,2)
  comment: '/**/' (235,1)-(235,5)
  function_definition (236,1)-(443,2)
    storage_class_specifier (236,1)-(236,7)
      static: 'static' (236,1)-(236,7)
    type_identifier: 'LinkNode' (236,8)-(236,16)
    function_declarator (237,1)-(238,17)
      identifier: 'stringsubst' (237,1)-(237,12)
      parameter_list (237,12)-(238,17)
        (: '(' (237,12)-(237,13)
        parameter_declaration (237,13)-(237,26)
          type_identifier: 'LinkList' (237,13)-(237,21)
          identifier: 'list' (237,22)-(237,26)
        ,: ',' (237,26)-(237,27)
        parameter_declaration (237,28)-(237,41)
          type_identifier: 'LinkNode' (237,28)-(237,36)
          identifier: 'node' (237,37)-(237,41)
        ,: ',' (237,41)-(237,42)
        parameter_declaration (237,43)-(237,55)
          primitive_type: 'int' (237,43)-(237,46)
          identifier: 'pf_flags' (237,47)-(237,55)
        ,: ',' (237,55)-(237,56)
        parameter_declaration (237,57)-(237,71)
          primitive_type: 'int' (237,57)-(237,60)
          pointer_declarator (237,61)-(237,71)
            *: '*' (237,61)-(237,62)
            identifier: 'ret_flags' (237,62)-(237,71)
        ,: ',' (237,71)-(237,72)
        parameter_declaration (238,6)-(238,16)
          primitive_type: 'int' (238,6)-(238,9)
          identifier: 'asssub' (238,10)-(238,16)
        ): ')' (238,16)-(238,17)
    compound_statement (239,1)-(443,2)
      {: '{' (239,1)-(239,2)
      declaration (240,5)-(240,12)
        primitive_type: 'int' (240,5)-(240,8)
        identifier: 'qt' (240,9)-(240,11)
        ;: ';' (240,11)-(240,12)
      declaration (241,5)-(241,40)
        primitive_type: 'char' (241,5)-(241,9)
        init_declarator (241,10)-(241,39)
          pointer_declarator (241,10)-(241,15)
            *: '*' (241,10)-(241,11)
            identifier: 'str3' (241,11)-(241,15)
          =: '=' (241,16)-(241,17)
          cast_expression (241,18)-(241,39)
            (: '(' (241,18)-(241,19)
            type_descriptor (241,19)-(241,25)
              primitive_type: 'char' (241,19)-(241,23)
              abstract_pointer_declarator (241,24)-(241,25)
                *: '*' (241,24)-(241,25)
            ): ')' (241,25)-(241,26)
            call_expression (241,26)-(241,39)
              identifier: 'getdata' (241,26)-(241,33)
              argument_list (241,33)-(241,39)
                (: '(' (241,33)-(241,34)
                identifier: 'node' (241,34)-(241,38)
                ): ')' (241,38)-(241,39)
        ;: ';' (241,39)-(241,40)
      declaration (242,5)-(242,26)
        primitive_type: 'char' (242,5)-(242,9)
        init_declarator (242,10)-(242,22)
          pointer_declarator (242,10)-(242,14)
            *: '*' (242,10)-(242,11)
            identifier: 'str' (242,11)-(242,14)
          =: '=' (242,16)-(242,17)
          identifier: 'str3' (242,18)-(242,22)
        ,: ',' (242,22)-(242,23)
        identifier: 'c' (242,24)-(242,25)
        ;: ';' (242,25)-(242,26)
      while_statement (244,5)-(279,6)
        while: 'while' (244,5)-(244,10)
        parenthesized_expression (244,11)-(244,35)
          (: '(' (244,11)-(244,12)
          binary_expression (244,12)-(244,34)
            unary_expression (244,12)-(244,20)
              !: '!' (244,12)-(244,13)
              identifier: 'errflag' (244,13)-(244,20)
            &&: '&&' (244,21)-(244,23)
            parenthesized_expression (244,24)-(244,34)
              (: '(' (244,24)-(244,25)
              assignment_expression (244,25)-(244,33)
                identifier: 'c' (244,25)-(244,26)
                =: '=' (244,27)-(244,28)
                pointer_expression (244,29)-(244,33)
                  *: '*' (244,29)-(244,30)
                  identifier: 'str' (244,30)-(244,33)
              ): ')' (244,33)-(244,34)
          ): ')' (244,34)-(244,35)
        compound_statement (244,36)-(279,6)
          {: '{' (244,36)-(244,37)
          if_statement (245,2)-(278,12)
            if: 'if' (245,2)-(245,4)
            parenthesized_expression (245,5)-(247,25)
              (: '(' (245,5)-(245,6)
              binary_expression (245,6)-(247,24)
                parenthesized_expression (245,6)-(246,36)
                  (: '(' (245,6)-(245,7)
                  binary_expression (245,7)-(246,35)
                    binary_expression (245,7)-(245,45)
                      binary_expression (245,7)-(245,26)
                        parenthesized_expression (245,7)-(245,17)
                          (: '(' (245,7)-(245,8)
                          assignment_expression (245,8)-(245,16)
                            identifier: 'c' (245,8)-(245,9)
                            =: '=' (245,10)-(245,11)
                            pointer_expression (245,12)-(245,16)
                              *: '*' (245,12)-(245,13)
                              identifier: 'str' (245,13)-(245,16)
                          ): ')' (245,16)-(245,17)
                        ==: '==' (245,18)-(245,20)
                        identifier: 'Inang' (245,21)-(245,26)
                      ||: '||' (245,27)-(245,29)
                      binary_expression (245,30)-(245,45)
                        identifier: 'c' (245,30)-(245,31)
                        ==: '==' (245,32)-(245,34)
                        identifier: 'OutangProc' (245,35)-(245,45)
                    ||: '||' (245,46)-(245,48)
                    parenthesized_expression (246,7)-(246,35)
                      (: '(' (246,7)-(246,8)
                      binary_expression (246,8)-(246,34)
                        binary_expression (246,8)-(246,19)
                          identifier: 'str' (246,8)-(246,11)
                          ==: '==' (246,12)-(246,14)
                          identifier: 'str3' (246,15)-(246,19)
                        &&: '&&' (246,20)-(246,22)
                        binary_expression (246,23)-(246,34)
                          identifier: 'c' (246,23)-(246,24)
                          ==: '==' (246,25)-(246,27)
                          identifier: 'Equals' (246,28)-(246,34)
                      ): ')' (246,34)-(246,35)
                  ): ')' (246,35)-(246,36)
                &&: '&&' (247,6)-(247,8)
                binary_expression (247,9)-(247,24)
                  subscript_expression (247,9)-(247,15)
                    identifier: 'str' (247,9)-(247,12)
                    [: '[' (247,12)-(247,13)
                    number_literal: '1' (247,13)-(247,14)
                    ]: ']' (247,14)-(247,15)
                  ==: '==' (247,16)-(247,18)
                  identifier: 'Inpar' (247,19)-(247,24)
              ): ')' (247,24)-(247,25)
            compound_statement (247,26)-(277,3)
              {: '{' (247,26)-(247,27)
              declaration (248,6)-(248,39)
                primitive_type: 'char' (248,6)-(248,10)
                pointer_declarator (248,11)-(248,17)
                  *: '*' (248,11)-(248,12)
                  identifier: 'subst' (248,12)-(248,17)
                ,: ',' (248,17)-(248,18)
                pointer_declarator (248,19)-(248,24)
                  *: '*' (248,19)-(248,20)
                  identifier: 'rest' (248,20)-(248,24)
                ,: ',' (248,24)-(248,25)
                pointer_declarator (248,26)-(248,31)
                  *: '*' (248,26)-(248,27)
                  identifier: 'snew' (248,27)-(248,31)
                ,: ',' (248,31)-(248,32)
                pointer_declarator (248,33)-(248,38)
                  *: '*' (248,33)-(248,34)
                  identifier: 'sptr' (248,34)-(248,38)
                ;: ';' (248,38)-(248,39)
              declaration (249,6)-(249,48)
                primitive_type: 'int' (249,6)-(249,9)
                init_declarator (249,10)-(249,30)
                  identifier: 'str3len' (249,10)-(249,17)
                  =: '=' (249,18)-(249,19)
                  binary_expression (249,20)-(249,30)
                    identifier: 'str' (249,20)-(249,23)
                    -: '-' (249,24)-(249,25)
                    identifier: 'str3' (249,26)-(249,30)
                ,: ',' (249,30)-(249,31)
                identifier: 'sublen' (249,32)-(249,38)
                ,: ',' (249,38)-(249,39)
                identifier: 'restlen' (249,40)-(249,47)
                ;: ';' (249,47)-(249,48)
              if_statement (251,6)-(254,37)
                if: 'if' (251,6)-(251,8)
                parenthesized_expression (251,9)-(251,40)
                  (: '(' (251,9)-(251,10)
                  binary_expression (251,10)-(251,39)
                    binary_expression (251,10)-(251,20)
                      identifier: 'c' (251,10)-(251,11)
                      ==: '==' (251,12)-(251,14)
                      identifier: 'Inang' (251,15)-(251,20)
                    ||: '||' (251,21)-(251,23)
                    binary_expression (251,24)-(251,39)
                      identifier: 'c' (251,24)-(251,25)
                      ==: '==' (251,26)-(251,28)
                      identifier: 'OutangProc' (251,29)-(251,39)
                  ): ')' (251,39)-(251,40)
                expression_statement (252,3)-(252,31)
                  assignment_expression (252,3)-(252,30)
                    identifier: 'subst' (252,3)-(252,8)
                    =: '=' (252,9)-(252,10)
                    call_expression (252,11)-(252,30)
                      identifier: 'getproc' (252,11)-(252,18)
                      argument_list (252,18)-(252,30)
                        (: '(' (252,18)-(252,19)
                        identifier: 'str' (252,19)-(252,22)
                        ,: ',' (252,22)-(252,23)
                        pointer_expression (252,24)-(252,29)
                          &: '&' (252,24)-(252,25)
                          identifier: 'rest' (252,25)-(252,29)
                        ): ')' (252,29)-(252,30)
                  ;: ';' (252,30)-(252,31)
                comment: '/* <(...) or >(...) */' (252,32)-(252,54)
                else_clause (253,6)-(254,37)
                  else: 'else' (253,6)-(253,10)
                  expression_statement (254,3)-(254,37)
                    assignment_expression (254,3)-(254,36)
                      identifier: 'subst' (254,3)-(254,8)
                      =: '=' (254,9)-(254,10)
                      call_expression (254,11)-(254,36)
                        identifier: 'getoutputfile' (254,11)-(254,24)
                        argument_list (254,24)-(254,36)
                          (: '(' (254,24)-(254,25)
                          identifier: 'str' (254,25)-(254,28)
                          ,: ',' (254,28)-(254,29)
                          pointer_expression (254,30)-(254,35)
                            &: '&' (254,30)-(254,31)
                            identifier: 'rest' (254,31)-(254,35)
                          ): ')' (254,35)-(254,36)
                    ;: ';' (254,36)-(254,37)
              comment: '/* =(...) */' (254,38)-(254,50)
              if_statement (255,6)-(256,15)
                if: 'if' (255,6)-(255,8)
                parenthesized_expression (255,9)-(255,18)
                  (: '(' (255,9)-(255,10)
                  identifier: 'errflag' (255,10)-(255,17)
                  ): ')' (255,17)-(255,18)
                return_statement (256,3)-(256,15)
                  return: 'return' (256,3)-(256,9)
                  null (256,10)-(256,14)
                    NULL: 'NULL' (256,10)-(256,14)
                  ;: ';' (256,14)-(256,15)
              if_statement (257,6)-(258,21)
                if: 'if' (257,6)-(257,8)
                parenthesized_expression (257,9)-(257,17)
                  (: '(' (257,9)-(257,10)
                  unary_expression (257,10)-(257,16)
                    !: '!' (257,10)-(257,11)
                    identifier: 'subst' (257,11)-(257,16)
                  ): ')' (257,16)-(257,17)
                expression_statement (258,3)-(258,21)
                  assignment_expression (258,3)-(258,20)
                    identifier: 'rest' (258,3)-(258,7)
                    =: '=' (258,8)-(258,9)
                    assignment_expression (258,10)-(258,20)
                      identifier: 'subst' (258,10)-(258,15)
                      =: '=' (258,16)-(258,17)
                      string_literal (258,18)-(258,20)
                        ": '"' (258,18)-(258,19)
                        ": '"' (258,19)-(258,20)
                  ;: ';' (258,20)-(258,21)
              expression_statement (260,6)-(260,29)
                assignment_expression (260,6)-(260,28)
                  identifier: 'sublen' (260,6)-(260,12)
                  =: '=' (260,13)-(260,14)
                  call_expression (260,15)-(260,28)
                    identifier: 'strlen' (260,15)-(260,21)
                    argument_list (260,21)-(260,28)
                      (: '(' (260,21)-(260,22)
                      identifier: 'subst' (260,22)-(260,27)
                      ): ')' (260,27)-(260,28)
                ;: ';' (260,28)-(260,29)
              expression_statement (261,6)-(261,29)
                assignment_expression (261,6)-(261,28)
                  identifier: 'restlen' (261,6)-(261,13)
                  =: '=' (261,14)-(261,15)
                  call_expression (261,16)-(261,28)
                    identifier: 'strlen' (261,16)-(261,22)
                    argument_list (261,22)-(261,28)
                      (: '(' (261,22)-(261,23)
                      identifier: 'rest' (261,23)-(261,27)
                      ): ')' (261,27)-(261,28)
                ;: ';' (261,28)-(261,29)
              expression_statement (262,6)-(262,60)
                assignment_expression (262,6)-(262,59)
                  identifier: 'sptr' (262,6)-(262,10)
                  =: '=' (262,11)-(262,12)
                  assignment_expression (262,13)-(262,59)
                    identifier: 'snew' (262,13)-(262,17)
                    =: '=' (262,18)-(262,19)
                    call_expression (262,20)-(262,59)
                      identifier: 'hcalloc' (262,20)-(262,27)
                      argument_list (262,27)-(262,59)
                        (: '(' (262,27)-(262,28)
                        binary_expression (262,28)-(262,58)
                          binary_expression (262,28)-(262,54)
                            binary_expression (262,28)-(262,44)
                              identifier: 'str3len' (262,28)-(262,35)
                              +: '+' (262,36)-(262,37)
                              identifier: 'sublen' (262,38)-(262,44)
                            +: '+' (262,45)-(262,46)
                            identifier: 'restlen' (262,47)-(262,54)
                          +: '+' (262,55)-(262,56)
                          number_literal: '1' (262,57)-(262,58)
                        ): ')' (262,58)-(262,59)
                ;: ';' (262,59)-(262,60)
              if_statement (263,6)-(266,7)
                if: 'if' (263,6)-(263,8)
                parenthesized_expression (263,9)-(263,18)
                  (: '(' (263,9)-(263,10)
                  identifier: 'str3len' (263,10)-(263,17)
                  ): ')' (263,17)-(263,18)
                compound_statement (263,19)-(266,7)
                  {: '{' (263,19)-(263,20)
                  expression_statement (264,3)-(264,31)
                    call_expression (264,3)-(264,30)
                      identifier: 'memcpy' (264,3)-(264,9)
                      argument_list (264,9)-(264,30)
                        (: '(' (264,9)-(264,10)
                        identifier: 'sptr' (264,10)-(264,14)
                        ,: ',' (264,14)-(264,15)
                        identifier: 'str3' (264,16)-(264,20)
                        ,: ',' (264,20)-(264,21)
                        identifier: 'str3len' (264,22)-(264,29)
                        ): ')' (264,29)-(264,30)
                    ;: ';' (264,30)-(264,31)
                  expression_statement (265,3)-(265,19)
                    assignment_expression (265,3)-(265,18)
                      identifier: 'sptr' (265,3)-(265,7)
                      +=: '+=' (265,8)-(265,10)
                      identifier: 'str3len' (265,11)-(265,18)
                    ;: ';' (265,18)-(265,19)
                  }: '}' (266,6)-(266,7)
              if_statement (267,6)-(270,7)
                if: 'if' (267,6)-(267,8)
                parenthesized_expression (267,9)-(267,17)
                  (: '(' (267,9)-(267,10)
                  identifier: 'sublen' (267,10)-(267,16)
                  ): ')' (267,16)-(267,17)
                compound_statement (267,18)-(270,7)
                  {: '{' (267,18)-(267,19)
                  expression_statement (268,3)-(268,31)
                    call_expression (268,3)-(268,30)
                      identifier: 'memcpy' (268,3)-(268,9)
                      argument_list (268,9)-(268,30)
                        (: '(' (268,9)-(268,10)
                        identifier: 'sptr' (268,10)-(268,14)
                        ,: ',' (268,14)-(268,15)
                        identifier: 'subst' (268,16)-(268,21)
                        ,: ',' (268,21)-(268,22)
                        identifier: 'sublen' (268,23)-(268,29)
                        ): ')' (268,29)-(268,30)
                    ;: ';' (268,30)-(268,31)
                  expression_statement (269,3)-(269,18)
                    assignment_expression (269,3)-(269,17)
                      identifier: 'sptr' (269,3)-(269,7)
                      +=: '+=' (269,8)-(269,10)
                      identifier: 'sublen' (269,11)-(269,17)
                    ;: ';' (269,17)-(269,18)
                  }: '}' (270,6)-(270,7)
              if_statement (271,6)-(272,31)
                if: 'if' (271,6)-(271,8)
                parenthesized_expression (271,9)-(271,18)
                  (: '(' (271,9)-(271,10)
                  identifier: 'restlen' (271,10)-(271,17)
                  ): ')' (271,17)-(271,18)
                expression_statement (272,3)-(272,31)
                  call_expression (272,3)-(272,30)
                    identifier: 'memcpy' (272,3)-(272,9)
                    argument_list (272,9)-(272,30)
                      (: '(' (272,9)-(272,10)
                      identifier: 'sptr' (272,10)-(272,14)
                      ,: ',' (272,14)-(272,15)
                      identifier: 'rest' (272,16)-(272,20)
                      ,: ',' (272,20)-(272,21)
                      identifier: 'restlen' (272,22)-(272,29)
                      ): ')' (272,29)-(272,30)
                  ;: ';' (272,30)-(272,31)
              expression_statement (273,6)-(273,27)
                assignment_expression (273,6)-(273,26)
                  subscript_expression (273,6)-(273,19)
                    identifier: 'sptr' (273,6)-(273,10)
                    [: '[' (273,10)-(273,11)
                    identifier: 'restlen' (273,11)-(273,18)
                    ]: ']' (273,18)-(273,19)
                  =: '=' (273,20)-(273,21)
                  char_literal (273,22)-(273,26)
                    ': ''' (273,22)-(273,23)
                    escape_sequence: '\0' (273,23)-(273,25)
                    ': ''' (273,25)-(273,26)
                ;: ';' (273,26)-(273,27)
              expression_statement (274,6)-(274,18)
                assignment_expression (274,6)-(274,17)
                  identifier: 'str3' (274,6)-(274,10)
                  =: '=' (274,11)-(274,12)
                  identifier: 'snew' (274,13)-(274,17)
                ;: ';' (274,17)-(274,18)
              expression_statement (275,6)-(275,36)
                assignment_expression (275,6)-(275,35)
                  identifier: 'str' (275,6)-(275,9)
                  =: '=' (275,10)-(275,11)
                  binary_expression (275,12)-(275,35)
                    binary_expression (275,12)-(275,26)
                      identifier: 'snew' (275,12)-(275,16)
                      +: '+' (275,17)-(275,18)
                      identifier: 'str3len' (275,19)-(275,26)
                    +: '+' (275,27)-(275,28)
                    identifier: 'sublen' (275,29)-(275,35)
                ;: ';' (275,35)-(275,36)
              expression_statement (276,6)-(276,26)
                call_expression (276,6)-(276,25)
                  identifier: 'setdata' (276,6)-(276,13)
                  argument_list (276,13)-(276,25)
                    (: '(' (276,13)-(276,14)
                    identifier: 'node' (276,14)-(276,18)
                    ,: ',' (276,18)-(276,19)
                    identifier: 'str3' (276,20)-(276,24)
                    ): ')' (276,24)-(276,25)
                ;: ';' (276,25)-(276,26)
              }: '}' (277,2)-(277,3)
            else_clause (277,4)-(278,12)
              else: 'else' (277,4)-(277,8)
              expression_statement (278,6)-(278,12)
                update_expression (278,6)-(278,11)
                  identifier: 'str' (278,6)-(278,9)
                  ++: '++' (278,9)-(278,11)
                ;: ';' (278,11)-(278,12)
          }: '}' (279,5)-(279,6)
      expression_statement (280,5)-(280,16)
        assignment_expression (280,5)-(280,15)
          identifier: 'str' (280,5)-(280,8)
          =: '=' (280,9)-(280,10)
          identifier: 'str3' (280,11)-(280,15)
        ;: ';' (280,15)-(280,16)
      while_statement (282,5)-(441,6)
        while: 'while' (282,5)-(282,10)
        parenthesized_expression (282,11)-(282,35)
          (: '(' (282,11)-(282,12)
          binary_expression (282,12)-(282,34)
            unary_expression (282,12)-(282,20)
              !: '!' (282,12)-(282,13)
              identifier: 'errflag' (282,13)-(282,20)
            &&: '&&' (282,21)-(282,23)
            parenthesized_expression (282,24)-(282,34)
              (: '(' (282,24)-(282,25)
              assignment_expression (282,25)-(282,33)
                identifier: 'c' (282,25)-(282,26)
                =: '=' (282,27)-(282,28)
                pointer_expression (282,29)-(282,33)
                  *: '*' (282,29)-(282,30)
                  identifier: 'str' (282,30)-(282,33)
              ): ')' (282,33)-(282,34)
          ): ')' (282,34)-(282,35)
        compound_statement (282,36)-(441,6)
          {: '{' (282,36)-(282,37)
          if_statement (283,2)-(439,3)
            if: 'if' (283,2)-(283,4)
            parenthesized_expression (283,5)-(283,41)
              (: '(' (283,5)-(283,6)
              binary_expression (283,6)-(283,40)
                parenthesized_expression (283,6)-(283,25)
                  (: '(' (283,6)-(283,7)
                  assignment_expression (283,7)-(283,24)
                    identifier: 'qt' (283,7)-(283,9)
                    =: '=' (283,10)-(283,11)
                    binary_expression (283,12)-(283,24)
                      identifier: 'c' (283,12)-(283,13)
                      ==: '==' (283,14)-(283,16)
                      identifier: 'Qstring' (283,17)-(283,24)
                  ): ')' (283,24)-(283,25)
                ||: '||' (283,26)-(283,28)
                binary_expression (283,29)-(283,40)
                  identifier: 'c' (283,29)-(283,30)
                  ==: '==' (283,31)-(283,33)
                  identifier: 'String' (283,34)-(283,40)
              ): ')' (283,40)-(283,41)
            compound_statement (283,42)-(331,3)
              {: '{' (283,42)-(283,43)
              if_statement (284,6)-(330,7)
                if: 'if' (284,6)-(284,8)
                parenthesized_expression (284,9)-(284,50)
                  (: '(' (284,9)-(284,10)
                  binary_expression (284,10)-(284,49)
                    binary_expression (284,10)-(284,31)
                      parenthesized_expression (284,10)-(284,22)
                        (: '(' (284,10)-(284,11)
                        assignment_expression (284,11)-(284,21)
                          identifier: 'c' (284,11)-(284,12)
                          =: '=' (284,13)-(284,14)
                          subscript_expression (284,15)-(284,21)
                            identifier: 'str' (284,15)-(284,18)
                            [: '[' (284,18)-(284,19)
                            number_literal: '1' (284,19)-(284,20)
                            ]: ']' (284,20)-(284,21)
                        ): ')' (284,21)-(284,22)
                      ==: '==' (284,23)-(284,25)
                      identifier: 'Inpar' (284,26)-(284,31)
                    ||: '||' (284,32)-(284,34)
                    binary_expression (284,35)-(284,49)
                      identifier: 'c' (284,35)-(284,36)
                      ==: '==' (284,37)-(284,39)
                      identifier: 'Inparmath' (284,40)-(284,49)
                  ): ')' (284,49)-(284,50)
                compound_statement (284,51)-(289,7)
                  {: '{' (284,51)-(284,52)
                  if_statement (285,3)-(286,36)
                    if: 'if' (285,3)-(285,5)
                    parenthesized_expression (285,6)-(285,11)
                      (: '(' (285,6)-(285,7)
                      unary_expression (285,7)-(285,10)
                        !: '!' (285,7)-(285,8)
                        identifier: 'qt' (285,8)-(285,10)
                      ): ')' (285,10)-(285,11)
                    expression_statement (286,7)-(286,36)
                      assignment_expression (286,7)-(286,35)
                        field_expression (286,7)-(286,23)
                          field_expression (286,7)-(286,17)
                            identifier: 'list' (286,7)-(286,11)
                            ->: '->' (286,11)-(286,13)
                            field_identifier: 'list' (286,13)-(286,17)
                          .: '.' (286,17)-(286,18)
                          field_identifier: 'flags' (286,18)-(286,23)
                        |=: '|=' (286,24)-(286,26)
                        identifier: 'LF_ARRAY' (286,27)-(286,35)
                      ;: ';' (286,35)-(286,36)
                  expression_statement (287,3)-(287,9)
                    update_expression (287,3)-(287,8)
                      identifier: 'str' (287,3)-(287,6)
                      ++: '++' (287,6)-(287,8)
                    ;: ';' (287,8)-(287,9)
                  goto_statement (288,3)-(288,15)
                    goto: 'goto' (288,3)-(288,7)
                    statement_identifier: 'comsub' (288,8)-(288,14)
                    ;: ';' (288,14)-(288,15)
                  }: '}' (289,6)-(289,7)
                else_clause (289,8)-(330,7)
                  else: 'else' (289,8)-(289,12)
                  if_statement (289,13)-(330,7)
                    if: 'if' (289,13)-(289,15)
                    parenthesized_expression (289,16)-(289,30)
                      (: '(' (289,16)-(289,17)
                      binary_expression (289,17)-(289,29)
                        identifier: 'c' (289,17)-(289,18)
                        ==: '==' (289,19)-(289,21)
                        identifier: 'Inbrack' (289,22)-(289,29)
                      ): ')' (289,29)-(289,30)
                    compound_statement (289,31)-(301,7)
                      {: '{' (289,31)-(289,32)
                      comment: '/* $[...] */' (290,3)-(290,15)
                      declaration (291,3)-(291,20)
                        primitive_type: 'char' (291,3)-(291,7)
                        init_declarator (291,8)-(291,19)
                          pointer_declarator (291,8)-(291,13)
                            *: '*' (291,8)-(291,9)
                            identifier: 'str2' (291,9)-(291,13)
                          =: '=' (291,14)-(291,15)
                          identifier: 'str' (291,16)-(291,19)
                        ;: ';' (291,19)-(291,20)
                      expression_statement (292,3)-(292,10)
                        update_expression (292,3)-(292,9)
                          identifier: 'str2' (292,3)-(292,7)
                          ++: '++' (292,7)-(292,9)
                        ;: ';' (292,9)-(292,10)
                      if_statement (293,3)-(296,4)
                        if: 'if' (293,3)-(293,5)
                        parenthesized_expression (293,6)-(293,44)
                          (: '(' (293,6)-(293,7)
                          call_expression (293,7)-(293,43)
                            identifier: 'skipparens' (293,7)-(293,17)
                            argument_list (293,17)-(293,43)
                              (: '(' (293,17)-(293,18)
                              identifier: 'Inbrack' (293,18)-(293,25)
                              ,: ',' (293,25)-(293,26)
                              identifier: 'Outbrack' (293,27)-(293,35)
                              ,: ',' (293,35)-(293,36)
                              pointer_expression (293,37)-(293,42)
                                &: '&' (293,37)-(293,38)
                                identifier: 'str2' (293,38)-(293,42)
                              ): ')' (293,42)-(293,43)
                          ): ')' (293,43)-(293,44)
                        compound_statement (293,45)-(296,4)
                          {: '{' (293,45)-(293,46)
                          expression_statement (294,7)-(294,39)
                            call_expression (294,7)-(294,38)
                              identifier: 'zerr' (294,7)-(294,11)
                              argument_list (294,11)-(294,38)
                                (: '(' (294,11)-(294,12)
                                string_literal (294,12)-(294,37)
                                  ": '"' (294,12)-(294,13)
                                  string_content: 'closing bracket missing' (294,13)-(294,36)
                                  ": '"' (294,36)-(294,37)
                                ): ')' (294,37)-(294,38)
                            ;: ';' (294,38)-(294,39)
                          return_statement (295,7)-(295,19)
                            return: 'return' (295,7)-(295,13)
                            null (295,14)-(295,18)
                              NULL: 'NULL' (295,14)-(295,18)
                            ;: ';' (295,18)-(295,19)
                          }: '}' (296,3)-(296,4)
                      expression_statement (297,3)-(297,26)
                        assignment_expression (297,3)-(297,25)
                          subscript_expression (297,3)-(297,11)
                            identifier: 'str2' (297,3)-(297,7)
                            [: '[' (297,7)-(297,8)
                            number_literal: '-1' (297,8)-(297,10)
                            ]: ']' (297,10)-(297,11)
                          =: '=' (297,12)-(297,13)
                          assignment_expression (297,14)-(297,25)
                            pointer_expression (297,14)-(297,18)
                              *: '*' (297,14)-(297,15)
                              identifier: 'str' (297,15)-(297,18)
                            =: '=' (297,19)-(297,20)
                            char_literal (297,21)-(297,25)
                              ': ''' (297,21)-(297,22)
                              escape_sequence: '\0' (297,22)-(297,24)
                              ': ''' (297,24)-(297,25)
                        ;: ';' (297,25)-(297,26)
                      expression_statement (298,3)-(298,42)
                        assignment_expression (298,3)-(298,41)
                          identifier: 'str' (298,3)-(298,6)
                          =: '=' (298,7)-(298,8)
                          call_expression (298,9)-(298,41)
                            identifier: 'arithsubst' (298,9)-(298,19)
                            argument_list (298,19)-(298,41)
                              (: '(' (298,19)-(298,20)
                              binary_expression (298,20)-(298,27)
                                identifier: 'str' (298,20)-(298,23)
                                +: '+' (298,24)-(298,25)
                                number_literal: '2' (298,26)-(298,27)
                              ,: ',' (298,27)-(298,28)
                              pointer_expression (298,29)-(298,34)
                                &: '&' (298,29)-(298,30)
                                identifier: 'str3' (298,30)-(298,34)
                              ,: ',' (298,34)-(298,35)
                              identifier: 'str2' (298,36)-(298,40)
                              ): ')' (298,40)-(298,41)
                        ;: ';' (298,41)-(298,42)
                      expression_statement (299,3)-(299,32)
                        call_expression (299,3)-(299,31)
                          identifier: 'setdata' (299,3)-(299,10)
                          argument_list (299,10)-(299,31)
                            (: '(' (299,10)-(299,11)
                            identifier: 'node' (299,11)-(299,15)
                            ,: ',' (299,15)-(299,16)
                            cast_expression (299,17)-(299,30)
                              (: '(' (299,17)-(299,18)
                              type_descriptor (299,18)-(299,24)
                                primitive_type: 'void' (299,18)-(299,22)
                                abstract_pointer_declarator (299,23)-(299,24)
                                  *: '*' (299,23)-(299,24)
                              ): ')' (299,24)-(299,25)
                              identifier: 'str3' (299,26)-(299,30)
                            ): ')' (299,30)-(299,31)
                        ;: ';' (299,31)-(299,32)
                      continue_statement (300,3)-(300,12)
                        continue: 'continue' (300,3)-(300,11)
                        ;: ';' (300,11)-(300,12)
                      }: '}' (301,6)-(301,7)
                    else_clause (301,8)-(330,7)
                      else: 'else' (301,8)-(301,12)
                      if_statement (301,13)-(330,7)
                        if: 'if' (301,13)-(301,15)
                        parenthesized_expression (301,16)-(301,28)
                          (: '(' (301,16)-(301,17)
                          binary_expression (301,17)-(301,27)
                            identifier: 'c' (301,17)-(301,18)
                            ==: '==' (301,19)-(301,21)
                            identifier: 'Snull' (301,22)-(301,27)
                          ): ')' (301,27)-(301,28)
                        compound_statement (301,29)-(305,7)
                          {: '{' (301,29)-(301,30)
                          expression_statement (302,3)-(302,39)
                            assignment_expression (302,3)-(302,38)
                              identifier: 'str3' (302,3)-(302,7)
                              =: '=' (302,8)-(302,9)
                              call_expression (302,10)-(302,38)
                                identifier: 'stringsubstquote' (302,10)-(302,26)
                                argument_list (302,26)-(302,38)
                                  (: '(' (302,26)-(302,27)
                                  identifier: 'str3' (302,27)-(302,31)
                                  ,: ',' (302,31)-(302,32)
                                  pointer_expression (302,33)-(302,37)
                                    &: '&' (302,33)-(302,34)
                                    identifier: 'str' (302,34)-(302,37)
                                  ): ')' (302,37)-(302,38)
                            ;: ';' (302,38)-(302,39)
                          expression_statement (303,3)-(303,32)
                            call_expression (303,3)-(303,31)
                              identifier: 'setdata' (303,3)-(303,10)
                              argument_list (303,10)-(303,31)
                                (: '(' (303,10)-(303,11)
                                identifier: 'node' (303,11)-(303,15)
                                ,: ',' (303,15)-(303,16)
                                cast_expression (303,17)-(303,30)
                                  (: '(' (303,17)-(303,18)
                                  type_descriptor (303,18)-(303,24)
                                    primitive_type: 'void' (303,18)-(303,22)
                                    abstract_pointer_declarator (303,23)-(303,24)
                                      *: '*' (303,23)-(303,24)
                                  ): ')' (303,24)-(303,25)
                                  identifier: 'str3' (303,26)-(303,30)
                                ): ')' (303,30)-(303,31)
                            ;: ';' (303,31)-(303,32)
                          continue_statement (304,3)-(304,12)
                            continue: 'continue' (304,3)-(304,11)
                            ;: ';' (304,11)-(304,12)
                          }: '}' (305,6)-(305,7)
                        else_clause (305,8)-(330,7)
                          else: 'else' (305,8)-(305,12)
                          compound_statement (305,13)-(330,7)
                            {: '{' (305,13)-(305,14)
                            comment: '/*
		 * To avoid setting and unsetting the SHWORDSPLIT
		 * option, we pass flags if we need to control it for
		 * recursive expansion via multsub()
		 * If PREFORK_NOSHWORDSPLIT is set, the option is
		 * disregarded; otherwise, use it if set.
		 * If PREFORK_SPLIT is set, splitting is forced,
		 * regardless of the option
		 * If PREFORK_SHWORDSPLIT is already set, or used by the
		 * previous two to signal paramsubst(), we'll do
		 * sh-style wordsplitting on parameters.
		 */' (306,3)-(317,6)
                            if_statement (318,3)-(321,39)
                              if: 'if' (318,3)-(318,5)
                              parenthesized_expression (318,6)-(320,34)
                                (: '(' (318,6)-(318,7)
                                binary_expression (318,7)-(320,33)
                                  parenthesized_expression (318,7)-(319,44)
                                    (: '(' (318,7)-(318,8)
                                    binary_expression (318,8)-(319,43)
                                      call_expression (318,8)-(318,26)
                                        identifier: 'isset' (318,8)-(318,13)
                                        argument_list (318,13)-(318,26)
                                          (: '(' (318,13)-(318,14)
                                          identifier: 'SHWORDSPLIT' (318,14)-(318,25)
                                          ): ')' (318,25)-(318,26)
                                      &&: '&&' (318,27)-(318,29)
                                      unary_expression (319,8)-(319,43)
                                        !: '!' (319,8)-(319,9)
                                        parenthesized_expression (319,9)-(319,43)
                                          (: '(' (319,9)-(319,10)
                                          binary_expression (319,10)-(319,42)
                                            identifier: 'pf_flags' (319,10)-(319,18)
                                            &: '&' (319,19)-(319,20)
                                            identifier: 'PREFORK_NOSHWORDSPLIT' (319,21)-(319,42)
                                          ): ')' (319,42)-(319,43)
                                    ): ')' (319,43)-(319,44)
                                  ||: '||' (319,45)-(319,47)
                                  parenthesized_expression (320,7)-(320,33)
                                    (: '(' (320,7)-(320,8)
                                    binary_expression (320,8)-(320,32)
                                      identifier: 'pf_flags' (320,8)-(320,16)
                                      &: '&' (320,17)-(320,18)
                                      identifier: 'PREFORK_SPLIT' (320,19)-(320,32)
                                    ): ')' (320,32)-(320,33)
                                ): ')' (320,33)-(320,34)
                              expression_statement (321,7)-(321,39)
                                assignment_expression (321,7)-(321,38)
                                  identifier: 'pf_flags' (321,7)-(321,15)
                                  |=: '|=' (321,16)-(321,18)
                                  identifier: 'PREFORK_SHWORDSPLIT' (321,19)-(321,38)
                                ;: ';' (321,38)-(321,39)
                            expression_statement (322,3)-(325,33)
                              assignment_expression (322,3)-(325,32)
                                identifier: 'node' (322,3)-(322,7)
                                =: '=' (322,8)-(322,9)
                                call_expression (322,10)-(325,32)
                                  identifier: 'paramsubst' (322,10)-(322,20)
                                  argument_list (322,20)-(325,32)
                                    (: '(' (322,20)-(322,21)
                                    identifier: 'list' (323,7)-(323,11)
                                    ,: ',' (323,11)-(323,12)
                                    identifier: 'node' (323,13)-(323,17)
                                    ,: ',' (323,17)-(323,18)
                                    pointer_expression (323,19)-(323,23)
                                      &: '&' (323,19)-(323,20)
                                      identifier: 'str' (323,20)-(323,23)
                                    ,: ',' (323,23)-(323,24)
                                    identifier: 'qt' (323,25)-(323,27)
                                    ,: ',' (323,27)-(323,28)
                                    binary_expression (324,7)-(325,20)
                                      identifier: 'pf_flags' (324,7)-(324,15)
                                      &: '&' (324,16)-(324,17)
                                      parenthesized_expression (324,18)-(325,20)
                                        (: '(' (324,18)-(324,19)
                                        binary_expression (324,19)-(325,19)
                                          binary_expression (324,19)-(324,53)
                                            identifier: 'PREFORK_SINGLE' (324,19)-(324,33)
                                            |: '|' (324,33)-(324,34)
                                            identifier: 'PREFORK_SHWORDSPLIT' (324,34)-(324,53)
                                          |: '|' (324,53)-(324,54)
                                          identifier: 'PREFORK_SUBEXP' (325,5)-(325,19)
                                        ): ')' (325,19)-(325,20)
                                    ,: ',' (325,20)-(325,21)
                                    identifier: 'ret_flags' (325,22)-(325,31)
                                    ): ')' (325,31)-(325,32)
                              ;: ';' (325,32)-(325,33)
                            if_statement (326,3)-(327,19)
                              if: 'if' (326,3)-(326,5)
                              parenthesized_expression (326,6)-(326,24)
                                (: '(' (326,6)-(326,7)
                                binary_expression (326,7)-(326,23)
                                  identifier: 'errflag' (326,7)-(326,14)
                                  ||: '||' (326,15)-(326,17)
                                  unary_expression (326,18)-(326,23)
                                    !: '!' (326,18)-(326,19)
                                    identifier: 'node' (326,19)-(326,23)
                                ): ')' (326,23)-(326,24)
                              return_statement (327,7)-(327,19)
                                return: 'return' (327,7)-(327,13)
                                null (327,14)-(327,18)
                                  NULL: 'NULL' (327,14)-(327,18)
                                ;: ';' (327,18)-(327,19)
                            expression_statement (328,3)-(328,32)
                              assignment_expression (328,3)-(328,31)
                                identifier: 'str3' (328,3)-(328,7)
                                =: '=' (328,8)-(328,9)
                                cast_expression (328,10)-(328,31)
                                  (: '(' (328,10)-(328,11)
                                  type_descriptor (328,11)-(328,17)
                                    primitive_type: 'char' (328,11)-(328,15)
                                    abstract_pointer_declarator (328,16)-(328,17)
                                      *: '*' (328,16)-(328,17)
                                  ): ')' (328,17)-(328,18)
                                  call_expression (328,18)-(328,31)
                                    identifier: 'getdata' (328,18)-(328,25)
                                    argument_list (328,25)-(328,31)
                                      (: '(' (328,25)-(328,26)
                                      identifier: 'node' (328,26)-(328,30)
                                      ): ')' (328,30)-(328,31)
                              ;: ';' (328,31)-(328,32)
                            continue_statement (329,3)-(329,12)
                              continue: 'continue' (329,3)-(329,11)
                              ;: ';' (329,11)-(329,12)
                            }: '}' (330,6)-(330,7)
              }: '}' (331,2)-(331,3)
            else_clause (331,4)-(439,3)
              else: 'else' (331,4)-(331,8)
              if_statement (331,9)-(439,3)
                if: 'if' (331,9)-(331,11)
                parenthesized_expression (331,12)-(331,83)
                  (: '(' (331,12)-(331,13)
                  binary_expression (331,13)-(331,82)
                    parenthesized_expression (331,13)-(331,30)
                      (: '(' (331,13)-(331,14)
                      assignment_expression (331,14)-(331,29)
                        identifier: 'qt' (331,14)-(331,16)
                        =: '=' (331,17)-(331,18)
                        binary_expression (331,19)-(331,29)
                          identifier: 'c' (331,19)-(331,20)
                          ==: '==' (331,21)-(331,23)
                          identifier: 'Qtick' (331,24)-(331,29)
                      ): ')' (331,29)-(331,30)
                    ||: '||' (331,31)-(331,33)
                    parenthesized_expression (331,34)-(331,82)
                      (: '(' (331,34)-(331,35)
                      conditional_expression (331,35)-(331,81)
                        binary_expression (331,35)-(331,44)
                          identifier: 'c' (331,35)-(331,36)
                          ==: '==' (331,37)-(331,39)
                          identifier: 'Tick' (331,40)-(331,44)
                        ?: '?' (331,45)-(331,46)
                        parenthesized_expression (331,47)-(331,77)
                          (: '(' (331,47)-(331,48)
                          assignment_expression (331,48)-(331,76)
                            field_expression (331,48)-(331,64)
                              field_expression (331,48)-(331,58)
                                identifier: 'list' (331,48)-(331,52)
                                ->: '->' (331,52)-(331,54)
                                field_identifier: 'list' (331,54)-(331,58)
                              .: '.' (331,58)-(331,59)
                              field_identifier: 'flags' (331,59)-(331,64)
                            |=: '|=' (331,65)-(331,67)
                            identifier: 'LF_ARRAY' (331,68)-(331,76)
                          ): ')' (331,76)-(331,77)
                        :: ':' (331,78)-(331,79)
                        number_literal: '0' (331,80)-(331,81)
                      ): ')' (331,81)-(331,82)
                  ): ')' (331,82)-(331,83)
                labeled_statement (332,4)-(433,3)
                  statement_identifier: 'comsub' (332,4)-(332,10)
                  :: ':' (332,10)-(332,11)
                  compound_statement (332,12)-(433,3)
                    {: '{' (332,12)-(332,13)
                    declaration (333,6)-(333,18)
                      type_identifier: 'LinkList' (333,6)-(333,14)
                      identifier: 'pl' (333,15)-(333,17)
                      ;: ';' (333,17)-(333,18)
                    declaration (334,6)-(334,27)
                      primitive_type: 'char' (334,6)-(334,10)
                      pointer_declarator (334,11)-(334,13)
                        *: '*' (334,11)-(334,12)
                        identifier: 's' (334,12)-(334,13)
                      ,: ',' (334,13)-(334,14)
                      init_declarator (334,15)-(334,26)
                        pointer_declarator (334,15)-(334,20)
                          *: '*' (334,15)-(334,16)
                          identifier: 'str2' (334,16)-(334,20)
                        =: '=' (334,21)-(334,22)
                        identifier: 'str' (334,23)-(334,26)
                      ;: ';' (334,26)-(334,27)
                    declaration (335,6)-(335,19)
                      primitive_type: 'char' (335,6)-(335,10)
                      identifier: 'endchar' (335,11)-(335,18)
                      ;: ';' (335,18)-(335,19)
                    declaration (336,6)-(336,17)
                      primitive_type: 'int' (336,6)-(336,9)
                      identifier: 'l1' (336,10)-(336,12)
                      ,: ',' (336,12)-(336,13)
                      identifier: 'l2' (336,14)-(336,16)
                      ;: ';' (336,16)-(336,17)
                    if_statement (338,6)-(383,7)
                      if: 'if' (338,6)-(338,8)
                      parenthesized_expression (338,9)-(338,21)
                        (: '(' (338,9)-(338,10)
                        binary_expression (338,10)-(338,20)
                          identifier: 'c' (338,10)-(338,11)
                          ==: '==' (338,12)-(338,14)
                          identifier: 'Inpar' (338,15)-(338,20)
                        ): ')' (338,20)-(338,21)
                      compound_statement (338,22)-(348,7)
                        {: '{' (338,22)-(338,23)
                        expression_statement (339,3)-(339,20)
                          assignment_expression (339,3)-(339,19)
                            identifier: 'endchar' (339,3)-(339,10)
                            =: '=' (339,11)-(339,12)
                            identifier: 'Outpar' (339,13)-(339,19)
                          ;: ';' (339,19)-(339,20)
                        expression_statement (340,3)-(340,18)
                          assignment_expression (340,3)-(340,17)
                            subscript_expression (340,3)-(340,10)
                              identifier: 'str' (340,3)-(340,6)
                              [: '[' (340,6)-(340,7)
                              number_literal: '-1' (340,7)-(340,9)
                              ]: ']' (340,9)-(340,10)
                            =: '=' (340,11)-(340,12)
                            char_literal (340,13)-(340,17)
                              ': ''' (340,13)-(340,14)
                              escape_sequence: '\0' (340,14)-(340,16)
                              ': ''' (340,16)-(340,17)
                          ;: ';' (340,17)-(340,18)
                        preproc_ifdef (341,1)-(346,7)
                          #ifdef: '#ifdef' (341,1)-(341,7)
                          identifier: 'DEBUG' (341,8)-(341,13)
                          if_statement (342,3)-(343,57)
                            if: 'if' (342,3)-(342,5)
                            parenthesized_expression (342,6)-(342,39)
                              (: '(' (342,6)-(342,7)
                              call_expression (342,7)-(342,38)
                                identifier: 'skipparens' (342,7)-(342,17)
                                argument_list (342,17)-(342,38)
                                  (: '(' (342,17)-(342,18)
                                  identifier: 'Inpar' (342,18)-(342,23)
                                  ,: ',' (342,23)-(342,24)
                                  identifier: 'Outpar' (342,25)-(342,31)
                                  ,: ',' (342,31)-(342,32)
                                  pointer_expression (342,33)-(342,37)
                                    &: '&' (342,33)-(342,34)
                                    identifier: 'str' (342,34)-(342,37)
                                  ): ')' (342,37)-(342,38)
                              ): ')' (342,38)-(342,39)
                            expression_statement (343,7)-(343,57)
                              call_expression (343,7)-(343,56)
                                identifier: 'dputs' (343,7)-(343,12)
                                argument_list (343,12)-(343,56)
                                  (: '(' (343,12)-(343,13)
                                  string_literal (343,13)-(343,55)
                                    ": '"' (343,13)-(343,14)
                                    string_content: 'BUG: parse error in command substitution' (343,14)-(343,54)
                                    ": '"' (343,54)-(343,55)
                                  ): ')' (343,55)-(343,56)
                              ;: ';' (343,56)-(343,57)
                          preproc_else (344,1)-(345,35)
                            #else: '#else' (344,1)-(344,6)
                            expression_statement (345,3)-(345,35)
                              call_expression (345,3)-(345,34)
                                identifier: 'skipparens' (345,3)-(345,13)
                                argument_list (345,13)-(345,34)
                                  (: '(' (345,13)-(345,14)
                                  identifier: 'Inpar' (345,14)-(345,19)
                                  ,: ',' (345,19)-(345,20)
                                  identifier: 'Outpar' (345,21)-(345,27)
                                  ,: ',' (345,27)-(345,28)
                                  pointer_expression (345,29)-(345,33)
                                    &: '&' (345,29)-(345,30)
                                    identifier: 'str' (345,30)-(345,33)
                                  ): ')' (345,33)-(345,34)
                              ;: ';' (345,34)-(345,35)
                          #endif: '#endif' (346,1)-(346,7)
                        expression_statement (347,3)-(347,9)
                          update_expression (347,3)-(347,8)
                            identifier: 'str' (347,3)-(347,6)
                            --: '--' (347,6)-(347,8)
                          ;: ';' (347,8)-(347,9)
                        }: '}' (348,6)-(348,7)
                      else_clause (348,8)-(383,7)
                        else: 'else' (348,8)-(348,12)
                        if_statement (348,13)-(383,7)
                          if: 'if' (348,13)-(348,15)
                          parenthesized_expression (348,16)-(348,32)
                            (: '(' (348,16)-(348,17)
                            binary_expression (348,17)-(348,31)
                              identifier: 'c' (348,17)-(348,18)
                              ==: '==' (348,19)-(348,21)
                              identifier: 'Inparmath' (348,22)-(348,31)
                            ): ')' (348,31)-(348,32)
                          compound_statement (348,33)-(373,7)
                            {: '{' (348,33)-(348,34)
                            comment: '/*
		 * Math substitution of the form $((...)).
		 * These can be nested, for goodness sake...
		 */' (349,3)-(352,6)
                            declaration (353,3)-(353,19)
                              primitive_type: 'int' (353,3)-(353,6)
                              init_declarator (353,7)-(353,18)
                                identifier: 'mathpar' (353,7)-(353,14)
                                =: '=' (353,15)-(353,16)
                                number_literal: '1' (353,17)-(353,18)
                              ;: ';' (353,18)-(353,19)
                            expression_statement (354,3)-(354,18)
                              assignment_expression (354,3)-(354,17)
                                subscript_expression (354,3)-(354,10)
                                  identifier: 'str' (354,3)-(354,6)
                                  [: '[' (354,6)-(354,7)
                                  number_literal: '-1' (354,7)-(354,9)
                                  ]: ']' (354,9)-(354,10)
                                =: '=' (354,11)-(354,12)
                                char_literal (354,13)-(354,17)
                                  ': ''' (354,13)-(354,14)
                                  escape_sequence: '\0' (354,14)-(354,16)
                                  ': ''' (354,16)-(354,17)
                              ;: ';' (354,17)-(354,18)
                            while_statement (355,3)-(361,4)
                              while: 'while' (355,3)-(355,8)
                              parenthesized_expression (355,9)-(355,26)
                                (: '(' (355,9)-(355,10)
                                binary_expression (355,10)-(355,25)
                                  identifier: 'mathpar' (355,10)-(355,17)
                                  &&: '&&' (355,18)-(355,20)
                                  pointer_expression (355,21)-(355,25)
                                    *: '*' (355,21)-(355,22)
                                    identifier: 'str' (355,22)-(355,25)
                                ): ')' (355,25)-(355,26)
                              compound_statement (355,27)-(361,4)
                                {: '{' (355,27)-(355,28)
                                expression_statement (356,7)-(356,13)
                                  update_expression (356,7)-(356,12)
                                    identifier: 'str' (356,7)-(356,10)
                                    ++: '++' (356,10)-(356,12)
                                  ;: ';' (356,12)-(356,13)
                                if_statement (357,7)-(360,14)
                                  if: 'if' (357,7)-(357,9)
                                  parenthesized_expression (357,10)-(357,30)
                                    (: '(' (357,10)-(357,11)
                                    binary_expression (357,11)-(357,29)
                                      pointer_expression (357,11)-(357,15)
                                        *: '*' (357,11)-(357,12)
                                        identifier: 'str' (357,12)-(357,15)
                                      ==: '==' (357,16)-(357,18)
                                      identifier: 'Outparmath' (357,19)-(357,29)
                                    ): ')' (357,29)-(357,30)
                                  expression_statement (358,4)-(358,14)
                                    update_expression (358,4)-(358,13)
                                      identifier: 'mathpar' (358,4)-(358,11)
                                      --: '--' (358,11)-(358,13)
                                    ;: ';' (358,13)-(358,14)
                                  else_clause (359,7)-(360,14)
                                    else: 'else' (359,7)-(359,11)
                                    if_statement (359,12)-(360,14)
                                      if: 'if' (359,12)-(359,14)
                                      parenthesized_expression (359,15)-(359,34)
                                        (: '(' (359,15)-(359,16)
                                        binary_expression (359,16)-(359,33)
                                          pointer_expression (359,16)-(359,20)
                                            *: '*' (359,16)-(359,17)
                                            identifier: 'str' (359,17)-(359,20)
                                          ==: '==' (359,21)-(359,23)
                                          identifier: 'Inparmath' (359,24)-(359,33)
                                        ): ')' (359,33)-(359,34)
                                      expression_statement (360,4)-(360,14)
                                        update_expression (360,4)-(360,13)
                                          identifier: 'mathpar' (360,4)-(360,11)
                                          ++: '++' (360,11)-(360,13)
                                        ;: ';' (360,13)-(360,14)
                                }: '}' (361,3)-(361,4)
                            if_statement (362,3)-(365,4)
                              if: 'if' (362,3)-(362,5)
                              parenthesized_expression (362,6)-(362,26)
                                (: '(' (362,6)-(362,7)
                                binary_expression (362,7)-(362,25)
                                  pointer_expression (362,7)-(362,11)
                                    *: '*' (362,7)-(362,8)
                                    identifier: 'str' (362,8)-(362,11)
                                  !=: '!=' (362,12)-(362,14)
                                  identifier: 'Outparmath' (362,15)-(362,25)
                                ): ')' (362,25)-(362,26)
                              compound_statement (362,27)-(365,4)
                                {: '{' (362,27)-(362,28)
                                expression_statement (363,7)-(363,55)
                                  call_expression (363,7)-(363,54)
                                    identifier: 'zerr' (363,7)-(363,11)
                                    argument_list (363,11)-(363,54)
                                      (: '(' (363,11)-(363,12)
                                      string_literal (363,12)-(363,53)
                                        ": '"' (363,12)-(363,13)
                                        string_content: 'failed to find end of math substitution' (363,13)-(363,52)
                                        ": '"' (363,52)-(363,53)
                                      ): ')' (363,53)-(363,54)
                                  ;: ';' (363,54)-(363,55)
                                return_statement (364,7)-(364,19)
                                  return: 'return' (364,7)-(364,13)
                                  null (364,14)-(364,18)
                                    NULL: 'NULL' (364,14)-(364,18)
                                  ;: ';' (364,18)-(364,19)
                                }: '}' (365,3)-(365,4)
                            expression_statement (366,3)-(366,18)
                              assignment_expression (366,3)-(366,17)
                                subscript_expression (366,3)-(366,10)
                                  identifier: 'str' (366,3)-(366,6)
                                  [: '[' (366,6)-(366,7)
                                  number_literal: '-1' (366,7)-(366,9)
                                  ]: ']' (366,9)-(366,10)
                                =: '=' (366,11)-(366,12)
                                char_literal (366,13)-(366,17)
                                  ': ''' (366,13)-(366,14)
                                  escape_sequence: '\0' (366,14)-(366,16)
                                  ': ''' (366,16)-(366,17)
                              ;: ';' (366,17)-(366,18)
                            if_statement (367,3)-(370,30)
                              if: 'if' (367,3)-(367,5)
                              parenthesized_expression (367,6)-(367,22)
                                (: '(' (367,6)-(367,7)
                                call_expression (367,7)-(367,21)
                                  identifier: 'isset' (367,7)-(367,12)
                                  argument_list (367,12)-(367,21)
                                    (: '(' (367,12)-(367,13)
                                    identifier: 'EXECOPT' (367,13)-(367,20)
                                    ): ')' (367,20)-(367,21)
                                ): ')' (367,21)-(367,22)
                              expression_statement (368,7)-(368,48)
                                assignment_expression (368,7)-(368,47)
                                  identifier: 'str' (368,7)-(368,10)
                                  =: '=' (368,11)-(368,12)
                                  call_expression (368,13)-(368,47)
                                    identifier: 'arithsubst' (368,13)-(368,23)
                                    argument_list (368,23)-(368,47)
                                      (: '(' (368,23)-(368,24)
                                      binary_expression (368,24)-(368,32)
                                        identifier: 'str2' (368,24)-(368,28)
                                        +: '+' (368,29)-(368,30)
                                        number_literal: '2' (368,31)-(368,32)
                                      ,: ',' (368,32)-(368,33)
                                      pointer_expression (368,34)-(368,39)
                                        &: '&' (368,34)-(368,35)
                                        identifier: 'str3' (368,35)-(368,39)
                                      ,: ',' (368,39)-(368,40)
                                      binary_expression (368,41)-(368,46)
                                        identifier: 'str' (368,41)-(368,44)
                                        +: '+' (368,44)-(368,45)
                                        number_literal: '1' (368,45)-(368,46)
                                      ): ')' (368,46)-(368,47)
                                ;: ';' (368,47)-(368,48)
                              else_clause (369,3)-(370,30)
                                else: 'else' (369,3)-(369,7)
                                expression_statement (370,7)-(370,30)
                                  call_expression (370,7)-(370,29)
                                    identifier: 'strncpy' (370,7)-(370,14)
                                    argument_list (370,14)-(370,29)
                                      (: '(' (370,14)-(370,15)
                                      identifier: 'str3' (370,15)-(370,19)
                                      ,: ',' (370,19)-(370,20)
                                      identifier: 'str2' (370,21)-(370,25)
                                      ,: ',' (370,25)-(370,26)
                                      number_literal: '1' (370,27)-(370,28)
                                      ): ')' (370,28)-(370,29)
                                  ;: ';' (370,29)-(370,30)
                            expression_statement (371,3)-(371,32)
                              call_expression (371,3)-(371,31)
                                identifier: 'setdata' (371,3)-(371,10)
                                argument_list (371,10)-(371,31)
                                  (: '(' (371,10)-(371,11)
                                  identifier: 'node' (371,11)-(371,15)
                                  ,: ',' (371,15)-(371,16)
                                  cast_expression (371,17)-(371,30)
                                    (: '(' (371,17)-(371,18)
                                    type_descriptor (371,18)-(371,24)
                                      primitive_type: 'void' (371,18)-(371,22)
                                      abstract_pointer_declarator (371,23)-(371,24)
                                        *: '*' (371,23)-(371,24)
                                    ): ')' (371,24)-(371,25)
                                    identifier: 'str3' (371,26)-(371,30)
                                  ): ')' (371,30)-(371,31)
                              ;: ';' (371,31)-(371,32)
                            continue_statement (372,3)-(372,12)
                              continue: 'continue' (372,3)-(372,11)
                              ;: ';' (372,11)-(372,12)
                            }: '}' (373,6)-(373,7)
                          else_clause (373,8)-(383,7)
                            else: 'else' (373,8)-(373,12)
                            compound_statement (373,13)-(383,7)
                              {: '{' (373,13)-(373,14)
                              expression_statement (374,3)-(374,15)
                                assignment_expression (374,3)-(374,14)
                                  identifier: 'endchar' (374,3)-(374,10)
                                  =: '=' (374,11)-(374,12)
                                  identifier: 'c' (374,13)-(374,14)
                                ;: ';' (374,14)-(374,15)
                              expression_statement (375,3)-(375,15)
                                assignment_expression (375,3)-(375,14)
                                  pointer_expression (375,3)-(375,7)
                                    *: '*' (375,3)-(375,4)
                                    identifier: 'str' (375,4)-(375,7)
                                  =: '=' (375,8)-(375,9)
                                  char_literal (375,10)-(375,14)
                                    ': ''' (375,10)-(375,11)
                                    escape_sequence: '\0' (375,11)-(375,13)
                                    ': ''' (375,13)-(375,14)
                                ;: ';' (375,14)-(375,15)
                              while_statement (377,3)-(382,4)
                                while: 'while' (377,3)-(377,8)
                                parenthesized_expression (377,9)-(377,28)
                                  (: '(' (377,9)-(377,10)
                                  binary_expression (377,10)-(377,27)
                                    pointer_expression (377,10)-(377,16)
                                      *: '*' (377,10)-(377,11)
                                      update_expression (377,11)-(377,16)
                                        ++: '++' (377,11)-(377,13)
                                        identifier: 'str' (377,13)-(377,16)
                                    !=: '!=' (377,17)-(377,19)
                                    identifier: 'endchar' (377,20)-(377,27)
                                  ): ')' (377,27)-(377,28)
                                compound_statement (377,29)-(382,4)
                                  {: '{' (377,29)-(377,30)
                                  if_statement (378,7)-(381,8)
                                    if: 'if' (378,7)-(378,9)
                                    parenthesized_expression (378,10)-(378,17)
                                      (: '(' (378,10)-(378,11)
                                      unary_expression (378,11)-(378,16)
                                        !: '!' (378,11)-(378,12)
                                        pointer_expression (378,12)-(378,16)
                                          *: '*' (378,12)-(378,13)
                                          identifier: 'str' (378,13)-(378,16)
                                      ): ')' (378,16)-(378,17)
                                    compound_statement (378,18)-(381,8)
                                      {: '{' (378,18)-(378,19)
                                      expression_statement (379,4)-(379,55)
                                        call_expression (379,4)-(379,54)
                                          identifier: 'zerr' (379,4)-(379,8)
                                          argument_list (379,8)-(379,54)
                                            (: '(' (379,8)-(379,9)
                                            string_literal (379,9)-(379,53)
                                              ": '"' (379,9)-(379,10)
                                              string_content: 'failed to find end of command substitution' (379,10)-(379,52)
                                              ": '"' (379,52)-(379,53)
                                            ): ')' (379,53)-(379,54)
                                        ;: ';' (379,54)-(379,55)
                                      return_statement (380,4)-(380,16)
                                        return: 'return' (380,4)-(380,10)
                                        null (380,11)-(380,15)
                                          NULL: 'NULL' (380,11)-(380,15)
                                        ;: ';' (380,15)-(380,16)
                                      }: '}' (381,7)-(381,8)
                                  }: '}' (382,3)-(382,4)
                              }: '}' (383,6)-(383,7)
                    expression_statement (384,6)-(384,20)
                      assignment_expression (384,6)-(384,19)
                        pointer_expression (384,6)-(384,12)
                          *: '*' (384,6)-(384,7)
                          update_expression (384,7)-(384,12)
                            identifier: 'str' (384,7)-(384,10)
                            ++: '++' (384,10)-(384,12)
                        =: '=' (384,13)-(384,14)
                        char_literal (384,15)-(384,19)
                          ': ''' (384,15)-(384,16)
                          escape_sequence: '\0' (384,16)-(384,18)
                          ': ''' (384,18)-(384,19)
                      ;: ';' (384,19)-(384,20)
                    comment: '/* It is a command substitution, which will be parsed again   *
	     * by the lexer, so we untokenize it first, but we cannot use *
	     * untokenize() since in the case of `...` some Bnulls should *
	     * be left unchanged.  Note that the lexer doesn't tokenize   *
	     * the body of a command substitution so if there are some    *
	     * tokens here they are from a ${(e)~...} substitution.       */' (386,6)-(391,70)
                    for_statement (392,6)-(397,33)
                      for: 'for' (392,6)-(392,9)
                      (: '(' (392,10)-(392,11)
                      assignment_expression (392,11)-(392,21)
                        identifier: 'str' (392,11)-(392,14)
                        =: '=' (392,15)-(392,16)
                        identifier: 'str2' (392,17)-(392,21)
                      ;: ';' (392,21)-(392,22)
                      parenthesized_expression (392,23)-(392,35)
                        (: '(' (392,23)-(392,24)
                        assignment_expression (392,24)-(392,34)
                          identifier: 'c' (392,24)-(392,25)
                          =: '=' (392,26)-(392,27)
                          pointer_expression (392,28)-(392,34)
                            *: '*' (392,28)-(392,29)
                            update_expression (392,29)-(392,34)
                              ++: '++' (392,29)-(392,31)
                              identifier: 'str' (392,31)-(392,34)
                        ): ')' (392,34)-(392,35)
                      ;: ';' (392,35)-(392,36)
                      ): ')' (392,37)-(392,38)
                      if_statement (393,3)-(397,33)
                        if: 'if' (393,3)-(393,5)
                        parenthesized_expression (393,6)-(396,34)
                          (: '(' (393,6)-(393,7)
                          binary_expression (393,7)-(396,33)
                            binary_expression (393,7)-(393,29)
                              call_expression (393,7)-(393,14)
                                identifier: 'itok' (393,7)-(393,11)
                                argument_list (393,11)-(393,14)
                                  (: '(' (393,11)-(393,12)
                                  identifier: 'c' (393,12)-(393,13)
                                  ): ')' (393,13)-(393,14)
                              &&: '&&' (393,15)-(393,17)
                              binary_expression (393,18)-(393,29)
                                identifier: 'c' (393,18)-(393,19)
                                !=: '!=' (393,20)-(393,22)
                                identifier: 'Nularg' (393,23)-(393,29)
                            &&: '&&' (393,30)-(393,32)
                            unary_expression (394,7)-(396,33)
                              !: '!' (394,7)-(394,8)
                              parenthesized_expression (394,8)-(396,33)
                                (: '(' (394,8)-(394,9)
                                binary_expression (394,9)-(396,32)
                                  binary_expression (394,9)-(394,40)
                                    binary_expression (394,9)-(394,26)
                                      identifier: 'endchar' (394,9)-(394,16)
                                      !=: '!=' (394,17)-(394,19)
                                      identifier: 'Outpar' (394,20)-(394,26)
                                    &&: '&&' (394,27)-(394,29)
                                    binary_expression (394,30)-(394,40)
                                      identifier: 'c' (394,30)-(394,31)
                                      ==: '==' (394,32)-(394,34)
                                      identifier: 'Bnull' (394,35)-(394,40)
                                  &&: '&&' (394,41)-(394,43)
                                  parenthesized_expression (395,9)-(396,32)
                                    (: '(' (395,9)-(395,10)
                                    binary_expression (395,10)-(396,31)
                                      binary_expression (395,10)-(395,58)
                                        binary_expression (395,10)-(395,41)
                                          binary_expression (395,10)-(395,23)
                                            subscript_expression (395,10)-(395,16)
                                              identifier: 'str' (395,10)-(395,13)
                                              [: '[' (395,13)-(395,14)
                                              number_literal: '1' (395,14)-(395,15)
                                              ]: ']' (395,15)-(395,16)
                                            ==: '==' (395,17)-(395,19)
                                            char_literal (395,20)-(395,23)
                                              ': ''' (395,20)-(395,21)
                                              character: '$' (395,21)-(395,22)
                                              ': ''' (395,22)-(395,23)
                                          ||: '||' (395,24)-(395,26)
                                          binary_expression (395,27)-(395,41)
                                            subscript_expression (395,27)-(395,33)
                                              identifier: 'str' (395,27)-(395,30)
                                              [: '[' (395,30)-(395,31)
                                              number_literal: '1' (395,31)-(395,32)
                                              ]: ']' (395,32)-(395,33)
                                            ==: '==' (395,34)-(395,36)
                                            char_literal (395,37)-(395,41)
                                              ': ''' (395,37)-(395,38)
                                              escape_sequence: '\\' (395,38)-(395,40)
                                              ': ''' (395,40)-(395,41)
                                        ||: '||' (395,42)-(395,44)
                                        binary_expression (395,45)-(395,58)
                                          subscript_expression (395,45)-(395,51)
                                            identifier: 'str' (395,45)-(395,48)
                                            [: '[' (395,48)-(395,49)
                                            number_literal: '1' (395,49)-(395,50)
                                            ]: ']' (395,50)-(395,51)
                                          ==: '==' (395,52)-(395,54)
                                          char_literal (395,55)-(395,58)
                                            ': ''' (395,55)-(395,56)
                                            character: '`' (395,56)-(395,57)
                                            ': ''' (395,57)-(395,58)
                                      ||: '||' (395,59)-(395,61)
                                      parenthesized_expression (396,10)-(396,31)
                                        (: '(' (396,10)-(396,11)
                                        binary_expression (396,11)-(396,30)
                                          identifier: 'qt' (396,11)-(396,13)
                                          &&: '&&' (396,14)-(396,16)
                                          binary_expression (396,17)-(396,30)
                                            subscript_expression (396,17)-(396,23)
                                              identifier: 'str' (396,17)-(396,20)
                                              [: '[' (396,20)-(396,21)
                                              number_literal: '1' (396,21)-(396,22)
                                              ]: ']' (396,22)-(396,23)
                                            ==: '==' (396,24)-(396,26)
                                            char_literal (396,27)-(396,30)
                                              ': ''' (396,27)-(396,28)
                                              character: '"' (396,28)-(396,29)
                                              ': ''' (396,29)-(396,30)
                                        ): ')' (396,30)-(396,31)
                                    ): ')' (396,31)-(396,32)
                                ): ')' (396,32)-(396,33)
                          ): ')' (396,33)-(396,34)
                        expression_statement (397,7)-(397,33)
                          assignment_expression (397,7)-(397,32)
                            pointer_expression (397,7)-(397,11)
                              *: '*' (397,7)-(397,8)
                              identifier: 'str' (397,8)-(397,11)
                            =: '=' (397,12)-(397,13)
                            subscript_expression (397,14)-(397,32)
                              identifier: 'ztokens' (397,14)-(397,21)
                              [: '[' (397,21)-(397,22)
                              binary_expression (397,22)-(397,31)
                                identifier: 'c' (397,22)-(397,23)
                                -: '-' (397,24)-(397,25)
                                identifier: 'Pound' (397,26)-(397,31)
                              ]: ']' (397,31)-(397,32)
                          ;: ';' (397,32)-(397,33)
                    expression_statement (398,6)-(398,12)
                      update_expression (398,6)-(398,11)
                        identifier: 'str' (398,6)-(398,9)
                        ++: '++' (398,9)-(398,11)
                      ;: ';' (398,11)-(398,12)
                    if_statement (399,6)-(403,7)
                      if: 'if' (399,6)-(399,8)
                      parenthesized_expression (399,9)-(400,36)
                        (: '(' (399,9)-(399,10)
                        unary_expression (399,10)-(400,35)
                          !: '!' (399,10)-(399,11)
                          parenthesized_expression (399,11)-(400,35)
                            (: '(' (399,11)-(399,12)
                            assignment_expression (399,12)-(400,34)
                              identifier: 'pl' (399,12)-(399,14)
                              =: '=' (399,15)-(399,16)
                              call_expression (399,17)-(400,34)
                                identifier: 'getoutput' (399,17)-(399,26)
                                argument_list (399,26)-(400,34)
                                  (: '(' (399,26)-(399,27)
                                  binary_expression (399,27)-(399,35)
                                    identifier: 'str2' (399,27)-(399,31)
                                    +: '+' (399,32)-(399,33)
                                    number_literal: '1' (399,34)-(399,35)
                                  ,: ',' (399,35)-(399,36)
                                  binary_expression (399,37)-(400,33)
                                    identifier: 'qt' (399,37)-(399,39)
                                    ||: '||' (399,40)-(399,42)
                                    parenthesized_expression (400,6)-(400,33)
                                      (: '(' (400,6)-(400,7)
                                      binary_expression (400,7)-(400,32)
                                        identifier: 'pf_flags' (400,7)-(400,15)
                                        &: '&' (400,16)-(400,17)
                                        identifier: 'PREFORK_SINGLE' (400,18)-(400,32)
                                      ): ')' (400,32)-(400,33)
                                  ): ')' (400,33)-(400,34)
                            ): ')' (400,34)-(400,35)
                        ): ')' (400,35)-(400,36)
                      compound_statement (400,37)-(403,7)
                        {: '{' (400,37)-(400,38)
                        expression_statement (401,3)-(401,47)
                          call_expression (401,3)-(401,46)
                            identifier: 'zerr' (401,3)-(401,7)
                            argument_list (401,7)-(401,46)
                              (: '(' (401,7)-(401,8)
                              string_literal (401,8)-(401,45)
                                ": '"' (401,8)-(401,9)
                                string_content: 'parse error in command substitution' (401,9)-(401,44)
                                ": '"' (401,44)-(401,45)
                              ): ')' (401,45)-(401,46)
                          ;: ';' (401,46)-(401,47)
                        return_statement (402,3)-(402,15)
                          return: 'return' (402,3)-(402,9)
                          null (402,10)-(402,14)
                            NULL: 'NULL' (402,10)-(402,14)
                          ;: ';' (402,14)-(402,15)
                        }: '}' (403,6)-(403,7)
                    if_statement (404,6)-(405,10)
                      if: 'if' (404,6)-(404,8)
                      parenthesized_expression (404,9)-(404,28)
                        (: '(' (404,9)-(404,10)
                        binary_expression (404,10)-(404,27)
                          identifier: 'endchar' (404,10)-(404,17)
                          ==: '==' (404,18)-(404,20)
                          identifier: 'Outpar' (404,21)-(404,27)
                        ): ')' (404,27)-(404,28)
                      expression_statement (405,3)-(405,10)
                        update_expression (405,3)-(405,9)
                          identifier: 'str2' (405,3)-(405,7)
                          --: '--' (405,7)-(405,9)
                        ;: ';' (405,9)-(405,10)
                    if_statement (406,6)-(409,7)
                      if: 'if' (406,6)-(406,8)
                      parenthesized_expression (406,9)-(406,39)
                        (: '(' (406,9)-(406,10)
                        unary_expression (406,10)-(406,38)
                          !: '!' (406,10)-(406,11)
                          parenthesized_expression (406,11)-(406,38)
                            (: '(' (406,11)-(406,12)
                            assignment_expression (406,12)-(406,37)
                              identifier: 's' (406,12)-(406,13)
                              =: '=' (406,14)-(406,15)
                              cast_expression (406,16)-(406,37)
                                (: '(' (406,16)-(406,17)
                                type_descriptor (406,17)-(406,23)
                                  primitive_type: 'char' (406,17)-(406,21)
                                  abstract_pointer_declarator (406,22)-(406,23)
                                    *: '*' (406,22)-(406,23)
                                ): ')' (406,23)-(406,24)
                                call_expression (406,25)-(406,37)
                                  identifier: 'ugetnode' (406,25)-(406,33)
                                  argument_list (406,33)-(406,37)
                                    (: '(' (406,33)-(406,34)
                                    identifier: 'pl' (406,34)-(406,36)
                                    ): ')' (406,36)-(406,37)
                            ): ')' (406,37)-(406,38)
                        ): ')' (406,38)-(406,39)
                      compound_statement (406,40)-(409,7)
                        {: '{' (406,40)-(406,41)
                        expression_statement (407,3)-(407,51)
                          assignment_expression (407,3)-(407,50)
                            identifier: 'str' (407,3)-(407,6)
                            =: '=' (407,7)-(407,8)
                            cast_expression (407,9)-(407,50)
                              (: '(' (407,9)-(407,10)
                              type_descriptor (407,10)-(407,16)
                                primitive_type: 'char' (407,10)-(407,14)
                                abstract_pointer_declarator (407,15)-(407,16)
                                  *: '*' (407,15)-(407,16)
                              ): ')' (407,16)-(407,17)
                              call_expression (407,17)-(407,50)
                                identifier: 'memmove' (407,17)-(407,24)
                                argument_list (407,24)-(407,50)
                                  (: '(' (407,24)-(407,25)
                                  identifier: 'str2' (407,25)-(407,29)
                                  ,: ',' (407,29)-(407,30)
                                  identifier: 'str' (407,31)-(407,34)
                                  ,: ',' (407,34)-(407,35)
                                  binary_expression (407,36)-(407,49)
                                    call_expression (407,36)-(407,47)
                                      identifier: 'strlen' (407,36)-(407,42)
                                      argument_list (407,42)-(407,47)
                                        (: '(' (407,42)-(407,43)
                                        identifier: 'str' (407,43)-(407,46)
                                        ): ')' (407,46)-(407,47)
                                    +: '+' (407,47)-(407,48)
                                    number_literal: '1' (407,48)-(407,49)
                                  ): ')' (407,49)-(407,50)
                          ;: ';' (407,50)-(407,51)
                        continue_statement (408,3)-(408,12)
                          continue: 'continue' (408,3)-(408,11)
                          ;: ';' (408,11)-(408,12)
                        }: '}' (409,6)-(409,7)
                    if_statement (410,6)-(411,17)
                      if: 'if' (410,6)-(410,8)
                      parenthesized_expression (410,9)-(410,65)
                        (: '(' (410,9)-(410,10)
                        binary_expression (410,10)-(410,64)
                          binary_expression (410,10)-(410,44)
                            unary_expression (410,10)-(410,13)
                              !: '!' (410,10)-(410,11)
                              identifier: 'qt' (410,11)-(410,13)
                            &&: '&&' (410,14)-(410,16)
                            parenthesized_expression (410,17)-(410,44)
                              (: '(' (410,17)-(410,18)
                              binary_expression (410,18)-(410,43)
                                identifier: 'pf_flags' (410,18)-(410,26)
                                &: '&' (410,27)-(410,28)
                                identifier: 'PREFORK_SINGLE' (410,29)-(410,43)
                              ): ')' (410,43)-(410,44)
                          &&: '&&' (410,45)-(410,47)
                          call_expression (410,48)-(410,64)
                            identifier: 'isset' (410,48)-(410,53)
                            argument_list (410,53)-(410,64)
                              (: '(' (410,53)-(410,54)
                              identifier: 'GLOBSUBST' (410,54)-(410,63)
                              ): ')' (410,63)-(410,64)
                        ): ')' (410,64)-(410,65)
                      expression_statement (411,3)-(411,17)
                        call_expression (411,3)-(411,16)
                          identifier: 'shtokenize' (411,3)-(411,13)
                          argument_list (411,13)-(411,16)
                            (: '(' (411,13)-(411,14)
                            identifier: 's' (411,14)-(411,15)
                            ): ')' (411,15)-(411,16)
                        ;: ';' (411,16)-(411,17)
                    expression_statement (412,6)-(412,23)
                      assignment_expression (412,6)-(412,22)
                        identifier: 'l1' (412,6)-(412,8)
                        =: '=' (412,9)-(412,10)
                        binary_expression (412,11)-(412,22)
                          identifier: 'str2' (412,11)-(412,15)
                          -: '-' (412,16)-(412,17)
                          identifier: 'str3' (412,18)-(412,22)
                      ;: ';' (412,22)-(412,23)
                    expression_statement (413,6)-(413,21)
                      assignment_expression (413,6)-(413,20)
                        identifier: 'l2' (413,6)-(413,8)
                        =: '=' (413,9)-(413,10)
                        call_expression (413,11)-(413,20)
                          identifier: 'strlen' (413,11)-(413,17)
                          argument_list (413,17)-(413,20)
                            (: '(' (413,17)-(413,18)
                            identifier: 's' (413,18)-(413,19)
                            ): ')' (413,19)-(413,20)
                      ;: ';' (413,20)-(413,21)
                    if_statement (414,6)-(424,7)
                      if: 'if' (414,6)-(414,8)
                      parenthesized_expression (414,9)-(414,23)
                        (: '(' (414,9)-(414,10)
                        call_expression (414,10)-(414,22)
                          identifier: 'nonempty' (414,10)-(414,18)
                          argument_list (414,18)-(414,22)
                            (: '(' (414,18)-(414,19)
                            identifier: 'pl' (414,19)-(414,21)
                            ): ')' (414,21)-(414,22)
                        ): ')' (414,22)-(414,23)
                      compound_statement (414,24)-(424,7)
                        {: '{' (414,24)-(414,25)
                        declaration (415,3)-(415,29)
                          type_identifier: 'LinkNode' (415,3)-(415,11)
                          init_declarator (415,12)-(415,28)
                            identifier: 'n' (415,12)-(415,13)
                            =: '=' (415,14)-(415,15)
                            call_expression (415,16)-(415,28)
                              identifier: 'lastnode' (415,16)-(415,24)
                              argument_list (415,24)-(415,28)
                                (: '(' (415,24)-(415,25)
                                identifier: 'pl' (415,25)-(415,27)
                                ): ')' (415,27)-(415,28)
                          ;: ';' (415,28)-(415,29)
                        expression_statement (416,3)-(416,40)
                          assignment_expression (416,3)-(416,39)
                            identifier: 'str2' (416,3)-(416,7)
                            =: '=' (416,8)-(416,9)
                            cast_expression (416,10)-(416,39)
                              (: '(' (416,10)-(416,11)
                              type_descriptor (416,11)-(416,17)
                                primitive_type: 'char' (416,11)-(416,15)
                                abstract_pointer_declarator (416,16)-(416,17)
                                  *: '*' (416,16)-(416,17)
                              ): ')' (416,17)-(416,18)
                              call_expression (416,19)-(416,39)
                                identifier: 'hcalloc' (416,19)-(416,26)
                                argument_list (416,26)-(416,39)
                                  (: '(' (416,26)-(416,27)
                                  binary_expression (416,27)-(416,38)
                                    binary_expression (416,27)-(416,34)
                                      identifier: 'l1' (416,27)-(416,29)
                                      +: '+' (416,30)-(416,31)
                                      identifier: 'l2' (416,32)-(416,34)
                                    +: '+' (416,35)-(416,36)
                                    number_literal: '1' (416,37)-(416,38)
                                  ): ')' (416,38)-(416,39)
                          ;: ';' (416,39)-(416,40)
                        expression_statement (417,3)-(417,22)
                          call_expression (417,3)-(417,21)
                            identifier: 'strcpy' (417,3)-(417,9)
                            argument_list (417,9)-(417,21)
                              (: '(' (417,9)-(417,10)
                              identifier: 'str2' (417,10)-(417,14)
                              ,: ',' (417,14)-(417,15)
                              identifier: 'str3' (417,16)-(417,20)
                              ): ')' (417,20)-(417,21)
                          ;: ';' (417,21)-(417,22)
                        expression_statement (418,3)-(418,24)
                          call_expression (418,3)-(418,23)
                            identifier: 'strcpy' (418,3)-(418,9)
                            argument_list (418,9)-(418,23)
                              (: '(' (418,9)-(418,10)
                              binary_expression (418,10)-(418,19)
                                identifier: 'str2' (418,10)-(418,14)
                                +: '+' (418,15)-(418,16)
                                identifier: 'l1' (418,17)-(418,19)
                              ,: ',' (418,19)-(418,20)
                              identifier: 's' (418,21)-(418,22)
                              ): ')' (418,22)-(418,23)
                          ;: ';' (418,23)-(418,24)
                        expression_statement (419,3)-(419,23)
                          call_expression (419,3)-(419,22)
                            identifier: 'setdata' (419,3)-(419,10)
                            argument_list (419,10)-(419,22)
                              (: '(' (419,10)-(419,11)
                              identifier: 'node' (419,11)-(419,15)
                              ,: ',' (419,15)-(419,16)
                              identifier: 'str2' (419,17)-(419,21)
                              ): ')' (419,21)-(419,22)
                          ;: ';' (419,22)-(419,23)
                        expression_statement (420,3)-(420,34)
                          call_expression (420,3)-(420,33)
                            identifier: 'insertlinklist' (420,3)-(420,17)
                            argument_list (420,17)-(420,33)
                              (: '(' (420,17)-(420,18)
                              identifier: 'pl' (420,18)-(420,20)
                              ,: ',' (420,20)-(420,21)
                              identifier: 'node' (420,22)-(420,26)
                              ,: ',' (420,26)-(420,27)
                              identifier: 'list' (420,28)-(420,32)
                              ): ')' (420,32)-(420,33)
                          ;: ';' (420,33)-(420,34)
                        expression_statement (421,3)-(421,34)
                          assignment_expression (421,3)-(421,33)
                            identifier: 's' (421,3)-(421,4)
                            =: '=' (421,5)-(421,6)
                            cast_expression (421,7)-(421,33)
                              (: '(' (421,7)-(421,8)
                              type_descriptor (421,8)-(421,14)
                                primitive_type: 'char' (421,8)-(421,12)
                                abstract_pointer_declarator (421,13)-(421,14)
                                  *: '*' (421,13)-(421,14)
                              ): ')' (421,14)-(421,15)
                              call_expression (421,16)-(421,33)
                                identifier: 'getdata' (421,16)-(421,23)
                                argument_list (421,23)-(421,33)
                                  (: '(' (421,23)-(421,24)
                                  assignment_expression (421,24)-(421,32)
                                    identifier: 'node' (421,24)-(421,28)
                                    =: '=' (421,29)-(421,30)
                                    identifier: 'n' (421,31)-(421,32)
                                  ): ')' (421,32)-(421,33)
                          ;: ';' (421,33)-(421,34)
                        expression_statement (422,3)-(422,10)
                          assignment_expression (422,3)-(422,9)
                            identifier: 'l1' (422,3)-(422,5)
                            =: '=' (422,6)-(422,7)
                            number_literal: '0' (422,8)-(422,9)
                          ;: ';' (422,9)-(422,10)
                        expression_statement (423,3)-(423,18)
                          assignment_expression (423,3)-(423,17)
                            identifier: 'l2' (423,3)-(423,5)
                            =: '=' (423,6)-(423,7)
                            call_expression (423,8)-(423,17)
                              identifier: 'strlen' (423,8)-(423,14)
                              argument_list (423,14)-(423,17)
                                (: '(' (423,14)-(423,15)
                                identifier: 's' (423,15)-(423,16)
                                ): ')' (423,16)-(423,17)
                          ;: ';' (423,17)-(423,18)
                        }: '}' (424,6)-(424,7)
                    expression_statement (425,6)-(425,57)
                      assignment_expression (425,6)-(425,56)
                        identifier: 'str2' (425,6)-(425,10)
                        =: '=' (425,11)-(425,12)
                        cast_expression (425,13)-(425,56)
                          (: '(' (425,13)-(425,14)
                          type_descriptor (425,14)-(425,20)
                            primitive_type: 'char' (425,14)-(425,18)
                            abstract_pointer_declarator (425,19)-(425,20)
                              *: '*' (425,19)-(425,20)
                          ): ')' (425,20)-(425,21)
                          call_expression (425,22)-(425,56)
                            identifier: 'hcalloc' (425,22)-(425,29)
                            argument_list (425,29)-(425,56)
                              (: '(' (425,29)-(425,30)
                              binary_expression (425,30)-(425,55)
                                binary_expression (425,30)-(425,51)
                                  binary_expression (425,30)-(425,37)
                                    identifier: 'l1' (425,30)-(425,32)
                                    +: '+' (425,33)-(425,34)
                                    identifier: 'l2' (425,35)-(425,37)
                                  +: '+' (425,38)-(425,39)
                                  call_expression (425,40)-(425,51)
                                    identifier: 'strlen' (425,40)-(425,46)
                                    argument_list (425,46)-(425,51)
                                      (: '(' (425,46)-(425,47)
                                      identifier: 'str' (425,47)-(425,50)
                                      ): ')' (425,50)-(425,51)
                                +: '+' (425,52)-(425,53)
                                number_literal: '1' (425,54)-(425,55)
                              ): ')' (425,55)-(425,56)
                      ;: ';' (425,56)-(425,57)
                    if_statement (426,6)-(427,22)
                      if: 'if' (426,6)-(426,8)
                      parenthesized_expression (426,9)-(426,13)
                        (: '(' (426,9)-(426,10)
                        identifier: 'l1' (426,10)-(426,12)
                        ): ')' (426,12)-(426,13)
                      expression_statement (427,3)-(427,22)
                        call_expression (427,3)-(427,21)
                          identifier: 'strcpy' (427,3)-(427,9)
                          argument_list (427,9)-(427,21)
                            (: '(' (427,9)-(427,10)
                            identifier: 'str2' (427,10)-(427,14)
                            ,: ',' (427,14)-(427,15)
                            identifier: 'str3' (427,16)-(427,20)
                            ): ')' (427,20)-(427,21)
                        ;: ';' (427,21)-(427,22)
                    expression_statement (428,6)-(428,27)
                      call_expression (428,6)-(428,26)
                        identifier: 'strcpy' (428,6)-(428,12)
                        argument_list (428,12)-(428,26)
                          (: '(' (428,12)-(428,13)
                          binary_expression (428,13)-(428,22)
                            identifier: 'str2' (428,13)-(428,17)
                            +: '+' (428,18)-(428,19)
                            identifier: 'l1' (428,20)-(428,22)
                          ,: ',' (428,22)-(428,23)
                          identifier: 's' (428,24)-(428,25)
                          ): ')' (428,25)-(428,26)
                      ;: ';' (428,26)-(428,27)
                    expression_statement (429,6)-(429,40)
                      assignment_expression (429,6)-(429,39)
                        identifier: 'str' (429,6)-(429,9)
                        =: '=' (429,10)-(429,11)
                        call_expression (429,12)-(429,39)
                          identifier: 'strcpy' (429,12)-(429,18)
                          argument_list (429,18)-(429,39)
                            (: '(' (429,18)-(429,19)
                            binary_expression (429,19)-(429,33)
                              binary_expression (429,19)-(429,28)
                                identifier: 'str2' (429,19)-(429,23)
                                +: '+' (429,24)-(429,25)
                                identifier: 'l1' (429,26)-(429,28)
                              +: '+' (429,29)-(429,30)
                              identifier: 'l2' (429,31)-(429,33)
                            ,: ',' (429,33)-(429,34)
                            identifier: 'str' (429,35)-(429,38)
                            ): ')' (429,38)-(429,39)
                      ;: ';' (429,39)-(429,40)
                    expression_statement (430,6)-(430,18)
                      assignment_expression (430,6)-(430,17)
                        identifier: 'str3' (430,6)-(430,10)
                        =: '=' (430,11)-(430,12)
                        identifier: 'str2' (430,13)-(430,17)
                      ;: ';' (430,17)-(430,18)
                    expression_statement (431,6)-(431,26)
                      call_expression (431,6)-(431,25)
                        identifier: 'setdata' (431,6)-(431,13)
                        argument_list (431,13)-(431,25)
                          (: '(' (431,13)-(431,14)
                          identifier: 'node' (431,14)-(431,18)
                          ,: ',' (431,18)-(431,19)
                          identifier: 'str3' (431,20)-(431,24)
                          ): ')' (431,24)-(431,25)
                      ;: ';' (431,25)-(431,26)
                    continue_statement (432,6)-(432,15)
                      continue: 'continue' (432,6)-(432,14)
                      ;: ';' (432,14)-(432,15)
                    }: '}' (433,2)-(433,3)
                else_clause (433,4)-(439,3)
                  else: 'else' (433,4)-(433,8)
                  if_statement (433,9)-(439,3)
                    if: 'if' (433,9)-(433,11)
                    parenthesized_expression (433,12)-(433,66)
                      (: '(' (433,12)-(433,13)
                      binary_expression (433,13)-(433,65)
                        binary_expression (433,13)-(433,50)
                          identifier: 'asssub' (433,13)-(433,19)
                          &&: '&&' (433,20)-(433,22)
                          parenthesized_expression (433,23)-(433,50)
                            (: '(' (433,23)-(433,24)
                            binary_expression (433,24)-(433,49)
                              parenthesized_expression (433,24)-(433,34)
                                (: '(' (433,24)-(433,25)
                                binary_expression (433,25)-(433,33)
                                  identifier: 'c' (433,25)-(433,26)
                                  ==: '==' (433,27)-(433,29)
                                  char_literal (433,30)-(433,33)
                                    ': ''' (433,30)-(433,31)
                                    character: '=' (433,31)-(433,32)
                                    ': ''' (433,32)-(433,33)
                                ): ')' (433,33)-(433,34)
                              ||: '||' (433,35)-(433,37)
                              binary_expression (433,38)-(433,49)
                                identifier: 'c' (433,38)-(433,39)
                                ==: '==' (433,40)-(433,42)
                                identifier: 'Equals' (433,43)-(433,49)
                            ): ')' (433,49)-(433,50)
                        &&: '&&' (433,51)-(433,53)
                        binary_expression (433,54)-(433,65)
                          identifier: 'str' (433,54)-(433,57)
                          !=: '!=' (433,58)-(433,60)
                          identifier: 'str3' (433,61)-(433,65)
                      ): ')' (433,65)-(433,66)
                    compound_statement (433,67)-(439,3)
                      {: '{' (433,67)-(433,68)
                      comment: '/*
	     * We are in a normal argument which looks like an assignment
	     * and is to be treated like one, with no word splitting.
	     */' (434,6)-(437,9)
                      expression_statement (438,6)-(438,33)
                        assignment_expression (438,6)-(438,32)
                          identifier: 'pf_flags' (438,6)-(438,14)
                          |=: '|=' (438,15)-(438,17)
                          identifier: 'PREFORK_SINGLE' (438,18)-(438,32)
                        ;: ';' (438,32)-(438,33)
                      }: '}' (439,2)-(439,3)
          expression_statement (440,2)-(440,8)
            update_expression (440,2)-(440,7)
              identifier: 'str' (440,2)-(440,5)
              ++: '++' (440,5)-(440,7)
            ;: ';' (440,7)-(440,8)
          }: '}' (441,5)-(441,6)
      return_statement (442,5)-(442,34)
        return: 'return' (442,5)-(442,11)
        conditional_expression (442,12)-(442,33)
          identifier: 'errflag' (442,12)-(442,19)
          ?: '?' (442,20)-(442,21)
          null (442,22)-(442,26)
            NULL: 'NULL' (442,22)-(442,26)
          :: ':' (442,27)-(442,28)
          identifier: 'node' (442,29)-(442,33)
        ;: ';' (442,33)-(442,34)
      }: '}' (443,1)-(443,2)
  comment: '/*
 * Simplified version of the prefork/singsub processing where
 * we only do substitutions appropriate to quoting.  Currently
 * this means only the expansions in $'....'.  This is used
 * for the end tag for here documents.  As we are not doing
 * `...` expansions, we just use those for quoting.  However,
 * they stay in the text.  This is weird, but that's not
 * my fault.
 *
 * The remnulargs() makes this consistent with the other forms
 * of substitution, indicating that quotes have been fully
 * processed.
 *
 * The fully processed string is returned.
 */' (445,1)-(459,4)
  comment: '/**/' (461,1)-(461,5)
  function_definition (462,1)-(476,2)
    primitive_type: 'char' (462,1)-(462,5)
    pointer_declarator (462,6)-(463,22)
      *: '*' (462,6)-(462,7)
      function_declarator (463,1)-(463,22)
        identifier: 'quotesubst' (463,1)-(463,11)
        parameter_list (463,11)-(463,22)
          (: '(' (463,11)-(463,12)
          parameter_declaration (463,12)-(463,21)
            primitive_type: 'char' (463,12)-(463,16)
            pointer_declarator (463,17)-(463,21)
              *: '*' (463,17)-(463,18)
              identifier: 'str' (463,18)-(463,21)
          ): ')' (463,21)-(463,22)
    compound_statement (464,1)-(476,2)
      {: '{' (464,1)-(464,2)
      declaration (465,5)-(465,19)
        primitive_type: 'char' (465,5)-(465,9)
        init_declarator (465,10)-(465,18)
          pointer_declarator (465,10)-(465,12)
            *: '*' (465,10)-(465,11)
            identifier: 's' (465,11)-(465,12)
          =: '=' (465,13)-(465,14)
          identifier: 'str' (465,15)-(465,18)
        ;: ';' (465,18)-(465,19)
      while_statement (467,5)-(473,6)
        while: 'while' (467,5)-(467,10)
        parenthesized_expression (467,11)-(467,15)
          (: '(' (467,11)-(467,12)
          pointer_expression (467,12)-(467,14)
            *: '*' (467,12)-(467,13)
            identifier: 's' (467,13)-(467,14)
          ): ')' (467,14)-(467,15)
        compound_statement (467,16)-(473,6)
          {: '{' (467,16)-(467,17)
          if_statement (468,2)-(472,3)
            if: 'if' (468,2)-(468,4)
            parenthesized_expression (468,5)-(468,36)
              (: '(' (468,5)-(468,6)
              binary_expression (468,6)-(468,35)
                binary_expression (468,6)-(468,18)
                  pointer_expression (468,6)-(468,8)
                    *: '*' (468,6)-(468,7)
                    identifier: 's' (468,7)-(468,8)
                  ==: '==' (468,9)-(468,11)
                  identifier: 'String' (468,12)-(468,18)
                &&: '&&' (468,19)-(468,21)
                binary_expression (468,22)-(468,35)
                  subscript_expression (468,22)-(468,26)
                    identifier: 's' (468,22)-(468,23)
                    [: '[' (468,23)-(468,24)
                    number_literal: '1' (468,24)-(468,25)
                    ]: ']' (468,25)-(468,26)
                  ==: '==' (468,27)-(468,29)
                  identifier: 'Snull' (468,30)-(468,35)
              ): ')' (468,35)-(468,36)
            compound_statement (468,37)-(470,3)
              {: '{' (468,37)-(468,38)
              expression_statement (469,6)-(469,38)
                assignment_expression (469,6)-(469,37)
                  identifier: 'str' (469,6)-(469,9)
                  =: '=' (469,10)-(469,11)
                  call_expression (469,12)-(469,37)
                    identifier: 'stringsubstquote' (469,12)-(469,28)
                    argument_list (469,28)-(469,37)
                      (: '(' (469,28)-(469,29)
                      identifier: 'str' (469,29)-(469,32)
                      ,: ',' (469,32)-(469,33)
                      pointer_expression (469,34)-(469,36)
                        &: '&' (469,34)-(469,35)
                        identifier: 's' (469,35)-(469,36)
                      ): ')' (469,36)-(469,37)
                ;: ';' (469,37)-(469,38)
              }: '}' (470,2)-(470,3)
            else_clause (470,4)-(472,3)
              else: 'else' (470,4)-(470,8)
              compound_statement (470,9)-(472,3)
                {: '{' (470,9)-(470,10)
                expression_statement (471,6)-(471,10)
                  update_expression (471,6)-(471,9)
                    identifier: 's' (471,6)-(471,7)
                    ++: '++' (471,7)-(471,9)
                  ;: ';' (471,9)-(471,10)
                }: '}' (472,2)-(472,3)
          }: '}' (473,5)-(473,6)
      expression_statement (474,5)-(474,21)
        call_expression (474,5)-(474,20)
          identifier: 'remnulargs' (474,5)-(474,15)
          argument_list (474,15)-(474,20)
            (: '(' (474,15)-(474,16)
            identifier: 'str' (474,16)-(474,19)
            ): ')' (474,19)-(474,20)
        ;: ';' (474,20)-(474,21)
      return_statement (475,5)-(475,16)
        return: 'return' (475,5)-(475,11)
        identifier: 'str' (475,12)-(475,15)
        ;: ';' (475,15)-(475,16)
      }: '}' (476,1)-(476,2)
  comment: '/* Glob entries of a linked list.
 *
 * flags are from PREFORK_*, but only two are handled:
 * - PREFORK_NO_UNTOK: pass into zglob() a flag saying do not untokenise.
 * - PREFORK_KEY_VALUE: look out for Marker / Key / Value list triads
 *   and don't glob them.  The key and value should already have
 *   been untokenised as they are not subject to further expansion.
 */' (478,1)-(485,4)
  comment: '/**/' (487,1)-(487,5)
  function_definition (488,1)-(508,2)
    type_identifier: 'mod_export' (488,1)-(488,11)
    ERROR (488,12)-(488,16)
      identifier: 'void' (488,12)-(488,16)
    function_declarator (489,1)-(489,35)
      identifier: 'globlist' (489,1)-(489,9)
      parameter_list (489,9)-(489,35)
        (: '(' (489,9)-(489,10)
        parameter_declaration (489,10)-(489,23)
          type_identifier: 'LinkList' (489,10)-(489,18)
          identifier: 'list' (489,19)-(489,23)
        ,: ',' (489,23)-(489,24)
        parameter_declaration (489,25)-(489,34)
          primitive_type: 'int' (489,25)-(489,28)
          identifier: 'flags' (489,29)-(489,34)
        ): ')' (489,34)-(489,35)
    compound_statement (490,1)-(508,2)
      {: '{' (490,1)-(490,2)
      declaration (491,5)-(491,25)
        type_identifier: 'LinkNode' (491,5)-(491,13)
        identifier: 'node' (491,14)-(491,18)
        ,: ',' (491,18)-(491,19)
        identifier: 'next' (491,20)-(491,24)
        ;: ';' (491,24)-(491,25)
      expression_statement (493,5)-(493,20)
        assignment_expression (493,5)-(493,19)
          identifier: 'badcshglob' (493,5)-(493,15)
          =: '=' (493,16)-(493,17)
          number_literal: '0' (493,18)-(493,19)
        ;: ';' (493,19)-(493,20)
      for_statement (494,5)-(503,6)
        for: 'for' (494,5)-(494,8)
        (: '(' (494,9)-(494,10)
        assignment_expression (494,10)-(494,32)
          identifier: 'node' (494,10)-(494,14)
          =: '=' (494,15)-(494,16)
          call_expression (494,17)-(494,32)
            identifier: 'firstnode' (494,17)-(494,26)
            argument_list (494,26)-(494,32)
              (: '(' (494,26)-(494,27)
              identifier: 'list' (494,27)-(494,31)
              ): ')' (494,31)-(494,32)
        ;: ';' (494,32)-(494,33)
        binary_expression (494,34)-(494,50)
          unary_expression (494,34)-(494,42)
            !: '!' (494,34)-(494,35)
            identifier: 'errflag' (494,35)-(494,42)
          &&: '&&' (494,43)-(494,45)
          identifier: 'node' (494,46)-(494,50)
        ;: ';' (494,50)-(494,51)
        assignment_expression (494,52)-(494,63)
          identifier: 'node' (494,52)-(494,56)
          =: '=' (494,57)-(494,58)
          identifier: 'next' (494,59)-(494,63)
        ): ')' (494,63)-(494,64)
        compound_statement (494,65)-(503,6)
          {: '{' (494,65)-(494,66)
          expression_statement (495,2)-(495,24)
            assignment_expression (495,2)-(495,23)
              identifier: 'next' (495,2)-(495,6)
              =: '=' (495,7)-(495,8)
              call_expression (495,9)-(495,23)
                identifier: 'nextnode' (495,9)-(495,17)
                argument_list (495,17)-(495,23)
                  (: '(' (495,17)-(495,18)
                  identifier: 'node' (495,18)-(495,22)
                  ): ')' (495,22)-(495,23)
            ;: ';' (495,23)-(495,24)
          if_statement (496,2)-(502,3)
            if: 'if' (496,2)-(496,4)
            parenthesized_expression (496,5)-(497,39)
              (: '(' (496,5)-(496,6)
              binary_expression (496,6)-(497,38)
                parenthesized_expression (496,6)-(496,33)
                  (: '(' (496,6)-(496,7)
                  binary_expression (496,7)-(496,32)
                    identifier: 'flags' (496,7)-(496,12)
                    &: '&' (496,13)-(496,14)
                    identifier: 'PREFORK_KEY_VALUE' (496,15)-(496,32)
                  ): ')' (496,32)-(496,33)
                &&: '&&' (496,34)-(496,36)
                binary_expression (497,6)-(497,38)
                  pointer_expression (497,6)-(497,28)
                    *: '*' (497,6)-(497,7)
                    cast_expression (497,7)-(497,28)
                      (: '(' (497,7)-(497,8)
                      type_descriptor (497,8)-(497,14)
                        primitive_type: 'char' (497,8)-(497,12)
                        abstract_pointer_declarator (497,13)-(497,14)
                          *: '*' (497,13)-(497,14)
                      ): ')' (497,14)-(497,15)
                      call_expression (497,15)-(497,28)
                        identifier: 'getdata' (497,15)-(497,22)
                        argument_list (497,22)-(497,28)
                          (: '(' (497,22)-(497,23)
                          identifier: 'node' (497,23)-(497,27)
                          ): ')' (497,27)-(497,28)
                  ==: '==' (497,29)-(497,31)
                  identifier: 'Marker' (497,32)-(497,38)
              ): ')' (497,38)-(497,39)
            compound_statement (497,40)-(500,3)
              {: '{' (497,40)-(497,41)
              comment: '/* Skip key / value pair */' (498,6)-(498,33)
              expression_statement (499,6)-(499,38)
                assignment_expression (499,6)-(499,37)
                  identifier: 'next' (499,6)-(499,10)
                  =: '=' (499,11)-(499,12)
                  call_expression (499,13)-(499,37)
                    identifier: 'nextnode' (499,13)-(499,21)
                    argument_list (499,21)-(499,37)
                      (: '(' (499,21)-(499,22)
                      call_expression (499,22)-(499,36)
                        identifier: 'nextnode' (499,22)-(499,30)
                        argument_list (499,30)-(499,36)
                          (: '(' (499,30)-(499,31)
                          identifier: 'next' (499,31)-(499,35)
                          ): ')' (499,35)-(499,36)
                      ): ')' (499,36)-(499,37)
                ;: ';' (499,37)-(499,38)
              }: '}' (500,2)-(500,3)
            else_clause (500,4)-(502,3)
              else: 'else' (500,4)-(500,8)
              compound_statement (500,9)-(502,3)
                {: '{' (500,9)-(500,10)
                expression_statement (501,6)-(501,57)
                  call_expression (501,6)-(501,56)
                    identifier: 'zglob' (501,6)-(501,11)
                    argument_list (501,11)-(501,56)
                      (: '(' (501,11)-(501,12)
                      identifier: 'list' (501,12)-(501,16)
                      ,: ',' (501,16)-(501,17)
                      identifier: 'node' (501,18)-(501,22)
                      ,: ',' (501,22)-(501,23)
                      binary_expression (501,24)-(501,55)
                        parenthesized_expression (501,24)-(501,50)
                          (: '(' (501,24)-(501,25)
                          binary_expression (501,25)-(501,49)
                            identifier: 'flags' (501,25)-(501,30)
                            &: '&' (501,31)-(501,32)
                            identifier: 'PREFORK_NO_UNTOK' (501,33)-(501,49)
                          ): ')' (501,49)-(501,50)
                        !=: '!=' (501,51)-(501,53)
                        number_literal: '0' (501,54)-(501,55)
                      ): ')' (501,55)-(501,56)
                  ;: ';' (501,56)-(501,57)
                }: '}' (502,2)-(502,3)
          }: '}' (503,5)-(503,6)
      if_statement (504,5)-(507,19)
        if: 'if' (504,5)-(504,7)
        parenthesized_expression (504,8)-(504,16)
          (: '(' (504,8)-(504,9)
          identifier: 'noerrs' (504,9)-(504,15)
          ): ')' (504,15)-(504,16)
        expression_statement (505,2)-(505,17)
          assignment_expression (505,2)-(505,16)
            identifier: 'badcshglob' (505,2)-(505,12)
            =: '=' (505,13)-(505,14)
            number_literal: '0' (505,15)-(505,16)
          ;: ';' (505,16)-(505,17)
        else_clause (506,5)-(507,19)
          else: 'else' (506,5)-(506,9)
          if_statement (506,10)-(507,19)
            if: 'if' (506,10)-(506,12)
            parenthesized_expression (506,13)-(506,30)
              (: '(' (506,13)-(506,14)
              binary_expression (506,14)-(506,29)
                identifier: 'badcshglob' (506,14)-(506,24)
                ==: '==' (506,25)-(506,27)
                number_literal: '1' (506,28)-(506,29)
              ): ')' (506,29)-(506,30)
            expression_statement (507,2)-(507,19)
              call_expression (507,2)-(507,18)
                identifier: 'zerr' (507,2)-(507,6)
                argument_list (507,6)-(507,18)
                  (: '(' (507,6)-(507,7)
                  string_literal (507,7)-(507,17)
                    ": '"' (507,7)-(507,8)
                    string_content: 'no match' (507,8)-(507,16)
                    ": '"' (507,16)-(507,17)
                  ): ')' (507,17)-(507,18)
              ;: ';' (507,18)-(507,19)
      }: '}' (508,1)-(508,2)
  comment: '/* perform substitution on a single word */' (510,1)-(510,44)
  comment: '/**/' (512,1)-(512,5)
  function_definition (513,1)-(525,2)
    type_identifier: 'mod_export' (513,1)-(513,11)
    ERROR (513,12)-(513,16)
      identifier: 'void' (513,12)-(513,16)
    function_declarator (514,1)-(514,18)
      identifier: 'singsub' (514,1)-(514,8)
      parameter_list (514,8)-(514,18)
        (: '(' (514,8)-(514,9)
        parameter_declaration (514,9)-(514,17)
          primitive_type: 'char' (514,9)-(514,13)
          pointer_declarator (514,14)-(514,17)
            *: '*' (514,14)-(514,15)
            pointer_declarator (514,15)-(514,17)
              *: '*' (514,15)-(514,16)
              identifier: 's' (514,16)-(514,17)
        ): ')' (514,17)-(514,18)
    compound_statement (515,1)-(525,2)
      {: '{' (515,1)-(515,2)
      expression_statement (516,5)-(516,22)
        call_expression (516,5)-(516,21)
          identifier: 'local_list1' (516,5)-(516,16)
          argument_list (516,16)-(516,21)
            (: '(' (516,16)-(516,17)
            identifier: 'foo' (516,17)-(516,20)
            ): ')' (516,20)-(516,21)
        ;: ';' (516,21)-(516,22)
      expression_statement (518,5)-(518,25)
        call_expression (518,5)-(518,24)
          identifier: 'init_list1' (518,5)-(518,15)
          argument_list (518,15)-(518,24)
            (: '(' (518,15)-(518,16)
            identifier: 'foo' (518,16)-(518,19)
            ,: ',' (518,19)-(518,20)
            pointer_expression (518,21)-(518,23)
              *: '*' (518,21)-(518,22)
              identifier: 's' (518,22)-(518,23)
            ): ')' (518,23)-(518,24)
        ;: ';' (518,24)-(518,25)
      expression_statement (520,5)-(520,41)
        call_expression (520,5)-(520,40)
          identifier: 'prefork' (520,5)-(520,12)
          argument_list (520,12)-(520,40)
            (: '(' (520,12)-(520,13)
            pointer_expression (520,13)-(520,17)
              &: '&' (520,13)-(520,14)
              identifier: 'foo' (520,14)-(520,17)
            ,: ',' (520,17)-(520,18)
            identifier: 'PREFORK_SINGLE' (520,19)-(520,33)
            ,: ',' (520,33)-(520,34)
            null (520,35)-(520,39)
              NULL: 'NULL' (520,35)-(520,39)
            ): ')' (520,39)-(520,40)
        ;: ';' (520,40)-(520,41)
      if_statement (521,5)-(522,9)
        if: 'if' (521,5)-(521,7)
        parenthesized_expression (521,8)-(521,17)
          (: '(' (521,8)-(521,9)
          identifier: 'errflag' (521,9)-(521,16)
          ): ')' (521,16)-(521,17)
        return_statement (522,2)-(522,9)
          return: 'return' (522,2)-(522,8)
          ;: ';' (522,8)-(522,9)
      expression_statement (523,5)-(523,34)
        assignment_expression (523,5)-(523,33)
          pointer_expression (523,5)-(523,7)
            *: '*' (523,5)-(523,6)
            identifier: 's' (523,6)-(523,7)
          =: '=' (523,8)-(523,9)
          cast_expression (523,10)-(523,33)
            (: '(' (523,10)-(523,11)
            type_descriptor (523,11)-(523,17)
              primitive_type: 'char' (523,11)-(523,15)
              abstract_pointer_declarator (523,16)-(523,17)
                *: '*' (523,16)-(523,17)
            ): ')' (523,17)-(523,18)
            call_expression (523,19)-(523,33)
              identifier: 'ugetnode' (523,19)-(523,27)
              argument_list (523,27)-(523,33)
                (: '(' (523,27)-(523,28)
                pointer_expression (523,28)-(523,32)
                  &: '&' (523,28)-(523,29)
                  identifier: 'foo' (523,29)-(523,32)
                ): ')' (523,32)-(523,33)
        ;: ';' (523,33)-(523,34)
      expression_statement (524,5)-(524,74)
        call_expression (524,5)-(524,73)
          identifier: 'DPUTS' (524,5)-(524,10)
          argument_list (524,10)-(524,73)
            (: '(' (524,10)-(524,11)
            call_expression (524,11)-(524,25)
              identifier: 'nonempty' (524,11)-(524,19)
              argument_list (524,19)-(524,25)
                (: '(' (524,19)-(524,20)
                pointer_expression (524,20)-(524,24)
                  &: '&' (524,20)-(524,21)
                  identifier: 'foo' (524,21)-(524,24)
                ): ')' (524,24)-(524,25)
            ,: ',' (524,25)-(524,26)
            string_literal (524,27)-(524,72)
              ": '"' (524,27)-(524,28)
              string_content: 'BUG: singsub() produced more than one word!' (524,28)-(524,71)
              ": '"' (524,71)-(524,72)
            ): ')' (524,72)-(524,73)
        ;: ';' (524,73)-(524,74)
      }: '}' (525,1)-(525,2)
  comment: '/* Perform substitution on a single word, *s. Unlike with singsub(), the
 * result can be more than one word. If split is non-zero, the string is
 * first word-split using IFS, but only for non-quoted "whitespace" (as
 * indicated by Dnull, Snull, Tick, Bnull, Inpar, and Outpar).
 *
 * If arg "a" was non-NULL and we got an array as a result of the parsing,
 * the strings are stored in *a (even for a 1-element array) and *isarr is
 * set to 1.  Otherwise, *isarr is set to 0, and the result is put into *s,
 * with any necessary joining of multiple elements using sep (which can be
 * NULL to use IFS).  The return value is true iff the expansion resulted
 * in an empty list.
 *
 * *ms_flags is set to bits in the enum above as needed.
 */' (527,1)-(540,4)
  comment: '/**/' (542,1)-(542,5)
  function_definition (543,1)-(658,2)
    storage_class_specifier (543,1)-(543,7)
      static: 'static' (543,1)-(543,7)
    primitive_type: 'int' (543,8)-(543,11)
    function_declarator (544,1)-(545,16)
      identifier: 'multsub' (544,1)-(544,8)
      parameter_list (544,8)-(545,16)
        (: '(' (544,8)-(544,9)
        parameter_declaration (544,9)-(544,17)
          primitive_type: 'char' (544,9)-(544,13)
          pointer_declarator (544,14)-(544,17)
            *: '*' (544,14)-(544,15)
            pointer_declarator (544,15)-(544,17)
              *: '*' (544,15)-(544,16)
              identifier: 's' (544,16)-(544,17)
        ,: ',' (544,17)-(544,18)
        parameter_declaration (544,19)-(544,31)
          primitive_type: 'int' (544,19)-(544,22)
          identifier: 'pf_flags' (544,23)-(544,31)
        ,: ',' (544,31)-(544,32)
        parameter_declaration (544,33)-(544,42)
          primitive_type: 'char' (544,33)-(544,37)
          pointer_declarator (544,38)-(544,42)
            *: '*' (544,38)-(544,39)
            pointer_declarator (544,39)-(544,42)
              *: '*' (544,39)-(544,40)
              pointer_declarator (544,40)-(544,42)
                *: '*' (544,40)-(544,41)
                identifier: 'a' (544,41)-(544,42)
        ,: ',' (544,42)-(544,43)
        parameter_declaration (544,44)-(544,54)
          primitive_type: 'int' (544,44)-(544,47)
          pointer_declarator (544,48)-(544,54)
            *: '*' (544,48)-(544,49)
            identifier: 'isarr' (544,49)-(544,54)
        ,: ',' (544,54)-(544,55)
        parameter_declaration (544,56)-(544,65)
          primitive_type: 'char' (544,56)-(544,60)
          pointer_declarator (544,61)-(544,65)
            *: '*' (544,61)-(544,62)
            identifier: 'sep' (544,62)-(544,65)
        ,: ',' (544,65)-(544,66)
        parameter_declaration (545,2)-(545,15)
          primitive_type: 'int' (545,2)-(545,5)
          pointer_declarator (545,6)-(545,15)
            *: '*' (545,6)-(545,7)
            identifier: 'ms_flags' (545,7)-(545,15)
        ): ')' (545,15)-(545,16)
    compound_statement (546,1)-(658,2)
      {: '{' (546,1)-(546,2)
      declaration (547,5)-(547,11)
        primitive_type: 'int' (547,5)-(547,8)
        identifier: 'l' (547,9)-(547,10)
        ;: ';' (547,10)-(547,11)
      declaration (548,5)-(548,28)
        primitive_type: 'char' (548,5)-(548,9)
        pointer_declarator (548,10)-(548,13)
          *: '*' (548,10)-(548,11)
          pointer_declarator (548,11)-(548,13)
            *: '*' (548,11)-(548,12)
            identifier: 'r' (548,12)-(548,13)
        ,: ',' (548,13)-(548,14)
        pointer_declarator (548,15)-(548,18)
          *: '*' (548,15)-(548,16)
          pointer_declarator (548,16)-(548,18)
            *: '*' (548,16)-(548,17)
            identifier: 'p' (548,17)-(548,18)
        ,: ',' (548,18)-(548,19)
        init_declarator (548,20)-(548,27)
          pointer_declarator (548,20)-(548,22)
            *: '*' (548,20)-(548,21)
            identifier: 'x' (548,21)-(548,22)
          =: '=' (548,23)-(548,24)
          pointer_expression (548,25)-(548,27)
            *: '*' (548,25)-(548,26)
            identifier: 's' (548,26)-(548,27)
        ;: ';' (548,27)-(548,28)
      expression_statement (549,5)-(549,22)
        call_expression (549,5)-(549,21)
          identifier: 'local_list1' (549,5)-(549,16)
          argument_list (549,16)-(549,21)
            (: '(' (549,16)-(549,17)
            identifier: 'foo' (549,17)-(549,20)
            ): ')' (549,20)-(549,21)
        ;: ';' (549,21)-(549,22)
      if_statement (551,5)-(563,6)
        if: 'if' (551,5)-(551,7)
        parenthesized_expression (551,8)-(551,34)
          (: '(' (551,8)-(551,9)
          binary_expression (551,9)-(551,33)
            identifier: 'pf_flags' (551,9)-(551,17)
            &: '&' (551,18)-(551,19)
            identifier: 'PREFORK_SPLIT' (551,20)-(551,33)
          ): ')' (551,33)-(551,34)
        compound_statement (551,35)-(563,6)
          {: '{' (551,35)-(551,36)
          comment: '/*
	 * This doesn't handle multibyte characters, but we're
	 * looking for whitespace separators which must be ASCII.
	 */' (552,2)-(555,5)
          for_statement (556,2)-(562,3)
            for: 'for' (556,2)-(556,5)
            (: '(' (556,6)-(556,7)
            ;: ';' (556,8)-(556,9)
            pointer_expression (556,10)-(556,12)
              *: '*' (556,10)-(556,11)
              identifier: 'x' (556,11)-(556,12)
            ;: ';' (556,12)-(556,13)
            assignment_expression (556,14)-(556,20)
              identifier: 'x' (556,14)-(556,15)
              +=: '+=' (556,16)-(556,18)
              identifier: 'l' (556,19)-(556,20)
            ): ')' (556,20)-(556,21)
            compound_statement (556,22)-(562,3)
              {: '{' (556,22)-(556,23)
              declaration (557,6)-(557,49)
                primitive_type: 'char' (557,6)-(557,10)
                init_declarator (557,11)-(557,48)
                  identifier: 'c' (557,11)-(557,12)
                  =: '=' (557,13)-(557,14)
                  conditional_expression (557,15)-(557,48)
                    parenthesized_expression (557,15)-(557,31)
                      (: '(' (557,15)-(557,16)
                      assignment_expression (557,16)-(557,30)
                        identifier: 'l' (557,16)-(557,17)
                        =: '=' (557,18)-(557,19)
                        binary_expression (557,20)-(557,30)
                          pointer_expression (557,20)-(557,22)
                            *: '*' (557,20)-(557,21)
                            identifier: 'x' (557,21)-(557,22)
                          ==: '==' (557,23)-(557,25)
                          identifier: 'Meta' (557,26)-(557,30)
                      ): ')' (557,30)-(557,31)
                    ?: '?' (557,32)-(557,33)
                    binary_expression (557,34)-(557,43)
                      subscript_expression (557,34)-(557,38)
                        identifier: 'x' (557,34)-(557,35)
                        [: '[' (557,35)-(557,36)
                        number_literal: '1' (557,36)-(557,37)
                        ]: ']' (557,37)-(557,38)
                      ^: '^' (557,39)-(557,40)
                      number_literal: '32' (557,41)-(557,43)
                    :: ':' (557,44)-(557,45)
                    pointer_expression (557,46)-(557,48)
                      *: '*' (557,46)-(557,47)
                      identifier: 'x' (557,47)-(557,48)
                ;: ';' (557,48)-(557,49)
              expression_statement (558,6)-(558,10)
                update_expression (558,6)-(558,9)
                  identifier: 'l' (558,6)-(558,7)
                  ++: '++' (558,7)-(558,9)
                ;: ';' (558,9)-(558,10)
              if_statement (559,6)-(560,9)
                if: 'if' (559,6)-(559,8)
                parenthesized_expression (559,9)-(559,27)
                  (: '(' (559,9)-(559,10)
                  unary_expression (559,10)-(559,26)
                    !: '!' (559,10)-(559,11)
                    call_expression (559,11)-(559,26)
                      identifier: 'iwsep' (559,11)-(559,16)
                      argument_list (559,16)-(559,26)
                        (: '(' (559,16)-(559,17)
                        call_expression (559,17)-(559,25)
                          identifier: 'STOUC' (559,17)-(559,22)
                          argument_list (559,22)-(559,25)
                            (: '(' (559,22)-(559,23)
                            identifier: 'c' (559,23)-(559,24)
                            ): ')' (559,24)-(559,25)
                        ): ')' (559,25)-(559,26)
                  ): ')' (559,26)-(559,27)
                break_statement (560,3)-(560,9)
                  break: 'break' (560,3)-(560,8)
                  ;: ';' (560,8)-(560,9)
              expression_statement (561,6)-(561,39)
                assignment_expression (561,6)-(561,38)
                  pointer_expression (561,6)-(561,15)
                    *: '*' (561,6)-(561,7)
                    identifier: 'ms_flags' (561,7)-(561,15)
                  |=: '|=' (561,16)-(561,18)
                  identifier: 'MULTSUB_WS_AT_START' (561,19)-(561,38)
                ;: ';' (561,38)-(561,39)
              }: '}' (562,2)-(562,3)
          }: '}' (563,5)-(563,6)
      expression_statement (565,5)-(565,24)
        call_expression (565,5)-(565,23)
          identifier: 'init_list1' (565,5)-(565,15)
          argument_list (565,15)-(565,23)
            (: '(' (565,15)-(565,16)
            identifier: 'foo' (565,16)-(565,19)
            ,: ',' (565,19)-(565,20)
            identifier: 'x' (565,21)-(565,22)
            ): ')' (565,22)-(565,23)
        ;: ';' (565,23)-(565,24)
      if_statement (567,5)-(623,6)
        if: 'if' (567,5)-(567,7)
        parenthesized_expression (567,8)-(567,34)
          (: '(' (567,8)-(567,9)
          binary_expression (567,9)-(567,33)
            identifier: 'pf_flags' (567,9)-(567,17)
            &: '&' (567,18)-(567,19)
            identifier: 'PREFORK_SPLIT' (567,20)-(567,33)
          ): ')' (567,33)-(567,34)
        compound_statement (567,35)-(623,6)
          {: '{' (567,35)-(567,36)
          declaration (568,2)-(568,31)
            type_identifier: 'LinkNode' (568,2)-(568,10)
            init_declarator (568,11)-(568,30)
              identifier: 'n' (568,11)-(568,12)
              =: '=' (568,13)-(568,14)
              call_expression (568,15)-(568,30)
                identifier: 'firstnode' (568,15)-(568,24)
                argument_list (568,24)-(568,30)
                  (: '(' (568,24)-(568,25)
                  pointer_expression (568,25)-(568,29)
                    &: '&' (568,25)-(568,26)
                    identifier: 'foo' (568,26)-(568,29)
                  ): ')' (568,29)-(568,30)
            ;: ';' (568,30)-(568,31)
          declaration (569,2)-(569,23)
            primitive_type: 'int' (569,2)-(569,5)
            init_declarator (569,6)-(569,13)
              identifier: 'inq' (569,6)-(569,9)
              =: '=' (569,10)-(569,11)
              number_literal: '0' (569,12)-(569,13)
            ,: ',' (569,13)-(569,14)
            init_declarator (569,15)-(569,22)
              identifier: 'inp' (569,15)-(569,18)
              =: '=' (569,19)-(569,20)
              number_literal: '0' (569,21)-(569,22)
            ;: ';' (569,22)-(569,23)
          expression_statement (570,2)-(570,20)
            call_expression (570,2)-(570,19)
              identifier: 'MB_METACHARINIT' (570,2)-(570,17)
              argument_list (570,17)-(570,19)
                (: '(' (570,17)-(570,18)
                ): ')' (570,18)-(570,19)
            ;: ';' (570,19)-(570,20)
          for_statement (571,2)-(622,3)
            for: 'for' (571,2)-(571,5)
            (: '(' (571,6)-(571,7)
            ;: ';' (571,8)-(571,9)
            pointer_expression (571,10)-(571,12)
              *: '*' (571,10)-(571,11)
              identifier: 'x' (571,11)-(571,12)
            ;: ';' (571,12)-(571,13)
            assignment_expression (571,14)-(571,20)
              identifier: 'x' (571,14)-(571,15)
              +=: '+=' (571,16)-(571,18)
              identifier: 'l' (571,19)-(571,20)
            ): ')' (571,20)-(571,21)
            compound_statement (571,22)-(622,3)
              {: '{' (571,22)-(571,23)
              declaration (572,6)-(572,20)
                primitive_type: 'int' (572,6)-(572,9)
                init_declarator (572,10)-(572,19)
                  identifier: 'rawc' (572,10)-(572,14)
                  =: '=' (572,15)-(572,16)
                  number_literal: '-1' (572,17)-(572,19)
                ;: ';' (572,19)-(572,20)
              declaration (573,6)-(573,19)
                type_identifier: 'convchar_t' (573,6)-(573,16)
                identifier: 'c' (573,17)-(573,18)
                ;: ';' (573,18)-(573,19)
              if_statement (574,6)-(575,12)
                if: 'if' (574,6)-(574,8)
                parenthesized_expression (574,9)-(574,21)
                  (: '(' (574,9)-(574,10)
                  binary_expression (574,10)-(574,20)
                    pointer_expression (574,10)-(574,12)
                      *: '*' (574,10)-(574,11)
                      identifier: 'x' (574,11)-(574,12)
                    ==: '==' (574,13)-(574,15)
                    identifier: 'Dash' (574,16)-(574,20)
                  ): ')' (574,20)-(574,21)
                expression_statement (575,3)-(575,12)
                  assignment_expression (575,3)-(575,11)
                    pointer_expression (575,3)-(575,5)
                      *: '*' (575,3)-(575,4)
                      identifier: 'x' (575,4)-(575,5)
                    =: '=' (575,6)-(575,7)
                    char_literal (575,8)-(575,11)
                      ': ''' (575,8)-(575,9)
                      character: '-' (575,9)-(575,10)
                      ': ''' (575,10)-(575,11)
                  ;: ';' (575,11)-(575,12)
              if_statement (576,6)-(601,7)
                if: 'if' (576,6)-(576,8)
                parenthesized_expression (576,9)-(576,26)
                  (: '(' (576,9)-(576,10)
                  call_expression (576,10)-(576,25)
                    identifier: 'itok' (576,10)-(576,14)
                    argument_list (576,14)-(576,25)
                      (: '(' (576,14)-(576,15)
                      call_expression (576,15)-(576,24)
                        identifier: 'STOUC' (576,15)-(576,20)
                        argument_list (576,20)-(576,24)
                          (: '(' (576,20)-(576,21)
                          pointer_expression (576,21)-(576,23)
                            *: '*' (576,21)-(576,22)
                            identifier: 'x' (576,22)-(576,23)
                          ): ')' (576,23)-(576,24)
                      ): ')' (576,24)-(576,25)
                  ): ')' (576,25)-(576,26)
                compound_statement (576,27)-(580,7)
                  {: '{' (576,27)-(576,28)
                  comment: '/* token, can't be separator, must be single byte */' (577,3)-(577,55)
                  expression_statement (578,3)-(578,13)
                    assignment_expression (578,3)-(578,12)
                      identifier: 'rawc' (578,3)-(578,7)
                      =: '=' (578,8)-(578,9)
                      pointer_expression (578,10)-(578,12)
                        *: '*' (578,10)-(578,11)
                        identifier: 'x' (578,11)-(578,12)
                    ;: ';' (578,12)-(578,13)
                  expression_statement (579,3)-(579,9)
                    assignment_expression (579,3)-(579,8)
                      identifier: 'l' (579,3)-(579,4)
                      =: '=' (579,5)-(579,6)
                      number_literal: '1' (579,7)-(579,8)
                    ;: ';' (579,8)-(579,9)
                  }: '}' (580,6)-(580,7)
                else_clause (580,8)-(601,7)
                  else: 'else' (580,8)-(580,12)
                  compound_statement (580,13)-(601,7)
                    {: '{' (580,13)-(580,14)
                    expression_statement (581,3)-(581,33)
                      assignment_expression (581,3)-(581,32)
                        identifier: 'l' (581,3)-(581,4)
                        =: '=' (581,5)-(581,6)
                        call_expression (581,7)-(581,32)
                          identifier: 'MB_METACHARLENCONV' (581,7)-(581,25)
                          argument_list (581,25)-(581,32)
                            (: '(' (581,25)-(581,26)
                            identifier: 'x' (581,26)-(581,27)
                            ,: ',' (581,27)-(581,28)
                            pointer_expression (581,29)-(581,31)
                              &: '&' (581,29)-(581,30)
                              identifier: 'c' (581,30)-(581,31)
                            ): ')' (581,31)-(581,32)
                      ;: ';' (581,32)-(581,33)
                    if_statement (582,3)-(600,4)
                      if: 'if' (582,3)-(582,5)
                      parenthesized_expression (582,6)-(582,43)
                        (: '(' (582,6)-(582,7)
                        binary_expression (582,7)-(582,42)
                          binary_expression (582,7)-(582,19)
                            unary_expression (582,7)-(582,11)
                              !: '!' (582,7)-(582,8)
                              identifier: 'inq' (582,8)-(582,11)
                            &&: '&&' (582,12)-(582,14)
                            unary_expression (582,15)-(582,19)
                              !: '!' (582,15)-(582,16)
                              identifier: 'inp' (582,16)-(582,19)
                          &&: '&&' (582,20)-(582,22)
                          call_expression (582,23)-(582,42)
                            identifier: 'WC_ZISTYPE' (582,23)-(582,33)
                            argument_list (582,33)-(582,42)
                              (: '(' (582,33)-(582,34)
                              identifier: 'c' (582,34)-(582,35)
                              ,: ',' (582,35)-(582,36)
                              identifier: 'ISEP' (582,37)-(582,41)
                              ): ')' (582,41)-(582,42)
                        ): ')' (582,42)-(582,43)
                      compound_statement (582,44)-(600,4)
                        {: '{' (582,44)-(582,45)
                        expression_statement (583,7)-(583,17)
                          assignment_expression (583,7)-(583,16)
                            pointer_expression (583,7)-(583,9)
                              *: '*' (583,7)-(583,8)
                              identifier: 'x' (583,8)-(583,9)
                            =: '=' (583,10)-(583,11)
                            char_literal (583,12)-(583,16)
                              ': ''' (583,12)-(583,13)
                              escape_sequence: '\0' (583,13)-(583,15)
                              ': ''' (583,15)-(583,16)
                          ;: ';' (583,16)-(583,17)
                        for_statement (584,7)-(594,8)
                          for: 'for' (584,7)-(584,10)
                          (: '(' (584,11)-(584,12)
                          assignment_expression (584,12)-(584,18)
                            identifier: 'x' (584,12)-(584,13)
                            +=: '+=' (584,14)-(584,16)
                            identifier: 'l' (584,17)-(584,18)
                          ;: ';' (584,18)-(584,19)
                          pointer_expression (584,20)-(584,22)
                            *: '*' (584,20)-(584,21)
                            identifier: 'x' (584,21)-(584,22)
                          ;: ';' (584,22)-(584,23)
                          assignment_expression (584,24)-(584,30)
                            identifier: 'x' (584,24)-(584,25)
                            +=: '+=' (584,26)-(584,28)
                            identifier: 'l' (584,29)-(584,30)
                          ): ')' (584,30)-(584,31)
                          compound_statement (584,32)-(594,8)
                            {: '{' (584,32)-(584,33)
                            if_statement (585,4)-(590,5)
                              if: 'if' (585,4)-(585,6)
                              parenthesized_expression (585,7)-(585,24)
                                (: '(' (585,7)-(585,8)
                                call_expression (585,8)-(585,23)
                                  identifier: 'itok' (585,8)-(585,12)
                                  argument_list (585,12)-(585,23)
                                    (: '(' (585,12)-(585,13)
                                    call_expression (585,13)-(585,22)
                                      identifier: 'STOUC' (585,13)-(585,18)
                                      argument_list (585,18)-(585,22)
                                        (: '(' (585,18)-(585,19)
                                        pointer_expression (585,19)-(585,21)
                                          *: '*' (585,19)-(585,20)
                                          identifier: 'x' (585,20)-(585,21)
                                        ): ')' (585,21)-(585,22)
                                    ): ')' (585,22)-(585,23)
                                ): ')' (585,23)-(585,24)
                              compound_statement (585,25)-(590,5)
                                {: '{' (585,25)-(585,26)
                                comment: '/* as above */' (586,8)-(586,22)
                                expression_statement (587,8)-(587,18)
                                  assignment_expression (587,8)-(587,17)
                                    identifier: 'rawc' (587,8)-(587,12)
                                    =: '=' (587,13)-(587,14)
                                    pointer_expression (587,15)-(587,17)
                                      *: '*' (587,15)-(587,16)
                                      identifier: 'x' (587,16)-(587,17)
                                  ;: ';' (587,17)-(587,18)
                                expression_statement (588,8)-(588,14)
                                  assignment_expression (588,8)-(588,13)
                                    identifier: 'l' (588,8)-(588,9)
                                    =: '=' (588,10)-(588,11)
                                    number_literal: '1' (588,12)-(588,13)
                                  ;: ';' (588,13)-(588,14)
                                break_statement (589,8)-(589,14)
                                  break: 'break' (589,8)-(589,13)
                                  ;: ';' (589,13)-(589,14)
                                }: '}' (590,4)-(590,5)
                            expression_statement (591,4)-(591,34)
                              assignment_expression (591,4)-(591,33)
                                identifier: 'l' (591,4)-(591,5)
                                =: '=' (591,6)-(591,7)
                                call_expression (591,8)-(591,33)
                                  identifier: 'MB_METACHARLENCONV' (591,8)-(591,26)
                                  argument_list (591,26)-(591,33)
                                    (: '(' (591,26)-(591,27)
                                    identifier: 'x' (591,27)-(591,28)
                                    ,: ',' (591,28)-(591,29)
                                    pointer_expression (591,30)-(591,32)
                                      &: '&' (591,30)-(591,31)
                                      identifier: 'c' (591,31)-(591,32)
                                    ): ')' (591,32)-(591,33)
                              ;: ';' (591,33)-(591,34)
                            if_statement (592,4)-(593,14)
                              if: 'if' (592,4)-(592,6)
                              parenthesized_expression (592,7)-(592,29)
                                (: '(' (592,7)-(592,8)
                                unary_expression (592,8)-(592,28)
                                  !: '!' (592,8)-(592,9)
                                  call_expression (592,9)-(592,28)
                                    identifier: 'WC_ZISTYPE' (592,9)-(592,19)
                                    argument_list (592,19)-(592,28)
                                      (: '(' (592,19)-(592,20)
                                      identifier: 'c' (592,20)-(592,21)
                                      ,: ',' (592,21)-(592,22)
                                      identifier: 'ISEP' (592,23)-(592,27)
                                      ): ')' (592,27)-(592,28)
                                ): ')' (592,28)-(592,29)
                              break_statement (593,8)-(593,14)
                                break: 'break' (593,8)-(593,13)
                                ;: ';' (593,13)-(593,14)
                            }: '}' (594,7)-(594,8)
                        if_statement (595,7)-(598,8)
                          if: 'if' (595,7)-(595,9)
                          parenthesized_expression (595,10)-(595,15)
                            (: '(' (595,10)-(595,11)
                            unary_expression (595,11)-(595,14)
                              !: '!' (595,11)-(595,12)
                              pointer_expression (595,12)-(595,14)
                                *: '*' (595,12)-(595,13)
                                identifier: 'x' (595,13)-(595,14)
                            ): ')' (595,14)-(595,15)
                          compound_statement (595,16)-(598,8)
                            {: '{' (595,16)-(595,17)
                            expression_statement (596,4)-(596,35)
                              assignment_expression (596,4)-(596,34)
                                pointer_expression (596,4)-(596,13)
                                  *: '*' (596,4)-(596,5)
                                  identifier: 'ms_flags' (596,5)-(596,13)
                                |=: '|=' (596,14)-(596,16)
                                identifier: 'MULTSUB_WS_AT_END' (596,17)-(596,34)
                              ;: ';' (596,34)-(596,35)
                            break_statement (597,4)-(597,10)
                              break: 'break' (597,4)-(597,9)
                              ;: ';' (597,9)-(597,10)
                            }: '}' (598,7)-(598,8)
                        expression_statement (599,7)-(599,54)
                          comma_expression (599,7)-(599,53)
                            call_expression (599,7)-(599,41)
                              identifier: 'insertlinknode' (599,7)-(599,21)
                              argument_list (599,21)-(599,41)
                                (: '(' (599,21)-(599,22)
                                pointer_expression (599,22)-(599,26)
                                  &: '&' (599,22)-(599,23)
                                  identifier: 'foo' (599,23)-(599,26)
                                ,: ',' (599,26)-(599,27)
                                identifier: 'n' (599,28)-(599,29)
                                ,: ',' (599,29)-(599,30)
                                cast_expression (599,31)-(599,40)
                                  (: '(' (599,31)-(599,32)
                                  type_descriptor (599,32)-(599,38)
                                    primitive_type: 'void' (599,32)-(599,36)
                                    abstract_pointer_declarator (599,37)-(599,38)
                                      *: '*' (599,37)-(599,38)
                                  ): ')' (599,38)-(599,39)
                                  identifier: 'x' (599,39)-(599,40)
                                ): ')' (599,40)-(599,41)
                            ,: ',' (599,41)-(599,42)
                            call_expression (599,43)-(599,53)
                              identifier: 'incnode' (599,43)-(599,50)
                              argument_list (599,50)-(599,53)
                                (: '(' (599,50)-(599,51)
                                identifier: 'n' (599,51)-(599,52)
                                ): ')' (599,52)-(599,53)
                          ;: ';' (599,53)-(599,54)
                        }: '}' (600,3)-(600,4)
                    }: '}' (601,6)-(601,7)
              switch_statement (602,6)-(621,7)
                switch: 'switch' (602,6)-(602,12)
                parenthesized_expression (602,13)-(602,19)
                  (: '(' (602,13)-(602,14)
                  identifier: 'rawc' (602,14)-(602,18)
                  ): ')' (602,18)-(602,19)
                compound_statement (602,20)-(621,7)
                  {: '{' (602,20)-(602,21)
                  case_statement (603,6)-(603,17)
                    case: 'case' (603,6)-(603,10)
                    identifier: 'Dnull' (603,11)-(603,16)
                    :: ':' (603,16)-(603,17)
                  comment: '/* " */' (603,19)-(603,26)
                  case_statement (604,6)-(604,17)
                    case: 'case' (604,6)-(604,10)
                    identifier: 'Snull' (604,11)-(604,16)
                    :: ':' (604,16)-(604,17)
                  comment: '/* ' */' (604,19)-(604,26)
                  case_statement (605,6)-(608,9)
                    case: 'case' (605,6)-(605,10)
                    identifier: 'Tick' (605,11)-(605,15)
                    :: ':' (605,15)-(605,16)
                    comment: '/* ` (note: no Qtick!) */' (605,19)-(605,44)
                    comment: '/* These always occur in unnested pairs. */' (606,3)-(606,46)
                    expression_statement (607,3)-(607,14)
                      assignment_expression (607,3)-(607,13)
                        identifier: 'inq' (607,3)-(607,6)
                        =: '=' (607,7)-(607,8)
                        unary_expression (607,9)-(607,13)
                          !: '!' (607,9)-(607,10)
                          identifier: 'inq' (607,10)-(607,13)
                      ;: ';' (607,13)-(607,14)
                    break_statement (608,3)-(608,9)
                      break: 'break' (608,3)-(608,8)
                      ;: ';' (608,8)-(608,9)
                  case_statement (609,6)-(611,9)
                    case: 'case' (609,6)-(609,10)
                    identifier: 'Inpar' (609,11)-(609,16)
                    :: ':' (609,16)-(609,17)
                    comment: '/* ( */' (609,19)-(609,26)
                    expression_statement (610,3)-(610,9)
                      update_expression (610,3)-(610,8)
                        identifier: 'inp' (610,3)-(610,6)
                        ++: '++' (610,6)-(610,8)
                      ;: ';' (610,8)-(610,9)
                    break_statement (611,3)-(611,9)
                      break: 'break' (611,3)-(611,8)
                      ;: ';' (611,8)-(611,9)
                  case_statement (612,6)-(614,9)
                    case: 'case' (612,6)-(612,10)
                    identifier: 'Outpar' (612,11)-(612,17)
                    :: ':' (612,17)-(612,18)
                    comment: '/* ) */' (612,19)-(612,26)
                    expression_statement (613,3)-(613,9)
                      update_expression (613,3)-(613,8)
                        identifier: 'inp' (613,3)-(613,6)
                        --: '--' (613,6)-(613,8)
                      ;: ';' (613,8)-(613,9)
                    break_statement (614,3)-(614,9)
                      break: 'break' (614,3)-(614,8)
                      ;: ';' (614,8)-(614,9)
                  case_statement (615,6)-(615,17)
                    case: 'case' (615,6)-(615,10)
                    identifier: 'Bnull' (615,11)-(615,16)
                    :: ':' (615,16)-(615,17)
                  comment: '/* \ */' (615,19)-(615,26)
                  case_statement (616,6)-(620,9)
                    case: 'case' (616,6)-(616,10)
                    identifier: 'Bnullkeep' (616,11)-(616,20)
                    :: ':' (616,20)-(616,21)
                    comment: '/* The parser verified the following char's existence. */' (617,3)-(617,60)
                    expression_statement (618,3)-(618,10)
                      assignment_expression (618,3)-(618,9)
                        identifier: 'x' (618,3)-(618,4)
                        +=: '+=' (618,5)-(618,7)
                        identifier: 'l' (618,8)-(618,9)
                      ;: ';' (618,9)-(618,10)
                    expression_statement (619,3)-(619,25)
                      assignment_expression (619,3)-(619,24)
                        identifier: 'l' (619,3)-(619,4)
                        =: '=' (619,5)-(619,6)
                        call_expression (619,7)-(619,24)
                          identifier: 'MB_METACHARLEN' (619,7)-(619,21)
                          argument_list (619,21)-(619,24)
                            (: '(' (619,21)-(619,22)
                            identifier: 'x' (619,22)-(619,23)
                            ): ')' (619,23)-(619,24)
                      ;: ';' (619,24)-(619,25)
                    break_statement (620,3)-(620,9)
                      break: 'break' (620,3)-(620,8)
                      ;: ';' (620,8)-(620,9)
                  }: '}' (621,6)-(621,7)
              }: '}' (622,2)-(622,3)
          }: '}' (623,5)-(623,6)
      expression_statement (625,5)-(625,39)
        call_expression (625,5)-(625,38)
          identifier: 'prefork' (625,5)-(625,12)
          argument_list (625,12)-(625,38)
            (: '(' (625,12)-(625,13)
            pointer_expression (625,13)-(625,17)
              &: '&' (625,13)-(625,14)
              identifier: 'foo' (625,14)-(625,17)
            ,: ',' (625,17)-(625,18)
            identifier: 'pf_flags' (625,19)-(625,27)
            ,: ',' (625,27)-(625,28)
            identifier: 'ms_flags' (625,29)-(625,37)
            ): ')' (625,37)-(625,38)
        ;: ';' (625,38)-(625,39)
      if_statement (626,5)-(630,6)
        if: 'if' (626,5)-(626,7)
        parenthesized_expression (626,8)-(626,17)
          (: '(' (626,8)-(626,9)
          identifier: 'errflag' (626,9)-(626,16)
          ): ')' (626,16)-(626,17)
        compound_statement (626,18)-(630,6)
          {: '{' (626,18)-(626,19)
          if_statement (627,2)-(628,17)
            if: 'if' (627,2)-(627,4)
            parenthesized_expression (627,5)-(627,12)
              (: '(' (627,5)-(627,6)
              identifier: 'isarr' (627,6)-(627,11)
              ): ')' (627,11)-(627,12)
            expression_statement (628,6)-(628,17)
              assignment_expression (628,6)-(628,16)
                pointer_expression (628,6)-(628,12)
                  *: '*' (628,6)-(628,7)
                  identifier: 'isarr' (628,7)-(628,12)
                =: '=' (628,13)-(628,14)
                number_literal: '0' (628,15)-(628,16)
              ;: ';' (628,16)-(628,17)
          return_statement (629,2)-(629,11)
            return: 'return' (629,2)-(629,8)
            number_literal: '0' (629,9)-(629,10)
            ;: ';' (629,10)-(629,11)
          }: '}' (630,5)-(630,6)
      if_statement (632,5)-(650,6)
        if: 'if' (632,5)-(632,7)
        parenthesized_expression (632,8)-(632,76)
          (: '(' (632,8)-(632,9)
          binary_expression (632,9)-(632,75)
            binary_expression (632,9)-(632,39)
              parenthesized_expression (632,9)-(632,35)
                (: '(' (632,9)-(632,10)
                assignment_expression (632,10)-(632,34)
                  identifier: 'l' (632,10)-(632,11)
                  =: '=' (632,12)-(632,13)
                  call_expression (632,14)-(632,34)
                    identifier: 'countlinknodes' (632,14)-(632,28)
                    argument_list (632,28)-(632,34)
                      (: '(' (632,28)-(632,29)
                      pointer_expression (632,29)-(632,33)
                        &: '&' (632,29)-(632,30)
                        identifier: 'foo' (632,30)-(632,33)
                      ): ')' (632,33)-(632,34)
                ): ')' (632,34)-(632,35)
              >: '>' (632,36)-(632,37)
              number_literal: '1' (632,38)-(632,39)
            ||: '||' (632,40)-(632,42)
            parenthesized_expression (632,43)-(632,75)
              (: '(' (632,43)-(632,44)
              binary_expression (632,44)-(632,74)
                binary_expression (632,44)-(632,69)
                  field_expression (632,44)-(632,58)
                    field_expression (632,44)-(632,52)
                      identifier: 'foo' (632,44)-(632,47)
                      .: '.' (632,47)-(632,48)
                      field_identifier: 'list' (632,48)-(632,52)
                    .: '.' (632,52)-(632,53)
                    field_identifier: 'flags' (632,53)-(632,58)
                  &: '&' (632,59)-(632,60)
                  identifier: 'LF_ARRAY' (632,61)-(632,69)
                &&: '&&' (632,70)-(632,72)
                identifier: 'a' (632,73)-(632,74)
              ): ')' (632,74)-(632,75)
          ): ')' (632,75)-(632,76)
        compound_statement (632,77)-(650,6)
          {: '{' (632,77)-(632,78)
          expression_statement (633,2)-(633,43)
            assignment_expression (633,2)-(633,42)
              identifier: 'p' (633,2)-(633,3)
              =: '=' (633,4)-(633,5)
              assignment_expression (633,6)-(633,42)
                identifier: 'r' (633,6)-(633,7)
                =: '=' (633,8)-(633,9)
                call_expression (633,10)-(633,42)
                  identifier: 'hcalloc' (633,10)-(633,17)
                  argument_list (633,17)-(633,42)
                    (: '(' (633,17)-(633,18)
                    binary_expression (633,18)-(633,41)
                      parenthesized_expression (633,18)-(633,25)
                        (: '(' (633,18)-(633,19)
                        binary_expression (633,19)-(633,24)
                          identifier: 'l' (633,19)-(633,20)
                          +: '+' (633,21)-(633,22)
                          number_literal: '1' (633,23)-(633,24)
                        ): ')' (633,24)-(633,25)
                      *: '*' (633,26)-(633,27)
                      sizeof_expression (633,28)-(633,41)
                        sizeof: 'sizeof' (633,28)-(633,34)
                        (: '(' (633,34)-(633,35)
                        type_descriptor (633,35)-(633,40)
                          primitive_type: 'char' (633,35)-(633,39)
                          abstract_pointer_declarator (633,39)-(633,40)
                            *: '*' (633,39)-(633,40)
                        ): ')' (633,40)-(633,41)
                    ): ')' (633,41)-(633,42)
            ;: ';' (633,42)-(633,43)
          while_statement (634,2)-(635,36)
            while: 'while' (634,2)-(634,7)
            parenthesized_expression (634,8)-(634,24)
              (: '(' (634,8)-(634,9)
              call_expression (634,9)-(634,23)
                identifier: 'nonempty' (634,9)-(634,17)
                argument_list (634,17)-(634,23)
                  (: '(' (634,17)-(634,18)
                  pointer_expression (634,18)-(634,22)
                    &: '&' (634,18)-(634,19)
                    identifier: 'foo' (634,19)-(634,22)
                  ): ')' (634,22)-(634,23)
              ): ')' (634,23)-(634,24)
            expression_statement (635,6)-(635,36)
              assignment_expression (635,6)-(635,35)
                pointer_expression (635,6)-(635,10)
                  *: '*' (635,6)-(635,7)
                  update_expression (635,7)-(635,10)
                    identifier: 'p' (635,7)-(635,8)
                    ++: '++' (635,8)-(635,10)
                =: '=' (635,11)-(635,12)
                cast_expression (635,13)-(635,35)
                  (: '(' (635,13)-(635,14)
                  type_descriptor (635,14)-(635,20)
                    primitive_type: 'char' (635,14)-(635,18)
                    abstract_pointer_declarator (635,19)-(635,20)
                      *: '*' (635,19)-(635,20)
                  ): ')' (635,20)-(635,21)
                  call_expression (635,21)-(635,35)
                    identifier: 'ugetnode' (635,21)-(635,29)
                    argument_list (635,29)-(635,35)
                      (: '(' (635,29)-(635,30)
                      pointer_expression (635,30)-(635,34)
                        &: '&' (635,30)-(635,31)
                        identifier: 'foo' (635,31)-(635,34)
                      ): ')' (635,34)-(635,35)
              ;: ';' (635,35)-(635,36)
          expression_statement (636,2)-(636,12)
            assignment_expression (636,2)-(636,11)
              pointer_expression (636,2)-(636,4)
                *: '*' (636,2)-(636,3)
                identifier: 'p' (636,3)-(636,4)
              =: '=' (636,5)-(636,6)
              null (636,7)-(636,11)
                NULL: 'NULL' (636,7)-(636,11)
            ;: ';' (636,11)-(636,12)
          comment: '/* We need a way to figure out if a one-item result was a scalar
	 * or a single-item array.  The parser will have set LF_ARRAY
	 * in the latter case, allowing us to return it as an array to
	 * our caller (if they provided for that result). */' (637,2)-(640,54)
          if_statement (641,2)-(645,3)
            if: 'if' (641,2)-(641,4)
            parenthesized_expression (641,5)-(641,48)
              (: '(' (641,5)-(641,6)
              binary_expression (641,6)-(641,47)
                identifier: 'a' (641,6)-(641,7)
                &&: '&&' (641,8)-(641,10)
                parenthesized_expression (641,11)-(641,47)
                  (: '(' (641,11)-(641,12)
                  binary_expression (641,12)-(641,46)
                    binary_expression (641,12)-(641,17)
                      identifier: 'l' (641,12)-(641,13)
                      >: '>' (641,14)-(641,15)
                      number_literal: '1' (641,16)-(641,17)
                    ||: '||' (641,18)-(641,20)
                    binary_expression (641,21)-(641,46)
                      field_expression (641,21)-(641,35)
                        field_expression (641,21)-(641,29)
                          identifier: 'foo' (641,21)-(641,24)
                          .: '.' (641,24)-(641,25)
                          field_identifier: 'list' (641,25)-(641,29)
                        .: '.' (641,29)-(641,30)
                        field_identifier: 'flags' (641,30)-(641,35)
                      &: '&' (641,36)-(641,37)
                      identifier: 'LF_ARRAY' (641,38)-(641,46)
                  ): ')' (641,46)-(641,47)
              ): ')' (641,47)-(641,48)
            compound_statement (641,49)-(645,3)
              {: '{' (641,49)-(641,50)
              expression_statement (642,6)-(642,13)
                assignment_expression (642,6)-(642,12)
                  pointer_expression (642,6)-(642,8)
                    *: '*' (642,6)-(642,7)
                    identifier: 'a' (642,7)-(642,8)
                  =: '=' (642,9)-(642,10)
                  identifier: 'r' (642,11)-(642,12)
                ;: ';' (642,12)-(642,13)
              expression_statement (643,6)-(643,32)
                assignment_expression (643,6)-(643,31)
                  pointer_expression (643,6)-(643,12)
                    *: '*' (643,6)-(643,7)
                    identifier: 'isarr' (643,7)-(643,12)
                  =: '=' (643,13)-(643,14)
                  identifier: 'SCANPM_MATCHMANY' (643,15)-(643,31)
                ;: ';' (643,31)-(643,32)
              return_statement (644,6)-(644,15)
                return: 'return' (644,6)-(644,12)
                number_literal: '0' (644,13)-(644,14)
                ;: ';' (644,14)-(644,15)
              }: '}' (645,2)-(645,3)
          expression_statement (646,2)-(646,26)
            assignment_expression (646,2)-(646,25)
              pointer_expression (646,2)-(646,4)
                *: '*' (646,2)-(646,3)
                identifier: 's' (646,3)-(646,4)
              =: '=' (646,5)-(646,6)
              call_expression (646,7)-(646,25)
                identifier: 'sepjoin' (646,7)-(646,14)
                argument_list (646,14)-(646,25)
                  (: '(' (646,14)-(646,15)
                  identifier: 'r' (646,15)-(646,16)
                  ,: ',' (646,16)-(646,17)
                  identifier: 'sep' (646,18)-(646,21)
                  ,: ',' (646,21)-(646,22)
                  number_literal: '1' (646,23)-(646,24)
                  ): ')' (646,24)-(646,25)
            ;: ';' (646,25)-(646,26)
          if_statement (647,2)-(648,17)
            if: 'if' (647,2)-(647,4)
            parenthesized_expression (647,5)-(647,12)
              (: '(' (647,5)-(647,6)
              identifier: 'isarr' (647,6)-(647,11)
              ): ')' (647,11)-(647,12)
            expression_statement (648,6)-(648,17)
              assignment_expression (648,6)-(648,16)
                pointer_expression (648,6)-(648,12)
                  *: '*' (648,6)-(648,7)
                  identifier: 'isarr' (648,7)-(648,12)
                =: '=' (648,13)-(648,14)
                number_literal: '0' (648,15)-(648,16)
              ;: ';' (648,16)-(648,17)
          return_statement (649,2)-(649,11)
            return: 'return' (649,2)-(649,8)
            number_literal: '0' (649,9)-(649,10)
            ;: ';' (649,10)-(649,11)
          }: '}' (650,5)-(650,6)
      if_statement (651,5)-(654,21)
        if: 'if' (651,5)-(651,7)
        parenthesized_expression (651,8)-(651,11)
          (: '(' (651,8)-(651,9)
          identifier: 'l' (651,9)-(651,10)
          ): ')' (651,10)-(651,11)
        expression_statement (652,2)-(652,31)
          assignment_expression (652,2)-(652,30)
            pointer_expression (652,2)-(652,4)
              *: '*' (652,2)-(652,3)
              identifier: 's' (652,3)-(652,4)
            =: '=' (652,5)-(652,6)
            cast_expression (652,7)-(652,30)
              (: '(' (652,7)-(652,8)
              type_descriptor (652,8)-(652,14)
                primitive_type: 'char' (652,8)-(652,12)
                abstract_pointer_declarator (652,13)-(652,14)
                  *: '*' (652,13)-(652,14)
              ): ')' (652,14)-(652,15)
              call_expression (652,16)-(652,30)
                identifier: 'ugetnode' (652,16)-(652,24)
                argument_list (652,24)-(652,30)
                  (: '(' (652,24)-(652,25)
                  pointer_expression (652,25)-(652,29)
                    &: '&' (652,25)-(652,26)
                    identifier: 'foo' (652,26)-(652,29)
                  ): ')' (652,29)-(652,30)
          ;: ';' (652,30)-(652,31)
        else_clause (653,5)-(654,21)
          else: 'else' (653,5)-(653,9)
          expression_statement (654,2)-(654,21)
            assignment_expression (654,2)-(654,20)
              pointer_expression (654,2)-(654,4)
                *: '*' (654,2)-(654,3)
                identifier: 's' (654,3)-(654,4)
              =: '=' (654,5)-(654,6)
              call_expression (654,7)-(654,20)
                identifier: 'dupstring' (654,7)-(654,16)
                argument_list (654,16)-(654,20)
                  (: '(' (654,16)-(654,17)
                  string_literal (654,17)-(654,19)
                    ": '"' (654,17)-(654,18)
                    ": '"' (654,18)-(654,19)
                  ): ')' (654,19)-(654,20)
            ;: ';' (654,20)-(654,21)
      if_statement (655,5)-(656,13)
        if: 'if' (655,5)-(655,7)
        parenthesized_expression (655,8)-(655,15)
          (: '(' (655,8)-(655,9)
          identifier: 'isarr' (655,9)-(655,14)
          ): ')' (655,14)-(655,15)
        expression_statement (656,2)-(656,13)
          assignment_expression (656,2)-(656,12)
            pointer_expression (656,2)-(656,8)
              *: '*' (656,2)-(656,3)
              identifier: 'isarr' (656,3)-(656,8)
            =: '=' (656,9)-(656,10)
            number_literal: '0' (656,11)-(656,12)
          ;: ';' (656,12)-(656,13)
      return_statement (657,5)-(657,15)
        return: 'return' (657,5)-(657,11)
        unary_expression (657,12)-(657,14)
          !: '!' (657,12)-(657,13)
          identifier: 'l' (657,13)-(657,14)
        ;: ';' (657,14)-(657,15)
      }: '}' (658,1)-(658,2)
  comment: '/*
 * ~, = subs: assign & PREFORK_TYPESET => typeset or magic equals
 *            assign & PREFORK_ASSIGN => normal assignment
 */' (660,1)-(663,4)
  comment: '/**/' (665,1)-(665,5)
  function_definition (666,1)-(700,2)
    type_identifier: 'mod_export' (666,1)-(666,11)
    ERROR (666,12)-(666,16)
      identifier: 'void' (666,12)-(666,16)
    function_declarator (667,1)-(667,35)
      identifier: 'filesub' (667,1)-(667,8)
      parameter_list (667,8)-(667,35)
        (: '(' (667,8)-(667,9)
        parameter_declaration (667,9)-(667,22)
          primitive_type: 'char' (667,9)-(667,13)
          pointer_declarator (667,14)-(667,22)
            *: '*' (667,14)-(667,15)
            pointer_declarator (667,15)-(667,22)
              *: '*' (667,15)-(667,16)
              identifier: 'namptr' (667,16)-(667,22)
        ,: ',' (667,22)-(667,23)
        parameter_declaration (667,24)-(667,34)
          primitive_type: 'int' (667,24)-(667,27)
          identifier: 'assign' (667,28)-(667,34)
        ): ')' (667,34)-(667,35)
    compound_statement (668,1)-(700,2)
      {: '{' (668,1)-(668,2)
      declaration (669,5)-(669,47)
        primitive_type: 'char' (669,5)-(669,9)
        init_declarator (669,10)-(669,21)
          pointer_declarator (669,10)-(669,14)
            *: '*' (669,10)-(669,11)
            identifier: 'eql' (669,11)-(669,14)
          =: '=' (669,15)-(669,16)
          null (669,17)-(669,21)
            NULL: 'NULL' (669,17)-(669,21)
        ,: ',' (669,21)-(669,22)
        init_declarator (669,23)-(669,34)
          pointer_declarator (669,23)-(669,27)
            *: '*' (669,23)-(669,24)
            identifier: 'sub' (669,24)-(669,27)
          =: '=' (669,28)-(669,29)
          null (669,30)-(669,34)
            NULL: 'NULL' (669,30)-(669,34)
        ,: ',' (669,34)-(669,35)
        pointer_declarator (669,36)-(669,40)
          *: '*' (669,36)-(669,37)
          identifier: 'str' (669,37)-(669,40)
        ,: ',' (669,40)-(669,41)
        pointer_declarator (669,42)-(669,46)
          *: '*' (669,42)-(669,43)
          identifier: 'ptr' (669,43)-(669,46)
        ;: ';' (669,46)-(669,47)
      declaration (670,5)-(670,13)
        primitive_type: 'int' (670,5)-(670,8)
        identifier: 'len' (670,9)-(670,12)
        ;: ';' (670,12)-(670,13)
      expression_statement (672,5)-(672,32)
        call_expression (672,5)-(672,31)
          identifier: 'filesubstr' (672,5)-(672,15)
          argument_list (672,15)-(672,31)
            (: '(' (672,15)-(672,16)
            identifier: 'namptr' (672,16)-(672,22)
            ,: ',' (672,22)-(672,23)
            identifier: 'assign' (672,24)-(672,30)
            ): ')' (672,30)-(672,31)
        ;: ';' (672,31)-(672,32)
      if_statement (674,5)-(675,9)
        if: 'if' (674,5)-(674,7)
        parenthesized_expression (674,8)-(674,17)
          (: '(' (674,8)-(674,9)
          unary_expression (674,9)-(674,16)
            !: '!' (674,9)-(674,10)
            identifier: 'assign' (674,10)-(674,16)
          ): ')' (674,16)-(674,17)
        return_statement (675,2)-(675,9)
          return: 'return' (675,2)-(675,8)
          ;: ';' (675,8)-(675,9)
      if_statement (677,5)-(686,6)
        if: 'if' (677,5)-(677,7)
        parenthesized_expression (677,8)-(677,34)
          (: '(' (677,8)-(677,9)
          binary_expression (677,9)-(677,33)
            identifier: 'assign' (677,9)-(677,15)
            &: '&' (677,16)-(677,17)
            identifier: 'PREFORK_TYPESET' (677,18)-(677,33)
          ): ')' (677,33)-(677,34)
        compound_statement (677,35)-(686,6)
          {: '{' (677,35)-(677,36)
          if_statement (678,2)-(685,13)
            if: 'if' (678,2)-(678,4)
            parenthesized_expression (678,5)-(678,64)
              (: '(' (678,5)-(678,6)
              binary_expression (678,6)-(678,63)
                subscript_expression (678,6)-(678,18)
                  parenthesized_expression (678,6)-(678,15)
                    (: '(' (678,6)-(678,7)
                    pointer_expression (678,7)-(678,14)
                      *: '*' (678,7)-(678,8)
                      identifier: 'namptr' (678,8)-(678,14)
                    ): ')' (678,14)-(678,15)
                  [: '[' (678,15)-(678,16)
                  number_literal: '1' (678,16)-(678,17)
                  ]: ']' (678,17)-(678,18)
                &&: '&&' (678,19)-(678,21)
                parenthesized_expression (678,22)-(678,63)
                  (: '(' (678,22)-(678,23)
                  assignment_expression (678,23)-(678,62)
                    identifier: 'eql' (678,23)-(678,26)
                    =: '=' (678,27)-(678,28)
                    assignment_expression (678,29)-(678,62)
                      identifier: 'sub' (678,29)-(678,32)
                      =: '=' (678,33)-(678,34)
                      call_expression (678,35)-(678,62)
                        identifier: 'strchr' (678,35)-(678,41)
                        argument_list (678,41)-(678,62)
                          (: '(' (678,41)-(678,42)
                          binary_expression (678,42)-(678,53)
                            pointer_expression (678,42)-(678,49)
                              *: '*' (678,42)-(678,43)
                              identifier: 'namptr' (678,43)-(678,49)
                            +: '+' (678,50)-(678,51)
                            number_literal: '1' (678,52)-(678,53)
                          ,: ',' (678,53)-(678,54)
                          identifier: 'Equals' (678,55)-(678,61)
                          ): ')' (678,61)-(678,62)
                  ): ')' (678,62)-(678,63)
              ): ')' (678,63)-(678,64)
            compound_statement (678,65)-(684,3)
              {: '{' (678,65)-(678,66)
              expression_statement (679,6)-(679,20)
                assignment_expression (679,6)-(679,19)
                  identifier: 'str' (679,6)-(679,9)
                  =: '=' (679,10)-(679,11)
                  binary_expression (679,12)-(679,19)
                    identifier: 'sub' (679,12)-(679,15)
                    +: '+' (679,16)-(679,17)
                    number_literal: '1' (679,18)-(679,19)
                ;: ';' (679,19)-(679,20)
              if_statement (680,6)-(683,7)
                if: 'if' (680,6)-(680,8)
                parenthesized_expression (680,9)-(680,76)
                  (: '(' (680,9)-(680,10)
                  binary_expression (680,10)-(680,75)
                    parenthesized_expression (680,10)-(680,47)
                      (: '(' (680,10)-(680,11)
                      binary_expression (680,11)-(680,46)
                        binary_expression (680,11)-(680,26)
                          subscript_expression (680,11)-(680,17)
                            identifier: 'sub' (680,11)-(680,14)
                            [: '[' (680,14)-(680,15)
                            number_literal: '1' (680,15)-(680,16)
                            ]: ']' (680,16)-(680,17)
                          ==: '==' (680,18)-(680,20)
                          identifier: 'Tilde' (680,21)-(680,26)
                        ||: '||' (680,27)-(680,29)
                        binary_expression (680,30)-(680,46)
                          subscript_expression (680,30)-(680,36)
                            identifier: 'sub' (680,30)-(680,33)
                            [: '[' (680,33)-(680,34)
                            number_literal: '1' (680,34)-(680,35)
                            ]: ']' (680,35)-(680,36)
                          ==: '==' (680,37)-(680,39)
                          identifier: 'Equals' (680,40)-(680,46)
                      ): ')' (680,46)-(680,47)
                    &&: '&&' (680,48)-(680,50)
                    call_expression (680,51)-(680,75)
                      identifier: 'filesubstr' (680,51)-(680,61)
                      argument_list (680,61)-(680,75)
                        (: '(' (680,61)-(680,62)
                        pointer_expression (680,62)-(680,66)
                          &: '&' (680,62)-(680,63)
                          identifier: 'str' (680,63)-(680,66)
                        ,: ',' (680,66)-(680,67)
                        identifier: 'assign' (680,68)-(680,74)
                        ): ')' (680,74)-(680,75)
                  ): ')' (680,75)-(680,76)
                compound_statement (680,77)-(683,7)
                  {: '{' (680,77)-(680,78)
                  expression_statement (681,3)-(681,17)
                    assignment_expression (681,3)-(681,16)
                      subscript_expression (681,3)-(681,9)
                        identifier: 'sub' (681,3)-(681,6)
                        [: '[' (681,6)-(681,7)
                        number_literal: '1' (681,7)-(681,8)
                        ]: ']' (681,8)-(681,9)
                      =: '=' (681,10)-(681,11)
                      char_literal (681,12)-(681,16)
                        ': ''' (681,12)-(681,13)
                        escape_sequence: '\0' (681,13)-(681,15)
                        ': ''' (681,15)-(681,16)
                    ;: ';' (681,16)-(681,17)
                  expression_statement (682,3)-(682,34)
                    assignment_expression (682,3)-(682,33)
                      pointer_expression (682,3)-(682,10)
                        *: '*' (682,3)-(682,4)
                        identifier: 'namptr' (682,4)-(682,10)
                      =: '=' (682,11)-(682,12)
                      call_expression (682,13)-(682,33)
                        identifier: 'dyncat' (682,13)-(682,19)
                        argument_list (682,19)-(682,33)
                          (: '(' (682,19)-(682,20)
                          pointer_expression (682,20)-(682,27)
                            *: '*' (682,20)-(682,21)
                            identifier: 'namptr' (682,21)-(682,27)
                          ,: ',' (682,27)-(682,28)
                          identifier: 'str' (682,29)-(682,32)
                          ): ')' (682,32)-(682,33)
                    ;: ';' (682,33)-(682,34)
                  }: '}' (683,6)-(683,7)
              }: '}' (684,2)-(684,3)
            else_clause (684,4)-(685,13)
              else: 'else' (684,4)-(684,8)
              return_statement (685,6)-(685,13)
                return: 'return' (685,6)-(685,12)
                ;: ';' (685,12)-(685,13)
          }: '}' (686,5)-(686,6)
      expression_statement (688,5)-(688,19)
        assignment_expression (688,5)-(688,18)
          identifier: 'ptr' (688,5)-(688,8)
          =: '=' (688,9)-(688,10)
          pointer_expression (688,11)-(688,18)
            *: '*' (688,11)-(688,12)
            identifier: 'namptr' (688,12)-(688,18)
        ;: ';' (688,18)-(688,19)
      while_statement (689,5)-(699,6)
        while: 'while' (689,5)-(689,10)
        parenthesized_expression (689,11)-(689,37)
          (: '(' (689,11)-(689,12)
          parenthesized_expression (689,12)-(689,36)
            (: '(' (689,12)-(689,13)
            assignment_expression (689,13)-(689,35)
              identifier: 'sub' (689,13)-(689,16)
              =: '=' (689,17)-(689,18)
              call_expression (689,19)-(689,35)
                identifier: 'strchr' (689,19)-(689,25)
                argument_list (689,25)-(689,35)
                  (: '(' (689,25)-(689,26)
                  identifier: 'ptr' (689,26)-(689,29)
                  ,: ',' (689,29)-(689,30)
                  char_literal (689,31)-(689,34)
                    ': ''' (689,31)-(689,32)
                    character: ':' (689,32)-(689,33)
                    ': ''' (689,33)-(689,34)
                  ): ')' (689,34)-(689,35)
            ): ')' (689,35)-(689,36)
          ): ')' (689,36)-(689,37)
        compound_statement (689,38)-(699,6)
          {: '{' (689,38)-(689,39)
          expression_statement (690,2)-(690,16)
            assignment_expression (690,2)-(690,15)
              identifier: 'str' (690,2)-(690,5)
              =: '=' (690,6)-(690,7)
              binary_expression (690,8)-(690,15)
                identifier: 'sub' (690,8)-(690,11)
                +: '+' (690,12)-(690,13)
                number_literal: '1' (690,14)-(690,15)
            ;: ';' (690,15)-(690,16)
          expression_statement (691,2)-(691,22)
            assignment_expression (691,2)-(691,21)
              identifier: 'len' (691,2)-(691,5)
              =: '=' (691,6)-(691,7)
              binary_expression (691,8)-(691,21)
                identifier: 'sub' (691,8)-(691,11)
                -: '-' (691,12)-(691,13)
                pointer_expression (691,14)-(691,21)
                  *: '*' (691,14)-(691,15)
                  identifier: 'namptr' (691,15)-(691,21)
            ;: ';' (691,21)-(691,22)
          if_statement (692,2)-(697,3)
            if: 'if' (692,2)-(692,4)
            parenthesized_expression (692,5)-(694,31)
              (: '(' (692,5)-(692,6)
              binary_expression (692,6)-(694,30)
                binary_expression (692,6)-(693,43)
                  binary_expression (692,6)-(692,15)
                    identifier: 'sub' (692,6)-(692,9)
                    >: '>' (692,10)-(692,11)
                    identifier: 'eql' (692,12)-(692,15)
                  &&: '&&' (692,16)-(692,18)
                  parenthesized_expression (693,6)-(693,43)
                    (: '(' (693,6)-(693,7)
                    binary_expression (693,7)-(693,42)
                      binary_expression (693,7)-(693,22)
                        subscript_expression (693,7)-(693,13)
                          identifier: 'sub' (693,7)-(693,10)
                          [: '[' (693,10)-(693,11)
                          number_literal: '1' (693,11)-(693,12)
                          ]: ']' (693,12)-(693,13)
                        ==: '==' (693,14)-(693,16)
                        identifier: 'Tilde' (693,17)-(693,22)
                      ||: '||' (693,23)-(693,25)
                      binary_expression (693,26)-(693,42)
                        subscript_expression (693,26)-(693,32)
                          identifier: 'sub' (693,26)-(693,29)
                          [: '[' (693,29)-(693,30)
                          number_literal: '1' (693,30)-(693,31)
                          ]: ']' (693,31)-(693,32)
                        ==: '==' (693,33)-(693,35)
                        identifier: 'Equals' (693,36)-(693,42)
                    ): ')' (693,42)-(693,43)
                &&: '&&' (693,44)-(693,46)
                call_expression (694,6)-(694,30)
                  identifier: 'filesubstr' (694,6)-(694,16)
                  argument_list (694,16)-(694,30)
                    (: '(' (694,16)-(694,17)
                    pointer_expression (694,17)-(694,21)
                      &: '&' (694,17)-(694,18)
                      identifier: 'str' (694,18)-(694,21)
                    ,: ',' (694,21)-(694,22)
                    identifier: 'assign' (694,23)-(694,29)
                    ): ')' (694,29)-(694,30)
              ): ')' (694,30)-(694,31)
            compound_statement (694,32)-(697,3)
              {: '{' (694,32)-(694,33)
              expression_statement (695,6)-(695,20)
                assignment_expression (695,6)-(695,19)
                  subscript_expression (695,6)-(695,12)
                    identifier: 'sub' (695,6)-(695,9)
                    [: '[' (695,9)-(695,10)
                    number_literal: '1' (695,10)-(695,11)
                    ]: ']' (695,11)-(695,12)
                  =: '=' (695,13)-(695,14)
                  char_literal (695,15)-(695,19)
                    ': ''' (695,15)-(695,16)
                    escape_sequence: '\0' (695,16)-(695,18)
                    ': ''' (695,18)-(695,19)
                ;: ';' (695,19)-(695,20)
              expression_statement (696,6)-(696,37)
                assignment_expression (696,6)-(696,36)
                  pointer_expression (696,6)-(696,13)
                    *: '*' (696,6)-(696,7)
                    identifier: 'namptr' (696,7)-(696,13)
                  =: '=' (696,14)-(696,15)
                  call_expression (696,16)-(696,36)
                    identifier: 'dyncat' (696,16)-(696,22)
                    argument_list (696,22)-(696,36)
                      (: '(' (696,22)-(696,23)
                      pointer_expression (696,23)-(696,30)
                        *: '*' (696,23)-(696,24)
                        identifier: 'namptr' (696,24)-(696,30)
                      ,: ',' (696,30)-(696,31)
                      identifier: 'str' (696,32)-(696,35)
                      ): ')' (696,35)-(696,36)
                ;: ';' (696,36)-(696,37)
              }: '}' (697,2)-(697,3)
          expression_statement (698,2)-(698,26)
            assignment_expression (698,2)-(698,25)
              identifier: 'ptr' (698,2)-(698,5)
              =: '=' (698,6)-(698,7)
              binary_expression (698,8)-(698,25)
                binary_expression (698,8)-(698,21)
                  pointer_expression (698,8)-(698,15)
                    *: '*' (698,8)-(698,9)
                    identifier: 'namptr' (698,9)-(698,15)
                  +: '+' (698,16)-(698,17)
                  identifier: 'len' (698,18)-(698,21)
                +: '+' (698,22)-(698,23)
                number_literal: '1' (698,24)-(698,25)
            ;: ';' (698,25)-(698,26)
          }: '}' (699,5)-(699,6)
      }: '}' (700,1)-(700,2)
  preproc_function_def (702,1)-(703,1)
    #define: '#define' (702,1)-(702,8)
    identifier: 'isend' (702,9)-(702,14)
    preproc_params (702,14)-(702,17)
      (: '(' (702,14)-(702,15)
      identifier: 'c' (702,15)-(702,16)
      ): ')' (702,16)-(702,17)
    preproc_arg: '( !(c) || (c)=='/' || (c)==Inpar || (assign && (c)==':') )' (702,18)-(702,76)
  preproc_function_def (703,1)-(704,1)
    #define: '#define' (703,1)-(703,8)
    identifier: 'isend2' (703,9)-(703,15)
    preproc_params (703,15)-(703,18)
      (: '(' (703,15)-(703,16)
      identifier: 'c' (703,16)-(703,17)
      ): ')' (703,17)-(703,18)
    preproc_arg: '( !(c) || (c)==Inpar || (assign && (c)==':') )' (703,19)-(703,65)
  comment: '/*
 * do =foo substitution, or equivalent.
 * on entry, str should point to the "foo".
 * if assign, this is in an assignment
 * if nomatch, report hard error on failure.
 * if successful, returns the expansion, else NULL.
 */' (705,1)-(711,4)
  comment: '/**/' (713,1)-(713,5)
  function_definition (714,1)-(733,2)
    primitive_type: 'char' (714,1)-(714,5)
    pointer_declarator (714,6)-(715,48)
      *: '*' (714,6)-(714,7)
      function_declarator (715,1)-(715,48)
        identifier: 'equalsubstr' (715,1)-(715,12)
        parameter_list (715,12)-(715,48)
          (: '(' (715,12)-(715,13)
          parameter_declaration (715,13)-(715,22)
            primitive_type: 'char' (715,13)-(715,17)
            pointer_declarator (715,18)-(715,22)
              *: '*' (715,18)-(715,19)
              identifier: 'str' (715,19)-(715,22)
          ,: ',' (715,22)-(715,23)
          parameter_declaration (715,24)-(715,34)
            primitive_type: 'int' (715,24)-(715,27)
            identifier: 'assign' (715,28)-(715,34)
          ,: ',' (715,34)-(715,35)
          parameter_declaration (715,36)-(715,47)
            primitive_type: 'int' (715,36)-(715,39)
            identifier: 'nomatch' (715,40)-(715,47)
          ): ')' (715,47)-(715,48)
    compound_statement (716,1)-(733,2)
      {: '{' (716,1)-(716,2)
      declaration (717,5)-(717,30)
        primitive_type: 'char' (717,5)-(717,9)
        pointer_declarator (717,10)-(717,13)
          *: '*' (717,10)-(717,11)
          identifier: 'pp' (717,11)-(717,13)
        ,: ',' (717,13)-(717,14)
        pointer_declarator (717,15)-(717,20)
          *: '*' (717,15)-(717,16)
          identifier: 'cnam' (717,16)-(717,20)
        ,: ',' (717,20)-(717,21)
        pointer_declarator (717,22)-(717,29)
          *: '*' (717,22)-(717,23)
          identifier: 'cmdstr' (717,23)-(717,29)
        ;: ';' (717,29)-(717,30)
      for_statement (719,5)-(720,3)
        for: 'for' (719,5)-(719,8)
        (: '(' (719,9)-(719,10)
        assignment_expression (719,10)-(719,18)
          identifier: 'pp' (719,10)-(719,12)
          =: '=' (719,13)-(719,14)
          identifier: 'str' (719,15)-(719,18)
        ;: ';' (719,18)-(719,19)
        unary_expression (719,20)-(719,32)
          !: '!' (719,20)-(719,21)
          call_expression (719,21)-(719,32)
            identifier: 'isend2' (719,21)-(719,27)
            argument_list (719,27)-(719,32)
              (: '(' (719,27)-(719,28)
              pointer_expression (719,28)-(719,31)
                *: '*' (719,28)-(719,29)
                identifier: 'pp' (719,29)-(719,31)
              ): ')' (719,31)-(719,32)
        ;: ';' (719,32)-(719,33)
        update_expression (719,34)-(719,38)
          identifier: 'pp' (719,34)-(719,36)
          ++: '++' (719,36)-(719,38)
        ): ')' (719,38)-(719,39)
        expression_statement (720,2)-(720,3)
          ;: ';' (720,2)-(720,3)
      expression_statement (721,5)-(721,37)
        assignment_expression (721,5)-(721,36)
          identifier: 'cmdstr' (721,5)-(721,11)
          =: '=' (721,12)-(721,13)
          call_expression (721,14)-(721,36)
            identifier: 'dupstrpfx' (721,14)-(721,23)
            argument_list (721,23)-(721,36)
              (: '(' (721,23)-(721,24)
              identifier: 'str' (721,24)-(721,27)
              ,: ',' (721,27)-(721,28)
              binary_expression (721,29)-(721,35)
                identifier: 'pp' (721,29)-(721,31)
                -: '-' (721,31)-(721,32)
                identifier: 'str' (721,32)-(721,35)
              ): ')' (721,35)-(721,36)
        ;: ';' (721,36)-(721,37)
      expression_statement (722,5)-(722,24)
        call_expression (722,5)-(722,23)
          identifier: 'untokenize' (722,5)-(722,15)
          argument_list (722,15)-(722,23)
            (: '(' (722,15)-(722,16)
            identifier: 'cmdstr' (722,16)-(722,22)
            ): ')' (722,22)-(722,23)
        ;: ';' (722,23)-(722,24)
      expression_statement (723,5)-(723,24)
        call_expression (723,5)-(723,23)
          identifier: 'remnulargs' (723,5)-(723,15)
          argument_list (723,15)-(723,23)
            (: '(' (723,15)-(723,16)
            identifier: 'cmdstr' (723,16)-(723,22)
            ): ')' (723,22)-(723,23)
        ;: ';' (723,23)-(723,24)
      if_statement (724,5)-(728,6)
        if: 'if' (724,5)-(724,7)
        parenthesized_expression (724,8)-(724,41)
          (: '(' (724,8)-(724,9)
          unary_expression (724,9)-(724,40)
            !: '!' (724,9)-(724,10)
            parenthesized_expression (724,10)-(724,40)
              (: '(' (724,10)-(724,11)
              assignment_expression (724,11)-(724,39)
                identifier: 'cnam' (724,11)-(724,15)
                =: '=' (724,16)-(724,17)
                call_expression (724,18)-(724,39)
                  identifier: 'findcmd' (724,18)-(724,25)
                  argument_list (724,25)-(724,39)
                    (: '(' (724,25)-(724,26)
                    identifier: 'cmdstr' (724,26)-(724,32)
                    ,: ',' (724,32)-(724,33)
                    number_literal: '1' (724,34)-(724,35)
                    ,: ',' (724,35)-(724,36)
                    number_literal: '0' (724,37)-(724,38)
                    ): ')' (724,38)-(724,39)
              ): ')' (724,39)-(724,40)
          ): ')' (724,40)-(724,41)
        compound_statement (724,42)-(728,6)
          {: '{' (724,42)-(724,43)
          if_statement (725,2)-(726,35)
            if: 'if' (725,2)-(725,4)
            parenthesized_expression (725,5)-(725,14)
              (: '(' (725,5)-(725,6)
              identifier: 'nomatch' (725,6)-(725,13)
              ): ')' (725,13)-(725,14)
            expression_statement (726,6)-(726,35)
              call_expression (726,6)-(726,34)
                identifier: 'zerr' (726,6)-(726,10)
                argument_list (726,10)-(726,34)
                  (: '(' (726,10)-(726,11)
                  string_literal (726,11)-(726,25)
                    ": '"' (726,11)-(726,12)
                    string_content: '%s not found' (726,12)-(726,24)
                    ": '"' (726,24)-(726,25)
                  ,: ',' (726,25)-(726,26)
                  identifier: 'cmdstr' (726,27)-(726,33)
                  ): ')' (726,33)-(726,34)
              ;: ';' (726,34)-(726,35)
          return_statement (727,2)-(727,14)
            return: 'return' (727,2)-(727,8)
            null (727,9)-(727,13)
              NULL: 'NULL' (727,9)-(727,13)
            ;: ';' (727,13)-(727,14)
          }: '}' (728,5)-(728,6)
      if_statement (729,5)-(732,14)
        if: 'if' (729,5)-(729,7)
        parenthesized_expression (729,8)-(729,13)
          (: '(' (729,8)-(729,9)
          pointer_expression (729,9)-(729,12)
            *: '*' (729,9)-(729,10)
            identifier: 'pp' (729,10)-(729,12)
          ): ')' (729,12)-(729,13)
        return_statement (730,2)-(730,26)
          return: 'return' (730,2)-(730,8)
          call_expression (730,9)-(730,25)
            identifier: 'dyncat' (730,9)-(730,15)
            argument_list (730,15)-(730,25)
              (: '(' (730,15)-(730,16)
              identifier: 'cnam' (730,16)-(730,20)
              ,: ',' (730,20)-(730,21)
              identifier: 'pp' (730,22)-(730,24)
              ): ')' (730,24)-(730,25)
          ;: ';' (730,25)-(730,26)
        else_clause (731,5)-(732,14)
          else: 'else' (731,5)-(731,9)
          return_statement (732,2)-(732,14)
            return: 'return' (732,2)-(732,8)
            identifier: 'cnam' (732,9)-(732,13)
            ;: ';' (732,13)-(732,14)
      comment: '/* already duplicated */' (732,16)-(732,40)
      }: '}' (733,1)-(733,2)
  comment: '/**/' (735,1)-(735,5)
  function_definition (736,1)-(807,2)
    type_identifier: 'mod_export' (736,1)-(736,11)
    ERROR (736,12)-(736,15)
      identifier: 'int' (736,12)-(736,15)
    function_declarator (737,1)-(737,38)
      identifier: 'filesubstr' (737,1)-(737,11)
      parameter_list (737,11)-(737,38)
        (: '(' (737,11)-(737,12)
        parameter_declaration (737,12)-(737,25)
          primitive_type: 'char' (737,12)-(737,16)
          pointer_declarator (737,17)-(737,25)
            *: '*' (737,17)-(737,18)
            pointer_declarator (737,18)-(737,25)
              *: '*' (737,18)-(737,19)
              identifier: 'namptr' (737,19)-(737,25)
        ,: ',' (737,25)-(737,26)
        parameter_declaration (737,27)-(737,37)
          primitive_type: 'int' (737,27)-(737,30)
          identifier: 'assign' (737,31)-(737,37)
        ): ')' (737,37)-(737,38)
    compound_statement (738,1)-(807,2)
      {: '{' (738,1)-(738,2)
      declaration (739,5)-(739,25)
        primitive_type: 'char' (739,5)-(739,9)
        init_declarator (739,10)-(739,24)
          pointer_declarator (739,10)-(739,14)
            *: '*' (739,10)-(739,11)
            identifier: 'str' (739,11)-(739,14)
          =: '=' (739,15)-(739,16)
          pointer_expression (739,17)-(739,24)
            *: '*' (739,17)-(739,18)
            identifier: 'namptr' (739,18)-(739,24)
        ;: ';' (739,24)-(739,25)
      if_statement (741,5)-(805,6)
        if: 'if' (741,5)-(741,7)
        parenthesized_expression (741,8)-(741,60)
          (: '(' (741,8)-(741,9)
          binary_expression (741,9)-(741,59)
            binary_expression (741,9)-(741,39)
              binary_expression (741,9)-(741,22)
                pointer_expression (741,9)-(741,13)
                  *: '*' (741,9)-(741,10)
                  identifier: 'str' (741,10)-(741,13)
                ==: '==' (741,14)-(741,16)
                identifier: 'Tilde' (741,17)-(741,22)
              &&: '&&' (741,23)-(741,25)
              binary_expression (741,26)-(741,39)
                subscript_expression (741,26)-(741,32)
                  identifier: 'str' (741,26)-(741,29)
                  [: '[' (741,29)-(741,30)
                  number_literal: '1' (741,30)-(741,31)
                  ]: ']' (741,31)-(741,32)
                !=: '!=' (741,33)-(741,35)
                char_literal (741,36)-(741,39)
                  ': ''' (741,36)-(741,37)
                  character: '=' (741,37)-(741,38)
                  ': ''' (741,38)-(741,39)
            &&: '&&' (741,40)-(741,42)
            binary_expression (741,43)-(741,59)
              subscript_expression (741,43)-(741,49)
                identifier: 'str' (741,43)-(741,46)
                [: '[' (741,46)-(741,47)
                number_literal: '1' (741,47)-(741,48)
                ]: ']' (741,48)-(741,49)
              !=: '!=' (741,50)-(741,52)
              identifier: 'Equals' (741,53)-(741,59)
          ): ')' (741,59)-(741,60)
        compound_statement (741,61)-(799,6)
          {: '{' (741,61)-(741,62)
          declaration (742,2)-(742,31)
            primitive_type: 'char' (742,2)-(742,6)
            pointer_declarator (742,7)-(742,11)
              *: '*' (742,7)-(742,8)
              identifier: 'ptr' (742,8)-(742,11)
            ,: ',' (742,11)-(742,12)
            pointer_declarator (742,13)-(742,17)
              *: '*' (742,13)-(742,14)
              identifier: 'tmp' (742,14)-(742,17)
            ,: ',' (742,17)-(742,18)
            pointer_declarator (742,19)-(742,23)
              *: '*' (742,19)-(742,20)
              identifier: 'res' (742,20)-(742,23)
            ,: ',' (742,23)-(742,24)
            pointer_declarator (742,25)-(742,30)
              *: '*' (742,25)-(742,26)
              identifier: 'ptr2' (742,26)-(742,30)
            ;: ';' (742,30)-(742,31)
          declaration (743,2)-(743,10)
            primitive_type: 'int' (743,2)-(743,5)
            identifier: 'val' (743,6)-(743,9)
            ;: ';' (743,9)-(743,10)
          if_statement (745,2)-(746,19)
            if: 'if' (745,2)-(745,4)
            parenthesized_expression (745,5)-(745,21)
              (: '(' (745,5)-(745,6)
              binary_expression (745,6)-(745,20)
                subscript_expression (745,6)-(745,12)
                  identifier: 'str' (745,6)-(745,9)
                  [: '[' (745,9)-(745,10)
                  number_literal: '1' (745,10)-(745,11)
                  ]: ']' (745,11)-(745,12)
                ==: '==' (745,13)-(745,15)
                identifier: 'Dash' (745,16)-(745,20)
              ): ')' (745,20)-(745,21)
            expression_statement (746,6)-(746,19)
              assignment_expression (746,6)-(746,18)
                subscript_expression (746,6)-(746,12)
                  identifier: 'str' (746,6)-(746,9)
                  [: '[' (746,9)-(746,10)
                  number_literal: '1' (746,10)-(746,11)
                  ]: ']' (746,11)-(746,12)
                =: '=' (746,13)-(746,14)
                char_literal (746,15)-(746,18)
                  ': ''' (746,15)-(746,16)
                  character: '-' (746,16)-(746,17)
                  ': ''' (746,17)-(746,18)
              ;: ';' (746,18)-(746,19)
          expression_statement (747,2)-(747,35)
            assignment_expression (747,2)-(747,34)
              identifier: 'val' (747,2)-(747,5)
              =: '=' (747,6)-(747,7)
              call_expression (747,8)-(747,34)
                identifier: 'zstrtol' (747,8)-(747,15)
                argument_list (747,15)-(747,34)
                  (: '(' (747,15)-(747,16)
                  binary_expression (747,16)-(747,23)
                    identifier: 'str' (747,16)-(747,19)
                    +: '+' (747,20)-(747,21)
                    number_literal: '1' (747,22)-(747,23)
                  ,: ',' (747,23)-(747,24)
                  pointer_expression (747,25)-(747,29)
                    &: '&' (747,25)-(747,26)
                    identifier: 'ptr' (747,26)-(747,29)
                  ,: ',' (747,29)-(747,30)
                  number_literal: '10' (747,31)-(747,33)
                  ): ')' (747,33)-(747,34)
            ;: ';' (747,34)-(747,35)
          if_statement (748,2)-(798,3)
            if: 'if' (748,2)-(748,4)
            parenthesized_expression (748,5)-(748,20)
              (: '(' (748,5)-(748,6)
              call_expression (748,6)-(748,19)
                identifier: 'isend' (748,6)-(748,11)
                argument_list (748,11)-(748,19)
                  (: '(' (748,11)-(748,12)
                  subscript_expression (748,12)-(748,18)
                    identifier: 'str' (748,12)-(748,15)
                    [: '[' (748,15)-(748,16)
                    number_literal: '1' (748,16)-(748,17)
                    ]: ']' (748,17)-(748,18)
                  ): ')' (748,18)-(748,19)
              ): ')' (748,19)-(748,20)
            compound_statement (748,21)-(751,3)
              {: '{' (748,21)-(748,22)
              comment: '/* ~ */' (748,25)-(748,32)
              expression_statement (749,6)-(749,50)
                assignment_expression (749,6)-(749,49)
                  pointer_expression (749,6)-(749,13)
                    *: '*' (749,6)-(749,7)
                    identifier: 'namptr' (749,7)-(749,13)
                  =: '=' (749,14)-(749,15)
                  call_expression (749,16)-(749,49)
                    identifier: 'dyncat' (749,16)-(749,22)
                    argument_list (749,22)-(749,49)
                      (: '(' (749,22)-(749,23)
                      conditional_expression (749,23)-(749,39)
                        identifier: 'home' (749,23)-(749,27)
                        ?: '?' (749,28)-(749,29)
                        identifier: 'home' (749,30)-(749,34)
                        :: ':' (749,35)-(749,36)
                        string_literal (749,37)-(749,39)
                          ": '"' (749,37)-(749,38)
                          ": '"' (749,38)-(749,39)
                      ,: ',' (749,39)-(749,40)
                      binary_expression (749,41)-(749,48)
                        identifier: 'str' (749,41)-(749,44)
                        +: '+' (749,45)-(749,46)
                        number_literal: '1' (749,47)-(749,48)
                      ): ')' (749,48)-(749,49)
                ;: ';' (749,49)-(749,50)
              return_statement (750,6)-(750,15)
                return: 'return' (750,6)-(750,12)
                number_literal: '1' (750,13)-(750,14)
                ;: ';' (750,14)-(750,15)
              }: '}' (751,2)-(751,3)
            else_clause (751,4)-(798,3)
              else: 'else' (751,4)-(751,8)
              if_statement (751,9)-(798,3)
                if: 'if' (751,9)-(751,11)
                parenthesized_expression (751,12)-(751,44)
                  (: '(' (751,12)-(751,13)
                  binary_expression (751,13)-(751,43)
                    binary_expression (751,13)-(751,26)
                      subscript_expression (751,13)-(751,19)
                        identifier: 'str' (751,13)-(751,16)
                        [: '[' (751,16)-(751,17)
                        number_literal: '1' (751,17)-(751,18)
                        ]: ']' (751,18)-(751,19)
                      ==: '==' (751,20)-(751,22)
                      char_literal (751,23)-(751,26)
                        ': ''' (751,23)-(751,24)
                        character: '+' (751,24)-(751,25)
                        ': ''' (751,25)-(751,26)
                    &&: '&&' (751,27)-(751,29)
                    call_expression (751,30)-(751,43)
                      identifier: 'isend' (751,30)-(751,35)
                      argument_list (751,35)-(751,43)
                        (: '(' (751,35)-(751,36)
                        subscript_expression (751,36)-(751,42)
                          identifier: 'str' (751,36)-(751,39)
                          [: '[' (751,39)-(751,40)
                          number_literal: '2' (751,40)-(751,41)
                          ]: ']' (751,41)-(751,42)
                        ): ')' (751,42)-(751,43)
                  ): ')' (751,43)-(751,44)
                compound_statement (751,45)-(754,3)
                  {: '{' (751,45)-(751,46)
                  comment: '/* ~+ */' (751,49)-(751,57)
                  expression_statement (752,6)-(752,37)
                    assignment_expression (752,6)-(752,36)
                      pointer_expression (752,6)-(752,13)
                        *: '*' (752,6)-(752,7)
                        identifier: 'namptr' (752,7)-(752,13)
                      =: '=' (752,14)-(752,15)
                      call_expression (752,16)-(752,36)
                        identifier: 'dyncat' (752,16)-(752,22)
                        argument_list (752,22)-(752,36)
                          (: '(' (752,22)-(752,23)
                          identifier: 'pwd' (752,23)-(752,26)
                          ,: ',' (752,26)-(752,27)
                          binary_expression (752,28)-(752,35)
                            identifier: 'str' (752,28)-(752,31)
                            +: '+' (752,32)-(752,33)
                            number_literal: '2' (752,34)-(752,35)
                          ): ')' (752,35)-(752,36)
                    ;: ';' (752,36)-(752,37)
                  return_statement (753,6)-(753,15)
                    return: 'return' (753,6)-(753,12)
                    number_literal: '1' (753,13)-(753,14)
                    ;: ';' (753,14)-(753,15)
                  }: '}' (754,2)-(754,3)
                else_clause (754,4)-(798,3)
                  else: 'else' (754,4)-(754,8)
                  if_statement (754,9)-(798,3)
                    if: 'if' (754,9)-(754,11)
                    parenthesized_expression (754,12)-(754,44)
                      (: '(' (754,12)-(754,13)
                      binary_expression (754,13)-(754,43)
                        binary_expression (754,13)-(754,26)
                          subscript_expression (754,13)-(754,19)
                            identifier: 'str' (754,13)-(754,16)
                            [: '[' (754,16)-(754,17)
                            number_literal: '1' (754,17)-(754,18)
                            ]: ']' (754,18)-(754,19)
                          ==: '==' (754,20)-(754,22)
                          char_literal (754,23)-(754,26)
                            ': ''' (754,23)-(754,24)
                            character: '-' (754,24)-(754,25)
                            ': ''' (754,25)-(754,26)
                        &&: '&&' (754,27)-(754,29)
                        call_expression (754,30)-(754,43)
                          identifier: 'isend' (754,30)-(754,35)
                          argument_list (754,35)-(754,43)
                            (: '(' (754,35)-(754,36)
                            subscript_expression (754,36)-(754,42)
                              identifier: 'str' (754,36)-(754,39)
                              [: '[' (754,39)-(754,40)
                              number_literal: '2' (754,40)-(754,41)
                              ]: ']' (754,41)-(754,42)
                            ): ')' (754,42)-(754,43)
                      ): ')' (754,43)-(754,44)
                    compound_statement (754,45)-(757,3)
                      {: '{' (754,45)-(754,46)
                      comment: '/* ~- */' (754,49)-(754,57)
                      expression_statement (755,6)-(755,60)
                        assignment_expression (755,6)-(755,59)
                          pointer_expression (755,6)-(755,13)
                            *: '*' (755,6)-(755,7)
                            identifier: 'namptr' (755,7)-(755,13)
                          =: '=' (755,14)-(755,15)
                          call_expression (755,16)-(755,59)
                            identifier: 'dyncat' (755,16)-(755,22)
                            argument_list (755,22)-(755,59)
                              (: '(' (755,22)-(755,23)
                              conditional_expression (755,23)-(755,49)
                                parenthesized_expression (755,23)-(755,37)
                                  (: '(' (755,23)-(755,24)
                                  assignment_expression (755,24)-(755,36)
                                    identifier: 'tmp' (755,24)-(755,27)
                                    =: '=' (755,28)-(755,29)
                                    identifier: 'oldpwd' (755,30)-(755,36)
                                  ): ')' (755,36)-(755,37)
                                ?: '?' (755,38)-(755,39)
                                identifier: 'tmp' (755,40)-(755,43)
                                :: ':' (755,44)-(755,45)
                                identifier: 'pwd' (755,46)-(755,49)
                              ,: ',' (755,49)-(755,50)
                              binary_expression (755,51)-(755,58)
                                identifier: 'str' (755,51)-(755,54)
                                +: '+' (755,55)-(755,56)
                                number_literal: '2' (755,57)-(755,58)
                              ): ')' (755,58)-(755,59)
                        ;: ';' (755,59)-(755,60)
                      return_statement (756,6)-(756,15)
                        return: 'return' (756,6)-(756,12)
                        number_literal: '1' (756,13)-(756,14)
                        ;: ';' (756,14)-(756,15)
                      }: '}' (757,2)-(757,3)
                    else_clause (757,4)-(798,3)
                      else: 'else' (757,4)-(757,8)
                      if_statement (757,9)-(798,3)
                        if: 'if' (757,9)-(757,11)
                        parenthesized_expression (757,12)-(758,39)
                          (: '(' (757,12)-(757,13)
                          binary_expression (757,13)-(758,38)
                            binary_expression (757,13)-(757,30)
                              subscript_expression (757,13)-(757,19)
                                identifier: 'str' (757,13)-(757,16)
                                [: '[' (757,16)-(757,17)
                                number_literal: '1' (757,17)-(757,18)
                                ]: ']' (757,18)-(757,19)
                              ==: '==' (757,20)-(757,22)
                              identifier: 'Inbrack' (757,23)-(757,30)
                            &&: '&&' (757,31)-(757,33)
                            parenthesized_expression (758,6)-(758,38)
                              (: '(' (758,6)-(758,7)
                              assignment_expression (758,7)-(758,37)
                                identifier: 'ptr2' (758,7)-(758,11)
                                =: '=' (758,12)-(758,13)
                                call_expression (758,14)-(758,37)
                                  identifier: 'strchr' (758,14)-(758,20)
                                  argument_list (758,20)-(758,37)
                                    (: '(' (758,20)-(758,21)
                                    binary_expression (758,21)-(758,26)
                                      identifier: 'str' (758,21)-(758,24)
                                      +: '+' (758,24)-(758,25)
                                      number_literal: '2' (758,25)-(758,26)
                                    ,: ',' (758,26)-(758,27)
                                    identifier: 'Outbrack' (758,28)-(758,36)
                                    ): ')' (758,36)-(758,37)
                              ): ')' (758,37)-(758,38)
                          ): ')' (758,38)-(758,39)
                        compound_statement (758,40)-(771,3)
                          {: '{' (758,40)-(758,41)
                          declaration (759,6)-(759,17)
                            primitive_type: 'char' (759,6)-(759,10)
                            pointer_declarator (759,11)-(759,16)
                              *: '*' (759,11)-(759,12)
                              pointer_declarator (759,12)-(759,16)
                                *: '*' (759,12)-(759,13)
                                identifier: 'arr' (759,13)-(759,16)
                            ;: ';' (759,16)-(759,17)
                          expression_statement (760,6)-(760,57)
                            call_expression (760,6)-(760,56)
                              identifier: 'untokenize' (760,6)-(760,16)
                              argument_list (760,16)-(760,56)
                                (: '(' (760,16)-(760,17)
                                assignment_expression (760,17)-(760,55)
                                  identifier: 'tmp' (760,17)-(760,20)
                                  =: '=' (760,21)-(760,22)
                                  call_expression (760,23)-(760,55)
                                    identifier: 'dupstrpfx' (760,23)-(760,32)
                                    argument_list (760,32)-(760,55)
                                      (: '(' (760,32)-(760,33)
                                      binary_expression (760,33)-(760,38)
                                        identifier: 'str' (760,33)-(760,36)
                                        +: '+' (760,36)-(760,37)
                                        number_literal: '2' (760,37)-(760,38)
                                      ,: ',' (760,38)-(760,39)
                                      binary_expression (760,40)-(760,54)
                                        identifier: 'ptr2' (760,40)-(760,44)
                                        -: '-' (760,45)-(760,46)
                                        parenthesized_expression (760,47)-(760,54)
                                          (: '(' (760,47)-(760,48)
                                          binary_expression (760,48)-(760,53)
                                            identifier: 'str' (760,48)-(760,51)
                                            +: '+' (760,51)-(760,52)
                                            number_literal: '2' (760,52)-(760,53)
                                          ): ')' (760,53)-(760,54)
                                      ): ')' (760,54)-(760,55)
                                ): ')' (760,55)-(760,56)
                            ;: ';' (760,56)-(760,57)
                          expression_statement (761,6)-(761,22)
                            call_expression (761,6)-(761,21)
                              identifier: 'remnulargs' (761,6)-(761,16)
                              argument_list (761,16)-(761,21)
                                (: '(' (761,16)-(761,17)
                                identifier: 'tmp' (761,17)-(761,20)
                                ): ')' (761,20)-(761,21)
                            ;: ';' (761,21)-(761,22)
                          expression_statement (762,6)-(762,65)
                            assignment_expression (762,6)-(762,64)
                              identifier: 'arr' (762,6)-(762,9)
                              =: '=' (762,10)-(762,11)
                              call_expression (762,12)-(762,64)
                                identifier: 'subst_string_by_hook' (762,12)-(762,32)
                                argument_list (762,32)-(762,64)
                                  (: '(' (762,32)-(762,33)
                                  string_literal (762,33)-(762,53)
                                    ": '"' (762,33)-(762,34)
                                    string_content: 'zsh_directory_name' (762,34)-(762,52)
                                    ": '"' (762,52)-(762,53)
                                  ,: ',' (762,53)-(762,54)
                                  string_literal (762,55)-(762,58)
                                    ": '"' (762,55)-(762,56)
                                    string_content: 'n' (762,56)-(762,57)
                                    ": '"' (762,57)-(762,58)
                                  ,: ',' (762,58)-(762,59)
                                  identifier: 'tmp' (762,60)-(762,63)
                                  ): ')' (762,63)-(762,64)
                            ;: ';' (762,64)-(762,65)
                          expression_statement (763,6)-(763,30)
                            assignment_expression (763,6)-(763,29)
                              identifier: 'res' (763,6)-(763,9)
                              =: '=' (763,10)-(763,11)
                              conditional_expression (763,12)-(763,29)
                                identifier: 'arr' (763,12)-(763,15)
                                ?: '?' (763,16)-(763,17)
                                pointer_expression (763,18)-(763,22)
                                  *: '*' (763,18)-(763,19)
                                  identifier: 'arr' (763,19)-(763,22)
                                :: ':' (763,23)-(763,24)
                                null (763,25)-(763,29)
                                  NULL: 'NULL' (763,25)-(763,29)
                            ;: ';' (763,29)-(763,30)
                          if_statement (764,6)-(767,7)
                            if: 'if' (764,6)-(764,8)
                            parenthesized_expression (764,9)-(764,14)
                              (: '(' (764,9)-(764,10)
                              identifier: 'res' (764,10)-(764,13)
                              ): ')' (764,13)-(764,14)
                            compound_statement (764,15)-(767,7)
                              {: '{' (764,15)-(764,16)
                              expression_statement (765,3)-(765,33)
                                assignment_expression (765,3)-(765,32)
                                  pointer_expression (765,3)-(765,10)
                                    *: '*' (765,3)-(765,4)
                                    identifier: 'namptr' (765,4)-(765,10)
                                  =: '=' (765,11)-(765,12)
                                  call_expression (765,13)-(765,32)
                                    identifier: 'dyncat' (765,13)-(765,19)
                                    argument_list (765,19)-(765,32)
                                      (: '(' (765,19)-(765,20)
                                      identifier: 'res' (765,20)-(765,23)
                                      ,: ',' (765,23)-(765,24)
                                      binary_expression (765,25)-(765,31)
                                        identifier: 'ptr2' (765,25)-(765,29)
                                        +: '+' (765,29)-(765,30)
                                        number_literal: '1' (765,30)-(765,31)
                                      ): ')' (765,31)-(765,32)
                                ;: ';' (765,32)-(765,33)
                              return_statement (766,3)-(766,12)
                                return: 'return' (766,3)-(766,9)
                                number_literal: '1' (766,10)-(766,11)
                                ;: ';' (766,11)-(766,12)
                              }: '}' (767,6)-(767,7)
                          if_statement (768,6)-(769,46)
                            if: 'if' (768,6)-(768,8)
                            parenthesized_expression (768,9)-(768,43)
                              (: '(' (768,9)-(768,10)
                              binary_expression (768,10)-(768,42)
                                call_expression (768,10)-(768,24)
                                  identifier: 'isset' (768,10)-(768,15)
                                  argument_list (768,15)-(768,24)
                                    (: '(' (768,15)-(768,16)
                                    identifier: 'NOMATCH' (768,16)-(768,23)
                                    ): ')' (768,23)-(768,24)
                                &&: '&&' (768,25)-(768,27)
                                call_expression (768,28)-(768,42)
                                  identifier: 'isset' (768,28)-(768,33)
                                  argument_list (768,33)-(768,42)
                                    (: '(' (768,33)-(768,34)
                                    identifier: 'EXECOPT' (768,34)-(768,41)
                                    ): ')' (768,41)-(768,42)
                              ): ')' (768,42)-(768,43)
                            expression_statement (769,3)-(769,46)
                              call_expression (769,3)-(769,45)
                                identifier: 'zerr' (769,3)-(769,7)
                                argument_list (769,7)-(769,45)
                                  (: '(' (769,7)-(769,8)
                                  string_literal (769,8)-(769,39)
                                    ": '"' (769,8)-(769,9)
                                    string_content: 'no directory expansion: ~[%s]' (769,9)-(769,38)
                                    ": '"' (769,38)-(769,39)
                                  ,: ',' (769,39)-(769,40)
                                  identifier: 'tmp' (769,41)-(769,44)
                                  ): ')' (769,44)-(769,45)
                              ;: ';' (769,45)-(769,46)
                          return_statement (770,6)-(770,15)
                            return: 'return' (770,6)-(770,12)
                            number_literal: '0' (770,13)-(770,14)
                            ;: ';' (770,14)-(770,15)
                          }: '}' (771,2)-(771,3)
                        else_clause (771,4)-(798,3)
                          else: 'else' (771,4)-(771,8)
                          if_statement (771,9)-(798,3)
                            if: 'if' (771,9)-(771,11)
                            parenthesized_expression (771,12)-(772,43)
                              (: '(' (771,12)-(771,13)
                              binary_expression (771,13)-(772,42)
                                binary_expression (771,13)-(771,44)
                                  unary_expression (771,13)-(771,29)
                                    !: '!' (771,13)-(771,14)
                                    call_expression (771,14)-(771,29)
                                      identifier: 'inblank' (771,14)-(771,21)
                                      argument_list (771,21)-(771,29)
                                        (: '(' (771,21)-(771,22)
                                        subscript_expression (771,22)-(771,28)
                                          identifier: 'str' (771,22)-(771,25)
                                          [: '[' (771,25)-(771,26)
                                          number_literal: '1' (771,26)-(771,27)
                                          ]: ']' (771,27)-(771,28)
                                        ): ')' (771,28)-(771,29)
                                  &&: '&&' (771,30)-(771,32)
                                  call_expression (771,33)-(771,44)
                                    identifier: 'isend' (771,33)-(771,38)
                                    argument_list (771,38)-(771,44)
                                      (: '(' (771,38)-(771,39)
                                      pointer_expression (771,39)-(771,43)
                                        *: '*' (771,39)-(771,40)
                                        identifier: 'ptr' (771,40)-(771,43)
                                      ): ')' (771,43)-(771,44)
                                &&: '&&' (771,45)-(771,47)
                                parenthesized_expression (772,6)-(772,42)
                                  (: '(' (772,6)-(772,7)
                                  binary_expression (772,7)-(772,41)
                                    unary_expression (772,7)-(772,22)
                                      !: '!' (772,7)-(772,8)
                                      call_expression (772,8)-(772,22)
                                        identifier: 'idigit' (772,8)-(772,14)
                                        argument_list (772,14)-(772,22)
                                          (: '(' (772,14)-(772,15)
                                          subscript_expression (772,15)-(772,21)
                                            identifier: 'str' (772,15)-(772,18)
                                            [: '[' (772,18)-(772,19)
                                            number_literal: '1' (772,19)-(772,20)
                                            ]: ']' (772,20)-(772,21)
                                          ): ')' (772,21)-(772,22)
                                    ||: '||' (772,23)-(772,25)
                                    parenthesized_expression (772,26)-(772,41)
                                      (: '(' (772,26)-(772,27)
                                      binary_expression (772,27)-(772,40)
                                        binary_expression (772,27)-(772,36)
                                          identifier: 'ptr' (772,27)-(772,30)
                                          -: '-' (772,31)-(772,32)
                                          identifier: 'str' (772,33)-(772,36)
                                        <: '<' (772,37)-(772,38)
                                        number_literal: '4' (772,39)-(772,40)
                                      ): ')' (772,40)-(772,41)
                                  ): ')' (772,41)-(772,42)
                              ): ')' (772,42)-(772,43)
                            compound_statement (772,44)-(782,3)
                              {: '{' (772,44)-(772,45)
                              declaration (773,6)-(773,15)
                                primitive_type: 'char' (773,6)-(773,10)
                                pointer_declarator (773,11)-(773,14)
                                  *: '*' (773,11)-(773,12)
                                  identifier: 'ds' (773,12)-(773,14)
                                ;: ';' (773,14)-(773,15)
                              if_statement (775,6)-(776,14)
                                if: 'if' (775,6)-(775,8)
                                parenthesized_expression (775,9)-(775,18)
                                  (: '(' (775,9)-(775,10)
                                  binary_expression (775,10)-(775,17)
                                    identifier: 'val' (775,10)-(775,13)
                                    <: '<' (775,14)-(775,15)
                                    number_literal: '0' (775,16)-(775,17)
                                  ): ')' (775,17)-(775,18)
                                expression_statement (776,3)-(776,14)
                                  assignment_expression (776,3)-(776,13)
                                    identifier: 'val' (776,3)-(776,6)
                                    =: '=' (776,7)-(776,8)
                                    unary_expression (776,9)-(776,13)
                                      -: '-' (776,9)-(776,10)
                                      identifier: 'val' (776,10)-(776,13)
                                  ;: ';' (776,13)-(776,14)
                              expression_statement (777,6)-(777,34)
                                assignment_expression (777,6)-(777,33)
                                  identifier: 'ds' (777,6)-(777,8)
                                  =: '=' (777,9)-(777,10)
                                  call_expression (777,11)-(777,33)
                                    identifier: 'dstackent' (777,11)-(777,20)
                                    argument_list (777,20)-(777,33)
                                      (: '(' (777,20)-(777,21)
                                      subscript_expression (777,21)-(777,27)
                                        identifier: 'str' (777,21)-(777,24)
                                        [: '[' (777,24)-(777,25)
                                        number_literal: '1' (777,25)-(777,26)
                                        ]: ']' (777,26)-(777,27)
                                      ,: ',' (777,27)-(777,28)
                                      identifier: 'val' (777,29)-(777,32)
                                      ): ')' (777,32)-(777,33)
                                ;: ';' (777,33)-(777,34)
                              if_statement (778,6)-(779,12)
                                if: 'if' (778,6)-(778,8)
                                parenthesized_expression (778,9)-(778,14)
                                  (: '(' (778,9)-(778,10)
                                  unary_expression (778,10)-(778,13)
                                    !: '!' (778,10)-(778,11)
                                    identifier: 'ds' (778,11)-(778,13)
                                  ): ')' (778,13)-(778,14)
                                return_statement (779,3)-(779,12)
                                  return: 'return' (779,3)-(779,9)
                                  number_literal: '0' (779,10)-(779,11)
                                  ;: ';' (779,11)-(779,12)
                              expression_statement (780,6)-(780,32)
                                assignment_expression (780,6)-(780,31)
                                  pointer_expression (780,6)-(780,13)
                                    *: '*' (780,6)-(780,7)
                                    identifier: 'namptr' (780,7)-(780,13)
                                  =: '=' (780,14)-(780,15)
                                  call_expression (780,16)-(780,31)
                                    identifier: 'dyncat' (780,16)-(780,22)
                                    argument_list (780,22)-(780,31)
                                      (: '(' (780,22)-(780,23)
                                      identifier: 'ds' (780,23)-(780,25)
                                      ,: ',' (780,25)-(780,26)
                                      identifier: 'ptr' (780,27)-(780,30)
                                      ): ')' (780,30)-(780,31)
                                ;: ';' (780,31)-(780,32)
                              return_statement (781,6)-(781,15)
                                return: 'return' (781,6)-(781,12)
                                number_literal: '1' (781,13)-(781,14)
                                ;: ';' (781,14)-(781,15)
                              }: '}' (782,2)-(782,3)
                            else_clause (782,4)-(798,3)
                              else: 'else' (782,4)-(782,8)
                              if_statement (782,9)-(798,3)
                                if: 'if' (782,9)-(782,11)
                                parenthesized_expression (782,12)-(782,57)
                                  (: '(' (782,12)-(782,13)
                                  binary_expression (782,13)-(782,56)
                                    parenthesized_expression (782,13)-(782,47)
                                      (: '(' (782,13)-(782,14)
                                      assignment_expression (782,14)-(782,46)
                                        identifier: 'ptr' (782,14)-(782,17)
                                        =: '=' (782,18)-(782,19)
                                        call_expression (782,20)-(782,46)
                                          identifier: 'itype_end' (782,20)-(782,29)
                                          argument_list (782,29)-(782,46)
                                            (: '(' (782,29)-(782,30)
                                            binary_expression (782,30)-(782,35)
                                              identifier: 'str' (782,30)-(782,33)
                                              +: '+' (782,33)-(782,34)
                                              number_literal: '1' (782,34)-(782,35)
                                            ,: ',' (782,35)-(782,36)
                                            identifier: 'IUSER' (782,37)-(782,42)
                                            ,: ',' (782,42)-(782,43)
                                            number_literal: '0' (782,44)-(782,45)
                                            ): ')' (782,45)-(782,46)
                                      ): ')' (782,46)-(782,47)
                                    !=: '!=' (782,48)-(782,50)
                                    binary_expression (782,51)-(782,56)
                                      identifier: 'str' (782,51)-(782,54)
                                      +: '+' (782,54)-(782,55)
                                      number_literal: '1' (782,55)-(782,56)
                                  ): ')' (782,56)-(782,57)
                                compound_statement (782,58)-(798,3)
                                  {: '{' (782,58)-(782,59)
                                  comment: '/* ~foo */' (782,62)-(782,72)
                                  declaration (783,6)-(783,24)
                                    primitive_type: 'char' (783,6)-(783,10)
                                    pointer_declarator (783,11)-(783,17)
                                      *: '*' (783,11)-(783,12)
                                      identifier: 'untok' (783,12)-(783,17)
                                    ,: ',' (783,17)-(783,18)
                                    pointer_declarator (783,19)-(783,23)
                                      *: '*' (783,19)-(783,20)
                                      identifier: 'hom' (783,20)-(783,23)
                                    ;: ';' (783,23)-(783,24)
                                  if_statement (785,6)-(786,12)
                                    if: 'if' (785,6)-(785,8)
                                    parenthesized_expression (785,9)-(785,23)
                                      (: '(' (785,9)-(785,10)
                                      unary_expression (785,10)-(785,22)
                                        !: '!' (785,10)-(785,11)
                                        call_expression (785,11)-(785,22)
                                          identifier: 'isend' (785,11)-(785,16)
                                          argument_list (785,16)-(785,22)
                                            (: '(' (785,16)-(785,17)
                                            pointer_expression (785,17)-(785,21)
                                              *: '*' (785,17)-(785,18)
                                              identifier: 'ptr' (785,18)-(785,21)
                                            ): ')' (785,21)-(785,22)
                                      ): ')' (785,22)-(785,23)
                                    return_statement (786,3)-(786,12)
                                      return: 'return' (786,3)-(786,9)
                                      number_literal: '0' (786,10)-(786,11)
                                      ;: ';' (786,11)-(786,12)
                                  expression_statement (787,6)-(787,31)
                                    assignment_expression (787,6)-(787,30)
                                      identifier: 'untok' (787,6)-(787,11)
                                      =: '=' (787,12)-(787,13)
                                      call_expression (787,14)-(787,30)
                                        identifier: 'dupstring' (787,14)-(787,23)
                                        argument_list (787,23)-(787,30)
                                          (: '(' (787,23)-(787,24)
                                          update_expression (787,24)-(787,29)
                                            ++: '++' (787,24)-(787,26)
                                            identifier: 'str' (787,26)-(787,29)
                                          ): ')' (787,29)-(787,30)
                                    ;: ';' (787,30)-(787,31)
                                  expression_statement (788,6)-(788,25)
                                    assignment_expression (788,6)-(788,24)
                                      subscript_expression (788,6)-(788,20)
                                        identifier: 'untok' (788,6)-(788,11)
                                        [: '[' (788,11)-(788,12)
                                        binary_expression (788,12)-(788,19)
                                          identifier: 'ptr' (788,12)-(788,15)
                                          -: '-' (788,15)-(788,16)
                                          identifier: 'str' (788,16)-(788,19)
                                        ]: ']' (788,19)-(788,20)
                                      =: '=' (788,21)-(788,22)
                                      number_literal: '0' (788,23)-(788,24)
                                    ;: ';' (788,24)-(788,25)
                                  expression_statement (789,6)-(789,24)
                                    call_expression (789,6)-(789,23)
                                      identifier: 'untokenize' (789,6)-(789,16)
                                      argument_list (789,16)-(789,23)
                                        (: '(' (789,16)-(789,17)
                                        identifier: 'untok' (789,17)-(789,22)
                                        ): ')' (789,22)-(789,23)
                                    ;: ';' (789,23)-(789,24)
                                  if_statement (791,6)-(795,7)
                                    if: 'if' (791,6)-(791,8)
                                    parenthesized_expression (791,9)-(791,38)
                                      (: '(' (791,9)-(791,10)
                                      unary_expression (791,10)-(791,37)
                                        !: '!' (791,10)-(791,11)
                                        parenthesized_expression (791,11)-(791,37)
                                          (: '(' (791,11)-(791,12)
                                          assignment_expression (791,12)-(791,36)
                                            identifier: 'hom' (791,12)-(791,15)
                                            =: '=' (791,16)-(791,17)
                                            call_expression (791,18)-(791,36)
                                              identifier: 'getnameddir' (791,18)-(791,29)
                                              argument_list (791,29)-(791,36)
                                                (: '(' (791,29)-(791,30)
                                                identifier: 'untok' (791,30)-(791,35)
                                                ): ')' (791,35)-(791,36)
                                          ): ')' (791,36)-(791,37)
                                      ): ')' (791,37)-(791,38)
                                    compound_statement (791,39)-(795,7)
                                      {: '{' (791,39)-(791,40)
                                      if_statement (792,3)-(793,58)
                                        if: 'if' (792,3)-(792,5)
                                        parenthesized_expression (792,6)-(792,40)
                                          (: '(' (792,6)-(792,7)
                                          binary_expression (792,7)-(792,39)
                                            call_expression (792,7)-(792,21)
                                              identifier: 'isset' (792,7)-(792,12)
                                              argument_list (792,12)-(792,21)
                                                (: '(' (792,12)-(792,13)
                                                identifier: 'NOMATCH' (792,13)-(792,20)
                                                ): ')' (792,20)-(792,21)
                                            &&: '&&' (792,22)-(792,24)
                                            call_expression (792,25)-(792,39)
                                              identifier: 'isset' (792,25)-(792,30)
                                              argument_list (792,30)-(792,39)
                                                (: '(' (792,30)-(792,31)
                                                identifier: 'EXECOPT' (792,31)-(792,38)
                                                ): ')' (792,38)-(792,39)
                                          ): ')' (792,39)-(792,40)
                                        expression_statement (793,7)-(793,58)
                                          call_expression (793,7)-(793,57)
                                            identifier: 'zerr' (793,7)-(793,11)
                                            argument_list (793,11)-(793,57)
                                              (: '(' (793,11)-(793,12)
                                              string_literal (793,12)-(793,49)
                                                ": '"' (793,12)-(793,13)
                                                string_content: 'no such user or named directory: %s' (793,13)-(793,48)
                                                ": '"' (793,48)-(793,49)
                                              ,: ',' (793,49)-(793,50)
                                              identifier: 'untok' (793,51)-(793,56)
                                              ): ')' (793,56)-(793,57)
                                          ;: ';' (793,57)-(793,58)
                                      return_statement (794,3)-(794,12)
                                        return: 'return' (794,3)-(794,9)
                                        number_literal: '0' (794,10)-(794,11)
                                        ;: ';' (794,11)-(794,12)
                                      }: '}' (795,6)-(795,7)
                                  expression_statement (796,6)-(796,33)
                                    assignment_expression (796,6)-(796,32)
                                      pointer_expression (796,6)-(796,13)
                                        *: '*' (796,6)-(796,7)
                                        identifier: 'namptr' (796,7)-(796,13)
                                      =: '=' (796,14)-(796,15)
                                      call_expression (796,16)-(796,32)
                                        identifier: 'dyncat' (796,16)-(796,22)
                                        argument_list (796,22)-(796,32)
                                          (: '(' (796,22)-(796,23)
                                          identifier: 'hom' (796,23)-(796,26)
                                          ,: ',' (796,26)-(796,27)
                                          identifier: 'ptr' (796,28)-(796,31)
                                          ): ')' (796,31)-(796,32)
                                    ;: ';' (796,32)-(796,33)
                                  return_statement (797,6)-(797,15)
                                    return: 'return' (797,6)-(797,12)
                                    number_literal: '1' (797,13)-(797,14)
                                    ;: ';' (797,14)-(797,15)
                                  }: '}' (798,2)-(798,3)
          }: '}' (799,5)-(799,6)
        else_clause (799,7)-(805,6)
          else: 'else' (799,7)-(799,11)
          if_statement (799,12)-(805,6)
            if: 'if' (799,12)-(799,14)
            parenthesized_expression (799,15)-(799,77)
              (: '(' (799,15)-(799,16)
              binary_expression (799,16)-(799,76)
                binary_expression (799,16)-(799,57)
                  binary_expression (799,16)-(799,47)
                    binary_expression (799,16)-(799,30)
                      pointer_expression (799,16)-(799,20)
                        *: '*' (799,16)-(799,17)
                        identifier: 'str' (799,17)-(799,20)
                      ==: '==' (799,21)-(799,23)
                      identifier: 'Equals' (799,24)-(799,30)
                    &&: '&&' (799,31)-(799,33)
                    call_expression (799,34)-(799,47)
                      identifier: 'isset' (799,34)-(799,39)
                      argument_list (799,39)-(799,47)
                        (: '(' (799,39)-(799,40)
                        identifier: 'EQUALS' (799,40)-(799,46)
                        ): ')' (799,46)-(799,47)
                  &&: '&&' (799,48)-(799,50)
                  subscript_expression (799,51)-(799,57)
                    identifier: 'str' (799,51)-(799,54)
                    [: '[' (799,54)-(799,55)
                    number_literal: '1' (799,55)-(799,56)
                    ]: ']' (799,56)-(799,57)
                &&: '&&' (799,58)-(799,60)
                binary_expression (799,61)-(799,76)
                  subscript_expression (799,61)-(799,67)
                    identifier: 'str' (799,61)-(799,64)
                    [: '[' (799,64)-(799,65)
                    number_literal: '1' (799,65)-(799,66)
                    ]: ']' (799,66)-(799,67)
                  !=: '!=' (799,68)-(799,70)
                  identifier: 'Inpar' (799,71)-(799,76)
              ): ')' (799,76)-(799,77)
            compound_statement (799,78)-(805,6)
              {: '{' (799,78)-(799,79)
              comment: '/* =foo */' (799,82)-(799,92)
              declaration (800,2)-(800,58)
                primitive_type: 'char' (800,2)-(800,6)
                init_declarator (800,7)-(800,57)
                  pointer_declarator (800,7)-(800,12)
                    *: '*' (800,7)-(800,8)
                    identifier: 'expn' (800,8)-(800,12)
                  =: '=' (800,13)-(800,14)
                  call_expression (800,15)-(800,57)
                    identifier: 'equalsubstr' (800,15)-(800,26)
                    argument_list (800,26)-(800,57)
                      (: '(' (800,26)-(800,27)
                      binary_expression (800,27)-(800,32)
                        identifier: 'str' (800,27)-(800,30)
                        +: '+' (800,30)-(800,31)
                        number_literal: '1' (800,31)-(800,32)
                      ,: ',' (800,32)-(800,33)
                      identifier: 'assign' (800,34)-(800,40)
                      ,: ',' (800,40)-(800,41)
                      call_expression (800,42)-(800,56)
                        identifier: 'isset' (800,42)-(800,47)
                        argument_list (800,47)-(800,56)
                          (: '(' (800,47)-(800,48)
                          identifier: 'NOMATCH' (800,48)-(800,55)
                          ): ')' (800,55)-(800,56)
                      ): ')' (800,56)-(800,57)
                ;: ';' (800,57)-(800,58)
              if_statement (801,2)-(804,3)
                if: 'if' (801,2)-(801,4)
                parenthesized_expression (801,5)-(801,11)
                  (: '(' (801,5)-(801,6)
                  identifier: 'expn' (801,6)-(801,10)
                  ): ')' (801,10)-(801,11)
                compound_statement (801,12)-(804,3)
                  {: '{' (801,12)-(801,13)
                  expression_statement (802,6)-(802,21)
                    assignment_expression (802,6)-(802,20)
                      pointer_expression (802,6)-(802,13)
                        *: '*' (802,6)-(802,7)
                        identifier: 'namptr' (802,7)-(802,13)
                      =: '=' (802,14)-(802,15)
                      identifier: 'expn' (802,16)-(802,20)
                    ;: ';' (802,20)-(802,21)
                  return_statement (803,6)-(803,15)
                    return: 'return' (803,6)-(803,12)
                    number_literal: '1' (803,13)-(803,14)
                    ;: ';' (803,14)-(803,15)
                  }: '}' (804,2)-(804,3)
              }: '}' (805,5)-(805,6)
      return_statement (806,5)-(806,14)
        return: 'return' (806,5)-(806,11)
        number_literal: '0' (806,12)-(806,13)
        ;: ';' (806,13)-(806,14)
      }: '}' (807,1)-(807,2)
  preproc_call (809,1)-(810,1)
    preproc_directive: '#undef' (809,1)-(809,7)
    preproc_arg: 'isend' (809,8)-(809,13)
  preproc_call (810,1)-(811,1)
    preproc_directive: '#undef' (810,1)-(810,7)
    preproc_arg: 'isend2' (810,8)-(810,14)
  comment: '/**/' (812,1)-(812,5)
  function_definition (813,1)-(836,2)
    storage_class_specifier (813,1)-(813,7)
      static: 'static' (813,1)-(813,7)
    primitive_type: 'char' (813,8)-(813,12)
    pointer_declarator (813,13)-(815,15)
      *: '*' (813,13)-(813,14)
      function_declarator (814,1)-(815,15)
        identifier: 'strcatsub' (814,1)-(814,10)
        parameter_list (814,10)-(815,15)
          (: '(' (814,10)-(814,11)
          parameter_declaration (814,11)-(814,19)
            primitive_type: 'char' (814,11)-(814,15)
            pointer_declarator (814,16)-(814,19)
              *: '*' (814,16)-(814,17)
              pointer_declarator (814,17)-(814,19)
                *: '*' (814,17)-(814,18)
                identifier: 'd' (814,18)-(814,19)
          ,: ',' (814,19)-(814,20)
          parameter_declaration (814,21)-(814,29)
            primitive_type: 'char' (814,21)-(814,25)
            pointer_declarator (814,26)-(814,29)
              *: '*' (814,26)-(814,27)
              identifier: 'pb' (814,27)-(814,29)
          ,: ',' (814,29)-(814,30)
          parameter_declaration (814,31)-(814,39)
            primitive_type: 'char' (814,31)-(814,35)
            pointer_declarator (814,36)-(814,39)
              *: '*' (814,36)-(814,37)
              identifier: 'pe' (814,37)-(814,39)
          ,: ',' (814,39)-(814,40)
          parameter_declaration (814,41)-(814,50)
            primitive_type: 'char' (814,41)-(814,45)
            pointer_declarator (814,46)-(814,50)
              *: '*' (814,46)-(814,47)
              identifier: 'src' (814,47)-(814,50)
          ,: ',' (814,50)-(814,51)
          parameter_declaration (814,52)-(814,57)
            primitive_type: 'int' (814,52)-(814,55)
            identifier: 'l' (814,56)-(814,57)
          ,: ',' (814,57)-(814,58)
          parameter_declaration (814,59)-(814,66)
            primitive_type: 'char' (814,59)-(814,63)
            pointer_declarator (814,64)-(814,66)
              *: '*' (814,64)-(814,65)
              identifier: 's' (814,65)-(814,66)
          ,: ',' (814,66)-(814,67)
          parameter_declaration (814,68)-(814,78)
            primitive_type: 'int' (814,68)-(814,71)
            identifier: 'glbsub' (814,72)-(814,78)
          ,: ',' (814,78)-(814,79)
          parameter_declaration (815,4)-(815,14)
            primitive_type: 'int' (815,4)-(815,7)
            identifier: 'copied' (815,8)-(815,14)
          ): ')' (815,14)-(815,15)
    compound_statement (816,1)-(836,2)
      {: '{' (816,1)-(816,2)
      declaration (817,5)-(817,16)
        primitive_type: 'char' (817,5)-(817,9)
        pointer_declarator (817,10)-(817,15)
          *: '*' (817,10)-(817,11)
          identifier: 'dest' (817,11)-(817,15)
        ;: ';' (817,15)-(817,16)
      declaration (818,5)-(818,22)
        primitive_type: 'int' (818,5)-(818,8)
        init_declarator (818,9)-(818,21)
          identifier: 'pl' (818,9)-(818,11)
          =: '=' (818,12)-(818,13)
          binary_expression (818,14)-(818,21)
            identifier: 'pe' (818,14)-(818,16)
            -: '-' (818,17)-(818,18)
            identifier: 'pb' (818,19)-(818,21)
        ;: ';' (818,21)-(818,22)
      if_statement (820,5)-(834,6)
        if: 'if' (820,5)-(820,7)
        parenthesized_expression (820,8)-(820,28)
          (: '(' (820,8)-(820,9)
          binary_expression (820,9)-(820,27)
            unary_expression (820,9)-(820,12)
              !: '!' (820,9)-(820,10)
              identifier: 'pl' (820,10)-(820,12)
            &&: '&&' (820,13)-(820,15)
            parenthesized_expression (820,16)-(820,27)
              (: '(' (820,16)-(820,17)
              binary_expression (820,17)-(820,26)
                unary_expression (820,17)-(820,19)
                  !: '!' (820,17)-(820,18)
                  identifier: 's' (820,18)-(820,19)
                ||: '||' (820,20)-(820,22)
                unary_expression (820,23)-(820,26)
                  !: '!' (820,23)-(820,24)
                  pointer_expression (820,24)-(820,26)
                    *: '*' (820,24)-(820,25)
                    identifier: 's' (820,25)-(820,26)
              ): ')' (820,26)-(820,27)
          ): ')' (820,27)-(820,28)
        compound_statement (820,29)-(824,6)
          {: '{' (820,29)-(820,30)
          expression_statement (821,2)-(821,46)
            assignment_expression (821,2)-(821,45)
              pointer_expression (821,2)-(821,4)
                *: '*' (821,2)-(821,3)
                identifier: 'd' (821,3)-(821,4)
              =: '=' (821,5)-(821,6)
              assignment_expression (821,7)-(821,45)
                identifier: 'dest' (821,7)-(821,11)
                =: '=' (821,12)-(821,13)
                parenthesized_expression (821,14)-(821,45)
                  (: '(' (821,14)-(821,15)
                  conditional_expression (821,15)-(821,44)
                    identifier: 'copied' (821,15)-(821,21)
                    ?: '?' (821,22)-(821,23)
                    identifier: 'src' (821,24)-(821,27)
                    :: ':' (821,28)-(821,29)
                    call_expression (821,30)-(821,44)
                      identifier: 'dupstring' (821,30)-(821,39)
                      argument_list (821,39)-(821,44)
                        (: '(' (821,39)-(821,40)
                        identifier: 'src' (821,40)-(821,43)
                        ): ')' (821,43)-(821,44)
                  ): ')' (821,44)-(821,45)
            ;: ';' (821,45)-(821,46)
          if_statement (822,2)-(823,23)
            if: 'if' (822,2)-(822,4)
            parenthesized_expression (822,5)-(822,13)
              (: '(' (822,5)-(822,6)
              identifier: 'glbsub' (822,6)-(822,12)
              ): ')' (822,12)-(822,13)
            expression_statement (823,6)-(823,23)
              call_expression (823,6)-(823,22)
                identifier: 'shtokenize' (823,6)-(823,16)
                argument_list (823,16)-(823,22)
                  (: '(' (823,16)-(823,17)
                  identifier: 'dest' (823,17)-(823,21)
                  ): ')' (823,21)-(823,22)
              ;: ';' (823,22)-(823,23)
          }: '}' (824,5)-(824,6)
        else_clause (824,7)-(834,6)
          else: 'else' (824,7)-(824,11)
          compound_statement (824,12)-(834,6)
            {: '{' (824,12)-(824,13)
            expression_statement (825,2)-(825,56)
              assignment_expression (825,2)-(825,55)
                pointer_expression (825,2)-(825,4)
                  *: '*' (825,2)-(825,3)
                  identifier: 'd' (825,3)-(825,4)
                =: '=' (825,5)-(825,6)
                assignment_expression (825,7)-(825,55)
                  identifier: 'dest' (825,7)-(825,11)
                  =: '=' (825,12)-(825,13)
                  call_expression (825,14)-(825,55)
                    identifier: 'hcalloc' (825,14)-(825,21)
                    argument_list (825,21)-(825,55)
                      (: '(' (825,21)-(825,22)
                      binary_expression (825,22)-(825,54)
                        binary_expression (825,22)-(825,50)
                          binary_expression (825,22)-(825,28)
                            identifier: 'pl' (825,22)-(825,24)
                            +: '+' (825,25)-(825,26)
                            identifier: 'l' (825,27)-(825,28)
                          +: '+' (825,29)-(825,30)
                          parenthesized_expression (825,31)-(825,50)
                            (: '(' (825,31)-(825,32)
                            conditional_expression (825,32)-(825,49)
                              identifier: 's' (825,32)-(825,33)
                              ?: '?' (825,34)-(825,35)
                              call_expression (825,36)-(825,45)
                                identifier: 'strlen' (825,36)-(825,42)
                                argument_list (825,42)-(825,45)
                                  (: '(' (825,42)-(825,43)
                                  identifier: 's' (825,43)-(825,44)
                                  ): ')' (825,44)-(825,45)
                              :: ':' (825,46)-(825,47)
                              number_literal: '0' (825,48)-(825,49)
                            ): ')' (825,49)-(825,50)
                        +: '+' (825,51)-(825,52)
                        number_literal: '1' (825,53)-(825,54)
                      ): ')' (825,54)-(825,55)
              ;: ';' (825,55)-(825,56)
            expression_statement (826,2)-(826,24)
              call_expression (826,2)-(826,23)
                identifier: 'strncpy' (826,2)-(826,9)
                argument_list (826,9)-(826,23)
                  (: '(' (826,9)-(826,10)
                  identifier: 'dest' (826,10)-(826,14)
                  ,: ',' (826,14)-(826,15)
                  identifier: 'pb' (826,16)-(826,18)
                  ,: ',' (826,18)-(826,19)
                  identifier: 'pl' (826,20)-(826,22)
                  ): ')' (826,22)-(826,23)
              ;: ';' (826,23)-(826,24)
            expression_statement (827,2)-(827,13)
              assignment_expression (827,2)-(827,12)
                identifier: 'dest' (827,2)-(827,6)
                +=: '+=' (827,7)-(827,9)
                identifier: 'pl' (827,10)-(827,12)
              ;: ';' (827,12)-(827,13)
            expression_statement (828,2)-(828,20)
              call_expression (828,2)-(828,19)
                identifier: 'strcpy' (828,2)-(828,8)
                argument_list (828,8)-(828,19)
                  (: '(' (828,8)-(828,9)
                  identifier: 'dest' (828,9)-(828,13)
                  ,: ',' (828,13)-(828,14)
                  identifier: 'src' (828,15)-(828,18)
                  ): ')' (828,18)-(828,19)
              ;: ';' (828,19)-(828,20)
            if_statement (829,2)-(830,23)
              if: 'if' (829,2)-(829,4)
              parenthesized_expression (829,5)-(829,13)
                (: '(' (829,5)-(829,6)
                identifier: 'glbsub' (829,6)-(829,12)
                ): ')' (829,12)-(829,13)
              expression_statement (830,6)-(830,23)
                call_expression (830,6)-(830,22)
                  identifier: 'shtokenize' (830,6)-(830,16)
                  argument_list (830,16)-(830,22)
                    (: '(' (830,16)-(830,17)
                    identifier: 'dest' (830,17)-(830,21)
                    ): ')' (830,21)-(830,22)
                ;: ';' (830,22)-(830,23)
            expression_statement (831,2)-(831,12)
              assignment_expression (831,2)-(831,11)
                identifier: 'dest' (831,2)-(831,6)
                +=: '+=' (831,7)-(831,9)
                identifier: 'l' (831,10)-(831,11)
              ;: ';' (831,11)-(831,12)
            if_statement (832,2)-(833,22)
              if: 'if' (832,2)-(832,4)
              parenthesized_expression (832,5)-(832,8)
                (: '(' (832,5)-(832,6)
                identifier: 's' (832,6)-(832,7)
                ): ')' (832,7)-(832,8)
              expression_statement (833,6)-(833,22)
                call_expression (833,6)-(833,21)
                  identifier: 'strcpy' (833,6)-(833,12)
                  argument_list (833,12)-(833,21)
                    (: '(' (833,12)-(833,13)
                    identifier: 'dest' (833,13)-(833,17)
                    ,: ',' (833,17)-(833,18)
                    identifier: 's' (833,19)-(833,20)
                    ): ')' (833,20)-(833,21)
                ;: ';' (833,21)-(833,22)
            }: '}' (834,5)-(834,6)
      return_statement (835,5)-(835,17)
        return: 'return' (835,5)-(835,11)
        identifier: 'dest' (835,12)-(835,16)
        ;: ';' (835,16)-(835,17)
      }: '}' (836,1)-(836,2)
  preproc_ifdef (838,1)-(870,7)
    #ifdef: '#ifdef' (838,1)-(838,7)
    identifier: 'MULTIBYTE_SUPPORT' (838,8)-(838,25)
    preproc_function_def (839,1)-(840,1)
      #define: '#define' (839,1)-(839,8)
      identifier: 'WCPADWIDTH' (839,9)-(839,19)
      preproc_params (839,19)-(839,30)
        (: '(' (839,19)-(839,20)
        identifier: 'cchar' (839,20)-(839,25)
        ,: ',' (839,25)-(839,26)
        identifier: 'mw' (839,27)-(839,29)
        ): ')' (839,29)-(839,30)
      preproc_arg: 'wcpadwidth(cchar, mw)' (839,31)-(839,52)
    comment: '/*
 * Width of character for padding purposes.
 * 0: all characters count 1.
 * 1: use width of multibyte character.
 * 2: non-zero width characters count 1, zero width 0.
 */' (841,1)-(846,4)
    function_definition (847,1)-(866,2)
      storage_class_specifier (847,1)-(847,7)
        static: 'static' (847,1)-(847,7)
      primitive_type: 'int' (847,8)-(847,11)
      function_declarator (848,1)-(848,40)
        identifier: 'wcpadwidth' (848,1)-(848,11)
        parameter_list (848,11)-(848,40)
          (: '(' (848,11)-(848,12)
          parameter_declaration (848,12)-(848,22)
            type_identifier: 'wchar_t' (848,12)-(848,19)
            identifier: 'wc' (848,20)-(848,22)
          ,: ',' (848,22)-(848,23)
          parameter_declaration (848,24)-(848,39)
            primitive_type: 'int' (848,24)-(848,27)
            identifier: 'multi_width' (848,28)-(848,39)
          ): ')' (848,39)-(848,40)
      compound_statement (849,1)-(866,2)
        {: '{' (849,1)-(849,2)
        declaration (850,5)-(850,15)
          primitive_type: 'int' (850,5)-(850,8)
          identifier: 'width' (850,9)-(850,14)
          ;: ';' (850,14)-(850,15)
        switch_statement (852,5)-(865,6)
          switch: 'switch' (852,5)-(852,11)
          parenthesized_expression (852,12)-(852,25)
            (: '(' (852,12)-(852,13)
            identifier: 'multi_width' (852,13)-(852,24)
            ): ')' (852,24)-(852,25)
          compound_statement (853,5)-(865,6)
            {: '{' (853,5)-(853,6)
            case_statement (854,5)-(855,11)
              case: 'case' (854,5)-(854,9)
              number_literal: '0' (854,10)-(854,11)
              :: ':' (854,11)-(854,12)
              return_statement (855,2)-(855,11)
                return: 'return' (855,2)-(855,8)
                number_literal: '1' (855,9)-(855,10)
                ;: ';' (855,10)-(855,11)
            case_statement (857,5)-(861,11)
              case: 'case' (857,5)-(857,9)
              number_literal: '1' (857,10)-(857,11)
              :: ':' (857,11)-(857,12)
              expression_statement (858,2)-(858,22)
                assignment_expression (858,2)-(858,21)
                  identifier: 'width' (858,2)-(858,7)
                  =: '=' (858,8)-(858,9)
                  call_expression (858,10)-(858,21)
                    identifier: 'WCWIDTH' (858,10)-(858,17)
                    argument_list (858,17)-(858,21)
                      (: '(' (858,17)-(858,18)
                      identifier: 'wc' (858,18)-(858,20)
                      ): ')' (858,20)-(858,21)
                ;: ';' (858,21)-(858,22)
              if_statement (859,2)-(860,19)
                if: 'if' (859,2)-(859,4)
                parenthesized_expression (859,5)-(859,17)
                  (: '(' (859,5)-(859,6)
                  binary_expression (859,6)-(859,16)
                    identifier: 'width' (859,6)-(859,11)
                    >=: '>=' (859,12)-(859,14)
                    number_literal: '0' (859,15)-(859,16)
                  ): ')' (859,16)-(859,17)
                return_statement (860,6)-(860,19)
                  return: 'return' (860,6)-(860,12)
                  identifier: 'width' (860,13)-(860,18)
                  ;: ';' (860,18)-(860,19)
              return_statement (861,2)-(861,11)
                return: 'return' (861,2)-(861,8)
                number_literal: '0' (861,9)-(861,10)
                ;: ';' (861,10)-(861,11)
            case_statement (863,5)-(864,33)
              default: 'default' (863,5)-(863,12)
              :: ':' (863,12)-(863,13)
              return_statement (864,2)-(864,33)
                return: 'return' (864,2)-(864,8)
                conditional_expression (864,9)-(864,32)
                  binary_expression (864,9)-(864,24)
                    call_expression (864,9)-(864,20)
                      identifier: 'WCWIDTH' (864,9)-(864,16)
                      argument_list (864,16)-(864,20)
                        (: '(' (864,16)-(864,17)
                        identifier: 'wc' (864,17)-(864,19)
                        ): ')' (864,19)-(864,20)
                    >: '>' (864,21)-(864,22)
                    number_literal: '0' (864,23)-(864,24)
                  ?: '?' (864,25)-(864,26)
                  number_literal: '1' (864,27)-(864,28)
                  :: ':' (864,29)-(864,30)
                  number_literal: '0' (864,31)-(864,32)
                ;: ';' (864,32)-(864,33)
            }: '}' (865,5)-(865,6)
        }: '}' (866,1)-(866,2)
    preproc_else (868,1)-(870,1)
      #else: '#else' (868,1)-(868,6)
      preproc_function_def (869,1)-(870,1)
        #define: '#define' (869,1)-(869,8)
        identifier: 'WCPADWIDTH' (869,9)-(869,19)
        preproc_params (869,19)-(869,30)
          (: '(' (869,19)-(869,20)
          identifier: 'cchar' (869,20)-(869,25)
          ,: ',' (869,25)-(869,26)
          identifier: 'mw' (869,27)-(869,29)
          ): ')' (869,29)-(869,30)
        preproc_arg: '(1)' (869,31)-(869,34)
    #endif: '#endif' (870,1)-(870,7)
  comment: '/*
 * Pad the string str, returning a result from the heap (or str itself,
 * if it didn't need padding).  If str is too large, it will be truncated.
 * Calculations are in terms of width if MULTIBYTE is in effect and
 * multi_width is non-zero, else characters.
 *
 * prenum and postnum are the width to which the string needs padding
 * on the left and right.
 *
 * preone and postone are string to insert once only before and after
 * str.  They will be truncated on the left or right, respectively,
 * if necessary to fit the width.  Either or both may be NULL in which
 * case they will not be used.
 *
 * premul and postmul are the padding strings to be repeated before
 * on the left (if prenum is non-zero) and right (if postnum is non-zero).  If
 * NULL the first character of IFS (typically but not necessarily a space)
 * will be used.
 */' (872,1)-(890,4)
  function_definition (892,1)-(1332,2)
    storage_class_specifier (892,1)-(892,7)
      static: 'static' (892,1)-(892,7)
    primitive_type: 'char' (892,8)-(892,12)
    pointer_declarator (892,13)-(898,6)
      *: '*' (892,13)-(892,14)
      function_declarator (893,1)-(898,6)
        identifier: 'dopadding' (893,1)-(893,10)
        parameter_list (893,10)-(898,6)
          (: '(' (893,10)-(893,11)
          parameter_declaration (893,11)-(893,20)
            primitive_type: 'char' (893,11)-(893,15)
            pointer_declarator (893,16)-(893,20)
              *: '*' (893,16)-(893,17)
              identifier: 'str' (893,17)-(893,20)
          ,: ',' (893,20)-(893,21)
          parameter_declaration (893,22)-(893,32)
            primitive_type: 'int' (893,22)-(893,25)
            identifier: 'prenum' (893,26)-(893,32)
          ,: ',' (893,32)-(893,33)
          parameter_declaration (893,34)-(893,45)
            primitive_type: 'int' (893,34)-(893,37)
            identifier: 'postnum' (893,38)-(893,45)
          ,: ',' (893,45)-(893,46)
          parameter_declaration (893,47)-(893,59)
            primitive_type: 'char' (893,47)-(893,51)
            pointer_declarator (893,52)-(893,59)
              *: '*' (893,52)-(893,53)
              identifier: 'preone' (893,53)-(893,59)
          ,: ',' (893,59)-(893,60)
          parameter_declaration (893,61)-(893,74)
            primitive_type: 'char' (893,61)-(893,65)
            pointer_declarator (893,66)-(893,74)
              *: '*' (893,66)-(893,67)
              identifier: 'postone' (893,67)-(893,74)
          ,: ',' (893,74)-(893,75)
          parameter_declaration (894,4)-(894,16)
            primitive_type: 'char' (894,4)-(894,8)
            pointer_declarator (894,9)-(894,16)
              *: '*' (894,9)-(894,10)
              identifier: 'premul' (894,10)-(894,16)
          ,: ',' (894,16)-(894,17)
          parameter_declaration (894,18)-(894,31)
            primitive_type: 'char' (894,18)-(894,22)
            pointer_declarator (894,23)-(894,31)
              *: '*' (894,23)-(894,24)
              identifier: 'postmul' (894,24)-(894,31)
          ERROR (895,1)-(895,25)
            #ifdef: '#ifdef' (895,1)-(895,7)
            identifier: 'MULTIBYTE_SUPPORT' (895,8)-(895,25)
          ,: ',' (896,4)-(896,5)
          parameter_declaration (896,6)-(896,21)
            primitive_type: 'int' (896,6)-(896,9)
            identifier: 'multi_width' (896,10)-(896,21)
          ERROR (897,1)-(897,7)
            #endif: '#endif' (897,1)-(897,7)
          ): ')' (898,5)-(898,6)
    compound_statement (899,1)-(1332,2)
      {: '{' (899,1)-(899,2)
      declaration (900,5)-(900,29)
        primitive_type: 'char' (900,5)-(900,9)
        pointer_declarator (900,10)-(900,14)
          *: '*' (900,10)-(900,11)
          identifier: 'def' (900,11)-(900,14)
        ,: ',' (900,14)-(900,15)
        pointer_declarator (900,16)-(900,20)
          *: '*' (900,16)-(900,17)
          identifier: 'ret' (900,17)-(900,20)
        ,: ',' (900,20)-(900,21)
        pointer_declarator (900,22)-(900,24)
          *: '*' (900,22)-(900,23)
          identifier: 't' (900,23)-(900,24)
        ,: ',' (900,24)-(900,25)
        pointer_declarator (900,26)-(900,28)
          *: '*' (900,26)-(900,27)
          identifier: 'r' (900,27)-(900,28)
        ;: ';' (900,28)-(900,29)
      declaration (901,5)-(901,76)
        primitive_type: 'int' (901,5)-(901,8)
        identifier: 'ls' (901,9)-(901,11)
        ,: ',' (901,11)-(901,12)
        identifier: 'ls2' (901,13)-(901,16)
        ,: ',' (901,16)-(901,17)
        identifier: 'lpreone' (901,18)-(901,25)
        ,: ',' (901,25)-(901,26)
        identifier: 'lpostone' (901,27)-(901,35)
        ,: ',' (901,35)-(901,36)
        identifier: 'lpremul' (901,37)-(901,44)
        ,: ',' (901,44)-(901,45)
        identifier: 'lpostmul' (901,46)-(901,54)
        ,: ',' (901,54)-(901,55)
        identifier: 'lr' (901,56)-(901,58)
        ,: ',' (901,58)-(901,59)
        identifier: 'f' (901,60)-(901,61)
        ,: ',' (901,61)-(901,62)
        identifier: 'm' (901,63)-(901,64)
        ,: ',' (901,64)-(901,65)
        identifier: 'c' (901,66)-(901,67)
        ,: ',' (901,67)-(901,68)
        identifier: 'cc' (901,69)-(901,71)
        ,: ',' (901,71)-(901,72)
        identifier: 'cl' (901,73)-(901,75)
        ;: ';' (901,75)-(901,76)
      declaration (902,5)-(902,22)
        type_identifier: 'convchar_t' (902,5)-(902,15)
        identifier: 'cchar' (902,16)-(902,21)
        ;: ';' (902,21)-(902,22)
      expression_statement (904,5)-(904,23)
        call_expression (904,5)-(904,22)
          identifier: 'MB_METACHARINIT' (904,5)-(904,20)
          argument_list (904,20)-(904,22)
            (: '(' (904,20)-(904,21)
            ): ')' (904,21)-(904,22)
        ;: ';' (904,22)-(904,23)
      if_statement (905,5)-(909,11)
        if: 'if' (905,5)-(905,7)
        parenthesized_expression (905,8)-(905,22)
          (: '(' (905,8)-(905,9)
          binary_expression (905,9)-(905,21)
            unary_expression (905,9)-(905,13)
              !: '!' (905,9)-(905,10)
              identifier: 'ifs' (905,10)-(905,13)
            ||: '||' (905,14)-(905,16)
            pointer_expression (905,17)-(905,21)
              *: '*' (905,17)-(905,18)
              identifier: 'ifs' (905,18)-(905,21)
          ): ')' (905,21)-(905,22)
        compound_statement (905,23)-(908,6)
          {: '{' (905,23)-(905,24)
          declaration (906,2)-(906,41)
            primitive_type: 'char' (906,2)-(906,6)
            init_declarator (906,7)-(906,40)
              pointer_declarator (906,7)-(906,14)
                *: '*' (906,7)-(906,8)
                identifier: 'tmpifs' (906,8)-(906,14)
              =: '=' (906,15)-(906,16)
              conditional_expression (906,17)-(906,40)
                identifier: 'ifs' (906,17)-(906,20)
                ?: '?' (906,21)-(906,22)
                identifier: 'ifs' (906,23)-(906,26)
                :: ':' (906,27)-(906,28)
                identifier: 'DEFAULT_IFS' (906,29)-(906,40)
            ;: ';' (906,40)-(906,41)
          expression_statement (907,2)-(907,50)
            assignment_expression (907,2)-(907,49)
              identifier: 'def' (907,2)-(907,5)
              =: '=' (907,6)-(907,7)
              call_expression (907,8)-(907,49)
                identifier: 'dupstrpfx' (907,8)-(907,17)
                argument_list (907,17)-(907,49)
                  (: '(' (907,17)-(907,18)
                  identifier: 'tmpifs' (907,18)-(907,24)
                  ,: ',' (907,24)-(907,25)
                  call_expression (907,26)-(907,48)
                    identifier: 'MB_METACHARLEN' (907,26)-(907,40)
                    argument_list (907,40)-(907,48)
                      (: '(' (907,40)-(907,41)
                      identifier: 'tmpifs' (907,41)-(907,47)
                      ): ')' (907,47)-(907,48)
                  ): ')' (907,48)-(907,49)
            ;: ';' (907,49)-(907,50)
          }: '}' (908,5)-(908,6)
        else_clause (908,7)-(909,11)
          else: 'else' (908,7)-(908,11)
          expression_statement (909,2)-(909,11)
            assignment_expression (909,2)-(909,10)
              identifier: 'def' (909,2)-(909,5)
              =: '=' (909,6)-(909,7)
              string_literal (909,8)-(909,10)
                ": '"' (909,8)-(909,9)
                ": '"' (909,9)-(909,10)
            ;: ';' (909,10)-(909,11)
      if_statement (910,5)-(911,15)
        if: 'if' (910,5)-(910,7)
        parenthesized_expression (910,8)-(910,28)
          (: '(' (910,8)-(910,9)
          binary_expression (910,9)-(910,27)
            identifier: 'preone' (910,9)-(910,15)
            &&: '&&' (910,16)-(910,18)
            unary_expression (910,19)-(910,27)
              !: '!' (910,19)-(910,20)
              pointer_expression (910,20)-(910,27)
                *: '*' (910,20)-(910,21)
                identifier: 'preone' (910,21)-(910,27)
          ): ')' (910,27)-(910,28)
        expression_statement (911,2)-(911,15)
          assignment_expression (911,2)-(911,14)
            identifier: 'preone' (911,2)-(911,8)
            =: '=' (911,9)-(911,10)
            identifier: 'def' (911,11)-(911,14)
          ;: ';' (911,14)-(911,15)
      if_statement (912,5)-(913,16)
        if: 'if' (912,5)-(912,7)
        parenthesized_expression (912,8)-(912,30)
          (: '(' (912,8)-(912,9)
          binary_expression (912,9)-(912,29)
            identifier: 'postone' (912,9)-(912,16)
            &&: '&&' (912,17)-(912,19)
            unary_expression (912,20)-(912,29)
              !: '!' (912,20)-(912,21)
              pointer_expression (912,21)-(912,29)
                *: '*' (912,21)-(912,22)
                identifier: 'postone' (912,22)-(912,29)
          ): ')' (912,29)-(912,30)
        expression_statement (913,2)-(913,16)
          assignment_expression (913,2)-(913,15)
            identifier: 'postone' (913,2)-(913,9)
            =: '=' (913,10)-(913,11)
            identifier: 'def' (913,12)-(913,15)
          ;: ';' (913,15)-(913,16)
      if_statement (914,5)-(915,15)
        if: 'if' (914,5)-(914,7)
        parenthesized_expression (914,8)-(914,29)
          (: '(' (914,8)-(914,9)
          binary_expression (914,9)-(914,28)
            unary_expression (914,9)-(914,16)
              !: '!' (914,9)-(914,10)
              identifier: 'premul' (914,10)-(914,16)
            ||: '||' (914,17)-(914,19)
            unary_expression (914,20)-(914,28)
              !: '!' (914,20)-(914,21)
              pointer_expression (914,21)-(914,28)
                *: '*' (914,21)-(914,22)
                identifier: 'premul' (914,22)-(914,28)
          ): ')' (914,28)-(914,29)
        expression_statement (915,2)-(915,15)
          assignment_expression (915,2)-(915,14)
            identifier: 'premul' (915,2)-(915,8)
            =: '=' (915,9)-(915,10)
            identifier: 'def' (915,11)-(915,14)
          ;: ';' (915,14)-(915,15)
      if_statement (916,5)-(917,16)
        if: 'if' (916,5)-(916,7)
        parenthesized_expression (916,8)-(916,31)
          (: '(' (916,8)-(916,9)
          binary_expression (916,9)-(916,30)
            unary_expression (916,9)-(916,17)
              !: '!' (916,9)-(916,10)
              identifier: 'postmul' (916,10)-(916,17)
            ||: '||' (916,18)-(916,20)
            unary_expression (916,21)-(916,30)
              !: '!' (916,21)-(916,22)
              pointer_expression (916,22)-(916,30)
                *: '*' (916,22)-(916,23)
                identifier: 'postmul' (916,23)-(916,30)
          ): ')' (916,30)-(916,31)
        expression_statement (917,2)-(917,16)
          assignment_expression (917,2)-(917,15)
            identifier: 'postmul' (917,2)-(917,9)
            =: '=' (917,10)-(917,11)
            identifier: 'def' (917,12)-(917,15)
          ;: ';' (917,15)-(917,16)
      expression_statement (919,5)-(919,43)
        assignment_expression (919,5)-(919,42)
          identifier: 'ls' (919,5)-(919,7)
          =: '=' (919,8)-(919,9)
          call_expression (919,10)-(919,42)
            identifier: 'MB_METASTRLEN2' (919,10)-(919,24)
            argument_list (919,24)-(919,42)
              (: '(' (919,24)-(919,25)
              identifier: 'str' (919,25)-(919,28)
              ,: ',' (919,28)-(919,29)
              identifier: 'multi_width' (919,30)-(919,41)
              ): ')' (919,41)-(919,42)
        ;: ';' (919,42)-(919,43)
      expression_statement (920,5)-(920,64)
        assignment_expression (920,5)-(920,63)
          identifier: 'lpreone' (920,5)-(920,12)
          =: '=' (920,13)-(920,14)
          conditional_expression (920,15)-(920,63)
            identifier: 'preone' (920,15)-(920,21)
            ?: '?' (920,22)-(920,23)
            call_expression (920,24)-(920,59)
              identifier: 'MB_METASTRLEN2' (920,24)-(920,38)
              argument_list (920,38)-(920,59)
                (: '(' (920,38)-(920,39)
                identifier: 'preone' (920,39)-(920,45)
                ,: ',' (920,45)-(920,46)
                identifier: 'multi_width' (920,47)-(920,58)
                ): ')' (920,58)-(920,59)
            :: ':' (920,60)-(920,61)
            number_literal: '0' (920,62)-(920,63)
        ;: ';' (920,63)-(920,64)
      expression_statement (921,5)-(921,67)
        assignment_expression (921,5)-(921,66)
          identifier: 'lpostone' (921,5)-(921,13)
          =: '=' (921,14)-(921,15)
          conditional_expression (921,16)-(921,66)
            identifier: 'postone' (921,16)-(921,23)
            ?: '?' (921,24)-(921,25)
            call_expression (921,26)-(921,62)
              identifier: 'MB_METASTRLEN2' (921,26)-(921,40)
              argument_list (921,40)-(921,62)
                (: '(' (921,40)-(921,41)
                identifier: 'postone' (921,41)-(921,48)
                ,: ',' (921,48)-(921,49)
                identifier: 'multi_width' (921,50)-(921,61)
                ): ')' (921,61)-(921,62)
            :: ':' (921,63)-(921,64)
            number_literal: '0' (921,65)-(921,66)
        ;: ';' (921,66)-(921,67)
      expression_statement (922,5)-(922,51)
        assignment_expression (922,5)-(922,50)
          identifier: 'lpremul' (922,5)-(922,12)
          =: '=' (922,13)-(922,14)
          call_expression (922,15)-(922,50)
            identifier: 'MB_METASTRLEN2' (922,15)-(922,29)
            argument_list (922,29)-(922,50)
              (: '(' (922,29)-(922,30)
              identifier: 'premul' (922,30)-(922,36)
              ,: ',' (922,36)-(922,37)
              identifier: 'multi_width' (922,38)-(922,49)
              ): ')' (922,49)-(922,50)
        ;: ';' (922,50)-(922,51)
      expression_statement (923,5)-(923,53)
        assignment_expression (923,5)-(923,52)
          identifier: 'lpostmul' (923,5)-(923,13)
          =: '=' (923,14)-(923,15)
          call_expression (923,16)-(923,52)
            identifier: 'MB_METASTRLEN2' (923,16)-(923,30)
            argument_list (923,30)-(923,52)
              (: '(' (923,30)-(923,31)
              identifier: 'postmul' (923,31)-(923,38)
              ,: ',' (923,38)-(923,39)
              identifier: 'multi_width' (923,40)-(923,51)
              ): ')' (923,51)-(923,52)
        ;: ';' (923,52)-(923,53)
      if_statement (925,5)-(926,13)
        if: 'if' (925,5)-(925,7)
        parenthesized_expression (925,8)-(925,32)
          (: '(' (925,8)-(925,9)
          binary_expression (925,9)-(925,31)
            binary_expression (925,9)-(925,25)
              identifier: 'prenum' (925,9)-(925,15)
              +: '+' (925,16)-(925,17)
              identifier: 'postnum' (925,18)-(925,25)
            ==: '==' (925,26)-(925,28)
            identifier: 'ls' (925,29)-(925,31)
          ): ')' (925,31)-(925,32)
        return_statement (926,2)-(926,13)
          return: 'return' (926,2)-(926,8)
          identifier: 'str' (926,9)-(926,12)
          ;: ';' (926,12)-(926,13)
      comment: '/*
     * Try to be careful with allocated lengths.  The following
     * is a maximum, in case we need the entire repeated string
     * for each repetition.  We probably don't, but in case the user
     * has given us something pathological which doesn't convert
     * easily into a width we'd better be safe.
     */' (928,5)-(934,8)
      expression_statement (935,5)-(935,76)
        assignment_expression (935,5)-(935,75)
          identifier: 'lr' (935,5)-(935,7)
          =: '=' (935,8)-(935,9)
          binary_expression (935,10)-(935,75)
            binary_expression (935,10)-(935,47)
              call_expression (935,10)-(935,21)
                identifier: 'strlen' (935,10)-(935,16)
                argument_list (935,16)-(935,21)
                  (: '(' (935,16)-(935,17)
                  identifier: 'str' (935,17)-(935,20)
                  ): ')' (935,20)-(935,21)
              +: '+' (935,22)-(935,23)
              binary_expression (935,24)-(935,47)
                call_expression (935,24)-(935,38)
                  identifier: 'strlen' (935,24)-(935,30)
                  argument_list (935,30)-(935,38)
                    (: '(' (935,30)-(935,31)
                    identifier: 'premul' (935,31)-(935,37)
                    ): ')' (935,37)-(935,38)
                *: '*' (935,39)-(935,40)
                identifier: 'prenum' (935,41)-(935,47)
            +: '+' (935,48)-(935,49)
            binary_expression (935,50)-(935,75)
              call_expression (935,50)-(935,65)
                identifier: 'strlen' (935,50)-(935,56)
                argument_list (935,56)-(935,65)
                  (: '(' (935,56)-(935,57)
                  identifier: 'postmul' (935,57)-(935,64)
                  ): ')' (935,64)-(935,65)
              *: '*' (935,66)-(935,67)
              identifier: 'postnum' (935,68)-(935,75)
        ;: ';' (935,75)-(935,76)
      comment: '/*
     * Same logic for preone and postone, except those may be NULL.
     */' (936,5)-(938,8)
      if_statement (939,5)-(940,23)
        if: 'if' (939,5)-(939,7)
        parenthesized_expression (939,8)-(939,16)
          (: '(' (939,8)-(939,9)
          identifier: 'preone' (939,9)-(939,15)
          ): ')' (939,15)-(939,16)
        expression_statement (940,2)-(940,23)
          assignment_expression (940,2)-(940,22)
            identifier: 'lr' (940,2)-(940,4)
            +=: '+=' (940,5)-(940,7)
            call_expression (940,8)-(940,22)
              identifier: 'strlen' (940,8)-(940,14)
              argument_list (940,14)-(940,22)
                (: '(' (940,14)-(940,15)
                identifier: 'preone' (940,15)-(940,21)
                ): ')' (940,21)-(940,22)
          ;: ';' (940,22)-(940,23)
      if_statement (941,5)-(942,24)
        if: 'if' (941,5)-(941,7)
        parenthesized_expression (941,8)-(941,17)
          (: '(' (941,8)-(941,9)
          identifier: 'postone' (941,9)-(941,16)
          ): ')' (941,16)-(941,17)
        expression_statement (942,2)-(942,24)
          assignment_expression (942,2)-(942,23)
            identifier: 'lr' (942,2)-(942,4)
            +=: '+=' (942,5)-(942,7)
            call_expression (942,8)-(942,23)
              identifier: 'strlen' (942,8)-(942,14)
              argument_list (942,14)-(942,23)
                (: '(' (942,14)-(942,15)
                identifier: 'postone' (942,15)-(942,22)
                ): ')' (942,22)-(942,23)
          ;: ';' (942,23)-(942,24)
      expression_statement (943,5)-(943,39)
        assignment_expression (943,5)-(943,38)
          identifier: 'r' (943,5)-(943,6)
          =: '=' (943,7)-(943,8)
          assignment_expression (943,9)-(943,38)
            identifier: 'ret' (943,9)-(943,12)
            =: '=' (943,13)-(943,14)
            cast_expression (943,15)-(943,38)
              (: '(' (943,15)-(943,16)
              type_descriptor (943,16)-(943,22)
                primitive_type: 'char' (943,16)-(943,20)
                abstract_pointer_declarator (943,21)-(943,22)
                  *: '*' (943,21)-(943,22)
              ): ')' (943,22)-(943,23)
              call_expression (943,23)-(943,38)
                identifier: 'zhalloc' (943,23)-(943,30)
                argument_list (943,30)-(943,38)
                  (: '(' (943,30)-(943,31)
                  binary_expression (943,31)-(943,37)
                    identifier: 'lr' (943,31)-(943,33)
                    +: '+' (943,34)-(943,35)
                    number_literal: '1' (943,36)-(943,37)
                  ): ')' (943,37)-(943,38)
        ;: ';' (943,38)-(943,39)
      if_statement (945,5)-(1328,6)
        if: 'if' (945,5)-(945,7)
        parenthesized_expression (945,8)-(945,16)
          (: '(' (945,8)-(945,9)
          identifier: 'prenum' (945,9)-(945,15)
          ): ')' (945,15)-(945,16)
        compound_statement (945,17)-(1235,6)
          {: '{' (945,17)-(945,18)
          comment: '/*
	 * Pad on the left.
	 */' (946,2)-(948,5)
          if_statement (949,2)-(1234,3)
            if: 'if' (949,2)-(949,4)
            parenthesized_expression (949,5)-(949,14)
              (: '(' (949,5)-(949,6)
              identifier: 'postnum' (949,6)-(949,13)
              ): ')' (949,13)-(949,14)
            compound_statement (949,15)-(1110,3)
              {: '{' (949,15)-(949,16)
              comment: '/*
	     * Pad on both right and left.
	     * The strategy is to divide the string into two halves.
	     * The first half is dealt with by the left hand padding
	     * code, the second by the right hand.
	     */' (950,6)-(955,9)
              expression_statement (956,6)-(956,19)
                assignment_expression (956,6)-(956,18)
                  identifier: 'ls2' (956,6)-(956,9)
                  =: '=' (956,10)-(956,11)
                  binary_expression (956,12)-(956,18)
                    identifier: 'ls' (956,12)-(956,14)
                    /: '/' (956,15)-(956,16)
                    number_literal: '2' (956,17)-(956,18)
                ;: ';' (956,18)-(956,19)
              comment: '/* The width left to pad for the first half. */' (958,6)-(958,53)
              expression_statement (959,6)-(959,23)
                assignment_expression (959,6)-(959,22)
                  identifier: 'f' (959,6)-(959,7)
                  =: '=' (959,8)-(959,9)
                  binary_expression (959,10)-(959,22)
                    identifier: 'prenum' (959,10)-(959,16)
                    -: '-' (959,17)-(959,18)
                    identifier: 'ls2' (959,19)-(959,22)
                ;: ';' (959,22)-(959,23)
              if_statement (960,6)-(1050,7)
                if: 'if' (960,6)-(960,8)
                parenthesized_expression (960,9)-(960,17)
                  (: '(' (960,9)-(960,10)
                  binary_expression (960,10)-(960,16)
                    identifier: 'f' (960,10)-(960,11)
                    <=: '<=' (960,12)-(960,14)
                    number_literal: '0' (960,15)-(960,16)
                  ): ')' (960,16)-(960,17)
                compound_statement (960,18)-(980,7)
                  {: '{' (960,18)-(960,19)
                  comment: '/* First half doesn't fit.  Skip the first -f width. */' (961,3)-(961,58)
                  expression_statement (962,3)-(962,10)
                    assignment_expression (962,3)-(962,9)
                      identifier: 'f' (962,3)-(962,4)
                      =: '=' (962,5)-(962,6)
                      unary_expression (962,7)-(962,9)
                        -: '-' (962,7)-(962,8)
                        identifier: 'f' (962,8)-(962,9)
                    ;: ';' (962,9)-(962,10)
                  expression_statement (963,3)-(963,21)
                    call_expression (963,3)-(963,20)
                      identifier: 'MB_METACHARINIT' (963,3)-(963,18)
                      argument_list (963,18)-(963,20)
                        (: '(' (963,18)-(963,19)
                        ): ')' (963,19)-(963,20)
                    ;: ';' (963,20)-(963,21)
                  while_statement (964,3)-(970,4)
                    while: 'while' (964,3)-(964,8)
                    parenthesized_expression (964,9)-(964,16)
                      (: '(' (964,9)-(964,10)
                      binary_expression (964,10)-(964,15)
                        identifier: 'f' (964,10)-(964,11)
                        >: '>' (964,12)-(964,13)
                        number_literal: '0' (964,14)-(964,15)
                      ): ')' (964,15)-(964,16)
                    compound_statement (964,17)-(970,4)
                      {: '{' (964,17)-(964,18)
                      expression_statement (965,7)-(965,44)
                        assignment_expression (965,7)-(965,43)
                          identifier: 'cl' (965,7)-(965,9)
                          =: '=' (965,10)-(965,11)
                          call_expression (965,12)-(965,43)
                            identifier: 'MB_METACHARLENCONV' (965,12)-(965,30)
                            argument_list (965,30)-(965,43)
                              (: '(' (965,30)-(965,31)
                              identifier: 'str' (965,31)-(965,34)
                              ,: ',' (965,34)-(965,35)
                              pointer_expression (965,36)-(965,42)
                                &: '&' (965,36)-(965,37)
                                identifier: 'cchar' (965,37)-(965,42)
                              ): ')' (965,42)-(965,43)
                        ;: ';' (965,43)-(965,44)
                      if_statement (966,7)-(967,10)
                        if: 'if' (966,7)-(966,9)
                        parenthesized_expression (966,10)-(966,15)
                          (: '(' (966,10)-(966,11)
                          unary_expression (966,11)-(966,14)
                            !: '!' (966,11)-(966,12)
                            identifier: 'cl' (966,12)-(966,14)
                          ): ')' (966,14)-(966,15)
                        break_statement (967,4)-(967,10)
                          break: 'break' (967,4)-(967,9)
                          ;: ';' (967,9)-(967,10)
                      expression_statement (968,7)-(968,17)
                        assignment_expression (968,7)-(968,16)
                          identifier: 'str' (968,7)-(968,10)
                          +=: '+=' (968,11)-(968,13)
                          identifier: 'cl' (968,14)-(968,16)
                        ;: ';' (968,16)-(968,17)
                      expression_statement (969,7)-(969,43)
                        assignment_expression (969,7)-(969,42)
                          identifier: 'f' (969,7)-(969,8)
                          -=: '-=' (969,9)-(969,11)
                          call_expression (969,12)-(969,42)
                            identifier: 'WCPADWIDTH' (969,12)-(969,22)
                            argument_list (969,22)-(969,42)
                              (: '(' (969,22)-(969,23)
                              identifier: 'cchar' (969,23)-(969,28)
                              ,: ',' (969,28)-(969,29)
                              identifier: 'multi_width' (969,30)-(969,41)
                              ): ')' (969,41)-(969,42)
                        ;: ';' (969,42)-(969,43)
                      }: '}' (970,3)-(970,4)
                  comment: '/* Now finish the first half. */' (971,3)-(971,35)
                  for_statement (972,3)-(979,4)
                    for: 'for' (972,3)-(972,6)
                    (: '(' (972,7)-(972,8)
                    assignment_expression (972,8)-(972,18)
                      identifier: 'c' (972,8)-(972,9)
                      =: '=' (972,10)-(972,11)
                      identifier: 'prenum' (972,12)-(972,18)
                    ;: ';' (972,18)-(972,19)
                    binary_expression (972,20)-(972,25)
                      identifier: 'c' (972,20)-(972,21)
                      >: '>' (972,22)-(972,23)
                      number_literal: '0' (972,24)-(972,25)
                    ;: ';' (972,25)-(972,26)
                    ): ')' (972,27)-(972,28)
                    compound_statement (972,29)-(979,4)
                      {: '{' (972,29)-(972,30)
                      expression_statement (973,7)-(973,44)
                        assignment_expression (973,7)-(973,43)
                          identifier: 'cl' (973,7)-(973,9)
                          =: '=' (973,10)-(973,11)
                          call_expression (973,12)-(973,43)
                            identifier: 'MB_METACHARLENCONV' (973,12)-(973,30)
                            argument_list (973,30)-(973,43)
                              (: '(' (973,30)-(973,31)
                              identifier: 'str' (973,31)-(973,34)
                              ,: ',' (973,34)-(973,35)
                              pointer_expression (973,36)-(973,42)
                                &: '&' (973,36)-(973,37)
                                identifier: 'cchar' (973,37)-(973,42)
                              ): ')' (973,42)-(973,43)
                        ;: ';' (973,43)-(973,44)
                      if_statement (974,7)-(975,10)
                        if: 'if' (974,7)-(974,9)
                        parenthesized_expression (974,10)-(974,15)
                          (: '(' (974,10)-(974,11)
                          unary_expression (974,11)-(974,14)
                            !: '!' (974,11)-(974,12)
                            identifier: 'cl' (974,12)-(974,14)
                          ): ')' (974,14)-(974,15)
                        break_statement (975,4)-(975,10)
                          break: 'break' (975,4)-(975,9)
                          ;: ';' (975,9)-(975,10)
                      while_statement (976,7)-(977,18)
                        while: 'while' (976,7)-(976,12)
                        parenthesized_expression (976,13)-(976,19)
                          (: '(' (976,13)-(976,14)
                          update_expression (976,14)-(976,18)
                            identifier: 'cl' (976,14)-(976,16)
                            --: '--' (976,16)-(976,18)
                          ): ')' (976,18)-(976,19)
                        expression_statement (977,4)-(977,18)
                          assignment_expression (977,4)-(977,17)
                            pointer_expression (977,4)-(977,8)
                              *: '*' (977,4)-(977,5)
                              update_expression (977,5)-(977,8)
                                identifier: 'r' (977,5)-(977,6)
                                ++: '++' (977,6)-(977,8)
                            =: '=' (977,9)-(977,10)
                            pointer_expression (977,11)-(977,17)
                              *: '*' (977,11)-(977,12)
                              update_expression (977,12)-(977,17)
                                identifier: 'str' (977,12)-(977,15)
                                ++: '++' (977,15)-(977,17)
                          ;: ';' (977,17)-(977,18)
                      expression_statement (978,7)-(978,43)
                        assignment_expression (978,7)-(978,42)
                          identifier: 'c' (978,7)-(978,8)
                          -=: '-=' (978,9)-(978,11)
                          call_expression (978,12)-(978,42)
                            identifier: 'WCPADWIDTH' (978,12)-(978,22)
                            argument_list (978,22)-(978,42)
                              (: '(' (978,22)-(978,23)
                              identifier: 'cchar' (978,23)-(978,28)
                              ,: ',' (978,28)-(978,29)
                              identifier: 'multi_width' (978,30)-(978,41)
                              ): ')' (978,41)-(978,42)
                        ;: ';' (978,42)-(978,43)
                      }: '}' (979,3)-(979,4)
                  }: '}' (980,6)-(980,7)
                else_clause (980,8)-(1050,7)
                  else: 'else' (980,8)-(980,12)
                  compound_statement (980,13)-(1050,7)
                    {: '{' (980,13)-(980,14)
                    if_statement (981,3)-(1040,4)
                      if: 'if' (981,3)-(981,5)
                      parenthesized_expression (981,6)-(981,20)
                        (: '(' (981,6)-(981,7)
                        binary_expression (981,7)-(981,19)
                          identifier: 'f' (981,7)-(981,8)
                          <=: '<=' (981,9)-(981,11)
                          identifier: 'lpreone' (981,12)-(981,19)
                        ): ')' (981,19)-(981,20)
                      compound_statement (981,21)-(1001,4)
                        {: '{' (981,21)-(981,22)
                        if_statement (982,7)-(1000,8)
                          if: 'if' (982,7)-(982,9)
                          parenthesized_expression (982,10)-(982,18)
                            (: '(' (982,10)-(982,11)
                            identifier: 'preone' (982,11)-(982,17)
                            ): ')' (982,17)-(982,18)
                          compound_statement (982,19)-(1000,8)
                            {: '{' (982,19)-(982,20)
                            comment: '/*
			 * The unrepeated string doesn't fit.
			 */' (983,4)-(985,7)
                            expression_statement (986,4)-(986,22)
                              call_expression (986,4)-(986,21)
                                identifier: 'MB_METACHARINIT' (986,4)-(986,19)
                                argument_list (986,19)-(986,21)
                                  (: '(' (986,19)-(986,20)
                                  ): ')' (986,20)-(986,21)
                              ;: ';' (986,21)-(986,22)
                            comment: '/* The width we need to skip */' (987,4)-(987,35)
                            expression_statement (988,4)-(988,20)
                              assignment_expression (988,4)-(988,19)
                                identifier: 'f' (988,4)-(988,5)
                                =: '=' (988,6)-(988,7)
                                binary_expression (988,8)-(988,19)
                                  identifier: 'lpreone' (988,8)-(988,15)
                                  -: '-' (988,16)-(988,17)
                                  identifier: 'f' (988,18)-(988,19)
                              ;: ';' (988,19)-(988,20)
                            comment: '/* So skip. */' (989,4)-(989,18)
                            for_statement (990,4)-(996,5)
                              for: 'for' (990,4)-(990,7)
                              (: '(' (990,8)-(990,9)
                              assignment_expression (990,9)-(990,19)
                                identifier: 't' (990,9)-(990,10)
                                =: '=' (990,11)-(990,12)
                                identifier: 'preone' (990,13)-(990,19)
                              ;: ';' (990,19)-(990,20)
                              binary_expression (990,21)-(990,26)
                                identifier: 'f' (990,21)-(990,22)
                                >: '>' (990,23)-(990,24)
                                number_literal: '0' (990,25)-(990,26)
                              ;: ';' (990,26)-(990,27)
                              ): ')' (990,28)-(990,29)
                              compound_statement (990,30)-(996,5)
                                {: '{' (990,30)-(990,31)
                                expression_statement (991,8)-(991,43)
                                  assignment_expression (991,8)-(991,42)
                                    identifier: 'cl' (991,8)-(991,10)
                                    =: '=' (991,11)-(991,12)
                                    call_expression (991,13)-(991,42)
                                      identifier: 'MB_METACHARLENCONV' (991,13)-(991,31)
                                      argument_list (991,31)-(991,42)
                                        (: '(' (991,31)-(991,32)
                                        identifier: 't' (991,32)-(991,33)
                                        ,: ',' (991,33)-(991,34)
                                        pointer_expression (991,35)-(991,41)
                                          &: '&' (991,35)-(991,36)
                                          identifier: 'cchar' (991,36)-(991,41)
                                        ): ')' (991,41)-(991,42)
                                  ;: ';' (991,42)-(991,43)
                                if_statement (992,8)-(993,11)
                                  if: 'if' (992,8)-(992,10)
                                  parenthesized_expression (992,11)-(992,16)
                                    (: '(' (992,11)-(992,12)
                                    unary_expression (992,12)-(992,15)
                                      !: '!' (992,12)-(992,13)
                                      identifier: 'cl' (992,13)-(992,15)
                                    ): ')' (992,15)-(992,16)
                                  break_statement (993,5)-(993,11)
                                    break: 'break' (993,5)-(993,10)
                                    ;: ';' (993,10)-(993,11)
                                expression_statement (994,8)-(994,16)
                                  assignment_expression (994,8)-(994,15)
                                    identifier: 't' (994,8)-(994,9)
                                    +=: '+=' (994,10)-(994,12)
                                    identifier: 'cl' (994,13)-(994,15)
                                  ;: ';' (994,15)-(994,16)
                                expression_statement (995,8)-(995,44)
                                  assignment_expression (995,8)-(995,43)
                                    identifier: 'f' (995,8)-(995,9)
                                    -=: '-=' (995,10)-(995,12)
                                    call_expression (995,13)-(995,43)
                                      identifier: 'WCPADWIDTH' (995,13)-(995,23)
                                      argument_list (995,23)-(995,43)
                                        (: '(' (995,23)-(995,24)
                                        identifier: 'cchar' (995,24)-(995,29)
                                        ,: ',' (995,29)-(995,30)
                                        identifier: 'multi_width' (995,31)-(995,42)
                                        ): ')' (995,42)-(995,43)
                                  ;: ';' (995,43)-(995,44)
                                }: '}' (996,4)-(996,5)
                            comment: '/* Then copy the entire remainder. */' (997,4)-(997,41)
                            while_statement (998,4)-(999,20)
                              while: 'while' (998,4)-(998,9)
                              parenthesized_expression (998,10)-(998,14)
                                (: '(' (998,10)-(998,11)
                                pointer_expression (998,11)-(998,13)
                                  *: '*' (998,11)-(998,12)
                                  identifier: 't' (998,12)-(998,13)
                                ): ')' (998,13)-(998,14)
                              expression_statement (999,8)-(999,20)
                                assignment_expression (999,8)-(999,19)
                                  pointer_expression (999,8)-(999,12)
                                    *: '*' (999,8)-(999,9)
                                    update_expression (999,9)-(999,12)
                                      identifier: 'r' (999,9)-(999,10)
                                      ++: '++' (999,10)-(999,12)
                                  =: '=' (999,13)-(999,14)
                                  pointer_expression (999,15)-(999,19)
                                    *: '*' (999,15)-(999,16)
                                    update_expression (999,16)-(999,19)
                                      identifier: 't' (999,16)-(999,17)
                                      ++: '++' (999,17)-(999,19)
                                ;: ';' (999,19)-(999,20)
                            }: '}' (1000,7)-(1000,8)
                        }: '}' (1001,3)-(1001,4)
                      else_clause (1001,5)-(1040,4)
                        else: 'else' (1001,5)-(1001,9)
                        compound_statement (1001,10)-(1040,4)
                          {: '{' (1001,10)-(1001,11)
                          expression_statement (1002,7)-(1002,20)
                            assignment_expression (1002,7)-(1002,19)
                              identifier: 'f' (1002,7)-(1002,8)
                              -=: '-=' (1002,9)-(1002,11)
                              identifier: 'lpreone' (1002,12)-(1002,19)
                            ;: ';' (1002,19)-(1002,20)
                          if_statement (1003,7)-(1034,8)
                            if: 'if' (1003,7)-(1003,9)
                            parenthesized_expression (1003,10)-(1003,19)
                              (: '(' (1003,10)-(1003,11)
                              identifier: 'lpremul' (1003,11)-(1003,18)
                              ): ')' (1003,18)-(1003,19)
                            compound_statement (1003,20)-(1034,8)
                              {: '{' (1003,20)-(1003,21)
                              if_statement (1004,4)-(1021,5)
                                if: 'if' (1004,4)-(1004,6)
                                parenthesized_expression (1004,7)-(1004,26)
                                  (: '(' (1004,7)-(1004,8)
                                  parenthesized_expression (1004,8)-(1004,25)
                                    (: '(' (1004,8)-(1004,9)
                                    assignment_expression (1004,9)-(1004,24)
                                      identifier: 'm' (1004,9)-(1004,10)
                                      =: '=' (1004,11)-(1004,12)
                                      binary_expression (1004,13)-(1004,24)
                                        identifier: 'f' (1004,13)-(1004,14)
                                        %: '%' (1004,15)-(1004,16)
                                        identifier: 'lpremul' (1004,17)-(1004,24)
                                    ): ')' (1004,24)-(1004,25)
                                  ): ')' (1004,25)-(1004,26)
                                compound_statement (1004,27)-(1021,5)
                                  {: '{' (1004,27)-(1004,28)
                                  comment: '/*
			     * Left over fraction of repeated string.
			     */' (1005,8)-(1007,11)
                                  expression_statement (1008,8)-(1008,26)
                                    call_expression (1008,8)-(1008,25)
                                      identifier: 'MB_METACHARINIT' (1008,8)-(1008,23)
                                      argument_list (1008,23)-(1008,25)
                                        (: '(' (1008,23)-(1008,24)
                                        ): ')' (1008,24)-(1008,25)
                                    ;: ';' (1008,25)-(1008,26)
                                  comment: '/* Skip this much. */' (1009,8)-(1009,29)
                                  expression_statement (1010,8)-(1010,24)
                                    assignment_expression (1010,8)-(1010,23)
                                      identifier: 'm' (1010,8)-(1010,9)
                                      =: '=' (1010,10)-(1010,11)
                                      binary_expression (1010,12)-(1010,23)
                                        identifier: 'lpremul' (1010,12)-(1010,19)
                                        -: '-' (1010,20)-(1010,21)
                                        identifier: 'm' (1010,22)-(1010,23)
                                    ;: ';' (1010,23)-(1010,24)
                                  for_statement (1011,8)-(1017,9)
                                    for: 'for' (1011,8)-(1011,11)
                                    (: '(' (1011,12)-(1011,13)
                                    assignment_expression (1011,13)-(1011,23)
                                      identifier: 't' (1011,13)-(1011,14)
                                      =: '=' (1011,15)-(1011,16)
                                      identifier: 'premul' (1011,17)-(1011,23)
                                    ;: ';' (1011,23)-(1011,24)
                                    binary_expression (1011,25)-(1011,30)
                                      identifier: 'm' (1011,25)-(1011,26)
                                      >: '>' (1011,27)-(1011,28)
                                      number_literal: '0' (1011,29)-(1011,30)
                                    ;: ';' (1011,30)-(1011,31)
                                    ): ')' (1011,32)-(1011,33)
                                    compound_statement (1011,34)-(1017,9)
                                      {: '{' (1011,34)-(1011,35)
                                      expression_statement (1012,5)-(1012,40)
                                        assignment_expression (1012,5)-(1012,39)
                                          identifier: 'cl' (1012,5)-(1012,7)
                                          =: '=' (1012,8)-(1012,9)
                                          call_expression (1012,10)-(1012,39)
                                            identifier: 'MB_METACHARLENCONV' (1012,10)-(1012,28)
                                            argument_list (1012,28)-(1012,39)
                                              (: '(' (1012,28)-(1012,29)
                                              identifier: 't' (1012,29)-(1012,30)
                                              ,: ',' (1012,30)-(1012,31)
                                              pointer_expression (1012,32)-(1012,38)
                                                &: '&' (1012,32)-(1012,33)
                                                identifier: 'cchar' (1012,33)-(1012,38)
                                              ): ')' (1012,38)-(1012,39)
                                        ;: ';' (1012,39)-(1012,40)
                                      if_statement (1013,5)-(1014,15)
                                        if: 'if' (1013,5)-(1013,7)
                                        parenthesized_expression (1013,8)-(1013,13)
                                          (: '(' (1013,8)-(1013,9)
                                          unary_expression (1013,9)-(1013,12)
                                            !: '!' (1013,9)-(1013,10)
                                            identifier: 'cl' (1013,10)-(1013,12)
                                          ): ')' (1013,12)-(1013,13)
                                        break_statement (1014,9)-(1014,15)
                                          break: 'break' (1014,9)-(1014,14)
                                          ;: ';' (1014,14)-(1014,15)
                                      expression_statement (1015,5)-(1015,13)
                                        assignment_expression (1015,5)-(1015,12)
                                          identifier: 't' (1015,5)-(1015,6)
                                          +=: '+=' (1015,7)-(1015,9)
                                          identifier: 'cl' (1015,10)-(1015,12)
                                        ;: ';' (1015,12)-(1015,13)
                                      expression_statement (1016,5)-(1016,41)
                                        assignment_expression (1016,5)-(1016,40)
                                          identifier: 'm' (1016,5)-(1016,6)
                                          -=: '-=' (1016,7)-(1016,9)
                                          call_expression (1016,10)-(1016,40)
                                            identifier: 'WCPADWIDTH' (1016,10)-(1016,20)
                                            argument_list (1016,20)-(1016,40)
                                              (: '(' (1016,20)-(1016,21)
                                              identifier: 'cchar' (1016,21)-(1016,26)
                                              ,: ',' (1016,26)-(1016,27)
                                              identifier: 'multi_width' (1016,28)-(1016,39)
                                              ): ')' (1016,39)-(1016,40)
                                        ;: ';' (1016,40)-(1016,41)
                                      }: '}' (1017,8)-(1017,9)
                                  comment: '/* Output the rest. */' (1018,8)-(1018,30)
                                  while_statement (1019,8)-(1020,17)
                                    while: 'while' (1019,8)-(1019,13)
                                    parenthesized_expression (1019,14)-(1019,18)
                                      (: '(' (1019,14)-(1019,15)
                                      pointer_expression (1019,15)-(1019,17)
                                        *: '*' (1019,15)-(1019,16)
                                        identifier: 't' (1019,16)-(1019,17)
                                      ): ')' (1019,17)-(1019,18)
                                    expression_statement (1020,5)-(1020,17)
                                      assignment_expression (1020,5)-(1020,16)
                                        pointer_expression (1020,5)-(1020,9)
                                          *: '*' (1020,5)-(1020,6)
                                          update_expression (1020,6)-(1020,9)
                                            identifier: 'r' (1020,6)-(1020,7)
                                            ++: '++' (1020,7)-(1020,9)
                                        =: '=' (1020,10)-(1020,11)
                                        pointer_expression (1020,12)-(1020,16)
                                          *: '*' (1020,12)-(1020,13)
                                          update_expression (1020,13)-(1020,16)
                                            identifier: 't' (1020,13)-(1020,14)
                                            ++: '++' (1020,14)-(1020,16)
                                      ;: ';' (1020,16)-(1020,17)
                                  }: '}' (1021,4)-(1021,5)
                              for_statement (1022,4)-(1033,5)
                                for: 'for' (1022,4)-(1022,7)
                                (: '(' (1022,8)-(1022,9)
                                assignment_expression (1022,9)-(1022,25)
                                  identifier: 'cc' (1022,9)-(1022,11)
                                  =: '=' (1022,12)-(1022,13)
                                  binary_expression (1022,14)-(1022,25)
                                    identifier: 'f' (1022,14)-(1022,15)
                                    /: '/' (1022,16)-(1022,17)
                                    identifier: 'lpremul' (1022,18)-(1022,25)
                                ;: ';' (1022,25)-(1022,26)
                                update_expression (1022,27)-(1022,31)
                                  identifier: 'cc' (1022,27)-(1022,29)
                                  --: '--' (1022,29)-(1022,31)
                                ;: ';' (1022,31)-(1022,32)
                                ): ')' (1022,32)-(1022,33)
                                compound_statement (1022,34)-(1033,5)
                                  {: '{' (1022,34)-(1022,35)
                                  comment: '/* Repeat the repeated string */' (1023,8)-(1023,40)
                                  expression_statement (1024,8)-(1024,26)
                                    call_expression (1024,8)-(1024,25)
                                      identifier: 'MB_METACHARINIT' (1024,8)-(1024,23)
                                      argument_list (1024,23)-(1024,25)
                                        (: '(' (1024,23)-(1024,24)
                                        ): ')' (1024,24)-(1024,25)
                                    ;: ';' (1024,25)-(1024,26)
                                  for_statement (1025,8)-(1032,9)
                                    for: 'for' (1025,8)-(1025,11)
                                    (: '(' (1025,12)-(1025,13)
                                    comma_expression (1025,13)-(1025,36)
                                      assignment_expression (1025,13)-(1025,24)
                                        identifier: 'c' (1025,13)-(1025,14)
                                        =: '=' (1025,15)-(1025,16)
                                        identifier: 'lpremul' (1025,17)-(1025,24)
                                      ,: ',' (1025,24)-(1025,25)
                                      assignment_expression (1025,26)-(1025,36)
                                        identifier: 't' (1025,26)-(1025,27)
                                        =: '=' (1025,28)-(1025,29)
                                        identifier: 'premul' (1025,30)-(1025,36)
                                    ;: ';' (1025,36)-(1025,37)
                                    binary_expression (1025,38)-(1025,43)
                                      identifier: 'c' (1025,38)-(1025,39)
                                      >: '>' (1025,40)-(1025,41)
                                      number_literal: '0' (1025,42)-(1025,43)
                                    ;: ';' (1025,43)-(1025,44)
                                    ): ')' (1025,45)-(1025,46)
                                    compound_statement (1025,47)-(1032,9)
                                      {: '{' (1025,47)-(1025,48)
                                      expression_statement (1026,5)-(1026,40)
                                        assignment_expression (1026,5)-(1026,39)
                                          identifier: 'cl' (1026,5)-(1026,7)
                                          =: '=' (1026,8)-(1026,9)
                                          call_expression (1026,10)-(1026,39)
                                            identifier: 'MB_METACHARLENCONV' (1026,10)-(1026,28)
                                            argument_list (1026,28)-(1026,39)
                                              (: '(' (1026,28)-(1026,29)
                                              identifier: 't' (1026,29)-(1026,30)
                                              ,: ',' (1026,30)-(1026,31)
                                              pointer_expression (1026,32)-(1026,38)
                                                &: '&' (1026,32)-(1026,33)
                                                identifier: 'cchar' (1026,33)-(1026,38)
                                              ): ')' (1026,38)-(1026,39)
                                        ;: ';' (1026,39)-(1026,40)
                                      if_statement (1027,5)-(1028,15)
                                        if: 'if' (1027,5)-(1027,7)
                                        parenthesized_expression (1027,8)-(1027,13)
                                          (: '(' (1027,8)-(1027,9)
                                          unary_expression (1027,9)-(1027,12)
                                            !: '!' (1027,9)-(1027,10)
                                            identifier: 'cl' (1027,10)-(1027,12)
                                          ): ')' (1027,12)-(1027,13)
                                        break_statement (1028,9)-(1028,15)
                                          break: 'break' (1028,9)-(1028,14)
                                          ;: ';' (1028,14)-(1028,15)
                                      while_statement (1029,5)-(1030,21)
                                        while: 'while' (1029,5)-(1029,10)
                                        parenthesized_expression (1029,11)-(1029,17)
                                          (: '(' (1029,11)-(1029,12)
                                          update_expression (1029,12)-(1029,16)
                                            identifier: 'cl' (1029,12)-(1029,14)
                                            --: '--' (1029,14)-(1029,16)
                                          ): ')' (1029,16)-(1029,17)
                                        expression_statement (1030,9)-(1030,21)
                                          assignment_expression (1030,9)-(1030,20)
                                            pointer_expression (1030,9)-(1030,13)
                                              *: '*' (1030,9)-(1030,10)
                                              update_expression (1030,10)-(1030,13)
                                                identifier: 'r' (1030,10)-(1030,11)
                                                ++: '++' (1030,11)-(1030,13)
                                            =: '=' (1030,14)-(1030,15)
                                            pointer_expression (1030,16)-(1030,20)
                                              *: '*' (1030,16)-(1030,17)
                                              update_expression (1030,17)-(1030,20)
                                                identifier: 't' (1030,17)-(1030,18)
                                                ++: '++' (1030,18)-(1030,20)
                                          ;: ';' (1030,20)-(1030,21)
                                      expression_statement (1031,5)-(1031,41)
                                        assignment_expression (1031,5)-(1031,40)
                                          identifier: 'c' (1031,5)-(1031,6)
                                          -=: '-=' (1031,7)-(1031,9)
                                          call_expression (1031,10)-(1031,40)
                                            identifier: 'WCPADWIDTH' (1031,10)-(1031,20)
                                            argument_list (1031,20)-(1031,40)
                                              (: '(' (1031,20)-(1031,21)
                                              identifier: 'cchar' (1031,21)-(1031,26)
                                              ,: ',' (1031,26)-(1031,27)
                                              identifier: 'multi_width' (1031,28)-(1031,39)
                                              ): ')' (1031,39)-(1031,40)
                                        ;: ';' (1031,40)-(1031,41)
                                      }: '}' (1032,8)-(1032,9)
                                  }: '}' (1033,4)-(1033,5)
                              }: '}' (1034,7)-(1034,8)
                          if_statement (1035,7)-(1039,8)
                            if: 'if' (1035,7)-(1035,9)
                            parenthesized_expression (1035,10)-(1035,18)
                              (: '(' (1035,10)-(1035,11)
                              identifier: 'preone' (1035,11)-(1035,17)
                              ): ')' (1035,17)-(1035,18)
                            compound_statement (1035,19)-(1039,8)
                              {: '{' (1035,19)-(1035,20)
                              comment: '/* Output the full unrepeated string */' (1036,4)-(1036,43)
                              while_statement (1037,4)-(1038,25)
                                while: 'while' (1037,4)-(1037,9)
                                parenthesized_expression (1037,10)-(1037,19)
                                  (: '(' (1037,10)-(1037,11)
                                  pointer_expression (1037,11)-(1037,18)
                                    *: '*' (1037,11)-(1037,12)
                                    identifier: 'preone' (1037,12)-(1037,18)
                                  ): ')' (1037,18)-(1037,19)
                                expression_statement (1038,8)-(1038,25)
                                  assignment_expression (1038,8)-(1038,24)
                                    pointer_expression (1038,8)-(1038,12)
                                      *: '*' (1038,8)-(1038,9)
                                      update_expression (1038,9)-(1038,12)
                                        identifier: 'r' (1038,9)-(1038,10)
                                        ++: '++' (1038,10)-(1038,12)
                                    =: '=' (1038,13)-(1038,14)
                                    pointer_expression (1038,15)-(1038,24)
                                      *: '*' (1038,15)-(1038,16)
                                      update_expression (1038,16)-(1038,24)
                                        identifier: 'preone' (1038,16)-(1038,22)
                                        ++: '++' (1038,22)-(1038,24)
                                  ;: ';' (1038,24)-(1038,25)
                              }: '}' (1039,7)-(1039,8)
                          }: '}' (1040,3)-(1040,4)
                    comment: '/* Output the first half width of the original string. */' (1041,3)-(1041,60)
                    for_statement (1042,3)-(1049,4)
                      for: 'for' (1042,3)-(1042,6)
                      (: '(' (1042,7)-(1042,8)
                      assignment_expression (1042,8)-(1042,15)
                        identifier: 'c' (1042,8)-(1042,9)
                        =: '=' (1042,10)-(1042,11)
                        identifier: 'ls2' (1042,12)-(1042,15)
                      ;: ';' (1042,15)-(1042,16)
                      binary_expression (1042,17)-(1042,22)
                        identifier: 'c' (1042,17)-(1042,18)
                        >: '>' (1042,19)-(1042,20)
                        number_literal: '0' (1042,21)-(1042,22)
                      ;: ';' (1042,22)-(1042,23)
                      ): ')' (1042,24)-(1042,25)
                      compound_statement (1042,26)-(1049,4)
                        {: '{' (1042,26)-(1042,27)
                        expression_statement (1043,7)-(1043,44)
                          assignment_expression (1043,7)-(1043,43)
                            identifier: 'cl' (1043,7)-(1043,9)
                            =: '=' (1043,10)-(1043,11)
                            call_expression (1043,12)-(1043,43)
                              identifier: 'MB_METACHARLENCONV' (1043,12)-(1043,30)
                              argument_list (1043,30)-(1043,43)
                                (: '(' (1043,30)-(1043,31)
                                identifier: 'str' (1043,31)-(1043,34)
                                ,: ',' (1043,34)-(1043,35)
                                pointer_expression (1043,36)-(1043,42)
                                  &: '&' (1043,36)-(1043,37)
                                  identifier: 'cchar' (1043,37)-(1043,42)
                                ): ')' (1043,42)-(1043,43)
                          ;: ';' (1043,43)-(1043,44)
                        if_statement (1044,7)-(1045,10)
                          if: 'if' (1044,7)-(1044,9)
                          parenthesized_expression (1044,10)-(1044,15)
                            (: '(' (1044,10)-(1044,11)
                            unary_expression (1044,11)-(1044,14)
                              !: '!' (1044,11)-(1044,12)
                              identifier: 'cl' (1044,12)-(1044,14)
                            ): ')' (1044,14)-(1044,15)
                          break_statement (1045,4)-(1045,10)
                            break: 'break' (1045,4)-(1045,9)
                            ;: ';' (1045,9)-(1045,10)
                        expression_statement (1046,7)-(1046,43)
                          assignment_expression (1046,7)-(1046,42)
                            identifier: 'c' (1046,7)-(1046,8)
                            -=: '-=' (1046,9)-(1046,11)
                            call_expression (1046,12)-(1046,42)
                              identifier: 'WCPADWIDTH' (1046,12)-(1046,22)
                              argument_list (1046,22)-(1046,42)
                                (: '(' (1046,22)-(1046,23)
                                identifier: 'cchar' (1046,23)-(1046,28)
                                ,: ',' (1046,28)-(1046,29)
                                identifier: 'multi_width' (1046,30)-(1046,41)
                                ): ')' (1046,41)-(1046,42)
                          ;: ';' (1046,42)-(1046,43)
                        while_statement (1047,7)-(1048,18)
                          while: 'while' (1047,7)-(1047,12)
                          parenthesized_expression (1047,13)-(1047,19)
                            (: '(' (1047,13)-(1047,14)
                            update_expression (1047,14)-(1047,18)
                              identifier: 'cl' (1047,14)-(1047,16)
                              --: '--' (1047,16)-(1047,18)
                            ): ')' (1047,18)-(1047,19)
                          expression_statement (1048,4)-(1048,18)
                            assignment_expression (1048,4)-(1048,17)
                              pointer_expression (1048,4)-(1048,8)
                                *: '*' (1048,4)-(1048,5)
                                update_expression (1048,5)-(1048,8)
                                  identifier: 'r' (1048,5)-(1048,6)
                                  ++: '++' (1048,6)-(1048,8)
                              =: '=' (1048,9)-(1048,10)
                              pointer_expression (1048,11)-(1048,17)
                                *: '*' (1048,11)-(1048,12)
                                update_expression (1048,12)-(1048,17)
                                  identifier: 'str' (1048,12)-(1048,15)
                                  ++: '++' (1048,15)-(1048,17)
                            ;: ';' (1048,17)-(1048,18)
                        }: '}' (1049,3)-(1049,4)
                    }: '}' (1050,6)-(1050,7)
              comment: '/* Other half.  In case the string had an odd length... */' (1051,6)-(1051,64)
              expression_statement (1052,6)-(1052,21)
                assignment_expression (1052,6)-(1052,20)
                  identifier: 'ls2' (1052,6)-(1052,9)
                  =: '=' (1052,10)-(1052,11)
                  binary_expression (1052,12)-(1052,20)
                    identifier: 'ls' (1052,12)-(1052,14)
                    -: '-' (1052,15)-(1052,16)
                    identifier: 'ls2' (1052,17)-(1052,20)
                ;: ';' (1052,20)-(1052,21)
              comment: '/* Width that needs padding... */' (1053,6)-(1053,39)
              expression_statement (1054,6)-(1054,24)
                assignment_expression (1054,6)-(1054,23)
                  identifier: 'f' (1054,6)-(1054,7)
                  =: '=' (1054,8)-(1054,9)
                  binary_expression (1054,10)-(1054,23)
                    identifier: 'postnum' (1054,10)-(1054,17)
                    -: '-' (1054,18)-(1054,19)
                    identifier: 'ls2' (1054,20)-(1054,23)
                ;: ';' (1054,23)-(1054,24)
              if_statement (1055,6)-(1109,7)
                if: 'if' (1055,6)-(1055,8)
                parenthesized_expression (1055,9)-(1055,17)
                  (: '(' (1055,9)-(1055,10)
                  binary_expression (1055,10)-(1055,16)
                    identifier: 'f' (1055,10)-(1055,11)
                    <=: '<=' (1055,12)-(1055,14)
                    number_literal: '0' (1055,15)-(1055,16)
                  ): ')' (1055,16)-(1055,17)
                compound_statement (1055,18)-(1066,7)
                  {: '{' (1055,18)-(1055,19)
                  comment: '/* ...is negative, truncate original string */' (1056,3)-(1056,49)
                  expression_statement (1057,3)-(1057,21)
                    call_expression (1057,3)-(1057,20)
                      identifier: 'MB_METACHARINIT' (1057,3)-(1057,18)
                      argument_list (1057,18)-(1057,20)
                        (: '(' (1057,18)-(1057,19)
                        ): ')' (1057,19)-(1057,20)
                    ;: ';' (1057,20)-(1057,21)
                  for_statement (1058,3)-(1065,4)
                    for: 'for' (1058,3)-(1058,6)
                    (: '(' (1058,7)-(1058,8)
                    assignment_expression (1058,8)-(1058,19)
                      identifier: 'c' (1058,8)-(1058,9)
                      =: '=' (1058,10)-(1058,11)
                      identifier: 'postnum' (1058,12)-(1058,19)
                    ;: ';' (1058,19)-(1058,20)
                    binary_expression (1058,21)-(1058,26)
                      identifier: 'c' (1058,21)-(1058,22)
                      >: '>' (1058,23)-(1058,24)
                      number_literal: '0' (1058,25)-(1058,26)
                    ;: ';' (1058,26)-(1058,27)
                    ): ')' (1058,28)-(1058,29)
                    compound_statement (1058,30)-(1065,4)
                      {: '{' (1058,30)-(1058,31)
                      expression_statement (1059,7)-(1059,44)
                        assignment_expression (1059,7)-(1059,43)
                          identifier: 'cl' (1059,7)-(1059,9)
                          =: '=' (1059,10)-(1059,11)
                          call_expression (1059,12)-(1059,43)
                            identifier: 'MB_METACHARLENCONV' (1059,12)-(1059,30)
                            argument_list (1059,30)-(1059,43)
                              (: '(' (1059,30)-(1059,31)
                              identifier: 'str' (1059,31)-(1059,34)
                              ,: ',' (1059,34)-(1059,35)
                              pointer_expression (1059,36)-(1059,42)
                                &: '&' (1059,36)-(1059,37)
                                identifier: 'cchar' (1059,37)-(1059,42)
                              ): ')' (1059,42)-(1059,43)
                        ;: ';' (1059,43)-(1059,44)
                      if_statement (1060,7)-(1061,10)
                        if: 'if' (1060,7)-(1060,9)
                        parenthesized_expression (1060,10)-(1060,15)
                          (: '(' (1060,10)-(1060,11)
                          unary_expression (1060,11)-(1060,14)
                            !: '!' (1060,11)-(1060,12)
                            identifier: 'cl' (1060,12)-(1060,14)
                          ): ')' (1060,14)-(1060,15)
                        break_statement (1061,4)-(1061,10)
                          break: 'break' (1061,4)-(1061,9)
                          ;: ';' (1061,9)-(1061,10)
                      expression_statement (1062,7)-(1062,43)
                        assignment_expression (1062,7)-(1062,42)
                          identifier: 'c' (1062,7)-(1062,8)
                          -=: '-=' (1062,9)-(1062,11)
                          call_expression (1062,12)-(1062,42)
                            identifier: 'WCPADWIDTH' (1062,12)-(1062,22)
                            argument_list (1062,22)-(1062,42)
                              (: '(' (1062,22)-(1062,23)
                              identifier: 'cchar' (1062,23)-(1062,28)
                              ,: ',' (1062,28)-(1062,29)
                              identifier: 'multi_width' (1062,30)-(1062,41)
                              ): ')' (1062,41)-(1062,42)
                        ;: ';' (1062,42)-(1062,43)
                      while_statement (1063,7)-(1064,18)
                        while: 'while' (1063,7)-(1063,12)
                        parenthesized_expression (1063,13)-(1063,19)
                          (: '(' (1063,13)-(1063,14)
                          update_expression (1063,14)-(1063,18)
                            identifier: 'cl' (1063,14)-(1063,16)
                            --: '--' (1063,16)-(1063,18)
                          ): ')' (1063,18)-(1063,19)
                        expression_statement (1064,4)-(1064,18)
                          assignment_expression (1064,4)-(1064,17)
                            pointer_expression (1064,4)-(1064,8)
                              *: '*' (1064,4)-(1064,5)
                              update_expression (1064,5)-(1064,8)
                                identifier: 'r' (1064,5)-(1064,6)
                                ++: '++' (1064,6)-(1064,8)
                            =: '=' (1064,9)-(1064,10)
                            pointer_expression (1064,11)-(1064,17)
                              *: '*' (1064,11)-(1064,12)
                              update_expression (1064,12)-(1064,17)
                                identifier: 'str' (1064,12)-(1064,15)
                                ++: '++' (1064,15)-(1064,17)
                          ;: ';' (1064,17)-(1064,18)
                      }: '}' (1065,3)-(1065,4)
                  }: '}' (1066,6)-(1066,7)
                else_clause (1066,8)-(1109,7)
                  else: 'else' (1066,8)-(1066,12)
                  compound_statement (1066,13)-(1109,7)
                    {: '{' (1066,13)-(1066,14)
                    comment: '/* Rest of original string fits, output it complete */' (1067,3)-(1067,57)
                    while_statement (1068,3)-(1069,21)
                      while: 'while' (1068,3)-(1068,8)
                      parenthesized_expression (1068,9)-(1068,15)
                        (: '(' (1068,9)-(1068,10)
                        pointer_expression (1068,10)-(1068,14)
                          *: '*' (1068,10)-(1068,11)
                          identifier: 'str' (1068,11)-(1068,14)
                        ): ')' (1068,14)-(1068,15)
                      expression_statement (1069,7)-(1069,21)
                        assignment_expression (1069,7)-(1069,20)
                          pointer_expression (1069,7)-(1069,11)
                            *: '*' (1069,7)-(1069,8)
                            update_expression (1069,8)-(1069,11)
                              identifier: 'r' (1069,8)-(1069,9)
                              ++: '++' (1069,9)-(1069,11)
                          =: '=' (1069,12)-(1069,13)
                          pointer_expression (1069,14)-(1069,20)
                            *: '*' (1069,14)-(1069,15)
                            update_expression (1069,15)-(1069,20)
                              identifier: 'str' (1069,15)-(1069,18)
                              ++: '++' (1069,18)-(1069,20)
                        ;: ';' (1069,20)-(1069,21)
                    if_statement (1070,3)-(1108,4)
                      if: 'if' (1070,3)-(1070,5)
                      parenthesized_expression (1070,6)-(1070,21)
                        (: '(' (1070,6)-(1070,7)
                        binary_expression (1070,7)-(1070,20)
                          identifier: 'f' (1070,7)-(1070,8)
                          <=: '<=' (1070,9)-(1070,11)
                          identifier: 'lpostone' (1070,12)-(1070,20)
                        ): ')' (1070,20)-(1070,21)
                      compound_statement (1070,22)-(1082,4)
                        {: '{' (1070,22)-(1070,23)
                        if_statement (1071,7)-(1081,8)
                          if: 'if' (1071,7)-(1071,9)
                          parenthesized_expression (1071,10)-(1071,19)
                            (: '(' (1071,10)-(1071,11)
                            identifier: 'postone' (1071,11)-(1071,18)
                            ): ')' (1071,18)-(1071,19)
                          compound_statement (1071,20)-(1081,8)
                            {: '{' (1071,20)-(1071,21)
                            comment: '/* Can't fit unrepeated string, truncate it */' (1072,4)-(1072,50)
                            for_statement (1073,4)-(1080,5)
                              for: 'for' (1073,4)-(1073,7)
                              (: '(' (1073,8)-(1073,9)
                              assignment_expression (1073,9)-(1073,14)
                                identifier: 'c' (1073,9)-(1073,10)
                                =: '=' (1073,11)-(1073,12)
                                identifier: 'f' (1073,13)-(1073,14)
                              ;: ';' (1073,14)-(1073,15)
                              binary_expression (1073,16)-(1073,21)
                                identifier: 'c' (1073,16)-(1073,17)
                                >: '>' (1073,18)-(1073,19)
                                number_literal: '0' (1073,20)-(1073,21)
                              ;: ';' (1073,21)-(1073,22)
                              ): ')' (1073,23)-(1073,24)
                              compound_statement (1073,25)-(1080,5)
                                {: '{' (1073,25)-(1073,26)
                                expression_statement (1074,8)-(1074,49)
                                  assignment_expression (1074,8)-(1074,48)
                                    identifier: 'cl' (1074,8)-(1074,10)
                                    =: '=' (1074,11)-(1074,12)
                                    call_expression (1074,13)-(1074,48)
                                      identifier: 'MB_METACHARLENCONV' (1074,13)-(1074,31)
                                      argument_list (1074,31)-(1074,48)
                                        (: '(' (1074,31)-(1074,32)
                                        identifier: 'postone' (1074,32)-(1074,39)
                                        ,: ',' (1074,39)-(1074,40)
                                        pointer_expression (1074,41)-(1074,47)
                                          &: '&' (1074,41)-(1074,42)
                                          identifier: 'cchar' (1074,42)-(1074,47)
                                        ): ')' (1074,47)-(1074,48)
                                  ;: ';' (1074,48)-(1074,49)
                                if_statement (1075,8)-(1076,11)
                                  if: 'if' (1075,8)-(1075,10)
                                  parenthesized_expression (1075,11)-(1075,16)
                                    (: '(' (1075,11)-(1075,12)
                                    unary_expression (1075,12)-(1075,15)
                                      !: '!' (1075,12)-(1075,13)
                                      identifier: 'cl' (1075,13)-(1075,15)
                                    ): ')' (1075,15)-(1075,16)
                                  break_statement (1076,5)-(1076,11)
                                    break: 'break' (1076,5)-(1076,10)
                                    ;: ';' (1076,10)-(1076,11)
                                expression_statement (1077,8)-(1077,44)
                                  assignment_expression (1077,8)-(1077,43)
                                    identifier: 'c' (1077,8)-(1077,9)
                                    -=: '-=' (1077,10)-(1077,12)
                                    call_expression (1077,13)-(1077,43)
                                      identifier: 'WCPADWIDTH' (1077,13)-(1077,23)
                                      argument_list (1077,23)-(1077,43)
                                        (: '(' (1077,23)-(1077,24)
                                        identifier: 'cchar' (1077,24)-(1077,29)
                                        ,: ',' (1077,29)-(1077,30)
                                        identifier: 'multi_width' (1077,31)-(1077,42)
                                        ): ')' (1077,42)-(1077,43)
                                  ;: ';' (1077,43)-(1077,44)
                                while_statement (1078,8)-(1079,23)
                                  while: 'while' (1078,8)-(1078,13)
                                  parenthesized_expression (1078,14)-(1078,20)
                                    (: '(' (1078,14)-(1078,15)
                                    update_expression (1078,15)-(1078,19)
                                      identifier: 'cl' (1078,15)-(1078,17)
                                      --: '--' (1078,17)-(1078,19)
                                    ): ')' (1078,19)-(1078,20)
                                  expression_statement (1079,5)-(1079,23)
                                    assignment_expression (1079,5)-(1079,22)
                                      pointer_expression (1079,5)-(1079,9)
                                        *: '*' (1079,5)-(1079,6)
                                        update_expression (1079,6)-(1079,9)
                                          identifier: 'r' (1079,6)-(1079,7)
                                          ++: '++' (1079,7)-(1079,9)
                                      =: '=' (1079,10)-(1079,11)
                                      pointer_expression (1079,12)-(1079,22)
                                        *: '*' (1079,12)-(1079,13)
                                        update_expression (1079,13)-(1079,22)
                                          identifier: 'postone' (1079,13)-(1079,20)
                                          ++: '++' (1079,20)-(1079,22)
                                    ;: ';' (1079,22)-(1079,23)
                                }: '}' (1080,4)-(1080,5)
                            }: '}' (1081,7)-(1081,8)
                        }: '}' (1082,3)-(1082,4)
                      else_clause (1082,5)-(1108,4)
                        else: 'else' (1082,5)-(1082,9)
                        compound_statement (1082,10)-(1108,4)
                          {: '{' (1082,10)-(1082,11)
                          if_statement (1083,7)-(1088,8)
                            if: 'if' (1083,7)-(1083,9)
                            parenthesized_expression (1083,10)-(1083,19)
                              (: '(' (1083,10)-(1083,11)
                              identifier: 'postone' (1083,11)-(1083,18)
                              ): ')' (1083,18)-(1083,19)
                            compound_statement (1083,20)-(1088,8)
                              {: '{' (1083,20)-(1083,21)
                              expression_statement (1084,4)-(1084,18)
                                assignment_expression (1084,4)-(1084,17)
                                  identifier: 'f' (1084,4)-(1084,5)
                                  -=: '-=' (1084,6)-(1084,8)
                                  identifier: 'lpostone' (1084,9)-(1084,17)
                                ;: ';' (1084,17)-(1084,18)
                              comment: '/* Output entire unrepeated string */' (1085,4)-(1085,41)
                              while_statement (1086,4)-(1087,26)
                                while: 'while' (1086,4)-(1086,9)
                                parenthesized_expression (1086,10)-(1086,20)
                                  (: '(' (1086,10)-(1086,11)
                                  pointer_expression (1086,11)-(1086,19)
                                    *: '*' (1086,11)-(1086,12)
                                    identifier: 'postone' (1086,12)-(1086,19)
                                  ): ')' (1086,19)-(1086,20)
                                expression_statement (1087,8)-(1087,26)
                                  assignment_expression (1087,8)-(1087,25)
                                    pointer_expression (1087,8)-(1087,12)
                                      *: '*' (1087,8)-(1087,9)
                                      update_expression (1087,9)-(1087,12)
                                        identifier: 'r' (1087,9)-(1087,10)
                                        ++: '++' (1087,10)-(1087,12)
                                    =: '=' (1087,13)-(1087,14)
                                    pointer_expression (1087,15)-(1087,25)
                                      *: '*' (1087,15)-(1087,16)
                                      update_expression (1087,16)-(1087,25)
                                        identifier: 'postone' (1087,16)-(1087,23)
                                        ++: '++' (1087,23)-(1087,25)
                                  ;: ';' (1087,25)-(1087,26)
                              }: '}' (1088,7)-(1088,8)
                          if_statement (1089,7)-(1107,8)
                            if: 'if' (1089,7)-(1089,9)
                            parenthesized_expression (1089,10)-(1089,20)
                              (: '(' (1089,10)-(1089,11)
                              identifier: 'lpostmul' (1089,11)-(1089,19)
                              ): ')' (1089,19)-(1089,20)
                            compound_statement (1089,21)-(1107,8)
                              {: '{' (1089,21)-(1089,22)
                              for_statement (1090,4)-(1094,5)
                                for: 'for' (1090,4)-(1090,7)
                                (: '(' (1090,8)-(1090,9)
                                assignment_expression (1090,9)-(1090,26)
                                  identifier: 'cc' (1090,9)-(1090,11)
                                  =: '=' (1090,12)-(1090,13)
                                  binary_expression (1090,14)-(1090,26)
                                    identifier: 'f' (1090,14)-(1090,15)
                                    /: '/' (1090,16)-(1090,17)
                                    identifier: 'lpostmul' (1090,18)-(1090,26)
                                ;: ';' (1090,26)-(1090,27)
                                update_expression (1090,28)-(1090,32)
                                  identifier: 'cc' (1090,28)-(1090,30)
                                  --: '--' (1090,30)-(1090,32)
                                ;: ';' (1090,32)-(1090,33)
                                ): ')' (1090,33)-(1090,34)
                                compound_statement (1090,35)-(1094,5)
                                  {: '{' (1090,35)-(1090,36)
                                  comment: '/* Begin the beguine */' (1091,8)-(1091,31)
                                  for_statement (1092,8)-(1093,17)
                                    for: 'for' (1092,8)-(1092,11)
                                    (: '(' (1092,12)-(1092,13)
                                    assignment_expression (1092,13)-(1092,24)
                                      identifier: 't' (1092,13)-(1092,14)
                                      =: '=' (1092,15)-(1092,16)
                                      identifier: 'postmul' (1092,17)-(1092,24)
                                    ;: ';' (1092,24)-(1092,25)
                                    pointer_expression (1092,26)-(1092,28)
                                      *: '*' (1092,26)-(1092,27)
                                      identifier: 't' (1092,27)-(1092,28)
                                    ;: ';' (1092,28)-(1092,29)
                                    ): ')' (1092,30)-(1092,31)
                                    expression_statement (1093,5)-(1093,17)
                                      assignment_expression (1093,5)-(1093,16)
                                        pointer_expression (1093,5)-(1093,9)
                                          *: '*' (1093,5)-(1093,6)
                                          update_expression (1093,6)-(1093,9)
                                            identifier: 'r' (1093,6)-(1093,7)
                                            ++: '++' (1093,7)-(1093,9)
                                        =: '=' (1093,10)-(1093,11)
                                        pointer_expression (1093,12)-(1093,16)
                                          *: '*' (1093,12)-(1093,13)
                                          update_expression (1093,13)-(1093,16)
                                            identifier: 't' (1093,13)-(1093,14)
                                            ++: '++' (1093,14)-(1093,16)
                                      ;: ';' (1093,16)-(1093,17)
                                  }: '}' (1094,4)-(1094,5)
                              if_statement (1095,4)-(1106,5)
                                if: 'if' (1095,4)-(1095,6)
                                parenthesized_expression (1095,7)-(1095,27)
                                  (: '(' (1095,7)-(1095,8)
                                  parenthesized_expression (1095,8)-(1095,26)
                                    (: '(' (1095,8)-(1095,9)
                                    assignment_expression (1095,9)-(1095,25)
                                      identifier: 'm' (1095,9)-(1095,10)
                                      =: '=' (1095,11)-(1095,12)
                                      binary_expression (1095,13)-(1095,25)
                                        identifier: 'f' (1095,13)-(1095,14)
                                        %: '%' (1095,15)-(1095,16)
                                        identifier: 'lpostmul' (1095,17)-(1095,25)
                                    ): ')' (1095,25)-(1095,26)
                                  ): ')' (1095,26)-(1095,27)
                                compound_statement (1095,28)-(1106,5)
                                  {: '{' (1095,28)-(1095,29)
                                  comment: '/* Fill leftovers with chunk of repeated string */' (1096,8)-(1096,58)
                                  expression_statement (1097,8)-(1097,26)
                                    call_expression (1097,8)-(1097,25)
                                      identifier: 'MB_METACHARINIT' (1097,8)-(1097,23)
                                      argument_list (1097,23)-(1097,25)
                                        (: '(' (1097,23)-(1097,24)
                                        ): ')' (1097,24)-(1097,25)
                                    ;: ';' (1097,25)-(1097,26)
                                  while_statement (1098,8)-(1105,9)
                                    while: 'while' (1098,8)-(1098,13)
                                    parenthesized_expression (1098,14)-(1098,21)
                                      (: '(' (1098,14)-(1098,15)
                                      binary_expression (1098,15)-(1098,20)
                                        identifier: 'm' (1098,15)-(1098,16)
                                        >: '>' (1098,17)-(1098,18)
                                        number_literal: '0' (1098,19)-(1098,20)
                                      ): ')' (1098,20)-(1098,21)
                                    compound_statement (1098,22)-(1105,9)
                                      {: '{' (1098,22)-(1098,23)
                                      expression_statement (1099,5)-(1099,46)
                                        assignment_expression (1099,5)-(1099,45)
                                          identifier: 'cl' (1099,5)-(1099,7)
                                          =: '=' (1099,8)-(1099,9)
                                          call_expression (1099,10)-(1099,45)
                                            identifier: 'MB_METACHARLENCONV' (1099,10)-(1099,28)
                                            argument_list (1099,28)-(1099,45)
                                              (: '(' (1099,28)-(1099,29)
                                              identifier: 'postmul' (1099,29)-(1099,36)
                                              ,: ',' (1099,36)-(1099,37)
                                              pointer_expression (1099,38)-(1099,44)
                                                &: '&' (1099,38)-(1099,39)
                                                identifier: 'cchar' (1099,39)-(1099,44)
                                              ): ')' (1099,44)-(1099,45)
                                        ;: ';' (1099,45)-(1099,46)
                                      if_statement (1100,5)-(1101,15)
                                        if: 'if' (1100,5)-(1100,7)
                                        parenthesized_expression (1100,8)-(1100,13)
                                          (: '(' (1100,8)-(1100,9)
                                          unary_expression (1100,9)-(1100,12)
                                            !: '!' (1100,9)-(1100,10)
                                            identifier: 'cl' (1100,10)-(1100,12)
                                          ): ')' (1100,12)-(1100,13)
                                        break_statement (1101,9)-(1101,15)
                                          break: 'break' (1101,9)-(1101,14)
                                          ;: ';' (1101,14)-(1101,15)
                                      expression_statement (1102,5)-(1102,41)
                                        assignment_expression (1102,5)-(1102,40)
                                          identifier: 'm' (1102,5)-(1102,6)
                                          -=: '-=' (1102,7)-(1102,9)
                                          call_expression (1102,10)-(1102,40)
                                            identifier: 'WCPADWIDTH' (1102,10)-(1102,20)
                                            argument_list (1102,20)-(1102,40)
                                              (: '(' (1102,20)-(1102,21)
                                              identifier: 'cchar' (1102,21)-(1102,26)
                                              ,: ',' (1102,26)-(1102,27)
                                              identifier: 'multi_width' (1102,28)-(1102,39)
                                              ): ')' (1102,39)-(1102,40)
                                        ;: ';' (1102,40)-(1102,41)
                                      while_statement (1103,5)-(1104,27)
                                        while: 'while' (1103,5)-(1103,10)
                                        parenthesized_expression (1103,11)-(1103,17)
                                          (: '(' (1103,11)-(1103,12)
                                          update_expression (1103,12)-(1103,16)
                                            identifier: 'cl' (1103,12)-(1103,14)
                                            --: '--' (1103,14)-(1103,16)
                                          ): ')' (1103,16)-(1103,17)
                                        expression_statement (1104,9)-(1104,27)
                                          assignment_expression (1104,9)-(1104,26)
                                            pointer_expression (1104,9)-(1104,13)
                                              *: '*' (1104,9)-(1104,10)
                                              update_expression (1104,10)-(1104,13)
                                                identifier: 'r' (1104,10)-(1104,11)
                                                ++: '++' (1104,11)-(1104,13)
                                            =: '=' (1104,14)-(1104,15)
                                            pointer_expression (1104,16)-(1104,26)
                                              *: '*' (1104,16)-(1104,17)
                                              update_expression (1104,17)-(1104,26)
                                                identifier: 'postmul' (1104,17)-(1104,24)
                                                ++: '++' (1104,24)-(1104,26)
                                          ;: ';' (1104,26)-(1104,27)
                                      }: '}' (1105,8)-(1105,9)
                                  }: '}' (1106,4)-(1106,5)
                              }: '}' (1107,7)-(1107,8)
                          }: '}' (1108,3)-(1108,4)
                    }: '}' (1109,6)-(1109,7)
              }: '}' (1110,2)-(1110,3)
            else_clause (1110,4)-(1234,3)
              else: 'else' (1110,4)-(1110,8)
              compound_statement (1110,9)-(1234,3)
                {: '{' (1110,9)-(1110,10)
                comment: '/*
	     * Pad only on the left.
	     */' (1111,6)-(1113,9)
                expression_statement (1114,6)-(1114,22)
                  assignment_expression (1114,6)-(1114,21)
                    identifier: 'f' (1114,6)-(1114,7)
                    =: '=' (1114,8)-(1114,9)
                    binary_expression (1114,10)-(1114,21)
                      identifier: 'prenum' (1114,10)-(1114,16)
                      -: '-' (1114,17)-(1114,18)
                      identifier: 'ls' (1114,19)-(1114,21)
                  ;: ';' (1114,21)-(1114,22)
                if_statement (1115,6)-(1233,7)
                  if: 'if' (1115,6)-(1115,8)
                  parenthesized_expression (1115,9)-(1115,17)
                    (: '(' (1115,9)-(1115,10)
                    binary_expression (1115,10)-(1115,16)
                      identifier: 'f' (1115,10)-(1115,11)
                      <=: '<=' (1115,12)-(1115,14)
                      number_literal: '0' (1115,15)-(1115,16)
                    ): ')' (1115,16)-(1115,17)
                  compound_statement (1115,18)-(1140,7)
                    {: '{' (1115,18)-(1115,19)
                    comment: '/*
		 * Original string is at least as wide as padding.
		 * Truncate original string to width.
		 * Truncate on left, so skip the characters we
		 * don't need.
		 */' (1116,3)-(1121,6)
                    expression_statement (1122,3)-(1122,10)
                      assignment_expression (1122,3)-(1122,9)
                        identifier: 'f' (1122,3)-(1122,4)
                        =: '=' (1122,5)-(1122,6)
                        unary_expression (1122,7)-(1122,9)
                          -: '-' (1122,7)-(1122,8)
                          identifier: 'f' (1122,8)-(1122,9)
                      ;: ';' (1122,9)-(1122,10)
                    expression_statement (1123,3)-(1123,21)
                      call_expression (1123,3)-(1123,20)
                        identifier: 'MB_METACHARINIT' (1123,3)-(1123,18)
                        argument_list (1123,18)-(1123,20)
                          (: '(' (1123,18)-(1123,19)
                          ): ')' (1123,19)-(1123,20)
                      ;: ';' (1123,20)-(1123,21)
                    while_statement (1124,3)-(1130,4)
                      while: 'while' (1124,3)-(1124,8)
                      parenthesized_expression (1124,9)-(1124,16)
                        (: '(' (1124,9)-(1124,10)
                        binary_expression (1124,10)-(1124,15)
                          identifier: 'f' (1124,10)-(1124,11)
                          >: '>' (1124,12)-(1124,13)
                          number_literal: '0' (1124,14)-(1124,15)
                        ): ')' (1124,15)-(1124,16)
                      compound_statement (1124,17)-(1130,4)
                        {: '{' (1124,17)-(1124,18)
                        expression_statement (1125,7)-(1125,44)
                          assignment_expression (1125,7)-(1125,43)
                            identifier: 'cl' (1125,7)-(1125,9)
                            =: '=' (1125,10)-(1125,11)
                            call_expression (1125,12)-(1125,43)
                              identifier: 'MB_METACHARLENCONV' (1125,12)-(1125,30)
                              argument_list (1125,30)-(1125,43)
                                (: '(' (1125,30)-(1125,31)
                                identifier: 'str' (1125,31)-(1125,34)
                                ,: ',' (1125,34)-(1125,35)
                                pointer_expression (1125,36)-(1125,42)
                                  &: '&' (1125,36)-(1125,37)
                                  identifier: 'cchar' (1125,37)-(1125,42)
                                ): ')' (1125,42)-(1125,43)
                          ;: ';' (1125,43)-(1125,44)
                        if_statement (1126,7)-(1127,10)
                          if: 'if' (1126,7)-(1126,9)
                          parenthesized_expression (1126,10)-(1126,15)
                            (: '(' (1126,10)-(1126,11)
                            unary_expression (1126,11)-(1126,14)
                              !: '!' (1126,11)-(1126,12)
                              identifier: 'cl' (1126,12)-(1126,14)
                            ): ')' (1126,14)-(1126,15)
                          break_statement (1127,4)-(1127,10)
                            break: 'break' (1127,4)-(1127,9)
                            ;: ';' (1127,9)-(1127,10)
                        expression_statement (1128,7)-(1128,17)
                          assignment_expression (1128,7)-(1128,16)
                            identifier: 'str' (1128,7)-(1128,10)
                            +=: '+=' (1128,11)-(1128,13)
                            identifier: 'cl' (1128,14)-(1128,16)
                          ;: ';' (1128,16)-(1128,17)
                        expression_statement (1129,7)-(1129,43)
                          assignment_expression (1129,7)-(1129,42)
                            identifier: 'f' (1129,7)-(1129,8)
                            -=: '-=' (1129,9)-(1129,11)
                            call_expression (1129,12)-(1129,42)
                              identifier: 'WCPADWIDTH' (1129,12)-(1129,22)
                              argument_list (1129,22)-(1129,42)
                                (: '(' (1129,22)-(1129,23)
                                identifier: 'cchar' (1129,23)-(1129,28)
                                ,: ',' (1129,28)-(1129,29)
                                identifier: 'multi_width' (1129,30)-(1129,41)
                                ): ')' (1129,41)-(1129,42)
                          ;: ';' (1129,42)-(1129,43)
                        }: '}' (1130,3)-(1130,4)
                    comment: '/* Copy the rest of the original string */' (1131,3)-(1131,45)
                    for_statement (1132,3)-(1139,4)
                      for: 'for' (1132,3)-(1132,6)
                      (: '(' (1132,7)-(1132,8)
                      assignment_expression (1132,8)-(1132,18)
                        identifier: 'c' (1132,8)-(1132,9)
                        =: '=' (1132,10)-(1132,11)
                        identifier: 'prenum' (1132,12)-(1132,18)
                      ;: ';' (1132,18)-(1132,19)
                      binary_expression (1132,20)-(1132,25)
                        identifier: 'c' (1132,20)-(1132,21)
                        >: '>' (1132,22)-(1132,23)
                        number_literal: '0' (1132,24)-(1132,25)
                      ;: ';' (1132,25)-(1132,26)
                      ): ')' (1132,27)-(1132,28)
                      compound_statement (1132,29)-(1139,4)
                        {: '{' (1132,29)-(1132,30)
                        expression_statement (1133,7)-(1133,44)
                          assignment_expression (1133,7)-(1133,43)
                            identifier: 'cl' (1133,7)-(1133,9)
                            =: '=' (1133,10)-(1133,11)
                            call_expression (1133,12)-(1133,43)
                              identifier: 'MB_METACHARLENCONV' (1133,12)-(1133,30)
                              argument_list (1133,30)-(1133,43)
                                (: '(' (1133,30)-(1133,31)
                                identifier: 'str' (1133,31)-(1133,34)
                                ,: ',' (1133,34)-(1133,35)
                                pointer_expression (1133,36)-(1133,42)
                                  &: '&' (1133,36)-(1133,37)
                                  identifier: 'cchar' (1133,37)-(1133,42)
                                ): ')' (1133,42)-(1133,43)
                          ;: ';' (1133,43)-(1133,44)
                        if_statement (1134,7)-(1135,10)
                          if: 'if' (1134,7)-(1134,9)
                          parenthesized_expression (1134,10)-(1134,15)
                            (: '(' (1134,10)-(1134,11)
                            unary_expression (1134,11)-(1134,14)
                              !: '!' (1134,11)-(1134,12)
                              identifier: 'cl' (1134,12)-(1134,14)
                            ): ')' (1134,14)-(1134,15)
                          break_statement (1135,4)-(1135,10)
                            break: 'break' (1135,4)-(1135,9)
                            ;: ';' (1135,9)-(1135,10)
                        while_statement (1136,7)-(1137,18)
                          while: 'while' (1136,7)-(1136,12)
                          parenthesized_expression (1136,13)-(1136,19)
                            (: '(' (1136,13)-(1136,14)
                            update_expression (1136,14)-(1136,18)
                              identifier: 'cl' (1136,14)-(1136,16)
                              --: '--' (1136,16)-(1136,18)
                            ): ')' (1136,18)-(1136,19)
                          expression_statement (1137,4)-(1137,18)
                            assignment_expression (1137,4)-(1137,17)
                              pointer_expression (1137,4)-(1137,8)
                                *: '*' (1137,4)-(1137,5)
                                update_expression (1137,5)-(1137,8)
                                  identifier: 'r' (1137,5)-(1137,6)
                                  ++: '++' (1137,6)-(1137,8)
                              =: '=' (1137,9)-(1137,10)
                              pointer_expression (1137,11)-(1137,17)
                                *: '*' (1137,11)-(1137,12)
                                update_expression (1137,12)-(1137,17)
                                  identifier: 'str' (1137,12)-(1137,15)
                                  ++: '++' (1137,15)-(1137,17)
                            ;: ';' (1137,17)-(1137,18)
                        expression_statement (1138,7)-(1138,43)
                          assignment_expression (1138,7)-(1138,42)
                            identifier: 'c' (1138,7)-(1138,8)
                            -=: '-=' (1138,9)-(1138,11)
                            call_expression (1138,12)-(1138,42)
                              identifier: 'WCPADWIDTH' (1138,12)-(1138,22)
                              argument_list (1138,22)-(1138,42)
                                (: '(' (1138,22)-(1138,23)
                                identifier: 'cchar' (1138,23)-(1138,28)
                                ,: ',' (1138,28)-(1138,29)
                                identifier: 'multi_width' (1138,30)-(1138,41)
                                ): ')' (1138,41)-(1138,42)
                          ;: ';' (1138,42)-(1138,43)
                        }: '}' (1139,3)-(1139,4)
                    }: '}' (1140,6)-(1140,7)
                  else_clause (1140,8)-(1233,7)
                    else: 'else' (1140,8)-(1140,12)
                    compound_statement (1140,13)-(1233,7)
                      {: '{' (1140,13)-(1140,14)
                      comment: '/*
		 * We can fit the entire string...
		 */' (1141,3)-(1143,6)
                      if_statement (1144,3)-(1229,4)
                        if: 'if' (1144,3)-(1144,5)
                        parenthesized_expression (1144,6)-(1144,20)
                          (: '(' (1144,6)-(1144,7)
                          binary_expression (1144,7)-(1144,19)
                            identifier: 'f' (1144,7)-(1144,8)
                            <=: '<=' (1144,9)-(1144,11)
                            identifier: 'lpreone' (1144,12)-(1144,19)
                          ): ')' (1144,19)-(1144,20)
                        compound_statement (1144,21)-(1168,4)
                          {: '{' (1144,21)-(1144,22)
                          if_statement (1145,7)-(1167,8)
                            if: 'if' (1145,7)-(1145,9)
                            parenthesized_expression (1145,10)-(1145,18)
                              (: '(' (1145,10)-(1145,11)
                              identifier: 'preone' (1145,11)-(1145,17)
                              ): ')' (1145,17)-(1145,18)
                            compound_statement (1145,19)-(1167,8)
                              {: '{' (1145,19)-(1145,20)
                              comment: '/*
			 * ...with some fraction of the unrepeated string.
			 */' (1146,4)-(1148,7)
                              comment: '/* We need this width of characters. */' (1149,4)-(1149,43)
                              expression_statement (1150,4)-(1150,10)
                                assignment_expression (1150,4)-(1150,9)
                                  identifier: 'c' (1150,4)-(1150,5)
                                  =: '=' (1150,6)-(1150,7)
                                  identifier: 'f' (1150,8)-(1150,9)
                                ;: ';' (1150,9)-(1150,10)
                              comment: '/*
			 * We therefore need to skip this width of
			 * characters.
			 */' (1151,4)-(1154,7)
                              expression_statement (1155,4)-(1155,20)
                                assignment_expression (1155,4)-(1155,19)
                                  identifier: 'f' (1155,4)-(1155,5)
                                  =: '=' (1155,6)-(1155,7)
                                  binary_expression (1155,8)-(1155,19)
                                    identifier: 'lpreone' (1155,8)-(1155,15)
                                    -: '-' (1155,16)-(1155,17)
                                    identifier: 'f' (1155,18)-(1155,19)
                                ;: ';' (1155,19)-(1155,20)
                              expression_statement (1156,4)-(1156,22)
                                call_expression (1156,4)-(1156,21)
                                  identifier: 'MB_METACHARINIT' (1156,4)-(1156,19)
                                  argument_list (1156,19)-(1156,21)
                                    (: '(' (1156,19)-(1156,20)
                                    ): ')' (1156,20)-(1156,21)
                                ;: ';' (1156,21)-(1156,22)
                              for_statement (1157,4)-(1163,5)
                                for: 'for' (1157,4)-(1157,7)
                                (: '(' (1157,8)-(1157,9)
                                assignment_expression (1157,9)-(1157,19)
                                  identifier: 't' (1157,9)-(1157,10)
                                  =: '=' (1157,11)-(1157,12)
                                  identifier: 'preone' (1157,13)-(1157,19)
                                ;: ';' (1157,19)-(1157,20)
                                binary_expression (1157,21)-(1157,26)
                                  identifier: 'f' (1157,21)-(1157,22)
                                  >: '>' (1157,23)-(1157,24)
                                  number_literal: '0' (1157,25)-(1157,26)
                                ;: ';' (1157,26)-(1157,27)
                                ): ')' (1157,28)-(1157,29)
                                compound_statement (1157,30)-(1163,5)
                                  {: '{' (1157,30)-(1157,31)
                                  expression_statement (1158,8)-(1158,43)
                                    assignment_expression (1158,8)-(1158,42)
                                      identifier: 'cl' (1158,8)-(1158,10)
                                      =: '=' (1158,11)-(1158,12)
                                      call_expression (1158,13)-(1158,42)
                                        identifier: 'MB_METACHARLENCONV' (1158,13)-(1158,31)
                                        argument_list (1158,31)-(1158,42)
                                          (: '(' (1158,31)-(1158,32)
                                          identifier: 't' (1158,32)-(1158,33)
                                          ,: ',' (1158,33)-(1158,34)
                                          pointer_expression (1158,35)-(1158,41)
                                            &: '&' (1158,35)-(1158,36)
                                            identifier: 'cchar' (1158,36)-(1158,41)
                                          ): ')' (1158,41)-(1158,42)
                                    ;: ';' (1158,42)-(1158,43)
                                  if_statement (1159,8)-(1160,11)
                                    if: 'if' (1159,8)-(1159,10)
                                    parenthesized_expression (1159,11)-(1159,16)
                                      (: '(' (1159,11)-(1159,12)
                                      unary_expression (1159,12)-(1159,15)
                                        !: '!' (1159,12)-(1159,13)
                                        identifier: 'cl' (1159,13)-(1159,15)
                                      ): ')' (1159,15)-(1159,16)
                                    break_statement (1160,5)-(1160,11)
                                      break: 'break' (1160,5)-(1160,10)
                                      ;: ';' (1160,10)-(1160,11)
                                  expression_statement (1161,8)-(1161,16)
                                    assignment_expression (1161,8)-(1161,15)
                                      identifier: 't' (1161,8)-(1161,9)
                                      +=: '+=' (1161,10)-(1161,12)
                                      identifier: 'cl' (1161,13)-(1161,15)
                                    ;: ';' (1161,15)-(1161,16)
                                  expression_statement (1162,8)-(1162,44)
                                    assignment_expression (1162,8)-(1162,43)
                                      identifier: 'f' (1162,8)-(1162,9)
                                      -=: '-=' (1162,10)-(1162,12)
                                      call_expression (1162,13)-(1162,43)
                                        identifier: 'WCPADWIDTH' (1162,13)-(1162,23)
                                        argument_list (1162,23)-(1162,43)
                                          (: '(' (1162,23)-(1162,24)
                                          identifier: 'cchar' (1162,24)-(1162,29)
                                          ,: ',' (1162,29)-(1162,30)
                                          identifier: 'multi_width' (1162,31)-(1162,42)
                                          ): ')' (1162,42)-(1162,43)
                                    ;: ';' (1162,43)-(1162,44)
                                  }: '}' (1163,4)-(1163,5)
                              comment: '/* Copy the rest of preone */' (1164,4)-(1164,33)
                              while_statement (1165,4)-(1166,20)
                                while: 'while' (1165,4)-(1165,9)
                                parenthesized_expression (1165,10)-(1165,14)
                                  (: '(' (1165,10)-(1165,11)
                                  pointer_expression (1165,11)-(1165,13)
                                    *: '*' (1165,11)-(1165,12)
                                    identifier: 't' (1165,12)-(1165,13)
                                  ): ')' (1165,13)-(1165,14)
                                expression_statement (1166,8)-(1166,20)
                                  assignment_expression (1166,8)-(1166,19)
                                    pointer_expression (1166,8)-(1166,12)
                                      *: '*' (1166,8)-(1166,9)
                                      update_expression (1166,9)-(1166,12)
                                        identifier: 'r' (1166,9)-(1166,10)
                                        ++: '++' (1166,10)-(1166,12)
                                    =: '=' (1166,13)-(1166,14)
                                    pointer_expression (1166,15)-(1166,19)
                                      *: '*' (1166,15)-(1166,16)
                                      update_expression (1166,16)-(1166,19)
                                        identifier: 't' (1166,16)-(1166,17)
                                        ++: '++' (1166,17)-(1166,19)
                                  ;: ';' (1166,19)-(1166,20)
                              }: '}' (1167,7)-(1167,8)
                          }: '}' (1168,3)-(1168,4)
                        else_clause (1168,5)-(1229,4)
                          else: 'else' (1168,5)-(1168,9)
                          compound_statement (1168,10)-(1229,4)
                            {: '{' (1168,10)-(1168,11)
                            comment: '/*
		     * We can fit the whole of preone, needing this width
		     * first
		     */' (1169,7)-(1172,10)
                            expression_statement (1173,7)-(1173,20)
                              assignment_expression (1173,7)-(1173,19)
                                identifier: 'f' (1173,7)-(1173,8)
                                -=: '-=' (1173,9)-(1173,11)
                                identifier: 'lpreone' (1173,12)-(1173,19)
                              ;: ';' (1173,19)-(1173,20)
                            if_statement (1174,7)-(1215,8)
                              if: 'if' (1174,7)-(1174,9)
                              parenthesized_expression (1174,10)-(1174,19)
                                (: '(' (1174,10)-(1174,11)
                                identifier: 'lpremul' (1174,11)-(1174,18)
                                ): ')' (1174,18)-(1174,19)
                              compound_statement (1174,20)-(1215,8)
                                {: '{' (1174,20)-(1174,21)
                                if_statement (1175,4)-(1200,5)
                                  if: 'if' (1175,4)-(1175,6)
                                  parenthesized_expression (1175,7)-(1175,26)
                                    (: '(' (1175,7)-(1175,8)
                                    parenthesized_expression (1175,8)-(1175,25)
                                      (: '(' (1175,8)-(1175,9)
                                      assignment_expression (1175,9)-(1175,24)
                                        identifier: 'm' (1175,9)-(1175,10)
                                        =: '=' (1175,11)-(1175,12)
                                        binary_expression (1175,13)-(1175,24)
                                          identifier: 'f' (1175,13)-(1175,14)
                                          %: '%' (1175,15)-(1175,16)
                                          identifier: 'lpremul' (1175,17)-(1175,24)
                                      ): ')' (1175,24)-(1175,25)
                                    ): ')' (1175,25)-(1175,26)
                                  compound_statement (1175,27)-(1200,5)
                                    {: '{' (1175,27)-(1175,28)
                                    comment: '/*
			     * Some fraction of the repeated string needed.
			     */' (1176,8)-(1178,11)
                                    comment: '/* Need this much... */' (1179,8)-(1179,31)
                                    expression_statement (1180,8)-(1180,14)
                                      assignment_expression (1180,8)-(1180,13)
                                        identifier: 'c' (1180,8)-(1180,9)
                                        =: '=' (1180,10)-(1180,11)
                                        identifier: 'm' (1180,12)-(1180,13)
                                      ;: ';' (1180,13)-(1180,14)
                                    comment: '/* ...skipping this much first. */' (1181,8)-(1181,42)
                                    expression_statement (1182,8)-(1182,24)
                                      assignment_expression (1182,8)-(1182,23)
                                        identifier: 'm' (1182,8)-(1182,9)
                                        =: '=' (1182,10)-(1182,11)
                                        binary_expression (1182,12)-(1182,23)
                                          identifier: 'lpremul' (1182,12)-(1182,19)
                                          -: '-' (1182,20)-(1182,21)
                                          identifier: 'm' (1182,22)-(1182,23)
                                      ;: ';' (1182,23)-(1182,24)
                                    expression_statement (1183,8)-(1183,26)
                                      call_expression (1183,8)-(1183,25)
                                        identifier: 'MB_METACHARINIT' (1183,8)-(1183,23)
                                        argument_list (1183,23)-(1183,25)
                                          (: '(' (1183,23)-(1183,24)
                                          ): ')' (1183,24)-(1183,25)
                                      ;: ';' (1183,25)-(1183,26)
                                    for_statement (1184,8)-(1190,9)
                                      for: 'for' (1184,8)-(1184,11)
                                      (: '(' (1184,12)-(1184,13)
                                      assignment_expression (1184,13)-(1184,23)
                                        identifier: 't' (1184,13)-(1184,14)
                                        =: '=' (1184,15)-(1184,16)
                                        identifier: 'premul' (1184,17)-(1184,23)
                                      ;: ';' (1184,23)-(1184,24)
                                      binary_expression (1184,25)-(1184,30)
                                        identifier: 'm' (1184,25)-(1184,26)
                                        >: '>' (1184,27)-(1184,28)
                                        number_literal: '0' (1184,29)-(1184,30)
                                      ;: ';' (1184,30)-(1184,31)
                                      ): ')' (1184,32)-(1184,33)
                                      compound_statement (1184,34)-(1190,9)
                                        {: '{' (1184,34)-(1184,35)
                                        expression_statement (1185,5)-(1185,40)
                                          assignment_expression (1185,5)-(1185,39)
                                            identifier: 'cl' (1185,5)-(1185,7)
                                            =: '=' (1185,8)-(1185,9)
                                            call_expression (1185,10)-(1185,39)
                                              identifier: 'MB_METACHARLENCONV' (1185,10)-(1185,28)
                                              argument_list (1185,28)-(1185,39)
                                                (: '(' (1185,28)-(1185,29)
                                                identifier: 't' (1185,29)-(1185,30)
                                                ,: ',' (1185,30)-(1185,31)
                                                pointer_expression (1185,32)-(1185,38)
                                                  &: '&' (1185,32)-(1185,33)
                                                  identifier: 'cchar' (1185,33)-(1185,38)
                                                ): ')' (1185,38)-(1185,39)
                                          ;: ';' (1185,39)-(1185,40)
                                        if_statement (1186,5)-(1187,15)
                                          if: 'if' (1186,5)-(1186,7)
                                          parenthesized_expression (1186,8)-(1186,13)
                                            (: '(' (1186,8)-(1186,9)
                                            unary_expression (1186,9)-(1186,12)
                                              !: '!' (1186,9)-(1186,10)
                                              identifier: 'cl' (1186,10)-(1186,12)
                                            ): ')' (1186,12)-(1186,13)
                                          break_statement (1187,9)-(1187,15)
                                            break: 'break' (1187,9)-(1187,14)
                                            ;: ';' (1187,14)-(1187,15)
                                        expression_statement (1188,5)-(1188,13)
                                          assignment_expression (1188,5)-(1188,12)
                                            identifier: 't' (1188,5)-(1188,6)
                                            +=: '+=' (1188,7)-(1188,9)
                                            identifier: 'cl' (1188,10)-(1188,12)
                                          ;: ';' (1188,12)-(1188,13)
                                        expression_statement (1189,5)-(1189,41)
                                          assignment_expression (1189,5)-(1189,40)
                                            identifier: 'm' (1189,5)-(1189,6)
                                            -=: '-=' (1189,7)-(1189,9)
                                            call_expression (1189,10)-(1189,40)
                                              identifier: 'WCPADWIDTH' (1189,10)-(1189,20)
                                              argument_list (1189,20)-(1189,40)
                                                (: '(' (1189,20)-(1189,21)
                                                identifier: 'cchar' (1189,21)-(1189,26)
                                                ,: ',' (1189,26)-(1189,27)
                                                identifier: 'multi_width' (1189,28)-(1189,39)
                                                ): ')' (1189,39)-(1189,40)
                                          ;: ';' (1189,40)-(1189,41)
                                        }: '}' (1190,8)-(1190,9)
                                    comment: '/* Now the rest of the repeated string. */' (1191,8)-(1191,50)
                                    while_statement (1192,8)-(1199,9)
                                      while: 'while' (1192,8)-(1192,13)
                                      parenthesized_expression (1192,14)-(1192,21)
                                        (: '(' (1192,14)-(1192,15)
                                        binary_expression (1192,15)-(1192,20)
                                          identifier: 'c' (1192,15)-(1192,16)
                                          >: '>' (1192,17)-(1192,18)
                                          number_literal: '0' (1192,19)-(1192,20)
                                        ): ')' (1192,20)-(1192,21)
                                      compound_statement (1192,22)-(1199,9)
                                        {: '{' (1192,22)-(1192,23)
                                        expression_statement (1193,5)-(1193,40)
                                          assignment_expression (1193,5)-(1193,39)
                                            identifier: 'cl' (1193,5)-(1193,7)
                                            =: '=' (1193,8)-(1193,9)
                                            call_expression (1193,10)-(1193,39)
                                              identifier: 'MB_METACHARLENCONV' (1193,10)-(1193,28)
                                              argument_list (1193,28)-(1193,39)
                                                (: '(' (1193,28)-(1193,29)
                                                identifier: 't' (1193,29)-(1193,30)
                                                ,: ',' (1193,30)-(1193,31)
                                                pointer_expression (1193,32)-(1193,38)
                                                  &: '&' (1193,32)-(1193,33)
                                                  identifier: 'cchar' (1193,33)-(1193,38)
                                                ): ')' (1193,38)-(1193,39)
                                          ;: ';' (1193,39)-(1193,40)
                                        if_statement (1194,5)-(1195,15)
                                          if: 'if' (1194,5)-(1194,7)
                                          parenthesized_expression (1194,8)-(1194,13)
                                            (: '(' (1194,8)-(1194,9)
                                            unary_expression (1194,9)-(1194,12)
                                              !: '!' (1194,9)-(1194,10)
                                              identifier: 'cl' (1194,10)-(1194,12)
                                            ): ')' (1194,12)-(1194,13)
                                          break_statement (1195,9)-(1195,15)
                                            break: 'break' (1195,9)-(1195,14)
                                            ;: ';' (1195,14)-(1195,15)
                                        while_statement (1196,5)-(1197,21)
                                          while: 'while' (1196,5)-(1196,10)
                                          parenthesized_expression (1196,11)-(1196,17)
                                            (: '(' (1196,11)-(1196,12)
                                            update_expression (1196,12)-(1196,16)
                                              identifier: 'cl' (1196,12)-(1196,14)
                                              --: '--' (1196,14)-(1196,16)
                                            ): ')' (1196,16)-(1196,17)
                                          expression_statement (1197,9)-(1197,21)
                                            assignment_expression (1197,9)-(1197,20)
                                              pointer_expression (1197,9)-(1197,13)
                                                *: '*' (1197,9)-(1197,10)
                                                update_expression (1197,10)-(1197,13)
                                                  identifier: 'r' (1197,10)-(1197,11)
                                                  ++: '++' (1197,11)-(1197,13)
                                              =: '=' (1197,14)-(1197,15)
                                              pointer_expression (1197,16)-(1197,20)
                                                *: '*' (1197,16)-(1197,17)
                                                update_expression (1197,17)-(1197,20)
                                                  identifier: 't' (1197,17)-(1197,18)
                                                  ++: '++' (1197,18)-(1197,20)
                                            ;: ';' (1197,20)-(1197,21)
                                        expression_statement (1198,5)-(1198,41)
                                          assignment_expression (1198,5)-(1198,40)
                                            identifier: 'c' (1198,5)-(1198,6)
                                            -=: '-=' (1198,7)-(1198,9)
                                            call_expression (1198,10)-(1198,40)
                                              identifier: 'WCPADWIDTH' (1198,10)-(1198,20)
                                              argument_list (1198,20)-(1198,40)
                                                (: '(' (1198,20)-(1198,21)
                                                identifier: 'cchar' (1198,21)-(1198,26)
                                                ,: ',' (1198,26)-(1198,27)
                                                identifier: 'multi_width' (1198,28)-(1198,39)
                                                ): ')' (1198,39)-(1198,40)
                                          ;: ';' (1198,40)-(1198,41)
                                        }: '}' (1199,8)-(1199,9)
                                    }: '}' (1200,4)-(1200,5)
                                for_statement (1201,4)-(1214,5)
                                  for: 'for' (1201,4)-(1201,7)
                                  (: '(' (1201,8)-(1201,9)
                                  assignment_expression (1201,9)-(1201,25)
                                    identifier: 'cc' (1201,9)-(1201,11)
                                    =: '=' (1201,12)-(1201,13)
                                    binary_expression (1201,14)-(1201,25)
                                      identifier: 'f' (1201,14)-(1201,15)
                                      /: '/' (1201,16)-(1201,17)
                                      identifier: 'lpremul' (1201,18)-(1201,25)
                                  ;: ';' (1201,25)-(1201,26)
                                  update_expression (1201,27)-(1201,31)
                                    identifier: 'cc' (1201,27)-(1201,29)
                                    --: '--' (1201,29)-(1201,31)
                                  ;: ';' (1201,31)-(1201,32)
                                  ): ')' (1201,32)-(1201,33)
                                  compound_statement (1201,34)-(1214,5)
                                    {: '{' (1201,34)-(1201,35)
                                    comment: '/*
			     * Repeat the repeated string.
			     */' (1202,8)-(1204,11)
                                    expression_statement (1205,8)-(1205,26)
                                      call_expression (1205,8)-(1205,25)
                                        identifier: 'MB_METACHARINIT' (1205,8)-(1205,23)
                                        argument_list (1205,23)-(1205,25)
                                          (: '(' (1205,23)-(1205,24)
                                          ): ')' (1205,24)-(1205,25)
                                      ;: ';' (1205,25)-(1205,26)
                                    for_statement (1206,8)-(1213,9)
                                      for: 'for' (1206,8)-(1206,11)
                                      (: '(' (1206,12)-(1206,13)
                                      comma_expression (1206,13)-(1206,36)
                                        assignment_expression (1206,13)-(1206,24)
                                          identifier: 'c' (1206,13)-(1206,14)
                                          =: '=' (1206,15)-(1206,16)
                                          identifier: 'lpremul' (1206,17)-(1206,24)
                                        ,: ',' (1206,24)-(1206,25)
                                        assignment_expression (1206,26)-(1206,36)
                                          identifier: 't' (1206,26)-(1206,27)
                                          =: '=' (1206,28)-(1206,29)
                                          identifier: 'premul' (1206,30)-(1206,36)
                                      ;: ';' (1206,36)-(1206,37)
                                      binary_expression (1206,38)-(1206,43)
                                        identifier: 'c' (1206,38)-(1206,39)
                                        >: '>' (1206,40)-(1206,41)
                                        number_literal: '0' (1206,42)-(1206,43)
                                      ;: ';' (1206,43)-(1206,44)
                                      ): ')' (1206,45)-(1206,46)
                                      compound_statement (1206,47)-(1213,9)
                                        {: '{' (1206,47)-(1206,48)
                                        expression_statement (1207,5)-(1207,40)
                                          assignment_expression (1207,5)-(1207,39)
                                            identifier: 'cl' (1207,5)-(1207,7)
                                            =: '=' (1207,8)-(1207,9)
                                            call_expression (1207,10)-(1207,39)
                                              identifier: 'MB_METACHARLENCONV' (1207,10)-(1207,28)
                                              argument_list (1207,28)-(1207,39)
                                                (: '(' (1207,28)-(1207,29)
                                                identifier: 't' (1207,29)-(1207,30)
                                                ,: ',' (1207,30)-(1207,31)
                                                pointer_expression (1207,32)-(1207,38)
                                                  &: '&' (1207,32)-(1207,33)
                                                  identifier: 'cchar' (1207,33)-(1207,38)
                                                ): ')' (1207,38)-(1207,39)
                                          ;: ';' (1207,39)-(1207,40)
                                        if_statement (1208,5)-(1209,15)
                                          if: 'if' (1208,5)-(1208,7)
                                          parenthesized_expression (1208,8)-(1208,13)
                                            (: '(' (1208,8)-(1208,9)
                                            unary_expression (1208,9)-(1208,12)
                                              !: '!' (1208,9)-(1208,10)
                                              identifier: 'cl' (1208,10)-(1208,12)
                                            ): ')' (1208,12)-(1208,13)
                                          break_statement (1209,9)-(1209,15)
                                            break: 'break' (1209,9)-(1209,14)
                                            ;: ';' (1209,14)-(1209,15)
                                        while_statement (1210,5)-(1211,21)
                                          while: 'while' (1210,5)-(1210,10)
                                          parenthesized_expression (1210,11)-(1210,17)
                                            (: '(' (1210,11)-(1210,12)
                                            update_expression (1210,12)-(1210,16)
                                              identifier: 'cl' (1210,12)-(1210,14)
                                              --: '--' (1210,14)-(1210,16)
                                            ): ')' (1210,16)-(1210,17)
                                          expression_statement (1211,9)-(1211,21)
                                            assignment_expression (1211,9)-(1211,20)
                                              pointer_expression (1211,9)-(1211,13)
                                                *: '*' (1211,9)-(1211,10)
                                                update_expression (1211,10)-(1211,13)
                                                  identifier: 'r' (1211,10)-(1211,11)
                                                  ++: '++' (1211,11)-(1211,13)
                                              =: '=' (1211,14)-(1211,15)
                                              pointer_expression (1211,16)-(1211,20)
                                                *: '*' (1211,16)-(1211,17)
                                                update_expression (1211,17)-(1211,20)
                                                  identifier: 't' (1211,17)-(1211,18)
                                                  ++: '++' (1211,18)-(1211,20)
                                            ;: ';' (1211,20)-(1211,21)
                                        expression_statement (1212,5)-(1212,41)
                                          assignment_expression (1212,5)-(1212,40)
                                            identifier: 'c' (1212,5)-(1212,6)
                                            -=: '-=' (1212,7)-(1212,9)
                                            call_expression (1212,10)-(1212,40)
                                              identifier: 'WCPADWIDTH' (1212,10)-(1212,20)
                                              argument_list (1212,20)-(1212,40)
                                                (: '(' (1212,20)-(1212,21)
                                                identifier: 'cchar' (1212,21)-(1212,26)
                                                ,: ',' (1212,26)-(1212,27)
                                                identifier: 'multi_width' (1212,28)-(1212,39)
                                                ): ')' (1212,39)-(1212,40)
                                          ;: ';' (1212,40)-(1212,41)
                                        }: '}' (1213,8)-(1213,9)
                                    }: '}' (1214,4)-(1214,5)
                                }: '}' (1215,7)-(1215,8)
                            if_statement (1216,7)-(1228,8)
                              if: 'if' (1216,7)-(1216,9)
                              parenthesized_expression (1216,10)-(1216,18)
                                (: '(' (1216,10)-(1216,11)
                                identifier: 'preone' (1216,11)-(1216,17)
                                ): ')' (1216,17)-(1216,18)
                              compound_statement (1216,19)-(1228,8)
                                {: '{' (1216,19)-(1216,20)
                                comment: '/*
			 * Now the entire unrepeated string.  Don't
			 * count the width, just dump it.  This is
			 * significant if there are special characters
			 * in this string.  It's sort of a historical
			 * accident that this worked, but there's nothing
			 * to stop us just dumping the thing out and assuming
			 * the user knows what they're doing.
			 */' (1217,4)-(1225,7)
                                while_statement (1226,4)-(1227,25)
                                  while: 'while' (1226,4)-(1226,9)
                                  parenthesized_expression (1226,10)-(1226,19)
                                    (: '(' (1226,10)-(1226,11)
                                    pointer_expression (1226,11)-(1226,18)
                                      *: '*' (1226,11)-(1226,12)
                                      identifier: 'preone' (1226,12)-(1226,18)
                                    ): ')' (1226,18)-(1226,19)
                                  expression_statement (1227,8)-(1227,25)
                                    assignment_expression (1227,8)-(1227,24)
                                      pointer_expression (1227,8)-(1227,12)
                                        *: '*' (1227,8)-(1227,9)
                                        update_expression (1227,9)-(1227,12)
                                          identifier: 'r' (1227,9)-(1227,10)
                                          ++: '++' (1227,10)-(1227,12)
                                      =: '=' (1227,13)-(1227,14)
                                      pointer_expression (1227,15)-(1227,24)
                                        *: '*' (1227,15)-(1227,16)
                                        update_expression (1227,16)-(1227,24)
                                          identifier: 'preone' (1227,16)-(1227,22)
                                          ++: '++' (1227,22)-(1227,24)
                                    ;: ';' (1227,24)-(1227,25)
                                }: '}' (1228,7)-(1228,8)
                            }: '}' (1229,3)-(1229,4)
                      comment: '/* Now the string being padded */' (1230,3)-(1230,36)
                      while_statement (1231,3)-(1232,21)
                        while: 'while' (1231,3)-(1231,8)
                        parenthesized_expression (1231,9)-(1231,15)
                          (: '(' (1231,9)-(1231,10)
                          pointer_expression (1231,10)-(1231,14)
                            *: '*' (1231,10)-(1231,11)
                            identifier: 'str' (1231,11)-(1231,14)
                          ): ')' (1231,14)-(1231,15)
                        expression_statement (1232,7)-(1232,21)
                          assignment_expression (1232,7)-(1232,20)
                            pointer_expression (1232,7)-(1232,11)
                              *: '*' (1232,7)-(1232,8)
                              update_expression (1232,8)-(1232,11)
                                identifier: 'r' (1232,8)-(1232,9)
                                ++: '++' (1232,9)-(1232,11)
                            =: '=' (1232,12)-(1232,13)
                            pointer_expression (1232,14)-(1232,20)
                              *: '*' (1232,14)-(1232,15)
                              update_expression (1232,15)-(1232,20)
                                identifier: 'str' (1232,15)-(1232,18)
                                ++: '++' (1232,18)-(1232,20)
                          ;: ';' (1232,20)-(1232,21)
                      }: '}' (1233,6)-(1233,7)
                }: '}' (1234,2)-(1234,3)
          }: '}' (1235,5)-(1235,6)
        else_clause (1235,7)-(1328,6)
          else: 'else' (1235,7)-(1235,11)
          if_statement (1235,12)-(1328,6)
            if: 'if' (1235,12)-(1235,14)
            parenthesized_expression (1235,15)-(1235,24)
              (: '(' (1235,15)-(1235,16)
              identifier: 'postnum' (1235,16)-(1235,23)
              ): ')' (1235,23)-(1235,24)
            compound_statement (1235,25)-(1328,6)
              {: '{' (1235,25)-(1235,26)
              comment: '/*
	 * Pad on the right.
	 */' (1236,2)-(1238,5)
              expression_statement (1239,2)-(1239,19)
                assignment_expression (1239,2)-(1239,18)
                  identifier: 'f' (1239,2)-(1239,3)
                  =: '=' (1239,4)-(1239,5)
                  binary_expression (1239,6)-(1239,18)
                    identifier: 'postnum' (1239,6)-(1239,13)
                    -: '-' (1239,14)-(1239,15)
                    identifier: 'ls' (1239,16)-(1239,18)
                ;: ';' (1239,18)-(1239,19)
              expression_statement (1240,2)-(1240,20)
                call_expression (1240,2)-(1240,19)
                  identifier: 'MB_METACHARINIT' (1240,2)-(1240,17)
                  argument_list (1240,17)-(1240,19)
                    (: '(' (1240,17)-(1240,18)
                    ): ')' (1240,18)-(1240,19)
                ;: ';' (1240,19)-(1240,20)
              if_statement (1241,2)-(1327,3)
                if: 'if' (1241,2)-(1241,4)
                parenthesized_expression (1241,5)-(1241,13)
                  (: '(' (1241,5)-(1241,6)
                  binary_expression (1241,6)-(1241,12)
                    identifier: 'f' (1241,6)-(1241,7)
                    <=: '<=' (1241,8)-(1241,10)
                    number_literal: '0' (1241,11)-(1241,12)
                  ): ')' (1241,12)-(1241,13)
                compound_statement (1241,14)-(1254,3)
                  {: '{' (1241,14)-(1241,15)
                  comment: '/*
	     * Original string is at least as wide as padding.
	     * Truncate original string to width.
	     */' (1242,6)-(1245,9)
                  for_statement (1246,6)-(1253,7)
                    for: 'for' (1246,6)-(1246,9)
                    (: '(' (1246,10)-(1246,11)
                    assignment_expression (1246,11)-(1246,22)
                      identifier: 'c' (1246,11)-(1246,12)
                      =: '=' (1246,13)-(1246,14)
                      identifier: 'postnum' (1246,15)-(1246,22)
                    ;: ';' (1246,22)-(1246,23)
                    binary_expression (1246,24)-(1246,29)
                      identifier: 'c' (1246,24)-(1246,25)
                      >: '>' (1246,26)-(1246,27)
                      number_literal: '0' (1246,28)-(1246,29)
                    ;: ';' (1246,29)-(1246,30)
                    ): ')' (1246,31)-(1246,32)
                    compound_statement (1246,33)-(1253,7)
                      {: '{' (1246,33)-(1246,34)
                      expression_statement (1247,3)-(1247,40)
                        assignment_expression (1247,3)-(1247,39)
                          identifier: 'cl' (1247,3)-(1247,5)
                          =: '=' (1247,6)-(1247,7)
                          call_expression (1247,8)-(1247,39)
                            identifier: 'MB_METACHARLENCONV' (1247,8)-(1247,26)
                            argument_list (1247,26)-(1247,39)
                              (: '(' (1247,26)-(1247,27)
                              identifier: 'str' (1247,27)-(1247,30)
                              ,: ',' (1247,30)-(1247,31)
                              pointer_expression (1247,32)-(1247,38)
                                &: '&' (1247,32)-(1247,33)
                                identifier: 'cchar' (1247,33)-(1247,38)
                              ): ')' (1247,38)-(1247,39)
                        ;: ';' (1247,39)-(1247,40)
                      if_statement (1248,3)-(1249,13)
                        if: 'if' (1248,3)-(1248,5)
                        parenthesized_expression (1248,6)-(1248,11)
                          (: '(' (1248,6)-(1248,7)
                          unary_expression (1248,7)-(1248,10)
                            !: '!' (1248,7)-(1248,8)
                            identifier: 'cl' (1248,8)-(1248,10)
                          ): ')' (1248,10)-(1248,11)
                        break_statement (1249,7)-(1249,13)
                          break: 'break' (1249,7)-(1249,12)
                          ;: ';' (1249,12)-(1249,13)
                      while_statement (1250,3)-(1251,21)
                        while: 'while' (1250,3)-(1250,8)
                        parenthesized_expression (1250,9)-(1250,15)
                          (: '(' (1250,9)-(1250,10)
                          update_expression (1250,10)-(1250,14)
                            identifier: 'cl' (1250,10)-(1250,12)
                            --: '--' (1250,12)-(1250,14)
                          ): ')' (1250,14)-(1250,15)
                        expression_statement (1251,7)-(1251,21)
                          assignment_expression (1251,7)-(1251,20)
                            pointer_expression (1251,7)-(1251,11)
                              *: '*' (1251,7)-(1251,8)
                              update_expression (1251,8)-(1251,11)
                                identifier: 'r' (1251,8)-(1251,9)
                                ++: '++' (1251,9)-(1251,11)
                            =: '=' (1251,12)-(1251,13)
                            pointer_expression (1251,14)-(1251,20)
                              *: '*' (1251,14)-(1251,15)
                              update_expression (1251,15)-(1251,20)
                                identifier: 'str' (1251,15)-(1251,18)
                                ++: '++' (1251,18)-(1251,20)
                          ;: ';' (1251,20)-(1251,21)
                      expression_statement (1252,3)-(1252,39)
                        assignment_expression (1252,3)-(1252,38)
                          identifier: 'c' (1252,3)-(1252,4)
                          -=: '-=' (1252,5)-(1252,7)
                          call_expression (1252,8)-(1252,38)
                            identifier: 'WCPADWIDTH' (1252,8)-(1252,18)
                            argument_list (1252,18)-(1252,38)
                              (: '(' (1252,18)-(1252,19)
                              identifier: 'cchar' (1252,19)-(1252,24)
                              ,: ',' (1252,24)-(1252,25)
                              identifier: 'multi_width' (1252,26)-(1252,37)
                              ): ')' (1252,37)-(1252,38)
                        ;: ';' (1252,38)-(1252,39)
                      }: '}' (1253,6)-(1253,7)
                  }: '}' (1254,2)-(1254,3)
                else_clause (1254,4)-(1327,3)
                  else: 'else' (1254,4)-(1254,8)
                  compound_statement (1254,9)-(1327,3)
                    {: '{' (1254,9)-(1254,10)
                    comment: '/*
	     * There's some space to fill.  First copy the original
	     * string, counting the width.  Make sure we copy the
	     * entire string.
	     */' (1255,6)-(1259,9)
                    for_statement (1260,6)-(1267,7)
                      for: 'for' (1260,6)-(1260,9)
                      (: '(' (1260,10)-(1260,11)
                      assignment_expression (1260,11)-(1260,17)
                        identifier: 'c' (1260,11)-(1260,12)
                        =: '=' (1260,13)-(1260,14)
                        identifier: 'ls' (1260,15)-(1260,17)
                      ;: ';' (1260,17)-(1260,18)
                      pointer_expression (1260,19)-(1260,23)
                        *: '*' (1260,19)-(1260,20)
                        identifier: 'str' (1260,20)-(1260,23)
                      ;: ';' (1260,23)-(1260,24)
                      ): ')' (1260,25)-(1260,26)
                      compound_statement (1260,27)-(1267,7)
                        {: '{' (1260,27)-(1260,28)
                        expression_statement (1261,3)-(1261,40)
                          assignment_expression (1261,3)-(1261,39)
                            identifier: 'cl' (1261,3)-(1261,5)
                            =: '=' (1261,6)-(1261,7)
                            call_expression (1261,8)-(1261,39)
                              identifier: 'MB_METACHARLENCONV' (1261,8)-(1261,26)
                              argument_list (1261,26)-(1261,39)
                                (: '(' (1261,26)-(1261,27)
                                identifier: 'str' (1261,27)-(1261,30)
                                ,: ',' (1261,30)-(1261,31)
                                pointer_expression (1261,32)-(1261,38)
                                  &: '&' (1261,32)-(1261,33)
                                  identifier: 'cchar' (1261,33)-(1261,38)
                                ): ')' (1261,38)-(1261,39)
                          ;: ';' (1261,39)-(1261,40)
                        if_statement (1262,3)-(1263,13)
                          if: 'if' (1262,3)-(1262,5)
                          parenthesized_expression (1262,6)-(1262,11)
                            (: '(' (1262,6)-(1262,7)
                            unary_expression (1262,7)-(1262,10)
                              !: '!' (1262,7)-(1262,8)
                              identifier: 'cl' (1262,8)-(1262,10)
                            ): ')' (1262,10)-(1262,11)
                          break_statement (1263,7)-(1263,13)
                            break: 'break' (1263,7)-(1263,12)
                            ;: ';' (1263,12)-(1263,13)
                        while_statement (1264,3)-(1265,21)
                          while: 'while' (1264,3)-(1264,8)
                          parenthesized_expression (1264,9)-(1264,15)
                            (: '(' (1264,9)-(1264,10)
                            update_expression (1264,10)-(1264,14)
                              identifier: 'cl' (1264,10)-(1264,12)
                              --: '--' (1264,12)-(1264,14)
                            ): ')' (1264,14)-(1264,15)
                          expression_statement (1265,7)-(1265,21)
                            assignment_expression (1265,7)-(1265,20)
                              pointer_expression (1265,7)-(1265,11)
                                *: '*' (1265,7)-(1265,8)
                                update_expression (1265,8)-(1265,11)
                                  identifier: 'r' (1265,8)-(1265,9)
                                  ++: '++' (1265,9)-(1265,11)
                              =: '=' (1265,12)-(1265,13)
                              pointer_expression (1265,14)-(1265,20)
                                *: '*' (1265,14)-(1265,15)
                                update_expression (1265,15)-(1265,20)
                                  identifier: 'str' (1265,15)-(1265,18)
                                  ++: '++' (1265,18)-(1265,20)
                            ;: ';' (1265,20)-(1265,21)
                        expression_statement (1266,3)-(1266,39)
                          assignment_expression (1266,3)-(1266,38)
                            identifier: 'c' (1266,3)-(1266,4)
                            -=: '-=' (1266,5)-(1266,7)
                            call_expression (1266,8)-(1266,38)
                              identifier: 'WCPADWIDTH' (1266,8)-(1266,18)
                              argument_list (1266,18)-(1266,38)
                                (: '(' (1266,18)-(1266,19)
                                identifier: 'cchar' (1266,19)-(1266,24)
                                ,: ',' (1266,24)-(1266,25)
                                identifier: 'multi_width' (1266,26)-(1266,37)
                                ): ')' (1266,37)-(1266,38)
                          ;: ';' (1266,38)-(1266,39)
                        }: '}' (1267,6)-(1267,7)
                    expression_statement (1268,6)-(1268,24)
                      call_expression (1268,6)-(1268,23)
                        identifier: 'MB_METACHARINIT' (1268,6)-(1268,21)
                        argument_list (1268,21)-(1268,23)
                          (: '(' (1268,21)-(1268,22)
                          ): ')' (1268,22)-(1268,23)
                      ;: ';' (1268,23)-(1268,24)
                    if_statement (1269,6)-(1326,7)
                      if: 'if' (1269,6)-(1269,8)
                      parenthesized_expression (1269,9)-(1269,24)
                        (: '(' (1269,9)-(1269,10)
                        binary_expression (1269,10)-(1269,23)
                          identifier: 'f' (1269,10)-(1269,11)
                          <=: '<=' (1269,12)-(1269,14)
                          identifier: 'lpostone' (1269,15)-(1269,23)
                        ): ')' (1269,23)-(1269,24)
                      compound_statement (1269,25)-(1284,7)
                        {: '{' (1269,25)-(1269,26)
                        if_statement (1270,3)-(1283,4)
                          if: 'if' (1270,3)-(1270,5)
                          parenthesized_expression (1270,6)-(1270,15)
                            (: '(' (1270,6)-(1270,7)
                            identifier: 'postone' (1270,7)-(1270,14)
                            ): ')' (1270,14)-(1270,15)
                          compound_statement (1270,16)-(1283,4)
                            {: '{' (1270,16)-(1270,17)
                            comment: '/*
		     * Not enough or only just enough space to fit
		     * the unrepeated string.  Truncate as necessary.
		     */' (1271,7)-(1274,10)
                            for_statement (1275,7)-(1282,8)
                              for: 'for' (1275,7)-(1275,10)
                              (: '(' (1275,11)-(1275,12)
                              assignment_expression (1275,12)-(1275,17)
                                identifier: 'c' (1275,12)-(1275,13)
                                =: '=' (1275,14)-(1275,15)
                                identifier: 'f' (1275,16)-(1275,17)
                              ;: ';' (1275,17)-(1275,18)
                              binary_expression (1275,19)-(1275,24)
                                identifier: 'c' (1275,19)-(1275,20)
                                >: '>' (1275,21)-(1275,22)
                                number_literal: '0' (1275,23)-(1275,24)
                              ;: ';' (1275,24)-(1275,25)
                              ): ')' (1275,26)-(1275,27)
                              compound_statement (1275,28)-(1282,8)
                                {: '{' (1275,28)-(1275,29)
                                expression_statement (1276,4)-(1276,45)
                                  assignment_expression (1276,4)-(1276,44)
                                    identifier: 'cl' (1276,4)-(1276,6)
                                    =: '=' (1276,7)-(1276,8)
                                    call_expression (1276,9)-(1276,44)
                                      identifier: 'MB_METACHARLENCONV' (1276,9)-(1276,27)
                                      argument_list (1276,27)-(1276,44)
                                        (: '(' (1276,27)-(1276,28)
                                        identifier: 'postone' (1276,28)-(1276,35)
                                        ,: ',' (1276,35)-(1276,36)
                                        pointer_expression (1276,37)-(1276,43)
                                          &: '&' (1276,37)-(1276,38)
                                          identifier: 'cchar' (1276,38)-(1276,43)
                                        ): ')' (1276,43)-(1276,44)
                                  ;: ';' (1276,44)-(1276,45)
                                if_statement (1277,4)-(1278,14)
                                  if: 'if' (1277,4)-(1277,6)
                                  parenthesized_expression (1277,7)-(1277,12)
                                    (: '(' (1277,7)-(1277,8)
                                    unary_expression (1277,8)-(1277,11)
                                      !: '!' (1277,8)-(1277,9)
                                      identifier: 'cl' (1277,9)-(1277,11)
                                    ): ')' (1277,11)-(1277,12)
                                  break_statement (1278,8)-(1278,14)
                                    break: 'break' (1278,8)-(1278,13)
                                    ;: ';' (1278,13)-(1278,14)
                                while_statement (1279,4)-(1280,26)
                                  while: 'while' (1279,4)-(1279,9)
                                  parenthesized_expression (1279,10)-(1279,16)
                                    (: '(' (1279,10)-(1279,11)
                                    update_expression (1279,11)-(1279,15)
                                      identifier: 'cl' (1279,11)-(1279,13)
                                      --: '--' (1279,13)-(1279,15)
                                    ): ')' (1279,15)-(1279,16)
                                  expression_statement (1280,8)-(1280,26)
                                    assignment_expression (1280,8)-(1280,25)
                                      pointer_expression (1280,8)-(1280,12)
                                        *: '*' (1280,8)-(1280,9)
                                        update_expression (1280,9)-(1280,12)
                                          identifier: 'r' (1280,9)-(1280,10)
                                          ++: '++' (1280,10)-(1280,12)
                                      =: '=' (1280,13)-(1280,14)
                                      pointer_expression (1280,15)-(1280,25)
                                        *: '*' (1280,15)-(1280,16)
                                        update_expression (1280,16)-(1280,25)
                                          identifier: 'postone' (1280,16)-(1280,23)
                                          ++: '++' (1280,23)-(1280,25)
                                    ;: ';' (1280,25)-(1280,26)
                                expression_statement (1281,4)-(1281,40)
                                  assignment_expression (1281,4)-(1281,39)
                                    identifier: 'c' (1281,4)-(1281,5)
                                    -=: '-=' (1281,6)-(1281,8)
                                    call_expression (1281,9)-(1281,39)
                                      identifier: 'WCPADWIDTH' (1281,9)-(1281,19)
                                      argument_list (1281,19)-(1281,39)
                                        (: '(' (1281,19)-(1281,20)
                                        identifier: 'cchar' (1281,20)-(1281,25)
                                        ,: ',' (1281,25)-(1281,26)
                                        identifier: 'multi_width' (1281,27)-(1281,38)
                                        ): ')' (1281,38)-(1281,39)
                                  ;: ';' (1281,39)-(1281,40)
                                }: '}' (1282,7)-(1282,8)
                            }: '}' (1283,3)-(1283,4)
                        }: '}' (1284,6)-(1284,7)
                      else_clause (1284,8)-(1326,7)
                        else: 'else' (1284,8)-(1284,12)
                        compound_statement (1284,13)-(1326,7)
                          {: '{' (1284,13)-(1284,14)
                          if_statement (1285,3)-(1296,4)
                            if: 'if' (1285,3)-(1285,5)
                            parenthesized_expression (1285,6)-(1285,15)
                              (: '(' (1285,6)-(1285,7)
                              identifier: 'postone' (1285,7)-(1285,14)
                              ): ')' (1285,14)-(1285,15)
                            compound_statement (1285,16)-(1296,4)
                              {: '{' (1285,16)-(1285,17)
                              expression_statement (1286,7)-(1286,21)
                                assignment_expression (1286,7)-(1286,20)
                                  identifier: 'f' (1286,7)-(1286,8)
                                  -=: '-=' (1286,9)-(1286,11)
                                  identifier: 'lpostone' (1286,12)-(1286,20)
                                ;: ';' (1286,20)-(1286,21)
                              comment: '/* Copy the entire unrepeated string */' (1287,7)-(1287,46)
                              for_statement (1288,7)-(1295,8)
                                for: 'for' (1288,7)-(1288,10)
                                (: '(' (1288,11)-(1288,12)
                                assignment_expression (1288,12)-(1288,24)
                                  identifier: 'c' (1288,12)-(1288,13)
                                  =: '=' (1288,14)-(1288,15)
                                  identifier: 'lpostone' (1288,16)-(1288,24)
                                ;: ';' (1288,24)-(1288,25)
                                pointer_expression (1288,26)-(1288,34)
                                  *: '*' (1288,26)-(1288,27)
                                  identifier: 'postone' (1288,27)-(1288,34)
                                ;: ';' (1288,34)-(1288,35)
                                ): ')' (1288,36)-(1288,37)
                                compound_statement (1288,38)-(1295,8)
                                  {: '{' (1288,38)-(1288,39)
                                  expression_statement (1289,4)-(1289,45)
                                    assignment_expression (1289,4)-(1289,44)
                                      identifier: 'cl' (1289,4)-(1289,6)
                                      =: '=' (1289,7)-(1289,8)
                                      call_expression (1289,9)-(1289,44)
                                        identifier: 'MB_METACHARLENCONV' (1289,9)-(1289,27)
                                        argument_list (1289,27)-(1289,44)
                                          (: '(' (1289,27)-(1289,28)
                                          identifier: 'postone' (1289,28)-(1289,35)
                                          ,: ',' (1289,35)-(1289,36)
                                          pointer_expression (1289,37)-(1289,43)
                                            &: '&' (1289,37)-(1289,38)
                                            identifier: 'cchar' (1289,38)-(1289,43)
                                          ): ')' (1289,43)-(1289,44)
                                    ;: ';' (1289,44)-(1289,45)
                                  if_statement (1290,4)-(1291,14)
                                    if: 'if' (1290,4)-(1290,6)
                                    parenthesized_expression (1290,7)-(1290,12)
                                      (: '(' (1290,7)-(1290,8)
                                      unary_expression (1290,8)-(1290,11)
                                        !: '!' (1290,8)-(1290,9)
                                        identifier: 'cl' (1290,9)-(1290,11)
                                      ): ')' (1290,11)-(1290,12)
                                    break_statement (1291,8)-(1291,14)
                                      break: 'break' (1291,8)-(1291,13)
                                      ;: ';' (1291,13)-(1291,14)
                                  while_statement (1292,4)-(1293,26)
                                    while: 'while' (1292,4)-(1292,9)
                                    parenthesized_expression (1292,10)-(1292,16)
                                      (: '(' (1292,10)-(1292,11)
                                      update_expression (1292,11)-(1292,15)
                                        identifier: 'cl' (1292,11)-(1292,13)
                                        --: '--' (1292,13)-(1292,15)
                                      ): ')' (1292,15)-(1292,16)
                                    expression_statement (1293,8)-(1293,26)
                                      assignment_expression (1293,8)-(1293,25)
                                        pointer_expression (1293,8)-(1293,12)
                                          *: '*' (1293,8)-(1293,9)
                                          update_expression (1293,9)-(1293,12)
                                            identifier: 'r' (1293,9)-(1293,10)
                                            ++: '++' (1293,10)-(1293,12)
                                        =: '=' (1293,13)-(1293,14)
                                        pointer_expression (1293,15)-(1293,25)
                                          *: '*' (1293,15)-(1293,16)
                                          update_expression (1293,16)-(1293,25)
                                            identifier: 'postone' (1293,16)-(1293,23)
                                            ++: '++' (1293,23)-(1293,25)
                                      ;: ';' (1293,25)-(1293,26)
                                  expression_statement (1294,4)-(1294,40)
                                    assignment_expression (1294,4)-(1294,39)
                                      identifier: 'c' (1294,4)-(1294,5)
                                      -=: '-=' (1294,6)-(1294,8)
                                      call_expression (1294,9)-(1294,39)
                                        identifier: 'WCPADWIDTH' (1294,9)-(1294,19)
                                        argument_list (1294,19)-(1294,39)
                                          (: '(' (1294,19)-(1294,20)
                                          identifier: 'cchar' (1294,20)-(1294,25)
                                          ,: ',' (1294,25)-(1294,26)
                                          identifier: 'multi_width' (1294,27)-(1294,38)
                                          ): ')' (1294,38)-(1294,39)
                                    ;: ';' (1294,39)-(1294,40)
                                  }: '}' (1295,7)-(1295,8)
                              }: '}' (1296,3)-(1296,4)
                          if_statement (1297,3)-(1325,4)
                            if: 'if' (1297,3)-(1297,5)
                            parenthesized_expression (1297,6)-(1297,16)
                              (: '(' (1297,6)-(1297,7)
                              identifier: 'lpostmul' (1297,7)-(1297,15)
                              ): ')' (1297,15)-(1297,16)
                            compound_statement (1297,17)-(1325,4)
                              {: '{' (1297,17)-(1297,18)
                              comment: '/* Repeat the repeated string */' (1298,7)-(1298,39)
                              for_statement (1299,7)-(1309,8)
                                for: 'for' (1299,7)-(1299,10)
                                (: '(' (1299,11)-(1299,12)
                                assignment_expression (1299,12)-(1299,29)
                                  identifier: 'cc' (1299,12)-(1299,14)
                                  =: '=' (1299,15)-(1299,16)
                                  binary_expression (1299,17)-(1299,29)
                                    identifier: 'f' (1299,17)-(1299,18)
                                    /: '/' (1299,19)-(1299,20)
                                    identifier: 'lpostmul' (1299,21)-(1299,29)
                                ;: ';' (1299,29)-(1299,30)
                                update_expression (1299,31)-(1299,35)
                                  identifier: 'cc' (1299,31)-(1299,33)
                                  --: '--' (1299,33)-(1299,35)
                                ;: ';' (1299,35)-(1299,36)
                                ): ')' (1299,36)-(1299,37)
                                compound_statement (1299,38)-(1309,8)
                                  {: '{' (1299,38)-(1299,39)
                                  expression_statement (1300,4)-(1300,22)
                                    call_expression (1300,4)-(1300,21)
                                      identifier: 'MB_METACHARINIT' (1300,4)-(1300,19)
                                      argument_list (1300,19)-(1300,21)
                                        (: '(' (1300,19)-(1300,20)
                                        ): ')' (1300,20)-(1300,21)
                                    ;: ';' (1300,21)-(1300,22)
                                  for_statement (1301,4)-(1308,5)
                                    for: 'for' (1301,4)-(1301,7)
                                    (: '(' (1301,8)-(1301,9)
                                    comma_expression (1301,9)-(1301,34)
                                      assignment_expression (1301,9)-(1301,21)
                                        identifier: 'c' (1301,9)-(1301,10)
                                        =: '=' (1301,11)-(1301,12)
                                        identifier: 'lpostmul' (1301,13)-(1301,21)
                                      ,: ',' (1301,21)-(1301,22)
                                      assignment_expression (1301,23)-(1301,34)
                                        identifier: 't' (1301,23)-(1301,24)
                                        =: '=' (1301,25)-(1301,26)
                                        identifier: 'postmul' (1301,27)-(1301,34)
                                    ;: ';' (1301,34)-(1301,35)
                                    pointer_expression (1301,36)-(1301,38)
                                      *: '*' (1301,36)-(1301,37)
                                      identifier: 't' (1301,37)-(1301,38)
                                    ;: ';' (1301,38)-(1301,39)
                                    ): ')' (1301,40)-(1301,41)
                                    compound_statement (1301,42)-(1308,5)
                                      {: '{' (1301,42)-(1301,43)
                                      expression_statement (1302,8)-(1302,43)
                                        assignment_expression (1302,8)-(1302,42)
                                          identifier: 'cl' (1302,8)-(1302,10)
                                          =: '=' (1302,11)-(1302,12)
                                          call_expression (1302,13)-(1302,42)
                                            identifier: 'MB_METACHARLENCONV' (1302,13)-(1302,31)
                                            argument_list (1302,31)-(1302,42)
                                              (: '(' (1302,31)-(1302,32)
                                              identifier: 't' (1302,32)-(1302,33)
                                              ,: ',' (1302,33)-(1302,34)
                                              pointer_expression (1302,35)-(1302,41)
                                                &: '&' (1302,35)-(1302,36)
                                                identifier: 'cchar' (1302,36)-(1302,41)
                                              ): ')' (1302,41)-(1302,42)
                                        ;: ';' (1302,42)-(1302,43)
                                      if_statement (1303,8)-(1304,11)
                                        if: 'if' (1303,8)-(1303,10)
                                        parenthesized_expression (1303,11)-(1303,16)
                                          (: '(' (1303,11)-(1303,12)
                                          unary_expression (1303,12)-(1303,15)
                                            !: '!' (1303,12)-(1303,13)
                                            identifier: 'cl' (1303,13)-(1303,15)
                                          ): ')' (1303,15)-(1303,16)
                                        break_statement (1304,5)-(1304,11)
                                          break: 'break' (1304,5)-(1304,10)
                                          ;: ';' (1304,10)-(1304,11)
                                      while_statement (1305,8)-(1306,17)
                                        while: 'while' (1305,8)-(1305,13)
                                        parenthesized_expression (1305,14)-(1305,20)
                                          (: '(' (1305,14)-(1305,15)
                                          update_expression (1305,15)-(1305,19)
                                            identifier: 'cl' (1305,15)-(1305,17)
                                            --: '--' (1305,17)-(1305,19)
                                          ): ')' (1305,19)-(1305,20)
                                        expression_statement (1306,5)-(1306,17)
                                          assignment_expression (1306,5)-(1306,16)
                                            pointer_expression (1306,5)-(1306,9)
                                              *: '*' (1306,5)-(1306,6)
                                              update_expression (1306,6)-(1306,9)
                                                identifier: 'r' (1306,6)-(1306,7)
                                                ++: '++' (1306,7)-(1306,9)
                                            =: '=' (1306,10)-(1306,11)
                                            pointer_expression (1306,12)-(1306,16)
                                              *: '*' (1306,12)-(1306,13)
                                              update_expression (1306,13)-(1306,16)
                                                identifier: 't' (1306,13)-(1306,14)
                                                ++: '++' (1306,14)-(1306,16)
                                          ;: ';' (1306,16)-(1306,17)
                                      expression_statement (1307,8)-(1307,44)
                                        assignment_expression (1307,8)-(1307,43)
                                          identifier: 'c' (1307,8)-(1307,9)
                                          -=: '-=' (1307,10)-(1307,12)
                                          call_expression (1307,13)-(1307,43)
                                            identifier: 'WCPADWIDTH' (1307,13)-(1307,23)
                                            argument_list (1307,23)-(1307,43)
                                              (: '(' (1307,23)-(1307,24)
                                              identifier: 'cchar' (1307,24)-(1307,29)
                                              ,: ',' (1307,29)-(1307,30)
                                              identifier: 'multi_width' (1307,31)-(1307,42)
                                              ): ')' (1307,42)-(1307,43)
                                        ;: ';' (1307,43)-(1307,44)
                                      }: '}' (1308,4)-(1308,5)
                                  }: '}' (1309,7)-(1309,8)
                              comment: '/*
		     * See if there's any fraction of the repeated
		     * string needed to fill up the remaining space.
		     */' (1310,7)-(1313,10)
                              if_statement (1314,7)-(1324,8)
                                if: 'if' (1314,7)-(1314,9)
                                parenthesized_expression (1314,10)-(1314,30)
                                  (: '(' (1314,10)-(1314,11)
                                  parenthesized_expression (1314,11)-(1314,29)
                                    (: '(' (1314,11)-(1314,12)
                                    assignment_expression (1314,12)-(1314,28)
                                      identifier: 'm' (1314,12)-(1314,13)
                                      =: '=' (1314,14)-(1314,15)
                                      binary_expression (1314,16)-(1314,28)
                                        identifier: 'f' (1314,16)-(1314,17)
                                        %: '%' (1314,18)-(1314,19)
                                        identifier: 'lpostmul' (1314,20)-(1314,28)
                                    ): ')' (1314,28)-(1314,29)
                                  ): ')' (1314,29)-(1314,30)
                                compound_statement (1314,31)-(1324,8)
                                  {: '{' (1314,31)-(1314,32)
                                  expression_statement (1315,4)-(1315,22)
                                    call_expression (1315,4)-(1315,21)
                                      identifier: 'MB_METACHARINIT' (1315,4)-(1315,19)
                                      argument_list (1315,19)-(1315,21)
                                        (: '(' (1315,19)-(1315,20)
                                        ): ')' (1315,20)-(1315,21)
                                    ;: ';' (1315,21)-(1315,22)
                                  while_statement (1316,4)-(1323,5)
                                    while: 'while' (1316,4)-(1316,9)
                                    parenthesized_expression (1316,10)-(1316,17)
                                      (: '(' (1316,10)-(1316,11)
                                      binary_expression (1316,11)-(1316,16)
                                        identifier: 'm' (1316,11)-(1316,12)
                                        >: '>' (1316,13)-(1316,14)
                                        number_literal: '0' (1316,15)-(1316,16)
                                      ): ')' (1316,16)-(1316,17)
                                    compound_statement (1316,18)-(1323,5)
                                      {: '{' (1316,18)-(1316,19)
                                      expression_statement (1317,8)-(1317,49)
                                        assignment_expression (1317,8)-(1317,48)
                                          identifier: 'cl' (1317,8)-(1317,10)
                                          =: '=' (1317,11)-(1317,12)
                                          call_expression (1317,13)-(1317,48)
                                            identifier: 'MB_METACHARLENCONV' (1317,13)-(1317,31)
                                            argument_list (1317,31)-(1317,48)
                                              (: '(' (1317,31)-(1317,32)
                                              identifier: 'postmul' (1317,32)-(1317,39)
                                              ,: ',' (1317,39)-(1317,40)
                                              pointer_expression (1317,41)-(1317,47)
                                                &: '&' (1317,41)-(1317,42)
                                                identifier: 'cchar' (1317,42)-(1317,47)
                                              ): ')' (1317,47)-(1317,48)
                                        ;: ';' (1317,48)-(1317,49)
                                      if_statement (1318,8)-(1319,11)
                                        if: 'if' (1318,8)-(1318,10)
                                        parenthesized_expression (1318,11)-(1318,16)
                                          (: '(' (1318,11)-(1318,12)
                                          unary_expression (1318,12)-(1318,15)
                                            !: '!' (1318,12)-(1318,13)
                                            identifier: 'cl' (1318,13)-(1318,15)
                                          ): ')' (1318,15)-(1318,16)
                                        break_statement (1319,5)-(1319,11)
                                          break: 'break' (1319,5)-(1319,10)
                                          ;: ';' (1319,10)-(1319,11)
                                      while_statement (1320,8)-(1321,23)
                                        while: 'while' (1320,8)-(1320,13)
                                        parenthesized_expression (1320,14)-(1320,20)
                                          (: '(' (1320,14)-(1320,15)
                                          update_expression (1320,15)-(1320,19)
                                            identifier: 'cl' (1320,15)-(1320,17)
                                            --: '--' (1320,17)-(1320,19)
                                          ): ')' (1320,19)-(1320,20)
                                        expression_statement (1321,5)-(1321,23)
                                          assignment_expression (1321,5)-(1321,22)
                                            pointer_expression (1321,5)-(1321,9)
                                              *: '*' (1321,5)-(1321,6)
                                              update_expression (1321,6)-(1321,9)
                                                identifier: 'r' (1321,6)-(1321,7)
                                                ++: '++' (1321,7)-(1321,9)
                                            =: '=' (1321,10)-(1321,11)
                                            pointer_expression (1321,12)-(1321,22)
                                              *: '*' (1321,12)-(1321,13)
                                              update_expression (1321,13)-(1321,22)
                                                identifier: 'postmul' (1321,13)-(1321,20)
                                                ++: '++' (1321,20)-(1321,22)
                                          ;: ';' (1321,22)-(1321,23)
                                      expression_statement (1322,8)-(1322,44)
                                        assignment_expression (1322,8)-(1322,43)
                                          identifier: 'm' (1322,8)-(1322,9)
                                          -=: '-=' (1322,10)-(1322,12)
                                          call_expression (1322,13)-(1322,43)
                                            identifier: 'WCPADWIDTH' (1322,13)-(1322,23)
                                            argument_list (1322,23)-(1322,43)
                                              (: '(' (1322,23)-(1322,24)
                                              identifier: 'cchar' (1322,24)-(1322,29)
                                              ,: ',' (1322,29)-(1322,30)
                                              identifier: 'multi_width' (1322,31)-(1322,42)
                                              ): ')' (1322,42)-(1322,43)
                                        ;: ';' (1322,43)-(1322,44)
                                      }: '}' (1323,4)-(1323,5)
                                  }: '}' (1324,7)-(1324,8)
                              }: '}' (1325,3)-(1325,4)
                          }: '}' (1326,6)-(1326,7)
                    }: '}' (1327,2)-(1327,3)
              }: '}' (1328,5)-(1328,6)
      expression_statement (1329,5)-(1329,15)
        assignment_expression (1329,5)-(1329,14)
          pointer_expression (1329,5)-(1329,7)
            *: '*' (1329,5)-(1329,6)
            identifier: 'r' (1329,6)-(1329,7)
          =: '=' (1329,8)-(1329,9)
          char_literal (1329,10)-(1329,14)
            ': ''' (1329,10)-(1329,11)
            escape_sequence: '\0' (1329,11)-(1329,13)
            ': ''' (1329,13)-(1329,14)
        ;: ';' (1329,14)-(1329,15)
      return_statement (1331,5)-(1331,16)
        return: 'return' (1331,5)-(1331,11)
        identifier: 'ret' (1331,12)-(1331,15)
        ;: ';' (1331,15)-(1331,16)
      }: '}' (1332,1)-(1332,2)
  comment: '/*
 * Look for a delimited portion of a string.  The first (possibly
 * multibyte) character at s is the delimiter.  Various forms
 * of brackets are treated separately, as documented.
 *
 * Returns a pointer to the final delimiter.  Sets *len to the
 * length of the final delimiter; a NULL causes *len to be set
 * to zero since we shouldn't advance past it.  (The string is
 * tokenized, so a NULL is a real end of string.)
 */' (1335,1)-(1344,4)
  comment: '/**/' (1346,1)-(1346,5)
  function_definition (1347,1)-(1417,2)
    primitive_type: 'char' (1347,1)-(1347,5)
    pointer_declarator (1347,6)-(1348,31)
      *: '*' (1347,6)-(1347,7)
      function_declarator (1348,1)-(1348,31)
        identifier: 'get_strarg' (1348,1)-(1348,11)
        parameter_list (1348,11)-(1348,31)
          (: '(' (1348,11)-(1348,12)
          parameter_declaration (1348,12)-(1348,19)
            primitive_type: 'char' (1348,12)-(1348,16)
            pointer_declarator (1348,17)-(1348,19)
              *: '*' (1348,17)-(1348,18)
              identifier: 's' (1348,18)-(1348,19)
          ,: ',' (1348,19)-(1348,20)
          parameter_declaration (1348,21)-(1348,30)
            primitive_type: 'int' (1348,21)-(1348,24)
            pointer_declarator (1348,25)-(1348,30)
              *: '*' (1348,25)-(1348,26)
              identifier: 'lenp' (1348,26)-(1348,30)
          ): ')' (1348,30)-(1348,31)
    compound_statement (1349,1)-(1417,2)
      {: '{' (1349,1)-(1349,2)
      declaration (1350,5)-(1350,20)
        type_identifier: 'convchar_t' (1350,5)-(1350,15)
        identifier: 'del' (1350,16)-(1350,19)
        ;: ';' (1350,19)-(1350,20)
      declaration (1351,5)-(1351,13)
        primitive_type: 'int' (1351,5)-(1351,8)
        identifier: 'len' (1351,9)-(1351,12)
        ;: ';' (1351,12)-(1351,13)
      declaration (1352,5)-(1352,19)
        primitive_type: 'char' (1352,5)-(1352,9)
        init_declarator (1352,10)-(1352,18)
          identifier: 'ctok' (1352,10)-(1352,14)
          =: '=' (1352,15)-(1352,16)
          number_literal: '0' (1352,17)-(1352,18)
        ;: ';' (1352,18)-(1352,19)
      expression_statement (1354,5)-(1354,23)
        call_expression (1354,5)-(1354,22)
          identifier: 'MB_METACHARINIT' (1354,5)-(1354,20)
          argument_list (1354,20)-(1354,22)
            (: '(' (1354,20)-(1354,21)
            ): ')' (1354,21)-(1354,22)
        ;: ';' (1354,22)-(1354,23)
      expression_statement (1355,5)-(1355,39)
        assignment_expression (1355,5)-(1355,38)
          identifier: 'len' (1355,5)-(1355,8)
          =: '=' (1355,9)-(1355,10)
          call_expression (1355,11)-(1355,38)
            identifier: 'MB_METACHARLENCONV' (1355,11)-(1355,29)
            argument_list (1355,29)-(1355,38)
              (: '(' (1355,29)-(1355,30)
              identifier: 's' (1355,30)-(1355,31)
              ,: ',' (1355,31)-(1355,32)
              pointer_expression (1355,33)-(1355,37)
                &: '&' (1355,33)-(1355,34)
                identifier: 'del' (1355,34)-(1355,37)
              ): ')' (1355,37)-(1355,38)
        ;: ';' (1355,38)-(1355,39)
      if_statement (1356,5)-(1359,6)
        if: 'if' (1356,5)-(1356,7)
        parenthesized_expression (1356,8)-(1356,14)
          (: '(' (1356,8)-(1356,9)
          unary_expression (1356,9)-(1356,13)
            !: '!' (1356,9)-(1356,10)
            identifier: 'len' (1356,10)-(1356,13)
          ): ')' (1356,13)-(1356,14)
        compound_statement (1356,15)-(1359,6)
          {: '{' (1356,15)-(1356,16)
          expression_statement (1357,2)-(1357,12)
            assignment_expression (1357,2)-(1357,11)
              pointer_expression (1357,2)-(1357,7)
                *: '*' (1357,2)-(1357,3)
                identifier: 'lenp' (1357,3)-(1357,7)
              =: '=' (1357,8)-(1357,9)
              number_literal: '0' (1357,10)-(1357,11)
            ;: ';' (1357,11)-(1357,12)
          return_statement (1358,2)-(1358,11)
            return: 'return' (1358,2)-(1358,8)
            identifier: 's' (1358,9)-(1358,10)
            ;: ';' (1358,10)-(1358,11)
          }: '}' (1359,5)-(1359,6)
      preproc_ifdef (1361,1)-(1364,7)
        #ifdef: '#ifdef' (1361,1)-(1361,7)
        identifier: 'MULTIBYTE_SUPPORT' (1361,8)-(1361,25)
        if_statement (1362,5)-(1363,48)
          if: 'if' (1362,5)-(1362,7)
          parenthesized_expression (1362,8)-(1362,21)
            (: '(' (1362,8)-(1362,9)
            binary_expression (1362,9)-(1362,20)
              identifier: 'del' (1362,9)-(1362,12)
              ==: '==' (1362,13)-(1362,15)
              identifier: 'WEOF' (1362,16)-(1362,20)
            ): ')' (1362,20)-(1362,21)
          expression_statement (1363,2)-(1363,48)
            assignment_expression (1363,2)-(1363,47)
              identifier: 'del' (1363,2)-(1363,5)
              =: '=' (1363,6)-(1363,7)
              call_expression (1363,8)-(1363,47)
                parenthesized_expression (1363,8)-(1363,16)
                  (: '(' (1363,8)-(1363,9)
                  identifier: 'wint_t' (1363,9)-(1363,15)
                  ): ')' (1363,15)-(1363,16)
                argument_list (1363,16)-(1363,47)
                  (: '(' (1363,16)-(1363,17)
                  conditional_expression (1363,17)-(1363,46)
                    parenthesized_expression (1363,17)-(1363,29)
                      (: '(' (1363,17)-(1363,18)
                      binary_expression (1363,18)-(1363,28)
                        pointer_expression (1363,18)-(1363,20)
                          *: '*' (1363,18)-(1363,19)
                          identifier: 's' (1363,19)-(1363,20)
                        ==: '==' (1363,21)-(1363,23)
                        identifier: 'Meta' (1363,24)-(1363,28)
                      ): ')' (1363,28)-(1363,29)
                    ?: '?' (1363,30)-(1363,31)
                    binary_expression (1363,32)-(1363,41)
                      subscript_expression (1363,32)-(1363,36)
                        identifier: 's' (1363,32)-(1363,33)
                        [: '[' (1363,33)-(1363,34)
                        number_literal: '1' (1363,34)-(1363,35)
                        ]: ']' (1363,35)-(1363,36)
                      ^: '^' (1363,37)-(1363,38)
                      number_literal: '32' (1363,39)-(1363,41)
                    :: ':' (1363,42)-(1363,43)
                    pointer_expression (1363,44)-(1363,46)
                      *: '*' (1363,44)-(1363,45)
                      identifier: 's' (1363,45)-(1363,46)
                  ): ')' (1363,46)-(1363,47)
            ;: ';' (1363,47)-(1363,48)
        #endif: '#endif' (1364,1)-(1364,7)
      expression_statement (1365,5)-(1365,14)
        assignment_expression (1365,5)-(1365,13)
          identifier: 's' (1365,5)-(1365,6)
          +=: '+=' (1365,7)-(1365,9)
          identifier: 'len' (1365,10)-(1365,13)
        ;: ';' (1365,13)-(1365,14)
      switch_statement (1366,5)-(1391,6)
        switch: 'switch' (1366,5)-(1366,11)
        parenthesized_expression (1366,12)-(1366,17)
          (: '(' (1366,12)-(1366,13)
          identifier: 'del' (1366,13)-(1366,16)
          ): ')' (1366,16)-(1366,17)
        compound_statement (1366,18)-(1391,6)
          {: '{' (1366,18)-(1366,19)
          case_statement (1367,5)-(1369,8)
            case: 'case' (1367,5)-(1367,9)
            call_expression (1367,10)-(1367,18)
              identifier: 'ZWC' (1367,10)-(1367,13)
              argument_list (1367,13)-(1367,18)
                (: '(' (1367,13)-(1367,14)
                char_literal (1367,14)-(1367,17)
                  ': ''' (1367,14)-(1367,15)
                  character: '(' (1367,15)-(1367,16)
                  ': ''' (1367,16)-(1367,17)
                ): ')' (1367,17)-(1367,18)
            :: ':' (1367,18)-(1367,19)
            expression_statement (1368,2)-(1368,17)
              assignment_expression (1368,2)-(1368,16)
                identifier: 'del' (1368,2)-(1368,5)
                =: '=' (1368,6)-(1368,7)
                call_expression (1368,8)-(1368,16)
                  identifier: 'ZWC' (1368,8)-(1368,11)
                  argument_list (1368,11)-(1368,16)
                    (: '(' (1368,11)-(1368,12)
                    char_literal (1368,12)-(1368,15)
                      ': ''' (1368,12)-(1368,13)
                      character: ')' (1368,13)-(1368,14)
                      ': ''' (1368,14)-(1368,15)
                    ): ')' (1368,15)-(1368,16)
              ;: ';' (1368,16)-(1368,17)
            break_statement (1369,2)-(1369,8)
              break: 'break' (1369,2)-(1369,7)
              ;: ';' (1369,7)-(1369,8)
          case_statement (1370,5)-(1372,8)
            case: 'case' (1370,5)-(1370,9)
            char_literal (1370,10)-(1370,13)
              ': ''' (1370,10)-(1370,11)
              character: '[' (1370,11)-(1370,12)
              ': ''' (1370,12)-(1370,13)
            :: ':' (1370,13)-(1370,14)
            expression_statement (1371,2)-(1371,17)
              assignment_expression (1371,2)-(1371,16)
                identifier: 'del' (1371,2)-(1371,5)
                =: '=' (1371,6)-(1371,7)
                call_expression (1371,8)-(1371,16)
                  identifier: 'ZWC' (1371,8)-(1371,11)
                  argument_list (1371,11)-(1371,16)
                    (: '(' (1371,11)-(1371,12)
                    char_literal (1371,12)-(1371,15)
                      ': ''' (1371,12)-(1371,13)
                      character: ']' (1371,13)-(1371,14)
                      ': ''' (1371,14)-(1371,15)
                    ): ')' (1371,15)-(1371,16)
              ;: ';' (1371,16)-(1371,17)
            break_statement (1372,2)-(1372,8)
              break: 'break' (1372,2)-(1372,7)
              ;: ';' (1372,7)-(1372,8)
          case_statement (1373,5)-(1375,8)
            case: 'case' (1373,5)-(1373,9)
            char_literal (1373,10)-(1373,13)
              ': ''' (1373,10)-(1373,11)
              character: '{' (1373,11)-(1373,12)
              ': ''' (1373,12)-(1373,13)
            :: ':' (1373,13)-(1373,14)
            expression_statement (1374,2)-(1374,17)
              assignment_expression (1374,2)-(1374,16)
                identifier: 'del' (1374,2)-(1374,5)
                =: '=' (1374,6)-(1374,7)
                call_expression (1374,8)-(1374,16)
                  identifier: 'ZWC' (1374,8)-(1374,11)
                  argument_list (1374,11)-(1374,16)
                    (: '(' (1374,11)-(1374,12)
                    char_literal (1374,12)-(1374,15)
                      ': ''' (1374,12)-(1374,13)
                      character: '}' (1374,13)-(1374,14)
                      ': ''' (1374,14)-(1374,15)
                    ): ')' (1374,15)-(1374,16)
              ;: ';' (1374,16)-(1374,17)
            break_statement (1375,2)-(1375,8)
              break: 'break' (1375,2)-(1375,7)
              ;: ';' (1375,7)-(1375,8)
          case_statement (1376,5)-(1378,8)
            case: 'case' (1376,5)-(1376,9)
            char_literal (1376,10)-(1376,13)
              ': ''' (1376,10)-(1376,11)
              character: '<' (1376,11)-(1376,12)
              ': ''' (1376,12)-(1376,13)
            :: ':' (1376,13)-(1376,14)
            expression_statement (1377,2)-(1377,17)
              assignment_expression (1377,2)-(1377,16)
                identifier: 'del' (1377,2)-(1377,5)
                =: '=' (1377,6)-(1377,7)
                call_expression (1377,8)-(1377,16)
                  identifier: 'ZWC' (1377,8)-(1377,11)
                  argument_list (1377,11)-(1377,16)
                    (: '(' (1377,11)-(1377,12)
                    char_literal (1377,12)-(1377,15)
                      ': ''' (1377,12)-(1377,13)
                      character: '>' (1377,13)-(1377,14)
                      ': ''' (1377,14)-(1377,15)
                    ): ')' (1377,15)-(1377,16)
              ;: ';' (1377,16)-(1377,17)
            break_statement (1378,2)-(1378,8)
              break: 'break' (1378,2)-(1378,7)
              ;: ';' (1378,7)-(1378,8)
          case_statement (1379,5)-(1381,8)
            case: 'case' (1379,5)-(1379,9)
            identifier: 'Inpar' (1379,10)-(1379,15)
            :: ':' (1379,15)-(1379,16)
            expression_statement (1380,2)-(1380,16)
              assignment_expression (1380,2)-(1380,15)
                identifier: 'ctok' (1380,2)-(1380,6)
                =: '=' (1380,7)-(1380,8)
                identifier: 'Outpar' (1380,9)-(1380,15)
              ;: ';' (1380,15)-(1380,16)
            break_statement (1381,2)-(1381,8)
              break: 'break' (1381,2)-(1381,7)
              ;: ';' (1381,7)-(1381,8)
          case_statement (1382,5)-(1384,8)
            case: 'case' (1382,5)-(1382,9)
            identifier: 'Inang' (1382,10)-(1382,15)
            :: ':' (1382,15)-(1382,16)
            expression_statement (1383,2)-(1383,16)
              assignment_expression (1383,2)-(1383,15)
                identifier: 'ctok' (1383,2)-(1383,6)
                =: '=' (1383,7)-(1383,8)
                identifier: 'Outang' (1383,9)-(1383,15)
              ;: ';' (1383,15)-(1383,16)
            break_statement (1384,2)-(1384,8)
              break: 'break' (1384,2)-(1384,7)
              ;: ';' (1384,7)-(1384,8)
          case_statement (1385,5)-(1387,8)
            case: 'case' (1385,5)-(1385,9)
            identifier: 'Inbrace' (1385,10)-(1385,17)
            :: ':' (1385,17)-(1385,18)
            expression_statement (1386,2)-(1386,18)
              assignment_expression (1386,2)-(1386,17)
                identifier: 'ctok' (1386,2)-(1386,6)
                =: '=' (1386,7)-(1386,8)
                identifier: 'Outbrace' (1386,9)-(1386,17)
              ;: ';' (1386,17)-(1386,18)
            break_statement (1387,2)-(1387,8)
              break: 'break' (1387,2)-(1387,7)
              ;: ';' (1387,7)-(1387,8)
          case_statement (1388,5)-(1390,8)
            case: 'case' (1388,5)-(1388,9)
            identifier: 'Inbrack' (1388,10)-(1388,17)
            :: ':' (1388,17)-(1388,18)
            expression_statement (1389,2)-(1389,18)
              assignment_expression (1389,2)-(1389,17)
                identifier: 'ctok' (1389,2)-(1389,6)
                =: '=' (1389,7)-(1389,8)
                identifier: 'Outbrack' (1389,9)-(1389,17)
              ;: ';' (1389,17)-(1389,18)
            break_statement (1390,2)-(1390,8)
              break: 'break' (1390,2)-(1390,7)
              ;: ';' (1390,7)-(1390,8)
          }: '}' (1391,5)-(1391,6)
      if_statement (1393,5)-(1413,6)
        if: 'if' (1393,5)-(1393,7)
        parenthesized_expression (1393,8)-(1393,14)
          (: '(' (1393,8)-(1393,9)
          identifier: 'ctok' (1393,9)-(1393,13)
          ): ')' (1393,13)-(1393,14)
        compound_statement (1393,15)-(1400,6)
          {: '{' (1393,15)-(1393,16)
          comment: '/*
	 * Looking for a matching token; we want the literal byte,
	 * not a decoded multibyte character, so search specially.
	 */' (1394,2)-(1397,5)
          while_statement (1398,2)-(1399,10)
            while: 'while' (1398,2)-(1398,7)
            parenthesized_expression (1398,8)-(1398,26)
              (: '(' (1398,8)-(1398,9)
              binary_expression (1398,9)-(1398,25)
                pointer_expression (1398,9)-(1398,11)
                  *: '*' (1398,9)-(1398,10)
                  identifier: 's' (1398,10)-(1398,11)
                &&: '&&' (1398,12)-(1398,14)
                binary_expression (1398,15)-(1398,25)
                  pointer_expression (1398,15)-(1398,17)
                    *: '*' (1398,15)-(1398,16)
                    identifier: 's' (1398,16)-(1398,17)
                  !=: '!=' (1398,18)-(1398,20)
                  identifier: 'ctok' (1398,21)-(1398,25)
              ): ')' (1398,25)-(1398,26)
            expression_statement (1399,6)-(1399,10)
              update_expression (1399,6)-(1399,9)
                identifier: 's' (1399,6)-(1399,7)
                ++: '++' (1399,7)-(1399,9)
              ;: ';' (1399,9)-(1399,10)
          }: '}' (1400,5)-(1400,6)
        else_clause (1400,7)-(1413,6)
          else: 'else' (1400,7)-(1400,11)
          compound_statement (1400,12)-(1413,6)
            {: '{' (1400,12)-(1400,13)
            declaration (1401,2)-(1401,18)
              type_identifier: 'convchar_t' (1401,2)-(1401,12)
              identifier: 'del2' (1401,13)-(1401,17)
              ;: ';' (1401,17)-(1401,18)
            expression_statement (1402,2)-(1402,10)
              assignment_expression (1402,2)-(1402,9)
                identifier: 'len' (1402,2)-(1402,5)
                =: '=' (1402,6)-(1402,7)
                number_literal: '0' (1402,8)-(1402,9)
              ;: ';' (1402,9)-(1402,10)
            while_statement (1403,2)-(1412,3)
              while: 'while' (1403,2)-(1403,7)
              parenthesized_expression (1403,8)-(1403,12)
                (: '(' (1403,8)-(1403,9)
                pointer_expression (1403,9)-(1403,11)
                  *: '*' (1403,9)-(1403,10)
                  identifier: 's' (1403,10)-(1403,11)
                ): ')' (1403,11)-(1403,12)
              compound_statement (1403,13)-(1412,3)
                {: '{' (1403,13)-(1403,14)
                expression_statement (1404,6)-(1404,41)
                  assignment_expression (1404,6)-(1404,40)
                    identifier: 'len' (1404,6)-(1404,9)
                    =: '=' (1404,10)-(1404,11)
                    call_expression (1404,12)-(1404,40)
                      identifier: 'MB_METACHARLENCONV' (1404,12)-(1404,30)
                      argument_list (1404,30)-(1404,40)
                        (: '(' (1404,30)-(1404,31)
                        identifier: 's' (1404,31)-(1404,32)
                        ,: ',' (1404,32)-(1404,33)
                        pointer_expression (1404,34)-(1404,39)
                          &: '&' (1404,34)-(1404,35)
                          identifier: 'del2' (1404,35)-(1404,39)
                        ): ')' (1404,39)-(1404,40)
                  ;: ';' (1404,40)-(1404,41)
                preproc_ifdef (1405,1)-(1408,7)
                  #ifdef: '#ifdef' (1405,1)-(1405,7)
                  identifier: 'MULTIBYTE_SUPPORT' (1405,8)-(1405,25)
                  if_statement (1406,6)-(1407,50)
                    if: 'if' (1406,6)-(1406,8)
                    parenthesized_expression (1406,9)-(1406,23)
                      (: '(' (1406,9)-(1406,10)
                      binary_expression (1406,10)-(1406,22)
                        identifier: 'del2' (1406,10)-(1406,14)
                        ==: '==' (1406,15)-(1406,17)
                        identifier: 'WEOF' (1406,18)-(1406,22)
                      ): ')' (1406,22)-(1406,23)
                    expression_statement (1407,3)-(1407,50)
                      assignment_expression (1407,3)-(1407,49)
                        identifier: 'del2' (1407,3)-(1407,7)
                        =: '=' (1407,8)-(1407,9)
                        call_expression (1407,10)-(1407,49)
                          parenthesized_expression (1407,10)-(1407,18)
                            (: '(' (1407,10)-(1407,11)
                            identifier: 'wint_t' (1407,11)-(1407,17)
                            ): ')' (1407,17)-(1407,18)
                          argument_list (1407,18)-(1407,49)
                            (: '(' (1407,18)-(1407,19)
                            conditional_expression (1407,19)-(1407,48)
                              parenthesized_expression (1407,19)-(1407,31)
                                (: '(' (1407,19)-(1407,20)
                                binary_expression (1407,20)-(1407,30)
                                  pointer_expression (1407,20)-(1407,22)
                                    *: '*' (1407,20)-(1407,21)
                                    identifier: 's' (1407,21)-(1407,22)
                                  ==: '==' (1407,23)-(1407,25)
                                  identifier: 'Meta' (1407,26)-(1407,30)
                                ): ')' (1407,30)-(1407,31)
                              ?: '?' (1407,32)-(1407,33)
                              binary_expression (1407,34)-(1407,43)
                                subscript_expression (1407,34)-(1407,38)
                                  identifier: 's' (1407,34)-(1407,35)
                                  [: '[' (1407,35)-(1407,36)
                                  number_literal: '1' (1407,36)-(1407,37)
                                  ]: ']' (1407,37)-(1407,38)
                                ^: '^' (1407,39)-(1407,40)
                                number_literal: '32' (1407,41)-(1407,43)
                              :: ':' (1407,44)-(1407,45)
                              pointer_expression (1407,46)-(1407,48)
                                *: '*' (1407,46)-(1407,47)
                                identifier: 's' (1407,47)-(1407,48)
                            ): ')' (1407,48)-(1407,49)
                      ;: ';' (1407,49)-(1407,50)
                  #endif: '#endif' (1408,1)-(1408,7)
                if_statement (1409,6)-(1410,9)
                  if: 'if' (1409,6)-(1409,8)
                  parenthesized_expression (1409,9)-(1409,22)
                    (: '(' (1409,9)-(1409,10)
                    binary_expression (1409,10)-(1409,21)
                      identifier: 'del' (1409,10)-(1409,13)
                      ==: '==' (1409,14)-(1409,16)
                      identifier: 'del2' (1409,17)-(1409,21)
                    ): ')' (1409,21)-(1409,22)
                  break_statement (1410,3)-(1410,9)
                    break: 'break' (1410,3)-(1410,8)
                    ;: ';' (1410,8)-(1410,9)
                expression_statement (1411,6)-(1411,15)
                  assignment_expression (1411,6)-(1411,14)
                    identifier: 's' (1411,6)-(1411,7)
                    +=: '+=' (1411,8)-(1411,10)
                    identifier: 'len' (1411,11)-(1411,14)
                  ;: ';' (1411,14)-(1411,15)
                }: '}' (1412,2)-(1412,3)
            }: '}' (1413,5)-(1413,6)
      expression_statement (1415,5)-(1415,17)
        assignment_expression (1415,5)-(1415,16)
          pointer_expression (1415,5)-(1415,10)
            *: '*' (1415,5)-(1415,6)
            identifier: 'lenp' (1415,6)-(1415,10)
          =: '=' (1415,11)-(1415,12)
          identifier: 'len' (1415,13)-(1415,16)
        ;: ';' (1415,16)-(1415,17)
      return_statement (1416,5)-(1416,14)
        return: 'return' (1416,5)-(1416,11)
        identifier: 's' (1416,12)-(1416,13)
        ;: ';' (1416,13)-(1416,14)
      }: '}' (1417,1)-(1417,2)
  comment: '/*
 * Get an integer argument; update *s to the end of the
 * final delimiter.  *delmatchp is set to the length of the
 * matched delimiter if we have matching, delimiters and there was no error in
 * the evaluation, else 0.
 */' (1419,1)-(1424,4)
  comment: '/**/' (1426,1)-(1426,5)
  function_definition (1427,1)-(1455,2)
    storage_class_specifier (1427,1)-(1427,7)
      static: 'static' (1427,1)-(1427,7)
    primitive_type: 'int' (1427,8)-(1427,11)
    function_declarator (1428,1)-(1428,37)
      identifier: 'get_intarg' (1428,1)-(1428,11)
      parameter_list (1428,11)-(1428,37)
        (: '(' (1428,11)-(1428,12)
        parameter_declaration (1428,12)-(1428,20)
          primitive_type: 'char' (1428,12)-(1428,16)
          pointer_declarator (1428,17)-(1428,20)
            *: '*' (1428,17)-(1428,18)
            pointer_declarator (1428,18)-(1428,20)
              *: '*' (1428,18)-(1428,19)
              identifier: 's' (1428,19)-(1428,20)
        ,: ',' (1428,20)-(1428,21)
        parameter_declaration (1428,22)-(1428,36)
          primitive_type: 'int' (1428,22)-(1428,25)
          pointer_declarator (1428,26)-(1428,36)
            *: '*' (1428,26)-(1428,27)
            identifier: 'delmatchp' (1428,27)-(1428,36)
        ): ')' (1428,36)-(1428,37)
    compound_statement (1429,1)-(1455,2)
      {: '{' (1429,1)-(1429,2)
      declaration (1430,5)-(1430,16)
        primitive_type: 'int' (1430,5)-(1430,8)
        identifier: 'arglen' (1430,9)-(1430,15)
        ;: ';' (1430,15)-(1430,16)
      declaration (1431,5)-(1431,39)
        primitive_type: 'char' (1431,5)-(1431,9)
        init_declarator (1431,10)-(1431,38)
          pointer_declarator (1431,10)-(1431,12)
            *: '*' (1431,10)-(1431,11)
            identifier: 't' (1431,11)-(1431,12)
          =: '=' (1431,13)-(1431,14)
          call_expression (1431,15)-(1431,38)
            identifier: 'get_strarg' (1431,15)-(1431,25)
            argument_list (1431,25)-(1431,38)
              (: '(' (1431,25)-(1431,26)
              pointer_expression (1431,26)-(1431,28)
                *: '*' (1431,26)-(1431,27)
                identifier: 's' (1431,27)-(1431,28)
              ,: ',' (1431,28)-(1431,29)
              pointer_expression (1431,30)-(1431,37)
                &: '&' (1431,30)-(1431,31)
                identifier: 'arglen' (1431,31)-(1431,37)
              ): ')' (1431,37)-(1431,38)
        ;: ';' (1431,38)-(1431,39)
      declaration (1432,5)-(1432,18)
        primitive_type: 'char' (1432,5)-(1432,9)
        pointer_declarator (1432,10)-(1432,12)
          *: '*' (1432,10)-(1432,11)
          identifier: 'p' (1432,11)-(1432,12)
        ,: ',' (1432,12)-(1432,13)
        identifier: 'sav' (1432,14)-(1432,17)
        ;: ';' (1432,17)-(1432,18)
      declaration (1433,5)-(1433,15)
        type_identifier: 'zlong' (1433,5)-(1433,10)
        identifier: 'ret' (1433,11)-(1433,14)
        ;: ';' (1433,14)-(1433,15)
      expression_statement (1435,5)-(1435,20)
        assignment_expression (1435,5)-(1435,19)
          pointer_expression (1435,5)-(1435,15)
            *: '*' (1435,5)-(1435,6)
            identifier: 'delmatchp' (1435,6)-(1435,15)
          =: '=' (1435,16)-(1435,17)
          number_literal: '0' (1435,18)-(1435,19)
        ;: ';' (1435,19)-(1435,20)
      if_statement (1436,5)-(1437,12)
        if: 'if' (1436,5)-(1436,7)
        parenthesized_expression (1436,8)-(1436,13)
          (: '(' (1436,8)-(1436,9)
          unary_expression (1436,9)-(1436,12)
            !: '!' (1436,9)-(1436,10)
            pointer_expression (1436,10)-(1436,12)
              *: '*' (1436,10)-(1436,11)
              identifier: 't' (1436,11)-(1436,12)
          ): ')' (1436,12)-(1436,13)
        return_statement (1437,2)-(1437,12)
          return: 'return' (1437,2)-(1437,8)
          number_literal: '-1' (1437,9)-(1437,11)
          ;: ';' (1437,11)-(1437,12)
      expression_statement (1438,5)-(1438,14)
        assignment_expression (1438,5)-(1438,13)
          identifier: 'sav' (1438,5)-(1438,8)
          =: '=' (1438,9)-(1438,10)
          pointer_expression (1438,11)-(1438,13)
            *: '*' (1438,11)-(1438,12)
            identifier: 't' (1438,12)-(1438,13)
        ;: ';' (1438,13)-(1438,14)
      expression_statement (1439,5)-(1439,15)
        assignment_expression (1439,5)-(1439,14)
          pointer_expression (1439,5)-(1439,7)
            *: '*' (1439,5)-(1439,6)
            identifier: 't' (1439,6)-(1439,7)
          =: '=' (1439,8)-(1439,9)
          char_literal (1439,10)-(1439,14)
            ': ''' (1439,10)-(1439,11)
            escape_sequence: '\0' (1439,11)-(1439,13)
            ': ''' (1439,13)-(1439,14)
        ;: ';' (1439,14)-(1439,15)
      expression_statement (1440,5)-(1440,32)
        assignment_expression (1440,5)-(1440,31)
          identifier: 'p' (1440,5)-(1440,6)
          =: '=' (1440,7)-(1440,8)
          call_expression (1440,9)-(1440,31)
            identifier: 'dupstring' (1440,9)-(1440,18)
            argument_list (1440,18)-(1440,31)
              (: '(' (1440,18)-(1440,19)
              binary_expression (1440,19)-(1440,30)
                pointer_expression (1440,19)-(1440,21)
                  *: '*' (1440,19)-(1440,20)
                  identifier: 's' (1440,20)-(1440,21)
                +: '+' (1440,22)-(1440,23)
                identifier: 'arglen' (1440,24)-(1440,30)
              ): ')' (1440,30)-(1440,31)
        ;: ';' (1440,31)-(1440,32)
      expression_statement (1441,5)-(1441,21)
        assignment_expression (1441,5)-(1441,20)
          pointer_expression (1441,5)-(1441,7)
            *: '*' (1441,5)-(1441,6)
            identifier: 's' (1441,6)-(1441,7)
          =: '=' (1441,8)-(1441,9)
          binary_expression (1441,10)-(1441,20)
            identifier: 't' (1441,10)-(1441,11)
            +: '+' (1441,12)-(1441,13)
            identifier: 'arglen' (1441,14)-(1441,20)
        ;: ';' (1441,20)-(1441,21)
      expression_statement (1442,5)-(1442,14)
        assignment_expression (1442,5)-(1442,13)
          pointer_expression (1442,5)-(1442,7)
            *: '*' (1442,5)-(1442,6)
            identifier: 't' (1442,6)-(1442,7)
          =: '=' (1442,8)-(1442,9)
          identifier: 'sav' (1442,10)-(1442,13)
        ;: ';' (1442,13)-(1442,14)
      if_statement (1443,5)-(1444,12)
        if: 'if' (1443,5)-(1443,7)
        parenthesized_expression (1443,8)-(1443,22)
          (: '(' (1443,8)-(1443,9)
          call_expression (1443,9)-(1443,21)
            identifier: 'parsestr' (1443,9)-(1443,17)
            argument_list (1443,17)-(1443,21)
              (: '(' (1443,17)-(1443,18)
              pointer_expression (1443,18)-(1443,20)
                &: '&' (1443,18)-(1443,19)
                identifier: 'p' (1443,19)-(1443,20)
              ): ')' (1443,20)-(1443,21)
          ): ')' (1443,21)-(1443,22)
        return_statement (1444,2)-(1444,12)
          return: 'return' (1444,2)-(1444,8)
          number_literal: '-1' (1444,9)-(1444,11)
          ;: ';' (1444,11)-(1444,12)
      expression_statement (1445,5)-(1445,17)
        call_expression (1445,5)-(1445,16)
          identifier: 'singsub' (1445,5)-(1445,12)
          argument_list (1445,12)-(1445,16)
            (: '(' (1445,12)-(1445,13)
            pointer_expression (1445,13)-(1445,15)
              &: '&' (1445,13)-(1445,14)
              identifier: 'p' (1445,14)-(1445,15)
            ): ')' (1445,15)-(1445,16)
        ;: ';' (1445,16)-(1445,17)
      if_statement (1446,5)-(1447,12)
        if: 'if' (1446,5)-(1446,7)
        parenthesized_expression (1446,8)-(1446,17)
          (: '(' (1446,8)-(1446,9)
          identifier: 'errflag' (1446,9)-(1446,16)
          ): ')' (1446,16)-(1446,17)
        return_statement (1447,2)-(1447,12)
          return: 'return' (1447,2)-(1447,8)
          number_literal: '-1' (1447,9)-(1447,11)
          ;: ';' (1447,11)-(1447,12)
      expression_statement (1448,5)-(1448,24)
        assignment_expression (1448,5)-(1448,23)
          identifier: 'ret' (1448,5)-(1448,8)
          =: '=' (1448,9)-(1448,10)
          call_expression (1448,11)-(1448,23)
            identifier: 'mathevali' (1448,11)-(1448,20)
            argument_list (1448,20)-(1448,23)
              (: '(' (1448,20)-(1448,21)
              identifier: 'p' (1448,21)-(1448,22)
              ): ')' (1448,22)-(1448,23)
        ;: ';' (1448,23)-(1448,24)
      if_statement (1449,5)-(1450,12)
        if: 'if' (1449,5)-(1449,7)
        parenthesized_expression (1449,8)-(1449,17)
          (: '(' (1449,8)-(1449,9)
          identifier: 'errflag' (1449,9)-(1449,16)
          ): ')' (1449,16)-(1449,17)
        return_statement (1450,2)-(1450,12)
          return: 'return' (1450,2)-(1450,8)
          number_literal: '-1' (1450,9)-(1450,11)
          ;: ';' (1450,11)-(1450,12)
      if_statement (1451,5)-(1452,13)
        if: 'if' (1451,5)-(1451,7)
        parenthesized_expression (1451,8)-(1451,17)
          (: '(' (1451,8)-(1451,9)
          binary_expression (1451,9)-(1451,16)
            identifier: 'ret' (1451,9)-(1451,12)
            <: '<' (1451,13)-(1451,14)
            number_literal: '0' (1451,15)-(1451,16)
          ): ')' (1451,16)-(1451,17)
        expression_statement (1452,2)-(1452,13)
          assignment_expression (1452,2)-(1452,12)
            identifier: 'ret' (1452,2)-(1452,5)
            =: '=' (1452,6)-(1452,7)
            unary_expression (1452,8)-(1452,12)
              -: '-' (1452,8)-(1452,9)
              identifier: 'ret' (1452,9)-(1452,12)
          ;: ';' (1452,12)-(1452,13)
      expression_statement (1453,5)-(1453,25)
        assignment_expression (1453,5)-(1453,24)
          pointer_expression (1453,5)-(1453,15)
            *: '*' (1453,5)-(1453,6)
            identifier: 'delmatchp' (1453,6)-(1453,15)
          =: '=' (1453,16)-(1453,17)
          identifier: 'arglen' (1453,18)-(1453,24)
        ;: ';' (1453,24)-(1453,25)
      return_statement (1454,5)-(1454,16)
        return: 'return' (1454,5)-(1454,11)
        identifier: 'ret' (1454,12)-(1454,15)
        ;: ';' (1454,15)-(1454,16)
      }: '}' (1455,1)-(1455,2)
  comment: '/* Parsing for the (e) flag. */' (1457,1)-(1457,32)
  function_definition (1459,1)-(1485,2)
    storage_class_specifier (1459,1)-(1459,7)
      static: 'static' (1459,1)-(1459,7)
    primitive_type: 'int' (1459,8)-(1459,11)
    function_declarator (1460,1)-(1460,48)
      identifier: 'subst_parse_str' (1460,1)-(1460,16)
      parameter_list (1460,16)-(1460,48)
        (: '(' (1460,16)-(1460,17)
        parameter_declaration (1460,17)-(1460,26)
          primitive_type: 'char' (1460,17)-(1460,21)
          pointer_declarator (1460,22)-(1460,26)
            *: '*' (1460,22)-(1460,23)
            pointer_declarator (1460,23)-(1460,26)
              *: '*' (1460,23)-(1460,24)
              identifier: 'sp' (1460,24)-(1460,26)
        ,: ',' (1460,26)-(1460,27)
        parameter_declaration (1460,28)-(1460,38)
          primitive_type: 'int' (1460,28)-(1460,31)
          identifier: 'single' (1460,32)-(1460,38)
        ,: ',' (1460,38)-(1460,39)
        parameter_declaration (1460,40)-(1460,47)
          primitive_type: 'int' (1460,40)-(1460,43)
          identifier: 'err' (1460,44)-(1460,47)
        ): ')' (1460,47)-(1460,48)
    compound_statement (1461,1)-(1485,2)
      {: '{' (1461,1)-(1461,2)
      declaration (1462,5)-(1462,13)
        primitive_type: 'char' (1462,5)-(1462,9)
        pointer_declarator (1462,10)-(1462,12)
          *: '*' (1462,10)-(1462,11)
          identifier: 's' (1462,11)-(1462,12)
        ;: ';' (1462,12)-(1462,13)
      expression_statement (1464,5)-(1464,30)
        assignment_expression (1464,5)-(1464,29)
          pointer_expression (1464,5)-(1464,8)
            *: '*' (1464,5)-(1464,6)
            identifier: 'sp' (1464,6)-(1464,8)
          =: '=' (1464,9)-(1464,10)
          assignment_expression (1464,11)-(1464,29)
            identifier: 's' (1464,11)-(1464,12)
            =: '=' (1464,13)-(1464,14)
            call_expression (1464,15)-(1464,29)
              identifier: 'dupstring' (1464,15)-(1464,24)
              argument_list (1464,24)-(1464,29)
                (: '(' (1464,24)-(1464,25)
                pointer_expression (1464,25)-(1464,28)
                  *: '*' (1464,25)-(1464,26)
                  identifier: 'sp' (1464,26)-(1464,28)
                ): ')' (1464,28)-(1464,29)
        ;: ';' (1464,29)-(1464,30)
      if_statement (1466,5)-(1483,6)
        if: 'if' (1466,5)-(1466,7)
        parenthesized_expression (1466,8)-(1466,51)
          (: '(' (1466,8)-(1466,9)
          unary_expression (1466,9)-(1466,50)
            !: '!' (1466,9)-(1466,10)
            parenthesized_expression (1466,10)-(1466,50)
              (: '(' (1466,10)-(1466,11)
              conditional_expression (1466,11)-(1466,49)
                identifier: 'err' (1466,11)-(1466,14)
                ?: '?' (1466,15)-(1466,16)
                call_expression (1466,17)-(1466,29)
                  identifier: 'parsestr' (1466,17)-(1466,25)
                  argument_list (1466,25)-(1466,29)
                    (: '(' (1466,25)-(1466,26)
                    pointer_expression (1466,26)-(1466,28)
                      &: '&' (1466,26)-(1466,27)
                      identifier: 's' (1466,27)-(1466,28)
                    ): ')' (1466,28)-(1466,29)
                :: ':' (1466,30)-(1466,31)
                call_expression (1466,32)-(1466,49)
                  identifier: 'parsestrnoerr' (1466,32)-(1466,45)
                  argument_list (1466,45)-(1466,49)
                    (: '(' (1466,45)-(1466,46)
                    pointer_expression (1466,46)-(1466,48)
                      &: '&' (1466,46)-(1466,47)
                      identifier: 's' (1466,47)-(1466,48)
                    ): ')' (1466,48)-(1466,49)
              ): ')' (1466,49)-(1466,50)
          ): ')' (1466,50)-(1466,51)
        compound_statement (1466,52)-(1483,6)
          {: '{' (1466,52)-(1466,53)
          expression_statement (1467,2)-(1467,10)
            assignment_expression (1467,2)-(1467,9)
              pointer_expression (1467,2)-(1467,5)
                *: '*' (1467,2)-(1467,3)
                identifier: 'sp' (1467,3)-(1467,5)
              =: '=' (1467,6)-(1467,7)
              identifier: 's' (1467,8)-(1467,9)
            ;: ';' (1467,9)-(1467,10)
          if_statement (1468,2)-(1481,3)
            if: 'if' (1468,2)-(1468,4)
            parenthesized_expression (1468,5)-(1468,14)
              (: '(' (1468,5)-(1468,6)
              unary_expression (1468,6)-(1468,13)
                !: '!' (1468,6)-(1468,7)
                identifier: 'single' (1468,7)-(1468,13)
              ): ')' (1468,13)-(1468,14)
            compound_statement (1468,15)-(1481,3)
              {: '{' (1468,15)-(1468,16)
              declaration (1469,13)-(1469,24)
                primitive_type: 'int' (1469,13)-(1469,16)
                init_declarator (1469,17)-(1469,23)
                  identifier: 'qt' (1469,17)-(1469,19)
                  =: '=' (1469,20)-(1469,21)
                  number_literal: '0' (1469,22)-(1469,23)
                ;: ';' (1469,23)-(1469,24)
              for_statement (1471,6)-(1480,7)
                for: 'for' (1471,6)-(1471,9)
                (: '(' (1471,10)-(1471,11)
                ;: ';' (1471,11)-(1471,12)
                pointer_expression (1471,13)-(1471,15)
                  *: '*' (1471,13)-(1471,14)
                  identifier: 's' (1471,14)-(1471,15)
                ;: ';' (1471,15)-(1471,16)
                update_expression (1471,17)-(1471,20)
                  identifier: 's' (1471,17)-(1471,18)
                  ++: '++' (1471,18)-(1471,20)
                ): ')' (1471,20)-(1471,21)
                compound_statement (1471,22)-(1480,7)
                  {: '{' (1471,22)-(1471,23)
                  if_statement (1472,3)-(1477,18)
                    if: 'if' (1472,3)-(1472,5)
                    parenthesized_expression (1472,6)-(1472,11)
                      (: '(' (1472,6)-(1472,7)
                      unary_expression (1472,7)-(1472,10)
                        !: '!' (1472,7)-(1472,8)
                        identifier: 'qt' (1472,8)-(1472,10)
                      ): ')' (1472,10)-(1472,11)
                    compound_statement (1472,12)-(1477,18)
                      {: '{' (1472,12)-(1472,13)
                      if_statement (1473,7)-(1476,14)
                        if: 'if' (1473,7)-(1473,9)
                        parenthesized_expression (1473,10)-(1473,25)
                          (: '(' (1473,10)-(1473,11)
                          binary_expression (1473,11)-(1473,24)
                            pointer_expression (1473,11)-(1473,13)
                              *: '*' (1473,11)-(1473,12)
                              identifier: 's' (1473,12)-(1473,13)
                            ==: '==' (1473,14)-(1473,16)
                            identifier: 'Qstring' (1473,17)-(1473,24)
                          ): ')' (1473,24)-(1473,25)
                        expression_statement (1474,4)-(1474,16)
                          assignment_expression (1474,4)-(1474,15)
                            pointer_expression (1474,4)-(1474,6)
                              *: '*' (1474,4)-(1474,5)
                              identifier: 's' (1474,5)-(1474,6)
                            =: '=' (1474,7)-(1474,8)
                            identifier: 'String' (1474,9)-(1474,15)
                          ;: ';' (1474,15)-(1474,16)
                        else_clause (1475,7)-(1476,14)
                          else: 'else' (1475,7)-(1475,11)
                          if_statement (1475,12)-(1476,14)
                            if: 'if' (1475,12)-(1475,14)
                            parenthesized_expression (1475,15)-(1475,28)
                              (: '(' (1475,15)-(1475,16)
                              binary_expression (1475,16)-(1475,27)
                                pointer_expression (1475,16)-(1475,18)
                                  *: '*' (1475,16)-(1475,17)
                                  identifier: 's' (1475,17)-(1475,18)
                                ==: '==' (1475,19)-(1475,21)
                                identifier: 'Qtick' (1475,22)-(1475,27)
                              ): ')' (1475,27)-(1475,28)
                            expression_statement (1476,4)-(1476,14)
                              assignment_expression (1476,4)-(1476,13)
                                pointer_expression (1476,4)-(1476,6)
                                  *: '*' (1476,4)-(1476,5)
                                  identifier: 's' (1476,5)-(1476,6)
                                =: '=' (1476,7)-(1476,8)
                                identifier: 'Tick' (1476,9)-(1476,13)
                              ;: ';' (1476,13)-(1476,14)
                      }: '}' (1477,17)-(1477,18)
                  if_statement (1478,3)-(1479,30)
                    if: 'if' (1478,3)-(1478,5)
                    parenthesized_expression (1478,6)-(1478,19)
                      (: '(' (1478,6)-(1478,7)
                      binary_expression (1478,7)-(1478,18)
                        pointer_expression (1478,7)-(1478,9)
                          *: '*' (1478,7)-(1478,8)
                          identifier: 's' (1478,8)-(1478,9)
                        ==: '==' (1478,10)-(1478,12)
                        identifier: 'Dnull' (1478,13)-(1478,18)
                      ): ')' (1478,18)-(1478,19)
                    expression_statement (1479,21)-(1479,30)
                      assignment_expression (1479,21)-(1479,29)
                        identifier: 'qt' (1479,21)-(1479,23)
                        =: '=' (1479,24)-(1479,25)
                        unary_expression (1479,26)-(1479,29)
                          !: '!' (1479,26)-(1479,27)
                          identifier: 'qt' (1479,27)-(1479,29)
                      ;: ';' (1479,29)-(1479,30)
                  }: '}' (1480,6)-(1480,7)
              }: '}' (1481,2)-(1481,3)
          return_statement (1482,2)-(1482,11)
            return: 'return' (1482,2)-(1482,8)
            number_literal: '0' (1482,9)-(1482,10)
            ;: ';' (1482,10)-(1482,11)
          }: '}' (1483,5)-(1483,6)
      return_statement (1484,5)-(1484,14)
        return: 'return' (1484,5)-(1484,11)
        number_literal: '1' (1484,12)-(1484,13)
        ;: ';' (1484,13)-(1484,14)
      }: '}' (1485,1)-(1485,2)
  comment: '/* Evaluation for (#) flag */' (1487,1)-(1487,30)
  function_definition (1489,1)-(1514,2)
    storage_class_specifier (1489,1)-(1489,7)
      static: 'static' (1489,1)-(1489,7)
    primitive_type: 'char' (1489,8)-(1489,12)
    pointer_declarator (1489,13)-(1490,25)
      *: '*' (1489,13)-(1489,14)
      function_declarator (1490,1)-(1490,25)
        identifier: 'substevalchar' (1490,1)-(1490,14)
        parameter_list (1490,14)-(1490,25)
          (: '(' (1490,14)-(1490,15)
          parameter_declaration (1490,15)-(1490,24)
            primitive_type: 'char' (1490,15)-(1490,19)
            pointer_declarator (1490,20)-(1490,24)
              *: '*' (1490,20)-(1490,21)
              identifier: 'ptr' (1490,21)-(1490,24)
          ): ')' (1490,24)-(1490,25)
    compound_statement (1491,1)-(1514,2)
      {: '{' (1491,1)-(1491,2)
      declaration (1492,5)-(1492,33)
        type_identifier: 'zlong' (1492,5)-(1492,10)
        init_declarator (1492,11)-(1492,32)
          identifier: 'ires' (1492,11)-(1492,15)
          =: '=' (1492,16)-(1492,17)
          call_expression (1492,18)-(1492,32)
            identifier: 'mathevali' (1492,18)-(1492,27)
            argument_list (1492,27)-(1492,32)
              (: '(' (1492,27)-(1492,28)
              identifier: 'ptr' (1492,28)-(1492,31)
              ): ')' (1492,31)-(1492,32)
        ;: ';' (1492,32)-(1492,33)
      declaration (1493,5)-(1493,17)
        primitive_type: 'int' (1493,5)-(1493,8)
        init_declarator (1493,9)-(1493,16)
          identifier: 'len' (1493,9)-(1493,12)
          =: '=' (1493,13)-(1493,14)
          number_literal: '0' (1493,15)-(1493,16)
        ;: ';' (1493,16)-(1493,17)
      if_statement (1495,5)-(1496,14)
        if: 'if' (1495,5)-(1495,7)
        parenthesized_expression (1495,8)-(1495,17)
          (: '(' (1495,8)-(1495,9)
          identifier: 'errflag' (1495,9)-(1495,16)
          ): ')' (1495,16)-(1495,17)
        return_statement (1496,2)-(1496,14)
          return: 'return' (1496,2)-(1496,8)
          null (1496,9)-(1496,13)
            NULL: 'NULL' (1496,9)-(1496,13)
          ;: ';' (1496,13)-(1496,14)
      preproc_ifdef (1497,1)-(1507,7)
        #ifdef: '#ifdef' (1497,1)-(1497,7)
        identifier: 'MULTIBYTE_SUPPORT' (1497,8)-(1497,25)
        if_statement (1498,5)-(1505,6)
          if: 'if' (1498,5)-(1498,7)
          parenthesized_expression (1498,8)-(1498,40)
            (: '(' (1498,8)-(1498,9)
            binary_expression (1498,9)-(1498,39)
              call_expression (1498,9)-(1498,25)
                identifier: 'isset' (1498,9)-(1498,14)
                argument_list (1498,14)-(1498,25)
                  (: '(' (1498,14)-(1498,15)
                  identifier: 'MULTIBYTE' (1498,15)-(1498,24)
                  ): ')' (1498,24)-(1498,25)
              &&: '&&' (1498,26)-(1498,28)
              binary_expression (1498,29)-(1498,39)
                identifier: 'ires' (1498,29)-(1498,33)
                >: '>' (1498,34)-(1498,35)
                number_literal: '127' (1498,36)-(1498,39)
            ): ')' (1498,39)-(1498,40)
          compound_statement (1498,41)-(1505,6)
            {: '{' (1498,41)-(1498,42)
            comment: '/* '\\' + 'U' + 8 bytes of character + '\0' */' (1499,2)-(1499,48)
            declaration (1500,2)-(1500,15)
              primitive_type: 'char' (1500,2)-(1500,6)
              array_declarator (1500,7)-(1500,14)
                identifier: 'buf' (1500,7)-(1500,10)
                [: '[' (1500,10)-(1500,11)
                number_literal: '11' (1500,11)-(1500,13)
                ]: ']' (1500,13)-(1500,14)
              ;: ';' (1500,14)-(1500,15)
            comment: '/* inefficient: should separate out \U handling from getkeystring */' (1502,2)-(1502,70)
            expression_statement (1503,2)-(1503,60)
              call_expression (1503,2)-(1503,59)
                identifier: 'sprintf' (1503,2)-(1503,9)
                argument_list (1503,9)-(1503,59)
                  (: '(' (1503,9)-(1503,10)
                  identifier: 'buf' (1503,10)-(1503,13)
                  ,: ',' (1503,13)-(1503,14)
                  string_literal (1503,15)-(1503,24)
                    ": '"' (1503,15)-(1503,16)
                    escape_sequence: '\\' (1503,16)-(1503,18)
                    string_content: 'U%.8x' (1503,18)-(1503,23)
                    ": '"' (1503,23)-(1503,24)
                  ,: ',' (1503,24)-(1503,25)
                  binary_expression (1503,26)-(1503,58)
                    cast_expression (1503,26)-(1503,44)
                      (: '(' (1503,26)-(1503,27)
                      type_descriptor (1503,27)-(1503,39)
                        sized_type_specifier (1503,27)-(1503,39)
                          unsigned: 'unsigned' (1503,27)-(1503,35)
                          primitive_type: 'int' (1503,36)-(1503,39)
                      ): ')' (1503,39)-(1503,40)
                      identifier: 'ires' (1503,40)-(1503,44)
                    &: '&' (1503,45)-(1503,46)
                    number_literal: '0xFFFFFFFFu' (1503,47)-(1503,58)
                  ): ')' (1503,58)-(1503,59)
              ;: ';' (1503,59)-(1503,60)
            expression_statement (1504,2)-(1504,55)
              assignment_expression (1504,2)-(1504,54)
                identifier: 'ptr' (1504,2)-(1504,5)
                =: '=' (1504,6)-(1504,7)
                call_expression (1504,8)-(1504,54)
                  identifier: 'getkeystring' (1504,8)-(1504,20)
                  argument_list (1504,20)-(1504,54)
                    (: '(' (1504,20)-(1504,21)
                    identifier: 'buf' (1504,21)-(1504,24)
                    ,: ',' (1504,24)-(1504,25)
                    pointer_expression (1504,26)-(1504,30)
                      &: '&' (1504,26)-(1504,27)
                      identifier: 'len' (1504,27)-(1504,30)
                    ,: ',' (1504,30)-(1504,31)
                    identifier: 'GETKEYS_BINDKEY' (1504,32)-(1504,47)
                    ,: ',' (1504,47)-(1504,48)
                    null (1504,49)-(1504,53)
                      NULL: 'NULL' (1504,49)-(1504,53)
                    ): ')' (1504,53)-(1504,54)
              ;: ';' (1504,54)-(1504,55)
            }: '}' (1505,5)-(1505,6)
        if_statement (1506,5)-(1506,18)
          if: 'if' (1506,5)-(1506,7)
          parenthesized_expression (1506,8)-(1506,18)
            (: '(' (1506,8)-(1506,9)
            binary_expression (1506,9)-(1506,17)
              identifier: 'len' (1506,9)-(1506,12)
              ==: '==' (1506,13)-(1506,15)
              number_literal: '0' (1506,16)-(1506,17)
            ): ')' (1506,17)-(1506,18)
          expression_statement (1506,18)-(1506,18)
        #endif: '#endif' (1507,1)-(1507,7)
      compound_statement (1508,5)-(1512,6)
        {: '{' (1508,5)-(1508,6)
        expression_statement (1509,2)-(1509,19)
          assignment_expression (1509,2)-(1509,18)
            identifier: 'ptr' (1509,2)-(1509,5)
            =: '=' (1509,6)-(1509,7)
            call_expression (1509,8)-(1509,18)
              identifier: 'zhalloc' (1509,8)-(1509,15)
              argument_list (1509,15)-(1509,18)
                (: '(' (1509,15)-(1509,16)
                number_literal: '2' (1509,16)-(1509,17)
                ): ')' (1509,17)-(1509,18)
          ;: ';' (1509,18)-(1509,19)
        expression_statement (1510,2)-(1510,10)
          assignment_expression (1510,2)-(1510,9)
            identifier: 'len' (1510,2)-(1510,5)
            =: '=' (1510,6)-(1510,7)
            number_literal: '1' (1510,8)-(1510,9)
          ;: ';' (1510,9)-(1510,10)
        expression_statement (1511,2)-(1511,32)
          call_expression (1511,2)-(1511,31)
            identifier: 'sprintf' (1511,2)-(1511,9)
            argument_list (1511,9)-(1511,31)
              (: '(' (1511,9)-(1511,10)
              identifier: 'ptr' (1511,10)-(1511,13)
              ,: ',' (1511,13)-(1511,14)
              string_literal (1511,15)-(1511,19)
                ": '"' (1511,15)-(1511,16)
                string_content: '%c' (1511,16)-(1511,18)
                ": '"' (1511,18)-(1511,19)
              ,: ',' (1511,19)-(1511,20)
              cast_expression (1511,21)-(1511,30)
                (: '(' (1511,21)-(1511,22)
                type_descriptor (1511,22)-(1511,25)
                  primitive_type: 'int' (1511,22)-(1511,25)
                ): ')' (1511,25)-(1511,26)
                identifier: 'ires' (1511,26)-(1511,30)
              ): ')' (1511,30)-(1511,31)
          ;: ';' (1511,31)-(1511,32)
        }: '}' (1512,5)-(1512,6)
      return_statement (1513,5)-(1513,43)
        return: 'return' (1513,5)-(1513,11)
        call_expression (1513,12)-(1513,42)
          identifier: 'metafy' (1513,12)-(1513,18)
          argument_list (1513,18)-(1513,42)
            (: '(' (1513,18)-(1513,19)
            identifier: 'ptr' (1513,19)-(1513,22)
            ,: ',' (1513,22)-(1513,23)
            identifier: 'len' (1513,24)-(1513,27)
            ,: ',' (1513,27)-(1513,28)
            identifier: 'META_USEHEAP' (1513,29)-(1513,41)
            ): ')' (1513,41)-(1513,42)
        ;: ';' (1513,42)-(1513,43)
      }: '}' (1514,1)-(1514,2)
  comment: '/*
 * Helper function for arguments to parameter flags which
 * handles the (p) and (~) flags as escapes and tok_arg respectively.
 */' (1516,1)-(1519,4)
  function_definition (1521,1)-(1546,2)
    storage_class_specifier (1521,1)-(1521,7)
      static: 'static' (1521,1)-(1521,7)
    primitive_type: 'char' (1521,8)-(1521,12)
    pointer_declarator (1521,13)-(1522,52)
      *: '*' (1521,13)-(1521,14)
      function_declarator (1522,1)-(1522,52)
        identifier: 'untok_and_escape' (1522,1)-(1522,17)
        parameter_list (1522,17)-(1522,52)
          (: '(' (1522,17)-(1522,18)
          parameter_declaration (1522,18)-(1522,25)
            primitive_type: 'char' (1522,18)-(1522,22)
            pointer_declarator (1522,23)-(1522,25)
              *: '*' (1522,23)-(1522,24)
              identifier: 's' (1522,24)-(1522,25)
          ,: ',' (1522,25)-(1522,26)
          parameter_declaration (1522,27)-(1522,38)
            primitive_type: 'int' (1522,27)-(1522,30)
            identifier: 'escapes' (1522,31)-(1522,38)
          ,: ',' (1522,38)-(1522,39)
          parameter_declaration (1522,40)-(1522,51)
            primitive_type: 'int' (1522,40)-(1522,43)
            identifier: 'tok_arg' (1522,44)-(1522,51)
          ): ')' (1522,51)-(1522,52)
    compound_statement (1523,1)-(1546,2)
      {: '{' (1523,1)-(1523,2)
      declaration (1524,5)-(1524,14)
        primitive_type: 'int' (1524,5)-(1524,8)
        identifier: 'klen' (1524,9)-(1524,13)
        ;: ';' (1524,13)-(1524,14)
      declaration (1525,5)-(1525,22)
        primitive_type: 'char' (1525,5)-(1525,9)
        init_declarator (1525,10)-(1525,21)
          pointer_declarator (1525,10)-(1525,14)
            *: '*' (1525,10)-(1525,11)
            identifier: 'dst' (1525,11)-(1525,14)
          =: '=' (1525,15)-(1525,16)
          null (1525,17)-(1525,21)
            NULL: 'NULL' (1525,17)-(1525,21)
        ;: ';' (1525,21)-(1525,22)
      if_statement (1527,5)-(1535,6)
        if: 'if' (1527,5)-(1527,7)
        parenthesized_expression (1527,8)-(1527,60)
          (: '(' (1527,8)-(1527,9)
          binary_expression (1527,9)-(1527,59)
            binary_expression (1527,9)-(1527,51)
              identifier: 'escapes' (1527,9)-(1527,16)
              &&: '&&' (1527,17)-(1527,19)
              parenthesized_expression (1527,20)-(1527,51)
                (: '(' (1527,20)-(1527,21)
                binary_expression (1527,21)-(1527,50)
                  binary_expression (1527,21)-(1527,33)
                    pointer_expression (1527,21)-(1527,23)
                      *: '*' (1527,21)-(1527,22)
                      identifier: 's' (1527,22)-(1527,23)
                    ==: '==' (1527,24)-(1527,26)
                    identifier: 'String' (1527,27)-(1527,33)
                  ||: '||' (1527,34)-(1527,36)
                  binary_expression (1527,37)-(1527,50)
                    pointer_expression (1527,37)-(1527,39)
                      *: '*' (1527,37)-(1527,38)
                      identifier: 's' (1527,38)-(1527,39)
                    ==: '==' (1527,40)-(1527,42)
                    identifier: 'Qstring' (1527,43)-(1527,50)
                ): ')' (1527,50)-(1527,51)
            &&: '&&' (1527,52)-(1527,54)
            subscript_expression (1527,55)-(1527,59)
              identifier: 's' (1527,55)-(1527,56)
              [: '[' (1527,56)-(1527,57)
              number_literal: '1' (1527,57)-(1527,58)
              ]: ']' (1527,58)-(1527,59)
          ): ')' (1527,59)-(1527,60)
        compound_statement (1527,61)-(1535,6)
          {: '{' (1527,61)-(1527,62)
          declaration (1528,2)-(1528,28)
            primitive_type: 'char' (1528,2)-(1528,6)
            init_declarator (1528,7)-(1528,20)
              pointer_declarator (1528,7)-(1528,14)
                *: '*' (1528,7)-(1528,8)
                identifier: 'pstart' (1528,8)-(1528,14)
              =: '=' (1528,15)-(1528,16)
              binary_expression (1528,17)-(1528,20)
                identifier: 's' (1528,17)-(1528,18)
                +: '+' (1528,18)-(1528,19)
                number_literal: '1' (1528,19)-(1528,20)
            ,: ',' (1528,20)-(1528,21)
            pointer_declarator (1528,22)-(1528,27)
              *: '*' (1528,22)-(1528,23)
              identifier: 'pend' (1528,23)-(1528,27)
            ;: ';' (1528,27)-(1528,28)
          for_statement (1529,2)-(1531,9)
            for: 'for' (1529,2)-(1529,5)
            (: '(' (1529,6)-(1529,7)
            assignment_expression (1529,7)-(1529,20)
              identifier: 'pend' (1529,7)-(1529,11)
              =: '=' (1529,12)-(1529,13)
              identifier: 'pstart' (1529,14)-(1529,20)
            ;: ';' (1529,20)-(1529,21)
            pointer_expression (1529,22)-(1529,27)
              *: '*' (1529,22)-(1529,23)
              identifier: 'pend' (1529,23)-(1529,27)
            ;: ';' (1529,27)-(1529,28)
            update_expression (1529,29)-(1529,35)
              identifier: 'pend' (1529,29)-(1529,33)
              ++: '++' (1529,33)-(1529,35)
            ): ')' (1529,35)-(1529,36)
            if_statement (1530,6)-(1531,9)
              if: 'if' (1530,6)-(1530,8)
              parenthesized_expression (1530,9)-(1530,25)
                (: '(' (1530,9)-(1530,10)
                unary_expression (1530,10)-(1530,24)
                  !: '!' (1530,10)-(1530,11)
                  call_expression (1530,11)-(1530,24)
                    identifier: 'iident' (1530,11)-(1530,17)
                    argument_list (1530,17)-(1530,24)
                      (: '(' (1530,17)-(1530,18)
                      pointer_expression (1530,18)-(1530,23)
                        *: '*' (1530,18)-(1530,19)
                        identifier: 'pend' (1530,19)-(1530,23)
                      ): ')' (1530,23)-(1530,24)
                ): ')' (1530,24)-(1530,25)
              break_statement (1531,3)-(1531,9)
                break: 'break' (1531,3)-(1531,8)
                ;: ';' (1531,8)-(1531,9)
          if_statement (1532,2)-(1534,3)
            if: 'if' (1532,2)-(1532,4)
            parenthesized_expression (1532,5)-(1532,13)
              (: '(' (1532,5)-(1532,6)
              unary_expression (1532,6)-(1532,12)
                !: '!' (1532,6)-(1532,7)
                pointer_expression (1532,7)-(1532,12)
                  *: '*' (1532,7)-(1532,8)
                  identifier: 'pend' (1532,8)-(1532,12)
              ): ')' (1532,12)-(1532,13)
            compound_statement (1532,14)-(1534,3)
              {: '{' (1532,14)-(1532,15)
              expression_statement (1533,6)-(1533,41)
                assignment_expression (1533,6)-(1533,40)
                  identifier: 'dst' (1533,6)-(1533,9)
                  =: '=' (1533,10)-(1533,11)
                  call_expression (1533,12)-(1533,40)
                    identifier: 'dupstring' (1533,12)-(1533,21)
                    argument_list (1533,21)-(1533,40)
                      (: '(' (1533,21)-(1533,22)
                      call_expression (1533,22)-(1533,39)
                        identifier: 'getsparam' (1533,22)-(1533,31)
                        argument_list (1533,31)-(1533,39)
                          (: '(' (1533,31)-(1533,32)
                          identifier: 'pstart' (1533,32)-(1533,38)
                          ): ')' (1533,38)-(1533,39)
                      ): ')' (1533,39)-(1533,40)
                ;: ';' (1533,40)-(1533,41)
              }: '}' (1534,2)-(1534,3)
          }: '}' (1535,5)-(1535,6)
      if_statement (1536,5)-(1542,6)
        if: 'if' (1536,5)-(1536,7)
        parenthesized_expression (1536,8)-(1536,21)
          (: '(' (1536,8)-(1536,9)
          binary_expression (1536,9)-(1536,20)
            identifier: 'dst' (1536,9)-(1536,12)
            ==: '==' (1536,13)-(1536,15)
            null (1536,16)-(1536,20)
              NULL: 'NULL' (1536,16)-(1536,20)
          ): ')' (1536,20)-(1536,21)
        compound_statement (1536,22)-(1542,6)
          {: '{' (1536,22)-(1536,23)
          expression_statement (1537,2)-(1537,33)
            call_expression (1537,2)-(1537,32)
              identifier: 'untokenize' (1537,2)-(1537,12)
              argument_list (1537,12)-(1537,32)
                (: '(' (1537,12)-(1537,13)
                assignment_expression (1537,13)-(1537,31)
                  identifier: 'dst' (1537,13)-(1537,16)
                  =: '=' (1537,17)-(1537,18)
                  call_expression (1537,19)-(1537,31)
                    identifier: 'dupstring' (1537,19)-(1537,28)
                    argument_list (1537,28)-(1537,31)
                      (: '(' (1537,28)-(1537,29)
                      identifier: 's' (1537,29)-(1537,30)
                      ): ')' (1537,30)-(1537,31)
                ): ')' (1537,31)-(1537,32)
            ;: ';' (1537,32)-(1537,33)
          if_statement (1538,2)-(1541,3)
            if: 'if' (1538,2)-(1538,4)
            parenthesized_expression (1538,5)-(1538,14)
              (: '(' (1538,5)-(1538,6)
              identifier: 'escapes' (1538,6)-(1538,13)
              ): ')' (1538,13)-(1538,14)
            compound_statement (1538,15)-(1541,3)
              {: '{' (1538,15)-(1538,16)
              expression_statement (1539,6)-(1539,56)
                assignment_expression (1539,6)-(1539,55)
                  identifier: 'dst' (1539,6)-(1539,9)
                  =: '=' (1539,10)-(1539,11)
                  call_expression (1539,12)-(1539,55)
                    identifier: 'getkeystring' (1539,12)-(1539,24)
                    argument_list (1539,24)-(1539,55)
                      (: '(' (1539,24)-(1539,25)
                      identifier: 'dst' (1539,25)-(1539,28)
                      ,: ',' (1539,28)-(1539,29)
                      pointer_expression (1539,30)-(1539,35)
                        &: '&' (1539,30)-(1539,31)
                        identifier: 'klen' (1539,31)-(1539,35)
                      ,: ',' (1539,35)-(1539,36)
                      identifier: 'GETKEYS_SEP' (1539,37)-(1539,48)
                      ,: ',' (1539,48)-(1539,49)
                      null (1539,50)-(1539,54)
                        NULL: 'NULL' (1539,50)-(1539,54)
                      ): ')' (1539,54)-(1539,55)
                ;: ';' (1539,55)-(1539,56)
              expression_statement (1540,6)-(1540,45)
                assignment_expression (1540,6)-(1540,44)
                  identifier: 'dst' (1540,6)-(1540,9)
                  =: '=' (1540,10)-(1540,11)
                  call_expression (1540,12)-(1540,44)
                    identifier: 'metafy' (1540,12)-(1540,18)
                    argument_list (1540,18)-(1540,44)
                      (: '(' (1540,18)-(1540,19)
                      identifier: 'dst' (1540,19)-(1540,22)
                      ,: ',' (1540,22)-(1540,23)
                      identifier: 'klen' (1540,24)-(1540,28)
                      ,: ',' (1540,28)-(1540,29)
                      identifier: 'META_HREALLOC' (1540,30)-(1540,43)
                      ): ')' (1540,43)-(1540,44)
                ;: ';' (1540,44)-(1540,45)
              }: '}' (1541,2)-(1541,3)
          }: '}' (1542,5)-(1542,6)
      if_statement (1543,5)-(1544,18)
        if: 'if' (1543,5)-(1543,7)
        parenthesized_expression (1543,8)-(1543,17)
          (: '(' (1543,8)-(1543,9)
          identifier: 'tok_arg' (1543,9)-(1543,16)
          ): ')' (1543,16)-(1543,17)
        expression_statement (1544,2)-(1544,18)
          call_expression (1544,2)-(1544,17)
            identifier: 'shtokenize' (1544,2)-(1544,12)
            argument_list (1544,12)-(1544,17)
              (: '(' (1544,12)-(1544,13)
              identifier: 'dst' (1544,13)-(1544,16)
              ): ')' (1544,16)-(1544,17)
          ;: ';' (1544,17)-(1544,18)
      return_statement (1545,5)-(1545,16)
        return: 'return' (1545,5)-(1545,11)
        identifier: 'dst' (1545,12)-(1545,15)
        ;: ';' (1545,15)-(1545,16)
      }: '}' (1546,1)-(1546,2)
  comment: '/*
 * See if an argument str looks like a subscript or length following
 * a colon and parse it.  It must be followed by a ':' or nothing.
 * If this succeeds, expand and return the evaluated expression if
 * found, else return NULL.
 *
 * We assume this is what is meant if the first character is not
 * an alphabetic character or '&', which signify modifiers.
 *
 * Set *endp to point to the next character following.
 */' (1548,1)-(1558,4)
  function_definition (1559,1)-(1593,2)
    storage_class_specifier (1559,1)-(1559,7)
      static: 'static' (1559,1)-(1559,7)
    primitive_type: 'char' (1559,8)-(1559,12)
    pointer_declarator (1559,13)-(1560,46)
      *: '*' (1559,13)-(1559,14)
      function_declarator (1560,1)-(1560,46)
        identifier: 'check_colon_subscript' (1560,1)-(1560,22)
        parameter_list (1560,22)-(1560,46)
          (: '(' (1560,22)-(1560,23)
          parameter_declaration (1560,23)-(1560,32)
            primitive_type: 'char' (1560,23)-(1560,27)
            pointer_declarator (1560,28)-(1560,32)
              *: '*' (1560,28)-(1560,29)
              identifier: 'str' (1560,29)-(1560,32)
          ,: ',' (1560,32)-(1560,33)
          parameter_declaration (1560,34)-(1560,45)
            primitive_type: 'char' (1560,34)-(1560,38)
            pointer_declarator (1560,39)-(1560,45)
              *: '*' (1560,39)-(1560,40)
              pointer_declarator (1560,40)-(1560,45)
                *: '*' (1560,40)-(1560,41)
                identifier: 'endp' (1560,41)-(1560,45)
          ): ')' (1560,45)-(1560,46)
    compound_statement (1561,1)-(1593,2)
      {: '{' (1561,1)-(1561,2)
      declaration (1562,5)-(1562,13)
        primitive_type: 'int' (1562,5)-(1562,8)
        identifier: 'sav' (1562,9)-(1562,12)
        ;: ';' (1562,12)-(1562,13)
      comment: '/* Could this be a modifier (or empty)? */' (1564,5)-(1564,47)
      if_statement (1565,5)-(1566,14)
        if: 'if' (1565,5)-(1565,7)
        parenthesized_expression (1565,8)-(1565,46)
          (: '(' (1565,8)-(1565,9)
          binary_expression (1565,9)-(1565,45)
            binary_expression (1565,9)-(1565,30)
              unary_expression (1565,9)-(1565,14)
                !: '!' (1565,9)-(1565,10)
                pointer_expression (1565,10)-(1565,14)
                  *: '*' (1565,10)-(1565,11)
                  identifier: 'str' (1565,11)-(1565,14)
              ||: '||' (1565,15)-(1565,17)
              call_expression (1565,18)-(1565,30)
                identifier: 'ialpha' (1565,18)-(1565,24)
                argument_list (1565,24)-(1565,30)
                  (: '(' (1565,24)-(1565,25)
                  pointer_expression (1565,25)-(1565,29)
                    *: '*' (1565,25)-(1565,26)
                    identifier: 'str' (1565,26)-(1565,29)
                  ): ')' (1565,29)-(1565,30)
            ||: '||' (1565,31)-(1565,33)
            binary_expression (1565,34)-(1565,45)
              pointer_expression (1565,34)-(1565,38)
                *: '*' (1565,34)-(1565,35)
                identifier: 'str' (1565,35)-(1565,38)
              ==: '==' (1565,39)-(1565,41)
              char_literal (1565,42)-(1565,45)
                ': ''' (1565,42)-(1565,43)
                character: '&' (1565,43)-(1565,44)
                ': ''' (1565,44)-(1565,45)
          ): ')' (1565,45)-(1565,46)
        return_statement (1566,2)-(1566,14)
          return: 'return' (1566,2)-(1566,8)
          null (1566,9)-(1566,13)
            NULL: 'NULL' (1566,9)-(1566,13)
          ;: ';' (1566,13)-(1566,14)
      if_statement (1568,5)-(1571,6)
        if: 'if' (1568,5)-(1568,7)
        parenthesized_expression (1568,8)-(1568,21)
          (: '(' (1568,8)-(1568,9)
          binary_expression (1568,9)-(1568,20)
            pointer_expression (1568,9)-(1568,13)
              *: '*' (1568,9)-(1568,10)
              identifier: 'str' (1568,10)-(1568,13)
            ==: '==' (1568,14)-(1568,16)
            char_literal (1568,17)-(1568,20)
              ': ''' (1568,17)-(1568,18)
              character: ':' (1568,18)-(1568,19)
              ': ''' (1568,19)-(1568,20)
          ): ')' (1568,20)-(1568,21)
        compound_statement (1568,22)-(1571,6)
          {: '{' (1568,22)-(1568,23)
          expression_statement (1569,2)-(1569,14)
            assignment_expression (1569,2)-(1569,13)
              pointer_expression (1569,2)-(1569,7)
                *: '*' (1569,2)-(1569,3)
                identifier: 'endp' (1569,3)-(1569,7)
              =: '=' (1569,8)-(1569,9)
              identifier: 'str' (1569,10)-(1569,13)
            ;: ';' (1569,13)-(1569,14)
          return_statement (1570,2)-(1570,24)
            return: 'return' (1570,2)-(1570,8)
            call_expression (1570,9)-(1570,23)
              identifier: 'dupstring' (1570,9)-(1570,18)
              argument_list (1570,18)-(1570,23)
                (: '(' (1570,18)-(1570,19)
                string_literal (1570,19)-(1570,22)
                  ": '"' (1570,19)-(1570,20)
                  string_content: '0' (1570,20)-(1570,21)
                  ": '"' (1570,21)-(1570,22)
                ): ')' (1570,22)-(1570,23)
            ;: ';' (1570,23)-(1570,24)
          }: '}' (1571,5)-(1571,6)
      expression_statement (1573,5)-(1573,42)
        assignment_expression (1573,5)-(1573,41)
          pointer_expression (1573,5)-(1573,10)
            *: '*' (1573,5)-(1573,6)
            identifier: 'endp' (1573,6)-(1573,10)
          =: '=' (1573,11)-(1573,12)
          call_expression (1573,13)-(1573,41)
            identifier: 'parse_subscript' (1573,13)-(1573,28)
            argument_list (1573,28)-(1573,41)
              (: '(' (1573,28)-(1573,29)
              identifier: 'str' (1573,29)-(1573,32)
              ,: ',' (1573,32)-(1573,33)
              number_literal: '0' (1573,34)-(1573,35)
              ,: ',' (1573,35)-(1573,36)
              char_literal (1573,37)-(1573,40)
                ': ''' (1573,37)-(1573,38)
                character: ':' (1573,38)-(1573,39)
                ': ''' (1573,39)-(1573,40)
              ): ')' (1573,40)-(1573,41)
        ;: ';' (1573,41)-(1573,42)
      if_statement (1574,5)-(1579,6)
        if: 'if' (1574,5)-(1574,7)
        parenthesized_expression (1574,8)-(1574,16)
          (: '(' (1574,8)-(1574,9)
          unary_expression (1574,9)-(1574,15)
            !: '!' (1574,9)-(1574,10)
            pointer_expression (1574,10)-(1574,15)
              *: '*' (1574,10)-(1574,11)
              identifier: 'endp' (1574,11)-(1574,15)
          ): ')' (1574,15)-(1574,16)
        compound_statement (1574,17)-(1579,6)
          {: '{' (1574,17)-(1574,18)
          comment: '/* No trailing colon? */' (1575,2)-(1575,26)
          expression_statement (1576,2)-(1576,40)
            assignment_expression (1576,2)-(1576,39)
              pointer_expression (1576,2)-(1576,7)
                *: '*' (1576,2)-(1576,3)
                identifier: 'endp' (1576,3)-(1576,7)
              =: '=' (1576,8)-(1576,9)
              call_expression (1576,10)-(1576,39)
                identifier: 'parse_subscript' (1576,10)-(1576,25)
                argument_list (1576,25)-(1576,39)
                  (: '(' (1576,25)-(1576,26)
                  identifier: 'str' (1576,26)-(1576,29)
                  ,: ',' (1576,29)-(1576,30)
                  number_literal: '0' (1576,31)-(1576,32)
                  ,: ',' (1576,32)-(1576,33)
                  char_literal (1576,34)-(1576,38)
                    ': ''' (1576,34)-(1576,35)
                    escape_sequence: '\0' (1576,35)-(1576,37)
                    ': ''' (1576,37)-(1576,38)
                  ): ')' (1576,38)-(1576,39)
            ;: ';' (1576,39)-(1576,40)
          if_statement (1577,2)-(1578,18)
            if: 'if' (1577,2)-(1577,4)
            parenthesized_expression (1577,5)-(1577,13)
              (: '(' (1577,5)-(1577,6)
              unary_expression (1577,6)-(1577,12)
                !: '!' (1577,6)-(1577,7)
                pointer_expression (1577,7)-(1577,12)
                  *: '*' (1577,7)-(1577,8)
                  identifier: 'endp' (1577,8)-(1577,12)
              ): ')' (1577,12)-(1577,13)
            return_statement (1578,6)-(1578,18)
              return: 'return' (1578,6)-(1578,12)
              null (1578,13)-(1578,17)
                NULL: 'NULL' (1578,13)-(1578,17)
              ;: ';' (1578,17)-(1578,18)
          }: '}' (1579,5)-(1579,6)
      expression_statement (1580,5)-(1580,18)
        assignment_expression (1580,5)-(1580,17)
          identifier: 'sav' (1580,5)-(1580,8)
          =: '=' (1580,9)-(1580,10)
          pointer_expression (1580,11)-(1580,17)
            *: '*' (1580,11)-(1580,12)
            pointer_expression (1580,12)-(1580,17)
              *: '*' (1580,12)-(1580,13)
              identifier: 'endp' (1580,13)-(1580,17)
        ;: ';' (1580,17)-(1580,18)
      expression_statement (1581,5)-(1581,19)
        assignment_expression (1581,5)-(1581,18)
          pointer_expression (1581,5)-(1581,11)
            *: '*' (1581,5)-(1581,6)
            pointer_expression (1581,6)-(1581,11)
              *: '*' (1581,6)-(1581,7)
              identifier: 'endp' (1581,7)-(1581,11)
          =: '=' (1581,12)-(1581,13)
          char_literal (1581,14)-(1581,18)
            ': ''' (1581,14)-(1581,15)
            escape_sequence: '\0' (1581,15)-(1581,17)
            ': ''' (1581,17)-(1581,18)
        ;: ';' (1581,18)-(1581,19)
      expression_statement (1582,5)-(1582,26)
        assignment_expression (1582,5)-(1582,25)
          identifier: 'str' (1582,5)-(1582,8)
          =: '=' (1582,9)-(1582,10)
          call_expression (1582,11)-(1582,25)
            identifier: 'dupstring' (1582,11)-(1582,20)
            argument_list (1582,20)-(1582,25)
              (: '(' (1582,20)-(1582,21)
              identifier: 'str' (1582,21)-(1582,24)
              ): ')' (1582,24)-(1582,25)
        ;: ';' (1582,25)-(1582,26)
      if_statement (1583,5)-(1586,6)
        if: 'if' (1583,5)-(1583,7)
        parenthesized_expression (1583,8)-(1583,24)
          (: '(' (1583,8)-(1583,9)
          call_expression (1583,9)-(1583,23)
            identifier: 'parsestr' (1583,9)-(1583,17)
            argument_list (1583,17)-(1583,23)
              (: '(' (1583,17)-(1583,18)
              pointer_expression (1583,18)-(1583,22)
                &: '&' (1583,18)-(1583,19)
                identifier: 'str' (1583,19)-(1583,22)
              ): ')' (1583,22)-(1583,23)
          ): ')' (1583,23)-(1583,24)
        compound_statement (1583,25)-(1586,6)
          {: '{' (1583,25)-(1583,26)
          expression_statement (1584,2)-(1584,15)
            assignment_expression (1584,2)-(1584,14)
              pointer_expression (1584,2)-(1584,8)
                *: '*' (1584,2)-(1584,3)
                pointer_expression (1584,3)-(1584,8)
                  *: '*' (1584,3)-(1584,4)
                  identifier: 'endp' (1584,4)-(1584,8)
              =: '=' (1584,9)-(1584,10)
              identifier: 'sav' (1584,11)-(1584,14)
            ;: ';' (1584,14)-(1584,15)
          return_statement (1585,2)-(1585,14)
            return: 'return' (1585,2)-(1585,8)
            null (1585,9)-(1585,13)
              NULL: 'NULL' (1585,9)-(1585,13)
            ;: ';' (1585,13)-(1585,14)
          }: '}' (1586,5)-(1586,6)
      expression_statement (1587,5)-(1587,19)
        call_expression (1587,5)-(1587,18)
          identifier: 'singsub' (1587,5)-(1587,12)
          argument_list (1587,12)-(1587,18)
            (: '(' (1587,12)-(1587,13)
            pointer_expression (1587,13)-(1587,17)
              &: '&' (1587,13)-(1587,14)
              identifier: 'str' (1587,14)-(1587,17)
            ): ')' (1587,17)-(1587,18)
        ;: ';' (1587,18)-(1587,19)
      expression_statement (1588,5)-(1588,21)
        call_expression (1588,5)-(1588,20)
          identifier: 'remnulargs' (1588,5)-(1588,15)
          argument_list (1588,15)-(1588,20)
            (: '(' (1588,15)-(1588,16)
            identifier: 'str' (1588,16)-(1588,19)
            ): ')' (1588,19)-(1588,20)
        ;: ';' (1588,20)-(1588,21)
      expression_statement (1589,5)-(1589,21)
        call_expression (1589,5)-(1589,20)
          identifier: 'untokenize' (1589,5)-(1589,15)
          argument_list (1589,15)-(1589,20)
            (: '(' (1589,15)-(1589,16)
            identifier: 'str' (1589,16)-(1589,19)
            ): ')' (1589,19)-(1589,20)
        ;: ';' (1589,20)-(1589,21)
      expression_statement (1591,5)-(1591,18)
        assignment_expression (1591,5)-(1591,17)
          pointer_expression (1591,5)-(1591,11)
            *: '*' (1591,5)-(1591,6)
            pointer_expression (1591,6)-(1591,11)
              *: '*' (1591,6)-(1591,7)
              identifier: 'endp' (1591,7)-(1591,11)
          =: '=' (1591,12)-(1591,13)
          identifier: 'sav' (1591,14)-(1591,17)
        ;: ';' (1591,17)-(1591,18)
      return_statement (1592,5)-(1592,16)
        return: 'return' (1592,5)-(1592,11)
        identifier: 'str' (1592,12)-(1592,15)
        ;: ';' (1592,15)-(1592,16)
      }: '}' (1593,1)-(1593,2)
  comment: '/* parameter substitution */' (1595,1)-(1595,29)
  preproc_function_def (1597,1)-(1598,1)
    #define: '#define' (1597,1)-(1597,8)
    identifier: 'isstring' (1597,9)-(1597,17)
    preproc_params (1597,17)-(1597,20)
      (: '(' (1597,17)-(1597,18)
      identifier: 'c' (1597,18)-(1597,19)
      ): ')' (1597,19)-(1597,20)
    preproc_arg: '((c) == '$' || (char)(c) == String || (char)(c) == Qstring)' (1597,21)-(1597,80)
  preproc_function_def (1598,1)-(1599,1)
    #define: '#define' (1598,1)-(1598,8)
    identifier: 'isbrack' (1598,9)-(1598,16)
    preproc_params (1598,16)-(1598,19)
      (: '(' (1598,16)-(1598,17)
      identifier: 'c' (1598,17)-(1598,18)
      ): ')' (1598,18)-(1598,19)
    preproc_arg: '((c) == '[' || (char)(c) == Inbrack)' (1598,21)-(1598,57)
  comment: '/*
 * Given a linked list l with node n, perform parameter substitution
 * starting from *str.  Return the node with the substitutuion performed
 * or NULL if it failed.
 *
 * If qt is true, the `$' was quoted.  TODO: why can't we just look
 * to see if the first character was String or Qstring?
 *
 * If ssub is true, we are being called via singsubst(), which means
 * the result will be a single word.  TODO: can we generate the
 * single word at the end?  TODO: if not, or maybe in any case,
 * can we pass down the ssub flag from prefork with the other flags
 * instead of pushing it into different arguments?  (How exactly
 * to qt and ssub differ?  Are both necessary, if so is there some
 * better way of separating the two?)
 */' (1600,1)-(1615,4)
  comment: '/**/' (1617,1)-(1617,5)
  function_definition (1618,1)-(4188,2)
    storage_class_specifier (1618,1)-(1618,7)
      static: 'static' (1618,1)-(1618,7)
    type_identifier: 'LinkNode' (1618,8)-(1618,16)
    function_declarator (1619,1)-(1620,20)
      identifier: 'paramsubst' (1619,1)-(1619,11)
      parameter_list (1619,11)-(1620,20)
        (: '(' (1619,11)-(1619,12)
        parameter_declaration (1619,12)-(1619,22)
          type_identifier: 'LinkList' (1619,12)-(1619,20)
          identifier: 'l' (1619,21)-(1619,22)
        ,: ',' (1619,22)-(1619,23)
        parameter_declaration (1619,24)-(1619,34)
          type_identifier: 'LinkNode' (1619,24)-(1619,32)
          identifier: 'n' (1619,33)-(1619,34)
        ,: ',' (1619,34)-(1619,35)
        parameter_declaration (1619,36)-(1619,46)
          primitive_type: 'char' (1619,36)-(1619,40)
          pointer_declarator (1619,41)-(1619,46)
            *: '*' (1619,41)-(1619,42)
            pointer_declarator (1619,42)-(1619,46)
              *: '*' (1619,42)-(1619,43)
              identifier: 'str' (1619,43)-(1619,46)
        ,: ',' (1619,46)-(1619,47)
        parameter_declaration (1619,48)-(1619,54)
          primitive_type: 'int' (1619,48)-(1619,51)
          identifier: 'qt' (1619,52)-(1619,54)
        ,: ',' (1619,54)-(1619,55)
        parameter_declaration (1619,56)-(1619,68)
          primitive_type: 'int' (1619,56)-(1619,59)
          identifier: 'pf_flags' (1619,60)-(1619,68)
        ,: ',' (1619,68)-(1619,69)
        parameter_declaration (1620,5)-(1620,19)
          primitive_type: 'int' (1620,5)-(1620,8)
          pointer_declarator (1620,9)-(1620,19)
            *: '*' (1620,9)-(1620,10)
            identifier: 'ret_flags' (1620,10)-(1620,19)
        ): ')' (1620,19)-(1620,20)
    compound_statement (1621,1)-(4188,2)
      {: '{' (1621,1)-(1621,2)
      declaration (1622,5)-(1622,30)
        primitive_type: 'char' (1622,5)-(1622,9)
        init_declarator (1622,10)-(1622,22)
          pointer_declarator (1622,10)-(1622,15)
            *: '*' (1622,10)-(1622,11)
            identifier: 'aptr' (1622,11)-(1622,15)
          =: '=' (1622,16)-(1622,17)
          pointer_expression (1622,18)-(1622,22)
            *: '*' (1622,18)-(1622,19)
            identifier: 'str' (1622,19)-(1622,22)
        ,: ',' (1622,22)-(1622,23)
        identifier: 'c' (1622,24)-(1622,25)
        ,: ',' (1622,25)-(1622,26)
        identifier: 'cc' (1622,27)-(1622,29)
        ;: ';' (1622,29)-(1622,30)
      declaration (1623,5)-(1623,72)
        primitive_type: 'char' (1623,5)-(1623,9)
        init_declarator (1623,10)-(1623,19)
          pointer_declarator (1623,10)-(1623,12)
            *: '*' (1623,10)-(1623,11)
            identifier: 's' (1623,11)-(1623,12)
          =: '=' (1623,13)-(1623,14)
          identifier: 'aptr' (1623,15)-(1623,19)
        ,: ',' (1623,19)-(1623,20)
        pointer_declarator (1623,21)-(1623,26)
          *: '*' (1623,21)-(1623,22)
          identifier: 'fstr' (1623,22)-(1623,26)
        ,: ',' (1623,26)-(1623,27)
        pointer_declarator (1623,28)-(1623,34)
          *: '*' (1623,28)-(1623,29)
          identifier: 'idbeg' (1623,29)-(1623,34)
        ,: ',' (1623,34)-(1623,35)
        pointer_declarator (1623,36)-(1623,42)
          *: '*' (1623,36)-(1623,37)
          identifier: 'idend' (1623,37)-(1623,42)
        ,: ',' (1623,42)-(1623,43)
        init_declarator (1623,44)-(1623,71)
          pointer_declarator (1623,44)-(1623,49)
            *: '*' (1623,44)-(1623,45)
            identifier: 'ostr' (1623,45)-(1623,49)
          =: '=' (1623,50)-(1623,51)
          cast_expression (1623,52)-(1623,71)
            (: '(' (1623,52)-(1623,53)
            type_descriptor (1623,53)-(1623,59)
              primitive_type: 'char' (1623,53)-(1623,57)
              abstract_pointer_declarator (1623,58)-(1623,59)
                *: '*' (1623,58)-(1623,59)
            ): ')' (1623,59)-(1623,60)
            call_expression (1623,61)-(1623,71)
              identifier: 'getdata' (1623,61)-(1623,68)
              argument_list (1623,68)-(1623,71)
                (: '(' (1623,68)-(1623,69)
                identifier: 'n' (1623,69)-(1623,70)
                ): ')' (1623,70)-(1623,71)
        ;: ';' (1623,71)-(1623,72)
      declaration (1624,5)-(1624,14)
        primitive_type: 'int' (1624,5)-(1624,8)
        identifier: 'colf' (1624,9)-(1624,13)
        ;: ';' (1624,13)-(1624,14)
      comment: '/* != 0 means we found a colon after the name */' (1624,17)-(1624,65)
      comment: '/*
     * There are far too many flags.  They need to be grouped
     * together into some structure which ties them to where they
     * came from.
     *
     * Some flags have a an obscure relationship to their effect which
     * depends on incrementing them to particular values in particular
     * ways.
     */' (1625,5)-(1633,8)
      comment: '/*
     * Whether the value is an array (in aval) or not (in val).  There's
     * a movement from storing the value in the stuff read from the
     * parameter (the value v) to storing them in val and aval.
     * However, sometimes you find v reappearing temporarily.
     *
     * The values -1 and 2 are special to isarr.  The value -1 is used
     * to force us to keep an empty array.  It's tested in the YUK chunk
     * (I mean the one explicitly marked as such).  The value 2
     * indicates an array has come from splitting a scalar.  We use
     * that to override the usual rule that in double quotes we don't
     * remove empty elements (so "${(s.:):-foo::bar}" produces two
     * words).  This seems to me to be quite the wrong thing to do,
     * but it looks like code may be relying on it.  So we require (@)
     * as well before we keep the empty fields (look for assignments
     * like "isarr = nojoin ? 1 : 2").
     */' (1634,5)-(1650,8)
      declaration (1651,5)-(1651,19)
        primitive_type: 'int' (1651,5)-(1651,8)
        init_declarator (1651,9)-(1651,18)
          identifier: 'isarr' (1651,9)-(1651,14)
          =: '=' (1651,15)-(1651,16)
          number_literal: '0' (1651,17)-(1651,18)
        ;: ';' (1651,18)-(1651,19)
      comment: '/*
     * This is just the setting of the option except we need to
     * take account of ^ and ^^.
     */' (1652,5)-(1655,8)
      declaration (1656,5)-(1656,38)
        primitive_type: 'int' (1656,5)-(1656,8)
        init_declarator (1656,9)-(1656,37)
          identifier: 'plan9' (1656,9)-(1656,14)
          =: '=' (1656,15)-(1656,16)
          call_expression (1656,17)-(1656,37)
            identifier: 'isset' (1656,17)-(1656,22)
            argument_list (1656,22)-(1656,37)
              (: '(' (1656,22)-(1656,23)
              identifier: 'RCEXPANDPARAM' (1656,23)-(1656,36)
              ): ')' (1656,36)-(1656,37)
        ;: ';' (1656,37)-(1656,38)
      comment: '/*
     * Likwise, but with ~ and ~~.  Also, we turn it off later
     * on if qt is passed down. The value can go to 2 if we
     * use ~ to force this on.
     */' (1657,5)-(1661,8)
      declaration (1662,5)-(1662,38)
        primitive_type: 'int' (1662,5)-(1662,8)
        init_declarator (1662,9)-(1662,37)
          identifier: 'globsubst' (1662,9)-(1662,18)
          =: '=' (1662,19)-(1662,20)
          call_expression (1662,21)-(1662,37)
            identifier: 'isset' (1662,21)-(1662,26)
            argument_list (1662,26)-(1662,37)
              (: '(' (1662,26)-(1662,27)
              identifier: 'GLOBSUBST' (1662,27)-(1662,36)
              ): ')' (1662,36)-(1662,37)
        ;: ';' (1662,37)-(1662,38)
      comment: '/*
     * Indicates ${(#)...}.
     */' (1663,5)-(1665,8)
      declaration (1666,5)-(1666,22)
        primitive_type: 'int' (1666,5)-(1666,8)
        init_declarator (1666,9)-(1666,21)
          identifier: 'evalchar' (1666,9)-(1666,17)
          =: '=' (1666,18)-(1666,19)
          number_literal: '0' (1666,20)-(1666,21)
        ;: ';' (1666,21)-(1666,22)
      comment: '/*
     * Indicates ${#pm}, massaged by whichlen which is set by
     * the (c), (w), and (W) flags to indicate how we take the length.
     */' (1667,5)-(1670,8)
      declaration (1671,5)-(1671,20)
        primitive_type: 'int' (1671,5)-(1671,8)
        init_declarator (1671,9)-(1671,19)
          identifier: 'getlen' (1671,9)-(1671,15)
          =: '=' (1671,16)-(1671,17)
          number_literal: '0' (1671,18)-(1671,19)
        ;: ';' (1671,19)-(1671,20)
      declaration (1672,5)-(1672,22)
        primitive_type: 'int' (1672,5)-(1672,8)
        init_declarator (1672,9)-(1672,21)
          identifier: 'whichlen' (1672,9)-(1672,17)
          =: '=' (1672,18)-(1672,19)
          number_literal: '0' (1672,20)-(1672,21)
        ;: ';' (1672,21)-(1672,22)
      comment: '/*
     * Indicates ${+pm}: a simple boolean for once.
     */' (1673,5)-(1675,8)
      declaration (1676,5)-(1676,20)
        primitive_type: 'int' (1676,5)-(1676,8)
        init_declarator (1676,9)-(1676,19)
          identifier: 'chkset' (1676,9)-(1676,15)
          =: '=' (1676,16)-(1676,17)
          number_literal: '0' (1676,18)-(1676,19)
        ;: ';' (1676,19)-(1676,20)
      comment: '/*
     * Indicates we have tried to get a value in v but that was
     * unset.  I don't quite understand why (v == NULL) isn't
     * good enough, but there are places where we seem to need
     * to second guess whether a value is a real value or not.
     * See in particular the (colf && !vunset) test below.
     */' (1677,5)-(1683,8)
      declaration (1684,5)-(1684,20)
        primitive_type: 'int' (1684,5)-(1684,8)
        init_declarator (1684,9)-(1684,19)
          identifier: 'vunset' (1684,9)-(1684,15)
          =: '=' (1684,16)-(1684,17)
          number_literal: '0' (1684,18)-(1684,19)
        ;: ';' (1684,19)-(1684,20)
      comment: '/*
     * Indicates (t) flag, i.e. print out types.  The code for
     * this actually isn't too horrifically inbred compared with
     * that for (P).
     */' (1685,5)-(1689,8)
      declaration (1690,5)-(1690,19)
        primitive_type: 'int' (1690,5)-(1690,8)
        init_declarator (1690,9)-(1690,18)
          identifier: 'wantt' (1690,9)-(1690,14)
          =: '=' (1690,15)-(1690,16)
          number_literal: '0' (1690,17)-(1690,18)
        ;: ';' (1690,18)-(1690,19)
      comment: '/*
     * Indicates splitting a string into an array.  There aren't
     * actually that many special cases for this --- which may
     * be why it doesn't work properly; we split in some cases
     * where we shouldn't, in particular on the multsubs for
     * handling embedded values for ${...=...} and the like.
     */' (1691,5)-(1697,8)
      declaration (1698,5)-(1699,38)
        primitive_type: 'int' (1698,5)-(1698,8)
        init_declarator (1698,9)-(1699,37)
          identifier: 'spbreak' (1698,9)-(1698,16)
          =: '=' (1698,17)-(1698,18)
          binary_expression (1698,19)-(1699,37)
            binary_expression (1698,19)-(1699,30)
              parenthesized_expression (1698,19)-(1698,51)
                (: '(' (1698,19)-(1698,20)
                binary_expression (1698,20)-(1698,50)
                  identifier: 'pf_flags' (1698,20)-(1698,28)
                  &: '&' (1698,29)-(1698,30)
                  identifier: 'PREFORK_SHWORDSPLIT' (1698,31)-(1698,50)
                ): ')' (1698,50)-(1698,51)
              &&: '&&' (1698,52)-(1698,54)
              unary_expression (1699,2)-(1699,30)
                !: '!' (1699,2)-(1699,3)
                parenthesized_expression (1699,3)-(1699,30)
                  (: '(' (1699,3)-(1699,4)
                  binary_expression (1699,4)-(1699,29)
                    identifier: 'pf_flags' (1699,4)-(1699,12)
                    &: '&' (1699,13)-(1699,14)
                    identifier: 'PREFORK_SINGLE' (1699,15)-(1699,29)
                  ): ')' (1699,29)-(1699,30)
            &&: '&&' (1699,31)-(1699,33)
            unary_expression (1699,34)-(1699,37)
              !: '!' (1699,34)-(1699,35)
              identifier: 'qt' (1699,35)-(1699,37)
        ;: ';' (1699,37)-(1699,38)
      comment: '/* Scalar and array value, see isarr above */' (1700,5)-(1700,50)
      declaration (1701,5)-(1701,37)
        primitive_type: 'char' (1701,5)-(1701,9)
        init_declarator (1701,10)-(1701,21)
          pointer_declarator (1701,10)-(1701,14)
            *: '*' (1701,10)-(1701,11)
            identifier: 'val' (1701,11)-(1701,14)
          =: '=' (1701,15)-(1701,16)
          null (1701,17)-(1701,21)
            NULL: 'NULL' (1701,17)-(1701,21)
        ,: ',' (1701,21)-(1701,22)
        init_declarator (1701,23)-(1701,36)
          pointer_declarator (1701,23)-(1701,29)
            *: '*' (1701,23)-(1701,24)
            pointer_declarator (1701,24)-(1701,29)
              *: '*' (1701,24)-(1701,25)
              identifier: 'aval' (1701,25)-(1701,29)
          =: '=' (1701,30)-(1701,31)
          null (1701,32)-(1701,36)
            NULL: 'NULL' (1701,32)-(1701,36)
        ;: ';' (1701,36)-(1701,37)
      comment: '/*
     * vbuf and v are both used to retrieve parameter values; this
     * is a kludge, we pass down vbuf and it may or may not return v.
     */' (1702,5)-(1705,8)
      declaration (1706,5)-(1706,23)
        struct_specifier (1706,5)-(1706,17)
          struct: 'struct' (1706,5)-(1706,11)
          type_identifier: 'value' (1706,12)-(1706,17)
        identifier: 'vbuf' (1706,18)-(1706,22)
        ;: ';' (1706,22)-(1706,23)
      declaration (1707,5)-(1707,20)
        type_identifier: 'Value' (1707,5)-(1707,10)
        init_declarator (1707,11)-(1707,19)
          identifier: 'v' (1707,11)-(1707,12)
          =: '=' (1707,13)-(1707,14)
          null (1707,15)-(1707,19)
            NULL: 'NULL' (1707,15)-(1707,19)
        ;: ';' (1707,19)-(1707,20)
      comment: '/*
     * This expressive name refers to the set of flags which
     * is applied to matching for #, %, / and their doubled variants:
     * (M), (R), (B), (E), (N), (S), (*).
     */' (1708,5)-(1712,8)
      declaration (1713,5)-(1713,19)
        primitive_type: 'int' (1713,5)-(1713,8)
        init_declarator (1713,9)-(1713,18)
          identifier: 'flags' (1713,9)-(1713,14)
          =: '=' (1713,15)-(1713,16)
          number_literal: '0' (1713,17)-(1713,18)
        ;: ';' (1713,18)-(1713,19)
      comment: '/* Value from (I) flag, used for ditto. */' (1714,5)-(1714,47)
      declaration (1715,5)-(1715,19)
        primitive_type: 'int' (1715,5)-(1715,8)
        init_declarator (1715,9)-(1715,18)
          identifier: 'flnum' (1715,9)-(1715,14)
          =: '=' (1715,15)-(1715,16)
          number_literal: '0' (1715,17)-(1715,18)
        ;: ';' (1715,18)-(1715,19)
      comment: '/*
     * sortit is to be passed to strmetasort().
     * indord is the (a) flag, which for consistency doesn't get
     * combined into sortit.
     */' (1716,5)-(1720,8)
      declaration (1721,5)-(1721,47)
        primitive_type: 'int' (1721,5)-(1721,8)
        init_declarator (1721,9)-(1721,34)
          identifier: 'sortit' (1721,9)-(1721,15)
          =: '=' (1721,16)-(1721,17)
          identifier: 'SORTIT_ANYOLDHOW' (1721,18)-(1721,34)
        ,: ',' (1721,34)-(1721,35)
        init_declarator (1721,36)-(1721,46)
          identifier: 'indord' (1721,36)-(1721,42)
          =: '=' (1721,43)-(1721,44)
          number_literal: '0' (1721,45)-(1721,46)
        ;: ';' (1721,46)-(1721,47)
      comment: '/* (u): straightforward. */' (1722,5)-(1722,32)
      declaration (1723,5)-(1723,20)
        primitive_type: 'int' (1723,5)-(1723,8)
        init_declarator (1723,9)-(1723,19)
          identifier: 'unique' (1723,9)-(1723,15)
          =: '=' (1723,16)-(1723,17)
          number_literal: '0' (1723,18)-(1723,19)
        ;: ';' (1723,19)-(1723,20)
      comment: '/* combination of (L), (U) and (C) flags. */' (1724,5)-(1724,49)
      declaration (1725,5)-(1725,30)
        primitive_type: 'int' (1725,5)-(1725,8)
        init_declarator (1725,9)-(1725,29)
          identifier: 'casmod' (1725,9)-(1725,15)
          =: '=' (1725,16)-(1725,17)
          identifier: 'CASMOD_NONE' (1725,18)-(1725,29)
        ;: ';' (1725,29)-(1725,30)
      comment: '/*
     * quotemod says we are doing either (q/b) (positive), (Q) (negative)
     * or not (0).  quotetype counts the q's for the first case.
     * quoterr is simply (X) but gets passed around a lot because the
     * combination (eX) needs it.
     */' (1726,5)-(1731,8)
      declaration (1732,5)-(1732,57)
        primitive_type: 'int' (1732,5)-(1732,8)
        init_declarator (1732,9)-(1732,21)
          identifier: 'quotemod' (1732,9)-(1732,17)
          =: '=' (1732,18)-(1732,19)
          number_literal: '0' (1732,20)-(1732,21)
        ,: ',' (1732,21)-(1732,22)
        init_declarator (1732,23)-(1732,42)
          identifier: 'quotetype' (1732,23)-(1732,32)
          =: '=' (1732,33)-(1732,34)
          identifier: 'QT_NONE' (1732,35)-(1732,42)
        ,: ',' (1732,42)-(1732,43)
        init_declarator (1732,44)-(1732,56)
          identifier: 'quoteerr' (1732,44)-(1732,52)
          =: '=' (1732,53)-(1732,54)
          number_literal: '0' (1732,55)-(1732,56)
        ;: ';' (1732,56)-(1732,57)
      comment: '/*
     * Various fairly straightforward modifications, except that as with so
     * many flags it's not easy to decide where to put them in the order.
     * bit 0: (D) flag.
     * bit 1: (V) flag.
     */' (1733,5)-(1738,8)
      declaration (1739,5)-(1739,18)
        primitive_type: 'int' (1739,5)-(1739,8)
        init_declarator (1739,9)-(1739,17)
          identifier: 'mods' (1739,9)-(1739,13)
          =: '=' (1739,14)-(1739,15)
          number_literal: '0' (1739,16)-(1739,17)
        ;: ';' (1739,17)-(1739,18)
      comment: '/*
     * The (z) flag, nothing to do with SH_WORD_SPLIT which is tied
     * spbreak, see above; fairly straightforward in use but cf.
     * the comment for mods.
     *
     * This gets set to one of the LEXFLAGS_* values.
     */' (1740,5)-(1746,8)
      declaration (1747,5)-(1747,21)
        primitive_type: 'int' (1747,5)-(1747,8)
        init_declarator (1747,9)-(1747,20)
          identifier: 'shsplit' (1747,9)-(1747,16)
          =: '=' (1747,17)-(1747,18)
          number_literal: '0' (1747,19)-(1747,20)
        ;: ';' (1747,20)-(1747,21)
      comment: '/*
     * "ssub" is true when we are called from singsub (via prefork):
     * it means that we must join arrays and should not split words.
     */' (1748,5)-(1751,8)
      declaration (1752,5)-(1752,44)
        primitive_type: 'int' (1752,5)-(1752,8)
        init_declarator (1752,9)-(1752,43)
          identifier: 'ssub' (1752,9)-(1752,13)
          =: '=' (1752,14)-(1752,15)
          parenthesized_expression (1752,16)-(1752,43)
            (: '(' (1752,16)-(1752,17)
            binary_expression (1752,17)-(1752,42)
              identifier: 'pf_flags' (1752,17)-(1752,25)
              &: '&' (1752,26)-(1752,27)
              identifier: 'PREFORK_SINGLE' (1752,28)-(1752,42)
            ): ')' (1752,42)-(1752,43)
        ;: ';' (1752,43)-(1752,44)
      comment: '/*
     * The separator from (j) and (s) respectively, or (F) and (f)
     * respectively (hardwired to "\n" in that case).  Slightly
     * confusingly also used for ${#pm}, thought that's at least
     * documented in the manual
     */' (1753,5)-(1758,8)
      declaration (1759,5)-(1759,37)
        primitive_type: 'char' (1759,5)-(1759,9)
        init_declarator (1759,10)-(1759,21)
          pointer_declarator (1759,10)-(1759,14)
            *: '*' (1759,10)-(1759,11)
            identifier: 'sep' (1759,11)-(1759,14)
          =: '=' (1759,15)-(1759,16)
          null (1759,17)-(1759,21)
            NULL: 'NULL' (1759,17)-(1759,21)
        ,: ',' (1759,21)-(1759,22)
        init_declarator (1759,23)-(1759,36)
          pointer_declarator (1759,23)-(1759,29)
            *: '*' (1759,23)-(1759,24)
            identifier: 'spsep' (1759,24)-(1759,29)
          =: '=' (1759,30)-(1759,31)
          null (1759,32)-(1759,36)
            NULL: 'NULL' (1759,32)-(1759,36)
        ;: ';' (1759,36)-(1759,37)
      comment: '/*
     * Padding strings.  The left and right padding strings which
     * are repeated, then the ones which only occur once, for
     * the (l) and (r) flags.
     */' (1760,5)-(1764,8)
      declaration (1765,5)-(1765,75)
        primitive_type: 'char' (1765,5)-(1765,9)
        init_declarator (1765,10)-(1765,24)
          pointer_declarator (1765,10)-(1765,17)
            *: '*' (1765,10)-(1765,11)
            identifier: 'premul' (1765,11)-(1765,17)
          =: '=' (1765,18)-(1765,19)
          null (1765,20)-(1765,24)
            NULL: 'NULL' (1765,20)-(1765,24)
        ,: ',' (1765,24)-(1765,25)
        init_declarator (1765,26)-(1765,41)
          pointer_declarator (1765,26)-(1765,34)
            *: '*' (1765,26)-(1765,27)
            identifier: 'postmul' (1765,27)-(1765,34)
          =: '=' (1765,35)-(1765,36)
          null (1765,37)-(1765,41)
            NULL: 'NULL' (1765,37)-(1765,41)
        ,: ',' (1765,41)-(1765,42)
        init_declarator (1765,43)-(1765,57)
          pointer_declarator (1765,43)-(1765,50)
            *: '*' (1765,43)-(1765,44)
            identifier: 'preone' (1765,44)-(1765,50)
          =: '=' (1765,51)-(1765,52)
          null (1765,53)-(1765,57)
            NULL: 'NULL' (1765,53)-(1765,57)
        ,: ',' (1765,57)-(1765,58)
        init_declarator (1765,59)-(1765,74)
          pointer_declarator (1765,59)-(1765,67)
            *: '*' (1765,59)-(1765,60)
            identifier: 'postone' (1765,60)-(1765,67)
          =: '=' (1765,68)-(1765,69)
          null (1765,70)-(1765,74)
            NULL: 'NULL' (1765,70)-(1765,74)
        ;: ';' (1765,74)-(1765,75)
      comment: '/* Replacement string for /orig/repl and //orig/repl */' (1766,5)-(1766,60)
      declaration (1767,5)-(1767,26)
        primitive_type: 'char' (1767,5)-(1767,9)
        init_declarator (1767,10)-(1767,25)
          pointer_declarator (1767,10)-(1767,18)
            *: '*' (1767,10)-(1767,11)
            identifier: 'replstr' (1767,11)-(1767,18)
          =: '=' (1767,19)-(1767,20)
          null (1767,21)-(1767,25)
            NULL: 'NULL' (1767,21)-(1767,25)
        ;: ';' (1767,25)-(1767,26)
      comment: '/* The numbers for (l) and (r) */' (1768,5)-(1768,38)
      declaration (1769,5)-(1769,35)
        type_identifier: 'zlong' (1769,5)-(1769,10)
        init_declarator (1769,11)-(1769,21)
          identifier: 'prenum' (1769,11)-(1769,17)
          =: '=' (1769,18)-(1769,19)
          number_literal: '0' (1769,20)-(1769,21)
        ,: ',' (1769,21)-(1769,22)
        init_declarator (1769,23)-(1769,34)
          identifier: 'postnum' (1769,23)-(1769,30)
          =: '=' (1769,31)-(1769,32)
          number_literal: '0' (1769,33)-(1769,34)
        ;: ';' (1769,34)-(1769,35)
      preproc_ifdef (1770,1)-(1773,7)
        #ifdef: '#ifdef' (1770,1)-(1770,7)
        identifier: 'MULTIBYTE_SUPPORT' (1770,8)-(1770,25)
        comment: '/* The (m) flag: use width of multibyte characters */' (1771,5)-(1771,58)
        declaration (1772,5)-(1772,25)
          primitive_type: 'int' (1772,5)-(1772,8)
          init_declarator (1772,9)-(1772,24)
            identifier: 'multi_width' (1772,9)-(1772,20)
            =: '=' (1772,21)-(1772,22)
            number_literal: '0' (1772,23)-(1772,24)
          ;: ';' (1772,24)-(1772,25)
        #endif: '#endif' (1773,1)-(1773,7)
      comment: '/*
     * Whether the value has been copied.  Optimisation:  if we
     * are modifying an expression, we only need to copy it the
     * first time, and if we don't modify it we can just use the
     * value from the parameter or input.
     */' (1774,5)-(1779,8)
      declaration (1780,5)-(1780,20)
        primitive_type: 'int' (1780,5)-(1780,8)
        init_declarator (1780,9)-(1780,19)
          identifier: 'copied' (1780,9)-(1780,15)
          =: '=' (1780,16)-(1780,17)
          number_literal: '0' (1780,18)-(1780,19)
        ;: ';' (1780,19)-(1780,20)
      comment: '/*
     * The (A) flag for array assignment, with consequences for
     * splitting and joining; (AA) gives arrasg == 2 for associative
     * arrays.
     */' (1781,5)-(1785,8)
      declaration (1786,5)-(1786,20)
        primitive_type: 'int' (1786,5)-(1786,8)
        init_declarator (1786,9)-(1786,19)
          identifier: 'arrasg' (1786,9)-(1786,15)
          =: '=' (1786,16)-(1786,17)
          number_literal: '0' (1786,18)-(1786,19)
        ;: ';' (1786,19)-(1786,20)
      comment: '/*
     * The (e) flag.  As we need to do extra work not quite
     * at the end, the effect of this is kludged in several places.
     */' (1787,5)-(1790,8)
      declaration (1791,5)-(1791,18)
        primitive_type: 'int' (1791,5)-(1791,8)
        init_declarator (1791,9)-(1791,17)
          identifier: 'eval' (1791,9)-(1791,13)
          =: '=' (1791,14)-(1791,15)
          number_literal: '0' (1791,16)-(1791,17)
        ;: ';' (1791,17)-(1791,18)
      comment: '/*
     * The (P) flag.  This interacts a bit obscurely with whether
     * or not we are dealing with a sub expression (subexp).
     */' (1792,5)-(1795,8)
      declaration (1796,5)-(1796,19)
        primitive_type: 'int' (1796,5)-(1796,8)
        init_declarator (1796,9)-(1796,18)
          identifier: 'aspar' (1796,9)-(1796,14)
          =: '=' (1796,15)-(1796,16)
          number_literal: '0' (1796,17)-(1796,18)
        ;: ';' (1796,18)-(1796,19)
      comment: '/*
     * The (%) flag, c.f. mods again.
     */' (1797,5)-(1799,8)
      declaration (1800,5)-(1800,19)
        primitive_type: 'int' (1800,5)-(1800,8)
        init_declarator (1800,9)-(1800,18)
          identifier: 'presc' (1800,9)-(1800,14)
          =: '=' (1800,15)-(1800,16)
          number_literal: '0' (1800,17)-(1800,18)
        ;: ';' (1800,18)-(1800,19)
      comment: '/*
     * The (g) flag.  Process escape sequences with various GETKEY_ flags.
     */' (1801,5)-(1803,8)
      declaration (1804,5)-(1804,22)
        primitive_type: 'int' (1804,5)-(1804,8)
        init_declarator (1804,9)-(1804,21)
          identifier: 'getkeys' (1804,9)-(1804,16)
          =: '=' (1804,17)-(1804,18)
          number_literal: '-1' (1804,19)-(1804,21)
        ;: ';' (1804,21)-(1804,22)
      comment: '/*
     * The (@) flag; interacts obscurely with qt and isarr.
     * This is one of the things that decides whether multsub
     * will produce an array, but in an extremely indirect fashion.
     */' (1805,5)-(1809,8)
      declaration (1810,5)-(1810,79)
        primitive_type: 'int' (1810,5)-(1810,8)
        init_declarator (1810,9)-(1810,78)
          identifier: 'nojoin' (1810,9)-(1810,15)
          =: '=' (1810,16)-(1810,17)
          conditional_expression (1810,18)-(1810,78)
            parenthesized_expression (1810,18)-(1810,50)
              (: '(' (1810,18)-(1810,19)
              binary_expression (1810,19)-(1810,49)
                identifier: 'pf_flags' (1810,19)-(1810,27)
                &: '&' (1810,28)-(1810,29)
                identifier: 'PREFORK_SHWORDSPLIT' (1810,30)-(1810,49)
              ): ')' (1810,49)-(1810,50)
            ?: '?' (1810,51)-(1810,52)
            binary_expression (1810,53)-(1810,74)
              unary_expression (1810,53)-(1810,67)
                !: '!' (1810,53)-(1810,54)
                parenthesized_expression (1810,54)-(1810,67)
                  (: '(' (1810,54)-(1810,55)
                  binary_expression (1810,55)-(1810,66)
                    identifier: 'ifs' (1810,55)-(1810,58)
                    &&: '&&' (1810,59)-(1810,61)
                    pointer_expression (1810,62)-(1810,66)
                      *: '*' (1810,62)-(1810,63)
                      identifier: 'ifs' (1810,63)-(1810,66)
                  ): ')' (1810,66)-(1810,67)
              &&: '&&' (1810,68)-(1810,70)
              unary_expression (1810,71)-(1810,74)
                !: '!' (1810,71)-(1810,72)
                identifier: 'qt' (1810,72)-(1810,74)
            :: ':' (1810,75)-(1810,76)
            number_literal: '0' (1810,77)-(1810,78)
        ;: ';' (1810,78)-(1810,79)
      comment: '/*
     * != 0 means ${...}, otherwise $...  What works without braces
     * is largely a historical artefact (everything works with braces,
     * I sincerely hope).
     */' (1811,5)-(1815,8)
      declaration (1816,5)-(1816,22)
        primitive_type: 'char' (1816,5)-(1816,9)
        init_declarator (1816,10)-(1816,21)
          identifier: 'inbrace' (1816,10)-(1816,17)
          =: '=' (1816,18)-(1816,19)
          number_literal: '0' (1816,20)-(1816,21)
        ;: ';' (1816,21)-(1816,22)
      comment: '/*
     * Use for the (k) flag.  Goes down into the parameter code,
     * sometimes.
     */' (1817,5)-(1820,8)
      declaration (1821,5)-(1821,20)
        primitive_type: 'char' (1821,5)-(1821,9)
        init_declarator (1821,10)-(1821,19)
          identifier: 'hkeys' (1821,10)-(1821,15)
          =: '=' (1821,16)-(1821,17)
          number_literal: '0' (1821,18)-(1821,19)
        ;: ';' (1821,19)-(1821,20)
      comment: '/*
     * Used for the (v) flag, ditto.  Not quite sure why they're
     * separate, but the tradition seems to be that things only
     * get combined when that makes the result more obscure rather
     * than less.
     */' (1822,5)-(1827,8)
      declaration (1828,5)-(1828,20)
        primitive_type: 'char' (1828,5)-(1828,9)
        init_declarator (1828,10)-(1828,19)
          identifier: 'hvals' (1828,10)-(1828,15)
          =: '=' (1828,16)-(1828,17)
          number_literal: '0' (1828,18)-(1828,19)
        ;: ';' (1828,19)-(1828,20)
      comment: '/*
     * Whether we had to evaluate a subexpression, i.e. an
     * internal ${...} or $(...) or plain $pm.  We almost don't
     * need to remember this (which would be neater), but the (P)
     * flag means the subexp and !subexp code is obscurely combined,
     * and the argument passing to fetchvalue has another kludge.
     */' (1829,5)-(1835,8)
      declaration (1836,5)-(1836,16)
        primitive_type: 'int' (1836,5)-(1836,8)
        identifier: 'subexp' (1836,9)-(1836,15)
        ;: ';' (1836,15)-(1836,16)
      comment: '/*
     * If we're referring to the positional parameters, then
     * e.g ${*:1:1} refers to $1.
     * This is for compatibility.
     */' (1837,5)-(1841,8)
      declaration (1842,5)-(1842,34)
        primitive_type: 'int' (1842,5)-(1842,8)
        init_declarator (1842,9)-(1842,33)
          identifier: 'horrible_offset_hack' (1842,9)-(1842,29)
          =: '=' (1842,30)-(1842,31)
          number_literal: '0' (1842,32)-(1842,33)
        ;: ';' (1842,33)-(1842,34)
      comment: '/*
     * Signal back from multsub: with something like
     *   x${:- $foo}
     * with word-splitting active we need to split on that leading
     * whitespace.  However, if there's no "x" the whitespace is
     * simply removed.
     */' (1843,5)-(1849,8)
      declaration (1850,5)-(1850,22)
        primitive_type: 'int' (1850,5)-(1850,8)
        init_declarator (1850,9)-(1850,21)
          identifier: 'ms_flags' (1850,9)-(1850,17)
          =: '=' (1850,18)-(1850,19)
          number_literal: '0' (1850,20)-(1850,21)
        ;: ';' (1850,21)-(1850,22)
      comment: '/*
     * We need to do an extra fetch to honour the (P) flag.
     * Complicated by the use of subexpressions that may have
     * nested (P) flags.
     */' (1851,5)-(1855,8)
      declaration (1856,5)-(1856,22)
        primitive_type: 'int' (1856,5)-(1856,8)
        identifier: 'fetch_needed' (1856,9)-(1856,21)
        ;: ';' (1856,21)-(1856,22)
      expression_statement (1858,5)-(1858,17)
        assignment_expression (1858,5)-(1858,16)
          pointer_expression (1858,5)-(1858,9)
            *: '*' (1858,5)-(1858,6)
            update_expression (1858,6)-(1858,9)
              identifier: 's' (1858,6)-(1858,7)
              ++: '++' (1858,7)-(1858,9)
          =: '=' (1858,10)-(1858,11)
          char_literal (1858,12)-(1858,16)
            ': ''' (1858,12)-(1858,13)
            escape_sequence: '\0' (1858,13)-(1858,15)
            ': ''' (1858,15)-(1858,16)
        ;: ';' (1858,16)-(1858,17)
      comment: '/*
     * Nothing to do unless the character following the $ is
     * something we recognise.
     *
     * Shouldn't this be a table or something?  We test for all
     * these later on, too.
     */' (1859,5)-(1865,8)
      expression_statement (1866,5)-(1866,12)
        assignment_expression (1866,5)-(1866,11)
          identifier: 'c' (1866,5)-(1866,6)
          =: '=' (1866,7)-(1866,8)
          pointer_expression (1866,9)-(1866,11)
            *: '*' (1866,9)-(1866,10)
            identifier: 's' (1866,10)-(1866,11)
        ;: ';' (1866,11)-(1866,12)
      if_statement (1867,5)-(1877,6)
        if: 'if' (1867,5)-(1867,7)
        parenthesized_expression (1867,8)-(1873,49)
          (: '(' (1867,8)-(1867,9)
          binary_expression (1867,9)-(1873,48)
            binary_expression (1867,9)-(1873,36)
              binary_expression (1867,9)-(1873,22)
                binary_expression (1867,9)-(1873,10)
                  binary_expression (1867,9)-(1872,53)
                    binary_expression (1867,9)-(1872,41)
                      binary_expression (1867,9)-(1872,26)
                        binary_expression (1867,9)-(1872,14)
                          binary_expression (1867,9)-(1871,47)
                            binary_expression (1867,9)-(1871,35)
                              binary_expression (1867,9)-(1871,23)
                                binary_expression (1867,9)-(1871,10)
                                  binary_expression (1867,9)-(1870,24)
                                    binary_expression (1867,9)-(1870,10)
                                      binary_expression (1867,9)-(1869,53)
                                        binary_expression (1867,9)-(1869,37)
                                          binary_expression (1867,9)-(1869,22)
                                            binary_expression (1867,9)-(1869,10)
                                              binary_expression (1867,9)-(1868,13)
                                                binary_expression (1867,9)-(1867,64)
                                                  binary_expression (1867,9)-(1867,50)
                                                    binary_expression (1867,9)-(1867,37)
                                                      call_expression (1867,9)-(1867,32)
                                                        identifier: 'itype_end' (1867,9)-(1867,18)
                                                        argument_list (1867,18)-(1867,32)
                                                          (: '(' (1867,18)-(1867,19)
                                                          identifier: 's' (1867,19)-(1867,20)
                                                          ,: ',' (1867,20)-(1867,21)
                                                          identifier: 'IIDENT' (1867,22)-(1867,28)
                                                          ,: ',' (1867,28)-(1867,29)
                                                          number_literal: '1' (1867,30)-(1867,31)
                                                          ): ')' (1867,31)-(1867,32)
                                                      ==: '==' (1867,33)-(1867,35)
                                                      identifier: 's' (1867,36)-(1867,37)
                                                    &&: '&&' (1867,38)-(1867,40)
                                                    binary_expression (1867,41)-(1867,50)
                                                      pointer_expression (1867,41)-(1867,43)
                                                        *: '*' (1867,41)-(1867,42)
                                                        identifier: 's' (1867,42)-(1867,43)
                                                      !=: '!=' (1867,44)-(1867,46)
                                                      char_literal (1867,47)-(1867,50)
                                                        ': ''' (1867,47)-(1867,48)
                                                        character: '#' (1867,48)-(1867,49)
                                                        ': ''' (1867,49)-(1867,50)
                                                  &&: '&&' (1867,51)-(1867,53)
                                                  binary_expression (1867,54)-(1867,64)
                                                    identifier: 'c' (1867,54)-(1867,55)
                                                    !=: '!=' (1867,56)-(1867,58)
                                                    identifier: 'Pound' (1867,59)-(1867,64)
                                                &&: '&&' (1867,65)-(1867,67)
                                                unary_expression (1868,2)-(1868,13)
                                                  !: '!' (1868,2)-(1868,3)
                                                  call_expression (1868,3)-(1868,13)
                                                    identifier: 'IS_DASH' (1868,3)-(1868,10)
                                                    argument_list (1868,10)-(1868,13)
                                                      (: '(' (1868,10)-(1868,11)
                                                      identifier: 'c' (1868,11)-(1868,12)
                                                      ): ')' (1868,12)-(1868,13)
                                              &&: '&&' (1868,14)-(1868,16)
                                              binary_expression (1869,2)-(1869,10)
                                                identifier: 'c' (1869,2)-(1869,3)
                                                !=: '!=' (1869,4)-(1869,6)
                                                char_literal (1869,7)-(1869,10)
                                                  ': ''' (1869,7)-(1869,8)
                                                  character: '!' (1869,8)-(1869,9)
                                                  ': ''' (1869,9)-(1869,10)
                                            &&: '&&' (1869,11)-(1869,13)
                                            binary_expression (1869,14)-(1869,22)
                                              identifier: 'c' (1869,14)-(1869,15)
                                              !=: '!=' (1869,16)-(1869,18)
                                              char_literal (1869,19)-(1869,22)
                                                ': ''' (1869,19)-(1869,20)
                                                character: '$' (1869,20)-(1869,21)
                                                ': ''' (1869,21)-(1869,22)
                                          &&: '&&' (1869,23)-(1869,25)
                                          binary_expression (1869,26)-(1869,37)
                                            identifier: 'c' (1869,26)-(1869,27)
                                            !=: '!=' (1869,28)-(1869,30)
                                            identifier: 'String' (1869,31)-(1869,37)
                                        &&: '&&' (1869,38)-(1869,40)
                                        binary_expression (1869,41)-(1869,53)
                                          identifier: 'c' (1869,41)-(1869,42)
                                          !=: '!=' (1869,43)-(1869,45)
                                          identifier: 'Qstring' (1869,46)-(1869,53)
                                      &&: '&&' (1869,54)-(1869,56)
                                      binary_expression (1870,2)-(1870,10)
                                        identifier: 'c' (1870,2)-(1870,3)
                                        !=: '!=' (1870,4)-(1870,6)
                                        char_literal (1870,7)-(1870,10)
                                          ': ''' (1870,7)-(1870,8)
                                          character: '?' (1870,8)-(1870,9)
                                          ': ''' (1870,9)-(1870,10)
                                    &&: '&&' (1870,11)-(1870,13)
                                    binary_expression (1870,14)-(1870,24)
                                      identifier: 'c' (1870,14)-(1870,15)
                                      !=: '!=' (1870,16)-(1870,18)
                                      identifier: 'Quest' (1870,19)-(1870,24)
                                  &&: '&&' (1870,25)-(1870,27)
                                  binary_expression (1871,2)-(1871,10)
                                    identifier: 'c' (1871,2)-(1871,3)
                                    !=: '!=' (1871,4)-(1871,6)
                                    char_literal (1871,7)-(1871,10)
                                      ': ''' (1871,7)-(1871,8)
                                      character: '*' (1871,8)-(1871,9)
                                      ': ''' (1871,9)-(1871,10)
                                &&: '&&' (1871,11)-(1871,13)
                                binary_expression (1871,14)-(1871,23)
                                  identifier: 'c' (1871,14)-(1871,15)
                                  !=: '!=' (1871,16)-(1871,18)
                                  identifier: 'Star' (1871,19)-(1871,23)
                              &&: '&&' (1871,24)-(1871,26)
                              binary_expression (1871,27)-(1871,35)
                                identifier: 'c' (1871,27)-(1871,28)
                                !=: '!=' (1871,29)-(1871,31)
                                char_literal (1871,32)-(1871,35)
                                  ': ''' (1871,32)-(1871,33)
                                  character: '@' (1871,33)-(1871,34)
                                  ': ''' (1871,34)-(1871,35)
                            &&: '&&' (1871,36)-(1871,38)
                            binary_expression (1871,39)-(1871,47)
                              identifier: 'c' (1871,39)-(1871,40)
                              !=: '!=' (1871,41)-(1871,43)
                              char_literal (1871,44)-(1871,47)
                                ': ''' (1871,44)-(1871,45)
                                character: '{' (1871,45)-(1871,46)
                                ': ''' (1871,46)-(1871,47)
                          &&: '&&' (1871,48)-(1871,50)
                          binary_expression (1872,2)-(1872,14)
                            identifier: 'c' (1872,2)-(1872,3)
                            !=: '!=' (1872,4)-(1872,6)
                            identifier: 'Inbrace' (1872,7)-(1872,14)
                        &&: '&&' (1872,15)-(1872,17)
                        binary_expression (1872,18)-(1872,26)
                          identifier: 'c' (1872,18)-(1872,19)
                          !=: '!=' (1872,20)-(1872,22)
                          char_literal (1872,23)-(1872,26)
                            ': ''' (1872,23)-(1872,24)
                            character: '=' (1872,24)-(1872,25)
                            ': ''' (1872,25)-(1872,26)
                      &&: '&&' (1872,27)-(1872,29)
                      binary_expression (1872,30)-(1872,41)
                        identifier: 'c' (1872,30)-(1872,31)
                        !=: '!=' (1872,32)-(1872,34)
                        identifier: 'Equals' (1872,35)-(1872,41)
                    &&: '&&' (1872,42)-(1872,44)
                    binary_expression (1872,45)-(1872,53)
                      identifier: 'c' (1872,45)-(1872,46)
                      !=: '!=' (1872,47)-(1872,49)
                      identifier: 'Hat' (1872,50)-(1872,53)
                  &&: '&&' (1872,54)-(1872,56)
                  binary_expression (1873,2)-(1873,10)
                    identifier: 'c' (1873,2)-(1873,3)
                    !=: '!=' (1873,4)-(1873,6)
                    char_literal (1873,7)-(1873,10)
                      ': ''' (1873,7)-(1873,8)
                      character: '^' (1873,8)-(1873,9)
                      ': ''' (1873,9)-(1873,10)
                &&: '&&' (1873,11)-(1873,13)
                binary_expression (1873,14)-(1873,22)
                  identifier: 'c' (1873,14)-(1873,15)
                  !=: '!=' (1873,16)-(1873,18)
                  char_literal (1873,19)-(1873,22)
                    ': ''' (1873,19)-(1873,20)
                    character: '~' (1873,20)-(1873,21)
                    ': ''' (1873,21)-(1873,22)
              &&: '&&' (1873,23)-(1873,25)
              binary_expression (1873,26)-(1873,36)
                identifier: 'c' (1873,26)-(1873,27)
                !=: '!=' (1873,28)-(1873,30)
                identifier: 'Tilde' (1873,31)-(1873,36)
            &&: '&&' (1873,37)-(1873,39)
            binary_expression (1873,40)-(1873,48)
              identifier: 'c' (1873,40)-(1873,41)
              !=: '!=' (1873,42)-(1873,44)
              char_literal (1873,45)-(1873,48)
                ': ''' (1873,45)-(1873,46)
                character: '+' (1873,46)-(1873,47)
                ': ''' (1873,47)-(1873,48)
          ): ')' (1873,48)-(1873,49)
        compound_statement (1873,50)-(1877,6)
          {: '{' (1873,50)-(1873,51)
          expression_statement (1874,2)-(1874,14)
            assignment_expression (1874,2)-(1874,13)
              subscript_expression (1874,2)-(1874,7)
                identifier: 's' (1874,2)-(1874,3)
                [: '[' (1874,3)-(1874,4)
                number_literal: '-1' (1874,4)-(1874,6)
                ]: ']' (1874,6)-(1874,7)
              =: '=' (1874,8)-(1874,9)
              char_literal (1874,10)-(1874,13)
                ': ''' (1874,10)-(1874,11)
                character: '$' (1874,11)-(1874,12)
                ': ''' (1874,12)-(1874,13)
            ;: ';' (1874,13)-(1874,14)
          expression_statement (1875,2)-(1875,11)
            assignment_expression (1875,2)-(1875,10)
              pointer_expression (1875,2)-(1875,6)
                *: '*' (1875,2)-(1875,3)
                identifier: 'str' (1875,3)-(1875,6)
              =: '=' (1875,7)-(1875,8)
              identifier: 's' (1875,9)-(1875,10)
            ;: ';' (1875,10)-(1875,11)
          return_statement (1876,2)-(1876,11)
            return: 'return' (1876,2)-(1876,8)
            identifier: 'n' (1876,9)-(1876,10)
            ;: ';' (1876,10)-(1876,11)
          }: '}' (1877,5)-(1877,6)
      expression_statement (1878,5)-(1878,60)
        call_expression (1878,5)-(1878,59)
          identifier: 'DPUTS' (1878,5)-(1878,10)
          argument_list (1878,10)-(1878,59)
            (: '(' (1878,10)-(1878,11)
            binary_expression (1878,11)-(1878,19)
              identifier: 'c' (1878,11)-(1878,12)
              ==: '==' (1878,13)-(1878,15)
              char_literal (1878,16)-(1878,19)
                ': ''' (1878,16)-(1878,17)
                character: '{' (1878,17)-(1878,18)
                ': ''' (1878,18)-(1878,19)
            ,: ',' (1878,19)-(1878,20)
            string_literal (1878,21)-(1878,58)
              ": '"' (1878,21)-(1878,22)
              string_content: 'BUG: inbrace == '{' in paramsubst()' (1878,22)-(1878,57)
              ": '"' (1878,57)-(1878,58)
            ): ')' (1878,58)-(1878,59)
        ;: ';' (1878,59)-(1878,60)
      comment: '/*
     * Extra processing if there is an opening brace: mostly
     * flags in parentheses, but also one ksh hack.
     */' (1879,5)-(1882,8)
      if_statement (1883,5)-(2291,6)
        if: 'if' (1883,5)-(1883,7)
        parenthesized_expression (1883,8)-(1883,22)
          (: '(' (1883,8)-(1883,9)
          binary_expression (1883,9)-(1883,21)
            identifier: 'c' (1883,9)-(1883,10)
            ==: '==' (1883,11)-(1883,13)
            identifier: 'Inbrace' (1883,14)-(1883,21)
          ): ')' (1883,21)-(1883,22)
        compound_statement (1883,23)-(2291,6)
          {: '{' (1883,23)-(1883,24)
          expression_statement (1884,2)-(1884,14)
            assignment_expression (1884,2)-(1884,13)
              identifier: 'inbrace' (1884,2)-(1884,9)
              =: '=' (1884,10)-(1884,11)
              number_literal: '1' (1884,12)-(1884,13)
            ;: ';' (1884,13)-(1884,14)
          expression_statement (1885,2)-(1885,6)
            update_expression (1885,2)-(1885,5)
              identifier: 's' (1885,2)-(1885,3)
              ++: '++' (1885,3)-(1885,5)
            ;: ';' (1885,5)-(1885,6)
          comment: '/*
	 * In ksh emulation a leading `!' is a special flag working
	 * sort of like our (k).
	 * TODO: this is one of very few cases tied directly to
	 * the emulation mode rather than an option.  Since ksh
	 * doesn't have parameter flags it might be neater to
	 * handle this with the ^, =, ~ stuff, below.
	 */' (1886,2)-(1893,5)
          if_statement (1894,2)-(2290,3)
            if: 'if' (1894,2)-(1894,4)
            parenthesized_expression (1894,5)-(1894,68)
              (: '(' (1894,5)-(1894,6)
              binary_expression (1894,6)-(1894,67)
                binary_expression (1894,6)-(1894,41)
                  binary_expression (1894,6)-(1894,21)
                    parenthesized_expression (1894,6)-(1894,14)
                      (: '(' (1894,6)-(1894,7)
                      assignment_expression (1894,7)-(1894,13)
                        identifier: 'c' (1894,7)-(1894,8)
                        =: '=' (1894,9)-(1894,10)
                        pointer_expression (1894,11)-(1894,13)
                          *: '*' (1894,11)-(1894,12)
                          identifier: 's' (1894,12)-(1894,13)
                      ): ')' (1894,13)-(1894,14)
                    ==: '==' (1894,15)-(1894,17)
                    char_literal (1894,18)-(1894,21)
                      ': ''' (1894,18)-(1894,19)
                      character: '!' (1894,19)-(1894,20)
                      ': ''' (1894,20)-(1894,21)
                  &&: '&&' (1894,22)-(1894,24)
                  binary_expression (1894,25)-(1894,41)
                    subscript_expression (1894,25)-(1894,29)
                      identifier: 's' (1894,25)-(1894,26)
                      [: '[' (1894,26)-(1894,27)
                      number_literal: '1' (1894,27)-(1894,28)
                      ]: ']' (1894,28)-(1894,29)
                    !=: '!=' (1894,30)-(1894,32)
                    identifier: 'Outbrace' (1894,33)-(1894,41)
                &&: '&&' (1894,42)-(1894,44)
                call_expression (1894,45)-(1894,67)
                  identifier: 'EMULATION' (1894,45)-(1894,54)
                  argument_list (1894,54)-(1894,67)
                    (: '(' (1894,54)-(1894,55)
                    identifier: 'EMULATE_KSH' (1894,55)-(1894,66)
                    ): ')' (1894,66)-(1894,67)
              ): ')' (1894,67)-(1894,68)
            compound_statement (1894,69)-(1897,3)
              {: '{' (1894,69)-(1894,70)
              expression_statement (1895,6)-(1895,30)
                assignment_expression (1895,6)-(1895,29)
                  identifier: 'hkeys' (1895,6)-(1895,11)
                  =: '=' (1895,12)-(1895,13)
                  identifier: 'SCANPM_WANTKEYS' (1895,14)-(1895,29)
                ;: ';' (1895,29)-(1895,30)
              expression_statement (1896,6)-(1896,10)
                update_expression (1896,6)-(1896,9)
                  identifier: 's' (1896,6)-(1896,7)
                  ++: '++' (1896,7)-(1896,9)
                ;: ';' (1896,9)-(1896,10)
              }: '}' (1897,2)-(1897,3)
            else_clause (1897,4)-(2290,3)
              else: 'else' (1897,4)-(1897,8)
              if_statement (1897,9)-(2290,3)
                if: 'if' (1897,9)-(1897,11)
                parenthesized_expression (1897,12)-(1897,36)
                  (: '(' (1897,12)-(1897,13)
                  binary_expression (1897,13)-(1897,35)
                    binary_expression (1897,13)-(1897,21)
                      identifier: 'c' (1897,13)-(1897,14)
                      ==: '==' (1897,15)-(1897,17)
                      char_literal (1897,18)-(1897,21)
                        ': ''' (1897,18)-(1897,19)
                        character: '(' (1897,19)-(1897,20)
                        ': ''' (1897,20)-(1897,21)
                    ||: '||' (1897,22)-(1897,24)
                    binary_expression (1897,25)-(1897,35)
                      identifier: 'c' (1897,25)-(1897,26)
                      ==: '==' (1897,27)-(1897,29)
                      identifier: 'Inpar' (1897,30)-(1897,35)
                  ): ')' (1897,35)-(1897,36)
                compound_statement (1897,37)-(2290,3)
                  {: '{' (1897,37)-(1897,38)
                  declaration (1898,6)-(1898,19)
                    primitive_type: 'char' (1898,6)-(1898,10)
                    pointer_declarator (1898,11)-(1898,13)
                      *: '*' (1898,11)-(1898,12)
                      identifier: 't' (1898,12)-(1898,13)
                    ,: ',' (1898,13)-(1898,14)
                    identifier: 'sav' (1898,15)-(1898,18)
                    ;: ';' (1898,18)-(1898,19)
                  declaration (1899,6)-(1899,17)
                    primitive_type: 'int' (1899,6)-(1899,9)
                    init_declarator (1899,10)-(1899,16)
                      identifier: 'tt' (1899,10)-(1899,12)
                      =: '=' (1899,13)-(1899,14)
                      number_literal: '0' (1899,15)-(1899,16)
                    ;: ';' (1899,16)-(1899,17)
                  declaration (1900,6)-(1900,16)
                    type_identifier: 'zlong' (1900,6)-(1900,11)
                    identifier: 'num' (1900,12)-(1900,15)
                    ;: ';' (1900,15)-(1900,16)
                  comment: '/*
	     * The (p) flag is only remembered within
	     * this block.  It says we do print-style handling
	     * on the values for flags, but only on those.
	     */' (1901,6)-(1905,9)
                  declaration (1906,6)-(1906,22)
                    primitive_type: 'int' (1906,6)-(1906,9)
                    init_declarator (1906,10)-(1906,21)
                      identifier: 'escapes' (1906,10)-(1906,17)
                      =: '=' (1906,18)-(1906,19)
                      number_literal: '0' (1906,20)-(1906,21)
                    ;: ';' (1906,21)-(1906,22)
                  comment: '/*
	     * '~' in parentheses caused tokenization of string arg:
	     * similar to (p).
	     */' (1907,6)-(1910,9)
                  declaration (1911,6)-(1911,22)
                    primitive_type: 'int' (1911,6)-(1911,9)
                    init_declarator (1911,10)-(1911,21)
                      identifier: 'tok_arg' (1911,10)-(1911,17)
                      =: '=' (1911,18)-(1911,19)
                      number_literal: '0' (1911,20)-(1911,21)
                    ;: ';' (1911,21)-(1911,22)
                  for_statement (1913,6)-(2288,7)
                    for: 'for' (1913,6)-(1913,9)
                    (: '(' (1913,10)-(1913,11)
                    update_expression (1913,11)-(1913,14)
                      identifier: 's' (1913,11)-(1913,12)
                      ++: '++' (1913,12)-(1913,14)
                    ;: ';' (1913,14)-(1913,15)
                    binary_expression (1913,16)-(1913,46)
                      binary_expression (1913,16)-(1913,31)
                        parenthesized_expression (1913,16)-(1913,24)
                          (: '(' (1913,16)-(1913,17)
                          assignment_expression (1913,17)-(1913,23)
                            identifier: 'c' (1913,17)-(1913,18)
                            =: '=' (1913,19)-(1913,20)
                            pointer_expression (1913,21)-(1913,23)
                              *: '*' (1913,21)-(1913,22)
                              identifier: 's' (1913,22)-(1913,23)
                          ): ')' (1913,23)-(1913,24)
                        !=: '!=' (1913,25)-(1913,27)
                        char_literal (1913,28)-(1913,31)
                          ': ''' (1913,28)-(1913,29)
                          character: ')' (1913,29)-(1913,30)
                          ': ''' (1913,30)-(1913,31)
                      &&: '&&' (1913,32)-(1913,34)
                      binary_expression (1913,35)-(1913,46)
                        identifier: 'c' (1913,35)-(1913,36)
                        !=: '!=' (1913,37)-(1913,39)
                        identifier: 'Outpar' (1913,40)-(1913,46)
                    ;: ';' (1913,46)-(1913,47)
                    comma_expression (1913,48)-(1913,59)
                      update_expression (1913,48)-(1913,51)
                        identifier: 's' (1913,48)-(1913,49)
                        ++: '++' (1913,49)-(1913,51)
                      ,: ',' (1913,51)-(1913,52)
                      assignment_expression (1913,53)-(1913,59)
                        identifier: 'tt' (1913,53)-(1913,55)
                        =: '=' (1913,56)-(1913,57)
                        number_literal: '0' (1913,58)-(1913,59)
                    ): ')' (1913,59)-(1913,60)
                    compound_statement (1913,61)-(2288,7)
                      {: '{' (1913,61)-(1913,62)
                      declaration (1914,3)-(1914,14)
                        primitive_type: 'int' (1914,3)-(1914,6)
                        identifier: 'arglen' (1914,7)-(1914,13)
                        ;: ';' (1914,13)-(1914,14)
                      comment: '/* length of modifier argument */' (1914,15)-(1914,48)
                      declaration (1915,3)-(1915,14)
                        primitive_type: 'int' (1915,3)-(1915,6)
                        identifier: 'dellen' (1915,7)-(1915,13)
                        ;: ';' (1915,13)-(1915,14)
                      comment: '/* length of matched delimiter, 0 if not */' (1915,15)-(1915,58)
                      declaration (1916,3)-(1916,14)
                        primitive_type: 'char' (1916,3)-(1916,7)
                        pointer_declarator (1916,8)-(1916,13)
                          *: '*' (1916,8)-(1916,9)
                          identifier: 'del0' (1916,9)-(1916,13)
                        ;: ';' (1916,13)-(1916,14)
                      comment: '/* pointer to initial delimiter */' (1916,15)-(1916,49)
                      switch_statement (1918,3)-(2287,4)
                        switch: 'switch' (1918,3)-(1918,9)
                        parenthesized_expression (1918,10)-(1918,13)
                          (: '(' (1918,10)-(1918,11)
                          identifier: 'c' (1918,11)-(1918,12)
                          ): ')' (1918,12)-(1918,13)
                        compound_statement (1918,14)-(2287,4)
                          {: '{' (1918,14)-(1918,15)
                          case_statement (1919,3)-(1919,12)
                            case: 'case' (1919,3)-(1919,7)
                            char_literal (1919,8)-(1919,11)
                              ': ''' (1919,8)-(1919,9)
                              character: ')' (1919,9)-(1919,10)
                              ': ''' (1919,10)-(1919,11)
                            :: ':' (1919,11)-(1919,12)
                          case_statement (1920,3)-(1922,13)
                            case: 'case' (1920,3)-(1920,7)
                            identifier: 'Outpar' (1920,8)-(1920,14)
                            :: ':' (1920,14)-(1920,15)
                            comment: '/* how can this happen? */' (1921,7)-(1921,33)
                            break_statement (1922,7)-(1922,13)
                              break: 'break' (1922,7)-(1922,12)
                              ;: ';' (1922,12)-(1922,13)
                          case_statement (1923,3)-(1923,12)
                            case: 'case' (1923,3)-(1923,7)
                            char_literal (1923,8)-(1923,11)
                              ': ''' (1923,8)-(1923,9)
                              character: '~' (1923,9)-(1923,10)
                              ': ''' (1923,10)-(1923,11)
                            :: ':' (1923,11)-(1923,12)
                          case_statement (1924,3)-(1926,13)
                            case: 'case' (1924,3)-(1924,7)
                            identifier: 'Tilde' (1924,8)-(1924,13)
                            :: ':' (1924,13)-(1924,14)
                            expression_statement (1925,7)-(1925,26)
                              assignment_expression (1925,7)-(1925,25)
                                identifier: 'tok_arg' (1925,7)-(1925,14)
                                =: '=' (1925,15)-(1925,16)
                                unary_expression (1925,17)-(1925,25)
                                  !: '!' (1925,17)-(1925,18)
                                  identifier: 'tok_arg' (1925,18)-(1925,25)
                              ;: ';' (1925,25)-(1925,26)
                            break_statement (1926,7)-(1926,13)
                              break: 'break' (1926,7)-(1926,12)
                              ;: ';' (1926,12)-(1926,13)
                          case_statement (1927,3)-(1929,13)
                            case: 'case' (1927,3)-(1927,7)
                            char_literal (1927,8)-(1927,11)
                              ': ''' (1927,8)-(1927,9)
                              character: 'A' (1927,9)-(1927,10)
                              ': ''' (1927,10)-(1927,11)
                            :: ':' (1927,11)-(1927,12)
                            expression_statement (1928,7)-(1928,16)
                              update_expression (1928,7)-(1928,15)
                                ++: '++' (1928,7)-(1928,9)
                                identifier: 'arrasg' (1928,9)-(1928,15)
                              ;: ';' (1928,15)-(1928,16)
                            break_statement (1929,7)-(1929,13)
                              break: 'break' (1929,7)-(1929,12)
                              ;: ';' (1929,12)-(1929,13)
                          case_statement (1930,3)-(1932,13)
                            case: 'case' (1930,3)-(1930,7)
                            char_literal (1930,8)-(1930,11)
                              ': ''' (1930,8)-(1930,9)
                              character: '@' (1930,9)-(1930,10)
                              ': ''' (1930,10)-(1930,11)
                            :: ':' (1930,11)-(1930,12)
                            expression_statement (1931,7)-(1931,18)
                              assignment_expression (1931,7)-(1931,17)
                                identifier: 'nojoin' (1931,7)-(1931,13)
                                =: '=' (1931,14)-(1931,15)
                                number_literal: '2' (1931,16)-(1931,17)
                              ;: ';' (1931,17)-(1931,18)
                            comment: '/* nojoin = 2 means force */' (1931,19)-(1931,47)
                            break_statement (1932,7)-(1932,13)
                              break: 'break' (1932,7)-(1932,12)
                              ;: ';' (1932,12)-(1932,13)
                          case_statement (1933,3)-(1933,12)
                            case: 'case' (1933,3)-(1933,7)
                            char_literal (1933,8)-(1933,11)
                              ': ''' (1933,8)-(1933,9)
                              character: '*' (1933,9)-(1933,10)
                              ': ''' (1933,10)-(1933,11)
                            :: ':' (1933,11)-(1933,12)
                          case_statement (1934,3)-(1936,13)
                            case: 'case' (1934,3)-(1934,7)
                            identifier: 'Star' (1934,8)-(1934,12)
                            :: ':' (1934,12)-(1934,13)
                            expression_statement (1935,7)-(1935,26)
                              assignment_expression (1935,7)-(1935,25)
                                identifier: 'flags' (1935,7)-(1935,12)
                                |=: '|=' (1935,13)-(1935,15)
                                identifier: 'SUB_EGLOB' (1935,16)-(1935,25)
                              ;: ';' (1935,25)-(1935,26)
                            break_statement (1936,7)-(1936,13)
                              break: 'break' (1936,7)-(1936,12)
                              ;: ';' (1936,12)-(1936,13)
                          case_statement (1937,3)-(1939,13)
                            case: 'case' (1937,3)-(1937,7)
                            char_literal (1937,8)-(1937,11)
                              ': ''' (1937,8)-(1937,9)
                              character: 'M' (1937,9)-(1937,10)
                              ': ''' (1937,10)-(1937,11)
                            :: ':' (1937,11)-(1937,12)
                            expression_statement (1938,7)-(1938,26)
                              assignment_expression (1938,7)-(1938,25)
                                identifier: 'flags' (1938,7)-(1938,12)
                                |=: '|=' (1938,13)-(1938,15)
                                identifier: 'SUB_MATCH' (1938,16)-(1938,25)
                              ;: ';' (1938,25)-(1938,26)
                            break_statement (1939,7)-(1939,13)
                              break: 'break' (1939,7)-(1939,12)
                              ;: ';' (1939,12)-(1939,13)
                          case_statement (1940,3)-(1942,13)
                            case: 'case' (1940,3)-(1940,7)
                            char_literal (1940,8)-(1940,11)
                              ': ''' (1940,8)-(1940,9)
                              character: 'R' (1940,9)-(1940,10)
                              ': ''' (1940,10)-(1940,11)
                            :: ':' (1940,11)-(1940,12)
                            expression_statement (1941,7)-(1941,25)
                              assignment_expression (1941,7)-(1941,24)
                                identifier: 'flags' (1941,7)-(1941,12)
                                |=: '|=' (1941,13)-(1941,15)
                                identifier: 'SUB_REST' (1941,16)-(1941,24)
                              ;: ';' (1941,24)-(1941,25)
                            break_statement (1942,7)-(1942,13)
                              break: 'break' (1942,7)-(1942,12)
                              ;: ';' (1942,12)-(1942,13)
                          case_statement (1943,3)-(1945,13)
                            case: 'case' (1943,3)-(1943,7)
                            char_literal (1943,8)-(1943,11)
                              ': ''' (1943,8)-(1943,9)
                              character: 'B' (1943,9)-(1943,10)
                              ': ''' (1943,10)-(1943,11)
                            :: ':' (1943,11)-(1943,12)
                            expression_statement (1944,7)-(1944,25)
                              assignment_expression (1944,7)-(1944,24)
                                identifier: 'flags' (1944,7)-(1944,12)
                                |=: '|=' (1944,13)-(1944,15)
                                identifier: 'SUB_BIND' (1944,16)-(1944,24)
                              ;: ';' (1944,24)-(1944,25)
                            break_statement (1945,7)-(1945,13)
                              break: 'break' (1945,7)-(1945,12)
                              ;: ';' (1945,12)-(1945,13)
                          case_statement (1946,3)-(1948,13)
                            case: 'case' (1946,3)-(1946,7)
                            char_literal (1946,8)-(1946,11)
                              ': ''' (1946,8)-(1946,9)
                              character: 'E' (1946,9)-(1946,10)
                              ': ''' (1946,10)-(1946,11)
                            :: ':' (1946,11)-(1946,12)
                            expression_statement (1947,7)-(1947,25)
                              assignment_expression (1947,7)-(1947,24)
                                identifier: 'flags' (1947,7)-(1947,12)
                                |=: '|=' (1947,13)-(1947,15)
                                identifier: 'SUB_EIND' (1947,16)-(1947,24)
                              ;: ';' (1947,24)-(1947,25)
                            break_statement (1948,7)-(1948,13)
                              break: 'break' (1948,7)-(1948,12)
                              ;: ';' (1948,12)-(1948,13)
                          case_statement (1949,3)-(1951,13)
                            case: 'case' (1949,3)-(1949,7)
                            char_literal (1949,8)-(1949,11)
                              ': ''' (1949,8)-(1949,9)
                              character: 'N' (1949,9)-(1949,10)
                              ': ''' (1949,10)-(1949,11)
                            :: ':' (1949,11)-(1949,12)
                            expression_statement (1950,7)-(1950,24)
                              assignment_expression (1950,7)-(1950,23)
                                identifier: 'flags' (1950,7)-(1950,12)
                                |=: '|=' (1950,13)-(1950,15)
                                identifier: 'SUB_LEN' (1950,16)-(1950,23)
                              ;: ';' (1950,23)-(1950,24)
                            break_statement (1951,7)-(1951,13)
                              break: 'break' (1951,7)-(1951,12)
                              ;: ';' (1951,12)-(1951,13)
                          case_statement (1952,3)-(1954,13)
                            case: 'case' (1952,3)-(1952,7)
                            char_literal (1952,8)-(1952,11)
                              ': ''' (1952,8)-(1952,9)
                              character: 'S' (1952,9)-(1952,10)
                              ': ''' (1952,10)-(1952,11)
                            :: ':' (1952,11)-(1952,12)
                            expression_statement (1953,7)-(1953,27)
                              assignment_expression (1953,7)-(1953,26)
                                identifier: 'flags' (1953,7)-(1953,12)
                                |=: '|=' (1953,13)-(1953,15)
                                identifier: 'SUB_SUBSTR' (1953,16)-(1953,26)
                              ;: ';' (1953,26)-(1953,27)
                            break_statement (1954,7)-(1954,13)
                              break: 'break' (1954,7)-(1954,12)
                              ;: ';' (1954,12)-(1954,13)
                          case_statement (1955,3)-(1961,13)
                            case: 'case' (1955,3)-(1955,7)
                            char_literal (1955,8)-(1955,11)
                              ': ''' (1955,8)-(1955,9)
                              character: 'I' (1955,9)-(1955,10)
                              ': ''' (1955,10)-(1955,11)
                            :: ':' (1955,11)-(1955,12)
                            expression_statement (1956,7)-(1956,11)
                              update_expression (1956,7)-(1956,10)
                                identifier: 's' (1956,7)-(1956,8)
                                ++: '++' (1956,8)-(1956,10)
                              ;: ';' (1956,10)-(1956,11)
                            expression_statement (1957,7)-(1957,39)
                              assignment_expression (1957,7)-(1957,38)
                                identifier: 'flnum' (1957,7)-(1957,12)
                                =: '=' (1957,13)-(1957,14)
                                call_expression (1957,15)-(1957,38)
                                  identifier: 'get_intarg' (1957,15)-(1957,25)
                                  argument_list (1957,25)-(1957,38)
                                    (: '(' (1957,25)-(1957,26)
                                    pointer_expression (1957,26)-(1957,28)
                                      &: '&' (1957,26)-(1957,27)
                                      identifier: 's' (1957,27)-(1957,28)
                                    ,: ',' (1957,28)-(1957,29)
                                    pointer_expression (1957,30)-(1957,37)
                                      &: '&' (1957,30)-(1957,31)
                                      identifier: 'dellen' (1957,31)-(1957,37)
                                    ): ')' (1957,37)-(1957,38)
                              ;: ';' (1957,38)-(1957,39)
                            if_statement (1958,7)-(1959,17)
                              if: 'if' (1958,7)-(1958,9)
                              parenthesized_expression (1958,10)-(1958,21)
                                (: '(' (1958,10)-(1958,11)
                                binary_expression (1958,11)-(1958,20)
                                  identifier: 'flnum' (1958,11)-(1958,16)
                                  <: '<' (1958,17)-(1958,18)
                                  number_literal: '0' (1958,19)-(1958,20)
                                ): ')' (1958,20)-(1958,21)
                              goto_statement (1959,4)-(1959,17)
                                goto: 'goto' (1959,4)-(1959,8)
                                statement_identifier: 'flagerr' (1959,9)-(1959,16)
                                ;: ';' (1959,16)-(1959,17)
                            expression_statement (1960,7)-(1960,11)
                              update_expression (1960,7)-(1960,10)
                                identifier: 's' (1960,7)-(1960,8)
                                --: '--' (1960,8)-(1960,10)
                              ;: ';' (1960,10)-(1960,11)
                            break_statement (1961,7)-(1961,13)
                              break: 'break' (1961,7)-(1961,12)
                              ;: ';' (1961,12)-(1961,13)
                          case_statement (1963,3)-(1965,13)
                            case: 'case' (1963,3)-(1963,7)
                            char_literal (1963,8)-(1963,11)
                              ': ''' (1963,8)-(1963,9)
                              character: 'L' (1963,9)-(1963,10)
                              ': ''' (1963,10)-(1963,11)
                            :: ':' (1963,11)-(1963,12)
                            expression_statement (1964,7)-(1964,29)
                              assignment_expression (1964,7)-(1964,28)
                                identifier: 'casmod' (1964,7)-(1964,13)
                                =: '=' (1964,14)-(1964,15)
                                identifier: 'CASMOD_LOWER' (1964,16)-(1964,28)
                              ;: ';' (1964,28)-(1964,29)
                            break_statement (1965,7)-(1965,13)
                              break: 'break' (1965,7)-(1965,12)
                              ;: ';' (1965,12)-(1965,13)
                          case_statement (1966,3)-(1968,13)
                            case: 'case' (1966,3)-(1966,7)
                            char_literal (1966,8)-(1966,11)
                              ': ''' (1966,8)-(1966,9)
                              character: 'U' (1966,9)-(1966,10)
                              ': ''' (1966,10)-(1966,11)
                            :: ':' (1966,11)-(1966,12)
                            expression_statement (1967,7)-(1967,29)
                              assignment_expression (1967,7)-(1967,28)
                                identifier: 'casmod' (1967,7)-(1967,13)
                                =: '=' (1967,14)-(1967,15)
                                identifier: 'CASMOD_UPPER' (1967,16)-(1967,28)
                              ;: ';' (1967,28)-(1967,29)
                            break_statement (1968,7)-(1968,13)
                              break: 'break' (1968,7)-(1968,12)
                              ;: ';' (1968,12)-(1968,13)
                          case_statement (1969,3)-(1971,13)
                            case: 'case' (1969,3)-(1969,7)
                            char_literal (1969,8)-(1969,11)
                              ': ''' (1969,8)-(1969,9)
                              character: 'C' (1969,9)-(1969,10)
                              ': ''' (1969,10)-(1969,11)
                            :: ':' (1969,11)-(1969,12)
                            expression_statement (1970,7)-(1970,28)
                              assignment_expression (1970,7)-(1970,27)
                                identifier: 'casmod' (1970,7)-(1970,13)
                                =: '=' (1970,14)-(1970,15)
                                identifier: 'CASMOD_CAPS' (1970,16)-(1970,27)
                              ;: ';' (1970,27)-(1970,28)
                            break_statement (1971,7)-(1971,13)
                              break: 'break' (1971,7)-(1971,12)
                              ;: ';' (1971,12)-(1971,13)
                          case_statement (1973,3)-(1976,13)
                            case: 'case' (1973,3)-(1973,7)
                            char_literal (1973,8)-(1973,11)
                              ': ''' (1973,8)-(1973,9)
                              character: 'o' (1973,9)-(1973,10)
                              ': ''' (1973,10)-(1973,11)
                            :: ':' (1973,11)-(1973,12)
                            if_statement (1974,7)-(1975,29)
                              if: 'if' (1974,7)-(1974,9)
                              parenthesized_expression (1974,10)-(1974,19)
                                (: '(' (1974,10)-(1974,11)
                                unary_expression (1974,11)-(1974,18)
                                  !: '!' (1974,11)-(1974,12)
                                  identifier: 'sortit' (1974,12)-(1974,18)
                                ): ')' (1974,18)-(1974,19)
                              expression_statement (1975,4)-(1975,29)
                                assignment_expression (1975,4)-(1975,28)
                                  identifier: 'sortit' (1975,4)-(1975,10)
                                  |=: '|=' (1975,11)-(1975,13)
                                  identifier: 'SORTIT_SOMEHOW' (1975,14)-(1975,28)
                                ;: ';' (1975,28)-(1975,29)
                            comment: '/* sort, no modifiers */' (1975,30)-(1975,54)
                            break_statement (1976,7)-(1976,13)
                              break: 'break' (1976,7)-(1976,12)
                              ;: ';' (1976,12)-(1976,13)
                          case_statement (1977,3)-(1979,13)
                            case: 'case' (1977,3)-(1977,7)
                            char_literal (1977,8)-(1977,11)
                              ': ''' (1977,8)-(1977,9)
                              character: 'O' (1977,9)-(1977,10)
                              ': ''' (1977,10)-(1977,11)
                            :: ':' (1977,11)-(1977,12)
                            expression_statement (1978,7)-(1978,34)
                              assignment_expression (1978,7)-(1978,33)
                                identifier: 'sortit' (1978,7)-(1978,13)
                                |=: '|=' (1978,14)-(1978,16)
                                identifier: 'SORTIT_BACKWARDS' (1978,17)-(1978,33)
                              ;: ';' (1978,33)-(1978,34)
                            break_statement (1979,7)-(1979,13)
                              break: 'break' (1979,7)-(1979,12)
                              ;: ';' (1979,12)-(1979,13)
                          case_statement (1980,3)-(1982,13)
                            case: 'case' (1980,3)-(1980,7)
                            char_literal (1980,8)-(1980,11)
                              ': ''' (1980,8)-(1980,9)
                              character: 'i' (1980,9)-(1980,10)
                              ': ''' (1980,10)-(1980,11)
                            :: ':' (1980,11)-(1980,12)
                            expression_statement (1981,7)-(1981,38)
                              assignment_expression (1981,7)-(1981,37)
                                identifier: 'sortit' (1981,7)-(1981,13)
                                |=: '|=' (1981,14)-(1981,16)
                                identifier: 'SORTIT_IGNORING_CASE' (1981,17)-(1981,37)
                              ;: ';' (1981,37)-(1981,38)
                            break_statement (1982,7)-(1982,13)
                              break: 'break' (1982,7)-(1982,12)
                              ;: ';' (1982,12)-(1982,13)
                          case_statement (1983,3)-(1985,13)
                            case: 'case' (1983,3)-(1983,7)
                            char_literal (1983,8)-(1983,11)
                              ': ''' (1983,8)-(1983,9)
                              character: 'n' (1983,9)-(1983,10)
                              ': ''' (1983,10)-(1983,11)
                            :: ':' (1983,11)-(1983,12)
                            expression_statement (1984,7)-(1984,36)
                              assignment_expression (1984,7)-(1984,35)
                                identifier: 'sortit' (1984,7)-(1984,13)
                                |=: '|=' (1984,14)-(1984,16)
                                identifier: 'SORTIT_NUMERICALLY' (1984,17)-(1984,35)
                              ;: ';' (1984,35)-(1984,36)
                            break_statement (1985,7)-(1985,13)
                              break: 'break' (1985,7)-(1985,12)
                              ;: ';' (1985,12)-(1985,13)
                          case_statement (1986,3)-(1986,12)
                            case: 'case' (1986,3)-(1986,7)
                            char_literal (1986,8)-(1986,11)
                              ': ''' (1986,8)-(1986,9)
                              character: '-' (1986,9)-(1986,10)
                              ': ''' (1986,10)-(1986,11)
                            :: ':' (1986,11)-(1986,12)
                          case_statement (1987,3)-(1989,13)
                            case: 'case' (1987,3)-(1987,7)
                            identifier: 'Dash' (1987,8)-(1987,12)
                            :: ':' (1987,12)-(1987,13)
                            expression_statement (1988,7)-(1988,43)
                              assignment_expression (1988,7)-(1988,42)
                                identifier: 'sortit' (1988,7)-(1988,13)
                                |=: '|=' (1988,14)-(1988,16)
                                identifier: 'SORTIT_NUMERICALLY_SIGNED' (1988,17)-(1988,42)
                              ;: ';' (1988,42)-(1988,43)
                            break_statement (1989,7)-(1989,13)
                              break: 'break' (1989,7)-(1989,12)
                              ;: ';' (1989,12)-(1989,13)
                          case_statement (1990,3)-(1993,13)
                            case: 'case' (1990,3)-(1990,7)
                            char_literal (1990,8)-(1990,11)
                              ': ''' (1990,8)-(1990,9)
                              character: 'a' (1990,9)-(1990,10)
                              ': ''' (1990,10)-(1990,11)
                            :: ':' (1990,11)-(1990,12)
                            expression_statement (1991,7)-(1991,32)
                              assignment_expression (1991,7)-(1991,31)
                                identifier: 'sortit' (1991,7)-(1991,13)
                                |=: '|=' (1991,14)-(1991,16)
                                identifier: 'SORTIT_SOMEHOW' (1991,17)-(1991,31)
                              ;: ';' (1991,31)-(1991,32)
                            expression_statement (1992,7)-(1992,18)
                              assignment_expression (1992,7)-(1992,17)
                                identifier: 'indord' (1992,7)-(1992,13)
                                =: '=' (1992,14)-(1992,15)
                                number_literal: '1' (1992,16)-(1992,17)
                              ;: ';' (1992,17)-(1992,18)
                            break_statement (1993,7)-(1993,13)
                              break: 'break' (1993,7)-(1993,12)
                              ;: ';' (1993,12)-(1993,13)
                          case_statement (1995,3)-(1997,13)
                            case: 'case' (1995,3)-(1995,7)
                            char_literal (1995,8)-(1995,11)
                              ': ''' (1995,8)-(1995,9)
                              character: 'D' (1995,9)-(1995,10)
                              ': ''' (1995,10)-(1995,11)
                            :: ':' (1995,11)-(1995,12)
                            expression_statement (1996,7)-(1996,17)
                              assignment_expression (1996,7)-(1996,16)
                                identifier: 'mods' (1996,7)-(1996,11)
                                |=: '|=' (1996,12)-(1996,14)
                                number_literal: '1' (1996,15)-(1996,16)
                              ;: ';' (1996,16)-(1996,17)
                            break_statement (1997,7)-(1997,13)
                              break: 'break' (1997,7)-(1997,12)
                              ;: ';' (1997,12)-(1997,13)
                          case_statement (1998,3)-(2000,13)
                            case: 'case' (1998,3)-(1998,7)
                            char_literal (1998,8)-(1998,11)
                              ': ''' (1998,8)-(1998,9)
                              character: 'V' (1998,9)-(1998,10)
                              ': ''' (1998,10)-(1998,11)
                            :: ':' (1998,11)-(1998,12)
                            expression_statement (1999,7)-(1999,17)
                              assignment_expression (1999,7)-(1999,16)
                                identifier: 'mods' (1999,7)-(1999,11)
                                |=: '|=' (1999,12)-(1999,14)
                                number_literal: '2' (1999,15)-(1999,16)
                              ;: ';' (1999,16)-(1999,17)
                            break_statement (2000,7)-(2000,13)
                              break: 'break' (2000,7)-(2000,12)
                              ;: ';' (2000,12)-(2000,13)
                          case_statement (2002,3)-(2020,13)
                            case: 'case' (2002,3)-(2002,7)
                            char_literal (2002,8)-(2002,11)
                              ': ''' (2002,8)-(2002,9)
                              character: 'q' (2002,9)-(2002,10)
                              ': ''' (2002,10)-(2002,11)
                            :: ':' (2002,11)-(2002,12)
                            if_statement (2003,7)-(2005,17)
                              if: 'if' (2003,7)-(2003,9)
                              parenthesized_expression (2003,10)-(2004,38)
                                (: '(' (2003,10)-(2003,11)
                                binary_expression (2003,11)-(2004,37)
                                  binary_expression (2003,11)-(2003,34)
                                    identifier: 'quotetype' (2003,11)-(2003,20)
                                    ==: '==' (2003,21)-(2003,23)
                                    identifier: 'QT_DOLLARS' (2003,24)-(2003,34)
                                  ||: '||' (2003,35)-(2003,37)
                                  binary_expression (2004,4)-(2004,37)
                                    identifier: 'quotetype' (2004,4)-(2004,13)
                                    ==: '==' (2004,14)-(2004,16)
                                    identifier: 'QT_BACKSLASH_PATTERN' (2004,17)-(2004,37)
                                ): ')' (2004,37)-(2004,38)
                              goto_statement (2005,4)-(2005,17)
                                goto: 'goto' (2005,4)-(2005,8)
                                statement_identifier: 'flagerr' (2005,9)-(2005,16)
                                ;: ';' (2005,16)-(2005,17)
                            if_statement (2006,7)-(2019,8)
                              if: 'if' (2006,7)-(2006,9)
                              parenthesized_expression (2006,10)-(2006,40)
                                (: '(' (2006,10)-(2006,11)
                                binary_expression (2006,11)-(2006,39)
                                  call_expression (2006,11)-(2006,24)
                                    identifier: 'IS_DASH' (2006,11)-(2006,18)
                                    argument_list (2006,18)-(2006,24)
                                      (: '(' (2006,18)-(2006,19)
                                      subscript_expression (2006,19)-(2006,23)
                                        identifier: 's' (2006,19)-(2006,20)
                                        [: '[' (2006,20)-(2006,21)
                                        number_literal: '1' (2006,21)-(2006,22)
                                        ]: ']' (2006,22)-(2006,23)
                                      ): ')' (2006,23)-(2006,24)
                                  ||: '||' (2006,25)-(2006,27)
                                  binary_expression (2006,28)-(2006,39)
                                    subscript_expression (2006,28)-(2006,32)
                                      identifier: 's' (2006,28)-(2006,29)
                                      [: '[' (2006,29)-(2006,30)
                                      number_literal: '1' (2006,30)-(2006,31)
                                      ]: ']' (2006,31)-(2006,32)
                                    ==: '==' (2006,33)-(2006,35)
                                    char_literal (2006,36)-(2006,39)
                                      ': ''' (2006,36)-(2006,37)
                                      character: '+' (2006,37)-(2006,38)
                                      ': ''' (2006,38)-(2006,39)
                                ): ')' (2006,39)-(2006,40)
                              compound_statement (2006,41)-(2013,8)
                                {: '{' (2006,41)-(2006,42)
                                if_statement (2007,4)-(2008,21)
                                  if: 'if' (2007,4)-(2007,6)
                                  parenthesized_expression (2007,7)-(2007,17)
                                    (: '(' (2007,7)-(2007,8)
                                    identifier: 'quotemod' (2007,8)-(2007,16)
                                    ): ')' (2007,16)-(2007,17)
                                  goto_statement (2008,8)-(2008,21)
                                    goto: 'goto' (2008,8)-(2008,12)
                                    statement_identifier: 'flagerr' (2008,13)-(2008,20)
                                    ;: ';' (2008,20)-(2008,21)
                                expression_statement (2009,4)-(2009,8)
                                  update_expression (2009,4)-(2009,7)
                                    identifier: 's' (2009,4)-(2009,5)
                                    ++: '++' (2009,5)-(2009,7)
                                  ;: ';' (2009,7)-(2009,8)
                                expression_statement (2010,4)-(2010,17)
                                  assignment_expression (2010,4)-(2010,16)
                                    identifier: 'quotemod' (2010,4)-(2010,12)
                                    =: '=' (2010,13)-(2010,14)
                                    number_literal: '1' (2010,15)-(2010,16)
                                  ;: ';' (2010,16)-(2010,17)
                                expression_statement (2011,4)-(2012,27)
                                  assignment_expression (2011,4)-(2012,26)
                                    identifier: 'quotetype' (2011,4)-(2011,13)
                                    =: '=' (2011,14)-(2011,15)
                                    conditional_expression (2011,16)-(2012,26)
                                      parenthesized_expression (2011,16)-(2011,27)
                                        (: '(' (2011,16)-(2011,17)
                                        binary_expression (2011,17)-(2011,26)
                                          pointer_expression (2011,17)-(2011,19)
                                            *: '*' (2011,17)-(2011,18)
                                            identifier: 's' (2011,18)-(2011,19)
                                          ==: '==' (2011,20)-(2011,22)
                                          char_literal (2011,23)-(2011,26)
                                            ': ''' (2011,23)-(2011,24)
                                            character: '+' (2011,24)-(2011,25)
                                            ': ''' (2011,25)-(2011,26)
                                        ): ')' (2011,26)-(2011,27)
                                      ?: '?' (2011,28)-(2011,29)
                                      identifier: 'QT_QUOTEDZPUTS' (2011,30)-(2011,44)
                                      :: ':' (2011,45)-(2011,46)
                                      identifier: 'QT_SINGLE_OPTIONAL' (2012,8)-(2012,26)
                                  ;: ';' (2012,26)-(2012,27)
                                }: '}' (2013,7)-(2013,8)
                              else_clause (2013,9)-(2019,8)
                                else: 'else' (2013,9)-(2013,13)
                                compound_statement (2013,14)-(2019,8)
                                  {: '{' (2013,14)-(2013,15)
                                  if_statement (2014,4)-(2017,5)
                                    if: 'if' (2014,4)-(2014,6)
                                    parenthesized_expression (2014,7)-(2014,40)
                                      (: '(' (2014,7)-(2014,8)
                                      binary_expression (2014,8)-(2014,39)
                                        identifier: 'quotetype' (2014,8)-(2014,17)
                                        ==: '==' (2014,18)-(2014,20)
                                        identifier: 'QT_SINGLE_OPTIONAL' (2014,21)-(2014,39)
                                      ): ')' (2014,39)-(2014,40)
                                    compound_statement (2014,41)-(2017,5)
                                      {: '{' (2014,41)-(2014,42)
                                      comment: '/* extra q's after '-' not allowed */' (2015,8)-(2015,45)
                                      goto_statement (2016,8)-(2016,21)
                                        goto: 'goto' (2016,8)-(2016,12)
                                        statement_identifier: 'flagerr' (2016,13)-(2016,20)
                                        ;: ';' (2016,20)-(2016,21)
                                      }: '}' (2017,4)-(2017,5)
                                  expression_statement (2018,4)-(2018,28)
                                    comma_expression (2018,4)-(2018,27)
                                      update_expression (2018,4)-(2018,14)
                                        identifier: 'quotemod' (2018,4)-(2018,12)
                                        ++: '++' (2018,12)-(2018,14)
                                      ,: ',' (2018,14)-(2018,15)
                                      update_expression (2018,16)-(2018,27)
                                        identifier: 'quotetype' (2018,16)-(2018,25)
                                        ++: '++' (2018,25)-(2018,27)
                                    ;: ';' (2018,27)-(2018,28)
                                  }: '}' (2019,7)-(2019,8)
                            break_statement (2020,7)-(2020,13)
                              break: 'break' (2020,7)-(2020,12)
                              ;: ';' (2020,12)-(2020,13)
                          case_statement (2021,3)-(2026,13)
                            case: 'case' (2021,3)-(2021,7)
                            char_literal (2021,8)-(2021,11)
                              ': ''' (2021,8)-(2021,9)
                              character: 'b' (2021,9)-(2021,10)
                              ': ''' (2021,10)-(2021,11)
                            :: ':' (2021,11)-(2021,12)
                            if_statement (2022,7)-(2023,17)
                              if: 'if' (2022,7)-(2022,9)
                              parenthesized_expression (2022,10)-(2022,44)
                                (: '(' (2022,10)-(2022,11)
                                binary_expression (2022,11)-(2022,43)
                                  identifier: 'quotemod' (2022,11)-(2022,19)
                                  ||: '||' (2022,20)-(2022,22)
                                  binary_expression (2022,23)-(2022,43)
                                    identifier: 'quotetype' (2022,23)-(2022,32)
                                    !=: '!=' (2022,33)-(2022,35)
                                    identifier: 'QT_NONE' (2022,36)-(2022,43)
                                ): ')' (2022,43)-(2022,44)
                              goto_statement (2023,4)-(2023,17)
                                goto: 'goto' (2023,4)-(2023,8)
                                statement_identifier: 'flagerr' (2023,9)-(2023,16)
                                ;: ';' (2023,16)-(2023,17)
                            expression_statement (2024,7)-(2024,20)
                              assignment_expression (2024,7)-(2024,19)
                                identifier: 'quotemod' (2024,7)-(2024,15)
                                =: '=' (2024,16)-(2024,17)
                                number_literal: '1' (2024,18)-(2024,19)
                              ;: ';' (2024,19)-(2024,20)
                            expression_statement (2025,7)-(2025,40)
                              assignment_expression (2025,7)-(2025,39)
                                identifier: 'quotetype' (2025,7)-(2025,16)
                                =: '=' (2025,17)-(2025,18)
                                identifier: 'QT_BACKSLASH_PATTERN' (2025,19)-(2025,39)
                              ;: ';' (2025,39)-(2025,40)
                            break_statement (2026,7)-(2026,13)
                              break: 'break' (2026,7)-(2026,12)
                              ;: ';' (2026,12)-(2026,13)
                          case_statement (2027,3)-(2029,13)
                            case: 'case' (2027,3)-(2027,7)
                            char_literal (2027,8)-(2027,11)
                              ': ''' (2027,8)-(2027,9)
                              character: 'Q' (2027,9)-(2027,10)
                              ': ''' (2027,10)-(2027,11)
                            :: ':' (2027,11)-(2027,12)
                            expression_statement (2028,7)-(2028,18)
                              update_expression (2028,7)-(2028,17)
                                identifier: 'quotemod' (2028,7)-(2028,15)
                                --: '--' (2028,15)-(2028,17)
                              ;: ';' (2028,17)-(2028,18)
                            break_statement (2029,7)-(2029,13)
                              break: 'break' (2029,7)-(2029,12)
                              ;: ';' (2029,12)-(2029,13)
                          case_statement (2030,3)-(2032,13)
                            case: 'case' (2030,3)-(2030,7)
                            char_literal (2030,8)-(2030,11)
                              ': ''' (2030,8)-(2030,9)
                              character: 'X' (2030,9)-(2030,10)
                              ': ''' (2030,10)-(2030,11)
                            :: ':' (2030,11)-(2030,12)
                            expression_statement (2031,7)-(2031,20)
                              assignment_expression (2031,7)-(2031,19)
                                identifier: 'quoteerr' (2031,7)-(2031,15)
                                =: '=' (2031,16)-(2031,17)
                                number_literal: '1' (2031,18)-(2031,19)
                              ;: ';' (2031,19)-(2031,20)
                            break_statement (2032,7)-(2032,13)
                              break: 'break' (2032,7)-(2032,12)
                              ;: ';' (2032,12)-(2032,13)
                          case_statement (2034,3)-(2036,13)
                            case: 'case' (2034,3)-(2034,7)
                            char_literal (2034,8)-(2034,11)
                              ': ''' (2034,8)-(2034,9)
                              character: 'e' (2034,9)-(2034,10)
                              ': ''' (2034,10)-(2034,11)
                            :: ':' (2034,11)-(2034,12)
                            expression_statement (2035,7)-(2035,16)
                              assignment_expression (2035,7)-(2035,15)
                                identifier: 'eval' (2035,7)-(2035,11)
                                =: '=' (2035,12)-(2035,13)
                                number_literal: '1' (2035,14)-(2035,15)
                              ;: ';' (2035,15)-(2035,16)
                            break_statement (2036,7)-(2036,13)
                              break: 'break' (2036,7)-(2036,12)
                              ;: ';' (2036,12)-(2036,13)
                          case_statement (2037,3)-(2039,13)
                            case: 'case' (2037,3)-(2037,7)
                            char_literal (2037,8)-(2037,11)
                              ': ''' (2037,8)-(2037,9)
                              character: 'P' (2037,9)-(2037,10)
                              ': ''' (2037,10)-(2037,11)
                            :: ':' (2037,11)-(2037,12)
                            expression_statement (2038,7)-(2038,17)
                              assignment_expression (2038,7)-(2038,16)
                                identifier: 'aspar' (2038,7)-(2038,12)
                                =: '=' (2038,13)-(2038,14)
                                number_literal: '1' (2038,15)-(2038,16)
                              ;: ';' (2038,16)-(2038,17)
                            break_statement (2039,7)-(2039,13)
                              break: 'break' (2039,7)-(2039,12)
                              ;: ';' (2039,12)-(2039,13)
                          case_statement (2041,3)-(2043,13)
                            case: 'case' (2041,3)-(2041,7)
                            char_literal (2041,8)-(2041,11)
                              ': ''' (2041,8)-(2041,9)
                              character: 'c' (2041,9)-(2041,10)
                              ': ''' (2041,10)-(2041,11)
                            :: ':' (2041,11)-(2041,12)
                            expression_statement (2042,7)-(2042,20)
                              assignment_expression (2042,7)-(2042,19)
                                identifier: 'whichlen' (2042,7)-(2042,15)
                                =: '=' (2042,16)-(2042,17)
                                number_literal: '1' (2042,18)-(2042,19)
                              ;: ';' (2042,19)-(2042,20)
                            break_statement (2043,7)-(2043,13)
                              break: 'break' (2043,7)-(2043,12)
                              ;: ';' (2043,12)-(2043,13)
                          case_statement (2044,3)-(2046,13)
                            case: 'case' (2044,3)-(2044,7)
                            char_literal (2044,8)-(2044,11)
                              ': ''' (2044,8)-(2044,9)
                              character: 'w' (2044,9)-(2044,10)
                              ': ''' (2044,10)-(2044,11)
                            :: ':' (2044,11)-(2044,12)
                            expression_statement (2045,7)-(2045,20)
                              assignment_expression (2045,7)-(2045,19)
                                identifier: 'whichlen' (2045,7)-(2045,15)
                                =: '=' (2045,16)-(2045,17)
                                number_literal: '2' (2045,18)-(2045,19)
                              ;: ';' (2045,19)-(2045,20)
                            break_statement (2046,7)-(2046,13)
                              break: 'break' (2046,7)-(2046,12)
                              ;: ';' (2046,12)-(2046,13)
                          case_statement (2047,3)-(2049,13)
                            case: 'case' (2047,3)-(2047,7)
                            char_literal (2047,8)-(2047,11)
                              ': ''' (2047,8)-(2047,9)
                              character: 'W' (2047,9)-(2047,10)
                              ': ''' (2047,10)-(2047,11)
                            :: ':' (2047,11)-(2047,12)
                            expression_statement (2048,7)-(2048,20)
                              assignment_expression (2048,7)-(2048,19)
                                identifier: 'whichlen' (2048,7)-(2048,15)
                                =: '=' (2048,16)-(2048,17)
                                number_literal: '3' (2048,18)-(2048,19)
                              ;: ';' (2048,19)-(2048,20)
                            break_statement (2049,7)-(2049,13)
                              break: 'break' (2049,7)-(2049,12)
                              ;: ';' (2049,12)-(2049,13)
                          case_statement (2051,3)-(2053,13)
                            case: 'case' (2051,3)-(2051,7)
                            char_literal (2051,8)-(2051,11)
                              ': ''' (2051,8)-(2051,9)
                              character: 'f' (2051,9)-(2051,10)
                              ': ''' (2051,10)-(2051,11)
                            :: ':' (2051,11)-(2051,12)
                            expression_statement (2052,7)-(2052,20)
                              assignment_expression (2052,7)-(2052,19)
                                identifier: 'spsep' (2052,7)-(2052,12)
                                =: '=' (2052,13)-(2052,14)
                                string_literal (2052,15)-(2052,19)
                                  ": '"' (2052,15)-(2052,16)
                                  escape_sequence: '\n' (2052,16)-(2052,18)
                                  ": '"' (2052,18)-(2052,19)
                              ;: ';' (2052,19)-(2052,20)
                            break_statement (2053,7)-(2053,13)
                              break: 'break' (2053,7)-(2053,12)
                              ;: ';' (2053,12)-(2053,13)
                          case_statement (2054,3)-(2056,13)
                            case: 'case' (2054,3)-(2054,7)
                            char_literal (2054,8)-(2054,11)
                              ': ''' (2054,8)-(2054,9)
                              character: 'F' (2054,9)-(2054,10)
                              ': ''' (2054,10)-(2054,11)
                            :: ':' (2054,11)-(2054,12)
                            expression_statement (2055,7)-(2055,18)
                              assignment_expression (2055,7)-(2055,17)
                                identifier: 'sep' (2055,7)-(2055,10)
                                =: '=' (2055,11)-(2055,12)
                                string_literal (2055,13)-(2055,17)
                                  ": '"' (2055,13)-(2055,14)
                                  escape_sequence: '\n' (2055,14)-(2055,16)
                                  ": '"' (2055,16)-(2055,17)
                              ;: ';' (2055,17)-(2055,18)
                            break_statement (2056,7)-(2056,13)
                              break: 'break' (2056,7)-(2056,12)
                              ;: ';' (2056,12)-(2056,13)
                          case_statement (2058,3)-(2063,13)
                            case: 'case' (2058,3)-(2058,7)
                            char_literal (2058,8)-(2058,11)
                              ': ''' (2058,8)-(2058,9)
                              character: '0' (2058,9)-(2058,10)
                              ': ''' (2058,10)-(2058,11)
                            :: ':' (2058,11)-(2058,12)
                            expression_statement (2059,7)-(2059,26)
                              assignment_expression (2059,7)-(2059,25)
                                identifier: 'spsep' (2059,7)-(2059,12)
                                =: '=' (2059,13)-(2059,14)
                                call_expression (2059,15)-(2059,25)
                                  identifier: 'zhalloc' (2059,15)-(2059,22)
                                  argument_list (2059,22)-(2059,25)
                                    (: '(' (2059,22)-(2059,23)
                                    number_literal: '3' (2059,23)-(2059,24)
                                    ): ')' (2059,24)-(2059,25)
                              ;: ';' (2059,25)-(2059,26)
                            expression_statement (2060,7)-(2060,23)
                              assignment_expression (2060,7)-(2060,22)
                                subscript_expression (2060,7)-(2060,15)
                                  identifier: 'spsep' (2060,7)-(2060,12)
                                  [: '[' (2060,12)-(2060,13)
                                  number_literal: '0' (2060,13)-(2060,14)
                                  ]: ']' (2060,14)-(2060,15)
                                =: '=' (2060,16)-(2060,17)
                                identifier: 'Meta' (2060,18)-(2060,22)
                              ;: ';' (2060,22)-(2060,23)
                            expression_statement (2061,7)-(2061,28)
                              assignment_expression (2061,7)-(2061,27)
                                subscript_expression (2061,7)-(2061,15)
                                  identifier: 'spsep' (2061,7)-(2061,12)
                                  [: '[' (2061,12)-(2061,13)
                                  number_literal: '1' (2061,13)-(2061,14)
                                  ]: ']' (2061,14)-(2061,15)
                                =: '=' (2061,16)-(2061,17)
                                binary_expression (2061,18)-(2061,27)
                                  char_literal (2061,18)-(2061,22)
                                    ': ''' (2061,18)-(2061,19)
                                    escape_sequence: '\0' (2061,19)-(2061,21)
                                    ': ''' (2061,21)-(2061,22)
                                  ^: '^' (2061,23)-(2061,24)
                                  number_literal: '32' (2061,25)-(2061,27)
                              ;: ';' (2061,27)-(2061,28)
                            expression_statement (2062,7)-(2062,23)
                              assignment_expression (2062,7)-(2062,22)
                                subscript_expression (2062,7)-(2062,15)
                                  identifier: 'spsep' (2062,7)-(2062,12)
                                  [: '[' (2062,12)-(2062,13)
                                  number_literal: '2' (2062,13)-(2062,14)
                                  ]: ']' (2062,14)-(2062,15)
                                =: '=' (2062,16)-(2062,17)
                                char_literal (2062,18)-(2062,22)
                                  ': ''' (2062,18)-(2062,19)
                                  escape_sequence: '\0' (2062,19)-(2062,21)
                                  ': ''' (2062,21)-(2062,22)
                              ;: ';' (2062,22)-(2062,23)
                            break_statement (2063,7)-(2063,13)
                              break: 'break' (2063,7)-(2063,12)
                              ;: ';' (2063,12)-(2063,13)
                          case_statement (2065,3)-(2066,14)
                            case: 'case' (2065,3)-(2065,7)
                            char_literal (2065,8)-(2065,11)
                              ': ''' (2065,8)-(2065,9)
                              character: 's' (2065,9)-(2065,10)
                              ': ''' (2065,10)-(2065,11)
                            :: ':' (2065,11)-(2065,12)
                            expression_statement (2066,7)-(2066,14)
                              assignment_expression (2066,7)-(2066,13)
                                identifier: 'tt' (2066,7)-(2066,9)
                                =: '=' (2066,10)-(2066,11)
                                number_literal: '1' (2066,12)-(2066,13)
                              ;: ';' (2066,13)-(2066,14)
                          comment: '/* fall through */' (2067,3)-(2067,21)
                          case_statement (2068,3)-(2083,13)
                            case: 'case' (2068,3)-(2068,7)
                            char_literal (2068,8)-(2068,11)
                              ': ''' (2068,8)-(2068,9)
                              character: 'j' (2068,9)-(2068,10)
                              ': ''' (2068,10)-(2068,11)
                            :: ':' (2068,11)-(2068,12)
                            expression_statement (2069,7)-(2069,36)
                              assignment_expression (2069,7)-(2069,35)
                                identifier: 't' (2069,7)-(2069,8)
                                =: '=' (2069,9)-(2069,10)
                                call_expression (2069,11)-(2069,35)
                                  identifier: 'get_strarg' (2069,11)-(2069,21)
                                  argument_list (2069,21)-(2069,35)
                                    (: '(' (2069,21)-(2069,22)
                                    update_expression (2069,22)-(2069,25)
                                      ++: '++' (2069,22)-(2069,24)
                                      identifier: 's' (2069,24)-(2069,25)
                                    ,: ',' (2069,25)-(2069,26)
                                    pointer_expression (2069,27)-(2069,34)
                                      &: '&' (2069,27)-(2069,28)
                                      identifier: 'arglen' (2069,28)-(2069,34)
                                    ): ')' (2069,34)-(2069,35)
                              ;: ';' (2069,35)-(2069,36)
                            if_statement (2070,7)-(2082,17)
                              if: 'if' (2070,7)-(2070,9)
                              parenthesized_expression (2070,10)-(2070,14)
                                (: '(' (2070,10)-(2070,11)
                                pointer_expression (2070,11)-(2070,13)
                                  *: '*' (2070,11)-(2070,12)
                                  identifier: 't' (2070,12)-(2070,13)
                                ): ')' (2070,13)-(2070,14)
                              compound_statement (2070,15)-(2081,8)
                                {: '{' (2070,15)-(2070,16)
                                expression_statement (2071,4)-(2071,13)
                                  assignment_expression (2071,4)-(2071,12)
                                    identifier: 'sav' (2071,4)-(2071,7)
                                    =: '=' (2071,8)-(2071,9)
                                    pointer_expression (2071,10)-(2071,12)
                                      *: '*' (2071,10)-(2071,11)
                                      identifier: 't' (2071,11)-(2071,12)
                                  ;: ';' (2071,12)-(2071,13)
                                expression_statement (2072,4)-(2072,14)
                                  assignment_expression (2072,4)-(2072,13)
                                    pointer_expression (2072,4)-(2072,6)
                                      *: '*' (2072,4)-(2072,5)
                                      identifier: 't' (2072,5)-(2072,6)
                                    =: '=' (2072,7)-(2072,8)
                                    char_literal (2072,9)-(2072,13)
                                      ': ''' (2072,9)-(2072,10)
                                      escape_sequence: '\0' (2072,10)-(2072,12)
                                      ': ''' (2072,12)-(2072,13)
                                  ;: ';' (2072,13)-(2072,14)
                                if_statement (2073,4)-(2078,28)
                                  if: 'if' (2073,4)-(2073,6)
                                  parenthesized_expression (2073,7)-(2073,11)
                                    (: '(' (2073,7)-(2073,8)
                                    identifier: 'tt' (2073,8)-(2073,10)
                                    ): ')' (2073,10)-(2073,11)
                                  expression_statement (2074,8)-(2075,30)
                                    assignment_expression (2074,8)-(2075,29)
                                      identifier: 'spsep' (2074,8)-(2074,13)
                                      =: '=' (2074,14)-(2074,15)
                                      call_expression (2074,16)-(2075,29)
                                        identifier: 'untok_and_escape' (2074,16)-(2074,32)
                                        argument_list (2074,32)-(2075,29)
                                          (: '(' (2074,32)-(2074,33)
                                          binary_expression (2074,33)-(2074,43)
                                            identifier: 's' (2074,33)-(2074,34)
                                            +: '+' (2074,35)-(2074,36)
                                            identifier: 'arglen' (2074,37)-(2074,43)
                                          ,: ',' (2074,43)-(2074,44)
                                          identifier: 'escapes' (2075,12)-(2075,19)
                                          ,: ',' (2075,19)-(2075,20)
                                          identifier: 'tok_arg' (2075,21)-(2075,28)
                                          ): ')' (2075,28)-(2075,29)
                                    ;: ';' (2075,29)-(2075,30)
                                  else_clause (2076,4)-(2078,28)
                                    else: 'else' (2076,4)-(2076,8)
                                    expression_statement (2077,8)-(2078,28)
                                      assignment_expression (2077,8)-(2078,27)
                                        identifier: 'sep' (2077,8)-(2077,11)
                                        =: '=' (2077,12)-(2077,13)
                                        call_expression (2077,14)-(2078,27)
                                          identifier: 'untok_and_escape' (2077,14)-(2077,30)
                                          argument_list (2077,30)-(2078,27)
                                            (: '(' (2077,30)-(2077,31)
                                            binary_expression (2077,31)-(2077,41)
                                              identifier: 's' (2077,31)-(2077,32)
                                              +: '+' (2077,33)-(2077,34)
                                              identifier: 'arglen' (2077,35)-(2077,41)
                                            ,: ',' (2077,41)-(2077,42)
                                            identifier: 'escapes' (2078,10)-(2078,17)
                                            ,: ',' (2078,17)-(2078,18)
                                            identifier: 'tok_arg' (2078,19)-(2078,26)
                                            ): ')' (2078,26)-(2078,27)
                                      ;: ';' (2078,27)-(2078,28)
                                expression_statement (2079,4)-(2079,13)
                                  assignment_expression (2079,4)-(2079,12)
                                    pointer_expression (2079,4)-(2079,6)
                                      *: '*' (2079,4)-(2079,5)
                                      identifier: 't' (2079,5)-(2079,6)
                                    =: '=' (2079,7)-(2079,8)
                                    identifier: 'sav' (2079,9)-(2079,12)
                                  ;: ';' (2079,12)-(2079,13)
                                expression_statement (2080,4)-(2080,23)
                                  assignment_expression (2080,4)-(2080,22)
                                    identifier: 's' (2080,4)-(2080,5)
                                    =: '=' (2080,6)-(2080,7)
                                    binary_expression (2080,8)-(2080,22)
                                      binary_expression (2080,8)-(2080,18)
                                        identifier: 't' (2080,8)-(2080,9)
                                        +: '+' (2080,10)-(2080,11)
                                        identifier: 'arglen' (2080,12)-(2080,18)
                                      -: '-' (2080,19)-(2080,20)
                                      number_literal: '1' (2080,21)-(2080,22)
                                  ;: ';' (2080,22)-(2080,23)
                                }: '}' (2081,7)-(2081,8)
                              else_clause (2081,9)-(2082,17)
                                else: 'else' (2081,9)-(2081,13)
                                goto_statement (2082,4)-(2082,17)
                                  goto: 'goto' (2082,4)-(2082,8)
                                  statement_identifier: 'flagerr' (2082,9)-(2082,16)
                                  ;: ';' (2082,16)-(2082,17)
                            break_statement (2083,7)-(2083,13)
                              break: 'break' (2083,7)-(2083,12)
                              ;: ';' (2083,12)-(2083,13)
                          case_statement (2085,3)-(2086,14)
                            case: 'case' (2085,3)-(2085,7)
                            char_literal (2085,8)-(2085,11)
                              ': ''' (2085,8)-(2085,9)
                              character: 'l' (2085,9)-(2085,10)
                              ': ''' (2085,10)-(2085,11)
                            :: ':' (2085,11)-(2085,12)
                            expression_statement (2086,7)-(2086,14)
                              assignment_expression (2086,7)-(2086,13)
                                identifier: 'tt' (2086,7)-(2086,9)
                                =: '=' (2086,10)-(2086,11)
                                number_literal: '1' (2086,12)-(2086,13)
                              ;: ';' (2086,13)-(2086,14)
                          comment: '/* fall through */' (2087,3)-(2087,21)
                          case_statement (2088,3)-(2139,13)
                            case: 'case' (2088,3)-(2088,7)
                            char_literal (2088,8)-(2088,11)
                              ': ''' (2088,8)-(2088,9)
                              character: 'r' (2088,9)-(2088,10)
                              ': ''' (2088,10)-(2088,11)
                            :: ':' (2088,11)-(2088,12)
                            expression_statement (2089,7)-(2089,11)
                              update_expression (2089,7)-(2089,10)
                                identifier: 's' (2089,7)-(2089,8)
                                ++: '++' (2089,8)-(2089,10)
                              ;: ';' (2089,10)-(2089,11)
                            comment: '/* delimiter position */' (2090,7)-(2090,31)
                            expression_statement (2091,7)-(2091,16)
                              assignment_expression (2091,7)-(2091,15)
                                identifier: 'del0' (2091,7)-(2091,11)
                                =: '=' (2091,12)-(2091,13)
                                identifier: 's' (2091,14)-(2091,15)
                              ;: ';' (2091,15)-(2091,16)
                            expression_statement (2092,7)-(2092,37)
                              assignment_expression (2092,7)-(2092,36)
                                identifier: 'num' (2092,7)-(2092,10)
                                =: '=' (2092,11)-(2092,12)
                                call_expression (2092,13)-(2092,36)
                                  identifier: 'get_intarg' (2092,13)-(2092,23)
                                  argument_list (2092,23)-(2092,36)
                                    (: '(' (2092,23)-(2092,24)
                                    pointer_expression (2092,24)-(2092,26)
                                      &: '&' (2092,24)-(2092,25)
                                      identifier: 's' (2092,25)-(2092,26)
                                    ,: ',' (2092,26)-(2092,27)
                                    pointer_expression (2092,28)-(2092,35)
                                      &: '&' (2092,28)-(2092,29)
                                      identifier: 'dellen' (2092,29)-(2092,35)
                                    ): ')' (2092,35)-(2092,36)
                              ;: ';' (2092,36)-(2092,37)
                            if_statement (2093,7)-(2094,17)
                              if: 'if' (2093,7)-(2093,9)
                              parenthesized_expression (2093,10)-(2093,19)
                                (: '(' (2093,10)-(2093,11)
                                binary_expression (2093,11)-(2093,18)
                                  identifier: 'num' (2093,11)-(2093,14)
                                  <: '<' (2093,15)-(2093,16)
                                  number_literal: '0' (2093,17)-(2093,18)
                                ): ')' (2093,18)-(2093,19)
                              goto_statement (2094,4)-(2094,17)
                                goto: 'goto' (2094,4)-(2094,8)
                                statement_identifier: 'flagerr' (2094,9)-(2094,16)
                                ;: ';' (2094,16)-(2094,17)
                            if_statement (2095,7)-(2098,18)
                              if: 'if' (2095,7)-(2095,9)
                              parenthesized_expression (2095,10)-(2095,14)
                                (: '(' (2095,10)-(2095,11)
                                identifier: 'tt' (2095,11)-(2095,13)
                                ): ')' (2095,13)-(2095,14)
                              expression_statement (2096,4)-(2096,17)
                                assignment_expression (2096,4)-(2096,16)
                                  identifier: 'prenum' (2096,4)-(2096,10)
                                  =: '=' (2096,11)-(2096,12)
                                  identifier: 'num' (2096,13)-(2096,16)
                                ;: ';' (2096,16)-(2096,17)
                              else_clause (2097,7)-(2098,18)
                                else: 'else' (2097,7)-(2097,11)
                                expression_statement (2098,4)-(2098,18)
                                  assignment_expression (2098,4)-(2098,17)
                                    identifier: 'postnum' (2098,4)-(2098,11)
                                    =: '=' (2098,12)-(2098,13)
                                    identifier: 'num' (2098,14)-(2098,17)
                                  ;: ';' (2098,17)-(2098,18)
                            comment: '/* must have same delimiter if more arguments */' (2099,7)-(2099,55)
                            if_statement (2100,7)-(2104,8)
                              if: 'if' (2100,7)-(2100,9)
                              parenthesized_expression (2100,10)-(2100,46)
                                (: '(' (2100,10)-(2100,11)
                                binary_expression (2100,11)-(2100,45)
                                  unary_expression (2100,11)-(2100,18)
                                    !: '!' (2100,11)-(2100,12)
                                    identifier: 'dellen' (2100,12)-(2100,18)
                                  ||: '||' (2100,19)-(2100,21)
                                  call_expression (2100,22)-(2100,45)
                                    identifier: 'memcmp' (2100,22)-(2100,28)
                                    argument_list (2100,28)-(2100,45)
                                      (: '(' (2100,28)-(2100,29)
                                      identifier: 'del0' (2100,29)-(2100,33)
                                      ,: ',' (2100,33)-(2100,34)
                                      identifier: 's' (2100,35)-(2100,36)
                                      ,: ',' (2100,36)-(2100,37)
                                      identifier: 'dellen' (2100,38)-(2100,44)
                                      ): ')' (2100,44)-(2100,45)
                                ): ')' (2100,45)-(2100,46)
                              compound_statement (2100,47)-(2104,8)
                                {: '{' (2100,47)-(2100,48)
                                comment: '/* decrement since loop will increment */' (2101,4)-(2101,45)
                                expression_statement (2102,4)-(2102,8)
                                  update_expression (2102,4)-(2102,7)
                                    identifier: 's' (2102,4)-(2102,5)
                                    --: '--' (2102,5)-(2102,7)
                                  ;: ';' (2102,7)-(2102,8)
                                break_statement (2103,4)-(2103,10)
                                  break: 'break' (2103,4)-(2103,9)
                                  ;: ';' (2103,9)-(2103,10)
                                }: '}' (2104,7)-(2104,8)
                            expression_statement (2105,7)-(2105,34)
                              assignment_expression (2105,7)-(2105,33)
                                identifier: 't' (2105,7)-(2105,8)
                                =: '=' (2105,9)-(2105,10)
                                call_expression (2105,11)-(2105,33)
                                  identifier: 'get_strarg' (2105,11)-(2105,21)
                                  argument_list (2105,21)-(2105,33)
                                    (: '(' (2105,21)-(2105,22)
                                    identifier: 's' (2105,22)-(2105,23)
                                    ,: ',' (2105,23)-(2105,24)
                                    pointer_expression (2105,25)-(2105,32)
                                      &: '&' (2105,25)-(2105,26)
                                      identifier: 'arglen' (2105,26)-(2105,32)
                                    ): ')' (2105,32)-(2105,33)
                              ;: ';' (2105,33)-(2105,34)
                            if_statement (2106,7)-(2107,17)
                              if: 'if' (2106,7)-(2106,9)
                              parenthesized_expression (2106,10)-(2106,15)
                                (: '(' (2106,10)-(2106,11)
                                unary_expression (2106,11)-(2106,14)
                                  !: '!' (2106,11)-(2106,12)
                                  pointer_expression (2106,12)-(2106,14)
                                    *: '*' (2106,12)-(2106,13)
                                    identifier: 't' (2106,13)-(2106,14)
                                ): ')' (2106,14)-(2106,15)
                              goto_statement (2107,4)-(2107,17)
                                goto: 'goto' (2107,4)-(2107,8)
                                statement_identifier: 'flagerr' (2107,9)-(2107,16)
                                ;: ';' (2107,16)-(2107,17)
                            expression_statement (2108,7)-(2108,16)
                              assignment_expression (2108,7)-(2108,15)
                                identifier: 'sav' (2108,7)-(2108,10)
                                =: '=' (2108,11)-(2108,12)
                                pointer_expression (2108,13)-(2108,15)
                                  *: '*' (2108,13)-(2108,14)
                                  identifier: 't' (2108,14)-(2108,15)
                              ;: ';' (2108,15)-(2108,16)
                            expression_statement (2109,7)-(2109,17)
                              assignment_expression (2109,7)-(2109,16)
                                pointer_expression (2109,7)-(2109,9)
                                  *: '*' (2109,7)-(2109,8)
                                  identifier: 't' (2109,8)-(2109,9)
                                =: '=' (2109,10)-(2109,11)
                                char_literal (2109,12)-(2109,16)
                                  ': ''' (2109,12)-(2109,13)
                                  escape_sequence: '\0' (2109,13)-(2109,15)
                                  ': ''' (2109,15)-(2109,16)
                              ;: ';' (2109,16)-(2109,17)
                            if_statement (2110,7)-(2115,19)
                              if: 'if' (2110,7)-(2110,9)
                              parenthesized_expression (2110,10)-(2110,14)
                                (: '(' (2110,10)-(2110,11)
                                identifier: 'tt' (2110,11)-(2110,13)
                                ): ')' (2110,13)-(2110,14)
                              expression_statement (2111,4)-(2112,18)
                                assignment_expression (2111,4)-(2112,17)
                                  identifier: 'premul' (2111,4)-(2111,10)
                                  =: '=' (2111,11)-(2111,12)
                                  call_expression (2111,13)-(2112,17)
                                    identifier: 'untok_and_escape' (2111,13)-(2111,29)
                                    argument_list (2111,29)-(2112,17)
                                      (: '(' (2111,29)-(2111,30)
                                      binary_expression (2111,30)-(2111,40)
                                        identifier: 's' (2111,30)-(2111,31)
                                        +: '+' (2111,32)-(2111,33)
                                        identifier: 'arglen' (2111,34)-(2111,40)
                                      ,: ',' (2111,40)-(2111,41)
                                      identifier: 'escapes' (2111,42)-(2111,49)
                                      ,: ',' (2111,49)-(2111,50)
                                      identifier: 'tok_arg' (2112,9)-(2112,16)
                                      ): ')' (2112,16)-(2112,17)
                                ;: ';' (2112,17)-(2112,18)
                              else_clause (2113,7)-(2115,19)
                                else: 'else' (2113,7)-(2113,11)
                                expression_statement (2114,4)-(2115,19)
                                  assignment_expression (2114,4)-(2115,18)
                                    identifier: 'postmul' (2114,4)-(2114,11)
                                    =: '=' (2114,12)-(2114,13)
                                    call_expression (2114,14)-(2115,18)
                                      identifier: 'untok_and_escape' (2114,14)-(2114,30)
                                      argument_list (2114,30)-(2115,18)
                                        (: '(' (2114,30)-(2114,31)
                                        binary_expression (2114,31)-(2114,41)
                                          identifier: 's' (2114,31)-(2114,32)
                                          +: '+' (2114,33)-(2114,34)
                                          identifier: 'arglen' (2114,35)-(2114,41)
                                        ,: ',' (2114,41)-(2114,42)
                                        identifier: 'escapes' (2114,43)-(2114,50)
                                        ,: ',' (2114,50)-(2114,51)
                                        identifier: 'tok_arg' (2115,10)-(2115,17)
                                        ): ')' (2115,17)-(2115,18)
                                  ;: ';' (2115,18)-(2115,19)
                            expression_statement (2116,7)-(2116,16)
                              assignment_expression (2116,7)-(2116,15)
                                pointer_expression (2116,7)-(2116,9)
                                  *: '*' (2116,7)-(2116,8)
                                  identifier: 't' (2116,8)-(2116,9)
                                =: '=' (2116,10)-(2116,11)
                                identifier: 'sav' (2116,12)-(2116,15)
                              ;: ';' (2116,15)-(2116,16)
                            expression_statement (2117,7)-(2117,16)
                              assignment_expression (2117,7)-(2117,15)
                                identifier: 'sav' (2117,7)-(2117,10)
                                =: '=' (2117,11)-(2117,12)
                                pointer_expression (2117,13)-(2117,15)
                                  *: '*' (2117,13)-(2117,14)
                                  identifier: 's' (2117,14)-(2117,15)
                              ;: ';' (2117,15)-(2117,16)
                            expression_statement (2118,7)-(2118,22)
                              assignment_expression (2118,7)-(2118,21)
                                identifier: 's' (2118,7)-(2118,8)
                                =: '=' (2118,9)-(2118,10)
                                binary_expression (2118,11)-(2118,21)
                                  identifier: 't' (2118,11)-(2118,12)
                                  +: '+' (2118,13)-(2118,14)
                                  identifier: 'arglen' (2118,15)-(2118,21)
                              ;: ';' (2118,21)-(2118,22)
                            comment: '/* again, continue only if another start delimiter */' (2119,7)-(2119,60)
                            if_statement (2120,7)-(2124,8)
                              if: 'if' (2120,7)-(2120,9)
                              parenthesized_expression (2120,10)-(2120,35)
                                (: '(' (2120,10)-(2120,11)
                                call_expression (2120,11)-(2120,34)
                                  identifier: 'memcmp' (2120,11)-(2120,17)
                                  argument_list (2120,17)-(2120,34)
                                    (: '(' (2120,17)-(2120,18)
                                    identifier: 'del0' (2120,18)-(2120,22)
                                    ,: ',' (2120,22)-(2120,23)
                                    identifier: 's' (2120,24)-(2120,25)
                                    ,: ',' (2120,25)-(2120,26)
                                    identifier: 'dellen' (2120,27)-(2120,33)
                                    ): ')' (2120,33)-(2120,34)
                                ): ')' (2120,34)-(2120,35)
                              compound_statement (2120,36)-(2124,8)
                                {: '{' (2120,36)-(2120,37)
                                comment: '/* decrement since loop will increment */' (2121,4)-(2121,45)
                                expression_statement (2122,4)-(2122,8)
                                  update_expression (2122,4)-(2122,7)
                                    identifier: 's' (2122,4)-(2122,5)
                                    --: '--' (2122,5)-(2122,7)
                                  ;: ';' (2122,7)-(2122,8)
                                break_statement (2123,4)-(2123,10)
                                  break: 'break' (2123,4)-(2123,9)
                                  ;: ';' (2123,9)-(2123,10)
                                }: '}' (2124,7)-(2124,8)
                            expression_statement (2125,7)-(2125,34)
                              assignment_expression (2125,7)-(2125,33)
                                identifier: 't' (2125,7)-(2125,8)
                                =: '=' (2125,9)-(2125,10)
                                call_expression (2125,11)-(2125,33)
                                  identifier: 'get_strarg' (2125,11)-(2125,21)
                                  argument_list (2125,21)-(2125,33)
                                    (: '(' (2125,21)-(2125,22)
                                    identifier: 's' (2125,22)-(2125,23)
                                    ,: ',' (2125,23)-(2125,24)
                                    pointer_expression (2125,25)-(2125,32)
                                      &: '&' (2125,25)-(2125,26)
                                      identifier: 'arglen' (2125,26)-(2125,32)
                                    ): ')' (2125,32)-(2125,33)
                              ;: ';' (2125,33)-(2125,34)
                            if_statement (2126,7)-(2127,17)
                              if: 'if' (2126,7)-(2126,9)
                              parenthesized_expression (2126,10)-(2126,15)
                                (: '(' (2126,10)-(2126,11)
                                unary_expression (2126,11)-(2126,14)
                                  !: '!' (2126,11)-(2126,12)
                                  pointer_expression (2126,12)-(2126,14)
                                    *: '*' (2126,12)-(2126,13)
                                    identifier: 't' (2126,13)-(2126,14)
                                ): ')' (2126,14)-(2126,15)
                              goto_statement (2127,4)-(2127,17)
                                goto: 'goto' (2127,4)-(2127,8)
                                statement_identifier: 'flagerr' (2127,9)-(2127,16)
                                ;: ';' (2127,16)-(2127,17)
                            expression_statement (2128,7)-(2128,16)
                              assignment_expression (2128,7)-(2128,15)
                                identifier: 'sav' (2128,7)-(2128,10)
                                =: '=' (2128,11)-(2128,12)
                                pointer_expression (2128,13)-(2128,15)
                                  *: '*' (2128,13)-(2128,14)
                                  identifier: 't' (2128,14)-(2128,15)
                              ;: ';' (2128,15)-(2128,16)
                            expression_statement (2129,7)-(2129,17)
                              assignment_expression (2129,7)-(2129,16)
                                pointer_expression (2129,7)-(2129,9)
                                  *: '*' (2129,7)-(2129,8)
                                  identifier: 't' (2129,8)-(2129,9)
                                =: '=' (2129,10)-(2129,11)
                                char_literal (2129,12)-(2129,16)
                                  ': ''' (2129,12)-(2129,13)
                                  escape_sequence: '\0' (2129,13)-(2129,15)
                                  ': ''' (2129,15)-(2129,16)
                              ;: ';' (2129,16)-(2129,17)
                            if_statement (2130,7)-(2135,28)
                              if: 'if' (2130,7)-(2130,9)
                              parenthesized_expression (2130,10)-(2130,14)
                                (: '(' (2130,10)-(2130,11)
                                identifier: 'tt' (2130,11)-(2130,13)
                                ): ')' (2130,13)-(2130,14)
                              expression_statement (2131,4)-(2132,27)
                                assignment_expression (2131,4)-(2132,26)
                                  identifier: 'preone' (2131,4)-(2131,10)
                                  =: '=' (2131,11)-(2131,12)
                                  call_expression (2131,13)-(2132,26)
                                    identifier: 'untok_and_escape' (2131,13)-(2131,29)
                                    argument_list (2131,29)-(2132,26)
                                      (: '(' (2131,29)-(2131,30)
                                      binary_expression (2131,30)-(2131,40)
                                        identifier: 's' (2131,30)-(2131,31)
                                        +: '+' (2131,32)-(2131,33)
                                        identifier: 'arglen' (2131,34)-(2131,40)
                                      ,: ',' (2131,40)-(2131,41)
                                      identifier: 'escapes' (2132,9)-(2132,16)
                                      ,: ',' (2132,16)-(2132,17)
                                      identifier: 'tok_arg' (2132,18)-(2132,25)
                                      ): ')' (2132,25)-(2132,26)
                                ;: ';' (2132,26)-(2132,27)
                              else_clause (2133,7)-(2135,28)
                                else: 'else' (2133,7)-(2133,11)
                                expression_statement (2134,4)-(2135,28)
                                  assignment_expression (2134,4)-(2135,27)
                                    identifier: 'postone' (2134,4)-(2134,11)
                                    =: '=' (2134,12)-(2134,13)
                                    call_expression (2134,14)-(2135,27)
                                      identifier: 'untok_and_escape' (2134,14)-(2134,30)
                                      argument_list (2134,30)-(2135,27)
                                        (: '(' (2134,30)-(2134,31)
                                        binary_expression (2134,31)-(2134,41)
                                          identifier: 's' (2134,31)-(2134,32)
                                          +: '+' (2134,33)-(2134,34)
                                          identifier: 'arglen' (2134,35)-(2134,41)
                                        ,: ',' (2134,41)-(2134,42)
                                        identifier: 'escapes' (2135,10)-(2135,17)
                                        ,: ',' (2135,17)-(2135,18)
                                        identifier: 'tok_arg' (2135,19)-(2135,26)
                                        ): ')' (2135,26)-(2135,27)
                                  ;: ';' (2135,27)-(2135,28)
                            expression_statement (2136,7)-(2136,16)
                              assignment_expression (2136,7)-(2136,15)
                                pointer_expression (2136,7)-(2136,9)
                                  *: '*' (2136,7)-(2136,8)
                                  identifier: 't' (2136,8)-(2136,9)
                                =: '=' (2136,10)-(2136,11)
                                identifier: 'sav' (2136,12)-(2136,15)
                              ;: ';' (2136,15)-(2136,16)
                            comment: '/* -1 since loop will increment */' (2137,7)-(2137,41)
                            expression_statement (2138,7)-(2138,26)
                              assignment_expression (2138,7)-(2138,25)
                                identifier: 's' (2138,7)-(2138,8)
                                =: '=' (2138,9)-(2138,10)
                                binary_expression (2138,11)-(2138,25)
                                  binary_expression (2138,11)-(2138,21)
                                    identifier: 't' (2138,11)-(2138,12)
                                    +: '+' (2138,13)-(2138,14)
                                    identifier: 'arglen' (2138,15)-(2138,21)
                                  -: '-' (2138,22)-(2138,23)
                                  number_literal: '1' (2138,24)-(2138,25)
                              ;: ';' (2138,25)-(2138,26)
                            break_statement (2139,7)-(2139,13)
                              break: 'break' (2139,7)-(2139,12)
                              ;: ';' (2139,12)-(2139,13)
                          case_statement (2141,3)-(2141,12)
                            case: 'case' (2141,3)-(2141,7)
                            char_literal (2141,8)-(2141,11)
                              ': ''' (2141,8)-(2141,9)
                              character: 'm' (2141,9)-(2141,10)
                              ': ''' (2141,10)-(2141,11)
                            :: ':' (2141,11)-(2141,12)
                          preproc_ifdef (2142,1)-(2144,7)
                            #ifdef: '#ifdef' (2142,1)-(2142,7)
                            identifier: 'MULTIBYTE_SUPPORT' (2142,8)-(2142,25)
                            expression_statement (2143,7)-(2143,21)
                              update_expression (2143,7)-(2143,20)
                                identifier: 'multi_width' (2143,7)-(2143,18)
                                ++: '++' (2143,18)-(2143,20)
                              ;: ';' (2143,20)-(2143,21)
                            #endif: '#endif' (2144,1)-(2144,7)
                          break_statement (2145,7)-(2145,13)
                            break: 'break' (2145,7)-(2145,12)
                            ;: ';' (2145,12)-(2145,13)
                          case_statement (2147,3)-(2149,13)
                            case: 'case' (2147,3)-(2147,7)
                            char_literal (2147,8)-(2147,11)
                              ': ''' (2147,8)-(2147,9)
                              character: 'p' (2147,9)-(2147,10)
                              ': ''' (2147,10)-(2147,11)
                            :: ':' (2147,11)-(2147,12)
                            expression_statement (2148,7)-(2148,19)
                              assignment_expression (2148,7)-(2148,18)
                                identifier: 'escapes' (2148,7)-(2148,14)
                                =: '=' (2148,15)-(2148,16)
                                number_literal: '1' (2148,17)-(2148,18)
                              ;: ';' (2148,18)-(2148,19)
                            break_statement (2149,7)-(2149,13)
                              break: 'break' (2149,7)-(2149,12)
                              ;: ';' (2149,12)-(2149,13)
                          case_statement (2151,3)-(2153,13)
                            case: 'case' (2151,3)-(2151,7)
                            char_literal (2151,8)-(2151,11)
                              ': ''' (2151,8)-(2151,9)
                              character: 'k' (2151,9)-(2151,10)
                              ': ''' (2151,10)-(2151,11)
                            :: ':' (2151,11)-(2151,12)
                            expression_statement (2152,7)-(2152,31)
                              assignment_expression (2152,7)-(2152,30)
                                identifier: 'hkeys' (2152,7)-(2152,12)
                                =: '=' (2152,13)-(2152,14)
                                identifier: 'SCANPM_WANTKEYS' (2152,15)-(2152,30)
                              ;: ';' (2152,30)-(2152,31)
                            break_statement (2153,7)-(2153,13)
                              break: 'break' (2153,7)-(2153,12)
                              ;: ';' (2153,12)-(2153,13)
                          case_statement (2154,3)-(2156,13)
                            case: 'case' (2154,3)-(2154,7)
                            char_literal (2154,8)-(2154,11)
                              ': ''' (2154,8)-(2154,9)
                              character: 'v' (2154,9)-(2154,10)
                              ': ''' (2154,10)-(2154,11)
                            :: ':' (2154,11)-(2154,12)
                            expression_statement (2155,7)-(2155,31)
                              assignment_expression (2155,7)-(2155,30)
                                identifier: 'hvals' (2155,7)-(2155,12)
                                =: '=' (2155,13)-(2155,14)
                                identifier: 'SCANPM_WANTVALS' (2155,15)-(2155,30)
                              ;: ';' (2155,30)-(2155,31)
                            break_statement (2156,7)-(2156,13)
                              break: 'break' (2156,7)-(2156,12)
                              ;: ';' (2156,12)-(2156,13)
                          case_statement (2158,3)-(2160,13)
                            case: 'case' (2158,3)-(2158,7)
                            char_literal (2158,8)-(2158,11)
                              ': ''' (2158,8)-(2158,9)
                              character: 't' (2158,9)-(2158,10)
                              ': ''' (2158,10)-(2158,11)
                            :: ':' (2158,11)-(2158,12)
                            expression_statement (2159,7)-(2159,17)
                              assignment_expression (2159,7)-(2159,16)
                                identifier: 'wantt' (2159,7)-(2159,12)
                                =: '=' (2159,13)-(2159,14)
                                number_literal: '1' (2159,15)-(2159,16)
                              ;: ';' (2159,16)-(2159,17)
                            break_statement (2160,7)-(2160,13)
                              break: 'break' (2160,7)-(2160,12)
                              ;: ';' (2160,12)-(2160,13)
                          case_statement (2162,3)-(2164,13)
                            case: 'case' (2162,3)-(2162,7)
                            char_literal (2162,8)-(2162,11)
                              ': ''' (2162,8)-(2162,9)
                              character: '%' (2162,9)-(2162,10)
                              ': ''' (2162,10)-(2162,11)
                            :: ':' (2162,11)-(2162,12)
                            expression_statement (2163,7)-(2163,15)
                              update_expression (2163,7)-(2163,14)
                                identifier: 'presc' (2163,7)-(2163,12)
                                ++: '++' (2163,12)-(2163,14)
                              ;: ';' (2163,14)-(2163,15)
                            break_statement (2164,7)-(2164,13)
                              break: 'break' (2164,7)-(2164,12)
                              ;: ';' (2164,12)-(2164,13)
                          case_statement (2166,3)-(2194,13)
                            case: 'case' (2166,3)-(2166,7)
                            char_literal (2166,8)-(2166,11)
                              ': ''' (2166,8)-(2166,9)
                              character: 'g' (2166,9)-(2166,10)
                              ': ''' (2166,10)-(2166,11)
                            :: ':' (2166,11)-(2166,12)
                            expression_statement (2167,7)-(2167,36)
                              assignment_expression (2167,7)-(2167,35)
                                identifier: 't' (2167,7)-(2167,8)
                                =: '=' (2167,9)-(2167,10)
                                call_expression (2167,11)-(2167,35)
                                  identifier: 'get_strarg' (2167,11)-(2167,21)
                                  argument_list (2167,21)-(2167,35)
                                    (: '(' (2167,21)-(2167,22)
                                    update_expression (2167,22)-(2167,25)
                                      ++: '++' (2167,22)-(2167,24)
                                      identifier: 's' (2167,24)-(2167,25)
                                    ,: ',' (2167,25)-(2167,26)
                                    pointer_expression (2167,27)-(2167,34)
                                      &: '&' (2167,27)-(2167,28)
                                      identifier: 'arglen' (2167,28)-(2167,34)
                                    ): ')' (2167,34)-(2167,35)
                              ;: ';' (2167,35)-(2167,36)
                            if_statement (2168,7)-(2169,16)
                              if: 'if' (2168,7)-(2168,9)
                              parenthesized_expression (2168,10)-(2168,23)
                                (: '(' (2168,10)-(2168,11)
                                binary_expression (2168,11)-(2168,22)
                                  identifier: 'getkeys' (2168,11)-(2168,18)
                                  <: '<' (2168,19)-(2168,20)
                                  number_literal: '0' (2168,21)-(2168,22)
                                ): ')' (2168,22)-(2168,23)
                              expression_statement (2169,4)-(2169,16)
                                assignment_expression (2169,4)-(2169,15)
                                  identifier: 'getkeys' (2169,4)-(2169,11)
                                  =: '=' (2169,12)-(2169,13)
                                  number_literal: '0' (2169,14)-(2169,15)
                                ;: ';' (2169,15)-(2169,16)
                            if_statement (2170,7)-(2193,17)
                              if: 'if' (2170,7)-(2170,9)
                              parenthesized_expression (2170,10)-(2170,14)
                                (: '(' (2170,10)-(2170,11)
                                pointer_expression (2170,11)-(2170,13)
                                  *: '*' (2170,11)-(2170,12)
                                  identifier: 't' (2170,12)-(2170,13)
                                ): ')' (2170,13)-(2170,14)
                              compound_statement (2170,15)-(2192,8)
                                {: '{' (2170,15)-(2170,16)
                                expression_statement (2171,4)-(2171,13)
                                  assignment_expression (2171,4)-(2171,12)
                                    identifier: 'sav' (2171,4)-(2171,7)
                                    =: '=' (2171,8)-(2171,9)
                                    pointer_expression (2171,10)-(2171,12)
                                      *: '*' (2171,10)-(2171,11)
                                      identifier: 't' (2171,11)-(2171,12)
                                  ;: ';' (2171,12)-(2171,13)
                                expression_statement (2172,4)-(2172,11)
                                  assignment_expression (2172,4)-(2172,10)
                                    pointer_expression (2172,4)-(2172,6)
                                      *: '*' (2172,4)-(2172,5)
                                      identifier: 't' (2172,5)-(2172,6)
                                    =: '=' (2172,7)-(2172,8)
                                    number_literal: '0' (2172,9)-(2172,10)
                                  ;: ';' (2172,10)-(2172,11)
                                while_statement (2173,4)-(2189,5)
                                  while: 'while' (2173,4)-(2173,9)
                                  parenthesized_expression (2173,10)-(2173,16)
                                    (: '(' (2173,10)-(2173,11)
                                    pointer_expression (2173,11)-(2173,15)
                                      *: '*' (2173,11)-(2173,12)
                                      update_expression (2173,12)-(2173,15)
                                        ++: '++' (2173,12)-(2173,14)
                                        identifier: 's' (2173,14)-(2173,15)
                                    ): ')' (2173,15)-(2173,16)
                                  compound_statement (2173,17)-(2189,5)
                                    {: '{' (2173,17)-(2173,18)
                                    switch_statement (2174,8)-(2188,9)
                                      switch: 'switch' (2174,8)-(2174,14)
                                      parenthesized_expression (2174,15)-(2174,19)
                                        (: '(' (2174,15)-(2174,16)
                                        pointer_expression (2174,16)-(2174,18)
                                          *: '*' (2174,16)-(2174,17)
                                          identifier: 's' (2174,17)-(2174,18)
                                        ): ')' (2174,18)-(2174,19)
                                      compound_statement (2174,20)-(2188,9)
                                        {: '{' (2174,20)-(2174,21)
                                        case_statement (2175,8)-(2177,11)
                                          case: 'case' (2175,8)-(2175,12)
                                          char_literal (2175,13)-(2175,16)
                                            ': ''' (2175,13)-(2175,14)
                                            character: 'e' (2175,14)-(2175,15)
                                            ': ''' (2175,15)-(2175,16)
                                          :: ':' (2175,16)-(2175,17)
                                          expression_statement (2176,5)-(2176,29)
                                            assignment_expression (2176,5)-(2176,28)
                                              identifier: 'getkeys' (2176,5)-(2176,12)
                                              |=: '|=' (2176,13)-(2176,15)
                                              identifier: 'GETKEY_EMACS' (2176,16)-(2176,28)
                                            ;: ';' (2176,28)-(2176,29)
                                          break_statement (2177,5)-(2177,11)
                                            break: 'break' (2177,5)-(2177,10)
                                            ;: ';' (2177,10)-(2177,11)
                                        case_statement (2178,8)-(2180,11)
                                          case: 'case' (2178,8)-(2178,12)
                                          char_literal (2178,13)-(2178,16)
                                            ': ''' (2178,13)-(2178,14)
                                            character: 'o' (2178,14)-(2178,15)
                                            ': ''' (2178,15)-(2178,16)
                                          :: ':' (2178,16)-(2178,17)
                                          expression_statement (2179,5)-(2179,33)
                                            assignment_expression (2179,5)-(2179,32)
                                              identifier: 'getkeys' (2179,5)-(2179,12)
                                              |=: '|=' (2179,13)-(2179,15)
                                              identifier: 'GETKEY_OCTAL_ESC' (2179,16)-(2179,32)
                                            ;: ';' (2179,32)-(2179,33)
                                          break_statement (2180,5)-(2180,11)
                                            break: 'break' (2180,5)-(2180,10)
                                            ;: ';' (2180,10)-(2180,11)
                                        case_statement (2181,8)-(2183,11)
                                          case: 'case' (2181,8)-(2181,12)
                                          char_literal (2181,13)-(2181,16)
                                            ': ''' (2181,13)-(2181,14)
                                            character: 'c' (2181,14)-(2181,15)
                                            ': ''' (2181,15)-(2181,16)
                                          :: ':' (2181,16)-(2181,17)
                                          expression_statement (2182,5)-(2182,28)
                                            assignment_expression (2182,5)-(2182,27)
                                              identifier: 'getkeys' (2182,5)-(2182,12)
                                              |=: '|=' (2182,13)-(2182,15)
                                              identifier: 'GETKEY_CTRL' (2182,16)-(2182,27)
                                            ;: ';' (2182,27)-(2182,28)
                                          break_statement (2183,5)-(2183,11)
                                            break: 'break' (2183,5)-(2183,10)
                                            ;: ';' (2183,10)-(2183,11)
                                        case_statement (2185,8)-(2187,18)
                                          default: 'default' (2185,8)-(2185,15)
                                          :: ':' (2185,15)-(2185,16)
                                          expression_statement (2186,5)-(2186,14)
                                            assignment_expression (2186,5)-(2186,13)
                                              pointer_expression (2186,5)-(2186,7)
                                                *: '*' (2186,5)-(2186,6)
                                                identifier: 't' (2186,6)-(2186,7)
                                              =: '=' (2186,8)-(2186,9)
                                              identifier: 'sav' (2186,10)-(2186,13)
                                            ;: ';' (2186,13)-(2186,14)
                                          goto_statement (2187,5)-(2187,18)
                                            goto: 'goto' (2187,5)-(2187,9)
                                            statement_identifier: 'flagerr' (2187,10)-(2187,17)
                                            ;: ';' (2187,17)-(2187,18)
                                        }: '}' (2188,8)-(2188,9)
                                    }: '}' (2189,4)-(2189,5)
                                expression_statement (2190,4)-(2190,13)
                                  assignment_expression (2190,4)-(2190,12)
                                    pointer_expression (2190,4)-(2190,6)
                                      *: '*' (2190,4)-(2190,5)
                                      identifier: 't' (2190,5)-(2190,6)
                                    =: '=' (2190,7)-(2190,8)
                                    identifier: 'sav' (2190,9)-(2190,12)
                                  ;: ';' (2190,12)-(2190,13)
                                expression_statement (2191,4)-(2191,23)
                                  assignment_expression (2191,4)-(2191,22)
                                    identifier: 's' (2191,4)-(2191,5)
                                    =: '=' (2191,6)-(2191,7)
                                    binary_expression (2191,8)-(2191,22)
                                      binary_expression (2191,8)-(2191,18)
                                        identifier: 't' (2191,8)-(2191,9)
                                        +: '+' (2191,10)-(2191,11)
                                        identifier: 'arglen' (2191,12)-(2191,18)
                                      -: '-' (2191,19)-(2191,20)
                                      number_literal: '1' (2191,21)-(2191,22)
                                  ;: ';' (2191,22)-(2191,23)
                                }: '}' (2192,7)-(2192,8)
                              else_clause (2192,9)-(2193,17)
                                else: 'else' (2192,9)-(2192,13)
                                goto_statement (2193,4)-(2193,17)
                                  goto: 'goto' (2193,4)-(2193,8)
                                  statement_identifier: 'flagerr' (2193,9)-(2193,16)
                                  ;: ';' (2193,16)-(2193,17)
                            break_statement (2194,7)-(2194,13)
                              break: 'break' (2194,7)-(2194,12)
                              ;: ';' (2194,12)-(2194,13)
                          case_statement (2196,3)-(2198,13)
                            case: 'case' (2196,3)-(2196,7)
                            char_literal (2196,8)-(2196,11)
                              ': ''' (2196,8)-(2196,9)
                              character: 'z' (2196,9)-(2196,10)
                              ': ''' (2196,10)-(2196,11)
                            :: ':' (2196,11)-(2196,12)
                            expression_statement (2197,7)-(2197,33)
                              assignment_expression (2197,7)-(2197,32)
                                identifier: 'shsplit' (2197,7)-(2197,14)
                                =: '=' (2197,15)-(2197,16)
                                identifier: 'LEXFLAGS_ACTIVE' (2197,17)-(2197,32)
                              ;: ';' (2197,32)-(2197,33)
                            break_statement (2198,7)-(2198,13)
                              break: 'break' (2198,7)-(2198,12)
                              ;: ';' (2198,12)-(2198,13)
                          case_statement (2200,3)-(2231,13)
                            case: 'case' (2200,3)-(2200,7)
                            char_literal (2200,8)-(2200,11)
                              ': ''' (2200,8)-(2200,9)
                              character: 'Z' (2200,9)-(2200,10)
                              ': ''' (2200,10)-(2200,11)
                            :: ':' (2200,11)-(2200,12)
                            expression_statement (2201,7)-(2201,36)
                              assignment_expression (2201,7)-(2201,35)
                                identifier: 't' (2201,7)-(2201,8)
                                =: '=' (2201,9)-(2201,10)
                                call_expression (2201,11)-(2201,35)
                                  identifier: 'get_strarg' (2201,11)-(2201,21)
                                  argument_list (2201,21)-(2201,35)
                                    (: '(' (2201,21)-(2201,22)
                                    update_expression (2201,22)-(2201,25)
                                      ++: '++' (2201,22)-(2201,24)
                                      identifier: 's' (2201,24)-(2201,25)
                                    ,: ',' (2201,25)-(2201,26)
                                    pointer_expression (2201,27)-(2201,34)
                                      &: '&' (2201,27)-(2201,28)
                                      identifier: 'arglen' (2201,28)-(2201,34)
                                    ): ')' (2201,34)-(2201,35)
                              ;: ';' (2201,35)-(2201,36)
                            if_statement (2202,7)-(2230,17)
                              if: 'if' (2202,7)-(2202,9)
                              parenthesized_expression (2202,10)-(2202,14)
                                (: '(' (2202,10)-(2202,11)
                                pointer_expression (2202,11)-(2202,13)
                                  *: '*' (2202,11)-(2202,12)
                                  identifier: 't' (2202,12)-(2202,13)
                                ): ')' (2202,13)-(2202,14)
                              compound_statement (2202,15)-(2229,8)
                                {: '{' (2202,15)-(2202,16)
                                expression_statement (2203,4)-(2203,13)
                                  assignment_expression (2203,4)-(2203,12)
                                    identifier: 'sav' (2203,4)-(2203,7)
                                    =: '=' (2203,8)-(2203,9)
                                    pointer_expression (2203,10)-(2203,12)
                                      *: '*' (2203,10)-(2203,11)
                                      identifier: 't' (2203,11)-(2203,12)
                                  ;: ';' (2203,12)-(2203,13)
                                expression_statement (2204,4)-(2204,11)
                                  assignment_expression (2204,4)-(2204,10)
                                    pointer_expression (2204,4)-(2204,6)
                                      *: '*' (2204,4)-(2204,5)
                                      identifier: 't' (2204,5)-(2204,6)
                                    =: '=' (2204,7)-(2204,8)
                                    number_literal: '0' (2204,9)-(2204,10)
                                  ;: ';' (2204,10)-(2204,11)
                                while_statement (2205,4)-(2226,5)
                                  while: 'while' (2205,4)-(2205,9)
                                  parenthesized_expression (2205,10)-(2205,16)
                                    (: '(' (2205,10)-(2205,11)
                                    pointer_expression (2205,11)-(2205,15)
                                      *: '*' (2205,11)-(2205,12)
                                      update_expression (2205,12)-(2205,15)
                                        ++: '++' (2205,12)-(2205,14)
                                        identifier: 's' (2205,14)-(2205,15)
                                    ): ')' (2205,15)-(2205,16)
                                  compound_statement (2205,17)-(2226,5)
                                    {: '{' (2205,17)-(2205,18)
                                    switch_statement (2206,8)-(2225,9)
                                      switch: 'switch' (2206,8)-(2206,14)
                                      parenthesized_expression (2206,15)-(2206,19)
                                        (: '(' (2206,15)-(2206,16)
                                        pointer_expression (2206,16)-(2206,18)
                                          *: '*' (2206,16)-(2206,17)
                                          identifier: 's' (2206,17)-(2206,18)
                                        ): ')' (2206,18)-(2206,19)
                                      compound_statement (2206,20)-(2225,9)
                                        {: '{' (2206,20)-(2206,21)
                                        case_statement (2207,8)-(2210,11)
                                          case: 'case' (2207,8)-(2207,12)
                                          char_literal (2207,13)-(2207,16)
                                            ': ''' (2207,13)-(2207,14)
                                            character: 'c' (2207,14)-(2207,15)
                                            ': ''' (2207,15)-(2207,16)
                                          :: ':' (2207,16)-(2207,17)
                                          comment: '/* Parse and keep comments */' (2208,5)-(2208,34)
                                          expression_statement (2209,5)-(2209,39)
                                            assignment_expression (2209,5)-(2209,38)
                                              identifier: 'shsplit' (2209,5)-(2209,12)
                                              |=: '|=' (2209,13)-(2209,15)
                                              identifier: 'LEXFLAGS_COMMENTS_KEEP' (2209,16)-(2209,38)
                                            ;: ';' (2209,38)-(2209,39)
                                          break_statement (2210,5)-(2210,11)
                                            break: 'break' (2210,5)-(2210,10)
                                            ;: ';' (2210,10)-(2210,11)
                                        case_statement (2212,8)-(2215,11)
                                          case: 'case' (2212,8)-(2212,12)
                                          char_literal (2212,13)-(2212,16)
                                            ': ''' (2212,13)-(2212,14)
                                            character: 'C' (2212,14)-(2212,15)
                                            ': ''' (2212,15)-(2212,16)
                                          :: ':' (2212,16)-(2212,17)
                                          comment: '/* Parse and remove comments */' (2213,5)-(2213,36)
                                          expression_statement (2214,5)-(2214,40)
                                            assignment_expression (2214,5)-(2214,39)
                                              identifier: 'shsplit' (2214,5)-(2214,12)
                                              |=: '|=' (2214,13)-(2214,15)
                                              identifier: 'LEXFLAGS_COMMENTS_STRIP' (2214,16)-(2214,39)
                                            ;: ';' (2214,39)-(2214,40)
                                          break_statement (2215,5)-(2215,11)
                                            break: 'break' (2215,5)-(2215,10)
                                            ;: ';' (2215,10)-(2215,11)
                                        case_statement (2217,8)-(2220,11)
                                          case: 'case' (2217,8)-(2217,12)
                                          char_literal (2217,13)-(2217,16)
                                            ': ''' (2217,13)-(2217,14)
                                            character: 'n' (2217,14)-(2217,15)
                                            ': ''' (2217,15)-(2217,16)
                                          :: ':' (2217,16)-(2217,17)
                                          comment: '/* Treat newlines as whitespace */' (2218,5)-(2218,39)
                                          expression_statement (2219,5)-(2219,33)
                                            assignment_expression (2219,5)-(2219,32)
                                              identifier: 'shsplit' (2219,5)-(2219,12)
                                              |=: '|=' (2219,13)-(2219,15)
                                              identifier: 'LEXFLAGS_NEWLINE' (2219,16)-(2219,32)
                                            ;: ';' (2219,32)-(2219,33)
                                          break_statement (2220,5)-(2220,11)
                                            break: 'break' (2220,5)-(2220,10)
                                            ;: ';' (2220,10)-(2220,11)
                                        case_statement (2222,8)-(2224,19)
                                          default: 'default' (2222,8)-(2222,15)
                                          :: ':' (2222,15)-(2222,16)
                                          expression_statement (2223,5)-(2223,14)
                                            assignment_expression (2223,5)-(2223,13)
                                              pointer_expression (2223,5)-(2223,7)
                                                *: '*' (2223,5)-(2223,6)
                                                identifier: 't' (2223,6)-(2223,7)
                                              =: '=' (2223,8)-(2223,9)
                                              identifier: 'sav' (2223,10)-(2223,13)
                                            ;: ';' (2223,13)-(2223,14)
                                          goto_statement (2224,6)-(2224,19)
                                            goto: 'goto' (2224,6)-(2224,10)
                                            statement_identifier: 'flagerr' (2224,11)-(2224,18)
                                            ;: ';' (2224,18)-(2224,19)
                                        }: '}' (2225,8)-(2225,9)
                                    }: '}' (2226,4)-(2226,5)
                                expression_statement (2227,4)-(2227,13)
                                  assignment_expression (2227,4)-(2227,12)
                                    pointer_expression (2227,4)-(2227,6)
                                      *: '*' (2227,4)-(2227,5)
                                      identifier: 't' (2227,5)-(2227,6)
                                    =: '=' (2227,7)-(2227,8)
                                    identifier: 'sav' (2227,9)-(2227,12)
                                  ;: ';' (2227,12)-(2227,13)
                                expression_statement (2228,4)-(2228,23)
                                  assignment_expression (2228,4)-(2228,22)
                                    identifier: 's' (2228,4)-(2228,5)
                                    =: '=' (2228,6)-(2228,7)
                                    binary_expression (2228,8)-(2228,22)
                                      binary_expression (2228,8)-(2228,18)
                                        identifier: 't' (2228,8)-(2228,9)
                                        +: '+' (2228,10)-(2228,11)
                                        identifier: 'arglen' (2228,12)-(2228,18)
                                      -: '-' (2228,19)-(2228,20)
                                      number_literal: '1' (2228,21)-(2228,22)
                                  ;: ';' (2228,22)-(2228,23)
                                }: '}' (2229,7)-(2229,8)
                              else_clause (2229,9)-(2230,17)
                                else: 'else' (2229,9)-(2229,13)
                                goto_statement (2230,4)-(2230,17)
                                  goto: 'goto' (2230,4)-(2230,8)
                                  statement_identifier: 'flagerr' (2230,9)-(2230,16)
                                  ;: ';' (2230,16)-(2230,17)
                            break_statement (2231,7)-(2231,13)
                              break: 'break' (2231,7)-(2231,12)
                              ;: ';' (2231,12)-(2231,13)
                          case_statement (2233,3)-(2235,13)
                            case: 'case' (2233,3)-(2233,7)
                            char_literal (2233,8)-(2233,11)
                              ': ''' (2233,8)-(2233,9)
                              character: 'u' (2233,9)-(2233,10)
                              ': ''' (2233,10)-(2233,11)
                            :: ':' (2233,11)-(2233,12)
                            expression_statement (2234,7)-(2234,18)
                              assignment_expression (2234,7)-(2234,17)
                                identifier: 'unique' (2234,7)-(2234,13)
                                =: '=' (2234,14)-(2234,15)
                                number_literal: '1' (2234,16)-(2234,17)
                              ;: ';' (2234,17)-(2234,18)
                            break_statement (2235,7)-(2235,13)
                              break: 'break' (2235,7)-(2235,12)
                              ;: ';' (2235,12)-(2235,13)
                          case_statement (2237,3)-(2237,12)
                            case: 'case' (2237,3)-(2237,7)
                            char_literal (2237,8)-(2237,11)
                              ': ''' (2237,8)-(2237,9)
                              character: '#' (2237,9)-(2237,10)
                              ': ''' (2237,10)-(2237,11)
                            :: ':' (2237,11)-(2237,12)
                          case_statement (2238,3)-(2240,13)
                            case: 'case' (2238,3)-(2238,7)
                            identifier: 'Pound' (2238,8)-(2238,13)
                            :: ':' (2238,13)-(2238,14)
                            expression_statement (2239,7)-(2239,20)
                              assignment_expression (2239,7)-(2239,19)
                                identifier: 'evalchar' (2239,7)-(2239,15)
                                =: '=' (2239,16)-(2239,17)
                                number_literal: '1' (2239,18)-(2239,19)
                              ;: ';' (2239,19)-(2239,20)
                            break_statement (2240,7)-(2240,13)
                              break: 'break' (2240,7)-(2240,12)
                              ;: ';' (2240,12)-(2240,13)
                          case_statement (2242,3)-(2259,13)
                            case: 'case' (2242,3)-(2242,7)
                            char_literal (2242,8)-(2242,11)
                              ': ''' (2242,8)-(2242,9)
                              character: '_' (2242,9)-(2242,10)
                              ': ''' (2242,10)-(2242,11)
                            :: ':' (2242,11)-(2242,12)
                            expression_statement (2243,7)-(2243,36)
                              assignment_expression (2243,7)-(2243,35)
                                identifier: 't' (2243,7)-(2243,8)
                                =: '=' (2243,9)-(2243,10)
                                call_expression (2243,11)-(2243,35)
                                  identifier: 'get_strarg' (2243,11)-(2243,21)
                                  argument_list (2243,21)-(2243,35)
                                    (: '(' (2243,21)-(2243,22)
                                    update_expression (2243,22)-(2243,25)
                                      ++: '++' (2243,22)-(2243,24)
                                      identifier: 's' (2243,24)-(2243,25)
                                    ,: ',' (2243,25)-(2243,26)
                                    pointer_expression (2243,27)-(2243,34)
                                      &: '&' (2243,27)-(2243,28)
                                      identifier: 'arglen' (2243,28)-(2243,34)
                                    ): ')' (2243,34)-(2243,35)
                              ;: ';' (2243,35)-(2243,36)
                            if_statement (2244,7)-(2258,17)
                              if: 'if' (2244,7)-(2244,9)
                              parenthesized_expression (2244,10)-(2244,14)
                                (: '(' (2244,10)-(2244,11)
                                pointer_expression (2244,11)-(2244,13)
                                  *: '*' (2244,11)-(2244,12)
                                  identifier: 't' (2244,12)-(2244,13)
                                ): ')' (2244,13)-(2244,14)
                              compound_statement (2244,15)-(2257,8)
                                {: '{' (2244,15)-(2244,16)
                                expression_statement (2245,4)-(2245,13)
                                  assignment_expression (2245,4)-(2245,12)
                                    identifier: 'sav' (2245,4)-(2245,7)
                                    =: '=' (2245,8)-(2245,9)
                                    pointer_expression (2245,10)-(2245,12)
                                      *: '*' (2245,10)-(2245,11)
                                      identifier: 't' (2245,11)-(2245,12)
                                  ;: ';' (2245,12)-(2245,13)
                                expression_statement (2246,4)-(2246,11)
                                  assignment_expression (2246,4)-(2246,10)
                                    pointer_expression (2246,4)-(2246,6)
                                      *: '*' (2246,4)-(2246,5)
                                      identifier: 't' (2246,5)-(2246,6)
                                    =: '=' (2246,7)-(2246,8)
                                    number_literal: '0' (2246,9)-(2246,10)
                                  ;: ';' (2246,10)-(2246,11)
                                while_statement (2247,4)-(2254,5)
                                  while: 'while' (2247,4)-(2247,9)
                                  parenthesized_expression (2247,10)-(2247,16)
                                    (: '(' (2247,10)-(2247,11)
                                    pointer_expression (2247,11)-(2247,15)
                                      *: '*' (2247,11)-(2247,12)
                                      update_expression (2247,12)-(2247,15)
                                        ++: '++' (2247,12)-(2247,14)
                                        identifier: 's' (2247,14)-(2247,15)
                                    ): ')' (2247,15)-(2247,16)
                                  compound_statement (2247,17)-(2254,5)
                                    {: '{' (2247,17)-(2247,18)
                                    comment: '/* Reserved for future use */' (2248,8)-(2248,37)
                                    switch_statement (2249,8)-(2253,9)
                                      switch: 'switch' (2249,8)-(2249,14)
                                      parenthesized_expression (2249,15)-(2249,19)
                                        (: '(' (2249,15)-(2249,16)
                                        pointer_expression (2249,16)-(2249,18)
                                          *: '*' (2249,16)-(2249,17)
                                          identifier: 's' (2249,17)-(2249,18)
                                        ): ')' (2249,18)-(2249,19)
                                      compound_statement (2249,20)-(2253,9)
                                        {: '{' (2249,20)-(2249,21)
                                        case_statement (2250,8)-(2252,18)
                                          default: 'default' (2250,8)-(2250,15)
                                          :: ':' (2250,15)-(2250,16)
                                          expression_statement (2251,5)-(2251,14)
                                            assignment_expression (2251,5)-(2251,13)
                                              pointer_expression (2251,5)-(2251,7)
                                                *: '*' (2251,5)-(2251,6)
                                                identifier: 't' (2251,6)-(2251,7)
                                              =: '=' (2251,8)-(2251,9)
                                              identifier: 'sav' (2251,10)-(2251,13)
                                            ;: ';' (2251,13)-(2251,14)
                                          goto_statement (2252,5)-(2252,18)
                                            goto: 'goto' (2252,5)-(2252,9)
                                            statement_identifier: 'flagerr' (2252,10)-(2252,17)
                                            ;: ';' (2252,17)-(2252,18)
                                        }: '}' (2253,8)-(2253,9)
                                    }: '}' (2254,4)-(2254,5)
                                expression_statement (2255,4)-(2255,13)
                                  assignment_expression (2255,4)-(2255,12)
                                    pointer_expression (2255,4)-(2255,6)
                                      *: '*' (2255,4)-(2255,5)
                                      identifier: 't' (2255,5)-(2255,6)
                                    =: '=' (2255,7)-(2255,8)
                                    identifier: 'sav' (2255,9)-(2255,12)
                                  ;: ';' (2255,12)-(2255,13)
                                expression_statement (2256,4)-(2256,23)
                                  assignment_expression (2256,4)-(2256,22)
                                    identifier: 's' (2256,4)-(2256,5)
                                    =: '=' (2256,6)-(2256,7)
                                    binary_expression (2256,8)-(2256,22)
                                      binary_expression (2256,8)-(2256,18)
                                        identifier: 't' (2256,8)-(2256,9)
                                        +: '+' (2256,10)-(2256,11)
                                        identifier: 'arglen' (2256,12)-(2256,18)
                                      -: '-' (2256,19)-(2256,20)
                                      number_literal: '1' (2256,21)-(2256,22)
                                  ;: ';' (2256,22)-(2256,23)
                                }: '}' (2257,7)-(2257,8)
                              else_clause (2257,9)-(2258,17)
                                else: 'else' (2257,9)-(2257,13)
                                goto_statement (2258,4)-(2258,17)
                                  goto: 'goto' (2258,4)-(2258,8)
                                  statement_identifier: 'flagerr' (2258,9)-(2258,16)
                                  ;: ';' (2258,16)-(2258,17)
                            break_statement (2259,7)-(2259,13)
                              break: 'break' (2259,7)-(2259,12)
                              ;: ';' (2259,12)-(2259,13)
                          case_statement (2261,3)-(2286,8)
                            default: 'default' (2261,3)-(2261,10)
                            :: ':' (2261,10)-(2261,11)
                            labeled_statement (2262,3)-(2286,8)
                              statement_identifier: 'flagerr' (2262,3)-(2262,10)
                              :: ':' (2262,10)-(2262,11)
                              compound_statement (2263,7)-(2286,8)
                                {: '{' (2263,7)-(2263,8)
                                comment: '/* 
			 * We're trying to output the string that failed to
			 * parse and the offset of the parse error within that.
			 *
			 * The string is *str.  It hasn't been changed since
			 * entry to this function, I think, except that the
			 * first non-variable-declaration line in this function
			 * (currently the 238th line in this function)
			 * writes a NUL to the first place in *str, so we'll
			 * compensate by outputting the dollar sign manually.
			 */' (2264,4)-(2274,7)
                                declaration (2275,4)-(2275,52)
                                  primitive_type: 'char' (2275,4)-(2275,8)
                                  init_declarator (2275,9)-(2275,51)
                                    pointer_declarator (2275,9)-(2275,29)
                                      *: '*' (2275,9)-(2275,10)
                                      identifier: 'str_copy_for_output' (2275,10)-(2275,29)
                                    =: '=' (2275,30)-(2275,31)
                                    call_expression (2275,32)-(2275,51)
                                      identifier: 'dupstring' (2275,32)-(2275,41)
                                      argument_list (2275,41)-(2275,51)
                                        (: '(' (2275,41)-(2275,42)
                                        binary_expression (2275,42)-(2275,50)
                                          pointer_expression (2275,42)-(2275,46)
                                            *: '*' (2275,42)-(2275,43)
                                            identifier: 'str' (2275,43)-(2275,46)
                                          +: '+' (2275,47)-(2275,48)
                                          number_literal: '1' (2275,49)-(2275,50)
                                        ): ')' (2275,50)-(2275,51)
                                  ;: ';' (2275,51)-(2275,52)
                                comment: '/* 
			 * Convert to a 1-based offset, because the shell
			 * language is 1-based by default.
			 */' (2277,4)-(2280,7)
                                declaration (2281,4)-(2281,32)
                                  type_identifier: 'zlong' (2281,4)-(2281,9)
                                  init_declarator (2281,10)-(2281,31)
                                    identifier: 'offset' (2281,10)-(2281,16)
                                    =: '=' (2281,17)-(2281,18)
                                    binary_expression (2281,19)-(2281,31)
                                      binary_expression (2281,19)-(2281,27)
                                        identifier: 's' (2281,19)-(2281,20)
                                        -: '-' (2281,21)-(2281,22)
                                        pointer_expression (2281,23)-(2281,27)
                                          *: '*' (2281,23)-(2281,24)
                                          identifier: 'str' (2281,24)-(2281,27)
                                      +: '+' (2281,28)-(2281,29)
                                      number_literal: '1' (2281,30)-(2281,31)
                                  ;: ';' (2281,31)-(2281,32)
                                expression_statement (2283,4)-(2283,36)
                                  call_expression (2283,4)-(2283,35)
                                    identifier: 'untokenize' (2283,4)-(2283,14)
                                    argument_list (2283,14)-(2283,35)
                                      (: '(' (2283,14)-(2283,15)
                                      identifier: 'str_copy_for_output' (2283,15)-(2283,34)
                                      ): ')' (2283,34)-(2283,35)
                                  ;: ';' (2283,35)-(2283,36)
                                expression_statement (2284,4)-(2284,82)
                                  call_expression (2284,4)-(2284,81)
                                    identifier: 'zerr' (2284,4)-(2284,8)
                                    argument_list (2284,8)-(2284,81)
                                      (: '(' (2284,8)-(2284,9)
                                      string_literal (2284,9)-(2284,51)
                                        ": '"' (2284,9)-(2284,10)
                                        string_content: 'error in flags near position %z in '$%s'' (2284,10)-(2284,50)
                                        ": '"' (2284,50)-(2284,51)
                                      ,: ',' (2284,51)-(2284,52)
                                      identifier: 'offset' (2284,53)-(2284,59)
                                      ,: ',' (2284,59)-(2284,60)
                                      identifier: 'str_copy_for_output' (2284,61)-(2284,80)
                                      ): ')' (2284,80)-(2284,81)
                                  ;: ';' (2284,81)-(2284,82)
                                return_statement (2285,4)-(2285,16)
                                  return: 'return' (2285,4)-(2285,10)
                                  null (2285,11)-(2285,15)
                                    NULL: 'NULL' (2285,11)-(2285,15)
                                  ;: ';' (2285,15)-(2285,16)
                                }: '}' (2286,7)-(2286,8)
                          }: '}' (2287,3)-(2287,4)
                      }: '}' (2288,6)-(2288,7)
                  expression_statement (2289,6)-(2289,10)
                    update_expression (2289,6)-(2289,9)
                      identifier: 's' (2289,6)-(2289,7)
                      ++: '++' (2289,7)-(2289,9)
                    ;: ';' (2289,9)-(2289,10)
                  }: '}' (2290,2)-(2290,3)
          }: '}' (2291,5)-(2291,6)
      comment: '/*
     * premul, postmul specify the padding character to be used
     * multiple times with the (l) and (r) flags respectively.
     */' (2293,5)-(2296,8)
      if_statement (2297,5)-(2298,15)
        if: 'if' (2297,5)-(2297,7)
        parenthesized_expression (2297,8)-(2297,17)
          (: '(' (2297,8)-(2297,9)
          unary_expression (2297,9)-(2297,16)
            !: '!' (2297,9)-(2297,10)
            identifier: 'premul' (2297,10)-(2297,16)
          ): ')' (2297,16)-(2297,17)
        expression_statement (2298,2)-(2298,15)
          assignment_expression (2298,2)-(2298,14)
            identifier: 'premul' (2298,2)-(2298,8)
            =: '=' (2298,9)-(2298,10)
            string_literal (2298,11)-(2298,14)
              ": '"' (2298,11)-(2298,12)
              string_content: ' ' (2298,12)-(2298,13)
              ": '"' (2298,13)-(2298,14)
          ;: ';' (2298,14)-(2298,15)
      if_statement (2299,5)-(2300,16)
        if: 'if' (2299,5)-(2299,7)
        parenthesized_expression (2299,8)-(2299,18)
          (: '(' (2299,8)-(2299,9)
          unary_expression (2299,9)-(2299,17)
            !: '!' (2299,9)-(2299,10)
            identifier: 'postmul' (2299,10)-(2299,17)
          ): ')' (2299,17)-(2299,18)
        expression_statement (2300,2)-(2300,16)
          assignment_expression (2300,2)-(2300,15)
            identifier: 'postmul' (2300,2)-(2300,9)
            =: '=' (2300,10)-(2300,11)
            string_literal (2300,12)-(2300,15)
              ": '"' (2300,12)-(2300,13)
              string_content: ' ' (2300,13)-(2300,14)
              ": '"' (2300,14)-(2300,15)
          ;: ';' (2300,15)-(2300,16)
      comment: '/*
     * Look for special unparenthesised flags.
     * TODO: could make these able to appear inside parentheses, too,
     * i.e. ${(^)...} etc.
     */' (2302,5)-(2306,8)
      for_statement (2307,5)-(2388,6)
        for: 'for' (2307,5)-(2307,8)
        (: '(' (2307,9)-(2307,10)
        ;: ';' (2307,10)-(2307,11)
        ;: ';' (2307,11)-(2307,12)
        ): ')' (2307,12)-(2307,13)
        compound_statement (2307,14)-(2388,6)
          {: '{' (2307,14)-(2307,15)
          if_statement (2308,2)-(2387,12)
            if: 'if' (2308,2)-(2308,4)
            parenthesized_expression (2308,5)-(2308,34)
              (: '(' (2308,5)-(2308,6)
              binary_expression (2308,6)-(2308,33)
                binary_expression (2308,6)-(2308,21)
                  parenthesized_expression (2308,6)-(2308,14)
                    (: '(' (2308,6)-(2308,7)
                    assignment_expression (2308,7)-(2308,13)
                      identifier: 'c' (2308,7)-(2308,8)
                      =: '=' (2308,9)-(2308,10)
                      pointer_expression (2308,11)-(2308,13)
                        *: '*' (2308,11)-(2308,12)
                        identifier: 's' (2308,12)-(2308,13)
                    ): ')' (2308,13)-(2308,14)
                  ==: '==' (2308,15)-(2308,17)
                  char_literal (2308,18)-(2308,21)
                    ': ''' (2308,18)-(2308,19)
                    character: '^' (2308,19)-(2308,20)
                    ': ''' (2308,20)-(2308,21)
                ||: '||' (2308,22)-(2308,24)
                binary_expression (2308,25)-(2308,33)
                  identifier: 'c' (2308,25)-(2308,26)
                  ==: '==' (2308,27)-(2308,29)
                  identifier: 'Hat' (2308,30)-(2308,33)
              ): ')' (2308,33)-(2308,34)
            compound_statement (2308,35)-(2315,3)
              {: '{' (2308,35)-(2308,36)
              comment: '/* RC_EXPAND_PARAM on or off (doubled )*/' (2309,6)-(2309,47)
              if_statement (2310,6)-(2314,13)
                if: 'if' (2310,6)-(2310,8)
                parenthesized_expression (2310,9)-(2310,40)
                  (: '(' (2310,9)-(2310,10)
                  binary_expression (2310,10)-(2310,39)
                    binary_expression (2310,10)-(2310,27)
                      parenthesized_expression (2310,10)-(2310,20)
                        (: '(' (2310,10)-(2310,11)
                        assignment_expression (2310,11)-(2310,19)
                          identifier: 'c' (2310,11)-(2310,12)
                          =: '=' (2310,13)-(2310,14)
                          pointer_expression (2310,15)-(2310,19)
                            *: '*' (2310,15)-(2310,16)
                            update_expression (2310,16)-(2310,19)
                              ++: '++' (2310,16)-(2310,18)
                              identifier: 's' (2310,18)-(2310,19)
                        ): ')' (2310,19)-(2310,20)
                      ==: '==' (2310,21)-(2310,23)
                      char_literal (2310,24)-(2310,27)
                        ': ''' (2310,24)-(2310,25)
                        character: '^' (2310,25)-(2310,26)
                        ': ''' (2310,26)-(2310,27)
                    ||: '||' (2310,28)-(2310,30)
                    binary_expression (2310,31)-(2310,39)
                      identifier: 'c' (2310,31)-(2310,32)
                      ==: '==' (2310,33)-(2310,35)
                      identifier: 'Hat' (2310,36)-(2310,39)
                  ): ')' (2310,39)-(2310,40)
                compound_statement (2310,41)-(2313,7)
                  {: '{' (2310,41)-(2310,42)
                  expression_statement (2311,3)-(2311,13)
                    assignment_expression (2311,3)-(2311,12)
                      identifier: 'plan9' (2311,3)-(2311,8)
                      =: '=' (2311,9)-(2311,10)
                      number_literal: '0' (2311,11)-(2311,12)
                    ;: ';' (2311,12)-(2311,13)
                  expression_statement (2312,3)-(2312,7)
                    update_expression (2312,3)-(2312,6)
                      identifier: 's' (2312,3)-(2312,4)
                      ++: '++' (2312,4)-(2312,6)
                    ;: ';' (2312,6)-(2312,7)
                  }: '}' (2313,6)-(2313,7)
                else_clause (2313,8)-(2314,13)
                  else: 'else' (2313,8)-(2313,12)
                  expression_statement (2314,3)-(2314,13)
                    assignment_expression (2314,3)-(2314,12)
                      identifier: 'plan9' (2314,3)-(2314,8)
                      =: '=' (2314,9)-(2314,10)
                      number_literal: '1' (2314,11)-(2314,12)
                    ;: ';' (2314,12)-(2314,13)
              }: '}' (2315,2)-(2315,3)
            else_clause (2315,4)-(2387,12)
              else: 'else' (2315,4)-(2315,8)
              if_statement (2315,9)-(2387,12)
                if: 'if' (2315,9)-(2315,11)
                parenthesized_expression (2315,12)-(2315,44)
                  (: '(' (2315,12)-(2315,13)
                  binary_expression (2315,13)-(2315,43)
                    binary_expression (2315,13)-(2315,28)
                      parenthesized_expression (2315,13)-(2315,21)
                        (: '(' (2315,13)-(2315,14)
                        assignment_expression (2315,14)-(2315,20)
                          identifier: 'c' (2315,14)-(2315,15)
                          =: '=' (2315,16)-(2315,17)
                          pointer_expression (2315,18)-(2315,20)
                            *: '*' (2315,18)-(2315,19)
                            identifier: 's' (2315,19)-(2315,20)
                        ): ')' (2315,20)-(2315,21)
                      ==: '==' (2315,22)-(2315,24)
                      char_literal (2315,25)-(2315,28)
                        ': ''' (2315,25)-(2315,26)
                        character: '=' (2315,26)-(2315,27)
                        ': ''' (2315,27)-(2315,28)
                    ||: '||' (2315,29)-(2315,31)
                    binary_expression (2315,32)-(2315,43)
                      identifier: 'c' (2315,32)-(2315,33)
                      ==: '==' (2315,34)-(2315,36)
                      identifier: 'Equals' (2315,37)-(2315,43)
                  ): ')' (2315,43)-(2315,44)
                compound_statement (2315,45)-(2327,3)
                  {: '{' (2315,45)-(2315,46)
                  comment: '/* SH_WORD_SPLIT on or off (doubled). spbreak = 2 means force */' (2316,6)-(2316,70)
                  if_statement (2317,6)-(2326,7)
                    if: 'if' (2317,6)-(2317,8)
                    parenthesized_expression (2317,9)-(2317,43)
                      (: '(' (2317,9)-(2317,10)
                      binary_expression (2317,10)-(2317,42)
                        binary_expression (2317,10)-(2317,27)
                          parenthesized_expression (2317,10)-(2317,20)
                            (: '(' (2317,10)-(2317,11)
                            assignment_expression (2317,11)-(2317,19)
                              identifier: 'c' (2317,11)-(2317,12)
                              =: '=' (2317,13)-(2317,14)
                              pointer_expression (2317,15)-(2317,19)
                                *: '*' (2317,15)-(2317,16)
                                update_expression (2317,16)-(2317,19)
                                  ++: '++' (2317,16)-(2317,18)
                                  identifier: 's' (2317,18)-(2317,19)
                            ): ')' (2317,19)-(2317,20)
                          ==: '==' (2317,21)-(2317,23)
                          char_literal (2317,24)-(2317,27)
                            ': ''' (2317,24)-(2317,25)
                            character: '=' (2317,25)-(2317,26)
                            ': ''' (2317,26)-(2317,27)
                        ||: '||' (2317,28)-(2317,30)
                        binary_expression (2317,31)-(2317,42)
                          identifier: 'c' (2317,31)-(2317,32)
                          ==: '==' (2317,33)-(2317,35)
                          identifier: 'Equals' (2317,36)-(2317,42)
                      ): ')' (2317,42)-(2317,43)
                    compound_statement (2317,44)-(2322,7)
                      {: '{' (2317,44)-(2317,45)
                      expression_statement (2318,3)-(2318,15)
                        assignment_expression (2318,3)-(2318,14)
                          identifier: 'spbreak' (2318,3)-(2318,10)
                          =: '=' (2318,11)-(2318,12)
                          number_literal: '0' (2318,13)-(2318,14)
                        ;: ';' (2318,14)-(2318,15)
                      if_statement (2319,3)-(2320,18)
                        if: 'if' (2319,3)-(2319,5)
                        parenthesized_expression (2319,6)-(2319,18)
                          (: '(' (2319,6)-(2319,7)
                          binary_expression (2319,7)-(2319,17)
                            identifier: 'nojoin' (2319,7)-(2319,13)
                            <: '<' (2319,14)-(2319,15)
                            number_literal: '2' (2319,16)-(2319,17)
                          ): ')' (2319,17)-(2319,18)
                        expression_statement (2320,7)-(2320,18)
                          assignment_expression (2320,7)-(2320,17)
                            identifier: 'nojoin' (2320,7)-(2320,13)
                            =: '=' (2320,14)-(2320,15)
                            number_literal: '0' (2320,16)-(2320,17)
                          ;: ';' (2320,17)-(2320,18)
                      expression_statement (2321,3)-(2321,7)
                        update_expression (2321,3)-(2321,6)
                          identifier: 's' (2321,3)-(2321,4)
                          ++: '++' (2321,4)-(2321,6)
                        ;: ';' (2321,6)-(2321,7)
                      }: '}' (2322,6)-(2322,7)
                    else_clause (2322,8)-(2326,7)
                      else: 'else' (2322,8)-(2322,12)
                      compound_statement (2322,13)-(2326,7)
                        {: '{' (2322,13)-(2322,14)
                        expression_statement (2323,3)-(2323,15)
                          assignment_expression (2323,3)-(2323,14)
                            identifier: 'spbreak' (2323,3)-(2323,10)
                            =: '=' (2323,11)-(2323,12)
                            number_literal: '2' (2323,13)-(2323,14)
                          ;: ';' (2323,14)-(2323,15)
                        if_statement (2324,3)-(2325,31)
                          if: 'if' (2324,3)-(2324,5)
                          parenthesized_expression (2324,6)-(2324,18)
                            (: '(' (2324,6)-(2324,7)
                            binary_expression (2324,7)-(2324,17)
                              identifier: 'nojoin' (2324,7)-(2324,13)
                              <: '<' (2324,14)-(2324,15)
                              number_literal: '2' (2324,16)-(2324,17)
                            ): ')' (2324,17)-(2324,18)
                          expression_statement (2325,7)-(2325,31)
                            assignment_expression (2325,7)-(2325,30)
                              identifier: 'nojoin' (2325,7)-(2325,13)
                              =: '=' (2325,14)-(2325,15)
                              unary_expression (2325,16)-(2325,30)
                                !: '!' (2325,16)-(2325,17)
                                parenthesized_expression (2325,17)-(2325,30)
                                  (: '(' (2325,17)-(2325,18)
                                  binary_expression (2325,18)-(2325,29)
                                    identifier: 'ifs' (2325,18)-(2325,21)
                                    &&: '&&' (2325,22)-(2325,24)
                                    pointer_expression (2325,25)-(2325,29)
                                      *: '*' (2325,25)-(2325,26)
                                      identifier: 'ifs' (2325,26)-(2325,29)
                                  ): ')' (2325,29)-(2325,30)
                            ;: ';' (2325,30)-(2325,31)
                        }: '}' (2326,6)-(2326,7)
                  }: '}' (2327,2)-(2327,3)
                else_clause (2327,4)-(2387,12)
                  else: 'else' (2327,4)-(2327,8)
                  if_statement (2327,9)-(2387,12)
                    if: 'if' (2327,9)-(2327,11)
                    parenthesized_expression (2327,12)-(2344,64)
                      (: '(' (2327,12)-(2327,13)
                      binary_expression (2327,13)-(2344,63)
                        binary_expression (2327,13)-(2328,43)
                          parenthesized_expression (2327,13)-(2327,37)
                            (: '(' (2327,13)-(2327,14)
                            binary_expression (2327,14)-(2327,36)
                              binary_expression (2327,14)-(2327,22)
                                identifier: 'c' (2327,14)-(2327,15)
                                ==: '==' (2327,16)-(2327,18)
                                char_literal (2327,19)-(2327,22)
                                  ': ''' (2327,19)-(2327,20)
                                  character: '#' (2327,20)-(2327,21)
                                  ': ''' (2327,21)-(2327,22)
                              ||: '||' (2327,23)-(2327,25)
                              binary_expression (2327,26)-(2327,36)
                                identifier: 'c' (2327,26)-(2327,27)
                                ==: '==' (2327,28)-(2327,30)
                                identifier: 'Pound' (2327,31)-(2327,36)
                            ): ')' (2327,36)-(2327,37)
                          &&: '&&' (2327,38)-(2327,40)
                          parenthesized_expression (2328,6)-(2328,43)
                            (: '(' (2328,6)-(2328,7)
                            binary_expression (2328,7)-(2328,42)
                              identifier: 'inbrace' (2328,7)-(2328,14)
                              ||: '||' (2328,15)-(2328,17)
                              unary_expression (2328,18)-(2328,42)
                                !: '!' (2328,18)-(2328,19)
                                call_expression (2328,19)-(2328,42)
                                  identifier: 'isset' (2328,19)-(2328,24)
                                  argument_list (2328,24)-(2328,42)
                                    (: '(' (2328,24)-(2328,25)
                                    identifier: 'POSIXIDENTIFIERS' (2328,25)-(2328,41)
                                    ): ')' (2328,41)-(2328,42)
                            ): ')' (2328,42)-(2328,43)
                        &&: '&&' (2328,44)-(2328,46)
                        parenthesized_expression (2329,6)-(2344,63)
                          (: '(' (2329,6)-(2329,7)
                          binary_expression (2329,7)-(2344,62)
                            binary_expression (2329,7)-(2343,38)
                              binary_expression (2329,7)-(2342,21)
                                binary_expression (2329,7)-(2341,58)
                                  binary_expression (2329,7)-(2332,52)
                                    binary_expression (2329,7)-(2332,35)
                                      binary_expression (2329,7)-(2332,19)
                                        binary_expression (2329,7)-(2331,34)
                                          binary_expression (2329,7)-(2331,19)
                                            binary_expression (2329,7)-(2330,55)
                                              binary_expression (2329,7)-(2330,42)
                                                binary_expression (2329,7)-(2330,28)
                                                  binary_expression (2329,7)-(2329,41)
                                                    call_expression (2329,7)-(2329,32)
                                                      identifier: 'itype_end' (2329,7)-(2329,16)
                                                      argument_list (2329,16)-(2329,32)
                                                        (: '(' (2329,16)-(2329,17)
                                                        binary_expression (2329,17)-(2329,20)
                                                          identifier: 's' (2329,17)-(2329,18)
                                                          +: '+' (2329,18)-(2329,19)
                                                          number_literal: '1' (2329,19)-(2329,20)
                                                        ,: ',' (2329,20)-(2329,21)
                                                        identifier: 'IIDENT' (2329,22)-(2329,28)
                                                        ,: ',' (2329,28)-(2329,29)
                                                        number_literal: '0' (2329,30)-(2329,31)
                                                        ): ')' (2329,31)-(2329,32)
                                                    !=: '!=' (2329,33)-(2329,35)
                                                    binary_expression (2329,36)-(2329,41)
                                                      identifier: 's' (2329,36)-(2329,37)
                                                      +: '+' (2329,38)-(2329,39)
                                                      number_literal: '1' (2329,40)-(2329,41)
                                                  ||: '||' (2330,7)-(2330,9)
                                                  binary_expression (2330,10)-(2330,28)
                                                    parenthesized_expression (2330,10)-(2330,21)
                                                      (: '(' (2330,10)-(2330,11)
                                                      assignment_expression (2330,11)-(2330,20)
                                                        identifier: 'cc' (2330,11)-(2330,13)
                                                        =: '=' (2330,14)-(2330,15)
                                                        subscript_expression (2330,16)-(2330,20)
                                                          identifier: 's' (2330,16)-(2330,17)
                                                          [: '[' (2330,17)-(2330,18)
                                                          number_literal: '1' (2330,18)-(2330,19)
                                                          ]: ']' (2330,19)-(2330,20)
                                                      ): ')' (2330,20)-(2330,21)
                                                    ==: '==' (2330,22)-(2330,24)
                                                    char_literal (2330,25)-(2330,28)
                                                      ': ''' (2330,25)-(2330,26)
                                                      character: '*' (2330,26)-(2330,27)
                                                      ': ''' (2330,27)-(2330,28)
                                                ||: '||' (2330,29)-(2330,31)
                                                binary_expression (2330,32)-(2330,42)
                                                  identifier: 'cc' (2330,32)-(2330,34)
                                                  ==: '==' (2330,35)-(2330,37)
                                                  identifier: 'Star' (2330,38)-(2330,42)
                                              ||: '||' (2330,43)-(2330,45)
                                              binary_expression (2330,46)-(2330,55)
                                                identifier: 'cc' (2330,46)-(2330,48)
                                                ==: '==' (2330,49)-(2330,51)
                                                char_literal (2330,52)-(2330,55)
                                                  ': ''' (2330,52)-(2330,53)
                                                  character: '@' (2330,53)-(2330,54)
                                                  ': ''' (2330,54)-(2330,55)
                                            ||: '||' (2331,7)-(2331,9)
                                            binary_expression (2331,10)-(2331,19)
                                              identifier: 'cc' (2331,10)-(2331,12)
                                              ==: '==' (2331,13)-(2331,15)
                                              char_literal (2331,16)-(2331,19)
                                                ': ''' (2331,16)-(2331,17)
                                                character: '?' (2331,17)-(2331,18)
                                                ': ''' (2331,18)-(2331,19)
                                          ||: '||' (2331,20)-(2331,22)
                                          binary_expression (2331,23)-(2331,34)
                                            identifier: 'cc' (2331,23)-(2331,25)
                                            ==: '==' (2331,26)-(2331,28)
                                            identifier: 'Quest' (2331,29)-(2331,34)
                                        ||: '||' (2332,7)-(2332,9)
                                        binary_expression (2332,10)-(2332,19)
                                          identifier: 'cc' (2332,10)-(2332,12)
                                          ==: '==' (2332,13)-(2332,15)
                                          char_literal (2332,16)-(2332,19)
                                            ': ''' (2332,16)-(2332,17)
                                            character: '$' (2332,17)-(2332,18)
                                            ': ''' (2332,18)-(2332,19)
                                      ||: '||' (2332,20)-(2332,22)
                                      binary_expression (2332,23)-(2332,35)
                                        identifier: 'cc' (2332,23)-(2332,25)
                                        ==: '==' (2332,26)-(2332,28)
                                        identifier: 'String' (2332,29)-(2332,35)
                                    ||: '||' (2332,36)-(2332,38)
                                    binary_expression (2332,39)-(2332,52)
                                      identifier: 'cc' (2332,39)-(2332,41)
                                      ==: '==' (2332,42)-(2332,44)
                                      identifier: 'Qstring' (2332,45)-(2332,52)
                                  comment: '/*
		     * Me And My Squiggle:
		     * ${##} is the length of $#, but ${##foo}
		     * is $# with a "foo" removed from the start.
		     * If someone had defined the *@!@! language
		     * properly in the first place we wouldn't
		     * have this nonsense.
		     */' (2333,7)-(2340,10)
                                  ||: '||' (2341,7)-(2341,9)
                                  parenthesized_expression (2341,10)-(2341,58)
                                    (: '(' (2341,10)-(2341,11)
                                    binary_expression (2341,11)-(2341,57)
                                      parenthesized_expression (2341,11)-(2341,37)
                                        (: '(' (2341,11)-(2341,12)
                                        binary_expression (2341,12)-(2341,36)
                                          binary_expression (2341,12)-(2341,21)
                                            identifier: 'cc' (2341,12)-(2341,14)
                                            ==: '==' (2341,15)-(2341,17)
                                            char_literal (2341,18)-(2341,21)
                                              ': ''' (2341,18)-(2341,19)
                                              character: '#' (2341,19)-(2341,20)
                                              ': ''' (2341,20)-(2341,21)
                                          ||: '||' (2341,22)-(2341,24)
                                          binary_expression (2341,25)-(2341,36)
                                            identifier: 'cc' (2341,25)-(2341,27)
                                            ==: '==' (2341,28)-(2341,30)
                                            identifier: 'Pound' (2341,31)-(2341,36)
                                        ): ')' (2341,36)-(2341,37)
                                      &&: '&&' (2341,38)-(2341,40)
                                      binary_expression (2341,41)-(2341,57)
                                        subscript_expression (2341,41)-(2341,45)
                                          identifier: 's' (2341,41)-(2341,42)
                                          [: '[' (2341,42)-(2341,43)
                                          number_literal: '2' (2341,43)-(2341,44)
                                          ]: ']' (2341,44)-(2341,45)
                                        ==: '==' (2341,46)-(2341,48)
                                        identifier: 'Outbrace' (2341,49)-(2341,57)
                                    ): ')' (2341,57)-(2341,58)
                                ||: '||' (2342,7)-(2342,9)
                                call_expression (2342,10)-(2342,21)
                                  identifier: 'IS_DASH' (2342,10)-(2342,17)
                                  argument_list (2342,17)-(2342,21)
                                    (: '(' (2342,17)-(2342,18)
                                    identifier: 'cc' (2342,18)-(2342,20)
                                    ): ')' (2342,20)-(2342,21)
                              ||: '||' (2343,7)-(2343,9)
                              parenthesized_expression (2343,10)-(2343,38)
                                (: '(' (2343,10)-(2343,11)
                                binary_expression (2343,11)-(2343,37)
                                  binary_expression (2343,11)-(2343,20)
                                    identifier: 'cc' (2343,11)-(2343,13)
                                    ==: '==' (2343,14)-(2343,16)
                                    char_literal (2343,17)-(2343,20)
                                      ': ''' (2343,17)-(2343,18)
                                      character: ':' (2343,18)-(2343,19)
                                      ': ''' (2343,19)-(2343,20)
                                  &&: '&&' (2343,21)-(2343,23)
                                  call_expression (2343,24)-(2343,37)
                                    identifier: 'IS_DASH' (2343,24)-(2343,31)
                                    argument_list (2343,31)-(2343,37)
                                      (: '(' (2343,31)-(2343,32)
                                      subscript_expression (2343,32)-(2343,36)
                                        identifier: 's' (2343,32)-(2343,33)
                                        [: '[' (2343,33)-(2343,34)
                                        number_literal: '2' (2343,34)-(2343,35)
                                        ]: ']' (2343,35)-(2343,36)
                                      ): ')' (2343,36)-(2343,37)
                                ): ')' (2343,37)-(2343,38)
                            ||: '||' (2344,7)-(2344,9)
                            parenthesized_expression (2344,10)-(2344,62)
                              (: '(' (2344,10)-(2344,11)
                              binary_expression (2344,11)-(2344,61)
                                call_expression (2344,11)-(2344,23)
                                  identifier: 'isstring' (2344,11)-(2344,19)
                                  argument_list (2344,19)-(2344,23)
                                    (: '(' (2344,19)-(2344,20)
                                    identifier: 'cc' (2344,20)-(2344,22)
                                    ): ')' (2344,22)-(2344,23)
                                &&: '&&' (2344,24)-(2344,26)
                                parenthesized_expression (2344,27)-(2344,61)
                                  (: '(' (2344,27)-(2344,28)
                                  binary_expression (2344,28)-(2344,60)
                                    binary_expression (2344,28)-(2344,43)
                                      subscript_expression (2344,28)-(2344,32)
                                        identifier: 's' (2344,28)-(2344,29)
                                        [: '[' (2344,29)-(2344,30)
                                        number_literal: '2' (2344,30)-(2344,31)
                                        ]: ']' (2344,31)-(2344,32)
                                      ==: '==' (2344,33)-(2344,35)
                                      identifier: 'Inbrace' (2344,36)-(2344,43)
                                    ||: '||' (2344,44)-(2344,46)
                                    binary_expression (2344,47)-(2344,60)
                                      subscript_expression (2344,47)-(2344,51)
                                        identifier: 's' (2344,47)-(2344,48)
                                        [: '[' (2344,48)-(2344,49)
                                        number_literal: '2' (2344,49)-(2344,50)
                                        ]: ']' (2344,50)-(2344,51)
                                      ==: '==' (2344,52)-(2344,54)
                                      identifier: 'Inpar' (2344,55)-(2344,60)
                                  ): ')' (2344,60)-(2344,61)
                              ): ')' (2344,61)-(2344,62)
                          ): ')' (2344,62)-(2344,63)
                      ): ')' (2344,63)-(2344,64)
                    compound_statement (2344,65)-(2353,3)
                      {: '{' (2344,65)-(2344,66)
                      expression_statement (2345,6)-(2345,33)
                        comma_expression (2345,6)-(2345,32)
                          assignment_expression (2345,6)-(2345,27)
                            identifier: 'getlen' (2345,6)-(2345,12)
                            =: '=' (2345,13)-(2345,14)
                            binary_expression (2345,15)-(2345,27)
                              number_literal: '1' (2345,15)-(2345,16)
                              +: '+' (2345,17)-(2345,18)
                              identifier: 'whichlen' (2345,19)-(2345,27)
                          ,: ',' (2345,27)-(2345,28)
                          update_expression (2345,29)-(2345,32)
                            identifier: 's' (2345,29)-(2345,30)
                            ++: '++' (2345,30)-(2345,32)
                        ;: ';' (2345,32)-(2345,33)
                      comment: '/*
	     * Return the length of the parameter.
	     * getlen can be more than 1 to indicate characters (2),
	     * words ignoring multiple delimiters (3), words taking
	     * account of multiple delimiters.  delimiter is in
	     * spsep, NULL means $IFS.
	     */' (2346,6)-(2352,9)
                      }: '}' (2353,2)-(2353,3)
                    else_clause (2353,4)-(2387,12)
                      else: 'else' (2353,4)-(2353,8)
                      if_statement (2353,9)-(2387,12)
                        if: 'if' (2353,9)-(2353,11)
                        parenthesized_expression (2353,12)-(2353,36)
                          (: '(' (2353,12)-(2353,13)
                          binary_expression (2353,13)-(2353,35)
                            binary_expression (2353,13)-(2353,21)
                              identifier: 'c' (2353,13)-(2353,14)
                              ==: '==' (2353,15)-(2353,17)
                              char_literal (2353,18)-(2353,21)
                                ': ''' (2353,18)-(2353,19)
                                character: '~' (2353,19)-(2353,20)
                                ': ''' (2353,20)-(2353,21)
                            ||: '||' (2353,22)-(2353,24)
                            binary_expression (2353,25)-(2353,35)
                              identifier: 'c' (2353,25)-(2353,26)
                              ==: '==' (2353,27)-(2353,29)
                              identifier: 'Tilde' (2353,30)-(2353,35)
                          ): ')' (2353,35)-(2353,36)
                        compound_statement (2353,37)-(2360,3)
                          {: '{' (2353,37)-(2353,38)
                          comment: '/* GLOB_SUBST (forced) on or off (doubled) */' (2354,6)-(2354,51)
                          if_statement (2355,6)-(2359,17)
                            if: 'if' (2355,6)-(2355,8)
                            parenthesized_expression (2355,9)-(2355,42)
                              (: '(' (2355,9)-(2355,10)
                              binary_expression (2355,10)-(2355,41)
                                binary_expression (2355,10)-(2355,27)
                                  parenthesized_expression (2355,10)-(2355,20)
                                    (: '(' (2355,10)-(2355,11)
                                    assignment_expression (2355,11)-(2355,19)
                                      identifier: 'c' (2355,11)-(2355,12)
                                      =: '=' (2355,13)-(2355,14)
                                      pointer_expression (2355,15)-(2355,19)
                                        *: '*' (2355,15)-(2355,16)
                                        update_expression (2355,16)-(2355,19)
                                          ++: '++' (2355,16)-(2355,18)
                                          identifier: 's' (2355,18)-(2355,19)
                                    ): ')' (2355,19)-(2355,20)
                                  ==: '==' (2355,21)-(2355,23)
                                  char_literal (2355,24)-(2355,27)
                                    ': ''' (2355,24)-(2355,25)
                                    character: '~' (2355,25)-(2355,26)
                                    ': ''' (2355,26)-(2355,27)
                                ||: '||' (2355,28)-(2355,30)
                                binary_expression (2355,31)-(2355,41)
                                  identifier: 'c' (2355,31)-(2355,32)
                                  ==: '==' (2355,33)-(2355,35)
                                  identifier: 'Tilde' (2355,36)-(2355,41)
                              ): ')' (2355,41)-(2355,42)
                            compound_statement (2355,43)-(2358,7)
                              {: '{' (2355,43)-(2355,44)
                              expression_statement (2356,3)-(2356,17)
                                assignment_expression (2356,3)-(2356,16)
                                  identifier: 'globsubst' (2356,3)-(2356,12)
                                  =: '=' (2356,13)-(2356,14)
                                  number_literal: '0' (2356,15)-(2356,16)
                                ;: ';' (2356,16)-(2356,17)
                              expression_statement (2357,3)-(2357,7)
                                update_expression (2357,3)-(2357,6)
                                  identifier: 's' (2357,3)-(2357,4)
                                  ++: '++' (2357,4)-(2357,6)
                                ;: ';' (2357,6)-(2357,7)
                              }: '}' (2358,6)-(2358,7)
                            else_clause (2358,8)-(2359,17)
                              else: 'else' (2358,8)-(2358,12)
                              expression_statement (2359,3)-(2359,17)
                                assignment_expression (2359,3)-(2359,16)
                                  identifier: 'globsubst' (2359,3)-(2359,12)
                                  =: '=' (2359,13)-(2359,14)
                                  number_literal: '2' (2359,15)-(2359,16)
                                ;: ';' (2359,16)-(2359,17)
                          }: '}' (2360,2)-(2360,3)
                        else_clause (2360,4)-(2387,12)
                          else: 'else' (2360,4)-(2360,8)
                          if_statement (2360,9)-(2387,12)
                            if: 'if' (2360,9)-(2360,11)
                            parenthesized_expression (2360,12)-(2360,22)
                              (: '(' (2360,12)-(2360,13)
                              binary_expression (2360,13)-(2360,21)
                                identifier: 'c' (2360,13)-(2360,14)
                                ==: '==' (2360,15)-(2360,17)
                                char_literal (2360,18)-(2360,21)
                                  ': ''' (2360,18)-(2360,19)
                                  character: '+' (2360,19)-(2360,20)
                                  ': ''' (2360,20)-(2360,21)
                              ): ')' (2360,21)-(2360,22)
                            compound_statement (2360,23)-(2378,3)
                              {: '{' (2360,23)-(2360,24)
                              comment: '/*
	     * Return whether indicated parameter is set. 
	     * Try to handle this when parameter is named
	     * by (P) (second part of test).
	     */' (2361,6)-(2365,9)
                              if_statement (2366,6)-(2377,7)
                                if: 'if' (2366,6)-(2366,8)
                                parenthesized_expression (2366,9)-(2367,42)
                                  (: '(' (2366,9)-(2366,10)
                                  binary_expression (2366,10)-(2367,41)
                                    binary_expression (2366,10)-(2366,42)
                                      call_expression (2366,10)-(2366,35)
                                        identifier: 'itype_end' (2366,10)-(2366,19)
                                        argument_list (2366,19)-(2366,35)
                                          (: '(' (2366,19)-(2366,20)
                                          binary_expression (2366,20)-(2366,23)
                                            identifier: 's' (2366,20)-(2366,21)
                                            +: '+' (2366,21)-(2366,22)
                                            number_literal: '1' (2366,22)-(2366,23)
                                          ,: ',' (2366,23)-(2366,24)
                                          identifier: 'IIDENT' (2366,25)-(2366,31)
                                          ,: ',' (2366,31)-(2366,32)
                                          number_literal: '0' (2366,33)-(2366,34)
                                          ): ')' (2366,34)-(2366,35)
                                      !=: '!=' (2366,36)-(2366,38)
                                      binary_expression (2366,39)-(2366,42)
                                        identifier: 's' (2366,39)-(2366,40)
                                        +: '+' (2366,40)-(2366,41)
                                        number_literal: '1' (2366,41)-(2366,42)
                                    ||: '||' (2366,43)-(2366,45)
                                    parenthesized_expression (2366,46)-(2367,41)
                                      (: '(' (2366,46)-(2366,47)
                                      binary_expression (2366,47)-(2367,40)
                                        binary_expression (2366,47)-(2366,70)
                                          identifier: 'aspar' (2366,47)-(2366,52)
                                          &&: '&&' (2366,53)-(2366,55)
                                          call_expression (2366,56)-(2366,70)
                                            identifier: 'isstring' (2366,56)-(2366,64)
                                            argument_list (2366,64)-(2366,70)
                                              (: '(' (2366,64)-(2366,65)
                                              subscript_expression (2366,65)-(2366,69)
                                                identifier: 's' (2366,65)-(2366,66)
                                                [: '[' (2366,66)-(2366,67)
                                                number_literal: '1' (2366,67)-(2366,68)
                                                ]: ']' (2366,68)-(2366,69)
                                              ): ')' (2366,69)-(2366,70)
                                        &&: '&&' (2366,71)-(2366,73)
                                        parenthesized_expression (2367,6)-(2367,40)
                                          (: '(' (2367,6)-(2367,7)
                                          binary_expression (2367,7)-(2367,39)
                                            binary_expression (2367,7)-(2367,22)
                                              subscript_expression (2367,7)-(2367,11)
                                                identifier: 's' (2367,7)-(2367,8)
                                                [: '[' (2367,8)-(2367,9)
                                                number_literal: '2' (2367,9)-(2367,10)
                                                ]: ']' (2367,10)-(2367,11)
                                              ==: '==' (2367,12)-(2367,14)
                                              identifier: 'Inbrace' (2367,15)-(2367,22)
                                            ||: '||' (2367,23)-(2367,25)
                                            binary_expression (2367,26)-(2367,39)
                                              subscript_expression (2367,26)-(2367,30)
                                                identifier: 's' (2367,26)-(2367,27)
                                                [: '[' (2367,27)-(2367,28)
                                                number_literal: '2' (2367,28)-(2367,29)
                                                ]: ']' (2367,29)-(2367,30)
                                              ==: '==' (2367,31)-(2367,33)
                                              identifier: 'Inpar' (2367,34)-(2367,39)
                                          ): ')' (2367,39)-(2367,40)
                                      ): ')' (2367,40)-(2367,41)
                                  ): ')' (2367,41)-(2367,42)
                                expression_statement (2368,3)-(2368,19)
                                  comma_expression (2368,3)-(2368,18)
                                    assignment_expression (2368,3)-(2368,13)
                                      identifier: 'chkset' (2368,3)-(2368,9)
                                      =: '=' (2368,10)-(2368,11)
                                      number_literal: '1' (2368,12)-(2368,13)
                                    ,: ',' (2368,13)-(2368,14)
                                    update_expression (2368,15)-(2368,18)
                                      identifier: 's' (2368,15)-(2368,16)
                                      ++: '++' (2368,16)-(2368,18)
                                  ;: ';' (2368,18)-(2368,19)
                                else_clause (2369,6)-(2377,7)
                                  else: 'else' (2369,6)-(2369,10)
                                  if_statement (2369,11)-(2377,7)
                                    if: 'if' (2369,11)-(2369,13)
                                    parenthesized_expression (2369,14)-(2369,24)
                                      (: '(' (2369,14)-(2369,15)
                                      unary_expression (2369,15)-(2369,23)
                                        !: '!' (2369,15)-(2369,16)
                                        identifier: 'inbrace' (2369,16)-(2369,23)
                                      ): ')' (2369,23)-(2369,24)
                                    compound_statement (2369,25)-(2374,7)
                                      {: '{' (2369,25)-(2369,26)
                                      comment: '/* Special case for `$+' on its own --- leave unmodified */' (2370,3)-(2370,62)
                                      expression_statement (2371,3)-(2371,15)
                                        assignment_expression (2371,3)-(2371,14)
                                          pointer_expression (2371,3)-(2371,8)
                                            *: '*' (2371,3)-(2371,4)
                                            identifier: 'aptr' (2371,4)-(2371,8)
                                          =: '=' (2371,9)-(2371,10)
                                          char_literal (2371,11)-(2371,14)
                                            ': ''' (2371,11)-(2371,12)
                                            character: '$' (2371,12)-(2371,13)
                                            ': ''' (2371,13)-(2371,14)
                                        ;: ';' (2371,14)-(2371,15)
                                      expression_statement (2372,3)-(2372,19)
                                        assignment_expression (2372,3)-(2372,18)
                                          pointer_expression (2372,3)-(2372,7)
                                            *: '*' (2372,3)-(2372,4)
                                            identifier: 'str' (2372,4)-(2372,7)
                                          =: '=' (2372,8)-(2372,9)
                                          binary_expression (2372,10)-(2372,18)
                                            identifier: 'aptr' (2372,10)-(2372,14)
                                            +: '+' (2372,15)-(2372,16)
                                            number_literal: '1' (2372,17)-(2372,18)
                                        ;: ';' (2372,18)-(2372,19)
                                      return_statement (2373,3)-(2373,12)
                                        return: 'return' (2373,3)-(2373,9)
                                        identifier: 'n' (2373,10)-(2373,11)
                                        ;: ';' (2373,11)-(2373,12)
                                      }: '}' (2374,6)-(2374,7)
                                    else_clause (2374,8)-(2377,7)
                                      else: 'else' (2374,8)-(2374,12)
                                      compound_statement (2374,13)-(2377,7)
                                        {: '{' (2374,13)-(2374,14)
                                        expression_statement (2375,3)-(2375,28)
                                          call_expression (2375,3)-(2375,27)
                                            identifier: 'zerr' (2375,3)-(2375,7)
                                            argument_list (2375,7)-(2375,27)
                                              (: '(' (2375,7)-(2375,8)
                                              string_literal (2375,8)-(2375,26)
                                                ": '"' (2375,8)-(2375,9)
                                                string_content: 'bad substitution' (2375,9)-(2375,25)
                                                ": '"' (2375,25)-(2375,26)
                                              ): ')' (2375,26)-(2375,27)
                                          ;: ';' (2375,27)-(2375,28)
                                        return_statement (2376,3)-(2376,15)
                                          return: 'return' (2376,3)-(2376,9)
                                          null (2376,10)-(2376,14)
                                            NULL: 'NULL' (2376,10)-(2376,14)
                                          ;: ';' (2376,14)-(2376,15)
                                        }: '}' (2377,6)-(2377,7)
                              }: '}' (2378,2)-(2378,3)
                            else_clause (2378,4)-(2387,12)
                              else: 'else' (2378,4)-(2378,8)
                              if_statement (2378,9)-(2387,12)
                                if: 'if' (2378,9)-(2378,11)
                                parenthesized_expression (2378,12)-(2378,49)
                                  (: '(' (2378,12)-(2378,13)
                                  binary_expression (2378,13)-(2378,48)
                                    binary_expression (2378,13)-(2378,33)
                                      identifier: 'inbrace' (2378,13)-(2378,20)
                                      &&: '&&' (2378,21)-(2378,23)
                                      call_expression (2378,24)-(2378,33)
                                        identifier: 'inull' (2378,24)-(2378,29)
                                        argument_list (2378,29)-(2378,33)
                                          (: '(' (2378,29)-(2378,30)
                                          pointer_expression (2378,30)-(2378,32)
                                            *: '*' (2378,30)-(2378,31)
                                            identifier: 's' (2378,31)-(2378,32)
                                          ): ')' (2378,32)-(2378,33)
                                    &&: '&&' (2378,34)-(2378,36)
                                    binary_expression (2378,37)-(2378,48)
                                      pointer_expression (2378,37)-(2378,39)
                                        *: '*' (2378,37)-(2378,38)
                                        identifier: 's' (2378,38)-(2378,39)
                                      !=: '!=' (2378,40)-(2378,42)
                                      identifier: 'Bnull' (2378,43)-(2378,48)
                                  ): ')' (2378,48)-(2378,49)
                                compound_statement (2378,50)-(2386,3)
                                  {: '{' (2378,50)-(2378,51)
                                  comment: '/*
	     * Handles things like ${(f)"$(<file)"} by skipping 
	     * the double quotes.  We don't need to know what was
	     * actually there; the presence of a String or Qstring
	     * is good enough.
	     */' (2379,6)-(2384,9)
                                  expression_statement (2385,6)-(2385,10)
                                    update_expression (2385,6)-(2385,9)
                                      identifier: 's' (2385,6)-(2385,7)
                                      ++: '++' (2385,7)-(2385,9)
                                    ;: ';' (2385,9)-(2385,10)
                                  }: '}' (2386,2)-(2386,3)
                                else_clause (2386,4)-(2387,12)
                                  else: 'else' (2386,4)-(2386,8)
                                  break_statement (2387,6)-(2387,12)
                                    break: 'break' (2387,6)-(2387,11)
                                    ;: ';' (2387,11)-(2387,12)
          }: '}' (2388,5)-(2388,6)
      comment: '/* Don't activate special pattern characters if inside quotes */' (2389,5)-(2389,69)
      if_statement (2390,5)-(2391,16)
        if: 'if' (2390,5)-(2390,7)
        parenthesized_expression (2390,8)-(2390,12)
          (: '(' (2390,8)-(2390,9)
          identifier: 'qt' (2390,9)-(2390,11)
          ): ')' (2390,11)-(2390,12)
        expression_statement (2391,2)-(2391,16)
          assignment_expression (2391,2)-(2391,15)
            identifier: 'globsubst' (2391,2)-(2391,11)
            =: '=' (2391,12)-(2391,13)
            number_literal: '0' (2391,14)-(2391,15)
          ;: ';' (2391,15)-(2391,16)
      comment: '/*
     * At this point, we usually expect a parameter name.
     * However, there may be a nested ${...} or $(...).
     * These say that the parameter itself is somewhere inside,
     * or that there isn't a parameter and we will get the values
     * from a command substitution itself.  In either case,
     * the current instance of paramsubst() doesn't fetch a value,
     * it just operates on what gets passed up.
     * (The first ought to have been {...}, reserving ${...}
     * for substituting a value at that point, but it's too late now.)
     */' (2393,5)-(2403,8)
      expression_statement (2404,5)-(2404,15)
        assignment_expression (2404,5)-(2404,14)
          identifier: 'idbeg' (2404,5)-(2404,10)
          =: '=' (2404,11)-(2404,12)
          identifier: 's' (2404,13)-(2404,14)
        ;: ';' (2404,14)-(2404,15)
      if_statement (2405,5)-(2485,23)
        if: 'if' (2405,5)-(2405,7)
        parenthesized_expression (2405,8)-(2406,64)
          (: '(' (2405,8)-(2405,9)
          parenthesized_expression (2405,9)-(2406,63)
            (: '(' (2405,9)-(2405,10)
            assignment_expression (2405,10)-(2406,62)
              identifier: 'subexp' (2405,10)-(2405,16)
              =: '=' (2405,17)-(2405,18)
              parenthesized_expression (2405,19)-(2406,62)
                (: '(' (2405,19)-(2405,20)
                binary_expression (2405,20)-(2406,61)
                  binary_expression (2405,20)-(2405,52)
                    binary_expression (2405,20)-(2405,36)
                      identifier: 'inbrace' (2405,20)-(2405,27)
                      &&: '&&' (2405,28)-(2405,30)
                      subscript_expression (2405,31)-(2405,36)
                        identifier: 's' (2405,31)-(2405,32)
                        [: '[' (2405,32)-(2405,33)
                        number_literal: '-1' (2405,33)-(2405,35)
                        ]: ']' (2405,35)-(2405,36)
                    &&: '&&' (2405,37)-(2405,39)
                    call_expression (2405,40)-(2405,52)
                      identifier: 'isstring' (2405,40)-(2405,48)
                      argument_list (2405,48)-(2405,52)
                        (: '(' (2405,48)-(2405,49)
                        pointer_expression (2405,49)-(2405,51)
                          *: '*' (2405,49)-(2405,50)
                          identifier: 's' (2405,50)-(2405,51)
                        ): ')' (2405,51)-(2405,52)
                  &&: '&&' (2405,53)-(2405,55)
                  parenthesized_expression (2406,6)-(2406,61)
                    (: '(' (2406,6)-(2406,7)
                    binary_expression (2406,7)-(2406,60)
                      binary_expression (2406,7)-(2406,39)
                        binary_expression (2406,7)-(2406,22)
                          subscript_expression (2406,7)-(2406,11)
                            identifier: 's' (2406,7)-(2406,8)
                            [: '[' (2406,8)-(2406,9)
                            number_literal: '1' (2406,9)-(2406,10)
                            ]: ']' (2406,10)-(2406,11)
                          ==: '==' (2406,12)-(2406,14)
                          identifier: 'Inbrace' (2406,15)-(2406,22)
                        ||: '||' (2406,23)-(2406,25)
                        binary_expression (2406,26)-(2406,39)
                          subscript_expression (2406,26)-(2406,30)
                            identifier: 's' (2406,26)-(2406,27)
                            [: '[' (2406,27)-(2406,28)
                            number_literal: '1' (2406,28)-(2406,29)
                            ]: ']' (2406,29)-(2406,30)
                          ==: '==' (2406,31)-(2406,33)
                          identifier: 'Inpar' (2406,34)-(2406,39)
                      ||: '||' (2406,40)-(2406,42)
                      binary_expression (2406,43)-(2406,60)
                        subscript_expression (2406,43)-(2406,47)
                          identifier: 's' (2406,43)-(2406,44)
                          [: '[' (2406,44)-(2406,45)
                          number_literal: '1' (2406,45)-(2406,46)
                          ]: ']' (2406,46)-(2406,47)
                        ==: '==' (2406,48)-(2406,50)
                        identifier: 'Inparmath' (2406,51)-(2406,60)
                    ): ')' (2406,60)-(2406,61)
                ): ')' (2406,61)-(2406,62)
            ): ')' (2406,62)-(2406,63)
          ): ')' (2406,63)-(2406,64)
        compound_statement (2406,65)-(2484,6)
          {: '{' (2406,65)-(2406,66)
          declaration (2407,2)-(2407,10)
            primitive_type: 'int' (2407,2)-(2407,5)
            identifier: 'sav' (2407,6)-(2407,9)
            ;: ';' (2407,9)-(2407,10)
          declaration (2408,2)-(2408,29)
            primitive_type: 'int' (2408,2)-(2408,5)
            init_declarator (2408,6)-(2408,28)
              identifier: 'quoted' (2408,6)-(2408,12)
              =: '=' (2408,13)-(2408,14)
              binary_expression (2408,15)-(2408,28)
                pointer_expression (2408,15)-(2408,17)
                  *: '*' (2408,15)-(2408,16)
                  identifier: 's' (2408,16)-(2408,17)
                ==: '==' (2408,18)-(2408,20)
                identifier: 'Qstring' (2408,21)-(2408,28)
            ;: ';' (2408,28)-(2408,29)
          declaration (2409,2)-(2409,13)
            primitive_type: 'int' (2409,2)-(2409,5)
            identifier: 'outtok' (2409,6)-(2409,12)
            ;: ';' (2409,12)-(2409,13)
          expression_statement (2411,2)-(2411,12)
            assignment_expression (2411,2)-(2411,11)
              identifier: 'val' (2411,2)-(2411,5)
              =: '=' (2411,6)-(2411,7)
              update_expression (2411,8)-(2411,11)
                identifier: 's' (2411,8)-(2411,9)
                ++: '++' (2411,9)-(2411,11)
            ;: ';' (2411,11)-(2411,12)
          switch_statement (2412,2)-(2426,3)
            switch: 'switch' (2412,2)-(2412,8)
            parenthesized_expression (2412,9)-(2412,13)
              (: '(' (2412,9)-(2412,10)
              pointer_expression (2412,10)-(2412,12)
                *: '*' (2412,10)-(2412,11)
                identifier: 's' (2412,11)-(2412,12)
              ): ')' (2412,12)-(2412,13)
            compound_statement (2412,14)-(2426,3)
              {: '{' (2412,14)-(2412,15)
              case_statement (2413,2)-(2415,12)
                case: 'case' (2413,2)-(2413,6)
                identifier: 'Inbrace' (2413,7)-(2413,14)
                :: ':' (2413,14)-(2413,15)
                expression_statement (2414,6)-(2414,24)
                  assignment_expression (2414,6)-(2414,23)
                    identifier: 'outtok' (2414,6)-(2414,12)
                    =: '=' (2414,13)-(2414,14)
                    identifier: 'Outbrace' (2414,15)-(2414,23)
                  ;: ';' (2414,23)-(2414,24)
                break_statement (2415,6)-(2415,12)
                  break: 'break' (2415,6)-(2415,11)
                  ;: ';' (2415,11)-(2415,12)
              case_statement (2416,2)-(2418,12)
                case: 'case' (2416,2)-(2416,6)
                identifier: 'Inpar' (2416,7)-(2416,12)
                :: ':' (2416,12)-(2416,13)
                expression_statement (2417,6)-(2417,22)
                  assignment_expression (2417,6)-(2417,21)
                    identifier: 'outtok' (2417,6)-(2417,12)
                    =: '=' (2417,13)-(2417,14)
                    identifier: 'Outpar' (2417,15)-(2417,21)
                  ;: ';' (2417,21)-(2417,22)
                break_statement (2418,6)-(2418,12)
                  break: 'break' (2418,6)-(2418,11)
                  ;: ';' (2418,11)-(2418,12)
              case_statement (2419,2)-(2421,12)
                case: 'case' (2419,2)-(2419,6)
                identifier: 'Inparmath' (2419,7)-(2419,16)
                :: ':' (2419,16)-(2419,17)
                expression_statement (2420,6)-(2420,26)
                  assignment_expression (2420,6)-(2420,25)
                    identifier: 'outtok' (2420,6)-(2420,12)
                    =: '=' (2420,13)-(2420,14)
                    identifier: 'Outparmath' (2420,15)-(2420,25)
                  ;: ';' (2420,25)-(2420,26)
                break_statement (2421,6)-(2421,12)
                  break: 'break' (2421,6)-(2421,11)
                  ;: ';' (2421,11)-(2421,12)
              case_statement (2422,2)-(2425,18)
                default: 'default' (2422,2)-(2422,9)
                :: ':' (2422,9)-(2422,10)
                comment: '/* "Can't Happen" (TM) */' (2423,6)-(2423,31)
                expression_statement (2424,6)-(2424,62)
                  call_expression (2424,6)-(2424,61)
                    identifier: 'DPUTS' (2424,6)-(2424,11)
                    argument_list (2424,11)-(2424,61)
                      (: '(' (2424,11)-(2424,12)
                      number_literal: '1' (2424,12)-(2424,13)
                      ,: ',' (2424,13)-(2424,14)
                      string_literal (2424,15)-(2424,60)
                        ": '"' (2424,15)-(2424,16)
                        string_content: 'Nested substitution: This Can't Happen (TM)' (2424,16)-(2424,59)
                        ": '"' (2424,59)-(2424,60)
                      ): ')' (2424,60)-(2424,61)
                  ;: ';' (2424,61)-(2424,62)
                return_statement (2425,6)-(2425,18)
                  return: 'return' (2425,6)-(2425,12)
                  null (2425,13)-(2425,17)
                    NULL: 'NULL' (2425,13)-(2425,17)
                  ;: ';' (2425,17)-(2425,18)
              }: '}' (2426,2)-(2426,3)
          expression_statement (2427,2)-(2427,29)
            call_expression (2427,2)-(2427,28)
              identifier: 'skipparens' (2427,2)-(2427,12)
              argument_list (2427,12)-(2427,28)
                (: '(' (2427,12)-(2427,13)
                pointer_expression (2427,13)-(2427,15)
                  *: '*' (2427,13)-(2427,14)
                  identifier: 's' (2427,14)-(2427,15)
                ,: ',' (2427,15)-(2427,16)
                identifier: 'outtok' (2427,17)-(2427,23)
                ,: ',' (2427,23)-(2427,24)
                pointer_expression (2427,25)-(2427,27)
                  &: '&' (2427,25)-(2427,26)
                  identifier: 's' (2427,26)-(2427,27)
                ): ')' (2427,27)-(2427,28)
            ;: ';' (2427,28)-(2427,29)
          expression_statement (2428,2)-(2428,11)
            assignment_expression (2428,2)-(2428,10)
              identifier: 'sav' (2428,2)-(2428,5)
              =: '=' (2428,6)-(2428,7)
              pointer_expression (2428,8)-(2428,10)
                *: '*' (2428,8)-(2428,9)
                identifier: 's' (2428,9)-(2428,10)
            ;: ';' (2428,10)-(2428,11)
          expression_statement (2429,2)-(2429,9)
            assignment_expression (2429,2)-(2429,8)
              pointer_expression (2429,2)-(2429,4)
                *: '*' (2429,2)-(2429,3)
                identifier: 's' (2429,3)-(2429,4)
              =: '=' (2429,5)-(2429,6)
              number_literal: '0' (2429,7)-(2429,8)
            ;: ';' (2429,8)-(2429,9)
          comment: '/*
	 * This handles arrays.  TODO: this is not the most obscure call to
	 * multsub() (see below) but even so it would be nicer to pass down
	 * and back the arrayness more rationally.  In that case, we should
	 * remove the aspar test and extract a value from an array, if
	 * necessary, when we handle (P) lower down.
	 */' (2430,2)-(2436,5)
          if_statement (2437,2)-(2444,18)
            if: 'if' (2437,2)-(2437,4)
            parenthesized_expression (2437,5)-(2438,28)
              (: '(' (2437,5)-(2437,6)
              binary_expression (2437,6)-(2438,27)
                call_expression (2437,6)-(2438,17)
                  identifier: 'multsub' (2437,6)-(2437,13)
                  argument_list (2437,13)-(2438,17)
                    (: '(' (2437,13)-(2437,14)
                    pointer_expression (2437,14)-(2437,18)
                      &: '&' (2437,14)-(2437,15)
                      identifier: 'val' (2437,15)-(2437,18)
                    ,: ',' (2437,18)-(2437,19)
                    identifier: 'PREFORK_SUBEXP' (2437,20)-(2437,34)
                    ,: ',' (2437,34)-(2437,35)
                    parenthesized_expression (2437,36)-(2437,58)
                      (: '(' (2437,36)-(2437,37)
                      conditional_expression (2437,37)-(2437,57)
                        identifier: 'aspar' (2437,37)-(2437,42)
                        ?: '?' (2437,43)-(2437,44)
                        null (2437,45)-(2437,49)
                          NULL: 'NULL' (2437,45)-(2437,49)
                        :: ':' (2437,50)-(2437,51)
                        pointer_expression (2437,52)-(2437,57)
                          &: '&' (2437,52)-(2437,53)
                          identifier: 'aval' (2437,53)-(2437,57)
                      ): ')' (2437,57)-(2437,58)
                    ,: ',' (2437,58)-(2437,59)
                    pointer_expression (2437,60)-(2437,66)
                      &: '&' (2437,60)-(2437,61)
                      identifier: 'isarr' (2437,61)-(2437,66)
                    ,: ',' (2437,66)-(2437,67)
                    null (2437,68)-(2437,72)
                      NULL: 'NULL' (2437,68)-(2437,72)
                    ,: ',' (2437,72)-(2437,73)
                    pointer_expression (2438,7)-(2438,16)
                      &: '&' (2438,7)-(2438,8)
                      identifier: 'ms_flags' (2438,8)-(2438,16)
                    ): ')' (2438,16)-(2438,17)
                &&: '&&' (2438,18)-(2438,20)
                identifier: 'quoted' (2438,21)-(2438,27)
              ): ')' (2438,27)-(2438,28)
            compound_statement (2438,29)-(2443,3)
              {: '{' (2438,29)-(2438,30)
              comment: '/* Empty quoted string --- treat as null string, not elided */' (2439,6)-(2439,68)
              expression_statement (2440,6)-(2440,17)
                assignment_expression (2440,6)-(2440,16)
                  identifier: 'isarr' (2440,6)-(2440,11)
                  =: '=' (2440,12)-(2440,13)
                  number_literal: '-1' (2440,14)-(2440,16)
                ;: ';' (2440,16)-(2440,17)
              expression_statement (2441,6)-(2441,47)
                assignment_expression (2441,6)-(2441,46)
                  identifier: 'aval' (2441,6)-(2441,10)
                  =: '=' (2441,11)-(2441,12)
                  cast_expression (2441,13)-(2441,46)
                    (: '(' (2441,13)-(2441,14)
                    type_descriptor (2441,14)-(2441,21)
                      primitive_type: 'char' (2441,14)-(2441,18)
                      abstract_pointer_declarator (2441,19)-(2441,21)
                        *: '*' (2441,19)-(2441,20)
                        abstract_pointer_declarator (2441,20)-(2441,21)
                          *: '*' (2441,20)-(2441,21)
                    ): ')' (2441,21)-(2441,22)
                    call_expression (2441,23)-(2441,46)
                      identifier: 'hcalloc' (2441,23)-(2441,30)
                      argument_list (2441,30)-(2441,46)
                        (: '(' (2441,30)-(2441,31)
                        sizeof_expression (2441,31)-(2441,45)
                          sizeof: 'sizeof' (2441,31)-(2441,37)
                          (: '(' (2441,37)-(2441,38)
                          type_descriptor (2441,38)-(2441,44)
                            primitive_type: 'char' (2441,38)-(2441,42)
                            abstract_pointer_declarator (2441,43)-(2441,44)
                              *: '*' (2441,43)-(2441,44)
                          ): ')' (2441,44)-(2441,45)
                        ): ')' (2441,45)-(2441,46)
                ;: ';' (2441,46)-(2441,47)
              expression_statement (2442,6)-(2442,16)
                assignment_expression (2442,6)-(2442,15)
                  identifier: 'aspar' (2442,6)-(2442,11)
                  =: '=' (2442,12)-(2442,13)
                  number_literal: '0' (2442,14)-(2442,15)
                ;: ';' (2442,15)-(2442,16)
              }: '}' (2443,2)-(2443,3)
            else_clause (2443,4)-(2444,18)
              else: 'else' (2443,4)-(2443,8)
              if_statement (2443,9)-(2444,18)
                if: 'if' (2443,9)-(2443,11)
                parenthesized_expression (2443,12)-(2443,19)
                  (: '(' (2443,12)-(2443,13)
                  identifier: 'aspar' (2443,13)-(2443,18)
                  ): ')' (2443,18)-(2443,19)
                expression_statement (2444,6)-(2444,18)
                  assignment_expression (2444,6)-(2444,17)
                    identifier: 'idbeg' (2444,6)-(2444,11)
                    =: '=' (2444,12)-(2444,13)
                    identifier: 'val' (2444,14)-(2444,17)
                  ;: ';' (2444,17)-(2444,18)
          if_statement (2445,2)-(2446,12)
            if: 'if' (2445,2)-(2445,4)
            parenthesized_expression (2445,5)-(2445,21)
              (: '(' (2445,5)-(2445,6)
              binary_expression (2445,6)-(2445,20)
                pointer_expression (2445,6)-(2445,10)
                  *: '*' (2445,6)-(2445,7)
                  identifier: 'val' (2445,7)-(2445,10)
                ==: '==' (2445,11)-(2445,13)
                identifier: 'Nularg' (2445,14)-(2445,20)
              ): ')' (2445,20)-(2445,21)
            expression_statement (2446,6)-(2446,12)
              update_expression (2446,6)-(2446,11)
                ++: '++' (2446,6)-(2446,8)
                identifier: 'val' (2446,8)-(2446,11)
              ;: ';' (2446,11)-(2446,12)
          expression_statement (2447,2)-(2447,11)
            assignment_expression (2447,2)-(2447,10)
              pointer_expression (2447,2)-(2447,4)
                *: '*' (2447,2)-(2447,3)
                identifier: 's' (2447,3)-(2447,4)
              =: '=' (2447,5)-(2447,6)
              identifier: 'sav' (2447,7)-(2447,10)
            ;: ';' (2447,10)-(2447,11)
          comment: '/*
	 * This tests for the second double quote in an expression
	 * like ${(f)"$(<file)"}, compare above.
	 */' (2448,2)-(2451,5)
          while_statement (2452,2)-(2453,10)
            while: 'while' (2452,2)-(2452,7)
            parenthesized_expression (2452,8)-(2452,19)
              (: '(' (2452,8)-(2452,9)
              call_expression (2452,9)-(2452,18)
                identifier: 'inull' (2452,9)-(2452,14)
                argument_list (2452,14)-(2452,18)
                  (: '(' (2452,14)-(2452,15)
                  pointer_expression (2452,15)-(2452,17)
                    *: '*' (2452,15)-(2452,16)
                    identifier: 's' (2452,16)-(2452,17)
                  ): ')' (2452,17)-(2452,18)
              ): ')' (2452,18)-(2452,19)
            expression_statement (2453,6)-(2453,10)
              update_expression (2453,6)-(2453,9)
                identifier: 's' (2453,6)-(2453,7)
                ++: '++' (2453,7)-(2453,9)
              ;: ';' (2453,9)-(2453,10)
          if_statement (2454,2)-(2482,23)
            if: 'if' (2454,2)-(2454,4)
            parenthesized_expression (2454,5)-(2454,36)
              (: '(' (2454,5)-(2454,6)
              binary_expression (2454,6)-(2454,35)
                identifier: 'ms_flags' (2454,6)-(2454,14)
                &: '&' (2454,15)-(2454,16)
                identifier: 'MULTSUB_PARAM_NAME' (2454,17)-(2454,35)
              ): ')' (2454,35)-(2454,36)
            compound_statement (2454,37)-(2481,3)
              {: '{' (2454,37)-(2454,38)
              comment: '/*
	     * Downbelow has told us this is a parameter name, e.g.
	     * ${${(P)name}...}.  We're going to behave as if
	     * we have exactly that name followed by the rest of
	     * the parameter for subscripting etc.
	     *
	     * See below for where we set the flag in the nested
	     * substitution.
	     */' (2455,6)-(2463,9)
              if_statement (2464,6)-(2471,7)
                if: 'if' (2464,6)-(2464,8)
                parenthesized_expression (2464,9)-(2464,16)
                  (: '(' (2464,9)-(2464,10)
                  identifier: 'isarr' (2464,10)-(2464,15)
                  ): ')' (2464,15)-(2464,16)
                compound_statement (2464,17)-(2471,7)
                  {: '{' (2464,17)-(2464,18)
                  if_statement (2465,3)-(2468,4)
                    if: 'if' (2465,3)-(2465,5)
                    parenthesized_expression (2465,6)-(2465,26)
                      (: '(' (2465,6)-(2465,7)
                      binary_expression (2465,7)-(2465,25)
                        subscript_expression (2465,7)-(2465,14)
                          identifier: 'aval' (2465,7)-(2465,11)
                          [: '[' (2465,11)-(2465,12)
                          number_literal: '0' (2465,12)-(2465,13)
                          ]: ']' (2465,13)-(2465,14)
                        &&: '&&' (2465,15)-(2465,17)
                        subscript_expression (2465,18)-(2465,25)
                          identifier: 'aval' (2465,18)-(2465,22)
                          [: '[' (2465,22)-(2465,23)
                          number_literal: '1' (2465,23)-(2465,24)
                          ]: ']' (2465,24)-(2465,25)
                      ): ')' (2465,25)-(2465,26)
                    compound_statement (2465,27)-(2468,4)
                      {: '{' (2465,27)-(2465,28)
                      expression_statement (2466,7)-(2466,56)
                        call_expression (2466,7)-(2466,55)
                          identifier: 'zerr' (2466,7)-(2466,11)
                          argument_list (2466,11)-(2466,55)
                            (: '(' (2466,11)-(2466,12)
                            string_literal (2466,12)-(2466,54)
                              ": '"' (2466,12)-(2466,13)
                              string_content: 'parameter name reference used with array' (2466,13)-(2466,53)
                              ": '"' (2466,53)-(2466,54)
                            ): ')' (2466,54)-(2466,55)
                        ;: ';' (2466,55)-(2466,56)
                      return_statement (2467,7)-(2467,19)
                        return: 'return' (2467,7)-(2467,13)
                        null (2467,14)-(2467,18)
                          NULL: 'NULL' (2467,14)-(2467,18)
                        ;: ';' (2467,18)-(2467,19)
                      }: '}' (2468,3)-(2468,4)
                  expression_statement (2469,3)-(2469,17)
                    assignment_expression (2469,3)-(2469,16)
                      identifier: 'val' (2469,3)-(2469,6)
                      =: '=' (2469,7)-(2469,8)
                      subscript_expression (2469,9)-(2469,16)
                        identifier: 'aval' (2469,9)-(2469,13)
                        [: '[' (2469,13)-(2469,14)
                        number_literal: '0' (2469,14)-(2469,15)
                        ]: ']' (2469,15)-(2469,16)
                    ;: ';' (2469,16)-(2469,17)
                  expression_statement (2470,3)-(2470,13)
                    assignment_expression (2470,3)-(2470,12)
                      identifier: 'isarr' (2470,3)-(2470,8)
                      =: '=' (2470,9)-(2470,10)
                      number_literal: '0' (2470,11)-(2470,12)
                    ;: ';' (2470,12)-(2470,13)
                  }: '}' (2471,6)-(2471,7)
              expression_statement (2472,6)-(2472,46)
                assignment_expression (2472,6)-(2472,45)
                  identifier: 's' (2472,6)-(2472,7)
                  =: '=' (2472,8)-(2472,9)
                  conditional_expression (2472,10)-(2472,45)
                    identifier: 'val' (2472,10)-(2472,13)
                    ?: '?' (2472,14)-(2472,15)
                    call_expression (2472,16)-(2472,30)
                      identifier: 'dyncat' (2472,16)-(2472,22)
                      argument_list (2472,22)-(2472,30)
                        (: '(' (2472,22)-(2472,23)
                        identifier: 'val' (2472,23)-(2472,26)
                        ,: ',' (2472,26)-(2472,27)
                        identifier: 's' (2472,28)-(2472,29)
                        ): ')' (2472,29)-(2472,30)
                    :: ':' (2472,31)-(2472,32)
                    call_expression (2472,33)-(2472,45)
                      identifier: 'dupstring' (2472,33)-(2472,42)
                      argument_list (2472,42)-(2472,45)
                        (: '(' (2472,42)-(2472,43)
                        identifier: 's' (2472,43)-(2472,44)
                        ): ')' (2472,44)-(2472,45)
                ;: ';' (2472,45)-(2472,46)
              comment: '/* Now behave po-faced as if it was always like that... */' (2473,6)-(2473,64)
              expression_statement (2474,6)-(2474,17)
                assignment_expression (2474,6)-(2474,16)
                  identifier: 'subexp' (2474,6)-(2474,12)
                  =: '=' (2474,13)-(2474,14)
                  number_literal: '0' (2474,15)-(2474,16)
                ;: ';' (2474,16)-(2474,17)
              comment: '/*
	     * If this is a (P) (first test) and at the top level
	     * (second test) we can't rely on the caller fetching
	     * the result from the pending aspar.  So do it below.
	     */' (2475,6)-(2479,9)
              expression_statement (2480,6)-(2480,59)
                assignment_expression (2480,6)-(2480,58)
                  identifier: 'fetch_needed' (2480,6)-(2480,18)
                  =: '=' (2480,19)-(2480,20)
                  binary_expression (2480,21)-(2480,58)
                    identifier: 'aspar' (2480,21)-(2480,26)
                    &&: '&&' (2480,27)-(2480,29)
                    unary_expression (2480,30)-(2480,58)
                      !: '!' (2480,30)-(2480,31)
                      parenthesized_expression (2480,31)-(2480,58)
                        (: '(' (2480,31)-(2480,32)
                        binary_expression (2480,32)-(2480,57)
                          identifier: 'pf_flags' (2480,32)-(2480,40)
                          &: '&' (2480,41)-(2480,42)
                          identifier: 'PREFORK_SUBEXP' (2480,43)-(2480,57)
                        ): ')' (2480,57)-(2480,58)
                ;: ';' (2480,58)-(2480,59)
              }: '}' (2481,2)-(2481,3)
            else_clause (2481,4)-(2482,23)
              else: 'else' (2481,4)-(2481,8)
              expression_statement (2482,6)-(2482,23)
                assignment_expression (2482,6)-(2482,22)
                  identifier: 'fetch_needed' (2482,6)-(2482,18)
                  =: '=' (2482,19)-(2482,20)
                  number_literal: '0' (2482,21)-(2482,22)
                ;: ';' (2482,22)-(2482,23)
          comment: '/* any initial aspar fetch already done */' (2482,25)-(2482,67)
          expression_statement (2483,2)-(2483,19)
            assignment_expression (2483,2)-(2483,18)
              identifier: 'v' (2483,2)-(2483,3)
              =: '=' (2483,4)-(2483,5)
              cast_expression (2483,6)-(2483,18)
                (: '(' (2483,6)-(2483,7)
                type_descriptor (2483,7)-(2483,12)
                  type_identifier: 'Value' (2483,7)-(2483,12)
                ): ')' (2483,12)-(2483,13)
                null (2483,14)-(2483,18)
                  NULL: 'NULL' (2483,14)-(2483,18)
            ;: ';' (2483,18)-(2483,19)
          }: '}' (2484,5)-(2484,6)
        else_clause (2484,7)-(2485,23)
          else: 'else' (2484,7)-(2484,11)
          expression_statement (2485,2)-(2485,23)
            assignment_expression (2485,2)-(2485,22)
              identifier: 'fetch_needed' (2485,2)-(2485,14)
              =: '=' (2485,15)-(2485,16)
              identifier: 'aspar' (2485,17)-(2485,22)
            ;: ';' (2485,22)-(2485,23)
      comment: '/* aspar fetch still needed */' (2485,24)-(2485,54)
      if_statement (2486,5)-(2501,6)
        if: 'if' (2486,5)-(2486,7)
        parenthesized_expression (2486,8)-(2486,22)
          (: '(' (2486,8)-(2486,9)
          identifier: 'fetch_needed' (2486,9)-(2486,21)
          ): ')' (2486,21)-(2486,22)
        compound_statement (2486,23)-(2501,6)
          {: '{' (2486,23)-(2486,24)
          comment: '/*
	 * No subexpression, but in any case the value is going
	 * to give us the name of a parameter on which we do
	 * our remaining processing.  In other words, this
	 * makes ${(P)param} work like ${(P)${param}}.  (Probably
	 * better looked at, this is the basic code for ${(P)param}
	 * and it's been kludged into the subexp code because no
	 * opportunity for a kludge has been neglected.)
	 */' (2487,2)-(2495,5)
          if_statement (2496,2)-(2500,17)
            if: 'if' (2496,2)-(2496,4)
            parenthesized_expression (2496,5)-(2496,64)
              (: '(' (2496,5)-(2496,6)
              parenthesized_expression (2496,6)-(2496,63)
                (: '(' (2496,6)-(2496,7)
                assignment_expression (2496,7)-(2496,62)
                  identifier: 'v' (2496,7)-(2496,8)
                  =: '=' (2496,9)-(2496,10)
                  call_expression (2496,11)-(2496,62)
                    identifier: 'fetchvalue' (2496,11)-(2496,21)
                    argument_list (2496,21)-(2496,62)
                      (: '(' (2496,21)-(2496,22)
                      pointer_expression (2496,22)-(2496,27)
                        &: '&' (2496,22)-(2496,23)
                        identifier: 'vbuf' (2496,23)-(2496,27)
                      ,: ',' (2496,27)-(2496,28)
                      pointer_expression (2496,29)-(2496,31)
                        &: '&' (2496,29)-(2496,30)
                        identifier: 's' (2496,30)-(2496,31)
                      ,: ',' (2496,31)-(2496,32)
                      number_literal: '1' (2496,33)-(2496,34)
                      ,: ',' (2496,34)-(2496,35)
                      parenthesized_expression (2496,36)-(2496,61)
                        (: '(' (2496,36)-(2496,37)
                        conditional_expression (2496,37)-(2496,60)
                          identifier: 'qt' (2496,37)-(2496,39)
                          ?: '?' (2496,40)-(2496,41)
                          identifier: 'SCANPM_DQUOTED' (2496,42)-(2496,56)
                          :: ':' (2496,57)-(2496,58)
                          number_literal: '0' (2496,59)-(2496,60)
                        ): ')' (2496,60)-(2496,61)
                      ): ')' (2496,61)-(2496,62)
                ): ')' (2496,62)-(2496,63)
              ): ')' (2496,63)-(2496,64)
            compound_statement (2496,65)-(2499,3)
              {: '{' (2496,65)-(2496,66)
              expression_statement (2497,6)-(2497,35)
                assignment_expression (2497,6)-(2497,34)
                  identifier: 'val' (2497,6)-(2497,9)
                  =: '=' (2497,10)-(2497,11)
                  assignment_expression (2497,12)-(2497,34)
                    identifier: 'idbeg' (2497,12)-(2497,17)
                    =: '=' (2497,18)-(2497,19)
                    call_expression (2497,20)-(2497,34)
                      identifier: 'getstrvalue' (2497,20)-(2497,31)
                      argument_list (2497,31)-(2497,34)
                        (: '(' (2497,31)-(2497,32)
                        identifier: 'v' (2497,32)-(2497,33)
                        ): ')' (2497,33)-(2497,34)
                ;: ';' (2497,34)-(2497,35)
              expression_statement (2498,6)-(2498,17)
                assignment_expression (2498,6)-(2498,16)
                  identifier: 'subexp' (2498,6)-(2498,12)
                  =: '=' (2498,13)-(2498,14)
                  number_literal: '1' (2498,15)-(2498,16)
                ;: ';' (2498,16)-(2498,17)
              }: '}' (2499,2)-(2499,3)
            else_clause (2499,4)-(2500,17)
              else: 'else' (2499,4)-(2499,8)
              expression_statement (2500,6)-(2500,17)
                assignment_expression (2500,6)-(2500,16)
                  identifier: 'vunset' (2500,6)-(2500,12)
                  =: '=' (2500,13)-(2500,14)
                  number_literal: '1' (2500,15)-(2500,16)
                ;: ';' (2500,16)-(2500,17)
          }: '}' (2501,5)-(2501,6)
      if_statement (2502,5)-(2512,6)
        if: 'if' (2502,5)-(2502,7)
        parenthesized_expression (2502,8)-(2502,46)
          (: '(' (2502,8)-(2502,9)
          binary_expression (2502,9)-(2502,45)
            identifier: 'aspar' (2502,9)-(2502,14)
            &&: '&&' (2502,15)-(2502,17)
            parenthesized_expression (2502,18)-(2502,45)
              (: '(' (2502,18)-(2502,19)
              binary_expression (2502,19)-(2502,44)
                identifier: 'pf_flags' (2502,19)-(2502,27)
                &: '&' (2502,28)-(2502,29)
                identifier: 'PREFORK_SUBEXP' (2502,30)-(2502,44)
              ): ')' (2502,44)-(2502,45)
          ): ')' (2502,45)-(2502,46)
        compound_statement (2502,47)-(2512,6)
          {: '{' (2502,47)-(2502,48)
          comment: '/*
	 * This is the inner handling for the case referred to above
	 * where we have something like ${${(P)name}...}.
	 *
	 * Treat this as a normal value here; all transformations on
	 * result are in outer instance.
	 */' (2503,2)-(2509,5)
          expression_statement (2510,2)-(2510,12)
            assignment_expression (2510,2)-(2510,11)
              identifier: 'aspar' (2510,2)-(2510,7)
              =: '=' (2510,8)-(2510,9)
              number_literal: '0' (2510,10)-(2510,11)
            ;: ';' (2510,11)-(2510,12)
          expression_statement (2511,2)-(2511,35)
            assignment_expression (2511,2)-(2511,34)
              pointer_expression (2511,2)-(2511,12)
                *: '*' (2511,2)-(2511,3)
                identifier: 'ret_flags' (2511,3)-(2511,12)
              |=: '|=' (2511,13)-(2511,15)
              identifier: 'MULTSUB_PARAM_NAME' (2511,16)-(2511,34)
            ;: ';' (2511,34)-(2511,35)
          }: '}' (2512,5)-(2512,6)
      comment: '/*
     * We need to retrieve a value either if we haven't already
     * got it from a subexpression, or if the processing so
     * far has just yielded us a parameter name to be processed
     * with (P).
     */' (2513,5)-(2518,8)
      if_statement (2519,5)-(2614,6)
        if: 'if' (2519,5)-(2519,7)
        parenthesized_expression (2519,8)-(2519,26)
          (: '(' (2519,8)-(2519,9)
          binary_expression (2519,9)-(2519,25)
            unary_expression (2519,9)-(2519,16)
              !: '!' (2519,9)-(2519,10)
              identifier: 'subexp' (2519,10)-(2519,16)
            ||: '||' (2519,17)-(2519,19)
            identifier: 'aspar' (2519,20)-(2519,25)
          ): ')' (2519,25)-(2519,26)
        compound_statement (2519,27)-(2614,6)
          {: '{' (2519,27)-(2519,28)
          declaration (2520,2)-(2520,17)
            primitive_type: 'char' (2520,2)-(2520,6)
            init_declarator (2520,7)-(2520,16)
              pointer_declarator (2520,7)-(2520,10)
                *: '*' (2520,7)-(2520,8)
                identifier: 'ov' (2520,8)-(2520,10)
              =: '=' (2520,11)-(2520,12)
              identifier: 'val' (2520,13)-(2520,16)
            ;: ';' (2520,16)-(2520,17)
          declaration (2521,2)-(2521,32)
            primitive_type: 'int' (2521,2)-(2521,5)
            init_declarator (2521,6)-(2521,31)
              identifier: 'scanflags' (2521,6)-(2521,15)
              =: '=' (2521,16)-(2521,17)
              binary_expression (2521,18)-(2521,31)
                identifier: 'hkeys' (2521,18)-(2521,23)
                |: '|' (2521,24)-(2521,25)
                identifier: 'hvals' (2521,26)-(2521,31)
            ;: ';' (2521,31)-(2521,32)
          if_statement (2522,2)-(2523,36)
            if: 'if' (2522,2)-(2522,4)
            parenthesized_expression (2522,5)-(2522,13)
              (: '(' (2522,5)-(2522,6)
              identifier: 'arrasg' (2522,6)-(2522,12)
              ): ')' (2522,12)-(2522,13)
            expression_statement (2523,6)-(2523,36)
              assignment_expression (2523,6)-(2523,35)
                identifier: 'scanflags' (2523,6)-(2523,15)
                |=: '|=' (2523,16)-(2523,18)
                identifier: 'SCANPM_ASSIGNING' (2523,19)-(2523,35)
              ;: ';' (2523,35)-(2523,36)
          if_statement (2524,2)-(2525,34)
            if: 'if' (2524,2)-(2524,4)
            parenthesized_expression (2524,5)-(2524,9)
              (: '(' (2524,5)-(2524,6)
              identifier: 'qt' (2524,6)-(2524,8)
              ): ')' (2524,8)-(2524,9)
            expression_statement (2525,6)-(2525,34)
              assignment_expression (2525,6)-(2525,33)
                identifier: 'scanflags' (2525,6)-(2525,15)
                |=: '|=' (2525,16)-(2525,18)
                identifier: 'SCANPM_DQUOTED' (2525,19)-(2525,33)
              ;: ';' (2525,33)-(2525,34)
          if_statement (2526,2)-(2527,35)
            if: 'if' (2526,2)-(2526,4)
            parenthesized_expression (2526,5)-(2526,13)
              (: '(' (2526,5)-(2526,6)
              identifier: 'chkset' (2526,6)-(2526,12)
              ): ')' (2526,12)-(2526,13)
            expression_statement (2527,6)-(2527,35)
              assignment_expression (2527,6)-(2527,34)
                identifier: 'scanflags' (2527,6)-(2527,15)
                |=: '|=' (2527,16)-(2527,18)
                identifier: 'SCANPM_CHECKING' (2527,19)-(2527,34)
              ;: ';' (2527,34)-(2527,35)
          comment: '/*
	 * Second argument: decide whether to use the subexpression or
	 *   the string next on the line as the parameter name.
	 * Third argument:  decide how processing for brackets
	 *   1 means full processing
	 *   -1 appears to mean something along the lines of
	 *     only handle single digits and don't handle brackets.
	 *     I *think* (but it's really only a guess) that this
	 *     is used by the test below the wantt handling, so
	 *     that in certain cases we handle brackets there.
	 *   0 would apparently mean something like we know we
	 *     should have the name of a scalar and we get cross
	 *     if there's anything present which disagrees with that
	 * but you will search fetchvalue() in vain for comments on this.
	 * Fourth argument gives flags to do with keys, values, quoting,
	 * assigning depending on context and parameter flags.
	 *
	 * This is the last mention of subexp, so presumably this
	 * is what the code which makes sure subexp is set if aspar (the
	 * (P) flag) is set.  I *think* what's going on here is the
	 * second argument is for both input and output: with
	 * subexp, we only want the input effect, whereas normally
	 * we let fetchvalue set the main string pointer s to
	 * the end of the bit it's fetched.
	 */' (2528,2)-(2552,5)
          if_statement (2553,2)-(2559,17)
            if: 'if' (2553,2)-(2553,4)
            parenthesized_expression (2553,5)-(2558,33)
              (: '(' (2553,5)-(2553,6)
              binary_expression (2553,6)-(2558,32)
                binary_expression (2553,6)-(2557,47)
                  unary_expression (2553,6)-(2556,20)
                    !: '!' (2553,6)-(2553,7)
                    parenthesized_expression (2553,7)-(2556,20)
                      (: '(' (2553,7)-(2553,8)
                      assignment_expression (2553,8)-(2556,19)
                        identifier: 'v' (2553,8)-(2553,9)
                        =: '=' (2553,10)-(2553,11)
                        call_expression (2553,12)-(2556,19)
                          identifier: 'fetchvalue' (2553,12)-(2553,22)
                          argument_list (2553,22)-(2556,19)
                            (: '(' (2553,22)-(2553,23)
                            pointer_expression (2553,23)-(2553,28)
                              &: '&' (2553,23)-(2553,24)
                              identifier: 'vbuf' (2553,24)-(2553,28)
                            ,: ',' (2553,28)-(2553,29)
                            parenthesized_expression (2553,30)-(2553,49)
                              (: '(' (2553,30)-(2553,31)
                              conditional_expression (2553,31)-(2553,48)
                                identifier: 'subexp' (2553,31)-(2553,37)
                                ?: '?' (2553,38)-(2553,39)
                                pointer_expression (2553,40)-(2553,43)
                                  &: '&' (2553,40)-(2553,41)
                                  identifier: 'ov' (2553,41)-(2553,43)
                                :: ':' (2553,44)-(2553,45)
                                pointer_expression (2553,46)-(2553,48)
                                  &: '&' (2553,46)-(2553,47)
                                  identifier: 's' (2553,47)-(2553,48)
                              ): ')' (2553,48)-(2553,49)
                            ,: ',' (2553,49)-(2553,50)
                            parenthesized_expression (2554,9)-(2555,51)
                              (: '(' (2554,9)-(2554,10)
                              conditional_expression (2554,10)-(2555,50)
                                identifier: 'wantt' (2554,10)-(2554,15)
                                ?: '?' (2554,16)-(2554,17)
                                number_literal: '-1' (2554,18)-(2554,20)
                                :: ':' (2554,21)-(2554,22)
                                parenthesized_expression (2555,10)-(2555,50)
                                  (: '(' (2555,10)-(2555,11)
                                  conditional_expression (2555,11)-(2555,49)
                                    parenthesized_expression (2555,11)-(2555,40)
                                      (: '(' (2555,11)-(2555,12)
                                      binary_expression (2555,12)-(2555,39)
                                        call_expression (2555,12)-(2555,28)
                                          identifier: 'unset' (2555,12)-(2555,17)
                                          argument_list (2555,17)-(2555,28)
                                            (: '(' (2555,17)-(2555,18)
                                            identifier: 'KSHARRAYS' (2555,18)-(2555,27)
                                            ): ')' (2555,27)-(2555,28)
                                        ||: '||' (2555,29)-(2555,31)
                                        identifier: 'inbrace' (2555,32)-(2555,39)
                                      ): ')' (2555,39)-(2555,40)
                                    ?: '?' (2555,41)-(2555,42)
                                    number_literal: '1' (2555,43)-(2555,44)
                                    :: ':' (2555,45)-(2555,46)
                                    number_literal: '-1' (2555,47)-(2555,49)
                                  ): ')' (2555,49)-(2555,50)
                              ): ')' (2555,50)-(2555,51)
                            ,: ',' (2555,51)-(2555,52)
                            identifier: 'scanflags' (2556,9)-(2556,18)
                            ): ')' (2556,18)-(2556,19)
                      ): ')' (2556,19)-(2556,20)
                  ||: '||' (2556,21)-(2556,23)
                  parenthesized_expression (2557,6)-(2557,47)
                    (: '(' (2557,6)-(2557,7)
                    binary_expression (2557,7)-(2557,46)
                      field_expression (2557,7)-(2557,12)
                        identifier: 'v' (2557,7)-(2557,8)
                        ->: '->' (2557,8)-(2557,10)
                        field_identifier: 'pm' (2557,10)-(2557,12)
                      &&: '&&' (2557,13)-(2557,15)
                      parenthesized_expression (2557,16)-(2557,46)
                        (: '(' (2557,16)-(2557,17)
                        binary_expression (2557,17)-(2557,45)
                          field_expression (2557,17)-(2557,34)
                            field_expression (2557,17)-(2557,28)
                              field_expression (2557,17)-(2557,22)
                                identifier: 'v' (2557,17)-(2557,18)
                                ->: '->' (2557,18)-(2557,20)
                                field_identifier: 'pm' (2557,20)-(2557,22)
                              ->: '->' (2557,22)-(2557,24)
                              field_identifier: 'node' (2557,24)-(2557,28)
                            .: '.' (2557,28)-(2557,29)
                            field_identifier: 'flags' (2557,29)-(2557,34)
                          &: '&' (2557,35)-(2557,36)
                          identifier: 'PM_UNSET' (2557,37)-(2557,45)
                        ): ')' (2557,45)-(2557,46)
                    ): ')' (2557,46)-(2557,47)
                ||: '||' (2557,48)-(2557,50)
                parenthesized_expression (2558,6)-(2558,32)
                  (: '(' (2558,6)-(2558,7)
                  binary_expression (2558,7)-(2558,31)
                    field_expression (2558,7)-(2558,15)
                      identifier: 'v' (2558,7)-(2558,8)
                      ->: '->' (2558,8)-(2558,10)
                      field_identifier: 'flags' (2558,10)-(2558,15)
                    &: '&' (2558,16)-(2558,17)
                    identifier: 'VALFLAG_EMPTY' (2558,18)-(2558,31)
                  ): ')' (2558,31)-(2558,32)
              ): ')' (2558,32)-(2558,33)
            expression_statement (2559,6)-(2559,17)
              assignment_expression (2559,6)-(2559,16)
                identifier: 'vunset' (2559,6)-(2559,12)
                =: '=' (2559,13)-(2559,14)
                number_literal: '1' (2559,15)-(2559,16)
              ;: ';' (2559,16)-(2559,17)
          if_statement (2561,2)-(2613,3)
            if: 'if' (2561,2)-(2561,4)
            parenthesized_expression (2561,5)-(2561,12)
              (: '(' (2561,5)-(2561,6)
              identifier: 'wantt' (2561,6)-(2561,11)
              ): ')' (2561,11)-(2561,12)
            compound_statement (2561,13)-(2613,3)
              {: '{' (2561,13)-(2561,14)
              comment: '/*
	     * Handle the (t) flag: value now becomes the type
	     * information for the parameter.
	     */' (2562,6)-(2565,9)
              if_statement (2566,6)-(2609,23)
                if: 'if' (2566,6)-(2566,8)
                parenthesized_expression (2566,9)-(2567,44)
                  (: '(' (2566,9)-(2566,10)
                  binary_expression (2566,10)-(2567,43)
                    binary_expression (2566,10)-(2566,20)
                      identifier: 'v' (2566,10)-(2566,11)
                      &&: '&&' (2566,12)-(2566,14)
                      field_expression (2566,15)-(2566,20)
                        identifier: 'v' (2566,15)-(2566,16)
                        ->: '->' (2566,16)-(2566,18)
                        field_identifier: 'pm' (2566,18)-(2566,20)
                    &&: '&&' (2566,21)-(2566,23)
                    parenthesized_expression (2566,24)-(2567,43)
                      (: '(' (2566,24)-(2566,25)
                      binary_expression (2566,25)-(2567,42)
                        parenthesized_expression (2566,25)-(2566,58)
                          (: '(' (2566,25)-(2566,26)
                          binary_expression (2566,26)-(2566,57)
                            field_expression (2566,26)-(2566,43)
                              field_expression (2566,26)-(2566,37)
                                field_expression (2566,26)-(2566,31)
                                  identifier: 'v' (2566,26)-(2566,27)
                                  ->: '->' (2566,27)-(2566,29)
                                  field_identifier: 'pm' (2566,29)-(2566,31)
                                ->: '->' (2566,31)-(2566,33)
                                field_identifier: 'node' (2566,33)-(2566,37)
                              .: '.' (2566,37)-(2566,38)
                              field_identifier: 'flags' (2566,38)-(2566,43)
                            &: '&' (2566,44)-(2566,45)
                            identifier: 'PM_DECLARED' (2566,46)-(2566,57)
                          ): ')' (2566,57)-(2566,58)
                        ||: '||' (2566,59)-(2566,61)
                        unary_expression (2567,11)-(2567,42)
                          !: '!' (2567,11)-(2567,12)
                          parenthesized_expression (2567,12)-(2567,42)
                            (: '(' (2567,12)-(2567,13)
                            binary_expression (2567,13)-(2567,41)
                              field_expression (2567,13)-(2567,30)
                                field_expression (2567,13)-(2567,24)
                                  field_expression (2567,13)-(2567,18)
                                    identifier: 'v' (2567,13)-(2567,14)
                                    ->: '->' (2567,14)-(2567,16)
                                    field_identifier: 'pm' (2567,16)-(2567,18)
                                  ->: '->' (2567,18)-(2567,20)
                                  field_identifier: 'node' (2567,20)-(2567,24)
                                .: '.' (2567,24)-(2567,25)
                                field_identifier: 'flags' (2567,25)-(2567,30)
                              &: '&' (2567,31)-(2567,32)
                              identifier: 'PM_UNSET' (2567,33)-(2567,41)
                            ): ')' (2567,41)-(2567,42)
                      ): ')' (2567,42)-(2567,43)
                  ): ')' (2567,43)-(2567,44)
                compound_statement (2567,45)-(2608,7)
                  {: '{' (2567,45)-(2567,46)
                  declaration (2568,3)-(2568,29)
                    primitive_type: 'int' (2568,3)-(2568,6)
                    init_declarator (2568,7)-(2568,28)
                      identifier: 'f' (2568,7)-(2568,8)
                      =: '=' (2568,9)-(2568,10)
                      field_expression (2568,11)-(2568,28)
                        field_expression (2568,11)-(2568,22)
                          field_expression (2568,11)-(2568,16)
                            identifier: 'v' (2568,11)-(2568,12)
                            ->: '->' (2568,12)-(2568,14)
                            field_identifier: 'pm' (2568,14)-(2568,16)
                          ->: '->' (2568,16)-(2568,18)
                          field_identifier: 'node' (2568,18)-(2568,22)
                        .: '.' (2568,22)-(2568,23)
                        field_identifier: 'flags' (2568,23)-(2568,28)
                    ;: ';' (2568,28)-(2568,29)
                  switch_statement (2570,3)-(2577,4)
                    switch: 'switch' (2570,3)-(2570,9)
                    parenthesized_expression (2570,10)-(2570,22)
                      (: '(' (2570,10)-(2570,11)
                      call_expression (2570,11)-(2570,21)
                        identifier: 'PM_TYPE' (2570,11)-(2570,18)
                        argument_list (2570,18)-(2570,21)
                          (: '(' (2570,18)-(2570,19)
                          identifier: 'f' (2570,19)-(2570,20)
                          ): ')' (2570,20)-(2570,21)
                      ): ')' (2570,21)-(2570,22)
                    compound_statement (2570,23)-(2577,4)
                      {: '{' (2570,23)-(2570,24)
                      case_statement (2571,3)-(2571,42)
                        case: 'case' (2571,3)-(2571,7)
                        identifier: 'PM_SCALAR' (2571,8)-(2571,17)
                        :: ':' (2571,17)-(2571,18)
                        expression_statement (2571,20)-(2571,35)
                          assignment_expression (2571,20)-(2571,34)
                            identifier: 'val' (2571,20)-(2571,23)
                            =: '=' (2571,24)-(2571,25)
                            string_literal (2571,26)-(2571,34)
                              ": '"' (2571,26)-(2571,27)
                              string_content: 'scalar' (2571,27)-(2571,33)
                              ": '"' (2571,33)-(2571,34)
                          ;: ';' (2571,34)-(2571,35)
                        break_statement (2571,36)-(2571,42)
                          break: 'break' (2571,36)-(2571,41)
                          ;: ';' (2571,41)-(2571,42)
                      case_statement (2572,3)-(2572,41)
                        case: 'case' (2572,3)-(2572,7)
                        identifier: 'PM_ARRAY' (2572,8)-(2572,16)
                        :: ':' (2572,16)-(2572,17)
                        expression_statement (2572,20)-(2572,34)
                          assignment_expression (2572,20)-(2572,33)
                            identifier: 'val' (2572,20)-(2572,23)
                            =: '=' (2572,24)-(2572,25)
                            string_literal (2572,26)-(2572,33)
                              ": '"' (2572,26)-(2572,27)
                              string_content: 'array' (2572,27)-(2572,32)
                              ": '"' (2572,32)-(2572,33)
                          ;: ';' (2572,33)-(2572,34)
                        break_statement (2572,35)-(2572,41)
                          break: 'break' (2572,35)-(2572,40)
                          ;: ';' (2572,40)-(2572,41)
                      case_statement (2573,3)-(2573,43)
                        case: 'case' (2573,3)-(2573,7)
                        identifier: 'PM_INTEGER' (2573,8)-(2573,18)
                        :: ':' (2573,18)-(2573,19)
                        expression_statement (2573,20)-(2573,36)
                          assignment_expression (2573,20)-(2573,35)
                            identifier: 'val' (2573,20)-(2573,23)
                            =: '=' (2573,24)-(2573,25)
                            string_literal (2573,26)-(2573,35)
                              ": '"' (2573,26)-(2573,27)
                              string_content: 'integer' (2573,27)-(2573,34)
                              ": '"' (2573,34)-(2573,35)
                          ;: ';' (2573,35)-(2573,36)
                        break_statement (2573,37)-(2573,43)
                          break: 'break' (2573,37)-(2573,42)
                          ;: ';' (2573,42)-(2573,43)
                      case_statement (2574,3)-(2574,18)
                        case: 'case' (2574,3)-(2574,7)
                        identifier: 'PM_EFLOAT' (2574,8)-(2574,17)
                        :: ':' (2574,17)-(2574,18)
                      case_statement (2575,3)-(2575,41)
                        case: 'case' (2575,3)-(2575,7)
                        identifier: 'PM_FFLOAT' (2575,8)-(2575,17)
                        :: ':' (2575,17)-(2575,18)
                        expression_statement (2575,20)-(2575,34)
                          assignment_expression (2575,20)-(2575,33)
                            identifier: 'val' (2575,20)-(2575,23)
                            =: '=' (2575,24)-(2575,25)
                            string_literal (2575,26)-(2575,33)
                              ": '"' (2575,26)-(2575,27)
                              string_content: 'float' (2575,27)-(2575,32)
                              ": '"' (2575,32)-(2575,33)
                          ;: ';' (2575,33)-(2575,34)
                        break_statement (2575,35)-(2575,41)
                          break: 'break' (2575,35)-(2575,40)
                          ;: ';' (2575,40)-(2575,41)
                      case_statement (2576,3)-(2576,47)
                        case: 'case' (2576,3)-(2576,7)
                        identifier: 'PM_HASHED' (2576,8)-(2576,17)
                        :: ':' (2576,17)-(2576,18)
                        expression_statement (2576,20)-(2576,40)
                          assignment_expression (2576,20)-(2576,39)
                            identifier: 'val' (2576,20)-(2576,23)
                            =: '=' (2576,24)-(2576,25)
                            string_literal (2576,26)-(2576,39)
                              ": '"' (2576,26)-(2576,27)
                              string_content: 'association' (2576,27)-(2576,38)
                              ": '"' (2576,38)-(2576,39)
                          ;: ';' (2576,39)-(2576,40)
                        break_statement (2576,41)-(2576,47)
                          break: 'break' (2576,41)-(2576,46)
                          ;: ';' (2576,46)-(2576,47)
                      }: '}' (2577,3)-(2577,4)
                  expression_statement (2578,3)-(2578,24)
                    assignment_expression (2578,3)-(2578,23)
                      identifier: 'val' (2578,3)-(2578,6)
                      =: '=' (2578,7)-(2578,8)
                      call_expression (2578,9)-(2578,23)
                        identifier: 'dupstring' (2578,9)-(2578,18)
                        argument_list (2578,18)-(2578,23)
                          (: '(' (2578,18)-(2578,19)
                          identifier: 'val' (2578,19)-(2578,22)
                          ): ')' (2578,22)-(2578,23)
                    ;: ';' (2578,23)-(2578,24)
                  if_statement (2579,3)-(2580,35)
                    if: 'if' (2579,3)-(2579,5)
                    parenthesized_expression (2579,6)-(2579,20)
                      (: '(' (2579,6)-(2579,7)
                      field_expression (2579,7)-(2579,19)
                        field_expression (2579,7)-(2579,12)
                          identifier: 'v' (2579,7)-(2579,8)
                          ->: '->' (2579,8)-(2579,10)
                          field_identifier: 'pm' (2579,10)-(2579,12)
                        ->: '->' (2579,12)-(2579,14)
                        field_identifier: 'level' (2579,14)-(2579,19)
                      ): ')' (2579,19)-(2579,20)
                    expression_statement (2580,7)-(2580,35)
                      assignment_expression (2580,7)-(2580,34)
                        identifier: 'val' (2580,7)-(2580,10)
                        =: '=' (2580,11)-(2580,12)
                        call_expression (2580,13)-(2580,34)
                          identifier: 'dyncat' (2580,13)-(2580,19)
                          argument_list (2580,19)-(2580,34)
                            (: '(' (2580,19)-(2580,20)
                            identifier: 'val' (2580,20)-(2580,23)
                            ,: ',' (2580,23)-(2580,24)
                            string_literal (2580,25)-(2580,33)
                              ": '"' (2580,25)-(2580,26)
                              string_content: '-local' (2580,26)-(2580,32)
                              ": '"' (2580,32)-(2580,33)
                            ): ')' (2580,33)-(2580,34)
                      ;: ';' (2580,34)-(2580,35)
                  if_statement (2581,3)-(2582,34)
                    if: 'if' (2581,3)-(2581,5)
                    parenthesized_expression (2581,6)-(2581,19)
                      (: '(' (2581,6)-(2581,7)
                      binary_expression (2581,7)-(2581,18)
                        identifier: 'f' (2581,7)-(2581,8)
                        &: '&' (2581,9)-(2581,10)
                        identifier: 'PM_LEFT' (2581,11)-(2581,18)
                      ): ')' (2581,18)-(2581,19)
                    expression_statement (2582,7)-(2582,34)
                      assignment_expression (2582,7)-(2582,33)
                        identifier: 'val' (2582,7)-(2582,10)
                        =: '=' (2582,11)-(2582,12)
                        call_expression (2582,13)-(2582,33)
                          identifier: 'dyncat' (2582,13)-(2582,19)
                          argument_list (2582,19)-(2582,33)
                            (: '(' (2582,19)-(2582,20)
                            identifier: 'val' (2582,20)-(2582,23)
                            ,: ',' (2582,23)-(2582,24)
                            string_literal (2582,25)-(2582,32)
                              ": '"' (2582,25)-(2582,26)
                              string_content: '-left' (2582,26)-(2582,31)
                              ": '"' (2582,31)-(2582,32)
                            ): ')' (2582,32)-(2582,33)
                      ;: ';' (2582,33)-(2582,34)
                  if_statement (2583,3)-(2584,42)
                    if: 'if' (2583,3)-(2583,5)
                    parenthesized_expression (2583,6)-(2583,22)
                      (: '(' (2583,6)-(2583,7)
                      binary_expression (2583,7)-(2583,21)
                        identifier: 'f' (2583,7)-(2583,8)
                        &: '&' (2583,9)-(2583,10)
                        identifier: 'PM_RIGHT_B' (2583,11)-(2583,21)
                      ): ')' (2583,21)-(2583,22)
                    expression_statement (2584,7)-(2584,42)
                      assignment_expression (2584,7)-(2584,41)
                        identifier: 'val' (2584,7)-(2584,10)
                        =: '=' (2584,11)-(2584,12)
                        call_expression (2584,13)-(2584,41)
                          identifier: 'dyncat' (2584,13)-(2584,19)
                          argument_list (2584,19)-(2584,41)
                            (: '(' (2584,19)-(2584,20)
                            identifier: 'val' (2584,20)-(2584,23)
                            ,: ',' (2584,23)-(2584,24)
                            string_literal (2584,25)-(2584,40)
                              ": '"' (2584,25)-(2584,26)
                              string_content: '-right_blanks' (2584,26)-(2584,39)
                              ": '"' (2584,39)-(2584,40)
                            ): ')' (2584,40)-(2584,41)
                      ;: ';' (2584,41)-(2584,42)
                  if_statement (2585,3)-(2586,41)
                    if: 'if' (2585,3)-(2585,5)
                    parenthesized_expression (2585,6)-(2585,22)
                      (: '(' (2585,6)-(2585,7)
                      binary_expression (2585,7)-(2585,21)
                        identifier: 'f' (2585,7)-(2585,8)
                        &: '&' (2585,9)-(2585,10)
                        identifier: 'PM_RIGHT_Z' (2585,11)-(2585,21)
                      ): ')' (2585,21)-(2585,22)
                    expression_statement (2586,7)-(2586,41)
                      assignment_expression (2586,7)-(2586,40)
                        identifier: 'val' (2586,7)-(2586,10)
                        =: '=' (2586,11)-(2586,12)
                        call_expression (2586,13)-(2586,40)
                          identifier: 'dyncat' (2586,13)-(2586,19)
                          argument_list (2586,19)-(2586,40)
                            (: '(' (2586,19)-(2586,20)
                            identifier: 'val' (2586,20)-(2586,23)
                            ,: ',' (2586,23)-(2586,24)
                            string_literal (2586,25)-(2586,39)
                              ": '"' (2586,25)-(2586,26)
                              string_content: '-right_zeros' (2586,26)-(2586,38)
                              ": '"' (2586,38)-(2586,39)
                            ): ')' (2586,39)-(2586,40)
                      ;: ';' (2586,40)-(2586,41)
                  if_statement (2587,3)-(2588,35)
                    if: 'if' (2587,3)-(2587,5)
                    parenthesized_expression (2587,6)-(2587,20)
                      (: '(' (2587,6)-(2587,7)
                      binary_expression (2587,7)-(2587,19)
                        identifier: 'f' (2587,7)-(2587,8)
                        &: '&' (2587,9)-(2587,10)
                        identifier: 'PM_LOWER' (2587,11)-(2587,19)
                      ): ')' (2587,19)-(2587,20)
                    expression_statement (2588,7)-(2588,35)
                      assignment_expression (2588,7)-(2588,34)
                        identifier: 'val' (2588,7)-(2588,10)
                        =: '=' (2588,11)-(2588,12)
                        call_expression (2588,13)-(2588,34)
                          identifier: 'dyncat' (2588,13)-(2588,19)
                          argument_list (2588,19)-(2588,34)
                            (: '(' (2588,19)-(2588,20)
                            identifier: 'val' (2588,20)-(2588,23)
                            ,: ',' (2588,23)-(2588,24)
                            string_literal (2588,25)-(2588,33)
                              ": '"' (2588,25)-(2588,26)
                              string_content: '-lower' (2588,26)-(2588,32)
                              ": '"' (2588,32)-(2588,33)
                            ): ')' (2588,33)-(2588,34)
                      ;: ';' (2588,34)-(2588,35)
                  if_statement (2589,3)-(2590,35)
                    if: 'if' (2589,3)-(2589,5)
                    parenthesized_expression (2589,6)-(2589,20)
                      (: '(' (2589,6)-(2589,7)
                      binary_expression (2589,7)-(2589,19)
                        identifier: 'f' (2589,7)-(2589,8)
                        &: '&' (2589,9)-(2589,10)
                        identifier: 'PM_UPPER' (2589,11)-(2589,19)
                      ): ')' (2589,19)-(2589,20)
                    expression_statement (2590,7)-(2590,35)
                      assignment_expression (2590,7)-(2590,34)
                        identifier: 'val' (2590,7)-(2590,10)
                        =: '=' (2590,11)-(2590,12)
                        call_expression (2590,13)-(2590,34)
                          identifier: 'dyncat' (2590,13)-(2590,19)
                          argument_list (2590,19)-(2590,34)
                            (: '(' (2590,19)-(2590,20)
                            identifier: 'val' (2590,20)-(2590,23)
                            ,: ',' (2590,23)-(2590,24)
                            string_literal (2590,25)-(2590,33)
                              ": '"' (2590,25)-(2590,26)
                              string_content: '-upper' (2590,26)-(2590,32)
                              ": '"' (2590,32)-(2590,33)
                            ): ')' (2590,33)-(2590,34)
                      ;: ';' (2590,34)-(2590,35)
                  if_statement (2591,3)-(2592,38)
                    if: 'if' (2591,3)-(2591,5)
                    parenthesized_expression (2591,6)-(2591,23)
                      (: '(' (2591,6)-(2591,7)
                      binary_expression (2591,7)-(2591,22)
                        identifier: 'f' (2591,7)-(2591,8)
                        &: '&' (2591,9)-(2591,10)
                        identifier: 'PM_READONLY' (2591,11)-(2591,22)
                      ): ')' (2591,22)-(2591,23)
                    expression_statement (2592,7)-(2592,38)
                      assignment_expression (2592,7)-(2592,37)
                        identifier: 'val' (2592,7)-(2592,10)
                        =: '=' (2592,11)-(2592,12)
                        call_expression (2592,13)-(2592,37)
                          identifier: 'dyncat' (2592,13)-(2592,19)
                          argument_list (2592,19)-(2592,37)
                            (: '(' (2592,19)-(2592,20)
                            identifier: 'val' (2592,20)-(2592,23)
                            ,: ',' (2592,23)-(2592,24)
                            string_literal (2592,25)-(2592,36)
                              ": '"' (2592,25)-(2592,26)
                              string_content: '-readonly' (2592,26)-(2592,35)
                              ": '"' (2592,35)-(2592,36)
                            ): ')' (2592,36)-(2592,37)
                      ;: ';' (2592,37)-(2592,38)
                  if_statement (2593,3)-(2594,33)
                    if: 'if' (2593,3)-(2593,5)
                    parenthesized_expression (2593,6)-(2593,21)
                      (: '(' (2593,6)-(2593,7)
                      binary_expression (2593,7)-(2593,20)
                        identifier: 'f' (2593,7)-(2593,8)
                        &: '&' (2593,9)-(2593,10)
                        identifier: 'PM_TAGGED' (2593,11)-(2593,20)
                      ): ')' (2593,20)-(2593,21)
                    expression_statement (2594,7)-(2594,33)
                      assignment_expression (2594,7)-(2594,32)
                        identifier: 'val' (2594,7)-(2594,10)
                        =: '=' (2594,11)-(2594,12)
                        call_expression (2594,13)-(2594,32)
                          identifier: 'dyncat' (2594,13)-(2594,19)
                          argument_list (2594,19)-(2594,32)
                            (: '(' (2594,19)-(2594,20)
                            identifier: 'val' (2594,20)-(2594,23)
                            ,: ',' (2594,23)-(2594,24)
                            string_literal (2594,25)-(2594,31)
                              ": '"' (2594,25)-(2594,26)
                              string_content: '-tag' (2594,26)-(2594,30)
                              ": '"' (2594,30)-(2594,31)
                            ): ')' (2594,31)-(2594,32)
                      ;: ';' (2594,32)-(2594,33)
                  if_statement (2595,3)-(2596,34)
                    if: 'if' (2595,3)-(2595,5)
                    parenthesized_expression (2595,6)-(2595,19)
                      (: '(' (2595,6)-(2595,7)
                      binary_expression (2595,7)-(2595,18)
                        identifier: 'f' (2595,7)-(2595,8)
                        &: '&' (2595,9)-(2595,10)
                        identifier: 'PM_TIED' (2595,11)-(2595,18)
                      ): ')' (2595,18)-(2595,19)
                    expression_statement (2596,7)-(2596,34)
                      assignment_expression (2596,7)-(2596,33)
                        identifier: 'val' (2596,7)-(2596,10)
                        =: '=' (2596,11)-(2596,12)
                        call_expression (2596,13)-(2596,33)
                          identifier: 'dyncat' (2596,13)-(2596,19)
                          argument_list (2596,19)-(2596,33)
                            (: '(' (2596,19)-(2596,20)
                            identifier: 'val' (2596,20)-(2596,23)
                            ,: ',' (2596,23)-(2596,24)
                            string_literal (2596,25)-(2596,32)
                              ": '"' (2596,25)-(2596,26)
                              string_content: '-tied' (2596,26)-(2596,31)
                              ": '"' (2596,31)-(2596,32)
                            ): ')' (2596,32)-(2596,33)
                      ;: ';' (2596,33)-(2596,34)
                  if_statement (2597,3)-(2598,36)
                    if: 'if' (2597,3)-(2597,5)
                    parenthesized_expression (2597,6)-(2597,23)
                      (: '(' (2597,6)-(2597,7)
                      binary_expression (2597,7)-(2597,22)
                        identifier: 'f' (2597,7)-(2597,8)
                        &: '&' (2597,9)-(2597,10)
                        identifier: 'PM_EXPORTED' (2597,11)-(2597,22)
                      ): ')' (2597,22)-(2597,23)
                    expression_statement (2598,7)-(2598,36)
                      assignment_expression (2598,7)-(2598,35)
                        identifier: 'val' (2598,7)-(2598,10)
                        =: '=' (2598,11)-(2598,12)
                        call_expression (2598,13)-(2598,35)
                          identifier: 'dyncat' (2598,13)-(2598,19)
                          argument_list (2598,19)-(2598,35)
                            (: '(' (2598,19)-(2598,20)
                            identifier: 'val' (2598,20)-(2598,23)
                            ,: ',' (2598,23)-(2598,24)
                            string_literal (2598,25)-(2598,34)
                              ": '"' (2598,25)-(2598,26)
                              string_content: '-export' (2598,26)-(2598,33)
                              ": '"' (2598,33)-(2598,34)
                            ): ')' (2598,34)-(2598,35)
                      ;: ';' (2598,35)-(2598,36)
                  if_statement (2599,3)-(2600,36)
                    if: 'if' (2599,3)-(2599,5)
                    parenthesized_expression (2599,6)-(2599,21)
                      (: '(' (2599,6)-(2599,7)
                      binary_expression (2599,7)-(2599,20)
                        identifier: 'f' (2599,7)-(2599,8)
                        &: '&' (2599,9)-(2599,10)
                        identifier: 'PM_UNIQUE' (2599,11)-(2599,20)
                      ): ')' (2599,20)-(2599,21)
                    expression_statement (2600,7)-(2600,36)
                      assignment_expression (2600,7)-(2600,35)
                        identifier: 'val' (2600,7)-(2600,10)
                        =: '=' (2600,11)-(2600,12)
                        call_expression (2600,13)-(2600,35)
                          identifier: 'dyncat' (2600,13)-(2600,19)
                          argument_list (2600,19)-(2600,35)
                            (: '(' (2600,19)-(2600,20)
                            identifier: 'val' (2600,20)-(2600,23)
                            ,: ',' (2600,23)-(2600,24)
                            string_literal (2600,25)-(2600,34)
                              ": '"' (2600,25)-(2600,26)
                              string_content: '-unique' (2600,26)-(2600,33)
                              ": '"' (2600,33)-(2600,34)
                            ): ')' (2600,34)-(2600,35)
                      ;: ';' (2600,35)-(2600,36)
                  if_statement (2601,3)-(2602,34)
                    if: 'if' (2601,3)-(2601,5)
                    parenthesized_expression (2601,6)-(2601,19)
                      (: '(' (2601,6)-(2601,7)
                      binary_expression (2601,7)-(2601,18)
                        identifier: 'f' (2601,7)-(2601,8)
                        &: '&' (2601,9)-(2601,10)
                        identifier: 'PM_HIDE' (2601,11)-(2601,18)
                      ): ')' (2601,18)-(2601,19)
                    expression_statement (2602,7)-(2602,34)
                      assignment_expression (2602,7)-(2602,33)
                        identifier: 'val' (2602,7)-(2602,10)
                        =: '=' (2602,11)-(2602,12)
                        call_expression (2602,13)-(2602,33)
                          identifier: 'dyncat' (2602,13)-(2602,19)
                          argument_list (2602,19)-(2602,33)
                            (: '(' (2602,19)-(2602,20)
                            identifier: 'val' (2602,20)-(2602,23)
                            ,: ',' (2602,23)-(2602,24)
                            string_literal (2602,25)-(2602,32)
                              ": '"' (2602,25)-(2602,26)
                              string_content: '-hide' (2602,26)-(2602,31)
                              ": '"' (2602,31)-(2602,32)
                            ): ')' (2602,32)-(2602,33)
                      ;: ';' (2602,33)-(2602,34)
                  if_statement (2603,3)-(2604,37)
                    if: 'if' (2603,3)-(2603,5)
                    parenthesized_expression (2603,6)-(2603,22)
                      (: '(' (2603,6)-(2603,7)
                      binary_expression (2603,7)-(2603,21)
                        identifier: 'f' (2603,7)-(2603,8)
                        &: '&' (2603,9)-(2603,10)
                        identifier: 'PM_HIDEVAL' (2603,11)-(2603,21)
                      ): ')' (2603,21)-(2603,22)
                    expression_statement (2604,7)-(2604,37)
                      assignment_expression (2604,7)-(2604,36)
                        identifier: 'val' (2604,7)-(2604,10)
                        =: '=' (2604,11)-(2604,12)
                        call_expression (2604,13)-(2604,36)
                          identifier: 'dyncat' (2604,13)-(2604,19)
                          argument_list (2604,19)-(2604,36)
                            (: '(' (2604,19)-(2604,20)
                            identifier: 'val' (2604,20)-(2604,23)
                            ,: ',' (2604,23)-(2604,24)
                            string_literal (2604,25)-(2604,35)
                              ": '"' (2604,25)-(2604,26)
                              string_content: '-hideval' (2604,26)-(2604,34)
                              ": '"' (2604,34)-(2604,35)
                            ): ')' (2604,35)-(2604,36)
                      ;: ';' (2604,36)-(2604,37)
                  if_statement (2605,3)-(2606,37)
                    if: 'if' (2605,3)-(2605,5)
                    parenthesized_expression (2605,6)-(2605,22)
                      (: '(' (2605,6)-(2605,7)
                      binary_expression (2605,7)-(2605,21)
                        identifier: 'f' (2605,7)-(2605,8)
                        &: '&' (2605,9)-(2605,10)
                        identifier: 'PM_SPECIAL' (2605,11)-(2605,21)
                      ): ')' (2605,21)-(2605,22)
                    expression_statement (2606,7)-(2606,37)
                      assignment_expression (2606,7)-(2606,36)
                        identifier: 'val' (2606,7)-(2606,10)
                        =: '=' (2606,11)-(2606,12)
                        call_expression (2606,13)-(2606,36)
                          identifier: 'dyncat' (2606,13)-(2606,19)
                          argument_list (2606,19)-(2606,36)
                            (: '(' (2606,19)-(2606,20)
                            identifier: 'val' (2606,20)-(2606,23)
                            ,: ',' (2606,23)-(2606,24)
                            string_literal (2606,25)-(2606,35)
                              ": '"' (2606,25)-(2606,26)
                              string_content: '-special' (2606,26)-(2606,34)
                              ": '"' (2606,34)-(2606,35)
                            ): ')' (2606,35)-(2606,36)
                      ;: ';' (2606,36)-(2606,37)
                  expression_statement (2607,3)-(2607,14)
                    assignment_expression (2607,3)-(2607,13)
                      identifier: 'vunset' (2607,3)-(2607,9)
                      =: '=' (2607,10)-(2607,11)
                      number_literal: '0' (2607,12)-(2607,13)
                    ;: ';' (2607,13)-(2607,14)
                  }: '}' (2608,6)-(2608,7)
                else_clause (2608,8)-(2609,23)
                  else: 'else' (2608,8)-(2608,12)
                  expression_statement (2609,3)-(2609,23)
                    assignment_expression (2609,3)-(2609,22)
                      identifier: 'val' (2609,3)-(2609,6)
                      =: '=' (2609,7)-(2609,8)
                      call_expression (2609,9)-(2609,22)
                        identifier: 'dupstring' (2609,9)-(2609,18)
                        argument_list (2609,18)-(2609,22)
                          (: '(' (2609,18)-(2609,19)
                          string_literal (2609,19)-(2609,21)
                            ": '"' (2609,19)-(2609,20)
                            ": '"' (2609,20)-(2609,21)
                          ): ')' (2609,21)-(2609,22)
                    ;: ';' (2609,22)-(2609,23)
              expression_statement (2611,6)-(2611,15)
                assignment_expression (2611,6)-(2611,14)
                  identifier: 'v' (2611,6)-(2611,7)
                  =: '=' (2611,8)-(2611,9)
                  null (2611,10)-(2611,14)
                    NULL: 'NULL' (2611,10)-(2611,14)
                ;: ';' (2611,14)-(2611,15)
              expression_statement (2612,6)-(2612,16)
                assignment_expression (2612,6)-(2612,15)
                  identifier: 'isarr' (2612,6)-(2612,11)
                  =: '=' (2612,12)-(2612,13)
                  number_literal: '0' (2612,14)-(2612,15)
                ;: ';' (2612,15)-(2612,16)
              }: '}' (2613,2)-(2613,3)
          }: '}' (2614,5)-(2614,6)
      comment: '/*
     * We get in here two ways; either we need to convert v into
     * the local value system, or we need to get rid of brackets
     * even if there isn't a v.
     */' (2615,5)-(2619,8)
      while_statement (2620,5)-(2736,6)
        while: 'while' (2620,5)-(2620,10)
        parenthesized_expression (2620,11)-(2620,76)
          (: '(' (2620,11)-(2620,12)
          binary_expression (2620,12)-(2620,75)
            identifier: 'v' (2620,12)-(2620,13)
            ||: '||' (2620,14)-(2620,16)
            parenthesized_expression (2620,17)-(2620,75)
              (: '(' (2620,17)-(2620,18)
              binary_expression (2620,18)-(2620,74)
                parenthesized_expression (2620,18)-(2620,59)
                  (: '(' (2620,18)-(2620,19)
                  binary_expression (2620,19)-(2620,58)
                    identifier: 'inbrace' (2620,19)-(2620,26)
                    ||: '||' (2620,27)-(2620,29)
                    parenthesized_expression (2620,30)-(2620,58)
                      (: '(' (2620,30)-(2620,31)
                      binary_expression (2620,31)-(2620,57)
                        call_expression (2620,31)-(2620,47)
                          identifier: 'unset' (2620,31)-(2620,36)
                          argument_list (2620,36)-(2620,47)
                            (: '(' (2620,36)-(2620,37)
                            identifier: 'KSHARRAYS' (2620,37)-(2620,46)
                            ): ')' (2620,46)-(2620,47)
                        &&: '&&' (2620,48)-(2620,50)
                        identifier: 'vunset' (2620,51)-(2620,57)
                      ): ')' (2620,57)-(2620,58)
                  ): ')' (2620,58)-(2620,59)
                &&: '&&' (2620,60)-(2620,62)
                call_expression (2620,63)-(2620,74)
                  identifier: 'isbrack' (2620,63)-(2620,70)
                  argument_list (2620,70)-(2620,74)
                    (: '(' (2620,70)-(2620,71)
                    pointer_expression (2620,71)-(2620,73)
                      *: '*' (2620,71)-(2620,72)
                      identifier: 's' (2620,72)-(2620,73)
                    ): ')' (2620,73)-(2620,74)
              ): ')' (2620,74)-(2620,75)
          ): ')' (2620,75)-(2620,76)
        compound_statement (2620,77)-(2736,6)
          {: '{' (2620,77)-(2620,78)
          if_statement (2621,2)-(2654,3)
            if: 'if' (2621,2)-(2621,4)
            parenthesized_expression (2621,5)-(2621,9)
              (: '(' (2621,5)-(2621,6)
              unary_expression (2621,6)-(2621,8)
                !: '!' (2621,6)-(2621,7)
                identifier: 'v' (2621,7)-(2621,8)
              ): ')' (2621,8)-(2621,9)
            compound_statement (2621,10)-(2654,3)
              {: '{' (2621,10)-(2621,11)
              comment: '/*
	     * Index applied to non-existent parameter; we may or may
	     * not have a value to index, however.  Create a temporary
	     * empty parameter as a trick, and index on that.  This
	     * usually happens the second time around the loop when
	     * we've used up the original parameter value and want to
	     * apply a subscript to what's left.  However, it's also
	     * possible it's got something to do with some of that murky
	     * passing of -1's as the third argument to fetchvalue() to
	     * inhibit bracket parsing at that stage.
	     */' (2622,6)-(2632,9)
              declaration (2633,6)-(2633,15)
                type_identifier: 'Param' (2633,6)-(2633,11)
                identifier: 'pm' (2633,12)-(2633,14)
                ;: ';' (2633,14)-(2633,15)
              declaration (2634,6)-(2634,19)
                primitive_type: 'char' (2634,6)-(2634,10)
                init_declarator (2634,11)-(2634,18)
                  pointer_declarator (2634,11)-(2634,14)
                    *: '*' (2634,11)-(2634,12)
                    identifier: 'os' (2634,12)-(2634,14)
                  =: '=' (2634,15)-(2634,16)
                  identifier: 's' (2634,17)-(2634,18)
                ;: ';' (2634,18)-(2634,19)
              if_statement (2636,6)-(2637,9)
                if: 'if' (2636,6)-(2636,8)
                parenthesized_expression (2636,9)-(2636,23)
                  (: '(' (2636,9)-(2636,10)
                  unary_expression (2636,10)-(2636,22)
                    !: '!' (2636,10)-(2636,11)
                    call_expression (2636,11)-(2636,22)
                      identifier: 'isbrack' (2636,11)-(2636,18)
                      argument_list (2636,18)-(2636,22)
                        (: '(' (2636,18)-(2636,19)
                        pointer_expression (2636,19)-(2636,21)
                          *: '*' (2636,19)-(2636,20)
                          identifier: 's' (2636,20)-(2636,21)
                        ): ')' (2636,21)-(2636,22)
                  ): ')' (2636,22)-(2636,23)
                break_statement (2637,3)-(2637,9)
                  break: 'break' (2637,3)-(2637,8)
                  ;: ';' (2637,8)-(2637,9)
              if_statement (2638,6)-(2641,7)
                if: 'if' (2638,6)-(2638,8)
                parenthesized_expression (2638,9)-(2638,17)
                  (: '(' (2638,9)-(2638,10)
                  identifier: 'vunset' (2638,10)-(2638,16)
                  ): ')' (2638,16)-(2638,17)
                compound_statement (2638,18)-(2641,7)
                  {: '{' (2638,18)-(2638,19)
                  expression_statement (2639,3)-(2639,23)
                    assignment_expression (2639,3)-(2639,22)
                      identifier: 'val' (2639,3)-(2639,6)
                      =: '=' (2639,7)-(2639,8)
                      call_expression (2639,9)-(2639,22)
                        identifier: 'dupstring' (2639,9)-(2639,18)
                        argument_list (2639,18)-(2639,22)
                          (: '(' (2639,18)-(2639,19)
                          string_literal (2639,19)-(2639,21)
                            ": '"' (2639,19)-(2639,20)
                            ": '"' (2639,20)-(2639,21)
                          ): ')' (2639,21)-(2639,22)
                    ;: ';' (2639,22)-(2639,23)
                  expression_statement (2640,3)-(2640,13)
                    assignment_expression (2640,3)-(2640,12)
                      identifier: 'isarr' (2640,3)-(2640,8)
                      =: '=' (2640,9)-(2640,10)
                      number_literal: '0' (2640,11)-(2640,12)
                    ;: ';' (2640,12)-(2640,13)
                  }: '}' (2641,6)-(2641,7)
              expression_statement (2642,6)-(2642,64)
                assignment_expression (2642,6)-(2642,63)
                  identifier: 'pm' (2642,6)-(2642,8)
                  =: '=' (2642,9)-(2642,10)
                  call_expression (2642,11)-(2642,63)
                    identifier: 'createparam' (2642,11)-(2642,22)
                    argument_list (2642,22)-(2642,63)
                      (: '(' (2642,22)-(2642,23)
                      identifier: 'nulstring' (2642,23)-(2642,32)
                      ,: ',' (2642,32)-(2642,33)
                      conditional_expression (2642,34)-(2642,62)
                        identifier: 'isarr' (2642,34)-(2642,39)
                        ?: '?' (2642,40)-(2642,41)
                        identifier: 'PM_ARRAY' (2642,42)-(2642,50)
                        :: ':' (2642,51)-(2642,52)
                        identifier: 'PM_SCALAR' (2642,53)-(2642,62)
                      ): ')' (2642,62)-(2642,63)
                ;: ';' (2642,63)-(2642,64)
              expression_statement (2643,6)-(2643,47)
                call_expression (2643,6)-(2643,46)
                  identifier: 'DPUTS' (2643,6)-(2643,11)
                  argument_list (2643,11)-(2643,46)
                    (: '(' (2643,11)-(2643,12)
                    unary_expression (2643,12)-(2643,15)
                      !: '!' (2643,12)-(2643,13)
                      identifier: 'pm' (2643,13)-(2643,15)
                    ,: ',' (2643,15)-(2643,16)
                    string_literal (2643,17)-(2643,45)
                      ": '"' (2643,17)-(2643,18)
                      string_content: 'BUG: parameter not created' (2643,18)-(2643,44)
                      ": '"' (2643,44)-(2643,45)
                    ): ')' (2643,45)-(2643,46)
                ;: ';' (2643,46)-(2643,47)
              if_statement (2644,6)-(2647,19)
                if: 'if' (2644,6)-(2644,8)
                parenthesized_expression (2644,9)-(2644,16)
                  (: '(' (2644,9)-(2644,10)
                  identifier: 'isarr' (2644,10)-(2644,15)
                  ): ')' (2644,15)-(2644,16)
                expression_statement (2645,3)-(2645,20)
                  assignment_expression (2645,3)-(2645,19)
                    field_expression (2645,3)-(2645,12)
                      field_expression (2645,3)-(2645,8)
                        identifier: 'pm' (2645,3)-(2645,5)
                        ->: '->' (2645,5)-(2645,7)
                        field_identifier: 'u' (2645,7)-(2645,8)
                      .: '.' (2645,8)-(2645,9)
                      field_identifier: 'arr' (2645,9)-(2645,12)
                    =: '=' (2645,13)-(2645,14)
                    identifier: 'aval' (2645,15)-(2645,19)
                  ;: ';' (2645,19)-(2645,20)
                else_clause (2646,6)-(2647,19)
                  else: 'else' (2646,6)-(2646,10)
                  expression_statement (2647,3)-(2647,19)
                    assignment_expression (2647,3)-(2647,18)
                      field_expression (2647,3)-(2647,12)
                        field_expression (2647,3)-(2647,8)
                          identifier: 'pm' (2647,3)-(2647,5)
                          ->: '->' (2647,5)-(2647,7)
                          field_identifier: 'u' (2647,7)-(2647,8)
                        .: '.' (2647,8)-(2647,9)
                        field_identifier: 'str' (2647,9)-(2647,12)
                      =: '=' (2647,13)-(2647,14)
                      identifier: 'val' (2647,15)-(2647,18)
                    ;: ';' (2647,18)-(2647,19)
              expression_statement (2648,6)-(2648,37)
                assignment_expression (2648,6)-(2648,36)
                  identifier: 'v' (2648,6)-(2648,7)
                  =: '=' (2648,8)-(2648,9)
                  cast_expression (2648,10)-(2648,36)
                    (: '(' (2648,10)-(2648,11)
                    type_descriptor (2648,11)-(2648,16)
                      type_identifier: 'Value' (2648,11)-(2648,16)
                    ): ')' (2648,16)-(2648,17)
                    call_expression (2648,18)-(2648,36)
                      identifier: 'hcalloc' (2648,18)-(2648,25)
                      argument_list (2648,25)-(2648,36)
                        (: '(' (2648,25)-(2648,26)
                        sizeof_expression (2648,26)-(2648,35)
                          sizeof: 'sizeof' (2648,26)-(2648,32)
                          pointer_expression (2648,33)-(2648,35)
                            *: '*' (2648,33)-(2648,34)
                            identifier: 'v' (2648,34)-(2648,35)
                        ): ')' (2648,35)-(2648,36)
                ;: ';' (2648,36)-(2648,37)
              expression_statement (2649,6)-(2649,23)
                assignment_expression (2649,6)-(2649,22)
                  field_expression (2649,6)-(2649,14)
                    identifier: 'v' (2649,6)-(2649,7)
                    ->: '->' (2649,7)-(2649,9)
                    field_identifier: 'isarr' (2649,9)-(2649,14)
                  =: '=' (2649,15)-(2649,16)
                  identifier: 'isarr' (2649,17)-(2649,22)
                ;: ';' (2649,22)-(2649,23)
              expression_statement (2650,6)-(2650,17)
                assignment_expression (2650,6)-(2650,16)
                  field_expression (2650,6)-(2650,11)
                    identifier: 'v' (2650,6)-(2650,7)
                    ->: '->' (2650,7)-(2650,9)
                    field_identifier: 'pm' (2650,9)-(2650,11)
                  =: '=' (2650,12)-(2650,13)
                  identifier: 'pm' (2650,14)-(2650,16)
                ;: ';' (2650,16)-(2650,17)
              expression_statement (2651,6)-(2651,18)
                assignment_expression (2651,6)-(2651,17)
                  field_expression (2651,6)-(2651,12)
                    identifier: 'v' (2651,6)-(2651,7)
                    ->: '->' (2651,7)-(2651,9)
                    field_identifier: 'end' (2651,9)-(2651,12)
                  =: '=' (2651,13)-(2651,14)
                  number_literal: '-1' (2651,15)-(2651,17)
                ;: ';' (2651,17)-(2651,18)
              if_statement (2652,6)-(2653,9)
                if: 'if' (2652,6)-(2652,8)
                parenthesized_expression (2652,9)-(2652,62)
                  (: '(' (2652,9)-(2652,10)
                  binary_expression (2652,10)-(2652,61)
                    call_expression (2652,10)-(2652,50)
                      identifier: 'getindex' (2652,10)-(2652,18)
                      argument_list (2652,18)-(2652,50)
                        (: '(' (2652,18)-(2652,19)
                        pointer_expression (2652,19)-(2652,21)
                          &: '&' (2652,19)-(2652,20)
                          identifier: 's' (2652,20)-(2652,21)
                        ,: ',' (2652,21)-(2652,22)
                        identifier: 'v' (2652,23)-(2652,24)
                        ,: ',' (2652,24)-(2652,25)
                        conditional_expression (2652,26)-(2652,49)
                          identifier: 'qt' (2652,26)-(2652,28)
                          ?: '?' (2652,29)-(2652,30)
                          identifier: 'SCANPM_DQUOTED' (2652,31)-(2652,45)
                          :: ':' (2652,46)-(2652,47)
                          number_literal: '0' (2652,48)-(2652,49)
                        ): ')' (2652,49)-(2652,50)
                    ||: '||' (2652,51)-(2652,53)
                    binary_expression (2652,54)-(2652,61)
                      identifier: 's' (2652,54)-(2652,55)
                      ==: '==' (2652,56)-(2652,58)
                      identifier: 'os' (2652,59)-(2652,61)
                  ): ')' (2652,61)-(2652,62)
                break_statement (2653,3)-(2653,9)
                  break: 'break' (2653,3)-(2653,8)
                  ;: ';' (2653,8)-(2653,9)
              }: '}' (2654,2)-(2654,3)
          comment: '/*
	 * This is where we extract a value (we know now we have
	 * one) into the local parameters for a scalar (val) or
	 * array (aval) value.  TODO: move val and aval into
	 * a structure with a discriminator.  Hope we can make
	 * more things array values at this point and dearrayify later.
	 * v->isarr tells us whether the stuff from down below looks
	 * like an array.
	 *
	 * I think we get to discard the existing value of isarr
	 * here because it's already been taken account of, either
	 * in the subexp stuff or immediately above.
	 */' (2655,2)-(2667,5)
          if_statement (2668,2)-(2719,3)
            if: 'if' (2668,2)-(2668,4)
            parenthesized_expression (2668,5)-(2668,25)
              (: '(' (2668,5)-(2668,6)
              parenthesized_expression (2668,6)-(2668,24)
                (: '(' (2668,6)-(2668,7)
                assignment_expression (2668,7)-(2668,23)
                  identifier: 'isarr' (2668,7)-(2668,12)
                  =: '=' (2668,13)-(2668,14)
                  field_expression (2668,15)-(2668,23)
                    identifier: 'v' (2668,15)-(2668,16)
                    ->: '->' (2668,16)-(2668,18)
                    field_identifier: 'isarr' (2668,18)-(2668,23)
                ): ')' (2668,23)-(2668,24)
              ): ')' (2668,24)-(2668,25)
            compound_statement (2668,26)-(2679,3)
              {: '{' (2668,26)-(2668,27)
              comment: '/*
	     * No way to get here with v->flags & VALFLAG_INV, so
	     * getvaluearr() is called by getarrvalue(); needn't test
	     * PM_HASHED.
	     */' (2669,6)-(2673,9)
              if_statement (2674,6)-(2678,25)
                if: 'if' (2674,6)-(2674,8)
                parenthesized_expression (2674,9)-(2674,39)
                  (: '(' (2674,9)-(2674,10)
                  binary_expression (2674,10)-(2674,38)
                    field_expression (2674,10)-(2674,18)
                      identifier: 'v' (2674,10)-(2674,11)
                      ->: '->' (2674,11)-(2674,13)
                      field_identifier: 'isarr' (2674,13)-(2674,18)
                    ==: '==' (2674,19)-(2674,21)
                    identifier: 'SCANPM_WANTINDEX' (2674,22)-(2674,38)
                  ): ')' (2674,38)-(2674,39)
                compound_statement (2674,40)-(2677,7)
                  {: '{' (2674,40)-(2674,41)
                  expression_statement (2675,3)-(2675,24)
                    assignment_expression (2675,3)-(2675,23)
                      identifier: 'isarr' (2675,3)-(2675,8)
                      =: '=' (2675,9)-(2675,10)
                      assignment_expression (2675,11)-(2675,23)
                        field_expression (2675,11)-(2675,19)
                          identifier: 'v' (2675,11)-(2675,12)
                          ->: '->' (2675,12)-(2675,14)
                          field_identifier: 'isarr' (2675,14)-(2675,19)
                        =: '=' (2675,20)-(2675,21)
                        number_literal: '0' (2675,22)-(2675,23)
                    ;: ';' (2675,23)-(2675,24)
                  expression_statement (2676,3)-(2676,36)
                    assignment_expression (2676,3)-(2676,35)
                      identifier: 'val' (2676,3)-(2676,6)
                      =: '=' (2676,7)-(2676,8)
                      call_expression (2676,9)-(2676,35)
                        identifier: 'dupstring' (2676,9)-(2676,18)
                        argument_list (2676,18)-(2676,35)
                          (: '(' (2676,18)-(2676,19)
                          field_expression (2676,19)-(2676,34)
                            field_expression (2676,19)-(2676,30)
                              field_expression (2676,19)-(2676,24)
                                identifier: 'v' (2676,19)-(2676,20)
                                ->: '->' (2676,20)-(2676,22)
                                field_identifier: 'pm' (2676,22)-(2676,24)
                              ->: '->' (2676,24)-(2676,26)
                              field_identifier: 'node' (2676,26)-(2676,30)
                            .: '.' (2676,30)-(2676,31)
                            field_identifier: 'nam' (2676,31)-(2676,34)
                          ): ')' (2676,34)-(2676,35)
                    ;: ';' (2676,35)-(2676,36)
                  }: '}' (2677,6)-(2677,7)
                else_clause (2677,8)-(2678,25)
                  else: 'else' (2677,8)-(2677,12)
                  expression_statement (2678,3)-(2678,25)
                    assignment_expression (2678,3)-(2678,24)
                      identifier: 'aval' (2678,3)-(2678,7)
                      =: '=' (2678,8)-(2678,9)
                      call_expression (2678,10)-(2678,24)
                        identifier: 'getarrvalue' (2678,10)-(2678,21)
                        argument_list (2678,21)-(2678,24)
                          (: '(' (2678,21)-(2678,22)
                          identifier: 'v' (2678,22)-(2678,23)
                          ): ')' (2678,23)-(2678,24)
                    ;: ';' (2678,24)-(2678,25)
              }: '}' (2679,2)-(2679,3)
            else_clause (2679,4)-(2719,3)
              else: 'else' (2679,4)-(2679,8)
              compound_statement (2679,9)-(2719,3)
                {: '{' (2679,9)-(2679,10)
                comment: '/* Value retrieved from parameter/subexpression is scalar */' (2680,6)-(2680,66)
                if_statement (2681,6)-(2706,7)
                  if: 'if' (2681,6)-(2681,8)
                  parenthesized_expression (2681,9)-(2681,39)
                    (: '(' (2681,9)-(2681,10)
                    binary_expression (2681,10)-(2681,38)
                      field_expression (2681,10)-(2681,27)
                        field_expression (2681,10)-(2681,21)
                          field_expression (2681,10)-(2681,15)
                            identifier: 'v' (2681,10)-(2681,11)
                            ->: '->' (2681,11)-(2681,13)
                            field_identifier: 'pm' (2681,13)-(2681,15)
                          ->: '->' (2681,15)-(2681,17)
                          field_identifier: 'node' (2681,17)-(2681,21)
                        .: '.' (2681,21)-(2681,22)
                        field_identifier: 'flags' (2681,22)-(2681,27)
                      &: '&' (2681,28)-(2681,29)
                      identifier: 'PM_ARRAY' (2681,30)-(2681,38)
                    ): ')' (2681,38)-(2681,39)
                  compound_statement (2681,40)-(2706,7)
                    {: '{' (2681,40)-(2681,41)
                    comment: '/*
		 * Although the value is a scalar, the parameter
		 * itself is an array.  Presumably this is due to
		 * being quoted, or doing single substitution or something,
		 * TODO: we're about to do some definitely stringy
		 * stuff, so something like this bit is probably
		 * necessary.  However, I'd like to leave any
		 * necessary joining of arrays until this point
		 * to avoid the multsub() horror.
		 */' (2682,3)-(2691,6)
                    comment: '/* arrlen() is expensive, so only compute it if needed. */' (2693,3)-(2693,61)
                    declaration (2694,3)-(2694,19)
                      primitive_type: 'int' (2694,3)-(2694,6)
                      init_declarator (2694,7)-(2694,18)
                        identifier: 'tmplen' (2694,7)-(2694,13)
                        =: '=' (2694,14)-(2694,15)
                        number_literal: '-1' (2694,16)-(2694,18)
                      ;: ';' (2694,18)-(2694,19)
                    if_statement (2696,3)-(2699,4)
                      if: 'if' (2696,3)-(2696,5)
                      parenthesized_expression (2696,6)-(2696,20)
                        (: '(' (2696,6)-(2696,7)
                        binary_expression (2696,7)-(2696,19)
                          field_expression (2696,7)-(2696,15)
                            identifier: 'v' (2696,7)-(2696,8)
                            ->: '->' (2696,8)-(2696,10)
                            field_identifier: 'start' (2696,10)-(2696,15)
                          <: '<' (2696,16)-(2696,17)
                          number_literal: '0' (2696,18)-(2696,19)
                        ): ')' (2696,19)-(2696,20)
                      compound_statement (2696,21)-(2699,4)
                        {: '{' (2696,21)-(2696,22)
                        expression_statement (2697,7)-(2697,51)
                          assignment_expression (2697,7)-(2697,50)
                            identifier: 'tmplen' (2697,7)-(2697,13)
                            =: '=' (2697,14)-(2697,15)
                            call_expression (2697,16)-(2697,50)
                              identifier: 'arrlen' (2697,16)-(2697,22)
                              argument_list (2697,22)-(2697,50)
                                (: '(' (2697,22)-(2697,23)
                                call_expression (2697,23)-(2697,49)
                                  field_expression (2697,23)-(2697,42)
                                    field_expression (2697,23)-(2697,35)
                                      field_expression (2697,23)-(2697,33)
                                        field_expression (2697,23)-(2697,28)
                                          identifier: 'v' (2697,23)-(2697,24)
                                          ->: '->' (2697,24)-(2697,26)
                                          field_identifier: 'pm' (2697,26)-(2697,28)
                                        ->: '->' (2697,28)-(2697,30)
                                        field_identifier: 'gsu' (2697,30)-(2697,33)
                                      .: '.' (2697,33)-(2697,34)
                                      field_identifier: 'a' (2697,34)-(2697,35)
                                    ->: '->' (2697,35)-(2697,37)
                                    field_identifier: 'getfn' (2697,37)-(2697,42)
                                  argument_list (2697,42)-(2697,49)
                                    (: '(' (2697,42)-(2697,43)
                                    field_expression (2697,43)-(2697,48)
                                      identifier: 'v' (2697,43)-(2697,44)
                                      ->: '->' (2697,44)-(2697,46)
                                      field_identifier: 'pm' (2697,46)-(2697,48)
                                    ): ')' (2697,48)-(2697,49)
                                ): ')' (2697,49)-(2697,50)
                          ;: ';' (2697,50)-(2697,51)
                        expression_statement (2698,7)-(2698,63)
                          assignment_expression (2698,7)-(2698,62)
                            field_expression (2698,7)-(2698,15)
                              identifier: 'v' (2698,7)-(2698,8)
                              ->: '->' (2698,8)-(2698,10)
                              field_identifier: 'start' (2698,10)-(2698,15)
                            +=: '+=' (2698,16)-(2698,18)
                            binary_expression (2698,19)-(2698,62)
                              identifier: 'tmplen' (2698,19)-(2698,25)
                              +: '+' (2698,26)-(2698,27)
                              parenthesized_expression (2698,28)-(2698,62)
                                (: '(' (2698,28)-(2698,29)
                                conditional_expression (2698,29)-(2698,61)
                                  parenthesized_expression (2698,29)-(2698,53)
                                    (: '(' (2698,29)-(2698,30)
                                    binary_expression (2698,30)-(2698,52)
                                      field_expression (2698,30)-(2698,38)
                                        identifier: 'v' (2698,30)-(2698,31)
                                        ->: '->' (2698,31)-(2698,33)
                                        field_identifier: 'flags' (2698,33)-(2698,38)
                                      &: '&' (2698,39)-(2698,40)
                                      identifier: 'VALFLAG_INV' (2698,41)-(2698,52)
                                    ): ')' (2698,52)-(2698,53)
                                  ?: '?' (2698,54)-(2698,55)
                                  number_literal: '1' (2698,56)-(2698,57)
                                  :: ':' (2698,58)-(2698,59)
                                  number_literal: '0' (2698,60)-(2698,61)
                                ): ')' (2698,61)-(2698,62)
                          ;: ';' (2698,62)-(2698,63)
                        }: '}' (2699,3)-(2699,4)
                    if_statement (2700,3)-(2705,18)
                      if: 'if' (2700,3)-(2700,5)
                      parenthesized_expression (2700,6)-(2700,33)
                        (: '(' (2700,6)-(2700,7)
                        unary_expression (2700,7)-(2700,32)
                          !: '!' (2700,7)-(2700,8)
                          parenthesized_expression (2700,8)-(2700,32)
                            (: '(' (2700,8)-(2700,9)
                            binary_expression (2700,9)-(2700,31)
                              field_expression (2700,9)-(2700,17)
                                identifier: 'v' (2700,9)-(2700,10)
                                ->: '->' (2700,10)-(2700,12)
                                field_identifier: 'flags' (2700,12)-(2700,17)
                              &: '&' (2700,18)-(2700,19)
                              identifier: 'VALFLAG_INV' (2700,20)-(2700,31)
                            ): ')' (2700,31)-(2700,32)
                        ): ')' (2700,32)-(2700,33)
                      if_statement (2701,7)-(2705,18)
                        if: 'if' (2701,7)-(2701,9)
                        parenthesized_expression (2701,10)-(2704,56)
                          (: '(' (2701,10)-(2701,11)
                          binary_expression (2701,11)-(2704,55)
                            binary_expression (2701,11)-(2701,23)
                              field_expression (2701,11)-(2701,19)
                                identifier: 'v' (2701,11)-(2701,12)
                                ->: '->' (2701,12)-(2701,14)
                                field_identifier: 'start' (2701,14)-(2701,19)
                              <: '<' (2701,20)-(2701,21)
                              number_literal: '0' (2701,22)-(2701,23)
                            ||: '||' (2701,24)-(2701,26)
                            parenthesized_expression (2702,4)-(2704,55)
                              (: '(' (2702,4)-(2702,5)
                              conditional_expression (2702,5)-(2704,54)
                                binary_expression (2702,5)-(2702,17)
                                  identifier: 'tmplen' (2702,5)-(2702,11)
                                  !=: '!=' (2702,12)-(2702,14)
                                  number_literal: '-1' (2702,15)-(2702,17)
                                ?: '?' (2703,5)-(2703,6)
                                binary_expression (2703,7)-(2703,25)
                                  field_expression (2703,7)-(2703,15)
                                    identifier: 'v' (2703,7)-(2703,8)
                                    ->: '->' (2703,8)-(2703,10)
                                    field_identifier: 'start' (2703,10)-(2703,15)
                                  >=: '>=' (2703,16)-(2703,18)
                                  identifier: 'tmplen' (2703,19)-(2703,25)
                                :: ':' (2704,5)-(2704,6)
                                call_expression (2704,7)-(2704,54)
                                  identifier: 'arrlen_le' (2704,7)-(2704,16)
                                  argument_list (2704,16)-(2704,54)
                                    (: '(' (2704,16)-(2704,17)
                                    call_expression (2704,17)-(2704,43)
                                      field_expression (2704,17)-(2704,36)
                                        field_expression (2704,17)-(2704,29)
                                          field_expression (2704,17)-(2704,27)
                                            field_expression (2704,17)-(2704,22)
                                              identifier: 'v' (2704,17)-(2704,18)
                                              ->: '->' (2704,18)-(2704,20)
                                              field_identifier: 'pm' (2704,20)-(2704,22)
                                            ->: '->' (2704,22)-(2704,24)
                                            field_identifier: 'gsu' (2704,24)-(2704,27)
                                          .: '.' (2704,27)-(2704,28)
                                          field_identifier: 'a' (2704,28)-(2704,29)
                                        ->: '->' (2704,29)-(2704,31)
                                        field_identifier: 'getfn' (2704,31)-(2704,36)
                                      argument_list (2704,36)-(2704,43)
                                        (: '(' (2704,36)-(2704,37)
                                        field_expression (2704,37)-(2704,42)
                                          identifier: 'v' (2704,37)-(2704,38)
                                          ->: '->' (2704,38)-(2704,40)
                                          field_identifier: 'pm' (2704,40)-(2704,42)
                                        ): ')' (2704,42)-(2704,43)
                                    ,: ',' (2704,43)-(2704,44)
                                    field_expression (2704,45)-(2704,53)
                                      identifier: 'v' (2704,45)-(2704,46)
                                      ->: '->' (2704,46)-(2704,48)
                                      field_identifier: 'start' (2704,48)-(2704,53)
                                    ): ')' (2704,53)-(2704,54)
                              ): ')' (2704,54)-(2704,55)
                          ): ')' (2704,55)-(2704,56)
                        expression_statement (2705,7)-(2705,18)
                          assignment_expression (2705,7)-(2705,17)
                            identifier: 'vunset' (2705,7)-(2705,13)
                            =: '=' (2705,14)-(2705,15)
                            number_literal: '1' (2705,16)-(2705,17)
                          ;: ';' (2705,17)-(2705,18)
                    }: '}' (2706,6)-(2706,7)
                if_statement (2707,6)-(2718,7)
                  if: 'if' (2707,6)-(2707,8)
                  parenthesized_expression (2707,9)-(2707,18)
                    (: '(' (2707,9)-(2707,10)
                    unary_expression (2707,10)-(2707,17)
                      !: '!' (2707,10)-(2707,11)
                      identifier: 'vunset' (2707,11)-(2707,17)
                    ): ')' (2707,17)-(2707,18)
                  compound_statement (2707,19)-(2718,7)
                    {: '{' (2707,19)-(2707,20)
                    comment: '/*
		 * There really is a value.  Padding and case
		 * transformations used to be handled here, but
		 * are now handled in getstrvalue() for greater
		 * consistency.  However, we get unexpected effects
		 * if we allow them to applied on every call, so
		 * set the flag that allows them to be substituted.
		 */' (2708,3)-(2715,6)
                    expression_statement (2716,3)-(2716,29)
                      assignment_expression (2716,3)-(2716,28)
                        field_expression (2716,3)-(2716,11)
                          identifier: 'v' (2716,3)-(2716,4)
                          ->: '->' (2716,4)-(2716,6)
                          field_identifier: 'flags' (2716,6)-(2716,11)
                        |=: '|=' (2716,12)-(2716,14)
                        identifier: 'VALFLAG_SUBST' (2716,15)-(2716,28)
                      ;: ';' (2716,28)-(2716,29)
                    expression_statement (2717,3)-(2717,24)
                      assignment_expression (2717,3)-(2717,23)
                        identifier: 'val' (2717,3)-(2717,6)
                        =: '=' (2717,7)-(2717,8)
                        call_expression (2717,9)-(2717,23)
                          identifier: 'getstrvalue' (2717,9)-(2717,20)
                          argument_list (2717,20)-(2717,23)
                            (: '(' (2717,20)-(2717,21)
                            identifier: 'v' (2717,21)-(2717,22)
                            ): ')' (2717,22)-(2717,23)
                      ;: ';' (2717,23)-(2717,24)
                    }: '}' (2718,6)-(2718,7)
                }: '}' (2719,2)-(2719,3)
          comment: '/* See if this is a reference to the positional parameters. */' (2720,2)-(2720,64)
          if_statement (2721,2)-(2725,31)
            if: 'if' (2721,2)-(2721,4)
            parenthesized_expression (2721,5)-(2722,42)
              (: '(' (2721,5)-(2721,6)
              binary_expression (2721,6)-(2722,41)
                binary_expression (2721,6)-(2721,49)
                  binary_expression (2721,6)-(2721,16)
                    identifier: 'v' (2721,6)-(2721,7)
                    &&: '&&' (2721,8)-(2721,10)
                    field_expression (2721,11)-(2721,16)
                      identifier: 'v' (2721,11)-(2721,12)
                      ->: '->' (2721,12)-(2721,14)
                      field_identifier: 'pm' (2721,14)-(2721,16)
                  &&: '&&' (2721,17)-(2721,19)
                  binary_expression (2721,20)-(2721,49)
                    field_expression (2721,20)-(2721,32)
                      field_expression (2721,20)-(2721,30)
                        field_expression (2721,20)-(2721,25)
                          identifier: 'v' (2721,20)-(2721,21)
                          ->: '->' (2721,21)-(2721,23)
                          field_identifier: 'pm' (2721,23)-(2721,25)
                        ->: '->' (2721,25)-(2721,27)
                        field_identifier: 'gsu' (2721,27)-(2721,30)
                      .: '.' (2721,30)-(2721,31)
                      field_identifier: 'a' (2721,31)-(2721,32)
                    ==: '==' (2721,33)-(2721,35)
                    pointer_expression (2721,36)-(2721,49)
                      &: '&' (2721,36)-(2721,37)
                      identifier: 'vararray_gsu' (2721,37)-(2721,49)
                &&: '&&' (2721,50)-(2721,52)
                binary_expression (2722,6)-(2722,41)
                  cast_expression (2722,6)-(2722,29)
                    (: '(' (2722,6)-(2722,7)
                    type_descriptor (2722,7)-(2722,15)
                      primitive_type: 'char' (2722,7)-(2722,11)
                      abstract_pointer_declarator (2722,12)-(2722,15)
                        *: '*' (2722,12)-(2722,13)
                        abstract_pointer_declarator (2722,13)-(2722,15)
                          *: '*' (2722,13)-(2722,14)
                          abstract_pointer_declarator (2722,14)-(2722,15)
                            *: '*' (2722,14)-(2722,15)
                    ): ')' (2722,15)-(2722,16)
                    field_expression (2722,16)-(2722,29)
                      field_expression (2722,16)-(2722,24)
                        field_expression (2722,16)-(2722,21)
                          identifier: 'v' (2722,16)-(2722,17)
                          ->: '->' (2722,17)-(2722,19)
                          field_identifier: 'pm' (2722,19)-(2722,21)
                        ->: '->' (2722,21)-(2722,23)
                        field_identifier: 'u' (2722,23)-(2722,24)
                      .: '.' (2722,24)-(2722,25)
                      field_identifier: 'data' (2722,25)-(2722,29)
                  ==: '==' (2722,30)-(2722,32)
                  pointer_expression (2722,33)-(2722,41)
                    &: '&' (2722,33)-(2722,34)
                    identifier: 'pparams' (2722,34)-(2722,41)
              ): ')' (2722,41)-(2722,42)
            expression_statement (2723,6)-(2723,31)
              assignment_expression (2723,6)-(2723,30)
                identifier: 'horrible_offset_hack' (2723,6)-(2723,26)
                =: '=' (2723,27)-(2723,28)
                number_literal: '1' (2723,29)-(2723,30)
              ;: ';' (2723,30)-(2723,31)
            else_clause (2724,2)-(2725,31)
              else: 'else' (2724,2)-(2724,6)
              expression_statement (2725,6)-(2725,31)
                assignment_expression (2725,6)-(2725,30)
                  identifier: 'horrible_offset_hack' (2725,6)-(2725,26)
                  =: '=' (2725,27)-(2725,28)
                  number_literal: '0' (2725,29)-(2725,30)
                ;: ';' (2725,30)-(2725,31)
          comment: '/*
	 * Finished with the original parameter and its indices;
	 * carry on looping to see if we need to do more indexing.
	 * This means we final get rid of v in favour of val and
	 * aval.  We could do with somehow encapsulating the bit
	 * where we need v.
	 */' (2726,2)-(2732,5)
          expression_statement (2733,2)-(2733,11)
            assignment_expression (2733,2)-(2733,10)
              identifier: 'v' (2733,2)-(2733,3)
              =: '=' (2733,4)-(2733,5)
              null (2733,6)-(2733,10)
                NULL: 'NULL' (2733,6)-(2733,10)
            ;: ';' (2733,10)-(2733,11)
          if_statement (2734,2)-(2735,12)
            if: 'if' (2734,2)-(2734,4)
            parenthesized_expression (2734,5)-(2734,15)
              (: '(' (2734,5)-(2734,6)
              unary_expression (2734,6)-(2734,14)
                !: '!' (2734,6)-(2734,7)
                identifier: 'inbrace' (2734,7)-(2734,14)
              ): ')' (2734,14)-(2734,15)
            break_statement (2735,6)-(2735,12)
              break: 'break' (2735,6)-(2735,11)
              ;: ';' (2735,11)-(2735,12)
          }: '}' (2736,5)-(2736,6)
      comment: '/*
     * We're now past the name or subexpression; the only things
     * which can happen now are a closing brace, one of the standard
     * parameter postmodifiers, or a history-style colon-modifier.
     *
     * Again, this duplicates tests for characters we're about to
     * examine properly later on.
     */' (2737,5)-(2744,8)
      if_statement (2745,5)-(2756,6)
        if: 'if' (2745,5)-(2745,7)
        parenthesized_expression (2745,8)-(2745,17)
          (: '(' (2745,8)-(2745,9)
          identifier: 'inbrace' (2745,9)-(2745,16)
          ): ')' (2745,16)-(2745,17)
        compound_statement (2745,18)-(2756,6)
          {: '{' (2745,18)-(2745,19)
          expression_statement (2746,2)-(2746,9)
            assignment_expression (2746,2)-(2746,8)
              identifier: 'c' (2746,2)-(2746,3)
              =: '=' (2746,4)-(2746,5)
              pointer_expression (2746,6)-(2746,8)
                *: '*' (2746,6)-(2746,7)
                identifier: 's' (2746,7)-(2746,8)
            ;: ';' (2746,8)-(2746,9)
          if_statement (2747,2)-(2755,3)
            if: 'if' (2747,2)-(2747,4)
            parenthesized_expression (2747,5)-(2752,32)
              (: '(' (2747,5)-(2747,6)
              binary_expression (2747,6)-(2752,31)
                binary_expression (2747,6)-(2752,14)
                  binary_expression (2747,6)-(2751,28)
                    binary_expression (2747,6)-(2751,14)
                      binary_expression (2747,6)-(2750,28)
                        binary_expression (2747,6)-(2750,14)
                          binary_expression (2747,6)-(2749,29)
                            binary_expression (2747,6)-(2749,14)
                              binary_expression (2747,6)-(2748,51)
                                binary_expression (2747,6)-(2748,38)
                                  binary_expression (2747,6)-(2748,26)
                                    binary_expression (2747,6)-(2748,14)
                                      unary_expression (2747,6)-(2747,17)
                                        !: '!' (2747,6)-(2747,7)
                                        call_expression (2747,7)-(2747,17)
                                          identifier: 'IS_DASH' (2747,7)-(2747,14)
                                          argument_list (2747,14)-(2747,17)
                                            (: '(' (2747,14)-(2747,15)
                                            identifier: 'c' (2747,15)-(2747,16)
                                            ): ')' (2747,16)-(2747,17)
                                      &&: '&&' (2747,18)-(2747,20)
                                      binary_expression (2748,6)-(2748,14)
                                        identifier: 'c' (2748,6)-(2748,7)
                                        !=: '!=' (2748,8)-(2748,10)
                                        char_literal (2748,11)-(2748,14)
                                          ': ''' (2748,11)-(2748,12)
                                          character: '+' (2748,12)-(2748,13)
                                          ': ''' (2748,13)-(2748,14)
                                    &&: '&&' (2748,15)-(2748,17)
                                    binary_expression (2748,18)-(2748,26)
                                      identifier: 'c' (2748,18)-(2748,19)
                                      !=: '!=' (2748,20)-(2748,22)
                                      char_literal (2748,23)-(2748,26)
                                        ': ''' (2748,23)-(2748,24)
                                        character: ':' (2748,24)-(2748,25)
                                        ': ''' (2748,25)-(2748,26)
                                  &&: '&&' (2748,27)-(2748,29)
                                  binary_expression (2748,30)-(2748,38)
                                    identifier: 'c' (2748,30)-(2748,31)
                                    !=: '!=' (2748,32)-(2748,34)
                                    char_literal (2748,35)-(2748,38)
                                      ': ''' (2748,35)-(2748,36)
                                      character: '%' (2748,36)-(2748,37)
                                      ': ''' (2748,37)-(2748,38)
                                &&: '&&' (2748,40)-(2748,42)
                                binary_expression (2748,43)-(2748,51)
                                  identifier: 'c' (2748,43)-(2748,44)
                                  !=: '!=' (2748,45)-(2748,47)
                                  char_literal (2748,48)-(2748,51)
                                    ': ''' (2748,48)-(2748,49)
                                    character: '/' (2748,49)-(2748,50)
                                    ': ''' (2748,50)-(2748,51)
                              &&: '&&' (2748,52)-(2748,54)
                              binary_expression (2749,6)-(2749,14)
                                identifier: 'c' (2749,6)-(2749,7)
                                !=: '!=' (2749,8)-(2749,10)
                                char_literal (2749,11)-(2749,14)
                                  ': ''' (2749,11)-(2749,12)
                                  character: '=' (2749,12)-(2749,13)
                                  ': ''' (2749,13)-(2749,14)
                            &&: '&&' (2749,15)-(2749,17)
                            binary_expression (2749,18)-(2749,29)
                              identifier: 'c' (2749,18)-(2749,19)
                              !=: '!=' (2749,20)-(2749,22)
                              identifier: 'Equals' (2749,23)-(2749,29)
                          &&: '&&' (2749,30)-(2749,32)
                          binary_expression (2750,6)-(2750,14)
                            identifier: 'c' (2750,6)-(2750,7)
                            !=: '!=' (2750,8)-(2750,10)
                            char_literal (2750,11)-(2750,14)
                              ': ''' (2750,11)-(2750,12)
                              character: '#' (2750,12)-(2750,13)
                              ': ''' (2750,13)-(2750,14)
                        &&: '&&' (2750,15)-(2750,17)
                        binary_expression (2750,18)-(2750,28)
                          identifier: 'c' (2750,18)-(2750,19)
                          !=: '!=' (2750,20)-(2750,22)
                          identifier: 'Pound' (2750,23)-(2750,28)
                      &&: '&&' (2750,29)-(2750,31)
                      binary_expression (2751,6)-(2751,14)
                        identifier: 'c' (2751,6)-(2751,7)
                        !=: '!=' (2751,8)-(2751,10)
                        char_literal (2751,11)-(2751,14)
                          ': ''' (2751,11)-(2751,12)
                          character: '?' (2751,12)-(2751,13)
                          ': ''' (2751,13)-(2751,14)
                    &&: '&&' (2751,15)-(2751,17)
                    binary_expression (2751,18)-(2751,28)
                      identifier: 'c' (2751,18)-(2751,19)
                      !=: '!=' (2751,20)-(2751,22)
                      identifier: 'Quest' (2751,23)-(2751,28)
                  &&: '&&' (2751,29)-(2751,31)
                  binary_expression (2752,6)-(2752,14)
                    identifier: 'c' (2752,6)-(2752,7)
                    !=: '!=' (2752,8)-(2752,10)
                    char_literal (2752,11)-(2752,14)
                      ': ''' (2752,11)-(2752,12)
                      character: '}' (2752,12)-(2752,13)
                      ': ''' (2752,13)-(2752,14)
                &&: '&&' (2752,15)-(2752,17)
                binary_expression (2752,18)-(2752,31)
                  identifier: 'c' (2752,18)-(2752,19)
                  !=: '!=' (2752,20)-(2752,22)
                  identifier: 'Outbrace' (2752,23)-(2752,31)
              ): ')' (2752,31)-(2752,32)
            compound_statement (2752,33)-(2755,3)
              {: '{' (2752,33)-(2752,34)
              expression_statement (2753,6)-(2753,31)
                call_expression (2753,6)-(2753,30)
                  identifier: 'zerr' (2753,6)-(2753,10)
                  argument_list (2753,10)-(2753,30)
                    (: '(' (2753,10)-(2753,11)
                    string_literal (2753,11)-(2753,29)
                      ": '"' (2753,11)-(2753,12)
                      string_content: 'bad substitution' (2753,12)-(2753,28)
                      ": '"' (2753,28)-(2753,29)
                    ): ')' (2753,29)-(2753,30)
                ;: ';' (2753,30)-(2753,31)
              return_statement (2754,6)-(2754,18)
                return: 'return' (2754,6)-(2754,12)
                null (2754,13)-(2754,17)
                  NULL: 'NULL' (2754,13)-(2754,17)
                ;: ';' (2754,17)-(2754,18)
              }: '}' (2755,2)-(2755,3)
          }: '}' (2756,5)-(2756,6)
      comment: '/*
     * Join arrays up if we're in quotes and there isn't some
     * override such as (@).
     * TODO: hmm, if we're called as part of some recursive
     * substitution do we want to delay this until we get back to
     * the top level?  Or is if there's a qt (i.e. this parameter
     * substitution is in quotes) always good enough?  Potentially
     * we may be OK by now --- all potential `@'s and subexpressions
     * have been handled, including any [@] index which comes up
     * by virtue of v->isarr being set to SCANPM_ISVAR_AT which
     * is now in isarr.
     *
     * However, if we are replacing multsub() with something that
     * doesn't mangle arrays, we may need to delay this step until after
     * the foo:- or foo:= or whatever that causes that.  Note the value
     * (string or array) at this point is irrelevant if we are going to
     * be doing that.  This would mean // and stuff get applied
     * arraywise even if quoted.  That's probably wrong, so maybe
     * this just stays.
     *
     * We do a separate stage of dearrayification in the YUK chunk,
     * I think mostly because of the way we make array or scalar
     * values appear to the caller.
     */' (2757,5)-(2780,8)
      if_statement (2781,5)-(2788,6)
        if: 'if' (2781,5)-(2781,7)
        parenthesized_expression (2781,8)-(2781,15)
          (: '(' (2781,8)-(2781,9)
          identifier: 'isarr' (2781,9)-(2781,14)
          ): ')' (2781,14)-(2781,15)
        compound_statement (2781,16)-(2788,6)
          {: '{' (2781,16)-(2781,17)
          if_statement (2782,2)-(2783,17)
            if: 'if' (2782,2)-(2782,4)
            parenthesized_expression (2782,5)-(2782,13)
              (: '(' (2782,5)-(2782,6)
              identifier: 'nojoin' (2782,6)-(2782,12)
              ): ')' (2782,12)-(2782,13)
            expression_statement (2783,6)-(2783,17)
              assignment_expression (2783,6)-(2783,16)
                identifier: 'isarr' (2783,6)-(2783,11)
                =: '=' (2783,12)-(2783,13)
                number_literal: '-1' (2783,14)-(2783,16)
              ;: ';' (2783,16)-(2783,17)
          if_statement (2784,2)-(2787,3)
            if: 'if' (2784,2)-(2784,4)
            parenthesized_expression (2784,5)-(2784,33)
              (: '(' (2784,5)-(2784,6)
              binary_expression (2784,6)-(2784,32)
                binary_expression (2784,6)-(2784,19)
                  identifier: 'qt' (2784,6)-(2784,8)
                  &&: '&&' (2784,9)-(2784,11)
                  unary_expression (2784,12)-(2784,19)
                    !: '!' (2784,12)-(2784,13)
                    identifier: 'getlen' (2784,13)-(2784,19)
                &&: '&&' (2784,20)-(2784,22)
                binary_expression (2784,23)-(2784,32)
                  identifier: 'isarr' (2784,23)-(2784,28)
                  >: '>' (2784,29)-(2784,30)
                  number_literal: '0' (2784,31)-(2784,32)
              ): ')' (2784,32)-(2784,33)
            compound_statement (2784,34)-(2787,3)
              {: '{' (2784,34)-(2784,35)
              expression_statement (2785,6)-(2785,34)
                assignment_expression (2785,6)-(2785,33)
                  identifier: 'val' (2785,6)-(2785,9)
                  =: '=' (2785,10)-(2785,11)
                  call_expression (2785,12)-(2785,33)
                    identifier: 'sepjoin' (2785,12)-(2785,19)
                    argument_list (2785,19)-(2785,33)
                      (: '(' (2785,19)-(2785,20)
                      identifier: 'aval' (2785,20)-(2785,24)
                      ,: ',' (2785,24)-(2785,25)
                      identifier: 'sep' (2785,26)-(2785,29)
                      ,: ',' (2785,29)-(2785,30)
                      number_literal: '1' (2785,31)-(2785,32)
                      ): ')' (2785,32)-(2785,33)
                ;: ';' (2785,33)-(2785,34)
              expression_statement (2786,6)-(2786,16)
                assignment_expression (2786,6)-(2786,15)
                  identifier: 'isarr' (2786,6)-(2786,11)
                  =: '=' (2786,12)-(2786,13)
                  number_literal: '0' (2786,14)-(2786,15)
                ;: ';' (2786,15)-(2786,16)
              }: '}' (2787,2)-(2787,3)
          }: '}' (2788,5)-(2788,6)
      expression_statement (2790,5)-(2790,15)
        assignment_expression (2790,5)-(2790,14)
          identifier: 'idend' (2790,5)-(2790,10)
          =: '=' (2790,11)-(2790,12)
          identifier: 's' (2790,13)-(2790,14)
        ;: ';' (2790,14)-(2790,15)
      if_statement (2791,5)-(2799,6)
        if: 'if' (2791,5)-(2791,7)
        parenthesized_expression (2791,8)-(2791,17)
          (: '(' (2791,8)-(2791,9)
          identifier: 'inbrace' (2791,9)-(2791,16)
          ): ')' (2791,16)-(2791,17)
        compound_statement (2791,18)-(2799,6)
          {: '{' (2791,18)-(2791,19)
          comment: '/*
	 * This is to match a closing double quote in case
	 * we didn't have a subexpression, e.g. ${"foo"}.
	 * This form is pointless, but logically it ought to work.
	 */' (2792,2)-(2796,5)
          while_statement (2797,2)-(2798,10)
            while: 'while' (2797,2)-(2797,7)
            parenthesized_expression (2797,8)-(2797,19)
              (: '(' (2797,8)-(2797,9)
              call_expression (2797,9)-(2797,18)
                identifier: 'inull' (2797,9)-(2797,14)
                argument_list (2797,14)-(2797,18)
                  (: '(' (2797,14)-(2797,15)
                  pointer_expression (2797,15)-(2797,17)
                    *: '*' (2797,15)-(2797,16)
                    identifier: 's' (2797,16)-(2797,17)
                  ): ')' (2797,17)-(2797,18)
              ): ')' (2797,18)-(2797,19)
            expression_statement (2798,6)-(2798,10)
              update_expression (2798,6)-(2798,9)
                identifier: 's' (2798,6)-(2798,7)
                ++: '++' (2798,7)-(2798,9)
              ;: ';' (2798,9)-(2798,10)
          }: '}' (2799,5)-(2799,6)
      comment: '/*
     * We don't yet know whether a `:' introduces a history-style
     * colon modifier or qualifies something like ${...:=...}.
     * But if we remember the colon here it's easy to check later.
     */' (2800,5)-(2804,8)
      if_statement (2805,5)-(2806,6)
        if: 'if' (2805,5)-(2805,7)
        parenthesized_expression (2805,8)-(2805,28)
          (: '(' (2805,8)-(2805,9)
          parenthesized_expression (2805,9)-(2805,27)
            (: '(' (2805,9)-(2805,10)
            assignment_expression (2805,10)-(2805,26)
              identifier: 'colf' (2805,10)-(2805,14)
              =: '=' (2805,15)-(2805,16)
              binary_expression (2805,17)-(2805,26)
                pointer_expression (2805,17)-(2805,19)
                  *: '*' (2805,17)-(2805,18)
                  identifier: 's' (2805,18)-(2805,19)
                ==: '==' (2805,20)-(2805,22)
                char_literal (2805,23)-(2805,26)
                  ': ''' (2805,23)-(2805,24)
                  character: ':' (2805,24)-(2805,25)
                  ': ''' (2805,25)-(2805,26)
            ): ')' (2805,26)-(2805,27)
          ): ')' (2805,27)-(2805,28)
        expression_statement (2806,2)-(2806,6)
          update_expression (2806,2)-(2806,5)
            identifier: 's' (2806,2)-(2806,3)
            ++: '++' (2806,3)-(2806,5)
          ;: ';' (2806,5)-(2806,6)
      comment: '/* fstr is to be the text following the substitution.  If we have *
     * braces, we look for it here, else we infer it later on.        */' (2809,5)-(2810,73)
      expression_statement (2811,5)-(2811,14)
        assignment_expression (2811,5)-(2811,13)
          identifier: 'fstr' (2811,5)-(2811,9)
          =: '=' (2811,10)-(2811,11)
          identifier: 's' (2811,12)-(2811,13)
        ;: ';' (2811,13)-(2811,14)
      if_statement (2812,5)-(2827,6)
        if: 'if' (2812,5)-(2812,7)
        parenthesized_expression (2812,8)-(2812,17)
          (: '(' (2812,8)-(2812,9)
          identifier: 'inbrace' (2812,9)-(2812,16)
          ): ')' (2812,16)-(2812,17)
        compound_statement (2812,18)-(2827,6)
          {: '{' (2812,18)-(2812,19)
          declaration (2813,2)-(2813,10)
            primitive_type: 'int' (2813,2)-(2813,5)
            identifier: 'bct' (2813,6)-(2813,9)
            ;: ';' (2813,9)-(2813,10)
          for_statement (2814,2)-(2819,3)
            for: 'for' (2814,2)-(2814,5)
            (: '(' (2814,6)-(2814,7)
            assignment_expression (2814,7)-(2814,14)
              identifier: 'bct' (2814,7)-(2814,10)
              =: '=' (2814,11)-(2814,12)
              number_literal: '1' (2814,13)-(2814,14)
            ;: ';' (2814,14)-(2814,15)
            parenthesized_expression (2814,16)-(2814,27)
              (: '(' (2814,16)-(2814,17)
              assignment_expression (2814,17)-(2814,26)
                identifier: 'c' (2814,17)-(2814,18)
                =: '=' (2814,19)-(2814,20)
                pointer_expression (2814,21)-(2814,26)
                  *: '*' (2814,21)-(2814,22)
                  identifier: 'fstr' (2814,22)-(2814,26)
              ): ')' (2814,26)-(2814,27)
            ;: ';' (2814,27)-(2814,28)
            update_expression (2814,29)-(2814,35)
              identifier: 'fstr' (2814,29)-(2814,33)
              ++: '++' (2814,33)-(2814,35)
            ): ')' (2814,35)-(2814,36)
            compound_statement (2814,37)-(2819,3)
              {: '{' (2814,37)-(2814,38)
              if_statement (2815,6)-(2818,9)
                if: 'if' (2815,6)-(2815,8)
                parenthesized_expression (2815,9)-(2815,23)
                  (: '(' (2815,9)-(2815,10)
                  binary_expression (2815,10)-(2815,22)
                    identifier: 'c' (2815,10)-(2815,11)
                    ==: '==' (2815,12)-(2815,14)
                    identifier: 'Inbrace' (2815,15)-(2815,22)
                  ): ')' (2815,22)-(2815,23)
                expression_statement (2816,3)-(2816,9)
                  update_expression (2816,3)-(2816,8)
                    identifier: 'bct' (2816,3)-(2816,6)
                    ++: '++' (2816,6)-(2816,8)
                  ;: ';' (2816,8)-(2816,9)
                else_clause (2817,6)-(2818,9)
                  else: 'else' (2817,6)-(2817,10)
                  if_statement (2817,11)-(2818,9)
                    if: 'if' (2817,11)-(2817,13)
                    parenthesized_expression (2817,14)-(2817,39)
                      (: '(' (2817,14)-(2817,15)
                      binary_expression (2817,15)-(2817,38)
                        binary_expression (2817,15)-(2817,28)
                          identifier: 'c' (2817,15)-(2817,16)
                          ==: '==' (2817,17)-(2817,19)
                          identifier: 'Outbrace' (2817,20)-(2817,28)
                        &&: '&&' (2817,29)-(2817,31)
                        unary_expression (2817,32)-(2817,38)
                          !: '!' (2817,32)-(2817,33)
                          update_expression (2817,33)-(2817,38)
                            --: '--' (2817,33)-(2817,35)
                            identifier: 'bct' (2817,35)-(2817,38)
                      ): ')' (2817,38)-(2817,39)
                    break_statement (2818,3)-(2818,9)
                      break: 'break' (2818,3)-(2818,8)
                      ;: ';' (2818,8)-(2818,9)
              }: '}' (2819,2)-(2819,3)
          if_statement (2821,2)-(2824,3)
            if: 'if' (2821,2)-(2821,4)
            parenthesized_expression (2821,5)-(2821,10)
              (: '(' (2821,5)-(2821,6)
              identifier: 'bct' (2821,6)-(2821,9)
              ): ')' (2821,9)-(2821,10)
            compound_statement (2821,11)-(2824,3)
              {: '{' (2821,11)-(2821,12)
              expression_statement (2822,6)-(2822,37)
                call_expression (2822,6)-(2822,36)
                  identifier: 'zerr' (2822,6)-(2822,10)
                  argument_list (2822,10)-(2822,36)
                    (: '(' (2822,10)-(2822,11)
                    string_literal (2822,11)-(2822,35)
                      ": '"' (2822,11)-(2822,12)
                      string_content: 'closing brace expected' (2822,12)-(2822,34)
                      ": '"' (2822,34)-(2822,35)
                    ): ')' (2822,35)-(2822,36)
                ;: ';' (2822,36)-(2822,37)
              return_statement (2823,6)-(2823,18)
                return: 'return' (2823,6)-(2823,12)
                null (2823,13)-(2823,17)
                  NULL: 'NULL' (2823,13)-(2823,17)
                ;: ';' (2823,17)-(2823,18)
              }: '}' (2824,2)-(2824,3)
          if_statement (2825,2)-(2826,21)
            if: 'if' (2825,2)-(2825,4)
            parenthesized_expression (2825,5)-(2825,8)
              (: '(' (2825,5)-(2825,6)
              identifier: 'c' (2825,6)-(2825,7)
              ): ')' (2825,7)-(2825,8)
            expression_statement (2826,6)-(2826,21)
              assignment_expression (2826,6)-(2826,20)
                pointer_expression (2826,6)-(2826,13)
                  *: '*' (2826,6)-(2826,7)
                  update_expression (2826,7)-(2826,13)
                    identifier: 'fstr' (2826,7)-(2826,11)
                    ++: '++' (2826,11)-(2826,13)
                =: '=' (2826,14)-(2826,15)
                char_literal (2826,16)-(2826,20)
                  ': ''' (2826,16)-(2826,17)
                  escape_sequence: '\0' (2826,17)-(2826,19)
                  ': ''' (2826,19)-(2826,20)
              ;: ';' (2826,20)-(2826,21)
          }: '}' (2827,5)-(2827,6)
      comment: '/* Check for ${..?..} or ${..=..} or one of those. *
     * Only works if the name is in braces.            */' (2829,5)-(2830,58)
      if_statement (2832,5)-(3519,6)
        if: 'if' (2832,5)-(2832,7)
        parenthesized_expression (2832,8)-(2839,17)
          (: '(' (2832,8)-(2832,9)
          binary_expression (2832,9)-(2839,16)
            identifier: 'inbrace' (2832,9)-(2832,16)
            &&: '&&' (2832,17)-(2832,19)
            parenthesized_expression (2832,20)-(2839,16)
              (: '(' (2832,20)-(2832,21)
              binary_expression (2832,21)-(2839,15)
                binary_expression (2832,21)-(2838,29)
                  binary_expression (2832,21)-(2838,15)
                    binary_expression (2832,21)-(2837,29)
                      binary_expression (2832,21)-(2837,15)
                        binary_expression (2832,21)-(2836,15)
                          binary_expression (2832,21)-(2835,30)
                            binary_expression (2832,21)-(2835,15)
                              binary_expression (2832,21)-(2834,15)
                                binary_expression (2832,21)-(2833,17)
                                  binary_expression (2832,21)-(2832,36)
                                    parenthesized_expression (2832,21)-(2832,29)
                                      (: '(' (2832,21)-(2832,22)
                                      assignment_expression (2832,22)-(2832,28)
                                        identifier: 'c' (2832,22)-(2832,23)
                                        =: '=' (2832,24)-(2832,25)
                                        pointer_expression (2832,26)-(2832,28)
                                          *: '*' (2832,26)-(2832,27)
                                          identifier: 's' (2832,27)-(2832,28)
                                      ): ')' (2832,28)-(2832,29)
                                    ==: '==' (2832,30)-(2832,32)
                                    char_literal (2832,33)-(2832,36)
                                      ': ''' (2832,33)-(2832,34)
                                      character: '+' (2832,34)-(2832,35)
                                      ': ''' (2832,35)-(2832,36)
                                  ||: '||' (2832,37)-(2832,39)
                                  call_expression (2833,7)-(2833,17)
                                    identifier: 'IS_DASH' (2833,7)-(2833,14)
                                    argument_list (2833,14)-(2833,17)
                                      (: '(' (2833,14)-(2833,15)
                                      identifier: 'c' (2833,15)-(2833,16)
                                      ): ')' (2833,16)-(2833,17)
                                ||: '||' (2833,18)-(2833,20)
                                binary_expression (2834,7)-(2834,15)
                                  identifier: 'c' (2834,7)-(2834,8)
                                  ==: '==' (2834,9)-(2834,11)
                                  char_literal (2834,12)-(2834,15)
                                    ': ''' (2834,12)-(2834,13)
                                    character: ':' (2834,13)-(2834,14)
                                    ': ''' (2834,14)-(2834,15)
                              ||: '||' (2834,16)-(2834,18)
                              comment: '/* i.e. a doubled colon */' (2834,19)-(2834,45)
                              binary_expression (2835,7)-(2835,15)
                                identifier: 'c' (2835,7)-(2835,8)
                                ==: '==' (2835,9)-(2835,11)
                                char_literal (2835,12)-(2835,15)
                                  ': ''' (2835,12)-(2835,13)
                                  character: '=' (2835,13)-(2835,14)
                                  ': ''' (2835,14)-(2835,15)
                            ||: '||' (2835,16)-(2835,18)
                            binary_expression (2835,19)-(2835,30)
                              identifier: 'c' (2835,19)-(2835,20)
                              ==: '==' (2835,21)-(2835,23)
                              identifier: 'Equals' (2835,24)-(2835,30)
                          ||: '||' (2835,31)-(2835,33)
                          binary_expression (2836,7)-(2836,15)
                            identifier: 'c' (2836,7)-(2836,8)
                            ==: '==' (2836,9)-(2836,11)
                            char_literal (2836,12)-(2836,15)
                              ': ''' (2836,12)-(2836,13)
                              character: '%' (2836,13)-(2836,14)
                              ': ''' (2836,14)-(2836,15)
                        ||: '||' (2836,16)-(2836,18)
                        binary_expression (2837,7)-(2837,15)
                          identifier: 'c' (2837,7)-(2837,8)
                          ==: '==' (2837,9)-(2837,11)
                          char_literal (2837,12)-(2837,15)
                            ': ''' (2837,12)-(2837,13)
                            character: '#' (2837,13)-(2837,14)
                            ': ''' (2837,14)-(2837,15)
                      ||: '||' (2837,16)-(2837,18)
                      binary_expression (2837,19)-(2837,29)
                        identifier: 'c' (2837,19)-(2837,20)
                        ==: '==' (2837,21)-(2837,23)
                        identifier: 'Pound' (2837,24)-(2837,29)
                    ||: '||' (2837,30)-(2837,32)
                    binary_expression (2838,7)-(2838,15)
                      identifier: 'c' (2838,7)-(2838,8)
                      ==: '==' (2838,9)-(2838,11)
                      char_literal (2838,12)-(2838,15)
                        ': ''' (2838,12)-(2838,13)
                        character: '?' (2838,13)-(2838,14)
                        ': ''' (2838,14)-(2838,15)
                  ||: '||' (2838,16)-(2838,18)
                  binary_expression (2838,19)-(2838,29)
                    identifier: 'c' (2838,19)-(2838,20)
                    ==: '==' (2838,21)-(2838,23)
                    identifier: 'Quest' (2838,24)-(2838,29)
                ||: '||' (2838,30)-(2838,32)
                binary_expression (2839,7)-(2839,15)
                  identifier: 'c' (2839,7)-(2839,8)
                  ==: '==' (2839,9)-(2839,11)
                  char_literal (2839,12)-(2839,15)
                    ': ''' (2839,12)-(2839,13)
                    character: '/' (2839,13)-(2839,14)
                    ': ''' (2839,14)-(2839,15)
              ): ')' (2839,15)-(2839,16)
          ): ')' (2839,16)-(2839,17)
        compound_statement (2839,18)-(3192,6)
          {: '{' (2839,18)-(2839,19)
          declaration (2840,2)-(2840,34)
            primitive_type: 'int' (2840,2)-(2840,5)
            init_declarator (2840,6)-(2840,33)
              identifier: 'eglob' (2840,6)-(2840,11)
              =: '=' (2840,12)-(2840,13)
              call_expression (2840,14)-(2840,33)
                identifier: 'isset' (2840,14)-(2840,19)
                argument_list (2840,19)-(2840,33)
                  (: '(' (2840,19)-(2840,20)
                  identifier: 'EXTENDEDGLOB' (2840,20)-(2840,32)
                  ): ')' (2840,32)-(2840,33)
            ;: ';' (2840,33)-(2840,34)
          comment: '/*
	 * Default index is 1 if no (I) or (I) gave zero.   But
	 * why don't we set the default explicitly at the start
	 * and massage any passed index where we set flnum anyway?
	 */' (2841,2)-(2845,5)
          if_statement (2846,2)-(2847,14)
            if: 'if' (2846,2)-(2846,4)
            parenthesized_expression (2846,5)-(2846,13)
              (: '(' (2846,5)-(2846,6)
              unary_expression (2846,6)-(2846,12)
                !: '!' (2846,6)-(2846,7)
                identifier: 'flnum' (2846,7)-(2846,12)
              ): ')' (2846,12)-(2846,13)
            expression_statement (2847,6)-(2847,14)
              update_expression (2847,6)-(2847,13)
                identifier: 'flnum' (2847,6)-(2847,11)
                ++: '++' (2847,11)-(2847,13)
              ;: ';' (2847,13)-(2847,14)
          if_statement (2848,2)-(2849,23)
            if: 'if' (2848,2)-(2848,4)
            parenthesized_expression (2848,5)-(2848,15)
              (: '(' (2848,5)-(2848,6)
              binary_expression (2848,6)-(2848,14)
                identifier: 'c' (2848,6)-(2848,7)
                ==: '==' (2848,8)-(2848,10)
                char_literal (2848,11)-(2848,14)
                  ': ''' (2848,11)-(2848,12)
                  character: '%' (2848,12)-(2848,13)
                  ': ''' (2848,13)-(2848,14)
              ): ')' (2848,14)-(2848,15)
            expression_statement (2849,6)-(2849,23)
              assignment_expression (2849,6)-(2849,22)
                identifier: 'flags' (2849,6)-(2849,11)
                |=: '|=' (2849,12)-(2849,14)
                identifier: 'SUB_END' (2849,15)-(2849,22)
              ;: ';' (2849,22)-(2849,23)
          comment: '/* Check for ${..%%..} or ${..##..} */' (2851,2)-(2851,40)
          if_statement (2852,2)-(2856,3)
            if: 'if' (2852,2)-(2852,4)
            parenthesized_expression (2852,5)-(2852,56)
              (: '(' (2852,5)-(2852,6)
              binary_expression (2852,6)-(2852,55)
                parenthesized_expression (2852,6)-(2852,42)
                  (: '(' (2852,6)-(2852,7)
                  binary_expression (2852,7)-(2852,41)
                    binary_expression (2852,7)-(2852,27)
                      binary_expression (2852,7)-(2852,15)
                        identifier: 'c' (2852,7)-(2852,8)
                        ==: '==' (2852,9)-(2852,11)
                        char_literal (2852,12)-(2852,15)
                          ': ''' (2852,12)-(2852,13)
                          character: '%' (2852,13)-(2852,14)
                          ': ''' (2852,14)-(2852,15)
                      ||: '||' (2852,16)-(2852,18)
                      binary_expression (2852,19)-(2852,27)
                        identifier: 'c' (2852,19)-(2852,20)
                        ==: '==' (2852,21)-(2852,23)
                        char_literal (2852,24)-(2852,27)
                          ': ''' (2852,24)-(2852,25)
                          character: '#' (2852,25)-(2852,26)
                          ': ''' (2852,26)-(2852,27)
                    ||: '||' (2852,28)-(2852,30)
                    binary_expression (2852,31)-(2852,41)
                      identifier: 'c' (2852,31)-(2852,32)
                      ==: '==' (2852,33)-(2852,35)
                      identifier: 'Pound' (2852,36)-(2852,41)
                  ): ')' (2852,41)-(2852,42)
                &&: '&&' (2852,43)-(2852,45)
                binary_expression (2852,46)-(2852,55)
                  identifier: 'c' (2852,46)-(2852,47)
                  ==: '==' (2852,48)-(2852,50)
                  subscript_expression (2852,51)-(2852,55)
                    identifier: 's' (2852,51)-(2852,52)
                    [: '[' (2852,52)-(2852,53)
                    number_literal: '1' (2852,53)-(2852,54)
                    ]: ']' (2852,54)-(2852,55)
              ): ')' (2852,55)-(2852,56)
            compound_statement (2852,57)-(2856,3)
              {: '{' (2852,57)-(2852,58)
              expression_statement (2853,6)-(2853,10)
                update_expression (2853,6)-(2853,9)
                  identifier: 's' (2853,6)-(2853,7)
                  ++: '++' (2853,7)-(2853,9)
                ;: ';' (2853,9)-(2853,10)
              comment: '/* we have %%, not %, or ##, not # */' (2854,6)-(2854,43)
              expression_statement (2855,6)-(2855,24)
                assignment_expression (2855,6)-(2855,23)
                  identifier: 'flags' (2855,6)-(2855,11)
                  |=: '|=' (2855,12)-(2855,14)
                  identifier: 'SUB_LONG' (2855,15)-(2855,23)
                ;: ';' (2855,23)-(2855,24)
              }: '}' (2856,2)-(2856,3)
          expression_statement (2857,2)-(2857,6)
            update_expression (2857,2)-(2857,5)
              identifier: 's' (2857,2)-(2857,3)
              ++: '++' (2857,3)-(2857,5)
            ;: ';' (2857,5)-(2857,6)
          if_statement (2858,2)-(2911,3)
            if: 'if' (2858,2)-(2858,4)
            parenthesized_expression (2858,5)-(2858,19)
              (: '(' (2858,5)-(2858,6)
              binary_expression (2858,6)-(2858,18)
                subscript_expression (2858,6)-(2858,11)
                  identifier: 's' (2858,6)-(2858,7)
                  [: '[' (2858,7)-(2858,8)
                  number_literal: '-1' (2858,8)-(2858,10)
                  ]: ']' (2858,10)-(2858,11)
                ==: '==' (2858,12)-(2858,14)
                char_literal (2858,15)-(2858,18)
                  ': ''' (2858,15)-(2858,16)
                  character: '/' (2858,16)-(2858,17)
                  ': ''' (2858,17)-(2858,18)
              ): ')' (2858,18)-(2858,19)
            compound_statement (2858,20)-(2911,3)
              {: '{' (2858,20)-(2858,21)
              declaration (2859,6)-(2859,16)
                primitive_type: 'char' (2859,6)-(2859,10)
                pointer_declarator (2859,11)-(2859,15)
                  *: '*' (2859,11)-(2859,12)
                  identifier: 'ptr' (2859,12)-(2859,15)
                ;: ';' (2859,15)-(2859,16)
              comment: '/*
	     * previous flags are irrelevant, except for (S) which
	     * indicates shortest substring; else look for longest,
	     * and (*) which temporarily enables extended globbing.
	     */' (2860,6)-(2864,9)
              expression_statement (2865,6)-(2865,72)
                assignment_expression (2865,6)-(2865,71)
                  identifier: 'flags' (2865,6)-(2865,11)
                  =: '=' (2865,12)-(2865,13)
                  binary_expression (2865,14)-(2865,71)
                    parenthesized_expression (2865,14)-(2865,51)
                      (: '(' (2865,14)-(2865,15)
                      conditional_expression (2865,15)-(2865,50)
                        parenthesized_expression (2865,15)-(2865,35)
                          (: '(' (2865,15)-(2865,16)
                          binary_expression (2865,16)-(2865,34)
                            identifier: 'flags' (2865,16)-(2865,21)
                            &: '&' (2865,22)-(2865,23)
                            identifier: 'SUB_SUBSTR' (2865,24)-(2865,34)
                          ): ')' (2865,34)-(2865,35)
                        ?: '?' (2865,36)-(2865,37)
                        number_literal: '0' (2865,38)-(2865,39)
                        :: ':' (2865,40)-(2865,41)
                        identifier: 'SUB_LONG' (2865,42)-(2865,50)
                      ): ')' (2865,50)-(2865,51)
                    |: '|' (2865,51)-(2865,52)
                    parenthesized_expression (2865,52)-(2865,71)
                      (: '(' (2865,52)-(2865,53)
                      binary_expression (2865,53)-(2865,70)
                        identifier: 'flags' (2865,53)-(2865,58)
                        &: '&' (2865,59)-(2865,60)
                        identifier: 'SUB_EGLOB' (2865,61)-(2865,70)
                      ): ')' (2865,70)-(2865,71)
                ;: ';' (2865,71)-(2865,72)
              if_statement (2866,6)-(2870,7)
                if: 'if' (2866,6)-(2866,8)
                parenthesized_expression (2866,9)-(2866,26)
                  (: '(' (2866,9)-(2866,10)
                  binary_expression (2866,10)-(2866,25)
                    parenthesized_expression (2866,10)-(2866,18)
                      (: '(' (2866,10)-(2866,11)
                      assignment_expression (2866,11)-(2866,17)
                        identifier: 'c' (2866,11)-(2866,12)
                        =: '=' (2866,13)-(2866,14)
                        pointer_expression (2866,15)-(2866,17)
                          *: '*' (2866,15)-(2866,16)
                          identifier: 's' (2866,16)-(2866,17)
                      ): ')' (2866,17)-(2866,18)
                    ==: '==' (2866,19)-(2866,21)
                    char_literal (2866,22)-(2866,25)
                      ': ''' (2866,22)-(2866,23)
                      character: '/' (2866,23)-(2866,24)
                      ': ''' (2866,24)-(2866,25)
                  ): ')' (2866,25)-(2866,26)
                compound_statement (2866,27)-(2870,7)
                  {: '{' (2866,27)-(2866,28)
                  comment: '/* doubled, so replace all occurrences */' (2867,3)-(2867,44)
                  expression_statement (2868,3)-(2868,23)
                    assignment_expression (2868,3)-(2868,22)
                      identifier: 'flags' (2868,3)-(2868,8)
                      |=: '|=' (2868,9)-(2868,11)
                      identifier: 'SUB_GLOBAL' (2868,12)-(2868,22)
                    ;: ';' (2868,22)-(2868,23)
                  expression_statement (2869,3)-(2869,12)
                    assignment_expression (2869,3)-(2869,11)
                      identifier: 'c' (2869,3)-(2869,4)
                      =: '=' (2869,5)-(2869,6)
                      pointer_expression (2869,7)-(2869,11)
                        *: '*' (2869,7)-(2869,8)
                        update_expression (2869,8)-(2869,11)
                          ++: '++' (2869,8)-(2869,10)
                          identifier: 's' (2869,10)-(2869,11)
                    ;: ';' (2869,11)-(2869,12)
                  }: '}' (2870,6)-(2870,7)
              comment: '/* Check for anchored substitution */' (2871,6)-(2871,43)
              if_statement (2872,6)-(2880,7)
                if: 'if' (2872,6)-(2872,8)
                parenthesized_expression (2872,9)-(2872,33)
                  (: '(' (2872,9)-(2872,10)
                  binary_expression (2872,10)-(2872,32)
                    binary_expression (2872,10)-(2872,18)
                      identifier: 'c' (2872,10)-(2872,11)
                      ==: '==' (2872,12)-(2872,14)
                      char_literal (2872,15)-(2872,18)
                        ': ''' (2872,15)-(2872,16)
                        character: '#' (2872,16)-(2872,17)
                        ': ''' (2872,17)-(2872,18)
                    ||: '||' (2872,19)-(2872,21)
                    binary_expression (2872,22)-(2872,32)
                      identifier: 'c' (2872,22)-(2872,23)
                      ==: '==' (2872,24)-(2872,26)
                      identifier: 'Pound' (2872,27)-(2872,32)
                  ): ')' (2872,32)-(2872,33)
                compound_statement (2872,34)-(2880,7)
                  {: '{' (2872,34)-(2872,35)
                  comment: '/*
		 * anchor at head: this is the `normal' case in
		 * getmatch and we only require the flag if SUB_END
		 * is also present.
		 */' (2873,3)-(2877,6)
                  expression_statement (2878,3)-(2878,22)
                    assignment_expression (2878,3)-(2878,21)
                      identifier: 'flags' (2878,3)-(2878,8)
                      |=: '|=' (2878,9)-(2878,11)
                      identifier: 'SUB_START' (2878,12)-(2878,21)
                    ;: ';' (2878,21)-(2878,22)
                  expression_statement (2879,3)-(2879,7)
                    update_expression (2879,3)-(2879,6)
                      identifier: 's' (2879,3)-(2879,4)
                      ++: '++' (2879,4)-(2879,6)
                    ;: ';' (2879,6)-(2879,7)
                  }: '}' (2880,6)-(2880,7)
              if_statement (2881,6)-(2885,7)
                if: 'if' (2881,6)-(2881,8)
                parenthesized_expression (2881,9)-(2881,20)
                  (: '(' (2881,9)-(2881,10)
                  binary_expression (2881,10)-(2881,19)
                    pointer_expression (2881,10)-(2881,12)
                      *: '*' (2881,10)-(2881,11)
                      identifier: 's' (2881,11)-(2881,12)
                    ==: '==' (2881,13)-(2881,15)
                    char_literal (2881,16)-(2881,19)
                      ': ''' (2881,16)-(2881,17)
                      character: '%' (2881,17)-(2881,18)
                      ': ''' (2881,18)-(2881,19)
                  ): ')' (2881,19)-(2881,20)
                compound_statement (2881,21)-(2885,7)
                  {: '{' (2881,21)-(2881,22)
                  comment: '/* anchor at tail */' (2882,3)-(2882,23)
                  expression_statement (2883,3)-(2883,20)
                    assignment_expression (2883,3)-(2883,19)
                      identifier: 'flags' (2883,3)-(2883,8)
                      |=: '|=' (2883,9)-(2883,11)
                      identifier: 'SUB_END' (2883,12)-(2883,19)
                    ;: ';' (2883,19)-(2883,20)
                  expression_statement (2884,3)-(2884,7)
                    update_expression (2884,3)-(2884,6)
                      identifier: 's' (2884,3)-(2884,4)
                      ++: '++' (2884,4)-(2884,6)
                    ;: ';' (2884,6)-(2884,7)
                  }: '}' (2885,6)-(2885,7)
              if_statement (2886,6)-(2889,7)
                if: 'if' (2886,6)-(2886,8)
                parenthesized_expression (2886,9)-(2886,41)
                  (: '(' (2886,9)-(2886,10)
                  unary_expression (2886,10)-(2886,40)
                    !: '!' (2886,10)-(2886,11)
                    parenthesized_expression (2886,11)-(2886,40)
                      (: '(' (2886,11)-(2886,12)
                      binary_expression (2886,12)-(2886,39)
                        identifier: 'flags' (2886,12)-(2886,17)
                        &: '&' (2886,18)-(2886,19)
                        parenthesized_expression (2886,20)-(2886,39)
                          (: '(' (2886,20)-(2886,21)
                          binary_expression (2886,21)-(2886,38)
                            identifier: 'SUB_START' (2886,21)-(2886,30)
                            |: '|' (2886,30)-(2886,31)
                            identifier: 'SUB_END' (2886,31)-(2886,38)
                          ): ')' (2886,38)-(2886,39)
                      ): ')' (2886,39)-(2886,40)
                  ): ')' (2886,40)-(2886,41)
                compound_statement (2886,42)-(2889,7)
                  {: '{' (2886,42)-(2886,43)
                  comment: '/* No anchor, so substring */' (2887,3)-(2887,32)
                  expression_statement (2888,3)-(2888,23)
                    assignment_expression (2888,3)-(2888,22)
                      identifier: 'flags' (2888,3)-(2888,8)
                      |=: '|=' (2888,9)-(2888,11)
                      identifier: 'SUB_SUBSTR' (2888,12)-(2888,22)
                    ;: ';' (2888,22)-(2888,23)
                  }: '}' (2889,6)-(2889,7)
              comment: '/*
	     * Find the / marking the end of the search pattern.
	     * If there isn't one, we're just going to delete that,
	     * i.e. replace it with an empty string.
	     *
	     * We used to use double backslashes to quote slashes,
	     * but actually that was buggy and using a single backslash
	     * is easier and more obvious.
	     */' (2890,6)-(2898,9)
              for_statement (2899,6)-(2908,7)
                for: 'for' (2899,6)-(2899,9)
                (: '(' (2899,10)-(2899,11)
                assignment_expression (2899,11)-(2899,18)
                  identifier: 'ptr' (2899,11)-(2899,14)
                  =: '=' (2899,15)-(2899,16)
                  identifier: 's' (2899,17)-(2899,18)
                ;: ';' (2899,18)-(2899,19)
                binary_expression (2899,20)-(2899,42)
                  parenthesized_expression (2899,20)-(2899,30)
                    (: '(' (2899,20)-(2899,21)
                    assignment_expression (2899,21)-(2899,29)
                      identifier: 'c' (2899,21)-(2899,22)
                      =: '=' (2899,23)-(2899,24)
                      pointer_expression (2899,25)-(2899,29)
                        *: '*' (2899,25)-(2899,26)
                        identifier: 'ptr' (2899,26)-(2899,29)
                    ): ')' (2899,29)-(2899,30)
                  &&: '&&' (2899,31)-(2899,33)
                  binary_expression (2899,34)-(2899,42)
                    identifier: 'c' (2899,34)-(2899,35)
                    !=: '!=' (2899,36)-(2899,38)
                    char_literal (2899,39)-(2899,42)
                      ': ''' (2899,39)-(2899,40)
                      character: '/' (2899,40)-(2899,41)
                      ': ''' (2899,41)-(2899,42)
                ;: ';' (2899,42)-(2899,43)
                update_expression (2899,44)-(2899,49)
                  identifier: 'ptr' (2899,44)-(2899,47)
                  ++: '++' (2899,47)-(2899,49)
                ): ')' (2899,49)-(2899,50)
                compound_statement (2900,6)-(2908,7)
                  {: '{' (2900,6)-(2900,7)
                  if_statement (2901,3)-(2907,4)
                    if: 'if' (2901,3)-(2901,5)
                    parenthesized_expression (2901,6)-(2901,61)
                      (: '(' (2901,6)-(2901,7)
                      binary_expression (2901,7)-(2901,60)
                        parenthesized_expression (2901,7)-(2901,50)
                          (: '(' (2901,7)-(2901,8)
                          binary_expression (2901,8)-(2901,49)
                            binary_expression (2901,8)-(2901,36)
                              binary_expression (2901,8)-(2901,18)
                                identifier: 'c' (2901,8)-(2901,9)
                                ==: '==' (2901,10)-(2901,12)
                                identifier: 'Bnull' (2901,13)-(2901,18)
                              ||: '||' (2901,19)-(2901,21)
                              binary_expression (2901,22)-(2901,36)
                                identifier: 'c' (2901,22)-(2901,23)
                                ==: '==' (2901,24)-(2901,26)
                                identifier: 'Bnullkeep' (2901,27)-(2901,36)
                            ||: '||' (2901,37)-(2901,39)
                            binary_expression (2901,40)-(2901,49)
                              identifier: 'c' (2901,40)-(2901,41)
                              ==: '==' (2901,42)-(2901,44)
                              char_literal (2901,45)-(2901,49)
                                ': ''' (2901,45)-(2901,46)
                                escape_sequence: '\\' (2901,46)-(2901,48)
                                ': ''' (2901,48)-(2901,49)
                          ): ')' (2901,49)-(2901,50)
                        &&: '&&' (2901,51)-(2901,53)
                        subscript_expression (2901,54)-(2901,60)
                          identifier: 'ptr' (2901,54)-(2901,57)
                          [: '[' (2901,57)-(2901,58)
                          number_literal: '1' (2901,58)-(2901,59)
                          ]: ']' (2901,59)-(2901,60)
                      ): ')' (2901,60)-(2901,61)
                    compound_statement (2902,3)-(2907,4)
                      {: '{' (2902,3)-(2902,4)
                      if_statement (2903,7)-(2906,10)
                        if: 'if' (2903,7)-(2903,9)
                        parenthesized_expression (2903,10)-(2903,25)
                          (: '(' (2903,10)-(2903,11)
                          binary_expression (2903,11)-(2903,24)
                            subscript_expression (2903,11)-(2903,17)
                              identifier: 'ptr' (2903,11)-(2903,14)
                              [: '[' (2903,14)-(2903,15)
                              number_literal: '1' (2903,15)-(2903,16)
                              ]: ']' (2903,16)-(2903,17)
                            ==: '==' (2903,18)-(2903,20)
                            char_literal (2903,21)-(2903,24)
                              ': ''' (2903,21)-(2903,22)
                              character: '/' (2903,22)-(2903,23)
                              ': ''' (2903,23)-(2903,24)
                          ): ')' (2903,24)-(2903,25)
                        expression_statement (2904,4)-(2904,15)
                          call_expression (2904,4)-(2904,14)
                            identifier: 'chuck' (2904,4)-(2904,9)
                            argument_list (2904,9)-(2904,14)
                              (: '(' (2904,9)-(2904,10)
                              identifier: 'ptr' (2904,10)-(2904,13)
                              ): ')' (2904,13)-(2904,14)
                          ;: ';' (2904,14)-(2904,15)
                        else_clause (2905,7)-(2906,10)
                          else: 'else' (2905,7)-(2905,11)
                          expression_statement (2906,4)-(2906,10)
                            update_expression (2906,4)-(2906,9)
                              identifier: 'ptr' (2906,4)-(2906,7)
                              ++: '++' (2906,7)-(2906,9)
                            ;: ';' (2906,9)-(2906,10)
                      }: '}' (2907,3)-(2907,4)
                  }: '}' (2908,6)-(2908,7)
              expression_statement (2909,6)-(2909,46)
                assignment_expression (2909,6)-(2909,45)
                  identifier: 'replstr' (2909,6)-(2909,13)
                  =: '=' (2909,14)-(2909,15)
                  conditional_expression (2909,16)-(2909,45)
                    parenthesized_expression (2909,16)-(2909,32)
                      (: '(' (2909,16)-(2909,17)
                      binary_expression (2909,17)-(2909,31)
                        pointer_expression (2909,17)-(2909,21)
                          *: '*' (2909,17)-(2909,18)
                          identifier: 'ptr' (2909,18)-(2909,21)
                        &&: '&&' (2909,22)-(2909,24)
                        subscript_expression (2909,25)-(2909,31)
                          identifier: 'ptr' (2909,25)-(2909,28)
                          [: '[' (2909,28)-(2909,29)
                          number_literal: '1' (2909,29)-(2909,30)
                          ]: ']' (2909,30)-(2909,31)
                      ): ')' (2909,31)-(2909,32)
                    ?: '?' (2909,33)-(2909,34)
                    binary_expression (2909,35)-(2909,40)
                      identifier: 'ptr' (2909,35)-(2909,38)
                      +: '+' (2909,38)-(2909,39)
                      number_literal: '1' (2909,39)-(2909,40)
                    :: ':' (2909,41)-(2909,42)
                    string_literal (2909,43)-(2909,45)
                      ": '"' (2909,43)-(2909,44)
                      ": '"' (2909,44)-(2909,45)
                ;: ';' (2909,45)-(2909,46)
              expression_statement (2910,6)-(2910,18)
                assignment_expression (2910,6)-(2910,17)
                  pointer_expression (2910,6)-(2910,10)
                    *: '*' (2910,6)-(2910,7)
                    identifier: 'ptr' (2910,7)-(2910,10)
                  =: '=' (2910,11)-(2910,12)
                  char_literal (2910,13)-(2910,17)
                    ': ''' (2910,13)-(2910,14)
                    escape_sequence: '\0' (2910,14)-(2910,16)
                    ': ''' (2910,16)-(2910,17)
                ;: ';' (2910,17)-(2910,18)
              }: '}' (2911,2)-(2911,3)
          comment: '/* See if this was ${...:-...}, ${...:=...}, etc. */' (2913,2)-(2913,54)
          if_statement (2914,2)-(2915,23)
            if: 'if' (2914,2)-(2914,4)
            parenthesized_expression (2914,5)-(2914,11)
              (: '(' (2914,5)-(2914,6)
              identifier: 'colf' (2914,6)-(2914,10)
              ): ')' (2914,10)-(2914,11)
            expression_statement (2915,6)-(2915,23)
              assignment_expression (2915,6)-(2915,22)
                identifier: 'flags' (2915,6)-(2915,11)
                |=: '|=' (2915,12)-(2915,14)
                identifier: 'SUB_ALL' (2915,15)-(2915,22)
              ;: ';' (2915,22)-(2915,23)
          comment: '/*
	 * With no special flags, i.e. just a # or % or whatever,
	 * the matched portion is removed and we keep the rest.
	 * We also want the rest when we're doing a substitution.
	 */' (2916,2)-(2920,5)
          if_statement (2921,2)-(2922,24)
            if: 'if' (2921,2)-(2921,4)
            parenthesized_expression (2921,5)-(2921,64)
              (: '(' (2921,5)-(2921,6)
              unary_expression (2921,6)-(2921,63)
                !: '!' (2921,6)-(2921,7)
                parenthesized_expression (2921,7)-(2921,63)
                  (: '(' (2921,7)-(2921,8)
                  binary_expression (2921,8)-(2921,62)
                    identifier: 'flags' (2921,8)-(2921,13)
                    &: '&' (2921,14)-(2921,15)
                    parenthesized_expression (2921,16)-(2921,62)
                      (: '(' (2921,16)-(2921,17)
                      binary_expression (2921,17)-(2921,61)
                        binary_expression (2921,17)-(2921,53)
                          binary_expression (2921,17)-(2921,44)
                            binary_expression (2921,17)-(2921,35)
                              identifier: 'SUB_MATCH' (2921,17)-(2921,26)
                              |: '|' (2921,26)-(2921,27)
                              identifier: 'SUB_REST' (2921,27)-(2921,35)
                            |: '|' (2921,35)-(2921,36)
                            identifier: 'SUB_BIND' (2921,36)-(2921,44)
                          |: '|' (2921,44)-(2921,45)
                          identifier: 'SUB_EIND' (2921,45)-(2921,53)
                        |: '|' (2921,53)-(2921,54)
                        identifier: 'SUB_LEN' (2921,54)-(2921,61)
                      ): ')' (2921,61)-(2921,62)
                  ): ')' (2921,62)-(2921,63)
              ): ')' (2921,63)-(2921,64)
            expression_statement (2922,6)-(2922,24)
              assignment_expression (2922,6)-(2922,23)
                identifier: 'flags' (2922,6)-(2922,11)
                |=: '|=' (2922,12)-(2922,14)
                identifier: 'SUB_REST' (2922,15)-(2922,23)
              ;: ';' (2922,23)-(2922,24)
          comment: '/*
	 * With ":" treat a value as unset if the variable is set but
	 * - (array) contains no elements
	 * - (scalar) contains an empty string
	 */' (2924,2)-(2928,5)
          if_statement (2929,2)-(2932,3)
            if: 'if' (2929,2)-(2929,4)
            parenthesized_expression (2929,5)-(2929,22)
              (: '(' (2929,5)-(2929,6)
              binary_expression (2929,6)-(2929,21)
                identifier: 'colf' (2929,6)-(2929,10)
                &&: '&&' (2929,11)-(2929,13)
                unary_expression (2929,14)-(2929,21)
                  !: '!' (2929,14)-(2929,15)
                  identifier: 'vunset' (2929,15)-(2929,21)
              ): ')' (2929,21)-(2929,22)
            compound_statement (2929,23)-(2932,3)
              {: '{' (2929,23)-(2929,24)
              expression_statement (2930,6)-(2930,71)
                assignment_expression (2930,6)-(2930,70)
                  identifier: 'vunset' (2930,6)-(2930,12)
                  =: '=' (2930,13)-(2930,14)
                  conditional_expression (2930,15)-(2930,70)
                    parenthesized_expression (2930,15)-(2930,22)
                      (: '(' (2930,15)-(2930,16)
                      identifier: 'isarr' (2930,16)-(2930,21)
                      ): ')' (2930,21)-(2930,22)
                    ?: '?' (2930,23)-(2930,24)
                    unary_expression (2930,25)-(2930,31)
                      !: '!' (2930,25)-(2930,26)
                      pointer_expression (2930,26)-(2930,31)
                        *: '*' (2930,26)-(2930,27)
                        identifier: 'aval' (2930,27)-(2930,31)
                    :: ':' (2930,32)-(2930,33)
                    binary_expression (2930,34)-(2930,70)
                      unary_expression (2930,34)-(2930,39)
                        !: '!' (2930,34)-(2930,35)
                        pointer_expression (2930,35)-(2930,39)
                          *: '*' (2930,35)-(2930,36)
                          identifier: 'val' (2930,36)-(2930,39)
                      ||: '||' (2930,40)-(2930,42)
                      parenthesized_expression (2930,43)-(2930,70)
                        (: '(' (2930,43)-(2930,44)
                        binary_expression (2930,44)-(2930,69)
                          binary_expression (2930,44)-(2930,58)
                            pointer_expression (2930,44)-(2930,48)
                              *: '*' (2930,44)-(2930,45)
                              identifier: 'val' (2930,45)-(2930,48)
                            ==: '==' (2930,49)-(2930,51)
                            identifier: 'Nularg' (2930,52)-(2930,58)
                          &&: '&&' (2930,59)-(2930,61)
                          unary_expression (2930,62)-(2930,69)
                            !: '!' (2930,62)-(2930,63)
                            subscript_expression (2930,63)-(2930,69)
                              identifier: 'val' (2930,63)-(2930,66)
                              [: '[' (2930,66)-(2930,67)
                              number_literal: '1' (2930,67)-(2930,68)
                              ]: ']' (2930,68)-(2930,69)
                        ): ')' (2930,69)-(2930,70)
                ;: ';' (2930,70)-(2930,71)
              expression_statement (2931,6)-(2931,19)
                assignment_expression (2931,6)-(2931,18)
                  identifier: 'vunset' (2931,6)-(2931,12)
                  *=: '*=' (2931,13)-(2931,15)
                  number_literal: '-1' (2931,16)-(2931,18)
                ;: ';' (2931,18)-(2931,19)
              comment: '/* Record that vunset was originally false */' (2931,20)-(2931,65)
              }: '}' (2932,2)-(2932,3)
          switch_statement (2934,2)-(3191,3)
            switch: 'switch' (2934,2)-(2934,8)
            parenthesized_expression (2934,9)-(2934,16)
              (: '(' (2934,9)-(2934,10)
              subscript_expression (2934,10)-(2934,15)
                identifier: 's' (2934,10)-(2934,11)
                [: '[' (2934,11)-(2934,12)
                number_literal: '-1' (2934,12)-(2934,14)
                ]: ']' (2934,14)-(2934,15)
              ): ')' (2934,15)-(2934,16)
            compound_statement (2934,17)-(3191,3)
              {: '{' (2934,17)-(2934,18)
              case_statement (2935,2)-(2942,17)
                case: 'case' (2935,2)-(2935,6)
                char_literal (2935,7)-(2935,10)
                  ': ''' (2935,7)-(2935,8)
                  character: '+' (2935,8)-(2935,9)
                  ': ''' (2935,9)-(2935,10)
                :: ':' (2935,10)-(2935,11)
                if_statement (2936,6)-(2941,7)
                  if: 'if' (2936,6)-(2936,8)
                  parenthesized_expression (2936,9)-(2936,17)
                    (: '(' (2936,9)-(2936,10)
                    identifier: 'vunset' (2936,10)-(2936,16)
                    ): ')' (2936,16)-(2936,17)
                  compound_statement (2936,18)-(2941,7)
                    {: '{' (2936,18)-(2936,19)
                    expression_statement (2937,3)-(2937,23)
                      assignment_expression (2937,3)-(2937,22)
                        identifier: 'val' (2937,3)-(2937,6)
                        =: '=' (2937,7)-(2937,8)
                        call_expression (2937,9)-(2937,22)
                          identifier: 'dupstring' (2937,9)-(2937,18)
                          argument_list (2937,18)-(2937,22)
                            (: '(' (2937,18)-(2937,19)
                            string_literal (2937,19)-(2937,21)
                              ": '"' (2937,19)-(2937,20)
                              ": '"' (2937,20)-(2937,21)
                            ): ')' (2937,21)-(2937,22)
                      ;: ';' (2937,22)-(2937,23)
                    expression_statement (2938,3)-(2938,14)
                      assignment_expression (2938,3)-(2938,13)
                        identifier: 'copied' (2938,3)-(2938,9)
                        =: '=' (2938,10)-(2938,11)
                        number_literal: '1' (2938,12)-(2938,13)
                      ;: ';' (2938,13)-(2938,14)
                    expression_statement (2939,3)-(2939,13)
                      assignment_expression (2939,3)-(2939,12)
                        identifier: 'isarr' (2939,3)-(2939,8)
                        =: '=' (2939,9)-(2939,10)
                        number_literal: '0' (2939,11)-(2939,12)
                      ;: ';' (2939,12)-(2939,13)
                    break_statement (2940,3)-(2940,9)
                      break: 'break' (2940,3)-(2940,8)
                      ;: ';' (2940,8)-(2940,9)
                    }: '}' (2941,6)-(2941,7)
                expression_statement (2942,6)-(2942,17)
                  assignment_expression (2942,6)-(2942,16)
                    identifier: 'vunset' (2942,6)-(2942,12)
                    =: '=' (2942,13)-(2942,14)
                    number_literal: '1' (2942,15)-(2942,16)
                  ;: ';' (2942,16)-(2942,17)
              comment: '/* Fall Through! */' (2943,2)-(2943,21)
              case_statement (2944,2)-(2944,11)
                case: 'case' (2944,2)-(2944,6)
                char_literal (2944,7)-(2944,10)
                  ': ''' (2944,7)-(2944,8)
                  character: '-' (2944,8)-(2944,9)
                  ': ''' (2944,9)-(2944,10)
                :: ':' (2944,10)-(2944,11)
              case_statement (2945,2)-(2976,12)
                case: 'case' (2945,2)-(2945,6)
                identifier: 'Dash' (2945,7)-(2945,11)
                :: ':' (2945,11)-(2945,12)
                if_statement (2946,6)-(2975,7)
                  if: 'if' (2946,6)-(2946,8)
                  parenthesized_expression (2946,9)-(2946,17)
                    (: '(' (2946,9)-(2946,10)
                    identifier: 'vunset' (2946,10)-(2946,16)
                    ): ')' (2946,16)-(2946,17)
                  compound_statement (2946,18)-(2975,7)
                    {: '{' (2946,18)-(2946,19)
                    declaration (2947,3)-(2947,19)
                      primitive_type: 'int' (2947,3)-(2947,6)
                      identifier: 'split_flags' (2947,7)-(2947,18)
                      ;: ';' (2947,18)-(2947,19)
                    expression_statement (2948,3)-(2948,22)
                      assignment_expression (2948,3)-(2948,21)
                        identifier: 'val' (2948,3)-(2948,6)
                        =: '=' (2948,7)-(2948,8)
                        call_expression (2948,9)-(2948,21)
                          identifier: 'dupstring' (2948,9)-(2948,18)
                          argument_list (2948,18)-(2948,21)
                            (: '(' (2948,18)-(2948,19)
                            identifier: 's' (2948,19)-(2948,20)
                            ): ')' (2948,20)-(2948,21)
                      ;: ';' (2948,21)-(2948,22)
                    comment: '/* If word-splitting is enabled, we ask multsub() to split
		 * the substituted string at unquoted whitespace.  Then, we
		 * turn off spbreak so that no further splitting occurs.
		 * This allows a construct such as ${1+"$@"} to correctly
		 * keep its array splits, and weird constructs such as
		 * ${str+"one two" "3 2 1" foo "$str"} to only be split
		 * at the unquoted spaces. */' (2949,3)-(2955,32)
                    if_statement (2956,3)-(2967,4)
                      if: 'if' (2956,3)-(2956,5)
                      parenthesized_expression (2956,6)-(2956,15)
                        (: '(' (2956,6)-(2956,7)
                        identifier: 'spbreak' (2956,7)-(2956,14)
                        ): ')' (2956,14)-(2956,15)
                      compound_statement (2956,16)-(2960,4)
                        {: '{' (2956,16)-(2956,17)
                        expression_statement (2957,7)-(2957,41)
                          assignment_expression (2957,7)-(2957,40)
                            identifier: 'split_flags' (2957,7)-(2957,18)
                            =: '=' (2957,19)-(2957,20)
                            identifier: 'PREFORK_SHWORDSPLIT' (2957,21)-(2957,40)
                          ;: ';' (2957,40)-(2957,41)
                        if_statement (2958,7)-(2959,33)
                          if: 'if' (2958,7)-(2958,9)
                          parenthesized_expression (2958,10)-(2958,18)
                            (: '(' (2958,10)-(2958,11)
                            unary_expression (2958,11)-(2958,17)
                              !: '!' (2958,11)-(2958,12)
                              identifier: 'aspar' (2958,12)-(2958,17)
                            ): ')' (2958,17)-(2958,18)
                          expression_statement (2959,4)-(2959,33)
                            assignment_expression (2959,4)-(2959,32)
                              identifier: 'split_flags' (2959,4)-(2959,15)
                              |=: '|=' (2959,16)-(2959,18)
                              identifier: 'PREFORK_SPLIT' (2959,19)-(2959,32)
                            ;: ';' (2959,32)-(2959,33)
                        }: '}' (2960,3)-(2960,4)
                      else_clause (2960,5)-(2967,4)
                        else: 'else' (2960,5)-(2960,9)
                        compound_statement (2960,10)-(2967,4)
                          {: '{' (2960,10)-(2960,11)
                          comment: '/*
		     * It's not good enough not passing the flag to use
		     * SHWORDSPLIT, because when we get to a nested
		     * paramsubst we need to ignore isset(SHWORDSPLIT).
		     */' (2961,7)-(2965,10)
                          expression_statement (2966,7)-(2966,43)
                            assignment_expression (2966,7)-(2966,42)
                              identifier: 'split_flags' (2966,7)-(2966,18)
                              =: '=' (2966,19)-(2966,20)
                              identifier: 'PREFORK_NOSHWORDSPLIT' (2966,21)-(2966,42)
                            ;: ';' (2966,42)-(2966,43)
                          }: '}' (2967,3)-(2967,4)
                    expression_statement (2968,3)-(2969,29)
                      call_expression (2968,3)-(2969,28)
                        identifier: 'multsub' (2968,3)-(2968,10)
                        argument_list (2968,10)-(2969,28)
                          (: '(' (2968,10)-(2968,11)
                          pointer_expression (2968,11)-(2968,15)
                            &: '&' (2968,11)-(2968,12)
                            identifier: 'val' (2968,12)-(2968,15)
                          ,: ',' (2968,15)-(2968,16)
                          identifier: 'split_flags' (2968,17)-(2968,28)
                          ,: ',' (2968,28)-(2968,29)
                          parenthesized_expression (2968,30)-(2968,52)
                            (: '(' (2968,30)-(2968,31)
                            conditional_expression (2968,31)-(2968,51)
                              identifier: 'aspar' (2968,31)-(2968,36)
                              ?: '?' (2968,37)-(2968,38)
                              null (2968,39)-(2968,43)
                                NULL: 'NULL' (2968,39)-(2968,43)
                              :: ':' (2968,44)-(2968,45)
                              pointer_expression (2968,46)-(2968,51)
                                &: '&' (2968,46)-(2968,47)
                                identifier: 'aval' (2968,47)-(2968,51)
                            ): ')' (2968,51)-(2968,52)
                          ,: ',' (2968,52)-(2968,53)
                          pointer_expression (2969,4)-(2969,10)
                            &: '&' (2969,4)-(2969,5)
                            identifier: 'isarr' (2969,5)-(2969,10)
                          ,: ',' (2969,10)-(2969,11)
                          null (2969,12)-(2969,16)
                            NULL: 'NULL' (2969,12)-(2969,16)
                          ,: ',' (2969,16)-(2969,17)
                          pointer_expression (2969,18)-(2969,27)
                            &: '&' (2969,18)-(2969,19)
                            identifier: 'ms_flags' (2969,19)-(2969,27)
                          ): ')' (2969,27)-(2969,28)
                      ;: ';' (2969,28)-(2969,29)
                    expression_statement (2970,3)-(2970,14)
                      assignment_expression (2970,3)-(2970,13)
                        identifier: 'copied' (2970,3)-(2970,9)
                        =: '=' (2970,10)-(2970,11)
                        number_literal: '1' (2970,12)-(2970,13)
                      ;: ';' (2970,13)-(2970,14)
                    expression_statement (2971,3)-(2971,15)
                      assignment_expression (2971,3)-(2971,14)
                        identifier: 'spbreak' (2971,3)-(2971,10)
                        =: '=' (2971,11)-(2971,12)
                        number_literal: '0' (2971,13)-(2971,14)
                      ;: ';' (2971,14)-(2971,15)
                    comment: '/* Leave globsubst on if forced */' (2972,3)-(2972,37)
                    if_statement (2973,3)-(2974,21)
                      if: 'if' (2973,3)-(2973,5)
                      parenthesized_expression (2973,6)-(2973,22)
                        (: '(' (2973,6)-(2973,7)
                        binary_expression (2973,7)-(2973,21)
                          identifier: 'globsubst' (2973,7)-(2973,16)
                          !=: '!=' (2973,17)-(2973,19)
                          number_literal: '2' (2973,20)-(2973,21)
                        ): ')' (2973,21)-(2973,22)
                      expression_statement (2974,7)-(2974,21)
                        assignment_expression (2974,7)-(2974,20)
                          identifier: 'globsubst' (2974,7)-(2974,16)
                          =: '=' (2974,17)-(2974,18)
                          number_literal: '0' (2974,19)-(2974,20)
                        ;: ';' (2974,20)-(2974,21)
                    }: '}' (2975,6)-(2975,7)
                break_statement (2976,6)-(2976,12)
                  break: 'break' (2976,6)-(2976,11)
                  ;: ';' (2976,11)-(2976,12)
              case_statement (2977,2)-(2985,10)
                case: 'case' (2977,2)-(2977,6)
                char_literal (2977,7)-(2977,10)
                  ': ''' (2977,7)-(2977,8)
                  character: ':' (2977,8)-(2977,9)
                  ': ''' (2977,9)-(2977,10)
                :: ':' (2977,10)-(2977,11)
                comment: '/* this could be either `::=', unconditional assignment
	     * or a ${name:offset:length} with an empty offset */' (2978,6)-(2979,59)
                if_statement (2980,6)-(2983,7)
                  if: 'if' (2980,6)-(2980,8)
                  parenthesized_expression (2980,9)-(2980,36)
                    (: '(' (2980,9)-(2980,10)
                    binary_expression (2980,10)-(2980,35)
                      binary_expression (2980,10)-(2980,19)
                        pointer_expression (2980,10)-(2980,12)
                          *: '*' (2980,10)-(2980,11)
                          identifier: 's' (2980,11)-(2980,12)
                        !=: '!=' (2980,13)-(2980,15)
                        char_literal (2980,16)-(2980,19)
                          ': ''' (2980,16)-(2980,17)
                          character: '=' (2980,17)-(2980,18)
                          ': ''' (2980,18)-(2980,19)
                      &&: '&&' (2980,20)-(2980,22)
                      binary_expression (2980,23)-(2980,35)
                        pointer_expression (2980,23)-(2980,25)
                          *: '*' (2980,23)-(2980,24)
                          identifier: 's' (2980,24)-(2980,25)
                        !=: '!=' (2980,26)-(2980,28)
                        identifier: 'Equals' (2980,29)-(2980,35)
                    ): ')' (2980,35)-(2980,36)
                  compound_statement (2980,37)-(2983,7)
                    {: '{' (2980,37)-(2980,38)
                    expression_statement (2981,3)-(2981,10)
                      assignment_expression (2981,3)-(2981,9)
                        identifier: 's' (2981,3)-(2981,4)
                        -=: '-=' (2981,5)-(2981,7)
                        number_literal: '1' (2981,8)-(2981,9)
                      ;: ';' (2981,9)-(2981,10)
                    goto_statement (2982,3)-(2982,23)
                      goto: 'goto' (2982,3)-(2982,7)
                      statement_identifier: 'colonsubscript' (2982,8)-(2982,22)
                      ;: ';' (2982,22)-(2982,23)
                    }: '}' (2983,6)-(2983,7)
                expression_statement (2984,6)-(2984,17)
                  assignment_expression (2984,6)-(2984,16)
                    identifier: 'vunset' (2984,6)-(2984,12)
                    =: '=' (2984,13)-(2984,14)
                    number_literal: '1' (2984,15)-(2984,16)
                  ;: ';' (2984,16)-(2984,17)
                expression_statement (2985,6)-(2985,10)
                  update_expression (2985,6)-(2985,9)
                    identifier: 's' (2985,6)-(2985,7)
                    ++: '++' (2985,7)-(2985,9)
                  ;: ';' (2985,9)-(2985,10)
              comment: '/* Fall through */' (2986,6)-(2986,24)
              case_statement (2987,2)-(2987,11)
                case: 'case' (2987,2)-(2987,6)
                char_literal (2987,7)-(2987,10)
                  ': ''' (2987,7)-(2987,8)
                  character: '=' (2987,8)-(2987,9)
                  ': ''' (2987,9)-(2987,10)
                :: ':' (2987,10)-(2987,11)
              case_statement (2988,2)-(3067,12)
                case: 'case' (2988,2)-(2988,6)
                identifier: 'Equals' (2988,7)-(2988,13)
                :: ':' (2988,13)-(2988,14)
                if_statement (2989,6)-(3066,7)
                  if: 'if' (2989,6)-(2989,8)
                  parenthesized_expression (2989,9)-(2989,17)
                    (: '(' (2989,9)-(2989,10)
                    identifier: 'vunset' (2989,10)-(2989,16)
                    ): ')' (2989,16)-(2989,17)
                  compound_statement (2989,18)-(3066,7)
                    {: '{' (2989,18)-(2989,19)
                    declaration (2990,3)-(2990,21)
                      primitive_type: 'char' (2990,3)-(2990,7)
                      init_declarator (2990,8)-(2990,20)
                        identifier: 'sav' (2990,8)-(2990,11)
                        =: '=' (2990,12)-(2990,13)
                        pointer_expression (2990,14)-(2990,20)
                          *: '*' (2990,14)-(2990,15)
                          identifier: 'idend' (2990,15)-(2990,20)
                      ;: ';' (2990,20)-(2990,21)
                    declaration (2991,3)-(2991,22)
                      primitive_type: 'int' (2991,3)-(2991,6)
                      identifier: 'l' (2991,7)-(2991,8)
                      ,: ',' (2991,8)-(2991,9)
                      identifier: 'split_flags' (2991,10)-(2991,21)
                      ;: ';' (2991,21)-(2991,22)
                    expression_statement (2993,3)-(2993,17)
                      assignment_expression (2993,3)-(2993,16)
                        pointer_expression (2993,3)-(2993,9)
                          *: '*' (2993,3)-(2993,4)
                          identifier: 'idend' (2993,4)-(2993,9)
                        =: '=' (2993,10)-(2993,11)
                        char_literal (2993,12)-(2993,16)
                          ': ''' (2993,12)-(2993,13)
                          escape_sequence: '\0' (2993,13)-(2993,15)
                          ': ''' (2993,15)-(2993,16)
                      ;: ';' (2993,16)-(2993,17)
                    expression_statement (2994,3)-(2994,22)
                      assignment_expression (2994,3)-(2994,21)
                        identifier: 'val' (2994,3)-(2994,6)
                        =: '=' (2994,7)-(2994,8)
                        call_expression (2994,9)-(2994,21)
                          identifier: 'dupstring' (2994,9)-(2994,18)
                          argument_list (2994,18)-(2994,21)
                            (: '(' (2994,18)-(2994,19)
                            identifier: 's' (2994,19)-(2994,20)
                            ): ')' (2994,20)-(2994,21)
                      ;: ';' (2994,21)-(2994,22)
                    if_statement (2995,3)-(3010,4)
                      if: 'if' (2995,3)-(2995,5)
                      parenthesized_expression (2995,6)-(2995,24)
                        (: '(' (2995,6)-(2995,7)
                        binary_expression (2995,7)-(2995,23)
                          identifier: 'spsep' (2995,7)-(2995,12)
                          ||: '||' (2995,13)-(2995,15)
                          unary_expression (2995,16)-(2995,23)
                            !: '!' (2995,16)-(2995,17)
                            identifier: 'arrasg' (2995,17)-(2995,23)
                        ): ')' (2995,23)-(2995,24)
                      compound_statement (2995,25)-(3002,4)
                        {: '{' (2995,25)-(2995,26)
                        comment: '/* POSIX requires PREFORK_SINGLE semantics here, but
		     * traditional zsh used PREFORK_NOSHWORDSPLIT.  Base
		     * behavior on caller choice of PREFORK_SHWORDSPLIT. */' (2996,7)-(2998,62)
                        expression_statement (2999,7)-(3001,39)
                          call_expression (2999,7)-(3001,38)
                            identifier: 'multsub' (2999,7)-(2999,14)
                            argument_list (2999,14)-(3001,38)
                              (: '(' (2999,14)-(2999,15)
                              pointer_expression (2999,15)-(2999,19)
                                &: '&' (2999,15)-(2999,16)
                                identifier: 'val' (2999,16)-(2999,19)
                              ,: ',' (2999,19)-(2999,20)
                              conditional_expression (3000,8)-(3000,56)
                                identifier: 'spbreak' (3000,8)-(3000,15)
                                ?: '?' (3000,16)-(3000,17)
                                identifier: 'PREFORK_SINGLE' (3000,18)-(3000,32)
                                :: ':' (3000,33)-(3000,34)
                                identifier: 'PREFORK_NOSHWORDSPLIT' (3000,35)-(3000,56)
                              ,: ',' (3000,56)-(3000,57)
                              null (3001,8)-(3001,12)
                                NULL: 'NULL' (3001,8)-(3001,12)
                              ,: ',' (3001,12)-(3001,13)
                              pointer_expression (3001,14)-(3001,20)
                                &: '&' (3001,14)-(3001,15)
                                identifier: 'isarr' (3001,15)-(3001,20)
                              ,: ',' (3001,20)-(3001,21)
                              null (3001,22)-(3001,26)
                                NULL: 'NULL' (3001,22)-(3001,26)
                              ,: ',' (3001,26)-(3001,27)
                              pointer_expression (3001,28)-(3001,37)
                                &: '&' (3001,28)-(3001,29)
                                identifier: 'ms_flags' (3001,29)-(3001,37)
                              ): ')' (3001,37)-(3001,38)
                          ;: ';' (3001,38)-(3001,39)
                        }: '}' (3002,3)-(3002,4)
                      else_clause (3002,5)-(3010,4)
                        else: 'else' (3002,5)-(3002,9)
                        compound_statement (3002,10)-(3010,4)
                          {: '{' (3002,10)-(3002,11)
                          if_statement (3003,7)-(3006,40)
                            if: 'if' (3003,7)-(3003,9)
                            parenthesized_expression (3003,10)-(3003,19)
                              (: '(' (3003,10)-(3003,11)
                              identifier: 'spbreak' (3003,11)-(3003,18)
                              ): ')' (3003,18)-(3003,19)
                            expression_statement (3004,4)-(3004,52)
                              assignment_expression (3004,4)-(3004,51)
                                identifier: 'split_flags' (3004,4)-(3004,15)
                                =: '=' (3004,16)-(3004,17)
                                binary_expression (3004,18)-(3004,51)
                                  identifier: 'PREFORK_SPLIT' (3004,18)-(3004,31)
                                  |: '|' (3004,31)-(3004,32)
                                  identifier: 'PREFORK_SHWORDSPLIT' (3004,32)-(3004,51)
                              ;: ';' (3004,51)-(3004,52)
                            else_clause (3005,7)-(3006,40)
                              else: 'else' (3005,7)-(3005,11)
                              expression_statement (3006,4)-(3006,40)
                                assignment_expression (3006,4)-(3006,39)
                                  identifier: 'split_flags' (3006,4)-(3006,15)
                                  =: '=' (3006,16)-(3006,17)
                                  identifier: 'PREFORK_NOSHWORDSPLIT' (3006,18)-(3006,39)
                                ;: ';' (3006,39)-(3006,40)
                          expression_statement (3007,7)-(3008,19)
                            call_expression (3007,7)-(3008,18)
                              identifier: 'multsub' (3007,7)-(3007,14)
                              argument_list (3007,14)-(3008,18)
                                (: '(' (3007,14)-(3007,15)
                                pointer_expression (3007,15)-(3007,19)
                                  &: '&' (3007,15)-(3007,16)
                                  identifier: 'val' (3007,16)-(3007,19)
                                ,: ',' (3007,19)-(3007,20)
                                identifier: 'split_flags' (3007,21)-(3007,32)
                                ,: ',' (3007,32)-(3007,33)
                                pointer_expression (3007,34)-(3007,39)
                                  &: '&' (3007,34)-(3007,35)
                                  identifier: 'aval' (3007,35)-(3007,39)
                                ,: ',' (3007,39)-(3007,40)
                                pointer_expression (3007,41)-(3007,47)
                                  &: '&' (3007,41)-(3007,42)
                                  identifier: 'isarr' (3007,42)-(3007,47)
                                ,: ',' (3007,47)-(3007,48)
                                null (3007,49)-(3007,53)
                                  NULL: 'NULL' (3007,49)-(3007,53)
                                ,: ',' (3007,53)-(3007,54)
                                pointer_expression (3008,8)-(3008,17)
                                  &: '&' (3008,8)-(3008,9)
                                  identifier: 'ms_flags' (3008,9)-(3008,17)
                                ): ')' (3008,17)-(3008,18)
                            ;: ';' (3008,18)-(3008,19)
                          expression_statement (3009,7)-(3009,19)
                            assignment_expression (3009,7)-(3009,18)
                              identifier: 'spbreak' (3009,7)-(3009,14)
                              =: '=' (3009,15)-(3009,16)
                              number_literal: '0' (3009,17)-(3009,18)
                            ;: ';' (3009,18)-(3009,19)
                          }: '}' (3010,3)-(3010,4)
                    if_statement (3011,3)-(3053,4)
                      if: 'if' (3011,3)-(3011,5)
                      parenthesized_expression (3011,6)-(3011,14)
                        (: '(' (3011,6)-(3011,7)
                        identifier: 'arrasg' (3011,7)-(3011,13)
                        ): ')' (3011,13)-(3011,14)
                      compound_statement (3011,15)-(3050,4)
                        {: '{' (3011,15)-(3011,16)
                        comment: '/* This is an array assignment. */' (3012,7)-(3012,41)
                        declaration (3013,7)-(3013,35)
                          primitive_type: 'char' (3013,7)-(3013,11)
                          pointer_declarator (3013,12)-(3013,19)
                            *: '*' (3013,12)-(3013,13)
                            array_declarator (3013,13)-(3013,19)
                              identifier: 'arr' (3013,13)-(3013,16)
                              [: '[' (3013,16)-(3013,17)
                              number_literal: '2' (3013,17)-(3013,18)
                              ]: ']' (3013,18)-(3013,19)
                          ,: ',' (3013,19)-(3013,20)
                          pointer_declarator (3013,21)-(3013,24)
                            *: '*' (3013,21)-(3013,22)
                            pointer_declarator (3013,22)-(3013,24)
                              *: '*' (3013,22)-(3013,23)
                              identifier: 't' (3013,23)-(3013,24)
                          ,: ',' (3013,24)-(3013,25)
                          pointer_declarator (3013,26)-(3013,29)
                            *: '*' (3013,26)-(3013,27)
                            pointer_declarator (3013,27)-(3013,29)
                              *: '*' (3013,27)-(3013,28)
                              identifier: 'a' (3013,28)-(3013,29)
                          ,: ',' (3013,29)-(3013,30)
                          pointer_declarator (3013,31)-(3013,34)
                            *: '*' (3013,31)-(3013,32)
                            pointer_declarator (3013,32)-(3013,34)
                              *: '*' (3013,32)-(3013,33)
                              identifier: 'p' (3013,33)-(3013,34)
                          ;: ';' (3013,34)-(3013,35)
                        if_statement (3014,7)-(3035,31)
                          if: 'if' (3014,7)-(3014,9)
                          parenthesized_expression (3014,10)-(3014,28)
                            (: '(' (3014,10)-(3014,11)
                            binary_expression (3014,11)-(3014,27)
                              identifier: 'spsep' (3014,11)-(3014,16)
                              ||: '||' (3014,17)-(3014,19)
                              identifier: 'spbreak' (3014,20)-(3014,27)
                            ): ')' (3014,27)-(3014,28)
                          compound_statement (3014,29)-(3024,8)
                            {: '{' (3014,29)-(3014,30)
                            expression_statement (3015,4)-(3015,38)
                              assignment_expression (3015,4)-(3015,37)
                                identifier: 'aval' (3015,4)-(3015,8)
                                =: '=' (3015,9)-(3015,10)
                                call_expression (3015,11)-(3015,37)
                                  identifier: 'sepsplit' (3015,11)-(3015,19)
                                  argument_list (3015,19)-(3015,37)
                                    (: '(' (3015,19)-(3015,20)
                                    identifier: 'val' (3015,20)-(3015,23)
                                    ,: ',' (3015,23)-(3015,24)
                                    identifier: 'spsep' (3015,25)-(3015,30)
                                    ,: ',' (3015,30)-(3015,31)
                                    number_literal: '0' (3015,32)-(3015,33)
                                    ,: ',' (3015,33)-(3015,34)
                                    number_literal: '1' (3015,35)-(3015,36)
                                    ): ')' (3015,36)-(3015,37)
                              ;: ';' (3015,37)-(3015,38)
                            expression_statement (3016,4)-(3016,27)
                              assignment_expression (3016,4)-(3016,26)
                                identifier: 'isarr' (3016,4)-(3016,9)
                                =: '=' (3016,10)-(3016,11)
                                conditional_expression (3016,12)-(3016,26)
                                  identifier: 'nojoin' (3016,12)-(3016,18)
                                  ?: '?' (3016,19)-(3016,20)
                                  number_literal: '1' (3016,21)-(3016,22)
                                  :: ':' (3016,23)-(3016,24)
                                  number_literal: '2' (3016,25)-(3016,26)
                              ;: ';' (3016,26)-(3016,27)
                            expression_statement (3017,4)-(3017,21)
                              assignment_expression (3017,4)-(3017,20)
                                identifier: 'l' (3017,4)-(3017,5)
                                =: '=' (3017,6)-(3017,7)
                                call_expression (3017,8)-(3017,20)
                                  identifier: 'arrlen' (3017,8)-(3017,14)
                                  argument_list (3017,14)-(3017,20)
                                    (: '(' (3017,14)-(3017,15)
                                    identifier: 'aval' (3017,15)-(3017,19)
                                    ): ')' (3017,19)-(3017,20)
                              ;: ';' (3017,20)-(3017,21)
                            if_statement (3018,4)-(3019,12)
                              if: 'if' (3018,4)-(3018,6)
                              parenthesized_expression (3018,7)-(3018,27)
                                (: '(' (3018,7)-(3018,8)
                                binary_expression (3018,8)-(3018,26)
                                  identifier: 'l' (3018,8)-(3018,9)
                                  &&: '&&' (3018,10)-(3018,12)
                                  unary_expression (3018,13)-(3018,26)
                                    !: '!' (3018,13)-(3018,14)
                                    pointer_expression (3018,14)-(3018,26)
                                      *: '*' (3018,14)-(3018,15)
                                      parenthesized_expression (3018,15)-(3018,26)
                                        (: '(' (3018,15)-(3018,16)
                                        subscript_expression (3018,16)-(3018,25)
                                          identifier: 'aval' (3018,16)-(3018,20)
                                          [: '[' (3018,20)-(3018,21)
                                          binary_expression (3018,21)-(3018,24)
                                            identifier: 'l' (3018,21)-(3018,22)
                                            -: '-' (3018,22)-(3018,23)
                                            number_literal: '1' (3018,23)-(3018,24)
                                          ]: ']' (3018,24)-(3018,25)
                                        ): ')' (3018,25)-(3018,26)
                                ): ')' (3018,26)-(3018,27)
                              expression_statement (3019,8)-(3019,12)
                                update_expression (3019,8)-(3019,11)
                                  identifier: 'l' (3019,8)-(3019,9)
                                  --: '--' (3019,9)-(3019,11)
                                ;: ';' (3019,11)-(3019,12)
                            if_statement (3020,4)-(3023,17)
                              if: 'if' (3020,4)-(3020,6)
                              parenthesized_expression (3020,7)-(3020,21)
                                (: '(' (3020,7)-(3020,8)
                                binary_expression (3020,8)-(3020,20)
                                  identifier: 'l' (3020,8)-(3020,9)
                                  &&: '&&' (3020,10)-(3020,12)
                                  unary_expression (3020,13)-(3020,20)
                                    !: '!' (3020,13)-(3020,14)
                                    pointer_expression (3020,14)-(3020,20)
                                      *: '*' (3020,14)-(3020,15)
                                      pointer_expression (3020,15)-(3020,20)
                                        *: '*' (3020,15)-(3020,16)
                                        identifier: 'aval' (3020,16)-(3020,20)
                                ): ')' (3020,20)-(3020,21)
                              expression_statement (3021,8)-(3021,26)
                                comma_expression (3021,8)-(3021,25)
                                  update_expression (3021,8)-(3021,11)
                                    identifier: 'l' (3021,8)-(3021,9)
                                    --: '--' (3021,9)-(3021,11)
                                  ,: ',' (3021,11)-(3021,12)
                                  assignment_expression (3021,13)-(3021,25)
                                    identifier: 't' (3021,13)-(3021,14)
                                    =: '=' (3021,15)-(3021,16)
                                    binary_expression (3021,17)-(3021,25)
                                      identifier: 'aval' (3021,17)-(3021,21)
                                      +: '+' (3021,22)-(3021,23)
                                      number_literal: '1' (3021,24)-(3021,25)
                                ;: ';' (3021,25)-(3021,26)
                              else_clause (3022,4)-(3023,17)
                                else: 'else' (3022,4)-(3022,8)
                                expression_statement (3023,8)-(3023,17)
                                  assignment_expression (3023,8)-(3023,16)
                                    identifier: 't' (3023,8)-(3023,9)
                                    =: '=' (3023,10)-(3023,11)
                                    identifier: 'aval' (3023,12)-(3023,16)
                                  ;: ';' (3023,16)-(3023,17)
                            }: '}' (3024,7)-(3024,8)
                          else_clause (3024,9)-(3035,31)
                            else: 'else' (3024,9)-(3024,13)
                            if_statement (3024,14)-(3035,31)
                              if: 'if' (3024,14)-(3024,16)
                              parenthesized_expression (3024,17)-(3024,25)
                                (: '(' (3024,17)-(3024,18)
                                unary_expression (3024,18)-(3024,24)
                                  !: '!' (3024,18)-(3024,19)
                                  identifier: 'isarr' (3024,19)-(3024,24)
                                ): ')' (3024,24)-(3024,25)
                              compound_statement (3024,26)-(3034,8)
                                {: '{' (3024,26)-(3024,27)
                                if_statement (3025,4)-(3032,5)
                                  if: 'if' (3025,4)-(3025,6)
                                  parenthesized_expression (3025,7)-(3025,28)
                                    (: '(' (3025,7)-(3025,8)
                                    binary_expression (3025,8)-(3025,27)
                                      unary_expression (3025,8)-(3025,13)
                                        !: '!' (3025,8)-(3025,9)
                                        pointer_expression (3025,9)-(3025,13)
                                          *: '*' (3025,9)-(3025,10)
                                          identifier: 'val' (3025,10)-(3025,13)
                                      &&: '&&' (3025,14)-(3025,16)
                                      binary_expression (3025,17)-(3025,27)
                                        identifier: 'arrasg' (3025,17)-(3025,23)
                                        >: '>' (3025,24)-(3025,25)
                                        number_literal: '1' (3025,26)-(3025,27)
                                    ): ')' (3025,27)-(3025,28)
                                  compound_statement (3025,29)-(3028,5)
                                    {: '{' (3025,29)-(3025,30)
                                    expression_statement (3026,8)-(3026,22)
                                      assignment_expression (3026,8)-(3026,21)
                                        subscript_expression (3026,8)-(3026,14)
                                          identifier: 'arr' (3026,8)-(3026,11)
                                          [: '[' (3026,11)-(3026,12)
                                          number_literal: '0' (3026,12)-(3026,13)
                                          ]: ']' (3026,13)-(3026,14)
                                        =: '=' (3026,15)-(3026,16)
                                        null (3026,17)-(3026,21)
                                          NULL: 'NULL' (3026,17)-(3026,21)
                                      ;: ';' (3026,21)-(3026,22)
                                    expression_statement (3027,8)-(3027,14)
                                      assignment_expression (3027,8)-(3027,13)
                                        identifier: 'l' (3027,8)-(3027,9)
                                        =: '=' (3027,10)-(3027,11)
                                        number_literal: '0' (3027,12)-(3027,13)
                                      ;: ';' (3027,13)-(3027,14)
                                    }: '}' (3028,4)-(3028,5)
                                  else_clause (3028,6)-(3032,5)
                                    else: 'else' (3028,6)-(3028,10)
                                    compound_statement (3028,11)-(3032,5)
                                      {: '{' (3028,11)-(3028,12)
                                      expression_statement (3029,8)-(3029,21)
                                        assignment_expression (3029,8)-(3029,20)
                                          subscript_expression (3029,8)-(3029,14)
                                            identifier: 'arr' (3029,8)-(3029,11)
                                            [: '[' (3029,11)-(3029,12)
                                            number_literal: '0' (3029,12)-(3029,13)
                                            ]: ']' (3029,13)-(3029,14)
                                          =: '=' (3029,15)-(3029,16)
                                          identifier: 'val' (3029,17)-(3029,20)
                                        ;: ';' (3029,20)-(3029,21)
                                      expression_statement (3030,8)-(3030,22)
                                        assignment_expression (3030,8)-(3030,21)
                                          subscript_expression (3030,8)-(3030,14)
                                            identifier: 'arr' (3030,8)-(3030,11)
                                            [: '[' (3030,11)-(3030,12)
                                            number_literal: '1' (3030,12)-(3030,13)
                                            ]: ']' (3030,13)-(3030,14)
                                          =: '=' (3030,15)-(3030,16)
                                          null (3030,17)-(3030,21)
                                            NULL: 'NULL' (3030,17)-(3030,21)
                                        ;: ';' (3030,21)-(3030,22)
                                      expression_statement (3031,8)-(3031,14)
                                        assignment_expression (3031,8)-(3031,13)
                                          identifier: 'l' (3031,8)-(3031,9)
                                          =: '=' (3031,10)-(3031,11)
                                          number_literal: '1' (3031,12)-(3031,13)
                                        ;: ';' (3031,13)-(3031,14)
                                      }: '}' (3032,4)-(3032,5)
                                expression_statement (3033,4)-(3033,19)
                                  assignment_expression (3033,4)-(3033,18)
                                    identifier: 't' (3033,4)-(3033,5)
                                    =: '=' (3033,6)-(3033,7)
                                    assignment_expression (3033,8)-(3033,18)
                                      identifier: 'aval' (3033,8)-(3033,12)
                                      =: '=' (3033,13)-(3033,14)
                                      identifier: 'arr' (3033,15)-(3033,18)
                                  ;: ';' (3033,18)-(3033,19)
                                }: '}' (3034,7)-(3034,8)
                              else_clause (3034,9)-(3035,31)
                                else: 'else' (3034,9)-(3034,13)
                                expression_statement (3035,4)-(3035,31)
                                  comma_expression (3035,4)-(3035,30)
                                    assignment_expression (3035,4)-(3035,20)
                                      identifier: 'l' (3035,4)-(3035,5)
                                      =: '=' (3035,6)-(3035,7)
                                      call_expression (3035,8)-(3035,20)
                                        identifier: 'arrlen' (3035,8)-(3035,14)
                                        argument_list (3035,14)-(3035,20)
                                          (: '(' (3035,14)-(3035,15)
                                          identifier: 'aval' (3035,15)-(3035,19)
                                          ): ')' (3035,19)-(3035,20)
                                    ,: ',' (3035,20)-(3035,21)
                                    assignment_expression (3035,22)-(3035,30)
                                      identifier: 't' (3035,22)-(3035,23)
                                      =: '=' (3035,24)-(3035,25)
                                      identifier: 'aval' (3035,26)-(3035,30)
                                  ;: ';' (3035,30)-(3035,31)
                        expression_statement (3036,7)-(3036,48)
                          assignment_expression (3036,7)-(3036,47)
                            identifier: 'p' (3036,7)-(3036,8)
                            =: '=' (3036,9)-(3036,10)
                            assignment_expression (3036,11)-(3036,47)
                              identifier: 'a' (3036,11)-(3036,12)
                              =: '=' (3036,13)-(3036,14)
                              call_expression (3036,15)-(3036,47)
                                identifier: 'zalloc' (3036,15)-(3036,21)
                                argument_list (3036,21)-(3036,47)
                                  (: '(' (3036,21)-(3036,22)
                                  binary_expression (3036,22)-(3036,46)
                                    sizeof_expression (3036,22)-(3036,36)
                                      sizeof: 'sizeof' (3036,22)-(3036,28)
                                      (: '(' (3036,28)-(3036,29)
                                      type_descriptor (3036,29)-(3036,35)
                                        primitive_type: 'char' (3036,29)-(3036,33)
                                        abstract_pointer_declarator (3036,34)-(3036,35)
                                          *: '*' (3036,34)-(3036,35)
                                      ): ')' (3036,35)-(3036,36)
                                    *: '*' (3036,37)-(3036,38)
                                    parenthesized_expression (3036,39)-(3036,46)
                                      (: '(' (3036,39)-(3036,40)
                                      binary_expression (3036,40)-(3036,45)
                                        identifier: 'l' (3036,40)-(3036,41)
                                        +: '+' (3036,42)-(3036,43)
                                        number_literal: '1' (3036,44)-(3036,45)
                                      ): ')' (3036,45)-(3036,46)
                                  ): ')' (3036,46)-(3036,47)
                          ;: ';' (3036,47)-(3036,48)
                        while_statement (3037,7)-(3040,8)
                          while: 'while' (3037,7)-(3037,12)
                          parenthesized_expression (3037,13)-(3037,18)
                            (: '(' (3037,13)-(3037,14)
                            update_expression (3037,14)-(3037,17)
                              identifier: 'l' (3037,14)-(3037,15)
                              --: '--' (3037,15)-(3037,17)
                            ): ')' (3037,17)-(3037,18)
                          compound_statement (3037,19)-(3040,8)
                            {: '{' (3037,19)-(3037,20)
                            expression_statement (3038,4)-(3038,19)
                              call_expression (3038,4)-(3038,18)
                                identifier: 'untokenize' (3038,4)-(3038,14)
                                argument_list (3038,14)-(3038,18)
                                  (: '(' (3038,14)-(3038,15)
                                  pointer_expression (3038,15)-(3038,17)
                                    *: '*' (3038,15)-(3038,16)
                                    identifier: 't' (3038,16)-(3038,17)
                                  ): ')' (3038,17)-(3038,18)
                              ;: ';' (3038,18)-(3038,19)
                            expression_statement (3039,4)-(3039,24)
                              assignment_expression (3039,4)-(3039,23)
                                pointer_expression (3039,4)-(3039,8)
                                  *: '*' (3039,4)-(3039,5)
                                  update_expression (3039,5)-(3039,8)
                                    identifier: 'p' (3039,5)-(3039,6)
                                    ++: '++' (3039,6)-(3039,8)
                                =: '=' (3039,9)-(3039,10)
                                call_expression (3039,11)-(3039,23)
                                  identifier: 'ztrdup' (3039,11)-(3039,17)
                                  argument_list (3039,17)-(3039,23)
                                    (: '(' (3039,17)-(3039,18)
                                    pointer_expression (3039,18)-(3039,22)
                                      *: '*' (3039,18)-(3039,19)
                                      update_expression (3039,19)-(3039,22)
                                        identifier: 't' (3039,19)-(3039,20)
                                        ++: '++' (3039,20)-(3039,22)
                                    ): ')' (3039,22)-(3039,23)
                              ;: ';' (3039,23)-(3039,24)
                            }: '}' (3040,7)-(3040,8)
                        expression_statement (3041,7)-(3041,19)
                          assignment_expression (3041,7)-(3041,18)
                            pointer_expression (3041,7)-(3041,11)
                              *: '*' (3041,7)-(3041,8)
                              update_expression (3041,8)-(3041,11)
                                identifier: 'p' (3041,8)-(3041,9)
                                ++: '++' (3041,9)-(3041,11)
                            =: '=' (3041,12)-(3041,13)
                            null (3041,14)-(3041,18)
                              NULL: 'NULL' (3041,14)-(3041,18)
                          ;: ';' (3041,18)-(3041,19)
                        if_statement (3042,7)-(3047,24)
                          if: 'if' (3042,7)-(3042,9)
                          parenthesized_expression (3042,10)-(3042,22)
                            (: '(' (3042,10)-(3042,11)
                            binary_expression (3042,11)-(3042,21)
                              identifier: 'arrasg' (3042,11)-(3042,17)
                              >: '>' (3042,18)-(3042,19)
                              number_literal: '1' (3042,20)-(3042,21)
                            ): ')' (3042,21)-(3042,22)
                          compound_statement (3042,23)-(3046,8)
                            {: '{' (3042,23)-(3042,24)
                            declaration (3043,4)-(3043,35)
                              type_identifier: 'Param' (3043,4)-(3043,9)
                              init_declarator (3043,10)-(3043,34)
                                identifier: 'pm' (3043,10)-(3043,12)
                                =: '=' (3043,13)-(3043,14)
                                call_expression (3043,15)-(3043,34)
                                  identifier: 'sethparam' (3043,15)-(3043,24)
                                  argument_list (3043,24)-(3043,34)
                                    (: '(' (3043,24)-(3043,25)
                                    identifier: 'idbeg' (3043,25)-(3043,30)
                                    ,: ',' (3043,30)-(3043,31)
                                    identifier: 'a' (3043,32)-(3043,33)
                                    ): ')' (3043,33)-(3043,34)
                              ;: ';' (3043,34)-(3043,35)
                            if_statement (3044,4)-(3045,62)
                              if: 'if' (3044,4)-(3044,6)
                              parenthesized_expression (3044,7)-(3044,11)
                                (: '(' (3044,7)-(3044,8)
                                identifier: 'pm' (3044,8)-(3044,10)
                                ): ')' (3044,10)-(3044,11)
                              expression_statement (3045,8)-(3045,62)
                                assignment_expression (3045,8)-(3045,61)
                                  identifier: 'aval' (3045,8)-(3045,12)
                                  =: '=' (3045,13)-(3045,14)
                                  call_expression (3045,15)-(3045,61)
                                    identifier: 'paramvalarr' (3045,15)-(3045,26)
                                    argument_list (3045,26)-(3045,61)
                                      (: '(' (3045,26)-(3045,27)
                                      call_expression (3045,27)-(3045,47)
                                        field_expression (3045,27)-(3045,43)
                                          field_expression (3045,27)-(3045,36)
                                            field_expression (3045,27)-(3045,34)
                                              identifier: 'pm' (3045,27)-(3045,29)
                                              ->: '->' (3045,29)-(3045,31)
                                              field_identifier: 'gsu' (3045,31)-(3045,34)
                                            .: '.' (3045,34)-(3045,35)
                                            field_identifier: 'h' (3045,35)-(3045,36)
                                          ->: '->' (3045,36)-(3045,38)
                                          field_identifier: 'getfn' (3045,38)-(3045,43)
                                        argument_list (3045,43)-(3045,47)
                                          (: '(' (3045,43)-(3045,44)
                                          identifier: 'pm' (3045,44)-(3045,46)
                                          ): ')' (3045,46)-(3045,47)
                                      ,: ',' (3045,47)-(3045,48)
                                      binary_expression (3045,49)-(3045,60)
                                        identifier: 'hkeys' (3045,49)-(3045,54)
                                        |: '|' (3045,54)-(3045,55)
                                        identifier: 'hvals' (3045,55)-(3045,60)
                                      ): ')' (3045,60)-(3045,61)
                                ;: ';' (3045,61)-(3045,62)
                            }: '}' (3046,7)-(3046,8)
                          else_clause (3046,9)-(3047,24)
                            else: 'else' (3046,9)-(3046,13)
                            expression_statement (3047,4)-(3047,24)
                              call_expression (3047,4)-(3047,23)
                                identifier: 'setaparam' (3047,4)-(3047,13)
                                argument_list (3047,13)-(3047,23)
                                  (: '(' (3047,13)-(3047,14)
                                  identifier: 'idbeg' (3047,14)-(3047,19)
                                  ,: ',' (3047,19)-(3047,20)
                                  identifier: 'a' (3047,21)-(3047,22)
                                  ): ')' (3047,22)-(3047,23)
                              ;: ';' (3047,23)-(3047,24)
                        expression_statement (3048,7)-(3048,17)
                          assignment_expression (3048,7)-(3048,16)
                            identifier: 'isarr' (3048,7)-(3048,12)
                            =: '=' (3048,13)-(3048,14)
                            number_literal: '1' (3048,15)-(3048,16)
                          ;: ';' (3048,16)-(3048,17)
                        expression_statement (3049,7)-(3049,18)
                          assignment_expression (3049,7)-(3049,17)
                            identifier: 'arrasg' (3049,7)-(3049,13)
                            =: '=' (3049,14)-(3049,15)
                            number_literal: '0' (3049,16)-(3049,17)
                          ;: ';' (3049,17)-(3049,18)
                        }: '}' (3050,3)-(3050,4)
                      else_clause (3050,5)-(3053,4)
                        else: 'else' (3050,5)-(3050,9)
                        compound_statement (3050,10)-(3053,4)
                          {: '{' (3050,10)-(3050,11)
                          expression_statement (3051,7)-(3051,23)
                            call_expression (3051,7)-(3051,22)
                              identifier: 'untokenize' (3051,7)-(3051,17)
                              argument_list (3051,17)-(3051,22)
                                (: '(' (3051,17)-(3051,18)
                                identifier: 'val' (3051,18)-(3051,21)
                                ): ')' (3051,21)-(3051,22)
                            ;: ';' (3051,22)-(3051,23)
                          expression_statement (3052,7)-(3052,37)
                            call_expression (3052,7)-(3052,36)
                              identifier: 'setsparam' (3052,7)-(3052,16)
                              argument_list (3052,16)-(3052,36)
                                (: '(' (3052,16)-(3052,17)
                                identifier: 'idbeg' (3052,17)-(3052,22)
                                ,: ',' (3052,22)-(3052,23)
                                call_expression (3052,24)-(3052,35)
                                  identifier: 'ztrdup' (3052,24)-(3052,30)
                                  argument_list (3052,30)-(3052,35)
                                    (: '(' (3052,30)-(3052,31)
                                    identifier: 'val' (3052,31)-(3052,34)
                                    ): ')' (3052,34)-(3052,35)
                                ): ')' (3052,35)-(3052,36)
                            ;: ';' (3052,36)-(3052,37)
                          }: '}' (3053,3)-(3053,4)
                    expression_statement (3054,3)-(3054,16)
                      assignment_expression (3054,3)-(3054,15)
                        pointer_expression (3054,3)-(3054,9)
                          *: '*' (3054,3)-(3054,4)
                          identifier: 'idend' (3054,4)-(3054,9)
                        =: '=' (3054,10)-(3054,11)
                        identifier: 'sav' (3054,12)-(3054,15)
                      ;: ';' (3054,15)-(3054,16)
                    expression_statement (3055,3)-(3055,14)
                      assignment_expression (3055,3)-(3055,13)
                        identifier: 'copied' (3055,3)-(3055,9)
                        =: '=' (3055,10)-(3055,11)
                        number_literal: '1' (3055,12)-(3055,13)
                      ;: ';' (3055,13)-(3055,14)
                    if_statement (3056,3)-(3065,4)
                      if: 'if' (3056,3)-(3056,5)
                      parenthesized_expression (3056,6)-(3056,13)
                        (: '(' (3056,6)-(3056,7)
                        identifier: 'isarr' (3056,7)-(3056,12)
                        ): ')' (3056,12)-(3056,13)
                      compound_statement (3056,14)-(3065,4)
                        {: '{' (3056,14)-(3056,15)
                        if_statement (3057,7)-(3058,15)
                          if: 'if' (3057,7)-(3057,9)
                          parenthesized_expression (3057,10)-(3057,18)
                            (: '(' (3057,10)-(3057,11)
                            identifier: 'nojoin' (3057,11)-(3057,17)
                            ): ')' (3057,17)-(3057,18)
                          expression_statement (3058,4)-(3058,15)
                            assignment_expression (3058,4)-(3058,14)
                              identifier: 'isarr' (3058,4)-(3058,9)
                              =: '=' (3058,10)-(3058,11)
                              number_literal: '-1' (3058,12)-(3058,14)
                            ;: ';' (3058,14)-(3058,15)
                        if_statement (3059,7)-(3062,8)
                          if: 'if' (3059,7)-(3059,9)
                          parenthesized_expression (3059,10)-(3059,63)
                            (: '(' (3059,10)-(3059,11)
                            binary_expression (3059,11)-(3059,62)
                              binary_expression (3059,11)-(3059,47)
                                binary_expression (3059,11)-(3059,37)
                                  binary_expression (3059,11)-(3059,24)
                                    identifier: 'qt' (3059,11)-(3059,13)
                                    &&: '&&' (3059,14)-(3059,16)
                                    unary_expression (3059,17)-(3059,24)
                                      !: '!' (3059,17)-(3059,18)
                                      identifier: 'getlen' (3059,18)-(3059,24)
                                  &&: '&&' (3059,25)-(3059,27)
                                  binary_expression (3059,28)-(3059,37)
                                    identifier: 'isarr' (3059,28)-(3059,33)
                                    >: '>' (3059,34)-(3059,35)
                                    number_literal: '0' (3059,36)-(3059,37)
                                &&: '&&' (3059,38)-(3059,40)
                                unary_expression (3059,41)-(3059,47)
                                  !: '!' (3059,41)-(3059,42)
                                  identifier: 'spsep' (3059,42)-(3059,47)
                              &&: '&&' (3059,48)-(3059,50)
                              binary_expression (3059,51)-(3059,62)
                                identifier: 'spbreak' (3059,51)-(3059,58)
                                <: '<' (3059,59)-(3059,60)
                                number_literal: '2' (3059,61)-(3059,62)
                            ): ')' (3059,62)-(3059,63)
                          compound_statement (3059,64)-(3062,8)
                            {: '{' (3059,64)-(3059,65)
                            expression_statement (3060,4)-(3060,32)
                              assignment_expression (3060,4)-(3060,31)
                                identifier: 'val' (3060,4)-(3060,7)
                                =: '=' (3060,8)-(3060,9)
                                call_expression (3060,10)-(3060,31)
                                  identifier: 'sepjoin' (3060,10)-(3060,17)
                                  argument_list (3060,17)-(3060,31)
                                    (: '(' (3060,17)-(3060,18)
                                    identifier: 'aval' (3060,18)-(3060,22)
                                    ,: ',' (3060,22)-(3060,23)
                                    identifier: 'sep' (3060,24)-(3060,27)
                                    ,: ',' (3060,27)-(3060,28)
                                    number_literal: '1' (3060,29)-(3060,30)
                                    ): ')' (3060,30)-(3060,31)
                              ;: ';' (3060,31)-(3060,32)
                            expression_statement (3061,4)-(3061,14)
                              assignment_expression (3061,4)-(3061,13)
                                identifier: 'isarr' (3061,4)-(3061,9)
                                =: '=' (3061,10)-(3061,11)
                                number_literal: '0' (3061,12)-(3061,13)
                              ;: ';' (3061,13)-(3061,14)
                            }: '}' (3062,7)-(3062,8)
                        expression_statement (3063,7)-(3063,26)
                          assignment_expression (3063,7)-(3063,25)
                            identifier: 'sep' (3063,7)-(3063,10)
                            =: '=' (3063,11)-(3063,12)
                            assignment_expression (3063,13)-(3063,25)
                              identifier: 'spsep' (3063,13)-(3063,18)
                              =: '=' (3063,19)-(3063,20)
                              null (3063,21)-(3063,25)
                                NULL: 'NULL' (3063,21)-(3063,25)
                          ;: ';' (3063,25)-(3063,26)
                        expression_statement (3064,7)-(3064,19)
                          assignment_expression (3064,7)-(3064,18)
                            identifier: 'spbreak' (3064,7)-(3064,14)
                            =: '=' (3064,15)-(3064,16)
                            number_literal: '0' (3064,17)-(3064,18)
                          ;: ';' (3064,18)-(3064,19)
                        }: '}' (3065,3)-(3065,4)
                    }: '}' (3066,6)-(3066,7)
                break_statement (3067,6)-(3067,12)
                  break: 'break' (3067,6)-(3067,11)
                  ;: ';' (3067,11)-(3067,12)
              case_statement (3068,2)-(3068,11)
                case: 'case' (3068,2)-(3068,6)
                char_literal (3068,7)-(3068,10)
                  ': ''' (3068,7)-(3068,8)
                  character: '?' (3068,8)-(3068,9)
                  ': ''' (3068,9)-(3068,10)
                :: ':' (3068,10)-(3068,11)
              case_statement (3069,2)-(3095,12)
                case: 'case' (3069,2)-(3069,6)
                identifier: 'Quest' (3069,7)-(3069,12)
                :: ':' (3069,12)-(3069,13)
                if_statement (3070,6)-(3094,7)
                  if: 'if' (3070,6)-(3070,8)
                  parenthesized_expression (3070,9)-(3070,17)
                    (: '(' (3070,9)-(3070,10)
                    identifier: 'vunset' (3070,10)-(3070,16)
                    ): ')' (3070,16)-(3070,17)
                  compound_statement (3070,18)-(3094,7)
                    {: '{' (3070,18)-(3070,19)
                    if_statement (3071,17)-(3092,18)
                      if: 'if' (3071,17)-(3071,19)
                      parenthesized_expression (3071,20)-(3071,36)
                        (: '(' (3071,20)-(3071,21)
                        call_expression (3071,21)-(3071,35)
                          identifier: 'isset' (3071,21)-(3071,26)
                          argument_list (3071,26)-(3071,35)
                            (: '(' (3071,26)-(3071,27)
                            identifier: 'EXECOPT' (3071,27)-(3071,34)
                            ): ')' (3071,34)-(3071,35)
                        ): ')' (3071,35)-(3071,36)
                      compound_statement (3071,37)-(3092,18)
                        {: '{' (3071,37)-(3071,38)
                        expression_statement (3072,21)-(3072,35)
                          assignment_expression (3072,21)-(3072,34)
                            pointer_expression (3072,21)-(3072,27)
                              *: '*' (3072,21)-(3072,22)
                              identifier: 'idend' (3072,22)-(3072,27)
                            =: '=' (3072,28)-(3072,29)
                            char_literal (3072,30)-(3072,34)
                              ': ''' (3072,30)-(3072,31)
                              escape_sequence: '\0' (3072,31)-(3072,33)
                              ': ''' (3072,33)-(3072,34)
                          ;: ';' (3072,34)-(3072,35)
                        expression_statement (3073,21)-(3073,73)
                          call_expression (3073,21)-(3073,72)
                            identifier: 'zerr' (3073,21)-(3073,25)
                            argument_list (3073,25)-(3073,72)
                              (: '(' (3073,25)-(3073,26)
                              string_literal (3073,26)-(3073,34)
                                ": '"' (3073,26)-(3073,27)
                                string_content: '%s: %s' (3073,27)-(3073,33)
                                ": '"' (3073,33)-(3073,34)
                              ,: ',' (3073,34)-(3073,35)
                              identifier: 'idbeg' (3073,36)-(3073,41)
                              ,: ',' (3073,41)-(3073,42)
                              conditional_expression (3073,43)-(3073,71)
                                pointer_expression (3073,43)-(3073,45)
                                  *: '*' (3073,43)-(3073,44)
                                  identifier: 's' (3073,44)-(3073,45)
                                ?: '?' (3073,46)-(3073,47)
                                identifier: 's' (3073,48)-(3073,49)
                                :: ':' (3073,50)-(3073,51)
                                string_literal (3073,52)-(3073,71)
                                  ": '"' (3073,52)-(3073,53)
                                  string_content: 'parameter not set' (3073,53)-(3073,70)
                                  ": '"' (3073,70)-(3073,71)
                              ): ')' (3073,71)-(3073,72)
                          ;: ';' (3073,72)-(3073,73)
                        comment: '/*
                     * In interactive shell we need to return to
                     * top-level prompt --- don't clear this error
                     * after handling a command as we do with
                     * most errors.
                     */' (3074,21)-(3079,24)
                        expression_statement (3080,21)-(3080,45)
                          assignment_expression (3080,21)-(3080,44)
                            identifier: 'errflag' (3080,21)-(3080,28)
                            |=: '|=' (3080,29)-(3080,31)
                            identifier: 'ERRFLAG_HARD' (3080,32)-(3080,44)
                          ;: ';' (3080,44)-(3080,45)
                        if_statement (3081,21)-(3091,22)
                          if: 'if' (3081,21)-(3081,23)
                          parenthesized_expression (3081,24)-(3081,35)
                            (: '(' (3081,24)-(3081,25)
                            unary_expression (3081,25)-(3081,34)
                              !: '!' (3081,25)-(3081,26)
                              identifier: 'interact' (3081,26)-(3081,34)
                            ): ')' (3081,34)-(3081,35)
                          compound_statement (3081,36)-(3091,22)
                            {: '{' (3081,36)-(3081,37)
                            if_statement (3082,25)-(3090,38)
                              if: 'if' (3082,25)-(3082,27)
                              parenthesized_expression (3082,28)-(3082,47)
                                (: '(' (3082,28)-(3082,29)
                                binary_expression (3082,29)-(3082,46)
                                  identifier: 'mypid' (3082,29)-(3082,34)
                                  ==: '==' (3082,35)-(3082,37)
                                  call_expression (3082,38)-(3082,46)
                                    identifier: 'getpid' (3082,38)-(3082,44)
                                    argument_list (3082,44)-(3082,46)
                                      (: '(' (3082,44)-(3082,45)
                                      ): ')' (3082,45)-(3082,46)
                                ): ')' (3082,46)-(3082,47)
                              compound_statement (3082,48)-(3089,26)
                                {: '{' (3082,48)-(3082,49)
                                comment: '/*
                             * paranoia: don't check for jobs, but there
                             * shouldn't be any if not interactive.
                             */' (3083,29)-(3086,32)
                                expression_statement (3087,29)-(3087,41)
                                  assignment_expression (3087,29)-(3087,40)
                                    identifier: 'stopmsg' (3087,29)-(3087,36)
                                    =: '=' (3087,37)-(3087,38)
                                    number_literal: '1' (3087,39)-(3087,40)
                                  ;: ';' (3087,40)-(3087,41)
                                expression_statement (3088,29)-(3088,52)
                                  call_expression (3088,29)-(3088,51)
                                    identifier: 'zexit' (3088,29)-(3088,34)
                                    argument_list (3088,34)-(3088,51)
                                      (: '(' (3088,34)-(3088,35)
                                      number_literal: '1' (3088,35)-(3088,36)
                                      ,: ',' (3088,36)-(3088,37)
                                      identifier: 'ZEXIT_NORMAL' (3088,38)-(3088,50)
                                      ): ')' (3088,50)-(3088,51)
                                  ;: ';' (3088,51)-(3088,52)
                                }: '}' (3089,25)-(3089,26)
                              else_clause (3089,27)-(3090,38)
                                else: 'else' (3089,27)-(3089,31)
                                expression_statement (3090,29)-(3090,38)
                                  call_expression (3090,29)-(3090,37)
                                    identifier: '_exit' (3090,29)-(3090,34)
                                    argument_list (3090,34)-(3090,37)
                                      (: '(' (3090,34)-(3090,35)
                                      number_literal: '1' (3090,35)-(3090,36)
                                      ): ')' (3090,36)-(3090,37)
                                  ;: ';' (3090,37)-(3090,38)
                            }: '}' (3091,21)-(3091,22)
                        }: '}' (3092,17)-(3092,18)
                    return_statement (3093,3)-(3093,15)
                      return: 'return' (3093,3)-(3093,9)
                      null (3093,10)-(3093,14)
                        NULL: 'NULL' (3093,10)-(3093,14)
                      ;: ';' (3093,14)-(3093,15)
                    }: '}' (3094,6)-(3094,7)
                break_statement (3095,6)-(3095,12)
                  break: 'break' (3095,6)-(3095,11)
                  ;: ';' (3095,11)-(3095,12)
              case_statement (3096,2)-(3096,11)
                case: 'case' (3096,2)-(3096,6)
                char_literal (3096,7)-(3096,10)
                  ': ''' (3096,7)-(3096,8)
                  character: '%' (3096,8)-(3096,9)
                  ': ''' (3096,9)-(3096,10)
                :: ':' (3096,10)-(3096,11)
              case_statement (3097,2)-(3097,11)
                case: 'case' (3097,2)-(3097,6)
                char_literal (3097,7)-(3097,10)
                  ': ''' (3097,7)-(3097,8)
                  character: '#' (3097,8)-(3097,9)
                  ': ''' (3097,9)-(3097,10)
                :: ':' (3097,10)-(3097,11)
              case_statement (3098,2)-(3098,13)
                case: 'case' (3098,2)-(3098,6)
                identifier: 'Pound' (3098,7)-(3098,12)
                :: ':' (3098,12)-(3098,13)
              case_statement (3099,2)-(3190,12)
                case: 'case' (3099,2)-(3099,6)
                char_literal (3099,7)-(3099,10)
                  ': ''' (3099,7)-(3099,8)
                  character: '/' (3099,8)-(3099,9)
                  ': ''' (3099,9)-(3099,10)
                :: ':' (3099,10)-(3099,11)
                comment: '/* This once was executed only `if (qt) ...'. But with that
             * patterns in a expansion resulting from a ${(e)...} aren't
             * tokenized even though this function thinks they are (it thinks
             * they are because parse_subst_str() turns Qstring tokens
             * into String tokens and for unquoted parameter expansions the
             * lexer normally does tokenize patterns inside parameter
             * expansions). */' (3100,13)-(3106,31)
                compound_statement (3107,13)-(3123,7)
                  {: '{' (3107,13)-(3107,14)
                  declaration (3108,3)-(3108,43)
                    primitive_type: 'int' (3108,3)-(3108,6)
                    init_declarator (3108,7)-(3108,19)
                      identifier: 'one' (3108,7)-(3108,10)
                      =: '=' (3108,11)-(3108,12)
                      identifier: 'noerrs' (3108,13)-(3108,19)
                    ,: ',' (3108,19)-(3108,20)
                    init_declarator (3108,21)-(3108,34)
                      identifier: 'oef' (3108,21)-(3108,24)
                      =: '=' (3108,25)-(3108,26)
                      identifier: 'errflag' (3108,27)-(3108,34)
                    ,: ',' (3108,34)-(3108,35)
                    identifier: 'haserr' (3108,36)-(3108,42)
                    ;: ';' (3108,42)-(3108,43)
                  if_statement (3110,3)-(3111,18)
                    if: 'if' (3110,3)-(3110,5)
                    parenthesized_expression (3110,6)-(3110,17)
                      (: '(' (3110,6)-(3110,7)
                      unary_expression (3110,7)-(3110,16)
                        !: '!' (3110,7)-(3110,8)
                        identifier: 'quoteerr' (3110,8)-(3110,16)
                      ): ')' (3110,16)-(3110,17)
                    expression_statement (3111,7)-(3111,18)
                      assignment_expression (3111,7)-(3111,17)
                        identifier: 'noerrs' (3111,7)-(3111,13)
                        =: '=' (3111,14)-(3111,15)
                        number_literal: '1' (3111,16)-(3111,17)
                      ;: ';' (3111,17)-(3111,18)
                  expression_statement (3112,3)-(3112,34)
                    assignment_expression (3112,3)-(3112,33)
                      identifier: 'haserr' (3112,3)-(3112,9)
                      =: '=' (3112,10)-(3112,11)
                      call_expression (3112,12)-(3112,33)
                        identifier: 'parse_subst_string' (3112,12)-(3112,30)
                        argument_list (3112,30)-(3112,33)
                          (: '(' (3112,30)-(3112,31)
                          identifier: 's' (3112,31)-(3112,32)
                          ): ')' (3112,32)-(3112,33)
                    ;: ';' (3112,33)-(3112,34)
                  expression_statement (3113,3)-(3113,16)
                    assignment_expression (3113,3)-(3113,15)
                      identifier: 'noerrs' (3113,3)-(3113,9)
                      =: '=' (3113,10)-(3113,11)
                      identifier: 'one' (3113,12)-(3113,15)
                    ;: ';' (3113,15)-(3113,16)
                  if_statement (3114,3)-(3122,4)
                    if: 'if' (3114,3)-(3114,5)
                    parenthesized_expression (3114,6)-(3114,17)
                      (: '(' (3114,6)-(3114,7)
                      unary_expression (3114,7)-(3114,16)
                        !: '!' (3114,7)-(3114,8)
                        identifier: 'quoteerr' (3114,8)-(3114,16)
                      ): ')' (3114,16)-(3114,17)
                    compound_statement (3114,18)-(3119,4)
                      {: '{' (3114,18)-(3114,19)
                      comment: '/* Retain user interrupt error status */' (3115,7)-(3115,47)
                      expression_statement (3116,7)-(3116,47)
                        assignment_expression (3116,7)-(3116,46)
                          identifier: 'errflag' (3116,7)-(3116,14)
                          =: '=' (3116,15)-(3116,16)
                          binary_expression (3116,17)-(3116,46)
                            identifier: 'oef' (3116,17)-(3116,20)
                            |: '|' (3116,21)-(3116,22)
                            parenthesized_expression (3116,23)-(3116,46)
                              (: '(' (3116,23)-(3116,24)
                              binary_expression (3116,24)-(3116,45)
                                identifier: 'errflag' (3116,24)-(3116,31)
                                &: '&' (3116,32)-(3116,33)
                                identifier: 'ERRFLAG_INT' (3116,34)-(3116,45)
                              ): ')' (3116,45)-(3116,46)
                        ;: ';' (3116,46)-(3116,47)
                      if_statement (3117,7)-(3118,18)
                        if: 'if' (3117,7)-(3117,9)
                        parenthesized_expression (3117,10)-(3117,18)
                          (: '(' (3117,10)-(3117,11)
                          identifier: 'haserr' (3117,11)-(3117,17)
                          ): ')' (3117,17)-(3117,18)
                        expression_statement (3118,4)-(3118,18)
                          call_expression (3118,4)-(3118,17)
                            identifier: 'shtokenize' (3118,4)-(3118,14)
                            argument_list (3118,14)-(3118,17)
                              (: '(' (3118,14)-(3118,15)
                              identifier: 's' (3118,15)-(3118,16)
                              ): ')' (3118,16)-(3118,17)
                          ;: ';' (3118,17)-(3118,18)
                      }: '}' (3119,3)-(3119,4)
                    else_clause (3119,5)-(3122,4)
                      else: 'else' (3119,5)-(3119,9)
                      if_statement (3119,10)-(3122,4)
                        if: 'if' (3119,10)-(3119,12)
                        parenthesized_expression (3119,13)-(3119,32)
                          (: '(' (3119,13)-(3119,14)
                          binary_expression (3119,14)-(3119,31)
                            identifier: 'haserr' (3119,14)-(3119,20)
                            ||: '||' (3119,21)-(3119,23)
                            identifier: 'errflag' (3119,24)-(3119,31)
                          ): ')' (3119,31)-(3119,32)
                        compound_statement (3119,33)-(3122,4)
                          {: '{' (3119,33)-(3119,34)
                          expression_statement (3120,7)-(3120,62)
                            call_expression (3120,7)-(3120,61)
                              identifier: 'zerr' (3120,7)-(3120,11)
                              argument_list (3120,11)-(3120,61)
                                (: '(' (3120,11)-(3120,12)
                                string_literal (3120,12)-(3120,53)
                                  ": '"' (3120,12)-(3120,13)
                                  string_content: 'parse error in ${...%c...} substitution' (3120,13)-(3120,52)
                                  ": '"' (3120,52)-(3120,53)
                                ,: ',' (3120,53)-(3120,54)
                                subscript_expression (3120,55)-(3120,60)
                                  identifier: 's' (3120,55)-(3120,56)
                                  [: '[' (3120,56)-(3120,57)
                                  number_literal: '-1' (3120,57)-(3120,59)
                                  ]: ']' (3120,59)-(3120,60)
                                ): ')' (3120,60)-(3120,61)
                            ;: ';' (3120,61)-(3120,62)
                          return_statement (3121,7)-(3121,19)
                            return: 'return' (3121,7)-(3121,13)
                            null (3121,14)-(3121,18)
                              NULL: 'NULL' (3121,14)-(3121,18)
                            ;: ';' (3121,18)-(3121,19)
                          }: '}' (3122,3)-(3122,4)
                  }: '}' (3123,6)-(3123,7)
                compound_statement (3124,6)-(3150,7)
                  {: '{' (3124,6)-(3124,7)
                  preproc_if (3125,1)-(3149,7)
                    #if: '#if' (3125,1)-(3125,4)
                    number_literal: '0' (3125,5)-(3125,6)
                    
: '
' (3125,6)-(3126,1)
                    comment: '/*
		 * This allows # and % to be at the start of
		 * a parameter in the substitution, which is
		 * a bit nasty, and can be done (although
		 * less efficiently) with anchors.
		 */' (3126,3)-(3131,6)
                    declaration (3133,3)-(3133,18)
                      primitive_type: 'char' (3133,3)-(3133,7)
                      init_declarator (3133,8)-(3133,17)
                        identifier: 't' (3133,8)-(3133,9)
                        =: '=' (3133,10)-(3133,11)
                        subscript_expression (3133,12)-(3133,17)
                          identifier: 's' (3133,12)-(3133,13)
                          [: '[' (3133,13)-(3133,14)
                          number_literal: '-1' (3133,14)-(3133,16)
                          ]: ']' (3133,16)-(3133,17)
                      ;: ';' (3133,17)-(3133,18)
                    expression_statement (3135,3)-(3135,15)
                      call_expression (3135,3)-(3135,14)
                        identifier: 'singsub' (3135,3)-(3135,10)
                        argument_list (3135,10)-(3135,14)
                          (: '(' (3135,10)-(3135,11)
                          pointer_expression (3135,11)-(3135,13)
                            &: '&' (3135,11)-(3135,12)
                            identifier: 's' (3135,12)-(3135,13)
                          ): ')' (3135,13)-(3135,14)
                      ;: ';' (3135,14)-(3135,15)
                    if_statement (3137,3)-(3146,4)
                      if: 'if' (3137,3)-(3137,5)
                      parenthesized_expression (3137,6)-(3137,40)
                        (: '(' (3137,6)-(3137,7)
                        binary_expression (3137,7)-(3137,39)
                          binary_expression (3137,7)-(3137,15)
                            identifier: 't' (3137,7)-(3137,8)
                            ==: '==' (3137,9)-(3137,11)
                            char_literal (3137,12)-(3137,15)
                              ': ''' (3137,12)-(3137,13)
                              character: '/' (3137,13)-(3137,14)
                              ': ''' (3137,14)-(3137,15)
                          &&: '&&' (3137,16)-(3137,18)
                          parenthesized_expression (3137,19)-(3137,39)
                            (: '(' (3137,19)-(3137,20)
                            binary_expression (3137,20)-(3137,38)
                              identifier: 'flags' (3137,20)-(3137,25)
                              &: '&' (3137,26)-(3137,27)
                              identifier: 'SUB_SUBSTR' (3137,28)-(3137,38)
                            ): ')' (3137,38)-(3137,39)
                        ): ')' (3137,39)-(3137,40)
                      compound_statement (3137,41)-(3146,4)
                        {: '{' (3137,41)-(3137,42)
                        if_statement (3138,7)-(3145,8)
                          if: 'if' (3138,7)-(3138,9)
                          parenthesized_expression (3138,10)-(3138,39)
                            (: '(' (3138,10)-(3138,11)
                            binary_expression (3138,11)-(3138,38)
                              binary_expression (3138,11)-(3138,26)
                                parenthesized_expression (3138,11)-(3138,19)
                                  (: '(' (3138,11)-(3138,12)
                                  assignment_expression (3138,12)-(3138,18)
                                    identifier: 'c' (3138,12)-(3138,13)
                                    =: '=' (3138,14)-(3138,15)
                                    pointer_expression (3138,16)-(3138,18)
                                      *: '*' (3138,16)-(3138,17)
                                      identifier: 's' (3138,17)-(3138,18)
                                  ): ')' (3138,18)-(3138,19)
                                ==: '==' (3138,20)-(3138,22)
                                char_literal (3138,23)-(3138,26)
                                  ': ''' (3138,23)-(3138,24)
                                  character: '#' (3138,24)-(3138,25)
                                  ': ''' (3138,25)-(3138,26)
                              ||: '||' (3138,27)-(3138,29)
                              binary_expression (3138,30)-(3138,38)
                                identifier: 'c' (3138,30)-(3138,31)
                                ==: '==' (3138,32)-(3138,34)
                                char_literal (3138,35)-(3138,38)
                                  ': ''' (3138,35)-(3138,36)
                                  character: '%' (3138,36)-(3138,37)
                                  ': ''' (3138,37)-(3138,38)
                            ): ')' (3138,38)-(3138,39)
                          compound_statement (3138,40)-(3143,8)
                            {: '{' (3138,40)-(3138,41)
                            expression_statement (3139,4)-(3139,25)
                              assignment_expression (3139,4)-(3139,24)
                                identifier: 'flags' (3139,4)-(3139,9)
                                &=: '&=' (3139,10)-(3139,12)
                                unary_expression (3139,13)-(3139,24)
                                  ~: '~' (3139,13)-(3139,14)
                                  identifier: 'SUB_SUBSTR' (3139,14)-(3139,24)
                              ;: ';' (3139,24)-(3139,25)
                            if_statement (3140,4)-(3141,25)
                              if: 'if' (3140,4)-(3140,6)
                              parenthesized_expression (3140,7)-(3140,17)
                                (: '(' (3140,7)-(3140,8)
                                binary_expression (3140,8)-(3140,16)
                                  identifier: 'c' (3140,8)-(3140,9)
                                  ==: '==' (3140,10)-(3140,12)
                                  char_literal (3140,13)-(3140,16)
                                    ': ''' (3140,13)-(3140,14)
                                    character: '%' (3140,14)-(3140,15)
                                    ': ''' (3140,15)-(3140,16)
                                ): ')' (3140,16)-(3140,17)
                              expression_statement (3141,8)-(3141,25)
                                assignment_expression (3141,8)-(3141,24)
                                  identifier: 'flags' (3141,8)-(3141,13)
                                  |=: '|=' (3141,14)-(3141,16)
                                  identifier: 'SUB_END' (3141,17)-(3141,24)
                                ;: ';' (3141,24)-(3141,25)
                            expression_statement (3142,4)-(3142,8)
                              update_expression (3142,4)-(3142,7)
                                identifier: 's' (3142,4)-(3142,5)
                                ++: '++' (3142,5)-(3142,7)
                              ;: ';' (3142,7)-(3142,8)
                            }: '}' (3143,7)-(3143,8)
                          else_clause (3143,9)-(3145,8)
                            else: 'else' (3143,9)-(3143,13)
                            if_statement (3143,14)-(3145,8)
                              if: 'if' (3143,14)-(3143,16)
                              parenthesized_expression (3143,17)-(3143,28)
                                (: '(' (3143,17)-(3143,18)
                                binary_expression (3143,18)-(3143,27)
                                  identifier: 'c' (3143,18)-(3143,19)
                                  ==: '==' (3143,20)-(3143,22)
                                  char_literal (3143,23)-(3143,27)
                                    ': ''' (3143,23)-(3143,24)
                                    escape_sequence: '\\' (3143,24)-(3143,26)
                                    ': ''' (3143,26)-(3143,27)
                                ): ')' (3143,27)-(3143,28)
                              compound_statement (3143,29)-(3145,8)
                                {: '{' (3143,29)-(3143,30)
                                expression_statement (3144,4)-(3144,8)
                                  update_expression (3144,4)-(3144,7)
                                    identifier: 's' (3144,4)-(3144,5)
                                    ++: '++' (3144,5)-(3144,7)
                                  ;: ';' (3144,7)-(3144,8)
                                }: '}' (3145,7)-(3145,8)
                        }: '}' (3146,3)-(3146,4)
                    preproc_else (3147,1)-(3148,15)
                      #else: '#else' (3147,1)-(3147,6)
                      expression_statement (3148,3)-(3148,15)
                        call_expression (3148,3)-(3148,14)
                          identifier: 'singsub' (3148,3)-(3148,10)
                          argument_list (3148,10)-(3148,14)
                            (: '(' (3148,10)-(3148,11)
                            pointer_expression (3148,11)-(3148,13)
                              &: '&' (3148,11)-(3148,12)
                              identifier: 's' (3148,12)-(3148,13)
                            ): ')' (3148,13)-(3148,14)
                        ;: ';' (3148,14)-(3148,15)
                    #endif: '#endif' (3149,1)-(3149,7)
                  }: '}' (3150,6)-(3150,7)
                comment: '/*
	     * Either loop over an array doing replacements or
	     * do the replacement on a string.
	     *
	     * We need an untokenized value for matching.
	     */' (3152,6)-(3157,9)
                if_statement (3158,6)-(3189,7)
                  if: 'if' (3158,6)-(3158,8)
                  parenthesized_expression (3158,9)-(3158,27)
                    (: '(' (3158,9)-(3158,10)
                    binary_expression (3158,10)-(3158,26)
                      unary_expression (3158,10)-(3158,17)
                        !: '!' (3158,10)-(3158,11)
                        identifier: 'vunset' (3158,11)-(3158,17)
                      &&: '&&' (3158,18)-(3158,20)
                      identifier: 'isarr' (3158,21)-(3158,26)
                    ): ')' (3158,26)-(3158,27)
                  compound_statement (3158,28)-(3171,7)
                    {: '{' (3158,28)-(3158,29)
                    declaration (3159,3)-(3159,13)
                      primitive_type: 'char' (3159,3)-(3159,7)
                      pointer_declarator (3159,8)-(3159,12)
                        *: '*' (3159,8)-(3159,9)
                        pointer_declarator (3159,9)-(3159,12)
                          *: '*' (3159,9)-(3159,10)
                          identifier: 'ap' (3159,10)-(3159,12)
                      ;: ';' (3159,12)-(3159,13)
                    if_statement (3160,3)-(3163,4)
                      if: 'if' (3160,3)-(3160,5)
                      parenthesized_expression (3160,6)-(3160,15)
                        (: '(' (3160,6)-(3160,7)
                        unary_expression (3160,7)-(3160,14)
                          !: '!' (3160,7)-(3160,8)
                          identifier: 'copied' (3160,8)-(3160,14)
                        ): ')' (3160,14)-(3160,15)
                      compound_statement (3160,16)-(3163,4)
                        {: '{' (3160,16)-(3160,17)
                        expression_statement (3161,7)-(3161,27)
                          assignment_expression (3161,7)-(3161,26)
                            identifier: 'aval' (3161,7)-(3161,11)
                            =: '=' (3161,12)-(3161,13)
                            call_expression (3161,14)-(3161,26)
                              identifier: 'arrdup' (3161,14)-(3161,20)
                              argument_list (3161,20)-(3161,26)
                                (: '(' (3161,20)-(3161,21)
                                identifier: 'aval' (3161,21)-(3161,25)
                                ): ')' (3161,25)-(3161,26)
                          ;: ';' (3161,26)-(3161,27)
                        expression_statement (3162,7)-(3162,18)
                          assignment_expression (3162,7)-(3162,17)
                            identifier: 'copied' (3162,7)-(3162,13)
                            =: '=' (3162,14)-(3162,15)
                            number_literal: '1' (3162,16)-(3162,17)
                          ;: ';' (3162,17)-(3162,18)
                        }: '}' (3163,3)-(3163,4)
                    for_statement (3164,3)-(3166,4)
                      for: 'for' (3164,3)-(3164,6)
                      (: '(' (3164,7)-(3164,8)
                      assignment_expression (3164,8)-(3164,17)
                        identifier: 'ap' (3164,8)-(3164,10)
                        =: '=' (3164,11)-(3164,12)
                        identifier: 'aval' (3164,13)-(3164,17)
                      ;: ';' (3164,17)-(3164,18)
                      pointer_expression (3164,19)-(3164,22)
                        *: '*' (3164,19)-(3164,20)
                        identifier: 'ap' (3164,20)-(3164,22)
                      ;: ';' (3164,22)-(3164,23)
                      update_expression (3164,24)-(3164,28)
                        identifier: 'ap' (3164,24)-(3164,26)
                        ++: '++' (3164,26)-(3164,28)
                      ): ')' (3164,28)-(3164,29)
                      compound_statement (3164,30)-(3166,4)
                        {: '{' (3164,30)-(3164,31)
                        expression_statement (3165,7)-(3165,23)
                          call_expression (3165,7)-(3165,22)
                            identifier: 'untokenize' (3165,7)-(3165,17)
                            argument_list (3165,17)-(3165,22)
                              (: '(' (3165,17)-(3165,18)
                              pointer_expression (3165,18)-(3165,21)
                                *: '*' (3165,18)-(3165,19)
                                identifier: 'ap' (3165,19)-(3165,21)
                              ): ')' (3165,21)-(3165,22)
                          ;: ';' (3165,22)-(3165,23)
                        }: '}' (3166,3)-(3166,4)
                    if_statement (3167,3)-(3168,30)
                      if: 'if' (3167,3)-(3167,5)
                      parenthesized_expression (3167,6)-(3167,25)
                        (: '(' (3167,6)-(3167,7)
                        binary_expression (3167,7)-(3167,24)
                          identifier: 'flags' (3167,7)-(3167,12)
                          &: '&' (3167,13)-(3167,14)
                          identifier: 'SUB_EGLOB' (3167,15)-(3167,24)
                        ): ')' (3167,24)-(3167,25)
                      expression_statement (3168,7)-(3168,30)
                        assignment_expression (3168,7)-(3168,29)
                          subscript_expression (3168,7)-(3168,25)
                            identifier: 'opts' (3168,7)-(3168,11)
                            [: '[' (3168,11)-(3168,12)
                            identifier: 'EXTENDEDGLOB' (3168,12)-(3168,24)
                            ]: ']' (3168,24)-(3168,25)
                          =: '=' (3168,26)-(3168,27)
                          number_literal: '1' (3168,28)-(3168,29)
                        ;: ';' (3168,29)-(3168,30)
                    expression_statement (3169,3)-(3169,48)
                      call_expression (3169,3)-(3169,47)
                        identifier: 'getmatcharr' (3169,3)-(3169,14)
                        argument_list (3169,14)-(3169,47)
                          (: '(' (3169,14)-(3169,15)
                          pointer_expression (3169,15)-(3169,20)
                            &: '&' (3169,15)-(3169,16)
                            identifier: 'aval' (3169,16)-(3169,20)
                          ,: ',' (3169,20)-(3169,21)
                          identifier: 's' (3169,22)-(3169,23)
                          ,: ',' (3169,23)-(3169,24)
                          identifier: 'flags' (3169,25)-(3169,30)
                          ,: ',' (3169,30)-(3169,31)
                          identifier: 'flnum' (3169,32)-(3169,37)
                          ,: ',' (3169,37)-(3169,38)
                          identifier: 'replstr' (3169,39)-(3169,46)
                          ): ')' (3169,46)-(3169,47)
                      ;: ';' (3169,47)-(3169,48)
                    expression_statement (3170,3)-(3170,30)
                      assignment_expression (3170,3)-(3170,29)
                        subscript_expression (3170,3)-(3170,21)
                          identifier: 'opts' (3170,3)-(3170,7)
                          [: '[' (3170,7)-(3170,8)
                          identifier: 'EXTENDEDGLOB' (3170,8)-(3170,20)
                          ]: ']' (3170,20)-(3170,21)
                        =: '=' (3170,22)-(3170,23)
                        identifier: 'eglob' (3170,24)-(3170,29)
                      ;: ';' (3170,29)-(3170,30)
                    }: '}' (3171,6)-(3171,7)
                  else_clause (3171,8)-(3189,7)
                    else: 'else' (3171,8)-(3171,12)
                    compound_statement (3171,13)-(3189,7)
                      {: '{' (3171,13)-(3171,14)
                      if_statement (3172,3)-(3179,4)
                        if: 'if' (3172,3)-(3172,5)
                        parenthesized_expression (3172,6)-(3172,14)
                          (: '(' (3172,6)-(3172,7)
                          identifier: 'vunset' (3172,7)-(3172,13)
                          ): ')' (3172,13)-(3172,14)
                        compound_statement (3172,15)-(3179,4)
                          {: '{' (3172,15)-(3172,16)
                          if_statement (3173,7)-(3177,8)
                            if: 'if' (3173,7)-(3173,9)
                            parenthesized_expression (3173,10)-(3173,38)
                              (: '(' (3173,10)-(3173,11)
                              binary_expression (3173,11)-(3173,37)
                                binary_expression (3173,11)-(3173,21)
                                  identifier: 'vunset' (3173,11)-(3173,17)
                                  >: '>' (3173,18)-(3173,19)
                                  number_literal: '0' (3173,20)-(3173,21)
                                &&: '&&' (3173,22)-(3173,24)
                                call_expression (3173,25)-(3173,37)
                                  identifier: 'unset' (3173,25)-(3173,30)
                                  argument_list (3173,30)-(3173,37)
                                    (: '(' (3173,30)-(3173,31)
                                    identifier: 'UNSET' (3173,31)-(3173,36)
                                    ): ')' (3173,36)-(3173,37)
                              ): ')' (3173,37)-(3173,38)
                            compound_statement (3173,39)-(3177,8)
                              {: '{' (3173,39)-(3173,40)
                              expression_statement (3174,4)-(3174,18)
                                assignment_expression (3174,4)-(3174,17)
                                  pointer_expression (3174,4)-(3174,10)
                                    *: '*' (3174,4)-(3174,5)
                                    identifier: 'idend' (3174,5)-(3174,10)
                                  =: '=' (3174,11)-(3174,12)
                                  char_literal (3174,13)-(3174,17)
                                    ': ''' (3174,13)-(3174,14)
                                    escape_sequence: '\0' (3174,14)-(3174,16)
                                    ': ''' (3174,16)-(3174,17)
                                ;: ';' (3174,17)-(3174,18)
                              expression_statement (3175,4)-(3175,41)
                                call_expression (3175,4)-(3175,40)
                                  identifier: 'zerr' (3175,4)-(3175,8)
                                  argument_list (3175,8)-(3175,40)
                                    (: '(' (3175,8)-(3175,9)
                                    string_literal (3175,9)-(3175,32)
                                      ": '"' (3175,9)-(3175,10)
                                      string_content: '%s: parameter not set' (3175,10)-(3175,31)
                                      ": '"' (3175,31)-(3175,32)
                                    ,: ',' (3175,32)-(3175,33)
                                    identifier: 'idbeg' (3175,34)-(3175,39)
                                    ): ')' (3175,39)-(3175,40)
                                ;: ';' (3175,40)-(3175,41)
                              return_statement (3176,4)-(3176,16)
                                return: 'return' (3176,4)-(3176,10)
                                null (3176,11)-(3176,15)
                                  NULL: 'NULL' (3176,11)-(3176,15)
                                ;: ';' (3176,15)-(3176,16)
                              }: '}' (3177,7)-(3177,8)
                          expression_statement (3178,7)-(3178,27)
                            assignment_expression (3178,7)-(3178,26)
                              identifier: 'val' (3178,7)-(3178,10)
                              =: '=' (3178,11)-(3178,12)
                              call_expression (3178,13)-(3178,26)
                                identifier: 'dupstring' (3178,13)-(3178,22)
                                argument_list (3178,22)-(3178,26)
                                  (: '(' (3178,22)-(3178,23)
                                  string_literal (3178,23)-(3178,25)
                                    ": '"' (3178,23)-(3178,24)
                                    ": '"' (3178,24)-(3178,25)
                                  ): ')' (3178,25)-(3178,26)
                            ;: ';' (3178,26)-(3178,27)
                          }: '}' (3179,3)-(3179,4)
                      if_statement (3180,3)-(3184,4)
                        if: 'if' (3180,3)-(3180,5)
                        parenthesized_expression (3180,6)-(3180,15)
                          (: '(' (3180,6)-(3180,7)
                          unary_expression (3180,7)-(3180,14)
                            !: '!' (3180,7)-(3180,8)
                            identifier: 'copied' (3180,8)-(3180,14)
                          ): ')' (3180,14)-(3180,15)
                        compound_statement (3180,16)-(3184,4)
                          {: '{' (3180,16)-(3180,17)
                          expression_statement (3181,7)-(3181,28)
                            assignment_expression (3181,7)-(3181,27)
                              identifier: 'val' (3181,7)-(3181,10)
                              =: '=' (3181,11)-(3181,12)
                              call_expression (3181,13)-(3181,27)
                                identifier: 'dupstring' (3181,13)-(3181,22)
                                argument_list (3181,22)-(3181,27)
                                  (: '(' (3181,22)-(3181,23)
                                  identifier: 'val' (3181,23)-(3181,26)
                                  ): ')' (3181,26)-(3181,27)
                            ;: ';' (3181,27)-(3181,28)
                          expression_statement (3182,7)-(3182,18)
                            assignment_expression (3182,7)-(3182,17)
                              identifier: 'copied' (3182,7)-(3182,13)
                              =: '=' (3182,14)-(3182,15)
                              number_literal: '1' (3182,16)-(3182,17)
                            ;: ';' (3182,17)-(3182,18)
                          expression_statement (3183,7)-(3183,23)
                            call_expression (3183,7)-(3183,22)
                              identifier: 'untokenize' (3183,7)-(3183,17)
                              argument_list (3183,17)-(3183,22)
                                (: '(' (3183,17)-(3183,18)
                                identifier: 'val' (3183,18)-(3183,21)
                                ): ')' (3183,21)-(3183,22)
                            ;: ';' (3183,22)-(3183,23)
                          }: '}' (3184,3)-(3184,4)
                      if_statement (3185,3)-(3186,30)
                        if: 'if' (3185,3)-(3185,5)
                        parenthesized_expression (3185,6)-(3185,25)
                          (: '(' (3185,6)-(3185,7)
                          binary_expression (3185,7)-(3185,24)
                            identifier: 'flags' (3185,7)-(3185,12)
                            &: '&' (3185,13)-(3185,14)
                            identifier: 'SUB_EGLOB' (3185,15)-(3185,24)
                          ): ')' (3185,24)-(3185,25)
                        expression_statement (3186,7)-(3186,30)
                          assignment_expression (3186,7)-(3186,29)
                            subscript_expression (3186,7)-(3186,25)
                              identifier: 'opts' (3186,7)-(3186,11)
                              [: '[' (3186,11)-(3186,12)
                              identifier: 'EXTENDEDGLOB' (3186,12)-(3186,24)
                              ]: ']' (3186,24)-(3186,25)
                            =: '=' (3186,26)-(3186,27)
                            number_literal: '1' (3186,28)-(3186,29)
                          ;: ';' (3186,29)-(3186,30)
                      expression_statement (3187,3)-(3187,44)
                        call_expression (3187,3)-(3187,43)
                          identifier: 'getmatch' (3187,3)-(3187,11)
                          argument_list (3187,11)-(3187,43)
                            (: '(' (3187,11)-(3187,12)
                            pointer_expression (3187,12)-(3187,16)
                              &: '&' (3187,12)-(3187,13)
                              identifier: 'val' (3187,13)-(3187,16)
                            ,: ',' (3187,16)-(3187,17)
                            identifier: 's' (3187,18)-(3187,19)
                            ,: ',' (3187,19)-(3187,20)
                            identifier: 'flags' (3187,21)-(3187,26)
                            ,: ',' (3187,26)-(3187,27)
                            identifier: 'flnum' (3187,28)-(3187,33)
                            ,: ',' (3187,33)-(3187,34)
                            identifier: 'replstr' (3187,35)-(3187,42)
                            ): ')' (3187,42)-(3187,43)
                        ;: ';' (3187,43)-(3187,44)
                      expression_statement (3188,3)-(3188,30)
                        assignment_expression (3188,3)-(3188,29)
                          subscript_expression (3188,3)-(3188,21)
                            identifier: 'opts' (3188,3)-(3188,7)
                            [: '[' (3188,7)-(3188,8)
                            identifier: 'EXTENDEDGLOB' (3188,8)-(3188,20)
                            ]: ']' (3188,20)-(3188,21)
                          =: '=' (3188,22)-(3188,23)
                          identifier: 'eglob' (3188,24)-(3188,29)
                        ;: ';' (3188,29)-(3188,30)
                      }: '}' (3189,6)-(3189,7)
                break_statement (3190,6)-(3190,12)
                  break: 'break' (3190,6)-(3190,11)
                  ;: ';' (3190,11)-(3190,12)
              }: '}' (3191,2)-(3191,3)
          }: '}' (3192,5)-(3192,6)
        else_clause (3192,7)-(3519,6)
          else: 'else' (3192,7)-(3192,11)
          if_statement (3192,12)-(3519,6)
            if: 'if' (3192,12)-(3192,14)
            parenthesized_expression (3192,15)-(3192,52)
              (: '(' (3192,15)-(3192,16)
              binary_expression (3192,16)-(3192,51)
                identifier: 'inbrace' (3192,16)-(3192,23)
                &&: '&&' (3192,24)-(3192,26)
                parenthesized_expression (3192,27)-(3192,51)
                  (: '(' (3192,27)-(3192,28)
                  binary_expression (3192,28)-(3192,50)
                    binary_expression (3192,28)-(3192,37)
                      pointer_expression (3192,28)-(3192,30)
                        *: '*' (3192,28)-(3192,29)
                        identifier: 's' (3192,29)-(3192,30)
                      ==: '==' (3192,31)-(3192,33)
                      char_literal (3192,34)-(3192,37)
                        ': ''' (3192,34)-(3192,35)
                        character: '^' (3192,35)-(3192,36)
                        ': ''' (3192,36)-(3192,37)
                    ||: '||' (3192,38)-(3192,40)
                    binary_expression (3192,41)-(3192,50)
                      pointer_expression (3192,41)-(3192,43)
                        *: '*' (3192,41)-(3192,42)
                        identifier: 's' (3192,42)-(3192,43)
                      ==: '==' (3192,44)-(3192,46)
                      identifier: 'Hat' (3192,47)-(3192,50)
                  ): ')' (3192,50)-(3192,51)
              ): ')' (3192,51)-(3192,52)
            compound_statement (3192,53)-(3255,6)
              {: '{' (3192,53)-(3192,54)
              declaration (3193,2)-(3193,13)
                primitive_type: 'char' (3193,2)-(3193,6)
                pointer_declarator (3193,7)-(3193,12)
                  *: '*' (3193,7)-(3193,8)
                  pointer_declarator (3193,8)-(3193,12)
                    *: '*' (3193,8)-(3193,9)
                    identifier: 'zip' (3193,9)-(3193,12)
                ;: ';' (3193,12)-(3193,13)
              declaration (3194,2)-(3194,19)
                primitive_type: 'int' (3194,2)-(3194,5)
                init_declarator (3194,6)-(3194,18)
                  identifier: 'shortest' (3194,6)-(3194,14)
                  =: '=' (3194,15)-(3194,16)
                  number_literal: '1' (3194,17)-(3194,18)
                ;: ';' (3194,18)-(3194,19)
              expression_statement (3195,2)-(3195,6)
                update_expression (3195,2)-(3195,5)
                  ++: '++' (3195,2)-(3195,4)
                  identifier: 's' (3195,4)-(3195,5)
                ;: ';' (3195,5)-(3195,6)
              if_statement (3196,2)-(3199,3)
                if: 'if' (3196,2)-(3196,4)
                parenthesized_expression (3196,5)-(3196,29)
                  (: '(' (3196,5)-(3196,6)
                  binary_expression (3196,6)-(3196,28)
                    binary_expression (3196,6)-(3196,15)
                      pointer_expression (3196,6)-(3196,8)
                        *: '*' (3196,6)-(3196,7)
                        identifier: 's' (3196,7)-(3196,8)
                      ==: '==' (3196,9)-(3196,11)
                      char_literal (3196,12)-(3196,15)
                        ': ''' (3196,12)-(3196,13)
                        character: '^' (3196,13)-(3196,14)
                        ': ''' (3196,14)-(3196,15)
                    ||: '||' (3196,16)-(3196,18)
                    binary_expression (3196,19)-(3196,28)
                      pointer_expression (3196,19)-(3196,21)
                        *: '*' (3196,19)-(3196,20)
                        identifier: 's' (3196,20)-(3196,21)
                      ==: '==' (3196,22)-(3196,24)
                      identifier: 'Hat' (3196,25)-(3196,28)
                  ): ')' (3196,28)-(3196,29)
                compound_statement (3196,30)-(3199,3)
                  {: '{' (3196,30)-(3196,31)
                  expression_statement (3197,6)-(3197,19)
                    assignment_expression (3197,6)-(3197,18)
                      identifier: 'shortest' (3197,6)-(3197,14)
                      =: '=' (3197,15)-(3197,16)
                      number_literal: '0' (3197,17)-(3197,18)
                    ;: ';' (3197,18)-(3197,19)
                  expression_statement (3198,6)-(3198,10)
                    update_expression (3198,6)-(3198,9)
                      ++: '++' (3198,6)-(3198,8)
                      identifier: 's' (3198,8)-(3198,9)
                    ;: ';' (3198,9)-(3198,10)
                  }: '}' (3199,2)-(3199,3)
              if_statement (3200,2)-(3204,3)
                if: 'if' (3200,2)-(3200,4)
                parenthesized_expression (3200,5)-(3200,31)
                  (: '(' (3200,5)-(3200,6)
                  pointer_expression (3200,6)-(3200,30)
                    *: '*' (3200,6)-(3200,7)
                    call_expression (3200,7)-(3200,30)
                      identifier: 'itype_end' (3200,7)-(3200,16)
                      argument_list (3200,16)-(3200,30)
                        (: '(' (3200,16)-(3200,17)
                        identifier: 's' (3200,17)-(3200,18)
                        ,: ',' (3200,18)-(3200,19)
                        identifier: 'IIDENT' (3200,20)-(3200,26)
                        ,: ',' (3200,26)-(3200,27)
                        number_literal: '0' (3200,28)-(3200,29)
                        ): ')' (3200,29)-(3200,30)
                  ): ')' (3200,30)-(3200,31)
                compound_statement (3200,32)-(3204,3)
                  {: '{' (3200,32)-(3200,33)
                  expression_statement (3201,6)-(3201,20)
                    call_expression (3201,6)-(3201,19)
                      identifier: 'untokenize' (3201,6)-(3201,16)
                      argument_list (3201,16)-(3201,19)
                        (: '(' (3201,16)-(3201,17)
                        identifier: 's' (3201,17)-(3201,18)
                        ): ')' (3201,18)-(3201,19)
                    ;: ';' (3201,19)-(3201,20)
                  expression_statement (3202,6)-(3202,39)
                    call_expression (3202,6)-(3202,38)
                      identifier: 'zerr' (3202,6)-(3202,10)
                      argument_list (3202,10)-(3202,38)
                        (: '(' (3202,10)-(3202,11)
                        string_literal (3202,11)-(3202,34)
                          ": '"' (3202,11)-(3202,12)
                          string_content: 'not an identifier: %s' (3202,12)-(3202,33)
                          ": '"' (3202,33)-(3202,34)
                        ,: ',' (3202,34)-(3202,35)
                        identifier: 's' (3202,36)-(3202,37)
                        ): ')' (3202,37)-(3202,38)
                    ;: ';' (3202,38)-(3202,39)
                  return_statement (3203,6)-(3203,18)
                    return: 'return' (3203,6)-(3203,12)
                    null (3203,13)-(3203,17)
                      NULL: 'NULL' (3203,13)-(3203,17)
                    ;: ';' (3203,17)-(3203,18)
                  }: '}' (3204,2)-(3204,3)
              if_statement (3205,2)-(3254,3)
                if: 'if' (3205,2)-(3205,4)
                parenthesized_expression (3205,5)-(3205,13)
                  (: '(' (3205,5)-(3205,6)
                  identifier: 'vunset' (3205,6)-(3205,12)
                  ): ')' (3205,12)-(3205,13)
                compound_statement (3205,14)-(3212,3)
                  {: '{' (3205,14)-(3205,15)
                  if_statement (3206,6)-(3210,7)
                    if: 'if' (3206,6)-(3206,8)
                    parenthesized_expression (3206,9)-(3206,37)
                      (: '(' (3206,9)-(3206,10)
                      binary_expression (3206,10)-(3206,36)
                        binary_expression (3206,10)-(3206,20)
                          identifier: 'vunset' (3206,10)-(3206,16)
                          >: '>' (3206,17)-(3206,18)
                          number_literal: '0' (3206,19)-(3206,20)
                        &&: '&&' (3206,21)-(3206,23)
                        call_expression (3206,24)-(3206,36)
                          identifier: 'unset' (3206,24)-(3206,29)
                          argument_list (3206,29)-(3206,36)
                            (: '(' (3206,29)-(3206,30)
                            identifier: 'UNSET' (3206,30)-(3206,35)
                            ): ')' (3206,35)-(3206,36)
                      ): ')' (3206,36)-(3206,37)
                    compound_statement (3206,38)-(3210,7)
                      {: '{' (3206,38)-(3206,39)
                      expression_statement (3207,3)-(3207,17)
                        assignment_expression (3207,3)-(3207,16)
                          pointer_expression (3207,3)-(3207,9)
                            *: '*' (3207,3)-(3207,4)
                            identifier: 'idend' (3207,4)-(3207,9)
                          =: '=' (3207,10)-(3207,11)
                          char_literal (3207,12)-(3207,16)
                            ': ''' (3207,12)-(3207,13)
                            escape_sequence: '\0' (3207,13)-(3207,15)
                            ': ''' (3207,15)-(3207,16)
                        ;: ';' (3207,16)-(3207,17)
                      expression_statement (3208,3)-(3208,40)
                        call_expression (3208,3)-(3208,39)
                          identifier: 'zerr' (3208,3)-(3208,7)
                          argument_list (3208,7)-(3208,39)
                            (: '(' (3208,7)-(3208,8)
                            string_literal (3208,8)-(3208,31)
                              ": '"' (3208,8)-(3208,9)
                              string_content: '%s: parameter not set' (3208,9)-(3208,30)
                              ": '"' (3208,30)-(3208,31)
                            ,: ',' (3208,31)-(3208,32)
                            identifier: 'idbeg' (3208,33)-(3208,38)
                            ): ')' (3208,38)-(3208,39)
                        ;: ';' (3208,39)-(3208,40)
                      return_statement (3209,3)-(3209,15)
                        return: 'return' (3209,3)-(3209,9)
                        null (3209,10)-(3209,14)
                          NULL: 'NULL' (3209,10)-(3209,14)
                        ;: ';' (3209,14)-(3209,15)
                      }: '}' (3210,6)-(3210,7)
                  expression_statement (3211,6)-(3211,26)
                    assignment_expression (3211,6)-(3211,25)
                      identifier: 'val' (3211,6)-(3211,9)
                      =: '=' (3211,10)-(3211,11)
                      call_expression (3211,12)-(3211,25)
                        identifier: 'dupstring' (3211,12)-(3211,21)
                        argument_list (3211,21)-(3211,25)
                          (: '(' (3211,21)-(3211,22)
                          string_literal (3211,22)-(3211,24)
                            ": '"' (3211,22)-(3211,23)
                            ": '"' (3211,23)-(3211,24)
                          ): ')' (3211,24)-(3211,25)
                    ;: ';' (3211,25)-(3211,26)
                  }: '}' (3212,2)-(3212,3)
                else_clause (3212,4)-(3254,3)
                  else: 'else' (3212,4)-(3212,8)
                  compound_statement (3212,9)-(3254,3)
                    {: '{' (3212,9)-(3212,10)
                    declaration (3213,6)-(3213,17)
                      primitive_type: 'char' (3213,6)-(3213,10)
                      pointer_declarator (3213,11)-(3213,16)
                        *: '*' (3213,11)-(3213,12)
                        identifier: 'sval' (3213,12)-(3213,16)
                      ;: ';' (3213,16)-(3213,17)
                    expression_statement (3214,6)-(3214,25)
                      assignment_expression (3214,6)-(3214,24)
                        identifier: 'zip' (3214,6)-(3214,9)
                        =: '=' (3214,10)-(3214,11)
                        call_expression (3214,12)-(3214,24)
                          identifier: 'getaparam' (3214,12)-(3214,21)
                          argument_list (3214,21)-(3214,24)
                            (: '(' (3214,21)-(3214,22)
                            identifier: 's' (3214,22)-(3214,23)
                            ): ')' (3214,23)-(3214,24)
                      ;: ';' (3214,24)-(3214,25)
                    if_statement (3215,6)-(3219,7)
                      if: 'if' (3215,6)-(3215,8)
                      parenthesized_expression (3215,9)-(3215,15)
                        (: '(' (3215,9)-(3215,10)
                        unary_expression (3215,10)-(3215,14)
                          !: '!' (3215,10)-(3215,11)
                          identifier: 'zip' (3215,11)-(3215,14)
                        ): ')' (3215,14)-(3215,15)
                      compound_statement (3215,16)-(3219,7)
                        {: '{' (3215,16)-(3215,17)
                        expression_statement (3216,3)-(3216,23)
                          assignment_expression (3216,3)-(3216,22)
                            identifier: 'sval' (3216,3)-(3216,7)
                            =: '=' (3216,8)-(3216,9)
                            call_expression (3216,10)-(3216,22)
                              identifier: 'getsparam' (3216,10)-(3216,19)
                              argument_list (3216,19)-(3216,22)
                                (: '(' (3216,19)-(3216,20)
                                identifier: 's' (3216,20)-(3216,21)
                                ): ')' (3216,21)-(3216,22)
                          ;: ';' (3216,22)-(3216,23)
                        if_statement (3217,3)-(3218,28)
                          if: 'if' (3217,3)-(3217,5)
                          parenthesized_expression (3217,6)-(3217,12)
                            (: '(' (3217,6)-(3217,7)
                            identifier: 'sval' (3217,7)-(3217,11)
                            ): ')' (3217,11)-(3217,12)
                          expression_statement (3218,7)-(3218,28)
                            assignment_expression (3218,7)-(3218,27)
                              identifier: 'zip' (3218,7)-(3218,10)
                              =: '=' (3218,11)-(3218,12)
                              call_expression (3218,13)-(3218,27)
                                identifier: 'hmkarray' (3218,13)-(3218,21)
                                argument_list (3218,21)-(3218,27)
                                  (: '(' (3218,21)-(3218,22)
                                  identifier: 'sval' (3218,22)-(3218,26)
                                  ): ')' (3218,26)-(3218,27)
                            ;: ';' (3218,27)-(3218,28)
                        }: '}' (3219,6)-(3219,7)
                    if_statement (3220,6)-(3223,7)
                      if: 'if' (3220,6)-(3220,8)
                      parenthesized_expression (3220,9)-(3220,17)
                        (: '(' (3220,9)-(3220,10)
                        unary_expression (3220,10)-(3220,16)
                          !: '!' (3220,10)-(3220,11)
                          identifier: 'isarr' (3220,11)-(3220,16)
                        ): ')' (3220,16)-(3220,17)
                      compound_statement (3220,18)-(3223,7)
                        {: '{' (3220,18)-(3220,19)
                        expression_statement (3221,3)-(3221,24)
                          assignment_expression (3221,3)-(3221,23)
                            identifier: 'aval' (3221,3)-(3221,7)
                            =: '=' (3221,8)-(3221,9)
                            call_expression (3221,10)-(3221,23)
                              identifier: 'hmkarray' (3221,10)-(3221,18)
                              argument_list (3221,18)-(3221,23)
                                (: '(' (3221,18)-(3221,19)
                                identifier: 'val' (3221,19)-(3221,22)
                                ): ')' (3221,22)-(3221,23)
                          ;: ';' (3221,23)-(3221,24)
                        expression_statement (3222,3)-(3222,13)
                          assignment_expression (3222,3)-(3222,12)
                            identifier: 'isarr' (3222,3)-(3222,8)
                            =: '=' (3222,9)-(3222,10)
                            number_literal: '1' (3222,11)-(3222,12)
                          ;: ';' (3222,12)-(3222,13)
                        }: '}' (3223,6)-(3223,7)
                    if_statement (3224,6)-(3253,7)
                      if: 'if' (3224,6)-(3224,8)
                      parenthesized_expression (3224,9)-(3224,14)
                        (: '(' (3224,9)-(3224,10)
                        identifier: 'zip' (3224,10)-(3224,13)
                        ): ')' (3224,13)-(3224,14)
                      compound_statement (3224,15)-(3247,7)
                        {: '{' (3224,15)-(3224,16)
                        declaration (3225,3)-(3225,14)
                          primitive_type: 'char' (3225,3)-(3225,7)
                          pointer_declarator (3225,8)-(3225,13)
                            *: '*' (3225,8)-(3225,9)
                            pointer_declarator (3225,9)-(3225,13)
                              *: '*' (3225,9)-(3225,10)
                              identifier: 'out' (3225,10)-(3225,13)
                          ;: ';' (3225,13)-(3225,14)
                        declaration (3226,3)-(3226,35)
                          primitive_type: 'int' (3226,3)-(3226,6)
                          identifier: 'alen' (3226,7)-(3226,11)
                          ,: ',' (3226,11)-(3226,12)
                          identifier: 'ziplen' (3226,13)-(3226,19)
                          ,: ',' (3226,19)-(3226,20)
                          identifier: 'outlen' (3226,21)-(3226,27)
                          ,: ',' (3226,27)-(3226,28)
                          init_declarator (3226,29)-(3226,34)
                            identifier: 'i' (3226,29)-(3226,30)
                            =: '=' (3226,31)-(3226,32)
                            number_literal: '0' (3226,33)-(3226,34)
                          ;: ';' (3226,34)-(3226,35)
                        expression_statement (3227,3)-(3227,23)
                          assignment_expression (3227,3)-(3227,22)
                            identifier: 'alen' (3227,3)-(3227,7)
                            =: '=' (3227,8)-(3227,9)
                            call_expression (3227,10)-(3227,22)
                              identifier: 'arrlen' (3227,10)-(3227,16)
                              argument_list (3227,16)-(3227,22)
                                (: '(' (3227,16)-(3227,17)
                                identifier: 'aval' (3227,17)-(3227,21)
                                ): ')' (3227,21)-(3227,22)
                          ;: ';' (3227,22)-(3227,23)
                        expression_statement (3228,3)-(3228,24)
                          assignment_expression (3228,3)-(3228,23)
                            identifier: 'ziplen' (3228,3)-(3228,9)
                            =: '=' (3228,10)-(3228,11)
                            call_expression (3228,12)-(3228,23)
                              identifier: 'arrlen' (3228,12)-(3228,18)
                              argument_list (3228,18)-(3228,23)
                                (: '(' (3228,18)-(3228,19)
                                identifier: 'zip' (3228,19)-(3228,22)
                                ): ')' (3228,22)-(3228,23)
                          ;: ';' (3228,23)-(3228,24)
                        expression_statement (3229,3)-(3229,55)
                          assignment_expression (3229,3)-(3229,54)
                            identifier: 'outlen' (3229,3)-(3229,9)
                            =: '=' (3229,10)-(3229,11)
                            conditional_expression (3229,12)-(3229,54)
                              binary_expression (3229,12)-(3229,38)
                                identifier: 'shortest' (3229,12)-(3229,20)
                                ^: '^' (3229,21)-(3229,22)
                                parenthesized_expression (3229,23)-(3229,38)
                                  (: '(' (3229,23)-(3229,24)
                                  binary_expression (3229,24)-(3229,37)
                                    identifier: 'alen' (3229,24)-(3229,28)
                                    >: '>' (3229,29)-(3229,30)
                                    identifier: 'ziplen' (3229,31)-(3229,37)
                                  ): ')' (3229,37)-(3229,38)
                              ?: '?' (3229,39)-(3229,40)
                              identifier: 'alen' (3229,41)-(3229,45)
                              :: ':' (3229,46)-(3229,47)
                              identifier: 'ziplen' (3229,48)-(3229,54)
                          ;: ';' (3229,54)-(3229,55)
                        if_statement (3230,3)-(3246,4)
                          if: 'if' (3230,3)-(3230,5)
                          parenthesized_expression (3230,6)-(3230,47)
                            (: '(' (3230,6)-(3230,7)
                            binary_expression (3230,7)-(3230,46)
                              unary_expression (3230,7)-(3230,16)
                                !: '!' (3230,7)-(3230,8)
                                identifier: 'shortest' (3230,8)-(3230,16)
                              &&: '&&' (3230,17)-(3230,19)
                              parenthesized_expression (3230,20)-(3230,46)
                                (: '(' (3230,20)-(3230,21)
                                binary_expression (3230,21)-(3230,45)
                                  binary_expression (3230,21)-(3230,30)
                                    identifier: 'alen' (3230,21)-(3230,25)
                                    ==: '==' (3230,26)-(3230,28)
                                    number_literal: '0' (3230,29)-(3230,30)
                                  ||: '||' (3230,31)-(3230,33)
                                  binary_expression (3230,34)-(3230,45)
                                    identifier: 'ziplen' (3230,34)-(3230,40)
                                    ==: '==' (3230,41)-(3230,43)
                                    number_literal: '0' (3230,44)-(3230,45)
                                ): ')' (3230,45)-(3230,46)
                            ): ')' (3230,46)-(3230,47)
                          compound_statement (3230,48)-(3233,4)
                            {: '{' (3230,48)-(3230,49)
                            if_statement (3231,7)-(3232,23)
                              if: 'if' (3231,7)-(3231,9)
                              parenthesized_expression (3231,10)-(3231,18)
                                (: '(' (3231,10)-(3231,11)
                                identifier: 'ziplen' (3231,11)-(3231,17)
                                ): ')' (3231,17)-(3231,18)
                              expression_statement (3232,4)-(3232,23)
                                assignment_expression (3232,4)-(3232,22)
                                  identifier: 'aval' (3232,4)-(3232,8)
                                  =: '=' (3232,9)-(3232,10)
                                  call_expression (3232,11)-(3232,22)
                                    identifier: 'arrdup' (3232,11)-(3232,17)
                                    argument_list (3232,17)-(3232,22)
                                      (: '(' (3232,17)-(3232,18)
                                      identifier: 'zip' (3232,18)-(3232,21)
                                      ): ')' (3232,21)-(3232,22)
                                ;: ';' (3232,22)-(3232,23)
                            }: '}' (3233,3)-(3233,4)
                          else_clause (3233,5)-(3246,4)
                            else: 'else' (3233,5)-(3233,9)
                            compound_statement (3233,10)-(3246,4)
                              {: '{' (3233,10)-(3233,11)
                              expression_statement (3234,7)-(3234,56)
                                assignment_expression (3234,7)-(3234,55)
                                  identifier: 'out' (3234,7)-(3234,10)
                                  =: '=' (3234,11)-(3234,12)
                                  call_expression (3234,13)-(3234,55)
                                    identifier: 'zhalloc' (3234,13)-(3234,20)
                                    argument_list (3234,20)-(3234,55)
                                      (: '(' (3234,20)-(3234,21)
                                      binary_expression (3234,21)-(3234,54)
                                        sizeof_expression (3234,21)-(3234,35)
                                          sizeof: 'sizeof' (3234,21)-(3234,27)
                                          (: '(' (3234,27)-(3234,28)
                                          type_descriptor (3234,28)-(3234,34)
                                            primitive_type: 'char' (3234,28)-(3234,32)
                                            abstract_pointer_declarator (3234,33)-(3234,34)
                                              *: '*' (3234,33)-(3234,34)
                                          ): ')' (3234,34)-(3234,35)
                                        *: '*' (3234,36)-(3234,37)
                                        parenthesized_expression (3234,38)-(3234,54)
                                          (: '(' (3234,38)-(3234,39)
                                          binary_expression (3234,39)-(3234,53)
                                            binary_expression (3234,39)-(3234,49)
                                              number_literal: '2' (3234,39)-(3234,40)
                                              *: '*' (3234,41)-(3234,42)
                                              identifier: 'outlen' (3234,43)-(3234,49)
                                            +: '+' (3234,50)-(3234,51)
                                            number_literal: '1' (3234,52)-(3234,53)
                                          ): ')' (3234,53)-(3234,54)
                                      ): ')' (3234,54)-(3234,55)
                                ;: ';' (3234,55)-(3234,56)
                              while_statement (3235,7)-(3242,8)
                                while: 'while' (3235,7)-(3235,12)
                                parenthesized_expression (3235,13)-(3235,25)
                                  (: '(' (3235,13)-(3235,14)
                                  binary_expression (3235,14)-(3235,24)
                                    identifier: 'i' (3235,14)-(3235,15)
                                    <: '<' (3235,16)-(3235,17)
                                    identifier: 'outlen' (3235,18)-(3235,24)
                                  ): ')' (3235,24)-(3235,25)
                                compound_statement (3235,26)-(3242,8)
                                  {: '{' (3235,26)-(3235,27)
                                  if_statement (3236,4)-(3239,45)
                                    if: 'if' (3236,4)-(3236,6)
                                    parenthesized_expression (3236,7)-(3236,15)
                                      (: '(' (3236,7)-(3236,8)
                                      identifier: 'copied' (3236,8)-(3236,14)
                                      ): ')' (3236,14)-(3236,15)
                                    expression_statement (3237,8)-(3237,34)
                                      assignment_expression (3237,8)-(3237,33)
                                        subscript_expression (3237,8)-(3237,16)
                                          identifier: 'out' (3237,8)-(3237,11)
                                          [: '[' (3237,11)-(3237,12)
                                          binary_expression (3237,12)-(3237,15)
                                            identifier: 'i' (3237,12)-(3237,13)
                                            *: '*' (3237,13)-(3237,14)
                                            number_literal: '2' (3237,14)-(3237,15)
                                          ]: ']' (3237,15)-(3237,16)
                                        =: '=' (3237,17)-(3237,18)
                                        subscript_expression (3237,19)-(3237,33)
                                          identifier: 'aval' (3237,19)-(3237,23)
                                          [: '[' (3237,23)-(3237,24)
                                          binary_expression (3237,24)-(3237,32)
                                            identifier: 'i' (3237,24)-(3237,25)
                                            %: '%' (3237,26)-(3237,27)
                                            identifier: 'alen' (3237,28)-(3237,32)
                                          ]: ']' (3237,32)-(3237,33)
                                      ;: ';' (3237,33)-(3237,34)
                                    else_clause (3238,4)-(3239,45)
                                      else: 'else' (3238,4)-(3238,8)
                                      expression_statement (3239,8)-(3239,45)
                                        assignment_expression (3239,8)-(3239,44)
                                          subscript_expression (3239,8)-(3239,16)
                                            identifier: 'out' (3239,8)-(3239,11)
                                            [: '[' (3239,11)-(3239,12)
                                            binary_expression (3239,12)-(3239,15)
                                              identifier: 'i' (3239,12)-(3239,13)
                                              *: '*' (3239,13)-(3239,14)
                                              number_literal: '2' (3239,14)-(3239,15)
                                            ]: ']' (3239,15)-(3239,16)
                                          =: '=' (3239,17)-(3239,18)
                                          call_expression (3239,19)-(3239,44)
                                            identifier: 'dupstring' (3239,19)-(3239,28)
                                            argument_list (3239,28)-(3239,44)
                                              (: '(' (3239,28)-(3239,29)
                                              subscript_expression (3239,29)-(3239,43)
                                                identifier: 'aval' (3239,29)-(3239,33)
                                                [: '[' (3239,33)-(3239,34)
                                                binary_expression (3239,34)-(3239,42)
                                                  identifier: 'i' (3239,34)-(3239,35)
                                                  %: '%' (3239,36)-(3239,37)
                                                  identifier: 'alen' (3239,38)-(3239,42)
                                                ]: ']' (3239,42)-(3239,43)
                                              ): ')' (3239,43)-(3239,44)
                                        ;: ';' (3239,44)-(3239,45)
                                  expression_statement (3240,4)-(3240,44)
                                    assignment_expression (3240,4)-(3240,43)
                                      subscript_expression (3240,4)-(3240,14)
                                        identifier: 'out' (3240,4)-(3240,7)
                                        [: '[' (3240,7)-(3240,8)
                                        binary_expression (3240,8)-(3240,13)
                                          binary_expression (3240,8)-(3240,11)
                                            identifier: 'i' (3240,8)-(3240,9)
                                            *: '*' (3240,9)-(3240,10)
                                            number_literal: '2' (3240,10)-(3240,11)
                                          +: '+' (3240,11)-(3240,12)
                                          number_literal: '1' (3240,12)-(3240,13)
                                        ]: ']' (3240,13)-(3240,14)
                                      =: '=' (3240,15)-(3240,16)
                                      call_expression (3240,17)-(3240,43)
                                        identifier: 'dupstring' (3240,17)-(3240,26)
                                        argument_list (3240,26)-(3240,43)
                                          (: '(' (3240,26)-(3240,27)
                                          subscript_expression (3240,27)-(3240,42)
                                            identifier: 'zip' (3240,27)-(3240,30)
                                            [: '[' (3240,30)-(3240,31)
                                            binary_expression (3240,31)-(3240,41)
                                              identifier: 'i' (3240,31)-(3240,32)
                                              %: '%' (3240,33)-(3240,34)
                                              identifier: 'ziplen' (3240,35)-(3240,41)
                                            ]: ']' (3240,41)-(3240,42)
                                          ): ')' (3240,42)-(3240,43)
                                    ;: ';' (3240,43)-(3240,44)
                                  expression_statement (3241,4)-(3241,8)
                                    update_expression (3241,4)-(3241,7)
                                      identifier: 'i' (3241,4)-(3241,5)
                                      ++: '++' (3241,5)-(3241,7)
                                    ;: ';' (3241,7)-(3241,8)
                                  }: '}' (3242,7)-(3242,8)
                              expression_statement (3243,7)-(3243,23)
                                assignment_expression (3243,7)-(3243,22)
                                  subscript_expression (3243,7)-(3243,15)
                                    identifier: 'out' (3243,7)-(3243,10)
                                    [: '[' (3243,10)-(3243,11)
                                    binary_expression (3243,11)-(3243,14)
                                      identifier: 'i' (3243,11)-(3243,12)
                                      *: '*' (3243,12)-(3243,13)
                                      number_literal: '2' (3243,13)-(3243,14)
                                    ]: ']' (3243,14)-(3243,15)
                                  =: '=' (3243,16)-(3243,17)
                                  null (3243,18)-(3243,22)
                                    NULL: 'NULL' (3243,18)-(3243,22)
                                ;: ';' (3243,22)-(3243,23)
                              expression_statement (3244,7)-(3244,18)
                                assignment_expression (3244,7)-(3244,17)
                                  identifier: 'aval' (3244,7)-(3244,11)
                                  =: '=' (3244,12)-(3244,13)
                                  identifier: 'out' (3244,14)-(3244,17)
                                ;: ';' (3244,17)-(3244,18)
                              expression_statement (3245,7)-(3245,18)
                                assignment_expression (3245,7)-(3245,17)
                                  identifier: 'copied' (3245,7)-(3245,13)
                                  =: '=' (3245,14)-(3245,15)
                                  number_literal: '1' (3245,16)-(3245,17)
                                ;: ';' (3245,17)-(3245,18)
                              }: '}' (3246,3)-(3246,4)
                        }: '}' (3247,6)-(3247,7)
                      else_clause (3247,8)-(3253,7)
                        else: 'else' (3247,8)-(3247,12)
                        compound_statement (3247,13)-(3253,7)
                          {: '{' (3247,13)-(3247,14)
                          if_statement (3248,3)-(3251,4)
                            if: 'if' (3248,3)-(3248,5)
                            parenthesized_expression (3248,6)-(3248,20)
                              (: '(' (3248,6)-(3248,7)
                              call_expression (3248,7)-(3248,19)
                                identifier: 'unset' (3248,7)-(3248,12)
                                argument_list (3248,12)-(3248,19)
                                  (: '(' (3248,12)-(3248,13)
                                  identifier: 'UNSET' (3248,13)-(3248,18)
                                  ): ')' (3248,18)-(3248,19)
                              ): ')' (3248,19)-(3248,20)
                            compound_statement (3248,21)-(3251,4)
                              {: '{' (3248,21)-(3248,22)
                              expression_statement (3249,7)-(3249,40)
                                call_expression (3249,7)-(3249,39)
                                  identifier: 'zerr' (3249,7)-(3249,11)
                                  argument_list (3249,11)-(3249,39)
                                    (: '(' (3249,11)-(3249,12)
                                    string_literal (3249,12)-(3249,35)
                                      ": '"' (3249,12)-(3249,13)
                                      string_content: '%s: parameter not set' (3249,13)-(3249,34)
                                      ": '"' (3249,34)-(3249,35)
                                    ,: ',' (3249,35)-(3249,36)
                                    identifier: 's' (3249,37)-(3249,38)
                                    ): ')' (3249,38)-(3249,39)
                                ;: ';' (3249,39)-(3249,40)
                              return_statement (3250,7)-(3250,19)
                                return: 'return' (3250,7)-(3250,13)
                                null (3250,14)-(3250,18)
                                  NULL: 'NULL' (3250,14)-(3250,18)
                                ;: ';' (3250,18)-(3250,19)
                              }: '}' (3251,3)-(3251,4)
                          expression_statement (3252,3)-(3252,23)
                            assignment_expression (3252,3)-(3252,22)
                              identifier: 'val' (3252,3)-(3252,6)
                              =: '=' (3252,7)-(3252,8)
                              call_expression (3252,9)-(3252,22)
                                identifier: 'dupstring' (3252,9)-(3252,18)
                                argument_list (3252,18)-(3252,22)
                                  (: '(' (3252,18)-(3252,19)
                                  string_literal (3252,19)-(3252,21)
                                    ": '"' (3252,19)-(3252,20)
                                    ": '"' (3252,20)-(3252,21)
                                  ): ')' (3252,21)-(3252,22)
                            ;: ';' (3252,22)-(3252,23)
                          }: '}' (3253,6)-(3253,7)
                    }: '}' (3254,2)-(3254,3)
              }: '}' (3255,5)-(3255,6)
            else_clause (3255,7)-(3519,6)
              else: 'else' (3255,7)-(3255,11)
              if_statement (3255,12)-(3519,6)
                if: 'if' (3255,12)-(3255,14)
                parenthesized_expression (3255,15)-(3256,32)
                  (: '(' (3255,15)-(3255,16)
                  binary_expression (3255,16)-(3256,31)
                    identifier: 'inbrace' (3255,16)-(3255,23)
                    &&: '&&' (3255,24)-(3255,26)
                    parenthesized_expression (3255,27)-(3256,31)
                      (: '(' (3255,27)-(3255,28)
                      binary_expression (3255,28)-(3256,30)
                        binary_expression (3255,28)-(3256,16)
                          binary_expression (3255,28)-(3255,50)
                            binary_expression (3255,28)-(3255,37)
                              pointer_expression (3255,28)-(3255,30)
                                *: '*' (3255,28)-(3255,29)
                                identifier: 's' (3255,29)-(3255,30)
                              ==: '==' (3255,31)-(3255,33)
                              char_literal (3255,34)-(3255,37)
                                ': ''' (3255,34)-(3255,35)
                                character: '|' (3255,35)-(3255,36)
                                ': ''' (3255,36)-(3255,37)
                            ||: '||' (3255,38)-(3255,40)
                            binary_expression (3255,41)-(3255,50)
                              pointer_expression (3255,41)-(3255,43)
                                *: '*' (3255,41)-(3255,42)
                                identifier: 's' (3255,42)-(3255,43)
                              ==: '==' (3255,44)-(3255,46)
                              identifier: 'Bar' (3255,47)-(3255,50)
                          ||: '||' (3255,51)-(3255,53)
                          binary_expression (3256,7)-(3256,16)
                            pointer_expression (3256,7)-(3256,9)
                              *: '*' (3256,7)-(3256,8)
                              identifier: 's' (3256,8)-(3256,9)
                            ==: '==' (3256,10)-(3256,12)
                            char_literal (3256,13)-(3256,16)
                              ': ''' (3256,13)-(3256,14)
                              character: '*' (3256,14)-(3256,15)
                              ': ''' (3256,15)-(3256,16)
                        ||: '||' (3256,17)-(3256,19)
                        binary_expression (3256,20)-(3256,30)
                          pointer_expression (3256,20)-(3256,22)
                            *: '*' (3256,20)-(3256,21)
                            identifier: 's' (3256,21)-(3256,22)
                          ==: '==' (3256,23)-(3256,25)
                          identifier: 'Star' (3256,26)-(3256,30)
                      ): ')' (3256,30)-(3256,31)
                  ): ')' (3256,31)-(3256,32)
                compound_statement (3256,33)-(3326,6)
                  {: '{' (3256,33)-(3256,34)
                  declaration (3257,2)-(3257,44)
                    primitive_type: 'int' (3257,2)-(3257,5)
                    init_declarator (3257,6)-(3257,43)
                      identifier: 'intersect' (3257,6)-(3257,15)
                      =: '=' (3257,16)-(3257,17)
                      parenthesized_expression (3257,18)-(3257,43)
                        (: '(' (3257,18)-(3257,19)
                        binary_expression (3257,19)-(3257,42)
                          binary_expression (3257,19)-(3257,28)
                            pointer_expression (3257,19)-(3257,21)
                              *: '*' (3257,19)-(3257,20)
                              identifier: 's' (3257,20)-(3257,21)
                            ==: '==' (3257,22)-(3257,24)
                            char_literal (3257,25)-(3257,28)
                              ': ''' (3257,25)-(3257,26)
                              character: '*' (3257,26)-(3257,27)
                              ': ''' (3257,27)-(3257,28)
                          ||: '||' (3257,29)-(3257,31)
                          binary_expression (3257,32)-(3257,42)
                            pointer_expression (3257,32)-(3257,34)
                              *: '*' (3257,32)-(3257,33)
                              identifier: 's' (3257,33)-(3257,34)
                            ==: '==' (3257,35)-(3257,37)
                            identifier: 'Star' (3257,38)-(3257,42)
                        ): ')' (3257,42)-(3257,43)
                    ;: ';' (3257,43)-(3257,44)
                  declaration (3258,2)-(3258,32)
                    primitive_type: 'char' (3258,2)-(3258,6)
                    pointer_declarator (3258,7)-(3258,16)
                      *: '*' (3258,7)-(3258,8)
                      pointer_declarator (3258,8)-(3258,16)
                        *: '*' (3258,8)-(3258,9)
                        identifier: 'compare' (3258,9)-(3258,16)
                    ,: ',' (3258,16)-(3258,17)
                    pointer_declarator (3258,18)-(3258,22)
                      *: '*' (3258,18)-(3258,19)
                      pointer_declarator (3258,19)-(3258,22)
                        *: '*' (3258,19)-(3258,20)
                        identifier: 'ap' (3258,20)-(3258,22)
                    ,: ',' (3258,22)-(3258,23)
                    pointer_declarator (3258,24)-(3258,31)
                      *: '*' (3258,24)-(3258,25)
                      pointer_declarator (3258,25)-(3258,31)
                        *: '*' (3258,25)-(3258,26)
                        identifier: 'apsrc' (3258,26)-(3258,31)
                    ;: ';' (3258,31)-(3258,32)
                  expression_statement (3259,2)-(3259,6)
                    update_expression (3259,2)-(3259,5)
                      ++: '++' (3259,2)-(3259,4)
                      identifier: 's' (3259,4)-(3259,5)
                    ;: ';' (3259,5)-(3259,6)
                  if_statement (3260,2)-(3264,3)
                    if: 'if' (3260,2)-(3260,4)
                    parenthesized_expression (3260,5)-(3260,31)
                      (: '(' (3260,5)-(3260,6)
                      pointer_expression (3260,6)-(3260,30)
                        *: '*' (3260,6)-(3260,7)
                        call_expression (3260,7)-(3260,30)
                          identifier: 'itype_end' (3260,7)-(3260,16)
                          argument_list (3260,16)-(3260,30)
                            (: '(' (3260,16)-(3260,17)
                            identifier: 's' (3260,17)-(3260,18)
                            ,: ',' (3260,18)-(3260,19)
                            identifier: 'IIDENT' (3260,20)-(3260,26)
                            ,: ',' (3260,26)-(3260,27)
                            number_literal: '0' (3260,28)-(3260,29)
                            ): ')' (3260,29)-(3260,30)
                      ): ')' (3260,30)-(3260,31)
                    compound_statement (3260,32)-(3264,3)
                      {: '{' (3260,32)-(3260,33)
                      expression_statement (3261,6)-(3261,20)
                        call_expression (3261,6)-(3261,19)
                          identifier: 'untokenize' (3261,6)-(3261,16)
                          argument_list (3261,16)-(3261,19)
                            (: '(' (3261,16)-(3261,17)
                            identifier: 's' (3261,17)-(3261,18)
                            ): ')' (3261,18)-(3261,19)
                        ;: ';' (3261,19)-(3261,20)
                      expression_statement (3262,6)-(3262,39)
                        call_expression (3262,6)-(3262,38)
                          identifier: 'zerr' (3262,6)-(3262,10)
                          argument_list (3262,10)-(3262,38)
                            (: '(' (3262,10)-(3262,11)
                            string_literal (3262,11)-(3262,34)
                              ": '"' (3262,11)-(3262,12)
                              string_content: 'not an identifier: %s' (3262,12)-(3262,33)
                              ": '"' (3262,33)-(3262,34)
                            ,: ',' (3262,34)-(3262,35)
                            identifier: 's' (3262,36)-(3262,37)
                            ): ')' (3262,37)-(3262,38)
                        ;: ';' (3262,38)-(3262,39)
                      return_statement (3263,6)-(3263,18)
                        return: 'return' (3263,6)-(3263,12)
                        null (3263,13)-(3263,17)
                          NULL: 'NULL' (3263,13)-(3263,17)
                        ;: ';' (3263,17)-(3263,18)
                      }: '}' (3264,2)-(3264,3)
                  expression_statement (3265,2)-(3265,25)
                    assignment_expression (3265,2)-(3265,24)
                      identifier: 'compare' (3265,2)-(3265,9)
                      =: '=' (3265,10)-(3265,11)
                      call_expression (3265,12)-(3265,24)
                        identifier: 'getaparam' (3265,12)-(3265,21)
                        argument_list (3265,21)-(3265,24)
                          (: '(' (3265,21)-(3265,22)
                          identifier: 's' (3265,22)-(3265,23)
                          ): ')' (3265,23)-(3265,24)
                    ;: ';' (3265,24)-(3265,25)
                  if_statement (3266,2)-(3317,3)
                    if: 'if' (3266,2)-(3266,4)
                    parenthesized_expression (3266,5)-(3266,14)
                      (: '(' (3266,5)-(3266,6)
                      identifier: 'compare' (3266,6)-(3266,13)
                      ): ')' (3266,13)-(3266,14)
                    compound_statement (3266,15)-(3304,3)
                      {: '{' (3266,15)-(3266,16)
                      declaration (3267,6)-(3267,53)
                        type_identifier: 'HashTable' (3267,6)-(3267,15)
                        init_declarator (3267,16)-(3267,52)
                          identifier: 'ht' (3267,16)-(3267,18)
                          =: '=' (3267,19)-(3267,20)
                          call_expression (3267,21)-(3267,52)
                            identifier: 'newuniqtable' (3267,21)-(3267,33)
                            argument_list (3267,33)-(3267,52)
                              (: '(' (3267,33)-(3267,34)
                              binary_expression (3267,34)-(3267,51)
                                call_expression (3267,34)-(3267,49)
                                  identifier: 'arrlen' (3267,34)-(3267,40)
                                  argument_list (3267,40)-(3267,49)
                                    (: '(' (3267,40)-(3267,41)
                                    identifier: 'compare' (3267,41)-(3267,48)
                                    ): ')' (3267,48)-(3267,49)
                                +: '+' (3267,49)-(3267,50)
                                number_literal: '1' (3267,50)-(3267,51)
                              ): ')' (3267,51)-(3267,52)
                        ;: ';' (3267,52)-(3267,53)
                      declaration (3268,6)-(3268,18)
                        primitive_type: 'int' (3268,6)-(3268,9)
                        identifier: 'present' (3268,10)-(3268,17)
                        ;: ';' (3268,17)-(3268,18)
                      for_statement (3269,6)-(3271,42)
                        for: 'for' (3269,6)-(3269,9)
                        (: '(' (3269,10)-(3269,11)
                        assignment_expression (3269,11)-(3269,23)
                          identifier: 'ap' (3269,11)-(3269,13)
                          =: '=' (3269,14)-(3269,15)
                          identifier: 'compare' (3269,16)-(3269,23)
                        ;: ';' (3269,23)-(3269,24)
                        pointer_expression (3269,25)-(3269,28)
                          *: '*' (3269,25)-(3269,26)
                          identifier: 'ap' (3269,26)-(3269,28)
                        ;: ';' (3269,28)-(3269,29)
                        update_expression (3269,30)-(3269,34)
                          identifier: 'ap' (3269,30)-(3269,32)
                          ++: '++' (3269,32)-(3269,34)
                        ): ')' (3269,34)-(3269,35)
                        expression_statement (3270,3)-(3271,42)
                          cast_expression (3270,3)-(3271,41)
                            (: '(' (3270,3)-(3270,4)
                            type_descriptor (3270,4)-(3270,8)
                              primitive_type: 'void' (3270,4)-(3270,8)
                            ): ')' (3270,8)-(3270,9)
                            call_expression (3270,9)-(3271,41)
                              identifier: 'addhashnode2' (3270,9)-(3270,21)
                              argument_list (3270,21)-(3271,41)
                                (: '(' (3270,21)-(3270,22)
                                identifier: 'ht' (3270,22)-(3270,24)
                                ,: ',' (3270,24)-(3270,25)
                                pointer_expression (3270,26)-(3270,29)
                                  *: '*' (3270,26)-(3270,27)
                                  identifier: 'ap' (3270,27)-(3270,29)
                                ,: ',' (3270,29)-(3270,30)
                                cast_expression (3270,31)-(3271,40)
                                  (: '(' (3270,31)-(3270,32)
                                  type_descriptor (3270,32)-(3270,40)
                                    type_identifier: 'HashNode' (3270,32)-(3270,40)
                                  ): ')' (3270,40)-(3270,41)
                                  call_expression (3271,8)-(3271,40)
                                    identifier: 'zhalloc' (3271,8)-(3271,15)
                                    argument_list (3271,15)-(3271,40)
                                      (: '(' (3271,15)-(3271,16)
                                      sizeof_expression (3271,16)-(3271,39)
                                        sizeof: 'sizeof' (3271,16)-(3271,22)
                                        (: '(' (3271,22)-(3271,23)
                                        type_descriptor (3271,23)-(3271,38)
                                          struct_specifier (3271,23)-(3271,38)
                                            struct: 'struct' (3271,23)-(3271,29)
                                            type_identifier: 'hashnode' (3271,30)-(3271,38)
                                        ): ')' (3271,38)-(3271,39)
                                      ): ')' (3271,39)-(3271,40)
                                ): ')' (3271,40)-(3271,41)
                          ;: ';' (3271,41)-(3271,42)
                      if_statement (3272,6)-(3302,7)
                        if: 'if' (3272,6)-(3272,8)
                        parenthesized_expression (3272,9)-(3272,27)
                          (: '(' (3272,9)-(3272,10)
                          binary_expression (3272,10)-(3272,26)
                            unary_expression (3272,10)-(3272,17)
                              !: '!' (3272,10)-(3272,11)
                              identifier: 'vunset' (3272,11)-(3272,17)
                            &&: '&&' (3272,18)-(3272,20)
                            identifier: 'isarr' (3272,21)-(3272,26)
                          ): ')' (3272,26)-(3272,27)
                        compound_statement (3272,28)-(3288,7)
                          {: '{' (3272,28)-(3272,29)
                          if_statement (3273,3)-(3276,4)
                            if: 'if' (3273,3)-(3273,5)
                            parenthesized_expression (3273,6)-(3273,15)
                              (: '(' (3273,6)-(3273,7)
                              unary_expression (3273,7)-(3273,14)
                                !: '!' (3273,7)-(3273,8)
                                identifier: 'copied' (3273,8)-(3273,14)
                              ): ')' (3273,14)-(3273,15)
                            compound_statement (3273,16)-(3276,4)
                              {: '{' (3273,16)-(3273,17)
                              expression_statement (3274,7)-(3274,27)
                                assignment_expression (3274,7)-(3274,26)
                                  identifier: 'aval' (3274,7)-(3274,11)
                                  =: '=' (3274,12)-(3274,13)
                                  call_expression (3274,14)-(3274,26)
                                    identifier: 'arrdup' (3274,14)-(3274,20)
                                    argument_list (3274,20)-(3274,26)
                                      (: '(' (3274,20)-(3274,21)
                                      identifier: 'aval' (3274,21)-(3274,25)
                                      ): ')' (3274,25)-(3274,26)
                                ;: ';' (3274,26)-(3274,27)
                              expression_statement (3275,7)-(3275,18)
                                assignment_expression (3275,7)-(3275,17)
                                  identifier: 'copied' (3275,7)-(3275,13)
                                  =: '=' (3275,14)-(3275,15)
                                  number_literal: '1' (3275,16)-(3275,17)
                                ;: ';' (3275,17)-(3275,18)
                              }: '}' (3276,3)-(3276,4)
                          for_statement (3277,3)-(3286,4)
                            for: 'for' (3277,3)-(3277,6)
                            (: '(' (3277,7)-(3277,8)
                            assignment_expression (3277,8)-(3277,25)
                              identifier: 'ap' (3277,8)-(3277,10)
                              =: '=' (3277,11)-(3277,12)
                              assignment_expression (3277,13)-(3277,25)
                                identifier: 'apsrc' (3277,13)-(3277,18)
                                =: '=' (3277,19)-(3277,20)
                                identifier: 'aval' (3277,21)-(3277,25)
                            ;: ';' (3277,25)-(3277,26)
                            pointer_expression (3277,27)-(3277,33)
                              *: '*' (3277,27)-(3277,28)
                              identifier: 'apsrc' (3277,28)-(3277,33)
                            ;: ';' (3277,33)-(3277,34)
                            update_expression (3277,35)-(3277,42)
                              identifier: 'apsrc' (3277,35)-(3277,40)
                              ++: '++' (3277,40)-(3277,42)
                            ): ')' (3277,42)-(3277,43)
                            compound_statement (3277,44)-(3286,4)
                              {: '{' (3277,44)-(3277,45)
                              expression_statement (3278,7)-(3278,26)
                                call_expression (3278,7)-(3278,25)
                                  identifier: 'untokenize' (3278,7)-(3278,17)
                                  argument_list (3278,17)-(3278,25)
                                    (: '(' (3278,17)-(3278,18)
                                    pointer_expression (3278,18)-(3278,24)
                                      *: '*' (3278,18)-(3278,19)
                                      identifier: 'apsrc' (3278,19)-(3278,24)
                                    ): ')' (3278,24)-(3278,25)
                                ;: ';' (3278,25)-(3278,26)
                              expression_statement (3279,7)-(3279,52)
                                assignment_expression (3279,7)-(3279,51)
                                  identifier: 'present' (3279,7)-(3279,14)
                                  =: '=' (3279,15)-(3279,16)
                                  parenthesized_expression (3279,17)-(3279,51)
                                    (: '(' (3279,17)-(3279,18)
                                    binary_expression (3279,18)-(3279,50)
                                      call_expression (3279,18)-(3279,42)
                                        identifier: 'gethashnode2' (3279,18)-(3279,30)
                                        argument_list (3279,30)-(3279,42)
                                          (: '(' (3279,30)-(3279,31)
                                          identifier: 'ht' (3279,31)-(3279,33)
                                          ,: ',' (3279,33)-(3279,34)
                                          pointer_expression (3279,35)-(3279,41)
                                            *: '*' (3279,35)-(3279,36)
                                            identifier: 'apsrc' (3279,36)-(3279,41)
                                          ): ')' (3279,41)-(3279,42)
                                      !=: '!=' (3279,43)-(3279,45)
                                      null (3279,46)-(3279,50)
                                        NULL: 'NULL' (3279,46)-(3279,50)
                                    ): ')' (3279,50)-(3279,51)
                                ;: ';' (3279,51)-(3279,52)
                              if_statement (3280,7)-(3285,8)
                                if: 'if' (3280,7)-(3280,9)
                                parenthesized_expression (3280,10)-(3280,42)
                                  (: '(' (3280,10)-(3280,11)
                                  conditional_expression (3280,11)-(3280,41)
                                    identifier: 'intersect' (3280,11)-(3280,20)
                                    ?: '?' (3280,21)-(3280,22)
                                    identifier: 'present' (3280,23)-(3280,30)
                                    :: ':' (3280,31)-(3280,32)
                                    unary_expression (3280,33)-(3280,41)
                                      !: '!' (3280,33)-(3280,34)
                                      identifier: 'present' (3280,34)-(3280,41)
                                  ): ')' (3280,41)-(3280,42)
                                compound_statement (3280,43)-(3285,8)
                                  {: '{' (3280,43)-(3280,44)
                                  if_statement (3281,4)-(3283,5)
                                    if: 'if' (3281,4)-(3281,6)
                                    parenthesized_expression (3281,7)-(3281,20)
                                      (: '(' (3281,7)-(3281,8)
                                      binary_expression (3281,8)-(3281,19)
                                        identifier: 'ap' (3281,8)-(3281,10)
                                        !=: '!=' (3281,11)-(3281,13)
                                        identifier: 'apsrc' (3281,14)-(3281,19)
                                      ): ')' (3281,19)-(3281,20)
                                    compound_statement (3281,21)-(3283,5)
                                      {: '{' (3281,21)-(3281,22)
                                      expression_statement (3282,8)-(3282,21)
                                        assignment_expression (3282,8)-(3282,20)
                                          pointer_expression (3282,8)-(3282,11)
                                            *: '*' (3282,8)-(3282,9)
                                            identifier: 'ap' (3282,9)-(3282,11)
                                          =: '=' (3282,12)-(3282,13)
                                          pointer_expression (3282,14)-(3282,20)
                                            *: '*' (3282,14)-(3282,15)
                                            identifier: 'apsrc' (3282,15)-(3282,20)
                                        ;: ';' (3282,20)-(3282,21)
                                      }: '}' (3283,4)-(3283,5)
                                  expression_statement (3284,4)-(3284,9)
                                    update_expression (3284,4)-(3284,8)
                                      identifier: 'ap' (3284,4)-(3284,6)
                                      ++: '++' (3284,6)-(3284,8)
                                    ;: ';' (3284,8)-(3284,9)
                                  }: '}' (3285,7)-(3285,8)
                              }: '}' (3286,3)-(3286,4)
                          expression_statement (3287,3)-(3287,14)
                            assignment_expression (3287,3)-(3287,13)
                              pointer_expression (3287,3)-(3287,6)
                                *: '*' (3287,3)-(3287,4)
                                identifier: 'ap' (3287,4)-(3287,6)
                              =: '=' (3287,7)-(3287,8)
                              null (3287,9)-(3287,13)
                                NULL: 'NULL' (3287,9)-(3287,13)
                            ;: ';' (3287,13)-(3287,14)
                          }: '}' (3288,6)-(3288,7)
                        else_clause (3288,8)-(3302,7)
                          else: 'else' (3288,8)-(3288,12)
                          compound_statement (3288,13)-(3302,7)
                            {: '{' (3288,13)-(3288,14)
                            if_statement (3289,3)-(3301,4)
                              if: 'if' (3289,3)-(3289,5)
                              parenthesized_expression (3289,6)-(3289,14)
                                (: '(' (3289,6)-(3289,7)
                                identifier: 'vunset' (3289,7)-(3289,13)
                                ): ')' (3289,13)-(3289,14)
                              compound_statement (3289,15)-(3297,4)
                                {: '{' (3289,15)-(3289,16)
                                if_statement (3290,7)-(3295,8)
                                  if: 'if' (3290,7)-(3290,9)
                                  parenthesized_expression (3290,10)-(3290,38)
                                    (: '(' (3290,10)-(3290,11)
                                    binary_expression (3290,11)-(3290,37)
                                      binary_expression (3290,11)-(3290,21)
                                        identifier: 'vunset' (3290,11)-(3290,17)
                                        >: '>' (3290,18)-(3290,19)
                                        number_literal: '0' (3290,20)-(3290,21)
                                      &&: '&&' (3290,22)-(3290,24)
                                      call_expression (3290,25)-(3290,37)
                                        identifier: 'unset' (3290,25)-(3290,30)
                                        argument_list (3290,30)-(3290,37)
                                          (: '(' (3290,30)-(3290,31)
                                          identifier: 'UNSET' (3290,31)-(3290,36)
                                          ): ')' (3290,36)-(3290,37)
                                    ): ')' (3290,37)-(3290,38)
                                  compound_statement (3290,39)-(3295,8)
                                    {: '{' (3290,39)-(3290,40)
                                    expression_statement (3291,4)-(3291,18)
                                      assignment_expression (3291,4)-(3291,17)
                                        pointer_expression (3291,4)-(3291,10)
                                          *: '*' (3291,4)-(3291,5)
                                          identifier: 'idend' (3291,5)-(3291,10)
                                        =: '=' (3291,11)-(3291,12)
                                        char_literal (3291,13)-(3291,17)
                                          ': ''' (3291,13)-(3291,14)
                                          escape_sequence: '\0' (3291,14)-(3291,16)
                                          ': ''' (3291,16)-(3291,17)
                                      ;: ';' (3291,17)-(3291,18)
                                    expression_statement (3292,4)-(3292,41)
                                      call_expression (3292,4)-(3292,40)
                                        identifier: 'zerr' (3292,4)-(3292,8)
                                        argument_list (3292,8)-(3292,40)
                                          (: '(' (3292,8)-(3292,9)
                                          string_literal (3292,9)-(3292,32)
                                            ": '"' (3292,9)-(3292,10)
                                            string_content: '%s: parameter not set' (3292,10)-(3292,31)
                                            ": '"' (3292,31)-(3292,32)
                                          ,: ',' (3292,32)-(3292,33)
                                          identifier: 'idbeg' (3292,34)-(3292,39)
                                          ): ')' (3292,39)-(3292,40)
                                      ;: ';' (3292,40)-(3292,41)
                                    expression_statement (3293,4)-(3293,24)
                                      call_expression (3293,4)-(3293,23)
                                        identifier: 'deletehashtable' (3293,4)-(3293,19)
                                        argument_list (3293,19)-(3293,23)
                                          (: '(' (3293,19)-(3293,20)
                                          identifier: 'ht' (3293,20)-(3293,22)
                                          ): ')' (3293,22)-(3293,23)
                                      ;: ';' (3293,23)-(3293,24)
                                    return_statement (3294,4)-(3294,16)
                                      return: 'return' (3294,4)-(3294,10)
                                      null (3294,11)-(3294,15)
                                        NULL: 'NULL' (3294,11)-(3294,15)
                                      ;: ';' (3294,15)-(3294,16)
                                    }: '}' (3295,7)-(3295,8)
                                expression_statement (3296,7)-(3296,27)
                                  assignment_expression (3296,7)-(3296,26)
                                    identifier: 'val' (3296,7)-(3296,10)
                                    =: '=' (3296,11)-(3296,12)
                                    call_expression (3296,13)-(3296,26)
                                      identifier: 'dupstring' (3296,13)-(3296,22)
                                      argument_list (3296,22)-(3296,26)
                                        (: '(' (3296,22)-(3296,23)
                                        string_literal (3296,23)-(3296,25)
                                          ": '"' (3296,23)-(3296,24)
                                          ": '"' (3296,24)-(3296,25)
                                        ): ')' (3296,25)-(3296,26)
                                  ;: ';' (3296,26)-(3296,27)
                                }: '}' (3297,3)-(3297,4)
                              else_clause (3297,5)-(3301,4)
                                else: 'else' (3297,5)-(3297,9)
                                compound_statement (3297,10)-(3301,4)
                                  {: '{' (3297,10)-(3297,11)
                                  expression_statement (3298,7)-(3298,49)
                                    assignment_expression (3298,7)-(3298,48)
                                      identifier: 'present' (3298,7)-(3298,14)
                                      =: '=' (3298,15)-(3298,16)
                                      parenthesized_expression (3298,17)-(3298,48)
                                        (: '(' (3298,17)-(3298,18)
                                        binary_expression (3298,18)-(3298,47)
                                          call_expression (3298,18)-(3298,39)
                                            identifier: 'gethashnode2' (3298,18)-(3298,30)
                                            argument_list (3298,30)-(3298,39)
                                              (: '(' (3298,30)-(3298,31)
                                              identifier: 'ht' (3298,31)-(3298,33)
                                              ,: ',' (3298,33)-(3298,34)
                                              identifier: 'val' (3298,35)-(3298,38)
                                              ): ')' (3298,38)-(3298,39)
                                          !=: '!=' (3298,40)-(3298,42)
                                          null (3298,43)-(3298,47)
                                            NULL: 'NULL' (3298,43)-(3298,47)
                                        ): ')' (3298,47)-(3298,48)
                                    ;: ';' (3298,48)-(3298,49)
                                  if_statement (3299,7)-(3300,24)
                                    if: 'if' (3299,7)-(3299,9)
                                    parenthesized_expression (3299,10)-(3299,42)
                                      (: '(' (3299,10)-(3299,11)
                                      conditional_expression (3299,11)-(3299,41)
                                        identifier: 'intersect' (3299,11)-(3299,20)
                                        ?: '?' (3299,21)-(3299,22)
                                        unary_expression (3299,23)-(3299,31)
                                          !: '!' (3299,23)-(3299,24)
                                          identifier: 'present' (3299,24)-(3299,31)
                                        :: ':' (3299,32)-(3299,33)
                                        identifier: 'present' (3299,34)-(3299,41)
                                      ): ')' (3299,41)-(3299,42)
                                    expression_statement (3300,4)-(3300,24)
                                      assignment_expression (3300,4)-(3300,23)
                                        identifier: 'val' (3300,4)-(3300,7)
                                        =: '=' (3300,8)-(3300,9)
                                        call_expression (3300,10)-(3300,23)
                                          identifier: 'dupstring' (3300,10)-(3300,19)
                                          argument_list (3300,19)-(3300,23)
                                            (: '(' (3300,19)-(3300,20)
                                            string_literal (3300,20)-(3300,22)
                                              ": '"' (3300,20)-(3300,21)
                                              ": '"' (3300,21)-(3300,22)
                                            ): ')' (3300,22)-(3300,23)
                                      ;: ';' (3300,23)-(3300,24)
                                  }: '}' (3301,3)-(3301,4)
                            }: '}' (3302,6)-(3302,7)
                      expression_statement (3303,6)-(3303,26)
                        call_expression (3303,6)-(3303,25)
                          identifier: 'deletehashtable' (3303,6)-(3303,21)
                          argument_list (3303,21)-(3303,25)
                            (: '(' (3303,21)-(3303,22)
                            identifier: 'ht' (3303,22)-(3303,24)
                            ): ')' (3303,24)-(3303,25)
                        ;: ';' (3303,25)-(3303,26)
                      }: '}' (3304,2)-(3304,3)
                    else_clause (3304,4)-(3317,3)
                      else: 'else' (3304,4)-(3304,8)
                      if_statement (3304,9)-(3317,3)
                        if: 'if' (3304,9)-(3304,11)
                        parenthesized_expression (3304,12)-(3304,23)
                          (: '(' (3304,12)-(3304,13)
                          identifier: 'intersect' (3304,13)-(3304,22)
                          ): ')' (3304,22)-(3304,23)
                        compound_statement (3304,24)-(3317,3)
                          {: '{' (3304,24)-(3304,25)
                          comment: '/*
	     * The intersection with nothing is nothing...
	     * Seems a bit pointless complaining that the first
	     * expression is unset here if the second is, too.
	     */' (3305,6)-(3309,9)
                          if_statement (3310,6)-(3316,7)
                            if: 'if' (3310,6)-(3310,8)
                            parenthesized_expression (3310,9)-(3310,18)
                              (: '(' (3310,9)-(3310,10)
                              unary_expression (3310,10)-(3310,17)
                                !: '!' (3310,10)-(3310,11)
                                identifier: 'vunset' (3310,11)-(3310,17)
                              ): ')' (3310,17)-(3310,18)
                            compound_statement (3310,19)-(3316,7)
                              {: '{' (3310,19)-(3310,20)
                              if_statement (3311,3)-(3315,4)
                                if: 'if' (3311,3)-(3311,5)
                                parenthesized_expression (3311,6)-(3311,13)
                                  (: '(' (3311,6)-(3311,7)
                                  identifier: 'isarr' (3311,7)-(3311,12)
                                  ): ')' (3311,12)-(3311,13)
                                compound_statement (3311,14)-(3313,4)
                                  {: '{' (3311,14)-(3311,15)
                                  expression_statement (3312,7)-(3312,29)
                                    assignment_expression (3312,7)-(3312,28)
                                      identifier: 'aval' (3312,7)-(3312,11)
                                      =: '=' (3312,12)-(3312,13)
                                      call_expression (3312,14)-(3312,28)
                                        identifier: 'hmkarray' (3312,14)-(3312,22)
                                        argument_list (3312,22)-(3312,28)
                                          (: '(' (3312,22)-(3312,23)
                                          null (3312,23)-(3312,27)
                                            NULL: 'NULL' (3312,23)-(3312,27)
                                          ): ')' (3312,27)-(3312,28)
                                    ;: ';' (3312,28)-(3312,29)
                                  }: '}' (3313,3)-(3313,4)
                                else_clause (3313,5)-(3315,4)
                                  else: 'else' (3313,5)-(3313,9)
                                  compound_statement (3313,10)-(3315,4)
                                    {: '{' (3313,10)-(3313,11)
                                    expression_statement (3314,7)-(3314,27)
                                      assignment_expression (3314,7)-(3314,26)
                                        identifier: 'val' (3314,7)-(3314,10)
                                        =: '=' (3314,11)-(3314,12)
                                        call_expression (3314,13)-(3314,26)
                                          identifier: 'dupstring' (3314,13)-(3314,22)
                                          argument_list (3314,22)-(3314,26)
                                            (: '(' (3314,22)-(3314,23)
                                            string_literal (3314,23)-(3314,25)
                                              ": '"' (3314,23)-(3314,24)
                                              ": '"' (3314,24)-(3314,25)
                                            ): ')' (3314,25)-(3314,26)
                                      ;: ';' (3314,26)-(3314,27)
                                    }: '}' (3315,3)-(3315,4)
                              }: '}' (3316,6)-(3316,7)
                          }: '}' (3317,2)-(3317,3)
                  if_statement (3318,2)-(3325,3)
                    if: 'if' (3318,2)-(3318,4)
                    parenthesized_expression (3318,5)-(3318,13)
                      (: '(' (3318,5)-(3318,6)
                      identifier: 'vunset' (3318,6)-(3318,12)
                      ): ')' (3318,12)-(3318,13)
                    compound_statement (3318,14)-(3325,3)
                      {: '{' (3318,14)-(3318,15)
                      if_statement (3319,6)-(3323,7)
                        if: 'if' (3319,6)-(3319,8)
                        parenthesized_expression (3319,9)-(3319,37)
                          (: '(' (3319,9)-(3319,10)
                          binary_expression (3319,10)-(3319,36)
                            binary_expression (3319,10)-(3319,20)
                              identifier: 'vunset' (3319,10)-(3319,16)
                              >: '>' (3319,17)-(3319,18)
                              number_literal: '0' (3319,19)-(3319,20)
                            &&: '&&' (3319,21)-(3319,23)
                            call_expression (3319,24)-(3319,36)
                              identifier: 'unset' (3319,24)-(3319,29)
                              argument_list (3319,29)-(3319,36)
                                (: '(' (3319,29)-(3319,30)
                                identifier: 'UNSET' (3319,30)-(3319,35)
                                ): ')' (3319,35)-(3319,36)
                          ): ')' (3319,36)-(3319,37)
                        compound_statement (3319,38)-(3323,7)
                          {: '{' (3319,38)-(3319,39)
                          expression_statement (3320,3)-(3320,17)
                            assignment_expression (3320,3)-(3320,16)
                              pointer_expression (3320,3)-(3320,9)
                                *: '*' (3320,3)-(3320,4)
                                identifier: 'idend' (3320,4)-(3320,9)
                              =: '=' (3320,10)-(3320,11)
                              char_literal (3320,12)-(3320,16)
                                ': ''' (3320,12)-(3320,13)
                                escape_sequence: '\0' (3320,13)-(3320,15)
                                ': ''' (3320,15)-(3320,16)
                            ;: ';' (3320,16)-(3320,17)
                          expression_statement (3321,3)-(3321,40)
                            call_expression (3321,3)-(3321,39)
                              identifier: 'zerr' (3321,3)-(3321,7)
                              argument_list (3321,7)-(3321,39)
                                (: '(' (3321,7)-(3321,8)
                                string_literal (3321,8)-(3321,31)
                                  ": '"' (3321,8)-(3321,9)
                                  string_content: '%s: parameter not set' (3321,9)-(3321,30)
                                  ": '"' (3321,30)-(3321,31)
                                ,: ',' (3321,31)-(3321,32)
                                identifier: 'idbeg' (3321,33)-(3321,38)
                                ): ')' (3321,38)-(3321,39)
                            ;: ';' (3321,39)-(3321,40)
                          return_statement (3322,3)-(3322,15)
                            return: 'return' (3322,3)-(3322,9)
                            null (3322,10)-(3322,14)
                              NULL: 'NULL' (3322,10)-(3322,14)
                            ;: ';' (3322,14)-(3322,15)
                          }: '}' (3323,6)-(3323,7)
                      expression_statement (3324,6)-(3324,26)
                        assignment_expression (3324,6)-(3324,25)
                          identifier: 'val' (3324,6)-(3324,9)
                          =: '=' (3324,10)-(3324,11)
                          call_expression (3324,12)-(3324,25)
                            identifier: 'dupstring' (3324,12)-(3324,21)
                            argument_list (3324,21)-(3324,25)
                              (: '(' (3324,21)-(3324,22)
                              string_literal (3324,22)-(3324,24)
                                ": '"' (3324,22)-(3324,23)
                                ": '"' (3324,23)-(3324,24)
                              ): ')' (3324,24)-(3324,25)
                        ;: ';' (3324,25)-(3324,26)
                      }: '}' (3325,2)-(3325,3)
                  }: '}' (3326,5)-(3326,6)
                else_clause (3326,7)-(3519,6)
                  else: 'else' (3326,7)-(3326,11)
                  compound_statement (3326,12)-(3519,6)
                    {: '{' (3326,12)-(3326,13)
                    comment: '/* no ${...=...} or anything, but possible modifiers. */' (3326,16)-(3326,72)
                    comment: '/*
	 * Handler ${+...}.  TODO: strange, why do we handle this only
	 * if there isn't a trailing modifier?  Why don't we do this
	 * e.g. when we handle the ${(t)...} flag?
	 */' (3327,2)-(3331,5)
                    labeled_statement (3332,1)-(3343,3)
                      statement_identifier: 'colonsubscript' (3332,1)-(3332,15)
                      :: ':' (3332,15)-(3332,16)
                      if_statement (3333,2)-(3343,3)
                        if: 'if' (3333,2)-(3333,4)
                        parenthesized_expression (3333,5)-(3333,13)
                          (: '(' (3333,5)-(3333,6)
                          identifier: 'chkset' (3333,6)-(3333,12)
                          ): ')' (3333,12)-(3333,13)
                        compound_statement (3333,14)-(3336,3)
                          {: '{' (3333,14)-(3333,15)
                          expression_statement (3334,6)-(3334,42)
                            assignment_expression (3334,6)-(3334,41)
                              identifier: 'val' (3334,6)-(3334,9)
                              =: '=' (3334,10)-(3334,11)
                              call_expression (3334,12)-(3334,41)
                                identifier: 'dupstring' (3334,12)-(3334,21)
                                argument_list (3334,21)-(3334,41)
                                  (: '(' (3334,21)-(3334,22)
                                  conditional_expression (3334,22)-(3334,40)
                                    identifier: 'vunset' (3334,22)-(3334,28)
                                    ?: '?' (3334,29)-(3334,30)
                                    string_literal (3334,31)-(3334,34)
                                      ": '"' (3334,31)-(3334,32)
                                      string_content: '0' (3334,32)-(3334,33)
                                      ": '"' (3334,33)-(3334,34)
                                    :: ':' (3334,35)-(3334,36)
                                    string_literal (3334,37)-(3334,40)
                                      ": '"' (3334,37)-(3334,38)
                                      string_content: '1' (3334,38)-(3334,39)
                                      ": '"' (3334,39)-(3334,40)
                                  ): ')' (3334,40)-(3334,41)
                            ;: ';' (3334,41)-(3334,42)
                          expression_statement (3335,6)-(3335,16)
                            assignment_expression (3335,6)-(3335,15)
                              identifier: 'isarr' (3335,6)-(3335,11)
                              =: '=' (3335,12)-(3335,13)
                              number_literal: '0' (3335,14)-(3335,15)
                            ;: ';' (3335,15)-(3335,16)
                          }: '}' (3336,2)-(3336,3)
                        else_clause (3336,4)-(3343,3)
                          else: 'else' (3336,4)-(3336,8)
                          if_statement (3336,9)-(3343,3)
                            if: 'if' (3336,9)-(3336,11)
                            parenthesized_expression (3336,12)-(3336,20)
                              (: '(' (3336,12)-(3336,13)
                              identifier: 'vunset' (3336,13)-(3336,19)
                              ): ')' (3336,19)-(3336,20)
                            compound_statement (3336,21)-(3343,3)
                              {: '{' (3336,21)-(3336,22)
                              if_statement (3337,6)-(3341,7)
                                if: 'if' (3337,6)-(3337,8)
                                parenthesized_expression (3337,9)-(3337,37)
                                  (: '(' (3337,9)-(3337,10)
                                  binary_expression (3337,10)-(3337,36)
                                    binary_expression (3337,10)-(3337,20)
                                      identifier: 'vunset' (3337,10)-(3337,16)
                                      >: '>' (3337,17)-(3337,18)
                                      number_literal: '0' (3337,19)-(3337,20)
                                    &&: '&&' (3337,21)-(3337,23)
                                    call_expression (3337,24)-(3337,36)
                                      identifier: 'unset' (3337,24)-(3337,29)
                                      argument_list (3337,29)-(3337,36)
                                        (: '(' (3337,29)-(3337,30)
                                        identifier: 'UNSET' (3337,30)-(3337,35)
                                        ): ')' (3337,35)-(3337,36)
                                  ): ')' (3337,36)-(3337,37)
                                compound_statement (3337,38)-(3341,7)
                                  {: '{' (3337,38)-(3337,39)
                                  expression_statement (3338,3)-(3338,17)
                                    assignment_expression (3338,3)-(3338,16)
                                      pointer_expression (3338,3)-(3338,9)
                                        *: '*' (3338,3)-(3338,4)
                                        identifier: 'idend' (3338,4)-(3338,9)
                                      =: '=' (3338,10)-(3338,11)
                                      char_literal (3338,12)-(3338,16)
                                        ': ''' (3338,12)-(3338,13)
                                        escape_sequence: '\0' (3338,13)-(3338,15)
                                        ': ''' (3338,15)-(3338,16)
                                    ;: ';' (3338,16)-(3338,17)
                                  expression_statement (3339,3)-(3339,40)
                                    call_expression (3339,3)-(3339,39)
                                      identifier: 'zerr' (3339,3)-(3339,7)
                                      argument_list (3339,7)-(3339,39)
                                        (: '(' (3339,7)-(3339,8)
                                        string_literal (3339,8)-(3339,31)
                                          ": '"' (3339,8)-(3339,9)
                                          string_content: '%s: parameter not set' (3339,9)-(3339,30)
                                          ": '"' (3339,30)-(3339,31)
                                        ,: ',' (3339,31)-(3339,32)
                                        identifier: 'idbeg' (3339,33)-(3339,38)
                                        ): ')' (3339,38)-(3339,39)
                                    ;: ';' (3339,39)-(3339,40)
                                  return_statement (3340,3)-(3340,15)
                                    return: 'return' (3340,3)-(3340,9)
                                    null (3340,10)-(3340,14)
                                      NULL: 'NULL' (3340,10)-(3340,14)
                                    ;: ';' (3340,14)-(3340,15)
                                  }: '}' (3341,6)-(3341,7)
                              expression_statement (3342,6)-(3342,26)
                                assignment_expression (3342,6)-(3342,25)
                                  identifier: 'val' (3342,6)-(3342,9)
                                  =: '=' (3342,10)-(3342,11)
                                  call_expression (3342,12)-(3342,25)
                                    identifier: 'dupstring' (3342,12)-(3342,21)
                                    argument_list (3342,21)-(3342,25)
                                      (: '(' (3342,21)-(3342,22)
                                      string_literal (3342,22)-(3342,24)
                                        ": '"' (3342,22)-(3342,23)
                                        ": '"' (3342,23)-(3342,24)
                                      ): ')' (3342,24)-(3342,25)
                                ;: ';' (3342,25)-(3342,26)
                              }: '}' (3343,2)-(3343,3)
                    if_statement (3344,2)-(3480,3)
                      if: 'if' (3344,2)-(3344,4)
                      parenthesized_expression (3344,5)-(3344,22)
                        (: '(' (3344,5)-(3344,6)
                        binary_expression (3344,6)-(3344,21)
                          identifier: 'colf' (3344,6)-(3344,10)
                          &&: '&&' (3344,11)-(3344,13)
                          identifier: 'inbrace' (3344,14)-(3344,21)
                        ): ')' (3344,21)-(3344,22)
                      compound_statement (3344,23)-(3480,3)
                        {: '{' (3344,23)-(3344,24)
                        comment: '/*
	     * Look for ${PARAM:OFFSET} or ${PARAM:OFFSET:LENGTH}.
	     * This must appear before modifiers.  For compatibility
	     * with bash we perform both standard string substitutions
	     * and math eval.
	     */' (3345,6)-(3350,9)
                        declaration (3351,6)-(3351,26)
                          primitive_type: 'char' (3351,6)-(3351,10)
                          pointer_declarator (3351,11)-(3351,25)
                            *: '*' (3351,11)-(3351,12)
                            identifier: 'check_offset2' (3351,12)-(3351,25)
                          ;: ';' (3351,25)-(3351,26)
                        declaration (3352,6)-(3352,68)
                          primitive_type: 'char' (3352,6)-(3352,10)
                          init_declarator (3352,11)-(3352,67)
                            pointer_declarator (3352,11)-(3352,24)
                              *: '*' (3352,11)-(3352,12)
                              identifier: 'check_offset' (3352,12)-(3352,24)
                            =: '=' (3352,25)-(3352,26)
                            call_expression (3352,27)-(3352,67)
                              identifier: 'check_colon_subscript' (3352,27)-(3352,48)
                              argument_list (3352,48)-(3352,67)
                                (: '(' (3352,48)-(3352,49)
                                identifier: 's' (3352,49)-(3352,50)
                                ,: ',' (3352,50)-(3352,51)
                                pointer_expression (3352,52)-(3352,66)
                                  &: '&' (3352,52)-(3352,53)
                                  identifier: 'check_offset2' (3352,53)-(3352,66)
                                ): ')' (3352,66)-(3352,67)
                          ;: ';' (3352,67)-(3352,68)
                        if_statement (3353,6)-(3479,7)
                          if: 'if' (3353,6)-(3353,8)
                          parenthesized_expression (3353,9)-(3353,23)
                            (: '(' (3353,9)-(3353,10)
                            identifier: 'check_offset' (3353,10)-(3353,22)
                            ): ')' (3353,22)-(3353,23)
                          compound_statement (3353,24)-(3479,7)
                            {: '{' (3353,24)-(3353,25)
                            declaration (3354,3)-(3354,42)
                              type_identifier: 'zlong' (3354,3)-(3354,8)
                              init_declarator (3354,9)-(3354,41)
                                identifier: 'offset' (3354,9)-(3354,15)
                                =: '=' (3354,16)-(3354,17)
                                call_expression (3354,18)-(3354,41)
                                  identifier: 'mathevali' (3354,18)-(3354,27)
                                  argument_list (3354,27)-(3354,41)
                                    (: '(' (3354,27)-(3354,28)
                                    identifier: 'check_offset' (3354,28)-(3354,40)
                                    ): ')' (3354,40)-(3354,41)
                              ;: ';' (3354,41)-(3354,42)
                            declaration (3355,3)-(3355,20)
                              type_identifier: 'zlong' (3355,3)-(3355,8)
                              init_declarator (3355,9)-(3355,19)
                                identifier: 'length' (3355,9)-(3355,15)
                                =: '=' (3355,16)-(3355,17)
                                number_literal: '0' (3355,18)-(3355,19)
                              ;: ';' (3355,19)-(3355,20)
                            declaration (3356,3)-(3356,22)
                              primitive_type: 'int' (3356,3)-(3356,6)
                              init_declarator (3356,7)-(3356,21)
                                identifier: 'length_set' (3356,7)-(3356,17)
                                =: '=' (3356,18)-(3356,19)
                                number_literal: '0' (3356,20)-(3356,21)
                              ;: ';' (3356,21)-(3356,22)
                            declaration (3357,3)-(3357,31)
                              primitive_type: 'int' (3357,3)-(3357,6)
                              init_declarator (3357,7)-(3357,30)
                                identifier: 'offset_hack_argzero' (3357,7)-(3357,26)
                                =: '=' (3357,27)-(3357,28)
                                number_literal: '0' (3357,29)-(3357,30)
                              ;: ';' (3357,30)-(3357,31)
                            if_statement (3358,3)-(3359,19)
                              if: 'if' (3358,3)-(3358,5)
                              parenthesized_expression (3358,6)-(3358,15)
                                (: '(' (3358,6)-(3358,7)
                                identifier: 'errflag' (3358,7)-(3358,14)
                                ): ')' (3358,14)-(3358,15)
                              return_statement (3359,7)-(3359,19)
                                return: 'return' (3359,7)-(3359,13)
                                null (3359,14)-(3359,18)
                                  NULL: 'NULL' (3359,14)-(3359,18)
                                ;: ';' (3359,18)-(3359,19)
                            if_statement (3360,3)-(3363,4)
                              if: 'if' (3360,3)-(3360,5)
                              parenthesized_expression (3360,6)-(3360,49)
                                (: '(' (3360,6)-(3360,7)
                                parenthesized_expression (3360,7)-(3360,48)
                                  (: '(' (3360,7)-(3360,8)
                                  binary_expression (3360,8)-(3360,47)
                                    pointer_expression (3360,8)-(3360,22)
                                      *: '*' (3360,8)-(3360,9)
                                      identifier: 'check_offset2' (3360,9)-(3360,22)
                                    &&: '&&' (3360,23)-(3360,25)
                                    binary_expression (3360,26)-(3360,47)
                                      pointer_expression (3360,26)-(3360,40)
                                        *: '*' (3360,26)-(3360,27)
                                        identifier: 'check_offset2' (3360,27)-(3360,40)
                                      !=: '!=' (3360,41)-(3360,43)
                                      char_literal (3360,44)-(3360,47)
                                        ': ''' (3360,44)-(3360,45)
                                        character: ':' (3360,45)-(3360,46)
                                        ': ''' (3360,46)-(3360,47)
                                  ): ')' (3360,47)-(3360,48)
                                ): ')' (3360,48)-(3360,49)
                              compound_statement (3360,50)-(3363,4)
                                {: '{' (3360,50)-(3360,51)
                                expression_statement (3361,7)-(3361,51)
                                  call_expression (3361,7)-(3361,50)
                                    identifier: 'zerr' (3361,7)-(3361,11)
                                    argument_list (3361,11)-(3361,50)
                                      (: '(' (3361,11)-(3361,12)
                                      string_literal (3361,12)-(3361,35)
                                        ": '"' (3361,12)-(3361,13)
                                        string_content: 'invalid subscript: %s' (3361,13)-(3361,34)
                                        ": '"' (3361,34)-(3361,35)
                                      ,: ',' (3361,35)-(3361,36)
                                      identifier: 'check_offset' (3361,37)-(3361,49)
                                      ): ')' (3361,49)-(3361,50)
                                  ;: ';' (3361,50)-(3361,51)
                                return_statement (3362,7)-(3362,19)
                                  return: 'return' (3362,7)-(3362,13)
                                  null (3362,14)-(3362,18)
                                    NULL: 'NULL' (3362,14)-(3362,18)
                                  ;: ';' (3362,18)-(3362,19)
                                }: '}' (3363,3)-(3363,4)
                            if_statement (3364,3)-(3377,4)
                              if: 'if' (3364,3)-(3364,5)
                              parenthesized_expression (3364,6)-(3364,22)
                                (: '(' (3364,6)-(3364,7)
                                pointer_expression (3364,7)-(3364,21)
                                  *: '*' (3364,7)-(3364,8)
                                  identifier: 'check_offset2' (3364,8)-(3364,21)
                                ): ')' (3364,21)-(3364,22)
                              compound_statement (3364,23)-(3377,4)
                                {: '{' (3364,23)-(3364,24)
                                expression_statement (3365,7)-(3366,25)
                                  assignment_expression (3365,7)-(3366,24)
                                    identifier: 'check_offset' (3365,7)-(3365,19)
                                    =: '=' (3365,20)-(3365,21)
                                    call_expression (3365,22)-(3366,24)
                                      identifier: 'check_colon_subscript' (3365,22)-(3365,43)
                                      argument_list (3365,43)-(3366,24)
                                        (: '(' (3365,43)-(3365,44)
                                        binary_expression (3365,44)-(3365,61)
                                          identifier: 'check_offset2' (3365,44)-(3365,57)
                                          +: '+' (3365,58)-(3365,59)
                                          number_literal: '1' (3365,60)-(3365,61)
                                        ,: ',' (3365,61)-(3365,62)
                                        pointer_expression (3366,9)-(3366,23)
                                          &: '&' (3366,9)-(3366,10)
                                          identifier: 'check_offset2' (3366,10)-(3366,23)
                                        ): ')' (3366,23)-(3366,24)
                                  ;: ';' (3366,24)-(3366,25)
                                if_statement (3367,7)-(3370,8)
                                  if: 'if' (3367,7)-(3367,9)
                                  parenthesized_expression (3367,10)-(3367,51)
                                    (: '(' (3367,10)-(3367,11)
                                    binary_expression (3367,11)-(3367,50)
                                      pointer_expression (3367,11)-(3367,25)
                                        *: '*' (3367,11)-(3367,12)
                                        identifier: 'check_offset2' (3367,12)-(3367,25)
                                      &&: '&&' (3367,26)-(3367,28)
                                      binary_expression (3367,29)-(3367,50)
                                        pointer_expression (3367,29)-(3367,43)
                                          *: '*' (3367,29)-(3367,30)
                                          identifier: 'check_offset2' (3367,30)-(3367,43)
                                        !=: '!=' (3367,44)-(3367,46)
                                        char_literal (3367,47)-(3367,50)
                                          ': ''' (3367,47)-(3367,48)
                                          character: ':' (3367,48)-(3367,49)
                                          ': ''' (3367,49)-(3367,50)
                                    ): ')' (3367,50)-(3367,51)
                                  compound_statement (3367,52)-(3370,8)
                                    {: '{' (3367,52)-(3367,53)
                                    expression_statement (3368,4)-(3368,45)
                                      call_expression (3368,4)-(3368,44)
                                        identifier: 'zerr' (3368,4)-(3368,8)
                                        argument_list (3368,8)-(3368,44)
                                          (: '(' (3368,8)-(3368,9)
                                          string_literal (3368,9)-(3368,29)
                                            ": '"' (3368,9)-(3368,10)
                                            string_content: 'invalid length: %s' (3368,10)-(3368,28)
                                            ": '"' (3368,28)-(3368,29)
                                          ,: ',' (3368,29)-(3368,30)
                                          identifier: 'check_offset' (3368,31)-(3368,43)
                                          ): ')' (3368,43)-(3368,44)
                                      ;: ';' (3368,44)-(3368,45)
                                    return_statement (3369,4)-(3369,16)
                                      return: 'return' (3369,4)-(3369,10)
                                      null (3369,11)-(3369,15)
                                        NULL: 'NULL' (3369,11)-(3369,15)
                                      ;: ';' (3369,15)-(3369,16)
                                    }: '}' (3370,7)-(3370,8)
                                if_statement (3371,7)-(3376,8)
                                  if: 'if' (3371,7)-(3371,9)
                                  parenthesized_expression (3371,10)-(3371,24)
                                    (: '(' (3371,10)-(3371,11)
                                    identifier: 'check_offset' (3371,11)-(3371,23)
                                    ): ')' (3371,23)-(3371,24)
                                  compound_statement (3371,25)-(3376,8)
                                    {: '{' (3371,25)-(3371,26)
                                    expression_statement (3372,4)-(3372,37)
                                      assignment_expression (3372,4)-(3372,36)
                                        identifier: 'length' (3372,4)-(3372,10)
                                        =: '=' (3372,11)-(3372,12)
                                        call_expression (3372,13)-(3372,36)
                                          identifier: 'mathevali' (3372,13)-(3372,22)
                                          argument_list (3372,22)-(3372,36)
                                            (: '(' (3372,22)-(3372,23)
                                            identifier: 'check_offset' (3372,23)-(3372,35)
                                            ): ')' (3372,35)-(3372,36)
                                      ;: ';' (3372,36)-(3372,37)
                                    expression_statement (3373,4)-(3373,19)
                                      assignment_expression (3373,4)-(3373,18)
                                        identifier: 'length_set' (3373,4)-(3373,14)
                                        =: '=' (3373,15)-(3373,16)
                                        number_literal: '1' (3373,17)-(3373,18)
                                      ;: ';' (3373,18)-(3373,19)
                                    if_statement (3374,4)-(3375,20)
                                      if: 'if' (3374,4)-(3374,6)
                                      parenthesized_expression (3374,7)-(3374,16)
                                        (: '(' (3374,7)-(3374,8)
                                        identifier: 'errflag' (3374,8)-(3374,15)
                                        ): ')' (3374,15)-(3374,16)
                                      return_statement (3375,8)-(3375,20)
                                        return: 'return' (3375,8)-(3375,14)
                                        null (3375,15)-(3375,19)
                                          NULL: 'NULL' (3375,15)-(3375,19)
                                        ;: ';' (3375,19)-(3375,20)
                                    }: '}' (3376,7)-(3376,8)
                                }: '}' (3377,3)-(3377,4)
                            if_statement (3378,3)-(3473,4)
                              if: 'if' (3378,3)-(3378,5)
                              parenthesized_expression (3378,6)-(3378,13)
                                (: '(' (3378,6)-(3378,7)
                                identifier: 'isarr' (3378,7)-(3378,12)
                                ): ')' (3378,12)-(3378,13)
                              compound_statement (3378,14)-(3431,4)
                                {: '{' (3378,14)-(3378,15)
                                declaration (3379,7)-(3379,23)
                                  primitive_type: 'int' (3379,7)-(3379,10)
                                  identifier: 'alen' (3379,11)-(3379,15)
                                  ,: ',' (3379,15)-(3379,16)
                                  identifier: 'count' (3379,17)-(3379,22)
                                  ;: ';' (3379,22)-(3379,23)
                                declaration (3380,7)-(3380,41)
                                  primitive_type: 'char' (3380,7)-(3380,11)
                                  pointer_declarator (3380,12)-(3380,20)
                                    *: '*' (3380,12)-(3380,13)
                                    pointer_declarator (3380,13)-(3380,20)
                                      *: '*' (3380,13)-(3380,14)
                                      identifier: 'srcptr' (3380,14)-(3380,20)
                                  ,: ',' (3380,20)-(3380,21)
                                  pointer_declarator (3380,22)-(3380,30)
                                    *: '*' (3380,22)-(3380,23)
                                    pointer_declarator (3380,23)-(3380,30)
                                      *: '*' (3380,23)-(3380,24)
                                      identifier: 'dstptr' (3380,24)-(3380,30)
                                  ,: ',' (3380,30)-(3380,31)
                                  pointer_declarator (3380,32)-(3380,40)
                                    *: '*' (3380,32)-(3380,33)
                                    pointer_declarator (3380,33)-(3380,40)
                                      *: '*' (3380,33)-(3380,34)
                                      identifier: 'newarr' (3380,34)-(3380,40)
                                  ;: ';' (3380,40)-(3380,41)
                                if_statement (3382,7)-(3395,8)
                                  if: 'if' (3382,7)-(3382,9)
                                  parenthesized_expression (3382,10)-(3382,32)
                                    (: '(' (3382,10)-(3382,11)
                                    identifier: 'horrible_offset_hack' (3382,11)-(3382,31)
                                    ): ')' (3382,31)-(3382,32)
                                  compound_statement (3382,33)-(3395,8)
                                    {: '{' (3382,33)-(3382,34)
                                    comment: '/*
			 * As part of the 'orrible hoffset 'ack,
			 * (what hare you? Han 'orrible hoffset 'ack,
			 * sergeant major), if we are given a ksh/bash/POSIX
			 * style positional parameter array which includes
			 * offset 0, we use $0.
			 */' (3383,4)-(3389,7)
                                    if_statement (3390,4)-(3394,5)
                                      if: 'if' (3390,4)-(3390,6)
                                      parenthesized_expression (3390,7)-(3390,20)
                                        (: '(' (3390,7)-(3390,8)
                                        binary_expression (3390,8)-(3390,19)
                                          identifier: 'offset' (3390,8)-(3390,14)
                                          ==: '==' (3390,15)-(3390,17)
                                          number_literal: '0' (3390,18)-(3390,19)
                                        ): ')' (3390,19)-(3390,20)
                                      compound_statement (3390,21)-(3392,5)
                                        {: '{' (3390,21)-(3390,22)
                                        expression_statement (3391,8)-(3391,32)
                                          assignment_expression (3391,8)-(3391,31)
                                            identifier: 'offset_hack_argzero' (3391,8)-(3391,27)
                                            =: '=' (3391,28)-(3391,29)
                                            number_literal: '1' (3391,30)-(3391,31)
                                          ;: ';' (3391,31)-(3391,32)
                                        }: '}' (3392,4)-(3392,5)
                                      else_clause (3392,6)-(3394,5)
                                        else: 'else' (3392,6)-(3392,10)
                                        if_statement (3392,11)-(3394,5)
                                          if: 'if' (3392,11)-(3392,13)
                                          parenthesized_expression (3392,14)-(3392,26)
                                            (: '(' (3392,14)-(3392,15)
                                            binary_expression (3392,15)-(3392,25)
                                              identifier: 'offset' (3392,15)-(3392,21)
                                              >: '>' (3392,22)-(3392,23)
                                              number_literal: '0' (3392,24)-(3392,25)
                                            ): ')' (3392,25)-(3392,26)
                                          compound_statement (3392,27)-(3394,5)
                                            {: '{' (3392,27)-(3392,28)
                                            expression_statement (3393,8)-(3393,17)
                                              update_expression (3393,8)-(3393,16)
                                                identifier: 'offset' (3393,8)-(3393,14)
                                                --: '--' (3393,14)-(3393,16)
                                              ;: ';' (3393,16)-(3393,17)
                                            }: '}' (3394,4)-(3394,5)
                                    }: '}' (3395,7)-(3395,8)
                                expression_statement (3397,7)-(3397,27)
                                  assignment_expression (3397,7)-(3397,26)
                                    identifier: 'alen' (3397,7)-(3397,11)
                                    =: '=' (3397,12)-(3397,13)
                                    call_expression (3397,14)-(3397,26)
                                      identifier: 'arrlen' (3397,14)-(3397,20)
                                      argument_list (3397,20)-(3397,26)
                                        (: '(' (3397,20)-(3397,21)
                                        identifier: 'aval' (3397,21)-(3397,25)
                                        ): ')' (3397,25)-(3397,26)
                                  ;: ';' (3397,26)-(3397,27)
                                if_statement (3398,7)-(3402,8)
                                  if: 'if' (3398,7)-(3398,9)
                                  parenthesized_expression (3398,10)-(3398,22)
                                    (: '(' (3398,10)-(3398,11)
                                    binary_expression (3398,11)-(3398,21)
                                      identifier: 'offset' (3398,11)-(3398,17)
                                      <: '<' (3398,18)-(3398,19)
                                      number_literal: '0' (3398,20)-(3398,21)
                                    ): ')' (3398,21)-(3398,22)
                                  compound_statement (3398,23)-(3402,8)
                                    {: '{' (3398,23)-(3398,24)
                                    expression_statement (3399,4)-(3399,19)
                                      assignment_expression (3399,4)-(3399,18)
                                        identifier: 'offset' (3399,4)-(3399,10)
                                        +=: '+=' (3399,11)-(3399,13)
                                        identifier: 'alen' (3399,14)-(3399,18)
                                      ;: ';' (3399,18)-(3399,19)
                                    if_statement (3400,4)-(3401,19)
                                      if: 'if' (3400,4)-(3400,6)
                                      parenthesized_expression (3400,7)-(3400,19)
                                        (: '(' (3400,7)-(3400,8)
                                        binary_expression (3400,8)-(3400,18)
                                          identifier: 'offset' (3400,8)-(3400,14)
                                          <: '<' (3400,15)-(3400,16)
                                          number_literal: '0' (3400,17)-(3400,18)
                                        ): ')' (3400,18)-(3400,19)
                                      expression_statement (3401,8)-(3401,19)
                                        assignment_expression (3401,8)-(3401,18)
                                          identifier: 'offset' (3401,8)-(3401,14)
                                          =: '=' (3401,15)-(3401,16)
                                          number_literal: '0' (3401,17)-(3401,18)
                                        ;: ';' (3401,18)-(3401,19)
                                    }: '}' (3402,7)-(3402,8)
                                if_statement (3403,7)-(3404,11)
                                  if: 'if' (3403,7)-(3403,9)
                                  parenthesized_expression (3403,10)-(3403,31)
                                    (: '(' (3403,10)-(3403,11)
                                    identifier: 'offset_hack_argzero' (3403,11)-(3403,30)
                                    ): ')' (3403,30)-(3403,31)
                                  expression_statement (3404,4)-(3404,11)
                                    update_expression (3404,4)-(3404,10)
                                      identifier: 'alen' (3404,4)-(3404,8)
                                      ++: '++' (3404,8)-(3404,10)
                                    ;: ';' (3404,10)-(3404,11)
                                if_statement (3405,7)-(3414,18)
                                  if: 'if' (3405,7)-(3405,9)
                                  parenthesized_expression (3405,10)-(3405,22)
                                    (: '(' (3405,10)-(3405,11)
                                    identifier: 'length_set' (3405,11)-(3405,21)
                                    ): ')' (3405,21)-(3405,22)
                                  compound_statement (3405,23)-(3413,8)
                                    {: '{' (3405,23)-(3405,24)
                                    if_statement (3406,4)-(3407,32)
                                      if: 'if' (3406,4)-(3406,6)
                                      parenthesized_expression (3406,7)-(3406,19)
                                        (: '(' (3406,7)-(3406,8)
                                        binary_expression (3406,8)-(3406,18)
                                          identifier: 'length' (3406,8)-(3406,14)
                                          <: '<' (3406,15)-(3406,16)
                                          number_literal: '0' (3406,17)-(3406,18)
                                        ): ')' (3406,18)-(3406,19)
                                      expression_statement (3407,8)-(3407,32)
                                        assignment_expression (3407,8)-(3407,31)
                                          identifier: 'length' (3407,8)-(3407,14)
                                          +=: '+=' (3407,15)-(3407,17)
                                          binary_expression (3407,18)-(3407,31)
                                            identifier: 'alen' (3407,18)-(3407,22)
                                            -: '-' (3407,23)-(3407,24)
                                            identifier: 'offset' (3407,25)-(3407,31)
                                        ;: ';' (3407,31)-(3407,32)
                                    if_statement (3408,4)-(3412,5)
                                      if: 'if' (3408,4)-(3408,6)
                                      parenthesized_expression (3408,7)-(3408,19)
                                        (: '(' (3408,7)-(3408,8)
                                        binary_expression (3408,8)-(3408,18)
                                          identifier: 'length' (3408,8)-(3408,14)
                                          <: '<' (3408,15)-(3408,16)
                                          number_literal: '0' (3408,17)-(3408,18)
                                        ): ')' (3408,18)-(3408,19)
                                      compound_statement (3408,20)-(3412,5)
                                        {: '{' (3408,20)-(3408,21)
                                        expression_statement (3409,8)-(3410,50)
                                          call_expression (3409,8)-(3410,49)
                                            identifier: 'zerr' (3409,8)-(3409,12)
                                            argument_list (3409,12)-(3410,49)
                                              (: '(' (3409,12)-(3409,13)
                                              string_literal (3409,13)-(3409,44)
                                                ": '"' (3409,13)-(3409,14)
                                                string_content: 'substring expression: %d < %d' (3409,14)-(3409,43)
                                                ": '"' (3409,43)-(3409,44)
                                              ,: ',' (3409,44)-(3409,45)
                                              cast_expression (3410,13)-(3410,35)
                                                (: '(' (3410,13)-(3410,14)
                                                type_descriptor (3410,14)-(3410,17)
                                                  primitive_type: 'int' (3410,14)-(3410,17)
                                                ): ')' (3410,17)-(3410,18)
                                                parenthesized_expression (3410,18)-(3410,35)
                                                  (: '(' (3410,18)-(3410,19)
                                                  binary_expression (3410,19)-(3410,34)
                                                    identifier: 'length' (3410,19)-(3410,25)
                                                    +: '+' (3410,26)-(3410,27)
                                                    identifier: 'offset' (3410,28)-(3410,34)
                                                  ): ')' (3410,34)-(3410,35)
                                              ,: ',' (3410,35)-(3410,36)
                                              cast_expression (3410,37)-(3410,48)
                                                (: '(' (3410,37)-(3410,38)
                                                type_descriptor (3410,38)-(3410,41)
                                                  primitive_type: 'int' (3410,38)-(3410,41)
                                                ): ')' (3410,41)-(3410,42)
                                                identifier: 'offset' (3410,42)-(3410,48)
                                              ): ')' (3410,48)-(3410,49)
                                          ;: ';' (3410,49)-(3410,50)
                                        return_statement (3411,8)-(3411,20)
                                          return: 'return' (3411,8)-(3411,14)
                                          null (3411,15)-(3411,19)
                                            NULL: 'NULL' (3411,15)-(3411,19)
                                          ;: ';' (3411,19)-(3411,20)
                                        }: '}' (3412,4)-(3412,5)
                                    }: '}' (3413,7)-(3413,8)
                                  else_clause (3413,9)-(3414,18)
                                    else: 'else' (3413,9)-(3413,13)
                                    expression_statement (3414,4)-(3414,18)
                                      assignment_expression (3414,4)-(3414,17)
                                        identifier: 'length' (3414,4)-(3414,10)
                                        =: '=' (3414,11)-(3414,12)
                                        identifier: 'alen' (3414,13)-(3414,17)
                                      ;: ';' (3414,17)-(3414,18)
                                if_statement (3415,7)-(3416,18)
                                  if: 'if' (3415,7)-(3415,9)
                                  parenthesized_expression (3415,10)-(3415,25)
                                    (: '(' (3415,10)-(3415,11)
                                    binary_expression (3415,11)-(3415,24)
                                      identifier: 'offset' (3415,11)-(3415,17)
                                      >: '>' (3415,18)-(3415,19)
                                      identifier: 'alen' (3415,20)-(3415,24)
                                    ): ')' (3415,24)-(3415,25)
                                  expression_statement (3416,4)-(3416,18)
                                    assignment_expression (3416,4)-(3416,17)
                                      identifier: 'offset' (3416,4)-(3416,10)
                                      =: '=' (3416,11)-(3416,12)
                                      identifier: 'alen' (3416,13)-(3416,17)
                                    ;: ';' (3416,17)-(3416,18)
                                if_statement (3417,7)-(3418,27)
                                  if: 'if' (3417,7)-(3417,9)
                                  parenthesized_expression (3417,10)-(3417,34)
                                    (: '(' (3417,10)-(3417,11)
                                    binary_expression (3417,11)-(3417,33)
                                      binary_expression (3417,11)-(3417,26)
                                        identifier: 'offset' (3417,11)-(3417,17)
                                        +: '+' (3417,18)-(3417,19)
                                        identifier: 'length' (3417,20)-(3417,26)
                                      >: '>' (3417,27)-(3417,28)
                                      identifier: 'alen' (3417,29)-(3417,33)
                                    ): ')' (3417,33)-(3417,34)
                                  expression_statement (3418,4)-(3418,27)
                                    assignment_expression (3418,4)-(3418,26)
                                      identifier: 'length' (3418,4)-(3418,10)
                                      =: '=' (3418,11)-(3418,12)
                                      binary_expression (3418,13)-(3418,26)
                                        identifier: 'alen' (3418,13)-(3418,17)
                                        -: '-' (3418,18)-(3418,19)
                                        identifier: 'offset' (3418,20)-(3418,26)
                                    ;: ';' (3418,26)-(3418,27)
                                expression_statement (3419,7)-(3419,22)
                                  assignment_expression (3419,7)-(3419,21)
                                    identifier: 'count' (3419,7)-(3419,12)
                                    =: '=' (3419,13)-(3419,14)
                                    identifier: 'length' (3419,15)-(3419,21)
                                  ;: ';' (3419,21)-(3419,22)
                                expression_statement (3420,7)-(3420,30)
                                  assignment_expression (3420,7)-(3420,29)
                                    identifier: 'srcptr' (3420,7)-(3420,13)
                                    =: '=' (3420,14)-(3420,15)
                                    binary_expression (3420,16)-(3420,29)
                                      identifier: 'aval' (3420,16)-(3420,20)
                                      +: '+' (3420,21)-(3420,22)
                                      identifier: 'offset' (3420,23)-(3420,29)
                                  ;: ';' (3420,29)-(3420,30)
                                expression_statement (3421,7)-(3422,39)
                                  assignment_expression (3421,7)-(3422,38)
                                    identifier: 'newarr' (3421,7)-(3421,13)
                                    =: '=' (3421,14)-(3421,15)
                                    assignment_expression (3421,16)-(3422,38)
                                      identifier: 'dstptr' (3421,16)-(3421,22)
                                      =: '=' (3421,23)-(3421,24)
                                      cast_expression (3421,25)-(3422,38)
                                        (: '(' (3421,25)-(3421,26)
                                        type_descriptor (3421,26)-(3421,33)
                                          primitive_type: 'char' (3421,26)-(3421,30)
                                          abstract_pointer_declarator (3421,31)-(3421,33)
                                            *: '*' (3421,31)-(3421,32)
                                            abstract_pointer_declarator (3421,32)-(3421,33)
                                              *: '*' (3421,32)-(3421,33)
                                        ): ')' (3421,33)-(3421,34)
                                        call_expression (3422,4)-(3422,38)
                                          identifier: 'zhalloc' (3422,4)-(3422,11)
                                          argument_list (3422,11)-(3422,38)
                                            (: '(' (3422,11)-(3422,12)
                                            binary_expression (3422,12)-(3422,37)
                                              parenthesized_expression (3422,12)-(3422,22)
                                                (: '(' (3422,12)-(3422,13)
                                                binary_expression (3422,13)-(3422,21)
                                                  identifier: 'length' (3422,13)-(3422,19)
                                                  +: '+' (3422,19)-(3422,20)
                                                  number_literal: '1' (3422,20)-(3422,21)
                                                ): ')' (3422,21)-(3422,22)
                                              *: '*' (3422,22)-(3422,23)
                                              sizeof_expression (3422,23)-(3422,37)
                                                sizeof: 'sizeof' (3422,23)-(3422,29)
                                                (: '(' (3422,29)-(3422,30)
                                                type_descriptor (3422,30)-(3422,36)
                                                  primitive_type: 'char' (3422,30)-(3422,34)
                                                  abstract_pointer_declarator (3422,35)-(3422,36)
                                                    *: '*' (3422,35)-(3422,36)
                                                ): ')' (3422,36)-(3422,37)
                                            ): ')' (3422,37)-(3422,38)
                                  ;: ';' (3422,38)-(3422,39)
                                if_statement (3423,7)-(3426,8)
                                  if: 'if' (3423,7)-(3423,9)
                                  parenthesized_expression (3423,10)-(3423,40)
                                    (: '(' (3423,10)-(3423,11)
                                    binary_expression (3423,11)-(3423,39)
                                      identifier: 'count' (3423,11)-(3423,16)
                                      &&: '&&' (3423,17)-(3423,19)
                                      identifier: 'offset_hack_argzero' (3423,20)-(3423,39)
                                    ): ')' (3423,39)-(3423,40)
                                  compound_statement (3423,41)-(3426,8)
                                    {: '{' (3423,41)-(3423,42)
                                    expression_statement (3424,4)-(3424,35)
                                      assignment_expression (3424,4)-(3424,34)
                                        pointer_expression (3424,4)-(3424,13)
                                          *: '*' (3424,4)-(3424,5)
                                          update_expression (3424,5)-(3424,13)
                                            identifier: 'dstptr' (3424,5)-(3424,11)
                                            ++: '++' (3424,11)-(3424,13)
                                        =: '=' (3424,14)-(3424,15)
                                        call_expression (3424,16)-(3424,34)
                                          identifier: 'dupstring' (3424,16)-(3424,25)
                                          argument_list (3424,25)-(3424,34)
                                            (: '(' (3424,25)-(3424,26)
                                            identifier: 'argzero' (3424,26)-(3424,33)
                                            ): ')' (3424,33)-(3424,34)
                                      ;: ';' (3424,34)-(3424,35)
                                    expression_statement (3425,4)-(3425,12)
                                      update_expression (3425,4)-(3425,11)
                                        identifier: 'count' (3425,4)-(3425,9)
                                        --: '--' (3425,9)-(3425,11)
                                      ;: ';' (3425,11)-(3425,12)
                                    }: '}' (3426,7)-(3426,8)
                                while_statement (3427,7)-(3428,37)
                                  while: 'while' (3427,7)-(3427,12)
                                  parenthesized_expression (3427,13)-(3427,22)
                                    (: '(' (3427,13)-(3427,14)
                                    update_expression (3427,14)-(3427,21)
                                      identifier: 'count' (3427,14)-(3427,19)
                                      --: '--' (3427,19)-(3427,21)
                                    ): ')' (3427,21)-(3427,22)
                                  expression_statement (3428,4)-(3428,37)
                                    assignment_expression (3428,4)-(3428,36)
                                      pointer_expression (3428,4)-(3428,13)
                                        *: '*' (3428,4)-(3428,5)
                                        update_expression (3428,5)-(3428,13)
                                          identifier: 'dstptr' (3428,5)-(3428,11)
                                          ++: '++' (3428,11)-(3428,13)
                                      =: '=' (3428,14)-(3428,15)
                                      call_expression (3428,16)-(3428,36)
                                        identifier: 'dupstring' (3428,16)-(3428,25)
                                        argument_list (3428,25)-(3428,36)
                                          (: '(' (3428,25)-(3428,26)
                                          pointer_expression (3428,26)-(3428,35)
                                            *: '*' (3428,26)-(3428,27)
                                            update_expression (3428,27)-(3428,35)
                                              identifier: 'srcptr' (3428,27)-(3428,33)
                                              ++: '++' (3428,33)-(3428,35)
                                          ): ')' (3428,35)-(3428,36)
                                    ;: ';' (3428,36)-(3428,37)
                                expression_statement (3429,7)-(3429,30)
                                  assignment_expression (3429,7)-(3429,29)
                                    pointer_expression (3429,7)-(3429,14)
                                      *: '*' (3429,7)-(3429,8)
                                      identifier: 'dstptr' (3429,8)-(3429,14)
                                    =: '=' (3429,15)-(3429,16)
                                    cast_expression (3429,17)-(3429,29)
                                      (: '(' (3429,17)-(3429,18)
                                      type_descriptor (3429,18)-(3429,24)
                                        primitive_type: 'char' (3429,18)-(3429,22)
                                        abstract_pointer_declarator (3429,23)-(3429,24)
                                          *: '*' (3429,23)-(3429,24)
                                      ): ')' (3429,24)-(3429,25)
                                      null (3429,25)-(3429,29)
                                        NULL: 'NULL' (3429,25)-(3429,29)
                                  ;: ';' (3429,29)-(3429,30)
                                expression_statement (3430,7)-(3430,21)
                                  assignment_expression (3430,7)-(3430,20)
                                    identifier: 'aval' (3430,7)-(3430,11)
                                    =: '=' (3430,12)-(3430,13)
                                    identifier: 'newarr' (3430,14)-(3430,20)
                                  ;: ';' (3430,20)-(3430,21)
                                }: '}' (3431,3)-(3431,4)
                              else_clause (3431,5)-(3473,4)
                                else: 'else' (3431,5)-(3431,9)
                                compound_statement (3431,10)-(3473,4)
                                  {: '{' (3431,10)-(3431,11)
                                  declaration (3432,7)-(3432,25)
                                    primitive_type: 'char' (3432,7)-(3432,11)
                                    pointer_declarator (3432,12)-(3432,17)
                                      *: '*' (3432,12)-(3432,13)
                                      identifier: 'sptr' (3432,13)-(3432,17)
                                    ,: ',' (3432,17)-(3432,18)
                                    pointer_declarator (3432,19)-(3432,24)
                                      *: '*' (3432,19)-(3432,20)
                                      identifier: 'eptr' (3432,20)-(3432,24)
                                    ;: ';' (3432,24)-(3432,25)
                                  declaration (3433,7)-(3433,24)
                                    primitive_type: 'int' (3433,7)-(3433,10)
                                    identifier: 'given_offset' (3433,11)-(3433,23)
                                    ;: ';' (3433,23)-(3433,24)
                                  if_statement (3434,7)-(3442,8)
                                    if: 'if' (3434,7)-(3434,9)
                                    parenthesized_expression (3434,10)-(3434,22)
                                      (: '(' (3434,10)-(3434,11)
                                      binary_expression (3434,11)-(3434,21)
                                        identifier: 'offset' (3434,11)-(3434,17)
                                        <: '<' (3434,18)-(3434,19)
                                        number_literal: '0' (3434,20)-(3434,21)
                                      ): ')' (3434,21)-(3434,22)
                                    compound_statement (3434,23)-(3442,8)
                                      {: '{' (3434,23)-(3434,24)
                                      expression_statement (3435,4)-(3435,22)
                                        call_expression (3435,4)-(3435,21)
                                          identifier: 'MB_METACHARINIT' (3435,4)-(3435,19)
                                          argument_list (3435,19)-(3435,21)
                                            (: '(' (3435,19)-(3435,20)
                                            ): ')' (3435,20)-(3435,21)
                                        ;: ';' (3435,21)-(3435,22)
                                      for_statement (3436,4)-(3439,5)
                                        for: 'for' (3436,4)-(3436,7)
                                        (: '(' (3436,8)-(3436,9)
                                        assignment_expression (3436,9)-(3436,19)
                                          identifier: 'sptr' (3436,9)-(3436,13)
                                          =: '=' (3436,14)-(3436,15)
                                          identifier: 'val' (3436,16)-(3436,19)
                                        ;: ';' (3436,19)-(3436,20)
                                        pointer_expression (3436,21)-(3436,26)
                                          *: '*' (3436,21)-(3436,22)
                                          identifier: 'sptr' (3436,22)-(3436,26)
                                        ;: ';' (3436,26)-(3436,27)
                                        ): ')' (3436,28)-(3436,29)
                                        compound_statement (3436,30)-(3439,5)
                                          {: '{' (3436,30)-(3436,31)
                                          expression_statement (3437,8)-(3437,37)
                                            assignment_expression (3437,8)-(3437,36)
                                              identifier: 'sptr' (3437,8)-(3437,12)
                                              +=: '+=' (3437,13)-(3437,15)
                                              call_expression (3437,16)-(3437,36)
                                                identifier: 'MB_METACHARLEN' (3437,16)-(3437,30)
                                                argument_list (3437,30)-(3437,36)
                                                  (: '(' (3437,30)-(3437,31)
                                                  identifier: 'sptr' (3437,31)-(3437,35)
                                                  ): ')' (3437,35)-(3437,36)
                                            ;: ';' (3437,36)-(3437,37)
                                          expression_statement (3438,8)-(3438,17)
                                            update_expression (3438,8)-(3438,16)
                                              identifier: 'offset' (3438,8)-(3438,14)
                                              ++: '++' (3438,14)-(3438,16)
                                            ;: ';' (3438,16)-(3438,17)
                                          }: '}' (3439,4)-(3439,5)
                                      if_statement (3440,4)-(3441,19)
                                        if: 'if' (3440,4)-(3440,6)
                                        parenthesized_expression (3440,7)-(3440,19)
                                          (: '(' (3440,7)-(3440,8)
                                          binary_expression (3440,8)-(3440,18)
                                            identifier: 'offset' (3440,8)-(3440,14)
                                            <: '<' (3440,15)-(3440,16)
                                            number_literal: '0' (3440,17)-(3440,18)
                                          ): ')' (3440,18)-(3440,19)
                                        expression_statement (3441,8)-(3441,19)
                                          assignment_expression (3441,8)-(3441,18)
                                            identifier: 'offset' (3441,8)-(3441,14)
                                            =: '=' (3441,15)-(3441,16)
                                            number_literal: '0' (3441,17)-(3441,18)
                                          ;: ';' (3441,18)-(3441,19)
                                      }: '}' (3442,7)-(3442,8)
                                  expression_statement (3443,7)-(3443,29)
                                    assignment_expression (3443,7)-(3443,28)
                                      identifier: 'given_offset' (3443,7)-(3443,19)
                                      =: '=' (3443,20)-(3443,21)
                                      identifier: 'offset' (3443,22)-(3443,28)
                                    ;: ';' (3443,28)-(3443,29)
                                  expression_statement (3444,7)-(3444,25)
                                    call_expression (3444,7)-(3444,24)
                                      identifier: 'MB_METACHARINIT' (3444,7)-(3444,22)
                                      argument_list (3444,22)-(3444,24)
                                        (: '(' (3444,22)-(3444,23)
                                        ): ')' (3444,23)-(3444,24)
                                    ;: ';' (3444,24)-(3444,25)
                                  if_statement (3445,7)-(3446,21)
                                    if: 'if' (3445,7)-(3445,9)
                                    parenthesized_expression (3445,10)-(3445,36)
                                      (: '(' (3445,10)-(3445,11)
                                      binary_expression (3445,11)-(3445,35)
                                        identifier: 'length_set' (3445,11)-(3445,21)
                                        &&: '&&' (3445,22)-(3445,24)
                                        binary_expression (3445,25)-(3445,35)
                                          identifier: 'length' (3445,25)-(3445,31)
                                          <: '<' (3445,32)-(3445,33)
                                          number_literal: '0' (3445,34)-(3445,35)
                                      ): ')' (3445,35)-(3445,36)
                                    expression_statement (3446,4)-(3446,21)
                                      assignment_expression (3446,4)-(3446,20)
                                        identifier: 'length' (3446,4)-(3446,10)
                                        -=: '-=' (3446,11)-(3446,13)
                                        identifier: 'offset' (3446,14)-(3446,20)
                                      ;: ';' (3446,20)-(3446,21)
                                  for_statement (3447,7)-(3450,8)
                                    for: 'for' (3447,7)-(3447,10)
                                    (: '(' (3447,11)-(3447,12)
                                    assignment_expression (3447,12)-(3447,22)
                                      identifier: 'sptr' (3447,12)-(3447,16)
                                      =: '=' (3447,17)-(3447,18)
                                      identifier: 'val' (3447,19)-(3447,22)
                                    ;: ';' (3447,22)-(3447,23)
                                    binary_expression (3447,24)-(3447,39)
                                      pointer_expression (3447,24)-(3447,29)
                                        *: '*' (3447,24)-(3447,25)
                                        identifier: 'sptr' (3447,25)-(3447,29)
                                      &&: '&&' (3447,30)-(3447,32)
                                      identifier: 'offset' (3447,33)-(3447,39)
                                    ;: ';' (3447,39)-(3447,40)
                                    ): ')' (3447,41)-(3447,42)
                                    compound_statement (3447,43)-(3450,8)
                                      {: '{' (3447,43)-(3447,44)
                                      expression_statement (3448,4)-(3448,33)
                                        assignment_expression (3448,4)-(3448,32)
                                          identifier: 'sptr' (3448,4)-(3448,8)
                                          +=: '+=' (3448,9)-(3448,11)
                                          call_expression (3448,12)-(3448,32)
                                            identifier: 'MB_METACHARLEN' (3448,12)-(3448,26)
                                            argument_list (3448,26)-(3448,32)
                                              (: '(' (3448,26)-(3448,27)
                                              identifier: 'sptr' (3448,27)-(3448,31)
                                              ): ')' (3448,31)-(3448,32)
                                        ;: ';' (3448,32)-(3448,33)
                                      expression_statement (3449,4)-(3449,13)
                                        update_expression (3449,4)-(3449,12)
                                          identifier: 'offset' (3449,4)-(3449,10)
                                          --: '--' (3449,10)-(3449,12)
                                        ;: ';' (3449,12)-(3449,13)
                                      }: '}' (3450,7)-(3450,8)
                                  if_statement (3451,7)-(3472,8)
                                    if: 'if' (3451,7)-(3451,9)
                                    parenthesized_expression (3451,10)-(3451,22)
                                      (: '(' (3451,10)-(3451,11)
                                      identifier: 'length_set' (3451,11)-(3451,21)
                                      ): ')' (3451,21)-(3451,22)
                                    compound_statement (3451,23)-(3470,8)
                                      {: '{' (3451,23)-(3451,24)
                                      if_statement (3452,4)-(3464,5)
                                        if: 'if' (3452,4)-(3452,6)
                                        parenthesized_expression (3452,7)-(3452,19)
                                          (: '(' (3452,7)-(3452,8)
                                          binary_expression (3452,8)-(3452,18)
                                            identifier: 'length' (3452,8)-(3452,14)
                                            <: '<' (3452,15)-(3452,16)
                                            number_literal: '0' (3452,17)-(3452,18)
                                          ): ')' (3452,18)-(3452,19)
                                        compound_statement (3452,20)-(3464,5)
                                          {: '{' (3452,20)-(3452,21)
                                          expression_statement (3453,8)-(3453,26)
                                            call_expression (3453,8)-(3453,25)
                                              identifier: 'MB_METACHARINIT' (3453,8)-(3453,23)
                                              argument_list (3453,23)-(3453,25)
                                                (: '(' (3453,23)-(3453,24)
                                                ): ')' (3453,24)-(3453,25)
                                            ;: ';' (3453,25)-(3453,26)
                                          for_statement (3454,8)-(3457,9)
                                            for: 'for' (3454,8)-(3454,11)
                                            (: '(' (3454,12)-(3454,13)
                                            assignment_expression (3454,13)-(3454,23)
                                              identifier: 'eptr' (3454,13)-(3454,17)
                                              =: '=' (3454,18)-(3454,19)
                                              identifier: 'val' (3454,20)-(3454,23)
                                            ;: ';' (3454,23)-(3454,24)
                                            pointer_expression (3454,25)-(3454,30)
                                              *: '*' (3454,25)-(3454,26)
                                              identifier: 'eptr' (3454,26)-(3454,30)
                                            ;: ';' (3454,30)-(3454,31)
                                            ): ')' (3454,32)-(3454,33)
                                            compound_statement (3454,34)-(3457,9)
                                              {: '{' (3454,34)-(3454,35)
                                              expression_statement (3455,5)-(3455,34)
                                                assignment_expression (3455,5)-(3455,33)
                                                  identifier: 'eptr' (3455,5)-(3455,9)
                                                  +=: '+=' (3455,10)-(3455,12)
                                                  call_expression (3455,13)-(3455,33)
                                                    identifier: 'MB_METACHARLEN' (3455,13)-(3455,27)
                                                    argument_list (3455,27)-(3455,33)
                                                      (: '(' (3455,27)-(3455,28)
                                                      identifier: 'eptr' (3455,28)-(3455,32)
                                                      ): ')' (3455,32)-(3455,33)
                                                ;: ';' (3455,33)-(3455,34)
                                              expression_statement (3456,5)-(3456,14)
                                                update_expression (3456,5)-(3456,13)
                                                  identifier: 'length' (3456,5)-(3456,11)
                                                  ++: '++' (3456,11)-(3456,13)
                                                ;: ';' (3456,13)-(3456,14)
                                              }: '}' (3457,8)-(3457,9)
                                          if_statement (3458,8)-(3463,9)
                                            if: 'if' (3458,8)-(3458,10)
                                            parenthesized_expression (3458,11)-(3458,23)
                                              (: '(' (3458,11)-(3458,12)
                                              binary_expression (3458,12)-(3458,22)
                                                identifier: 'length' (3458,12)-(3458,18)
                                                <: '<' (3458,19)-(3458,20)
                                                number_literal: '0' (3458,21)-(3458,22)
                                              ): ')' (3458,22)-(3458,23)
                                            compound_statement (3458,24)-(3463,9)
                                              {: '{' (3458,24)-(3458,25)
                                              expression_statement (3459,5)-(3461,29)
                                                call_expression (3459,5)-(3461,28)
                                                  identifier: 'zerr' (3459,5)-(3459,9)
                                                  argument_list (3459,9)-(3461,28)
                                                    (: '(' (3459,9)-(3459,10)
                                                    string_literal (3459,10)-(3459,41)
                                                      ": '"' (3459,10)-(3459,11)
                                                      string_content: 'substring expression: %d < %d' (3459,11)-(3459,40)
                                                      ": '"' (3459,40)-(3459,41)
                                                    ,: ',' (3459,41)-(3459,42)
                                                    cast_expression (3460,10)-(3460,38)
                                                      (: '(' (3460,10)-(3460,11)
                                                      type_descriptor (3460,11)-(3460,14)
                                                        primitive_type: 'int' (3460,11)-(3460,14)
                                                      ): ')' (3460,14)-(3460,15)
                                                      parenthesized_expression (3460,15)-(3460,38)
                                                        (: '(' (3460,15)-(3460,16)
                                                        binary_expression (3460,16)-(3460,37)
                                                          identifier: 'length' (3460,16)-(3460,22)
                                                          +: '+' (3460,23)-(3460,24)
                                                          identifier: 'given_offset' (3460,25)-(3460,37)
                                                        ): ')' (3460,37)-(3460,38)
                                                    ,: ',' (3460,38)-(3460,39)
                                                    cast_expression (3461,10)-(3461,27)
                                                      (: '(' (3461,10)-(3461,11)
                                                      type_descriptor (3461,11)-(3461,14)
                                                        primitive_type: 'int' (3461,11)-(3461,14)
                                                      ): ')' (3461,14)-(3461,15)
                                                      identifier: 'given_offset' (3461,15)-(3461,27)
                                                    ): ')' (3461,27)-(3461,28)
                                                ;: ';' (3461,28)-(3461,29)
                                              return_statement (3462,5)-(3462,17)
                                                return: 'return' (3462,5)-(3462,11)
                                                null (3462,12)-(3462,16)
                                                  NULL: 'NULL' (3462,12)-(3462,16)
                                                ;: ';' (3462,16)-(3462,17)
                                              }: '}' (3463,8)-(3463,9)
                                          }: '}' (3464,4)-(3464,5)
                                      for_statement (3465,4)-(3468,5)
                                        for: 'for' (3465,4)-(3465,7)
                                        (: '(' (3465,8)-(3465,9)
                                        assignment_expression (3465,9)-(3465,20)
                                          identifier: 'eptr' (3465,9)-(3465,13)
                                          =: '=' (3465,14)-(3465,15)
                                          identifier: 'sptr' (3465,16)-(3465,20)
                                        ;: ';' (3465,20)-(3465,21)
                                        binary_expression (3465,22)-(3465,37)
                                          pointer_expression (3465,22)-(3465,27)
                                            *: '*' (3465,22)-(3465,23)
                                            identifier: 'eptr' (3465,23)-(3465,27)
                                          &&: '&&' (3465,28)-(3465,30)
                                          identifier: 'length' (3465,31)-(3465,37)
                                        ;: ';' (3465,37)-(3465,38)
                                        ): ')' (3465,39)-(3465,40)
                                        compound_statement (3465,41)-(3468,5)
                                          {: '{' (3465,41)-(3465,42)
                                          expression_statement (3466,8)-(3466,37)
                                            assignment_expression (3466,8)-(3466,36)
                                              identifier: 'eptr' (3466,8)-(3466,12)
                                              +=: '+=' (3466,13)-(3466,15)
                                              call_expression (3466,16)-(3466,36)
                                                identifier: 'MB_METACHARLEN' (3466,16)-(3466,30)
                                                argument_list (3466,30)-(3466,36)
                                                  (: '(' (3466,30)-(3466,31)
                                                  identifier: 'eptr' (3466,31)-(3466,35)
                                                  ): ')' (3466,35)-(3466,36)
                                            ;: ';' (3466,36)-(3466,37)
                                          expression_statement (3467,8)-(3467,17)
                                            update_expression (3467,8)-(3467,16)
                                              identifier: 'length' (3467,8)-(3467,14)
                                              --: '--' (3467,14)-(3467,16)
                                            ;: ';' (3467,16)-(3467,17)
                                          }: '}' (3468,4)-(3468,5)
                                      expression_statement (3469,4)-(3469,39)
                                        assignment_expression (3469,4)-(3469,38)
                                          identifier: 'val' (3469,4)-(3469,7)
                                          =: '=' (3469,8)-(3469,9)
                                          call_expression (3469,10)-(3469,38)
                                            identifier: 'dupstrpfx' (3469,10)-(3469,19)
                                            argument_list (3469,19)-(3469,38)
                                              (: '(' (3469,19)-(3469,20)
                                              identifier: 'sptr' (3469,20)-(3469,24)
                                              ,: ',' (3469,24)-(3469,25)
                                              binary_expression (3469,26)-(3469,37)
                                                identifier: 'eptr' (3469,26)-(3469,30)
                                                -: '-' (3469,31)-(3469,32)
                                                identifier: 'sptr' (3469,33)-(3469,37)
                                              ): ')' (3469,37)-(3469,38)
                                        ;: ';' (3469,38)-(3469,39)
                                      }: '}' (3470,7)-(3470,8)
                                    else_clause (3470,9)-(3472,8)
                                      else: 'else' (3470,9)-(3470,13)
                                      compound_statement (3470,14)-(3472,8)
                                        {: '{' (3470,14)-(3470,15)
                                        expression_statement (3471,4)-(3471,26)
                                          assignment_expression (3471,4)-(3471,25)
                                            identifier: 'val' (3471,4)-(3471,7)
                                            =: '=' (3471,8)-(3471,9)
                                            call_expression (3471,10)-(3471,25)
                                              identifier: 'dupstring' (3471,10)-(3471,19)
                                              argument_list (3471,19)-(3471,25)
                                                (: '(' (3471,19)-(3471,20)
                                                identifier: 'sptr' (3471,20)-(3471,24)
                                                ): ')' (3471,24)-(3471,25)
                                          ;: ';' (3471,25)-(3471,26)
                                        }: '}' (3472,7)-(3472,8)
                                  }: '}' (3473,3)-(3473,4)
                            if_statement (3474,3)-(3478,4)
                              if: 'if' (3474,3)-(3474,5)
                              parenthesized_expression (3474,6)-(3474,23)
                                (: '(' (3474,6)-(3474,7)
                                unary_expression (3474,7)-(3474,22)
                                  !: '!' (3474,7)-(3474,8)
                                  pointer_expression (3474,8)-(3474,22)
                                    *: '*' (3474,8)-(3474,9)
                                    identifier: 'check_offset2' (3474,9)-(3474,22)
                                ): ')' (3474,22)-(3474,23)
                              compound_statement (3474,24)-(3476,4)
                                {: '{' (3474,24)-(3474,25)
                                expression_statement (3475,7)-(3475,16)
                                  assignment_expression (3475,7)-(3475,15)
                                    identifier: 'colf' (3475,7)-(3475,11)
                                    =: '=' (3475,12)-(3475,13)
                                    number_literal: '0' (3475,14)-(3475,15)
                                  ;: ';' (3475,15)-(3475,16)
                                }: '}' (3476,3)-(3476,4)
                              else_clause (3476,5)-(3478,4)
                                else: 'else' (3476,5)-(3476,9)
                                compound_statement (3476,10)-(3478,4)
                                  {: '{' (3476,10)-(3476,11)
                                  expression_statement (3477,7)-(3477,29)
                                    assignment_expression (3477,7)-(3477,28)
                                      identifier: 's' (3477,7)-(3477,8)
                                      =: '=' (3477,9)-(3477,10)
                                      binary_expression (3477,11)-(3477,28)
                                        identifier: 'check_offset2' (3477,11)-(3477,24)
                                        +: '+' (3477,25)-(3477,26)
                                        number_literal: '1' (3477,27)-(3477,28)
                                    ;: ';' (3477,28)-(3477,29)
                                  }: '}' (3478,3)-(3478,4)
                            }: '}' (3479,6)-(3479,7)
                        }: '}' (3480,2)-(3480,3)
                    if_statement (3481,2)-(3516,3)
                      if: 'if' (3481,2)-(3481,4)
                      parenthesized_expression (3481,5)-(3481,11)
                        (: '(' (3481,5)-(3481,6)
                        identifier: 'colf' (3481,6)-(3481,10)
                        ): ')' (3481,10)-(3481,11)
                      compound_statement (3481,12)-(3516,3)
                        {: '{' (3481,12)-(3481,13)
                        comment: '/*
	     * History style colon modifiers.  May need to apply
	     * on multiple elements of an array.
	     */' (3482,6)-(3485,9)
                        expression_statement (3486,6)-(3486,10)
                          update_expression (3486,6)-(3486,9)
                            identifier: 's' (3486,6)-(3486,7)
                            --: '--' (3486,7)-(3486,9)
                          ;: ';' (3486,9)-(3486,10)
                        if_statement (3487,6)-(3515,7)
                          if: 'if' (3487,6)-(3487,8)
                          parenthesized_expression (3487,9)-(3487,38)
                            (: '(' (3487,9)-(3487,10)
                            binary_expression (3487,10)-(3487,37)
                              call_expression (3487,10)-(3487,26)
                                identifier: 'unset' (3487,10)-(3487,15)
                                argument_list (3487,15)-(3487,26)
                                  (: '(' (3487,15)-(3487,16)
                                  identifier: 'KSHARRAYS' (3487,16)-(3487,25)
                                  ): ')' (3487,25)-(3487,26)
                              ||: '||' (3487,27)-(3487,29)
                              identifier: 'inbrace' (3487,30)-(3487,37)
                            ): ')' (3487,37)-(3487,38)
                          compound_statement (3487,39)-(3515,7)
                            {: '{' (3487,39)-(3487,40)
                            if_statement (3488,3)-(3506,4)
                              if: 'if' (3488,3)-(3488,5)
                              parenthesized_expression (3488,6)-(3488,14)
                                (: '(' (3488,6)-(3488,7)
                                unary_expression (3488,7)-(3488,13)
                                  !: '!' (3488,7)-(3488,8)
                                  identifier: 'isarr' (3488,8)-(3488,13)
                                ): ')' (3488,13)-(3488,14)
                              expression_statement (3489,7)-(3489,33)
                                call_expression (3489,7)-(3489,32)
                                  identifier: 'modify' (3489,7)-(3489,13)
                                  argument_list (3489,13)-(3489,32)
                                    (: '(' (3489,13)-(3489,14)
                                    pointer_expression (3489,14)-(3489,18)
                                      &: '&' (3489,14)-(3489,15)
                                      identifier: 'val' (3489,15)-(3489,18)
                                    ,: ',' (3489,18)-(3489,19)
                                    pointer_expression (3489,20)-(3489,22)
                                      &: '&' (3489,20)-(3489,21)
                                      identifier: 's' (3489,21)-(3489,22)
                                    ,: ',' (3489,22)-(3489,23)
                                    identifier: 'inbrace' (3489,24)-(3489,31)
                                    ): ')' (3489,31)-(3489,32)
                                ;: ';' (3489,32)-(3489,33)
                              else_clause (3490,3)-(3506,4)
                                else: 'else' (3490,3)-(3490,7)
                                compound_statement (3490,8)-(3506,4)
                                  {: '{' (3490,8)-(3490,9)
                                  declaration (3491,7)-(3491,16)
                                    primitive_type: 'char' (3491,7)-(3491,11)
                                    pointer_declarator (3491,12)-(3491,15)
                                      *: '*' (3491,12)-(3491,13)
                                      identifier: 'ss' (3491,13)-(3491,15)
                                    ;: ';' (3491,15)-(3491,16)
                                  declaration (3492,7)-(3492,24)
                                    primitive_type: 'char' (3492,7)-(3492,11)
                                    init_declarator (3492,12)-(3492,23)
                                      pointer_declarator (3492,12)-(3492,16)
                                        *: '*' (3492,12)-(3492,13)
                                        pointer_declarator (3492,13)-(3492,16)
                                          *: '*' (3492,13)-(3492,14)
                                          identifier: 'ap' (3492,14)-(3492,16)
                                      =: '=' (3492,17)-(3492,18)
                                      identifier: 'aval' (3492,19)-(3492,23)
                                    ;: ';' (3492,23)-(3492,24)
                                  declaration (3493,7)-(3494,29)
                                    primitive_type: 'char' (3493,7)-(3493,11)
                                    init_declarator (3493,12)-(3494,28)
                                      pointer_declarator (3493,12)-(3493,16)
                                        *: '*' (3493,12)-(3493,13)
                                        pointer_declarator (3493,13)-(3493,16)
                                          *: '*' (3493,13)-(3493,14)
                                          identifier: 'pp' (3493,14)-(3493,16)
                                      =: '=' (3493,17)-(3493,18)
                                      assignment_expression (3493,19)-(3494,28)
                                        identifier: 'aval' (3493,19)-(3493,23)
                                        =: '=' (3493,24)-(3493,25)
                                        cast_expression (3493,26)-(3494,28)
                                          (: '(' (3493,26)-(3493,27)
                                          type_descriptor (3493,27)-(3493,34)
                                            primitive_type: 'char' (3493,27)-(3493,31)
                                            abstract_pointer_declarator (3493,32)-(3493,34)
                                              *: '*' (3493,32)-(3493,33)
                                              abstract_pointer_declarator (3493,33)-(3493,34)
                                                *: '*' (3493,33)-(3493,34)
                                          ): ')' (3493,34)-(3493,35)
                                          call_expression (3493,36)-(3494,28)
                                            identifier: 'hcalloc' (3493,36)-(3493,43)
                                            argument_list (3493,43)-(3494,28)
                                              (: '(' (3493,43)-(3493,44)
                                              binary_expression (3493,44)-(3494,27)
                                                sizeof_expression (3493,44)-(3493,58)
                                                  sizeof: 'sizeof' (3493,44)-(3493,50)
                                                  (: '(' (3493,50)-(3493,51)
                                                  type_descriptor (3493,51)-(3493,57)
                                                    primitive_type: 'char' (3493,51)-(3493,55)
                                                    abstract_pointer_declarator (3493,56)-(3493,57)
                                                      *: '*' (3493,56)-(3493,57)
                                                  ): ')' (3493,57)-(3493,58)
                                                *: '*' (3493,59)-(3493,60)
                                                parenthesized_expression (3494,9)-(3494,27)
                                                  (: '(' (3494,9)-(3494,10)
                                                  binary_expression (3494,10)-(3494,26)
                                                    call_expression (3494,10)-(3494,22)
                                                      identifier: 'arrlen' (3494,10)-(3494,16)
                                                      argument_list (3494,16)-(3494,22)
                                                        (: '(' (3494,16)-(3494,17)
                                                        identifier: 'aval' (3494,17)-(3494,21)
                                                        ): ')' (3494,21)-(3494,22)
                                                    +: '+' (3494,23)-(3494,24)
                                                    number_literal: '1' (3494,25)-(3494,26)
                                                  ): ')' (3494,26)-(3494,27)
                                              ): ')' (3494,27)-(3494,28)
                                    ;: ';' (3494,28)-(3494,29)
                                  while_statement (3496,7)-(3499,8)
                                    while: 'while' (3496,7)-(3496,12)
                                    parenthesized_expression (3496,13)-(3496,28)
                                      (: '(' (3496,13)-(3496,14)
                                      parenthesized_expression (3496,14)-(3496,27)
                                        (: '(' (3496,14)-(3496,15)
                                        assignment_expression (3496,15)-(3496,26)
                                          pointer_expression (3496,15)-(3496,18)
                                            *: '*' (3496,15)-(3496,16)
                                            identifier: 'pp' (3496,16)-(3496,18)
                                          =: '=' (3496,19)-(3496,20)
                                          pointer_expression (3496,21)-(3496,26)
                                            *: '*' (3496,21)-(3496,22)
                                            update_expression (3496,22)-(3496,26)
                                              identifier: 'ap' (3496,22)-(3496,24)
                                              ++: '++' (3496,24)-(3496,26)
                                        ): ')' (3496,26)-(3496,27)
                                      ): ')' (3496,27)-(3496,28)
                                    compound_statement (3496,29)-(3499,8)
                                      {: '{' (3496,29)-(3496,30)
                                      expression_statement (3497,4)-(3497,11)
                                        assignment_expression (3497,4)-(3497,10)
                                          identifier: 'ss' (3497,4)-(3497,6)
                                          =: '=' (3497,7)-(3497,8)
                                          identifier: 's' (3497,9)-(3497,10)
                                        ;: ';' (3497,10)-(3497,11)
                                      expression_statement (3498,4)-(3498,31)
                                        call_expression (3498,4)-(3498,30)
                                          identifier: 'modify' (3498,4)-(3498,10)
                                          argument_list (3498,10)-(3498,30)
                                            (: '(' (3498,10)-(3498,11)
                                            update_expression (3498,11)-(3498,15)
                                              identifier: 'pp' (3498,11)-(3498,13)
                                              ++: '++' (3498,13)-(3498,15)
                                            ,: ',' (3498,15)-(3498,16)
                                            pointer_expression (3498,17)-(3498,20)
                                              &: '&' (3498,17)-(3498,18)
                                              identifier: 'ss' (3498,18)-(3498,20)
                                            ,: ',' (3498,20)-(3498,21)
                                            identifier: 'inbrace' (3498,22)-(3498,29)
                                            ): ')' (3498,29)-(3498,30)
                                        ;: ';' (3498,30)-(3498,31)
                                      }: '}' (3499,7)-(3499,8)
                                  if_statement (3500,7)-(3504,8)
                                    if: 'if' (3500,7)-(3500,9)
                                    parenthesized_expression (3500,10)-(3500,22)
                                      (: '(' (3500,10)-(3500,11)
                                      binary_expression (3500,11)-(3500,21)
                                        identifier: 'pp' (3500,11)-(3500,13)
                                        ==: '==' (3500,14)-(3500,16)
                                        identifier: 'aval' (3500,17)-(3500,21)
                                      ): ')' (3500,21)-(3500,22)
                                    compound_statement (3500,23)-(3504,8)
                                      {: '{' (3500,23)-(3500,24)
                                      declaration (3501,4)-(3501,17)
                                        primitive_type: 'char' (3501,4)-(3501,8)
                                        init_declarator (3501,9)-(3501,16)
                                          pointer_declarator (3501,9)-(3501,11)
                                            *: '*' (3501,9)-(3501,10)
                                            identifier: 't' (3501,10)-(3501,11)
                                          =: '=' (3501,12)-(3501,13)
                                          string_literal (3501,14)-(3501,16)
                                            ": '"' (3501,14)-(3501,15)
                                            ": '"' (3501,15)-(3501,16)
                                        ;: ';' (3501,16)-(3501,17)
                                      expression_statement (3502,4)-(3502,11)
                                        assignment_expression (3502,4)-(3502,10)
                                          identifier: 'ss' (3502,4)-(3502,6)
                                          =: '=' (3502,7)-(3502,8)
                                          identifier: 's' (3502,9)-(3502,10)
                                        ;: ';' (3502,10)-(3502,11)
                                      expression_statement (3503,4)-(3503,29)
                                        call_expression (3503,4)-(3503,28)
                                          identifier: 'modify' (3503,4)-(3503,10)
                                          argument_list (3503,10)-(3503,28)
                                            (: '(' (3503,10)-(3503,11)
                                            pointer_expression (3503,11)-(3503,13)
                                              &: '&' (3503,11)-(3503,12)
                                              identifier: 't' (3503,12)-(3503,13)
                                            ,: ',' (3503,13)-(3503,14)
                                            pointer_expression (3503,15)-(3503,18)
                                              &: '&' (3503,15)-(3503,16)
                                              identifier: 'ss' (3503,16)-(3503,18)
                                            ,: ',' (3503,18)-(3503,19)
                                            identifier: 'inbrace' (3503,20)-(3503,27)
                                            ): ')' (3503,27)-(3503,28)
                                        ;: ';' (3503,28)-(3503,29)
                                      }: '}' (3504,7)-(3504,8)
                                  expression_statement (3505,7)-(3505,14)
                                    assignment_expression (3505,7)-(3505,13)
                                      identifier: 's' (3505,7)-(3505,8)
                                      =: '=' (3505,9)-(3505,10)
                                      identifier: 'ss' (3505,11)-(3505,13)
                                    ;: ';' (3505,13)-(3505,14)
                                  }: '}' (3506,3)-(3506,4)
                            expression_statement (3507,3)-(3507,14)
                              assignment_expression (3507,3)-(3507,13)
                                identifier: 'copied' (3507,3)-(3507,9)
                                =: '=' (3507,10)-(3507,11)
                                number_literal: '1' (3507,12)-(3507,13)
                              ;: ';' (3507,13)-(3507,14)
                            if_statement (3508,3)-(3514,4)
                              if: 'if' (3508,3)-(3508,5)
                              parenthesized_expression (3508,6)-(3508,21)
                                (: '(' (3508,6)-(3508,7)
                                binary_expression (3508,7)-(3508,20)
                                  identifier: 'inbrace' (3508,7)-(3508,14)
                                  &&: '&&' (3508,15)-(3508,17)
                                  pointer_expression (3508,18)-(3508,20)
                                    *: '*' (3508,18)-(3508,19)
                                    identifier: 's' (3508,19)-(3508,20)
                                ): ')' (3508,20)-(3508,21)
                              compound_statement (3508,22)-(3514,4)
                                {: '{' (3508,22)-(3508,23)
                                if_statement (3509,7)-(3512,34)
                                  if: 'if' (3509,7)-(3509,9)
                                  parenthesized_expression (3509,10)-(3509,37)
                                    (: '(' (3509,10)-(3509,11)
                                    binary_expression (3509,11)-(3509,36)
                                      binary_expression (3509,11)-(3509,20)
                                        pointer_expression (3509,11)-(3509,13)
                                          *: '*' (3509,11)-(3509,12)
                                          identifier: 's' (3509,12)-(3509,13)
                                        ==: '==' (3509,14)-(3509,16)
                                        char_literal (3509,17)-(3509,20)
                                          ': ''' (3509,17)-(3509,18)
                                          character: ':' (3509,18)-(3509,19)
                                          ': ''' (3509,19)-(3509,20)
                                      &&: '&&' (3509,21)-(3509,23)
                                      unary_expression (3509,24)-(3509,36)
                                        !: '!' (3509,24)-(3509,25)
                                        call_expression (3509,25)-(3509,36)
                                          identifier: 'imeta' (3509,25)-(3509,30)
                                          argument_list (3509,30)-(3509,36)
                                            (: '(' (3509,30)-(3509,31)
                                            subscript_expression (3509,31)-(3509,35)
                                              identifier: 's' (3509,31)-(3509,32)
                                              [: '[' (3509,32)-(3509,33)
                                              number_literal: '1' (3509,33)-(3509,34)
                                              ]: ']' (3509,34)-(3509,35)
                                            ): ')' (3509,35)-(3509,36)
                                    ): ')' (3509,36)-(3509,37)
                                  expression_statement (3510,4)-(3510,45)
                                    call_expression (3510,4)-(3510,44)
                                      identifier: 'zerr' (3510,4)-(3510,8)
                                      argument_list (3510,8)-(3510,44)
                                        (: '(' (3510,8)-(3510,9)
                                        string_literal (3510,9)-(3510,37)
                                          ": '"' (3510,9)-(3510,10)
                                          string_content: 'unrecognized modifier `%c'' (3510,10)-(3510,36)
                                          ": '"' (3510,36)-(3510,37)
                                        ,: ',' (3510,37)-(3510,38)
                                        subscript_expression (3510,39)-(3510,43)
                                          identifier: 's' (3510,39)-(3510,40)
                                          [: '[' (3510,40)-(3510,41)
                                          number_literal: '1' (3510,41)-(3510,42)
                                          ]: ']' (3510,42)-(3510,43)
                                        ): ')' (3510,43)-(3510,44)
                                    ;: ';' (3510,44)-(3510,45)
                                  else_clause (3511,7)-(3512,34)
                                    else: 'else' (3511,7)-(3511,11)
                                    expression_statement (3512,4)-(3512,34)
                                      call_expression (3512,4)-(3512,33)
                                        identifier: 'zerr' (3512,4)-(3512,8)
                                        argument_list (3512,8)-(3512,33)
                                          (: '(' (3512,8)-(3512,9)
                                          string_literal (3512,9)-(3512,32)
                                            ": '"' (3512,9)-(3512,10)
                                            string_content: 'unrecognized modifier' (3512,10)-(3512,31)
                                            ": '"' (3512,31)-(3512,32)
                                          ): ')' (3512,32)-(3512,33)
                                      ;: ';' (3512,33)-(3512,34)
                                return_statement (3513,7)-(3513,19)
                                  return: 'return' (3513,7)-(3513,13)
                                  null (3513,14)-(3513,18)
                                    NULL: 'NULL' (3513,14)-(3513,18)
                                  ;: ';' (3513,18)-(3513,19)
                                }: '}' (3514,3)-(3514,4)
                            }: '}' (3515,6)-(3515,7)
                        }: '}' (3516,2)-(3516,3)
                    if_statement (3517,2)-(3518,15)
                      if: 'if' (3517,2)-(3517,4)
                      parenthesized_expression (3517,5)-(3517,15)
                        (: '(' (3517,5)-(3517,6)
                        unary_expression (3517,6)-(3517,14)
                          !: '!' (3517,6)-(3517,7)
                          identifier: 'inbrace' (3517,7)-(3517,14)
                        ): ')' (3517,14)-(3517,15)
                      expression_statement (3518,6)-(3518,15)
                        assignment_expression (3518,6)-(3518,14)
                          identifier: 'fstr' (3518,6)-(3518,10)
                          =: '=' (3518,11)-(3518,12)
                          identifier: 's' (3518,13)-(3518,14)
                        ;: ';' (3518,14)-(3518,15)
                    }: '}' (3519,5)-(3519,6)
      if_statement (3520,5)-(3521,14)
        if: 'if' (3520,5)-(3520,7)
        parenthesized_expression (3520,8)-(3520,17)
          (: '(' (3520,8)-(3520,9)
          identifier: 'errflag' (3520,9)-(3520,16)
          ): ')' (3520,16)-(3520,17)
        return_statement (3521,2)-(3521,14)
          return: 'return' (3521,2)-(3521,8)
          null (3521,9)-(3521,13)
            NULL: 'NULL' (3521,9)-(3521,13)
          ;: ';' (3521,13)-(3521,14)
      if_statement (3522,5)-(3559,6)
        if: 'if' (3522,5)-(3522,7)
        parenthesized_expression (3522,8)-(3522,18)
          (: '(' (3522,8)-(3522,9)
          identifier: 'evalchar' (3522,9)-(3522,17)
          ): ')' (3522,17)-(3522,18)
        compound_statement (3522,19)-(3559,6)
          {: '{' (3522,19)-(3522,20)
          declaration (3523,2)-(3523,46)
            primitive_type: 'int' (3523,2)-(3523,5)
            init_declarator (3523,6)-(3523,18)
              identifier: 'one' (3523,6)-(3523,9)
              =: '=' (3523,10)-(3523,11)
              identifier: 'noerrs' (3523,12)-(3523,18)
            ,: ',' (3523,18)-(3523,19)
            init_declarator (3523,20)-(3523,33)
              identifier: 'oef' (3523,20)-(3523,23)
              =: '=' (3523,24)-(3523,25)
              identifier: 'errflag' (3523,26)-(3523,33)
            ,: ',' (3523,33)-(3523,34)
            init_declarator (3523,35)-(3523,45)
              identifier: 'haserr' (3523,35)-(3523,41)
              =: '=' (3523,42)-(3523,43)
              number_literal: '0' (3523,44)-(3523,45)
            ;: ';' (3523,45)-(3523,46)
          if_statement (3525,2)-(3526,17)
            if: 'if' (3525,2)-(3525,4)
            parenthesized_expression (3525,5)-(3525,16)
              (: '(' (3525,5)-(3525,6)
              unary_expression (3525,6)-(3525,15)
                !: '!' (3525,6)-(3525,7)
                identifier: 'quoteerr' (3525,7)-(3525,15)
              ): ')' (3525,15)-(3525,16)
            expression_statement (3526,6)-(3526,17)
              assignment_expression (3526,6)-(3526,16)
                identifier: 'noerrs' (3526,6)-(3526,12)
                =: '=' (3526,13)-(3526,14)
                number_literal: '1' (3526,15)-(3526,16)
              ;: ';' (3526,16)-(3526,17)
          comment: '/*
	 * Evaluate the value numerically and output the result as
	 * a character.
	 */' (3527,2)-(3530,5)
          if_statement (3531,2)-(3550,3)
            if: 'if' (3531,2)-(3531,4)
            parenthesized_expression (3531,5)-(3531,12)
              (: '(' (3531,5)-(3531,6)
              identifier: 'isarr' (3531,6)-(3531,11)
              ): ')' (3531,11)-(3531,12)
            compound_statement (3531,13)-(3546,3)
              {: '{' (3531,13)-(3531,14)
              declaration (3532,6)-(3532,38)
                primitive_type: 'char' (3532,6)-(3532,10)
                pointer_declarator (3532,11)-(3532,18)
                  *: '*' (3532,11)-(3532,12)
                  pointer_declarator (3532,12)-(3532,18)
                    *: '*' (3532,12)-(3532,13)
                    identifier: 'aval2' (3532,13)-(3532,18)
                ,: ',' (3532,18)-(3532,19)
                pointer_declarator (3532,20)-(3532,27)
                  *: '*' (3532,20)-(3532,21)
                  pointer_declarator (3532,21)-(3532,27)
                    *: '*' (3532,21)-(3532,22)
                    identifier: 'avptr' (3532,22)-(3532,27)
                ,: ',' (3532,27)-(3532,28)
                pointer_declarator (3532,29)-(3532,37)
                  *: '*' (3532,29)-(3532,30)
                  pointer_declarator (3532,30)-(3532,37)
                    *: '*' (3532,30)-(3532,31)
                    identifier: 'av2ptr' (3532,31)-(3532,37)
                ;: ';' (3532,37)-(3532,38)
              expression_statement (3534,6)-(3534,64)
                assignment_expression (3534,6)-(3534,63)
                  identifier: 'aval2' (3534,6)-(3534,11)
                  =: '=' (3534,12)-(3534,13)
                  cast_expression (3534,14)-(3534,63)
                    (: '(' (3534,14)-(3534,15)
                    type_descriptor (3534,15)-(3534,22)
                      primitive_type: 'char' (3534,15)-(3534,19)
                      abstract_pointer_declarator (3534,20)-(3534,22)
                        *: '*' (3534,20)-(3534,21)
                        abstract_pointer_declarator (3534,21)-(3534,22)
                          *: '*' (3534,21)-(3534,22)
                    ): ')' (3534,22)-(3534,23)
                    call_expression (3534,23)-(3534,63)
                      identifier: 'zhalloc' (3534,23)-(3534,30)
                      argument_list (3534,30)-(3534,63)
                        (: '(' (3534,30)-(3534,31)
                        binary_expression (3534,31)-(3534,62)
                          parenthesized_expression (3534,31)-(3534,47)
                            (: '(' (3534,31)-(3534,32)
                            binary_expression (3534,32)-(3534,46)
                              call_expression (3534,32)-(3534,44)
                                identifier: 'arrlen' (3534,32)-(3534,38)
                                argument_list (3534,38)-(3534,44)
                                  (: '(' (3534,38)-(3534,39)
                                  identifier: 'aval' (3534,39)-(3534,43)
                                  ): ')' (3534,43)-(3534,44)
                              +: '+' (3534,44)-(3534,45)
                              number_literal: '1' (3534,45)-(3534,46)
                            ): ')' (3534,46)-(3534,47)
                          *: '*' (3534,47)-(3534,48)
                          sizeof_expression (3534,48)-(3534,62)
                            sizeof: 'sizeof' (3534,48)-(3534,54)
                            (: '(' (3534,54)-(3534,55)
                            type_descriptor (3534,55)-(3534,61)
                              primitive_type: 'char' (3534,55)-(3534,59)
                              abstract_pointer_declarator (3534,60)-(3534,61)
                                *: '*' (3534,60)-(3534,61)
                            ): ')' (3534,61)-(3534,62)
                        ): ')' (3534,62)-(3534,63)
                ;: ';' (3534,63)-(3534,64)
              for_statement (3536,6)-(3543,7)
                for: 'for' (3536,6)-(3536,9)
                (: '(' (3536,10)-(3536,11)
                comma_expression (3536,11)-(3536,39)
                  assignment_expression (3536,11)-(3536,23)
                    identifier: 'avptr' (3536,11)-(3536,16)
                    =: '=' (3536,17)-(3536,18)
                    identifier: 'aval' (3536,19)-(3536,23)
                  ,: ',' (3536,23)-(3536,24)
                  assignment_expression (3536,25)-(3536,39)
                    identifier: 'av2ptr' (3536,25)-(3536,31)
                    =: '=' (3536,32)-(3536,33)
                    identifier: 'aval2' (3536,34)-(3536,39)
                ;: ';' (3536,39)-(3536,40)
                pointer_expression (3536,41)-(3536,47)
                  *: '*' (3536,41)-(3536,42)
                  identifier: 'avptr' (3536,42)-(3536,47)
                ;: ';' (3536,47)-(3536,48)
                comma_expression (3536,49)-(3536,66)
                  update_expression (3536,49)-(3536,56)
                    identifier: 'avptr' (3536,49)-(3536,54)
                    ++: '++' (3536,54)-(3536,56)
                  ,: ',' (3536,56)-(3536,57)
                  update_expression (3536,58)-(3536,66)
                    identifier: 'av2ptr' (3536,58)-(3536,64)
                    ++: '++' (3536,64)-(3536,66)
                ): ')' (3536,66)-(3536,67)
                compound_statement (3537,6)-(3543,7)
                  {: '{' (3537,6)-(3537,7)
                  comment: '/* When noerrs = 1, the only error is out-of-memory */' (3538,3)-(3538,57)
                  if_statement (3539,3)-(3542,4)
                    if: 'if' (3539,3)-(3539,5)
                    parenthesized_expression (3539,6)-(3539,42)
                      (: '(' (3539,6)-(3539,7)
                      unary_expression (3539,7)-(3539,41)
                        !: '!' (3539,7)-(3539,8)
                        parenthesized_expression (3539,8)-(3539,41)
                          (: '(' (3539,8)-(3539,9)
                          assignment_expression (3539,9)-(3539,40)
                            pointer_expression (3539,9)-(3539,16)
                              *: '*' (3539,9)-(3539,10)
                              identifier: 'av2ptr' (3539,10)-(3539,16)
                            =: '=' (3539,17)-(3539,18)
                            call_expression (3539,19)-(3539,40)
                              identifier: 'substevalchar' (3539,19)-(3539,32)
                              argument_list (3539,32)-(3539,40)
                                (: '(' (3539,32)-(3539,33)
                                pointer_expression (3539,33)-(3539,39)
                                  *: '*' (3539,33)-(3539,34)
                                  identifier: 'avptr' (3539,34)-(3539,39)
                                ): ')' (3539,39)-(3539,40)
                          ): ')' (3539,40)-(3539,41)
                      ): ')' (3539,41)-(3539,42)
                    compound_statement (3539,43)-(3542,4)
                      {: '{' (3539,43)-(3539,44)
                      expression_statement (3540,7)-(3540,18)
                        assignment_expression (3540,7)-(3540,17)
                          identifier: 'haserr' (3540,7)-(3540,13)
                          =: '=' (3540,14)-(3540,15)
                          number_literal: '1' (3540,16)-(3540,17)
                        ;: ';' (3540,17)-(3540,18)
                      break_statement (3541,7)-(3541,13)
                        break: 'break' (3541,7)-(3541,12)
                        ;: ';' (3541,12)-(3541,13)
                      }: '}' (3542,3)-(3542,4)
                  }: '}' (3543,6)-(3543,7)
              expression_statement (3544,6)-(3544,21)
                assignment_expression (3544,6)-(3544,20)
                  pointer_expression (3544,6)-(3544,13)
                    *: '*' (3544,6)-(3544,7)
                    identifier: 'av2ptr' (3544,7)-(3544,13)
                  =: '=' (3544,14)-(3544,15)
                  null (3544,16)-(3544,20)
                    NULL: 'NULL' (3544,16)-(3544,20)
                ;: ';' (3544,20)-(3544,21)
              expression_statement (3545,6)-(3545,19)
                assignment_expression (3545,6)-(3545,18)
                  identifier: 'aval' (3545,6)-(3545,10)
                  =: '=' (3545,11)-(3545,12)
                  identifier: 'aval2' (3545,13)-(3545,18)
                ;: ';' (3545,18)-(3545,19)
              }: '}' (3546,2)-(3546,3)
            else_clause (3546,4)-(3550,3)
              else: 'else' (3546,4)-(3546,8)
              compound_statement (3546,9)-(3550,3)
                {: '{' (3546,9)-(3546,10)
                comment: '/* When noerrs = 1, the only error is out-of-memory */' (3547,6)-(3547,60)
                if_statement (3548,6)-(3549,14)
                  if: 'if' (3548,6)-(3548,8)
                  parenthesized_expression (3548,9)-(3548,38)
                    (: '(' (3548,9)-(3548,10)
                    unary_expression (3548,10)-(3548,37)
                      !: '!' (3548,10)-(3548,11)
                      parenthesized_expression (3548,11)-(3548,37)
                        (: '(' (3548,11)-(3548,12)
                        assignment_expression (3548,12)-(3548,36)
                          identifier: 'val' (3548,12)-(3548,15)
                          =: '=' (3548,16)-(3548,17)
                          call_expression (3548,18)-(3548,36)
                            identifier: 'substevalchar' (3548,18)-(3548,31)
                            argument_list (3548,31)-(3548,36)
                              (: '(' (3548,31)-(3548,32)
                              identifier: 'val' (3548,32)-(3548,35)
                              ): ')' (3548,35)-(3548,36)
                        ): ')' (3548,36)-(3548,37)
                    ): ')' (3548,37)-(3548,38)
                  expression_statement (3549,3)-(3549,14)
                    assignment_expression (3549,3)-(3549,13)
                      identifier: 'haserr' (3549,3)-(3549,9)
                      =: '=' (3549,10)-(3549,11)
                      number_literal: '1' (3549,12)-(3549,13)
                    ;: ';' (3549,13)-(3549,14)
                }: '}' (3550,2)-(3550,3)
          expression_statement (3551,2)-(3551,15)
            assignment_expression (3551,2)-(3551,14)
              identifier: 'noerrs' (3551,2)-(3551,8)
              =: '=' (3551,9)-(3551,10)
              identifier: 'one' (3551,11)-(3551,14)
            ;: ';' (3551,14)-(3551,15)
          if_statement (3552,2)-(3555,3)
            if: 'if' (3552,2)-(3552,4)
            parenthesized_expression (3552,5)-(3552,16)
              (: '(' (3552,5)-(3552,6)
              unary_expression (3552,6)-(3552,15)
                !: '!' (3552,6)-(3552,7)
                identifier: 'quoteerr' (3552,7)-(3552,15)
              ): ')' (3552,15)-(3552,16)
            compound_statement (3552,17)-(3555,3)
              {: '{' (3552,17)-(3552,18)
              comment: '/* Retain user interrupt error status */' (3553,6)-(3553,46)
              expression_statement (3554,6)-(3554,46)
                assignment_expression (3554,6)-(3554,45)
                  identifier: 'errflag' (3554,6)-(3554,13)
                  =: '=' (3554,14)-(3554,15)
                  binary_expression (3554,16)-(3554,45)
                    identifier: 'oef' (3554,16)-(3554,19)
                    |: '|' (3554,20)-(3554,21)
                    parenthesized_expression (3554,22)-(3554,45)
                      (: '(' (3554,22)-(3554,23)
                      binary_expression (3554,23)-(3554,44)
                        identifier: 'errflag' (3554,23)-(3554,30)
                        &: '&' (3554,31)-(3554,32)
                        identifier: 'ERRFLAG_INT' (3554,33)-(3554,44)
                      ): ')' (3554,44)-(3554,45)
                ;: ';' (3554,45)-(3554,46)
              }: '}' (3555,2)-(3555,3)
          if_statement (3556,2)-(3557,18)
            if: 'if' (3556,2)-(3556,4)
            parenthesized_expression (3556,5)-(3556,24)
              (: '(' (3556,5)-(3556,6)
              binary_expression (3556,6)-(3556,23)
                identifier: 'haserr' (3556,6)-(3556,12)
                ||: '||' (3556,13)-(3556,15)
                identifier: 'errflag' (3556,16)-(3556,23)
              ): ')' (3556,23)-(3556,24)
            return_statement (3557,6)-(3557,18)
              return: 'return' (3557,6)-(3557,12)
              null (3557,13)-(3557,17)
                NULL: 'NULL' (3557,13)-(3557,17)
              ;: ';' (3557,17)-(3557,18)
          expression_statement (3558,2)-(3558,15)
            assignment_expression (3558,2)-(3558,14)
              identifier: 'ms_flags' (3558,2)-(3558,10)
              =: '=' (3558,11)-(3558,12)
              number_literal: '0' (3558,13)-(3558,14)
            ;: ';' (3558,14)-(3558,15)
          }: '}' (3559,5)-(3559,6)
      comment: '/*
     * This handles taking a length with ${#foo} and variations.
     * TODO: again. one might naively have thought this had the
     * same sort of effect as the ${(t)...} flag and the ${+...}
     * test, although in this case we do need the value rather
     * the parameter, so maybe it's a bit different.
     */' (3560,5)-(3566,8)
      if_statement (3567,5)-(3598,6)
        if: 'if' (3567,5)-(3567,7)
        parenthesized_expression (3567,8)-(3567,16)
          (: '(' (3567,8)-(3567,9)
          identifier: 'getlen' (3567,9)-(3567,15)
          ): ')' (3567,15)-(3567,16)
        compound_statement (3567,17)-(3598,6)
          {: '{' (3567,17)-(3567,18)
          declaration (3568,2)-(3568,15)
            sized_type_specifier (3568,2)-(3568,6)
              long: 'long' (3568,2)-(3568,6)
            init_declarator (3568,7)-(3568,14)
              identifier: 'len' (3568,7)-(3568,10)
              =: '=' (3568,11)-(3568,12)
              number_literal: '0' (3568,13)-(3568,14)
            ;: ';' (3568,14)-(3568,15)
          declaration (3569,2)-(3569,15)
            primitive_type: 'char' (3569,2)-(3569,6)
            array_declarator (3569,7)-(3569,14)
              identifier: 'buf' (3569,7)-(3569,10)
              [: '[' (3569,10)-(3569,11)
              number_literal: '14' (3569,11)-(3569,13)
              ]: ']' (3569,13)-(3569,14)
            ;: ';' (3569,14)-(3569,15)
          if_statement (3571,2)-(3592,3)
            if: 'if' (3571,2)-(3571,4)
            parenthesized_expression (3571,5)-(3571,12)
              (: '(' (3571,5)-(3571,6)
              identifier: 'isarr' (3571,6)-(3571,11)
              ): ')' (3571,11)-(3571,12)
            compound_statement (3571,13)-(3587,3)
              {: '{' (3571,13)-(3571,14)
              declaration (3572,6)-(3572,17)
                primitive_type: 'char' (3572,6)-(3572,10)
                pointer_declarator (3572,11)-(3572,16)
                  *: '*' (3572,11)-(3572,12)
                  pointer_declarator (3572,12)-(3572,16)
                    *: '*' (3572,12)-(3572,13)
                    identifier: 'ctr' (3572,13)-(3572,16)
                ;: ';' (3572,16)-(3572,17)
              declaration (3573,6)-(3573,44)
                primitive_type: 'int' (3573,6)-(3573,9)
                init_declarator (3573,10)-(3573,43)
                  identifier: 'sl' (3573,10)-(3573,12)
                  =: '=' (3573,13)-(3573,14)
                  conditional_expression (3573,15)-(3573,43)
                    identifier: 'sep' (3573,15)-(3573,18)
                    ?: '?' (3573,19)-(3573,20)
                    call_expression (3573,21)-(3573,39)
                      identifier: 'MB_METASTRLEN' (3573,21)-(3573,34)
                      argument_list (3573,34)-(3573,39)
                        (: '(' (3573,34)-(3573,35)
                        identifier: 'sep' (3573,35)-(3573,38)
                        ): ')' (3573,38)-(3573,39)
                    :: ':' (3573,40)-(3573,41)
                    number_literal: '1' (3573,42)-(3573,43)
                ;: ';' (3573,43)-(3573,44)
              if_statement (3575,6)-(3586,58)
                if: 'if' (3575,6)-(3575,8)
                parenthesized_expression (3575,9)-(3575,22)
                  (: '(' (3575,9)-(3575,10)
                  binary_expression (3575,10)-(3575,21)
                    identifier: 'getlen' (3575,10)-(3575,16)
                    ==: '==' (3575,17)-(3575,19)
                    number_literal: '1' (3575,20)-(3575,21)
                  ): ')' (3575,21)-(3575,22)
                for_statement (3576,3)-(3576,40)
                  for: 'for' (3576,3)-(3576,6)
                  (: '(' (3576,7)-(3576,8)
                  assignment_expression (3576,8)-(3576,18)
                    identifier: 'ctr' (3576,8)-(3576,11)
                    =: '=' (3576,12)-(3576,13)
                    identifier: 'aval' (3576,14)-(3576,18)
                  ;: ';' (3576,18)-(3576,19)
                  pointer_expression (3576,20)-(3576,24)
                    *: '*' (3576,20)-(3576,21)
                    identifier: 'ctr' (3576,21)-(3576,24)
                  ;: ';' (3576,24)-(3576,25)
                  comma_expression (3576,26)-(3576,38)
                    update_expression (3576,26)-(3576,31)
                      identifier: 'ctr' (3576,26)-(3576,29)
                      ++: '++' (3576,29)-(3576,31)
                    ,: ',' (3576,31)-(3576,32)
                    update_expression (3576,33)-(3576,38)
                      identifier: 'len' (3576,33)-(3576,36)
                      ++: '++' (3576,36)-(3576,38)
                  ): ')' (3576,38)-(3576,39)
                  expression_statement (3576,39)-(3576,40)
                    ;: ';' (3576,39)-(3576,40)
                else_clause (3577,6)-(3586,58)
                  else: 'else' (3577,6)-(3577,10)
                  if_statement (3577,11)-(3586,58)
                    if: 'if' (3577,11)-(3577,13)
                    parenthesized_expression (3577,14)-(3577,27)
                      (: '(' (3577,14)-(3577,15)
                      binary_expression (3577,15)-(3577,26)
                        identifier: 'getlen' (3577,15)-(3577,21)
                        ==: '==' (3577,22)-(3577,24)
                        number_literal: '2' (3577,25)-(3577,26)
                      ): ')' (3577,26)-(3577,27)
                    compound_statement (3577,28)-(3582,7)
                      {: '{' (3577,28)-(3577,29)
                      if_statement (3578,3)-(3581,18)
                        if: 'if' (3578,3)-(3578,5)
                        parenthesized_expression (3578,6)-(3578,13)
                          (: '(' (3578,6)-(3578,7)
                          pointer_expression (3578,7)-(3578,12)
                            *: '*' (3578,7)-(3578,8)
                            identifier: 'aval' (3578,8)-(3578,12)
                          ): ')' (3578,12)-(3578,13)
                        for_statement (3579,7)-(3581,18)
                          for: 'for' (3579,7)-(3579,10)
                          (: '(' (3579,11)-(3579,12)
                          comma_expression (3579,12)-(3579,33)
                            assignment_expression (3579,12)-(3579,21)
                              identifier: 'len' (3579,12)-(3579,15)
                              =: '=' (3579,16)-(3579,17)
                              unary_expression (3579,18)-(3579,21)
                                -: '-' (3579,18)-(3579,19)
                                identifier: 'sl' (3579,19)-(3579,21)
                            ,: ',' (3579,21)-(3579,22)
                            assignment_expression (3579,23)-(3579,33)
                              identifier: 'ctr' (3579,23)-(3579,26)
                              =: '=' (3579,27)-(3579,28)
                              identifier: 'aval' (3579,29)-(3579,33)
                          ;: ';' (3579,33)-(3579,34)
                          comma_expression (3580,5)-(3581,15)
                            assignment_expression (3580,5)-(3580,50)
                              identifier: 'len' (3580,5)-(3580,8)
                              +=: '+=' (3580,9)-(3580,11)
                              binary_expression (3580,12)-(3580,50)
                                identifier: 'sl' (3580,12)-(3580,14)
                                +: '+' (3580,15)-(3580,16)
                                call_expression (3580,17)-(3580,50)
                                  identifier: 'MB_METASTRLEN2' (3580,17)-(3580,31)
                                  argument_list (3580,31)-(3580,50)
                                    (: '(' (3580,31)-(3580,32)
                                    pointer_expression (3580,32)-(3580,36)
                                      *: '*' (3580,32)-(3580,33)
                                      identifier: 'ctr' (3580,33)-(3580,36)
                                    ,: ',' (3580,36)-(3580,37)
                                    identifier: 'multi_width' (3580,38)-(3580,49)
                                    ): ')' (3580,49)-(3580,50)
                            ,: ',' (3580,50)-(3580,51)
                            pointer_expression (3581,9)-(3581,15)
                              *: '*' (3581,9)-(3581,10)
                              update_expression (3581,10)-(3581,15)
                                ++: '++' (3581,10)-(3581,12)
                                identifier: 'ctr' (3581,12)-(3581,15)
                          ;: ';' (3581,15)-(3581,16)
                          ): ')' (3581,16)-(3581,17)
                          expression_statement (3581,17)-(3581,18)
                            ;: ';' (3581,17)-(3581,18)
                      }: '}' (3582,6)-(3582,7)
                    else_clause (3583,6)-(3586,58)
                      else: 'else' (3583,6)-(3583,10)
                      for_statement (3584,3)-(3586,58)
                        for: 'for' (3584,3)-(3584,6)
                        (: '(' (3584,7)-(3584,8)
                        assignment_expression (3584,8)-(3584,18)
                          identifier: 'ctr' (3584,8)-(3584,11)
                          =: '=' (3584,12)-(3584,13)
                          identifier: 'aval' (3584,14)-(3584,18)
                        ;: ';' (3584,18)-(3584,19)
                        pointer_expression (3585,8)-(3585,12)
                          *: '*' (3585,8)-(3585,9)
                          identifier: 'ctr' (3585,9)-(3585,12)
                        ;: ';' (3585,12)-(3585,13)
                        comma_expression (3586,8)-(3586,56)
                          assignment_expression (3586,8)-(3586,49)
                            identifier: 'len' (3586,8)-(3586,11)
                            +=: '+=' (3586,12)-(3586,14)
                            call_expression (3586,15)-(3586,49)
                              identifier: 'wordcount' (3586,15)-(3586,24)
                              argument_list (3586,24)-(3586,49)
                                (: '(' (3586,24)-(3586,25)
                                pointer_expression (3586,25)-(3586,29)
                                  *: '*' (3586,25)-(3586,26)
                                  identifier: 'ctr' (3586,26)-(3586,29)
                                ,: ',' (3586,29)-(3586,30)
                                identifier: 'spsep' (3586,31)-(3586,36)
                                ,: ',' (3586,36)-(3586,37)
                                binary_expression (3586,38)-(3586,48)
                                  identifier: 'getlen' (3586,38)-(3586,44)
                                  >: '>' (3586,45)-(3586,46)
                                  number_literal: '3' (3586,47)-(3586,48)
                                ): ')' (3586,48)-(3586,49)
                          ,: ',' (3586,49)-(3586,50)
                          update_expression (3586,51)-(3586,56)
                            identifier: 'ctr' (3586,51)-(3586,54)
                            ++: '++' (3586,54)-(3586,56)
                        ): ')' (3586,56)-(3586,57)
                        expression_statement (3586,57)-(3586,58)
                          ;: ';' (3586,57)-(3586,58)
              }: '}' (3587,2)-(3587,3)
            else_clause (3587,4)-(3592,3)
              else: 'else' (3587,4)-(3587,8)
              compound_statement (3587,9)-(3592,3)
                {: '{' (3587,9)-(3587,10)
                if_statement (3588,6)-(3591,43)
                  if: 'if' (3588,6)-(3588,8)
                  parenthesized_expression (3588,9)-(3588,21)
                    (: '(' (3588,9)-(3588,10)
                    binary_expression (3588,10)-(3588,20)
                      identifier: 'getlen' (3588,10)-(3588,16)
                      <: '<' (3588,17)-(3588,18)
                      number_literal: '3' (3588,19)-(3588,20)
                    ): ')' (3588,20)-(3588,21)
                  expression_statement (3589,3)-(3589,42)
                    assignment_expression (3589,3)-(3589,41)
                      identifier: 'len' (3589,3)-(3589,6)
                      =: '=' (3589,7)-(3589,8)
                      call_expression (3589,9)-(3589,41)
                        identifier: 'MB_METASTRLEN2' (3589,9)-(3589,23)
                        argument_list (3589,23)-(3589,41)
                          (: '(' (3589,23)-(3589,24)
                          identifier: 'val' (3589,24)-(3589,27)
                          ,: ',' (3589,27)-(3589,28)
                          identifier: 'multi_width' (3589,29)-(3589,40)
                          ): ')' (3589,40)-(3589,41)
                    ;: ';' (3589,41)-(3589,42)
                  else_clause (3590,6)-(3591,43)
                    else: 'else' (3590,6)-(3590,10)
                    expression_statement (3591,3)-(3591,43)
                      assignment_expression (3591,3)-(3591,42)
                        identifier: 'len' (3591,3)-(3591,6)
                        =: '=' (3591,7)-(3591,8)
                        call_expression (3591,9)-(3591,42)
                          identifier: 'wordcount' (3591,9)-(3591,18)
                          argument_list (3591,18)-(3591,42)
                            (: '(' (3591,18)-(3591,19)
                            identifier: 'val' (3591,19)-(3591,22)
                            ,: ',' (3591,22)-(3591,23)
                            identifier: 'spsep' (3591,24)-(3591,29)
                            ,: ',' (3591,29)-(3591,30)
                            binary_expression (3591,31)-(3591,41)
                              identifier: 'getlen' (3591,31)-(3591,37)
                              >: '>' (3591,38)-(3591,39)
                              number_literal: '3' (3591,40)-(3591,41)
                            ): ')' (3591,41)-(3591,42)
                      ;: ';' (3591,42)-(3591,43)
                }: '}' (3592,2)-(3592,3)
          expression_statement (3594,2)-(3594,27)
            call_expression (3594,2)-(3594,26)
              identifier: 'sprintf' (3594,2)-(3594,9)
              argument_list (3594,9)-(3594,26)
                (: '(' (3594,9)-(3594,10)
                identifier: 'buf' (3594,10)-(3594,13)
                ,: ',' (3594,13)-(3594,14)
                string_literal (3594,15)-(3594,20)
                  ": '"' (3594,15)-(3594,16)
                  string_content: '%ld' (3594,16)-(3594,19)
                  ": '"' (3594,19)-(3594,20)
                ,: ',' (3594,20)-(3594,21)
                identifier: 'len' (3594,22)-(3594,25)
                ): ')' (3594,25)-(3594,26)
            ;: ';' (3594,26)-(3594,27)
          expression_statement (3595,2)-(3595,23)
            assignment_expression (3595,2)-(3595,22)
              identifier: 'val' (3595,2)-(3595,5)
              =: '=' (3595,6)-(3595,7)
              call_expression (3595,8)-(3595,22)
                identifier: 'dupstring' (3595,8)-(3595,17)
                argument_list (3595,17)-(3595,22)
                  (: '(' (3595,17)-(3595,18)
                  identifier: 'buf' (3595,18)-(3595,21)
                  ): ')' (3595,21)-(3595,22)
            ;: ';' (3595,22)-(3595,23)
          expression_statement (3596,2)-(3596,12)
            assignment_expression (3596,2)-(3596,11)
              identifier: 'isarr' (3596,2)-(3596,7)
              =: '=' (3596,8)-(3596,9)
              number_literal: '0' (3596,10)-(3596,11)
            ;: ';' (3596,11)-(3596,12)
          expression_statement (3597,2)-(3597,15)
            assignment_expression (3597,2)-(3597,14)
              identifier: 'ms_flags' (3597,2)-(3597,10)
              =: '=' (3597,11)-(3597,12)
              number_literal: '0' (3597,13)-(3597,14)
            ;: ';' (3597,14)-(3597,15)
          }: '}' (3598,5)-(3598,6)
      comment: '/* At this point we make sure that our arrayness has affected the
     * arrayness of the linked list.  Then, we can turn our value into
     * a scalar for convenience sake without affecting the arrayness
     * of the resulting value.  ## This is the YUK chunk. ## */' (3599,5)-(3602,64)
      if_statement (3603,5)-(3606,29)
        if: 'if' (3603,5)-(3603,7)
        parenthesized_expression (3603,8)-(3603,15)
          (: '(' (3603,8)-(3603,9)
          identifier: 'isarr' (3603,9)-(3603,14)
          ): ')' (3603,14)-(3603,15)
        expression_statement (3604,2)-(3604,28)
          assignment_expression (3604,2)-(3604,27)
            field_expression (3604,2)-(3604,15)
              field_expression (3604,2)-(3604,9)
                identifier: 'l' (3604,2)-(3604,3)
                ->: '->' (3604,3)-(3604,5)
                field_identifier: 'list' (3604,5)-(3604,9)
              .: '.' (3604,9)-(3604,10)
              field_identifier: 'flags' (3604,10)-(3604,15)
            |=: '|=' (3604,16)-(3604,18)
            identifier: 'LF_ARRAY' (3604,19)-(3604,27)
          ;: ';' (3604,27)-(3604,28)
        else_clause (3605,5)-(3606,29)
          else: 'else' (3605,5)-(3605,9)
          expression_statement (3606,2)-(3606,29)
            assignment_expression (3606,2)-(3606,28)
              field_expression (3606,2)-(3606,15)
                field_expression (3606,2)-(3606,9)
                  identifier: 'l' (3606,2)-(3606,3)
                  ->: '->' (3606,3)-(3606,5)
                  field_identifier: 'list' (3606,5)-(3606,9)
                .: '.' (3606,9)-(3606,10)
                field_identifier: 'flags' (3606,10)-(3606,15)
              &=: '&=' (3606,16)-(3606,18)
              unary_expression (3606,19)-(3606,28)
                ~: '~' (3606,19)-(3606,20)
                identifier: 'LF_ARRAY' (3606,20)-(3606,28)
            ;: ';' (3606,28)-(3606,29)
      if_statement (3607,5)-(3617,6)
        if: 'if' (3607,5)-(3607,7)
        parenthesized_expression (3607,8)-(3607,52)
          (: '(' (3607,8)-(3607,9)
          binary_expression (3607,9)-(3607,51)
            binary_expression (3607,9)-(3607,28)
              binary_expression (3607,9)-(3607,18)
                identifier: 'isarr' (3607,9)-(3607,14)
                >: '>' (3607,15)-(3607,16)
                number_literal: '0' (3607,17)-(3607,18)
              &&: '&&' (3607,19)-(3607,21)
              unary_expression (3607,22)-(3607,28)
                !: '!' (3607,22)-(3607,23)
                identifier: 'plan9' (3607,23)-(3607,28)
            &&: '&&' (3607,29)-(3607,31)
            parenthesized_expression (3607,32)-(3607,51)
              (: '(' (3607,32)-(3607,33)
              binary_expression (3607,33)-(3607,50)
                unary_expression (3607,33)-(3607,38)
                  !: '!' (3607,33)-(3607,34)
                  identifier: 'aval' (3607,34)-(3607,38)
                ||: '||' (3607,39)-(3607,41)
                unary_expression (3607,42)-(3607,50)
                  !: '!' (3607,42)-(3607,43)
                  subscript_expression (3607,43)-(3607,50)
                    identifier: 'aval' (3607,43)-(3607,47)
                    [: '[' (3607,47)-(3607,48)
                    number_literal: '0' (3607,48)-(3607,49)
                    ]: ']' (3607,49)-(3607,50)
              ): ')' (3607,50)-(3607,51)
          ): ')' (3607,51)-(3607,52)
        compound_statement (3607,53)-(3610,6)
          {: '{' (3607,53)-(3607,54)
          expression_statement (3608,2)-(3608,22)
            assignment_expression (3608,2)-(3608,21)
              identifier: 'val' (3608,2)-(3608,5)
              =: '=' (3608,6)-(3608,7)
              call_expression (3608,8)-(3608,21)
                identifier: 'dupstring' (3608,8)-(3608,17)
                argument_list (3608,17)-(3608,21)
                  (: '(' (3608,17)-(3608,18)
                  string_literal (3608,18)-(3608,20)
                    ": '"' (3608,18)-(3608,19)
                    ": '"' (3608,19)-(3608,20)
                  ): ')' (3608,20)-(3608,21)
            ;: ';' (3608,21)-(3608,22)
          expression_statement (3609,2)-(3609,12)
            assignment_expression (3609,2)-(3609,11)
              identifier: 'isarr' (3609,2)-(3609,7)
              =: '=' (3609,8)-(3609,9)
              number_literal: '0' (3609,10)-(3609,11)
            ;: ';' (3609,11)-(3609,12)
          }: '}' (3610,5)-(3610,6)
        else_clause (3610,7)-(3617,6)
          else: 'else' (3610,7)-(3610,11)
          if_statement (3610,12)-(3617,6)
            if: 'if' (3610,12)-(3610,14)
            parenthesized_expression (3610,15)-(3610,53)
              (: '(' (3610,15)-(3610,16)
              binary_expression (3610,16)-(3610,52)
                binary_expression (3610,16)-(3610,40)
                  binary_expression (3610,16)-(3610,29)
                    identifier: 'isarr' (3610,16)-(3610,21)
                    &&: '&&' (3610,22)-(3610,24)
                    identifier: 'aval' (3610,25)-(3610,29)
                  &&: '&&' (3610,30)-(3610,32)
                  subscript_expression (3610,33)-(3610,40)
                    identifier: 'aval' (3610,33)-(3610,37)
                    [: '[' (3610,37)-(3610,38)
                    number_literal: '0' (3610,38)-(3610,39)
                    ]: ']' (3610,39)-(3610,40)
                &&: '&&' (3610,41)-(3610,43)
                unary_expression (3610,44)-(3610,52)
                  !: '!' (3610,44)-(3610,45)
                  subscript_expression (3610,45)-(3610,52)
                    identifier: 'aval' (3610,45)-(3610,49)
                    [: '[' (3610,49)-(3610,50)
                    number_literal: '1' (3610,50)-(3610,51)
                    ]: ']' (3610,51)-(3610,52)
              ): ')' (3610,52)-(3610,53)
            compound_statement (3610,54)-(3617,6)
              {: '{' (3610,54)-(3610,55)
              comment: '/* treat a one-element array as a scalar for purposes of   *
	 * concatenation with surrounding text (some${param}thing) *
	 * and rc_expand_param handling.  Note: LF_ARRAY (above)   *
	 * propagates the true array type from nested expansions.  */' (3611,2)-(3614,63)
              expression_statement (3615,2)-(3615,16)
                assignment_expression (3615,2)-(3615,15)
                  identifier: 'val' (3615,2)-(3615,5)
                  =: '=' (3615,6)-(3615,7)
                  subscript_expression (3615,8)-(3615,15)
                    identifier: 'aval' (3615,8)-(3615,12)
                    [: '[' (3615,12)-(3615,13)
                    number_literal: '0' (3615,13)-(3615,14)
                    ]: ']' (3615,14)-(3615,15)
                ;: ';' (3615,15)-(3615,16)
              expression_statement (3616,2)-(3616,12)
                assignment_expression (3616,2)-(3616,11)
                  identifier: 'isarr' (3616,2)-(3616,7)
                  =: '=' (3616,8)-(3616,9)
                  number_literal: '0' (3616,10)-(3616,11)
                ;: ';' (3616,11)-(3616,12)
              }: '}' (3617,5)-(3617,6)
      comment: '/* This is where we may join arrays together, e.g. (j:,:) sets "sep", and
     * (afterward) may split the joined value (e.g. (s:-:) sets "spsep").  One
     * exception is that ${name:-word} and ${name:+word} will have already
     * done any requested splitting of the word value with quoting preserved.
     */' (3618,5)-(3622,8)
      if_statement (3623,5)-(3655,6)
        if: 'if' (3623,5)-(3623,7)
        parenthesized_expression (3623,8)-(3623,41)
          (: '(' (3623,8)-(3623,9)
          binary_expression (3623,9)-(3623,40)
            binary_expression (3623,9)-(3623,33)
              binary_expression (3623,9)-(3623,24)
                identifier: 'ssub' (3623,9)-(3623,13)
                ||: '||' (3623,14)-(3623,16)
                identifier: 'spbreak' (3623,17)-(3623,24)
              ||: '||' (3623,25)-(3623,27)
              identifier: 'spsep' (3623,28)-(3623,33)
            ||: '||' (3623,34)-(3623,36)
            identifier: 'sep' (3623,37)-(3623,40)
          ): ')' (3623,40)-(3623,41)
        compound_statement (3623,42)-(3655,6)
          {: '{' (3623,42)-(3623,43)
          declaration (3624,2)-(3624,48)
            primitive_type: 'int' (3624,2)-(3624,5)
            init_declarator (3624,6)-(3624,47)
              identifier: 'force_split' (3624,6)-(3624,17)
              =: '=' (3624,18)-(3624,19)
              binary_expression (3624,20)-(3624,47)
                unary_expression (3624,20)-(3624,25)
                  !: '!' (3624,20)-(3624,21)
                  identifier: 'ssub' (3624,21)-(3624,25)
                &&: '&&' (3624,26)-(3624,28)
                parenthesized_expression (3624,29)-(3624,47)
                  (: '(' (3624,29)-(3624,30)
                  binary_expression (3624,30)-(3624,46)
                    identifier: 'spbreak' (3624,30)-(3624,37)
                    ||: '||' (3624,38)-(3624,40)
                    identifier: 'spsep' (3624,41)-(3624,46)
                  ): ')' (3624,46)-(3624,47)
            ;: ';' (3624,47)-(3624,48)
          if_statement (3625,2)-(3641,3)
            if: 'if' (3625,2)-(3625,4)
            parenthesized_expression (3625,5)-(3625,12)
              (: '(' (3625,5)-(3625,6)
              identifier: 'isarr' (3625,6)-(3625,11)
              ): ')' (3625,11)-(3625,12)
            compound_statement (3625,13)-(3641,3)
              {: '{' (3625,13)-(3625,14)
              comment: '/* sep non-null here means F or j flag, force join */' (3626,6)-(3626,59)
              if_statement (3627,6)-(3638,7)
                if: 'if' (3627,6)-(3627,8)
                parenthesized_expression (3627,9)-(3627,29)
                  (: '(' (3627,9)-(3627,10)
                  binary_expression (3627,10)-(3627,28)
                    binary_expression (3627,10)-(3627,21)
                      identifier: 'nojoin' (3627,10)-(3627,16)
                      ==: '==' (3627,17)-(3627,19)
                      number_literal: '0' (3627,20)-(3627,21)
                    ||: '||' (3627,22)-(3627,24)
                    identifier: 'sep' (3627,25)-(3627,28)
                  ): ')' (3627,28)-(3627,29)
                compound_statement (3627,30)-(3630,7)
                  {: '{' (3627,30)-(3627,31)
                  expression_statement (3628,3)-(3628,31)
                    assignment_expression (3628,3)-(3628,30)
                      identifier: 'val' (3628,3)-(3628,6)
                      =: '=' (3628,7)-(3628,8)
                      call_expression (3628,9)-(3628,30)
                        identifier: 'sepjoin' (3628,9)-(3628,16)
                        argument_list (3628,16)-(3628,30)
                          (: '(' (3628,16)-(3628,17)
                          identifier: 'aval' (3628,17)-(3628,21)
                          ,: ',' (3628,21)-(3628,22)
                          identifier: 'sep' (3628,23)-(3628,26)
                          ,: ',' (3628,26)-(3628,27)
                          number_literal: '1' (3628,28)-(3628,29)
                          ): ')' (3628,29)-(3628,30)
                    ;: ';' (3628,30)-(3628,31)
                  expression_statement (3629,3)-(3629,13)
                    assignment_expression (3629,3)-(3629,12)
                      identifier: 'isarr' (3629,3)-(3629,8)
                      =: '=' (3629,9)-(3629,10)
                      number_literal: '0' (3629,11)-(3629,12)
                    ;: ';' (3629,12)-(3629,13)
                  }: '}' (3630,6)-(3630,7)
                else_clause (3630,8)-(3638,7)
                  else: 'else' (3630,8)-(3630,12)
                  if_statement (3630,13)-(3638,7)
                    if: 'if' (3630,13)-(3630,15)
                    parenthesized_expression (3630,16)-(3631,56)
                      (: '(' (3630,16)-(3630,17)
                      binary_expression (3630,17)-(3631,55)
                        identifier: 'force_split' (3630,17)-(3630,28)
                        &&: '&&' (3630,29)-(3630,31)
                        parenthesized_expression (3631,10)-(3631,55)
                          (: '(' (3631,10)-(3631,11)
                          binary_expression (3631,11)-(3631,54)
                            binary_expression (3631,11)-(3631,31)
                              identifier: 'spsep' (3631,11)-(3631,16)
                              ||: '||' (3631,17)-(3631,19)
                              binary_expression (3631,20)-(3631,31)
                                identifier: 'nojoin' (3631,20)-(3631,26)
                                ==: '==' (3631,27)-(3631,29)
                                number_literal: '2' (3631,30)-(3631,31)
                            ||: '||' (3631,32)-(3631,34)
                            parenthesized_expression (3631,35)-(3631,54)
                              (: '(' (3631,35)-(3631,36)
                              binary_expression (3631,36)-(3631,53)
                                unary_expression (3631,36)-(3631,40)
                                  !: '!' (3631,36)-(3631,37)
                                  identifier: 'ifs' (3631,37)-(3631,40)
                                &&: '&&' (3631,41)-(3631,43)
                                binary_expression (3631,44)-(3631,53)
                                  identifier: 'isarr' (3631,44)-(3631,49)
                                  <: '<' (3631,50)-(3631,51)
                                  number_literal: '0' (3631,52)-(3631,53)
                              ): ')' (3631,53)-(3631,54)
                          ): ')' (3631,54)-(3631,55)
                      ): ')' (3631,55)-(3631,56)
                    compound_statement (3631,57)-(3638,7)
                      {: '{' (3631,57)-(3631,58)
                      comment: '/* Hack to simulate splitting individual elements:
		 * forced joining as previously determined, or
		 * join on what we later use to forcibly split
		 */' (3632,3)-(3635,6)
                      expression_statement (3636,3)-(3636,56)
                        assignment_expression (3636,3)-(3636,55)
                          identifier: 'val' (3636,3)-(3636,6)
                          =: '=' (3636,7)-(3636,8)
                          call_expression (3636,9)-(3636,55)
                            identifier: 'sepjoin' (3636,9)-(3636,16)
                            argument_list (3636,16)-(3636,55)
                              (: '(' (3636,16)-(3636,17)
                              identifier: 'aval' (3636,17)-(3636,21)
                              ,: ',' (3636,21)-(3636,22)
                              parenthesized_expression (3636,23)-(3636,51)
                                (: '(' (3636,23)-(3636,24)
                                conditional_expression (3636,24)-(3636,50)
                                  binary_expression (3636,24)-(3636,35)
                                    identifier: 'nojoin' (3636,24)-(3636,30)
                                    ==: '==' (3636,31)-(3636,33)
                                    number_literal: '1' (3636,34)-(3636,35)
                                  ?: '?' (3636,36)-(3636,37)
                                  null (3636,38)-(3636,42)
                                    NULL: 'NULL' (3636,38)-(3636,42)
                                  :: ':' (3636,43)-(3636,44)
                                  identifier: 'spsep' (3636,45)-(3636,50)
                                ): ')' (3636,50)-(3636,51)
                              ,: ',' (3636,51)-(3636,52)
                              number_literal: '1' (3636,53)-(3636,54)
                              ): ')' (3636,54)-(3636,55)
                        ;: ';' (3636,55)-(3636,56)
                      expression_statement (3637,3)-(3637,13)
                        assignment_expression (3637,3)-(3637,12)
                          identifier: 'isarr' (3637,3)-(3637,8)
                          =: '=' (3637,9)-(3637,10)
                          number_literal: '0' (3637,11)-(3637,12)
                        ;: ';' (3637,12)-(3637,13)
                      }: '}' (3638,6)-(3638,7)
              if_statement (3639,6)-(3640,16)
                if: 'if' (3639,6)-(3639,8)
                parenthesized_expression (3639,9)-(3639,17)
                  (: '(' (3639,9)-(3639,10)
                  unary_expression (3639,10)-(3639,16)
                    !: '!' (3639,10)-(3639,11)
                    identifier: 'isarr' (3639,11)-(3639,16)
                  ): ')' (3639,16)-(3639,17)
                expression_statement (3640,3)-(3640,16)
                  assignment_expression (3640,3)-(3640,15)
                    identifier: 'ms_flags' (3640,3)-(3640,11)
                    =: '=' (3640,12)-(3640,13)
                    number_literal: '0' (3640,14)-(3640,15)
                  ;: ';' (3640,15)-(3640,16)
              }: '}' (3641,2)-(3641,3)
          if_statement (3642,2)-(3650,3)
            if: 'if' (3642,2)-(3642,4)
            parenthesized_expression (3642,5)-(3642,28)
              (: '(' (3642,5)-(3642,6)
              binary_expression (3642,6)-(3642,27)
                identifier: 'force_split' (3642,6)-(3642,17)
                &&: '&&' (3642,18)-(3642,20)
                unary_expression (3642,21)-(3642,27)
                  !: '!' (3642,21)-(3642,22)
                  identifier: 'isarr' (3642,22)-(3642,27)
              ): ')' (3642,27)-(3642,28)
            compound_statement (3642,29)-(3650,3)
              {: '{' (3642,29)-(3642,30)
              expression_statement (3643,6)-(3643,40)
                assignment_expression (3643,6)-(3643,39)
                  identifier: 'aval' (3643,6)-(3643,10)
                  =: '=' (3643,11)-(3643,12)
                  call_expression (3643,13)-(3643,39)
                    identifier: 'sepsplit' (3643,13)-(3643,21)
                    argument_list (3643,21)-(3643,39)
                      (: '(' (3643,21)-(3643,22)
                      identifier: 'val' (3643,22)-(3643,25)
                      ,: ',' (3643,25)-(3643,26)
                      identifier: 'spsep' (3643,27)-(3643,32)
                      ,: ',' (3643,32)-(3643,33)
                      number_literal: '0' (3643,34)-(3643,35)
                      ,: ',' (3643,35)-(3643,36)
                      number_literal: '1' (3643,37)-(3643,38)
                      ): ')' (3643,38)-(3643,39)
                ;: ';' (3643,39)-(3643,40)
              if_statement (3644,6)-(3649,26)
                if: 'if' (3644,6)-(3644,8)
                parenthesized_expression (3644,9)-(3644,28)
                  (: '(' (3644,9)-(3644,10)
                  binary_expression (3644,10)-(3644,27)
                    unary_expression (3644,10)-(3644,15)
                      !: '!' (3644,10)-(3644,11)
                      identifier: 'aval' (3644,11)-(3644,15)
                    ||: '||' (3644,16)-(3644,18)
                    unary_expression (3644,19)-(3644,27)
                      !: '!' (3644,19)-(3644,20)
                      subscript_expression (3644,20)-(3644,27)
                        identifier: 'aval' (3644,20)-(3644,24)
                        [: '[' (3644,24)-(3644,25)
                        number_literal: '0' (3644,25)-(3644,26)
                        ]: ']' (3644,26)-(3644,27)
                  ): ')' (3644,27)-(3644,28)
                expression_statement (3645,3)-(3645,23)
                  assignment_expression (3645,3)-(3645,22)
                    identifier: 'val' (3645,3)-(3645,6)
                    =: '=' (3645,7)-(3645,8)
                    call_expression (3645,9)-(3645,22)
                      identifier: 'dupstring' (3645,9)-(3645,18)
                      argument_list (3645,18)-(3645,22)
                        (: '(' (3645,18)-(3645,19)
                        string_literal (3645,19)-(3645,21)
                          ": '"' (3645,19)-(3645,20)
                          ": '"' (3645,20)-(3645,21)
                        ): ')' (3645,21)-(3645,22)
                  ;: ';' (3645,22)-(3645,23)
                else_clause (3646,6)-(3649,26)
                  else: 'else' (3646,6)-(3646,10)
                  if_statement (3646,11)-(3649,26)
                    if: 'if' (3646,11)-(3646,13)
                    parenthesized_expression (3646,14)-(3646,24)
                      (: '(' (3646,14)-(3646,15)
                      unary_expression (3646,15)-(3646,23)
                        !: '!' (3646,15)-(3646,16)
                        subscript_expression (3646,16)-(3646,23)
                          identifier: 'aval' (3646,16)-(3646,20)
                          [: '[' (3646,20)-(3646,21)
                          number_literal: '1' (3646,21)-(3646,22)
                          ]: ']' (3646,22)-(3646,23)
                      ): ')' (3646,23)-(3646,24)
                    expression_statement (3647,3)-(3647,17)
                      assignment_expression (3647,3)-(3647,16)
                        identifier: 'val' (3647,3)-(3647,6)
                        =: '=' (3647,7)-(3647,8)
                        subscript_expression (3647,9)-(3647,16)
                          identifier: 'aval' (3647,9)-(3647,13)
                          [: '[' (3647,13)-(3647,14)
                          number_literal: '0' (3647,14)-(3647,15)
                          ]: ']' (3647,15)-(3647,16)
                      ;: ';' (3647,16)-(3647,17)
                    else_clause (3648,6)-(3649,26)
                      else: 'else' (3648,6)-(3648,10)
                      expression_statement (3649,3)-(3649,26)
                        assignment_expression (3649,3)-(3649,25)
                          identifier: 'isarr' (3649,3)-(3649,8)
                          =: '=' (3649,9)-(3649,10)
                          conditional_expression (3649,11)-(3649,25)
                            identifier: 'nojoin' (3649,11)-(3649,17)
                            ?: '?' (3649,18)-(3649,19)
                            number_literal: '1' (3649,20)-(3649,21)
                            :: ':' (3649,22)-(3649,23)
                            number_literal: '2' (3649,24)-(3649,25)
                        ;: ';' (3649,25)-(3649,26)
              }: '}' (3650,2)-(3650,3)
          if_statement (3651,2)-(3654,33)
            if: 'if' (3651,2)-(3651,4)
            parenthesized_expression (3651,5)-(3651,12)
              (: '(' (3651,5)-(3651,6)
              identifier: 'isarr' (3651,6)-(3651,11)
              ): ')' (3651,11)-(3651,12)
            expression_statement (3652,6)-(3652,32)
              assignment_expression (3652,6)-(3652,31)
                field_expression (3652,6)-(3652,19)
                  field_expression (3652,6)-(3652,13)
                    identifier: 'l' (3652,6)-(3652,7)
                    ->: '->' (3652,7)-(3652,9)
                    field_identifier: 'list' (3652,9)-(3652,13)
                  .: '.' (3652,13)-(3652,14)
                  field_identifier: 'flags' (3652,14)-(3652,19)
                |=: '|=' (3652,20)-(3652,22)
                identifier: 'LF_ARRAY' (3652,23)-(3652,31)
              ;: ';' (3652,31)-(3652,32)
            else_clause (3653,2)-(3654,33)
              else: 'else' (3653,2)-(3653,6)
              expression_statement (3654,6)-(3654,33)
                assignment_expression (3654,6)-(3654,32)
                  field_expression (3654,6)-(3654,19)
                    field_expression (3654,6)-(3654,13)
                      identifier: 'l' (3654,6)-(3654,7)
                      ->: '->' (3654,7)-(3654,9)
                      field_identifier: 'list' (3654,9)-(3654,13)
                    .: '.' (3654,13)-(3654,14)
                    field_identifier: 'flags' (3654,14)-(3654,19)
                  &=: '&=' (3654,20)-(3654,22)
                  unary_expression (3654,23)-(3654,32)
                    ~: '~' (3654,23)-(3654,24)
                    identifier: 'LF_ARRAY' (3654,24)-(3654,32)
                ;: ';' (3654,32)-(3654,33)
          }: '}' (3655,5)-(3655,6)
      comment: '/*
     * Perform case modififications.
     */' (3656,5)-(3658,8)
      if_statement (3659,5)-(3673,6)
        if: 'if' (3659,5)-(3659,7)
        parenthesized_expression (3659,8)-(3659,31)
          (: '(' (3659,8)-(3659,9)
          binary_expression (3659,9)-(3659,30)
            identifier: 'casmod' (3659,9)-(3659,15)
            !=: '!=' (3659,16)-(3659,18)
            identifier: 'CASMOD_NONE' (3659,19)-(3659,30)
          ): ')' (3659,30)-(3659,31)
        compound_statement (3659,32)-(3673,6)
          {: '{' (3659,32)-(3659,33)
          expression_statement (3660,2)-(3660,13)
            assignment_expression (3660,2)-(3660,12)
              identifier: 'copied' (3660,2)-(3660,8)
              =: '=' (3660,9)-(3660,10)
              number_literal: '1' (3660,11)-(3660,12)
            ;: ';' (3660,12)-(3660,13)
          comment: '/* string is always modified by copy */' (3660,15)-(3660,54)
          if_statement (3661,2)-(3672,3)
            if: 'if' (3661,2)-(3661,4)
            parenthesized_expression (3661,5)-(3661,12)
              (: '(' (3661,5)-(3661,6)
              identifier: 'isarr' (3661,6)-(3661,11)
              ): ')' (3661,11)-(3661,12)
            compound_statement (3661,13)-(3670,3)
              {: '{' (3661,13)-(3661,14)
              declaration (3662,6)-(3662,23)
                primitive_type: 'char' (3662,6)-(3662,10)
                pointer_declarator (3662,11)-(3662,15)
                  *: '*' (3662,11)-(3662,12)
                  pointer_declarator (3662,12)-(3662,15)
                    *: '*' (3662,12)-(3662,13)
                    identifier: 'ap' (3662,13)-(3662,15)
                ,: ',' (3662,15)-(3662,16)
                pointer_declarator (3662,17)-(3662,22)
                  *: '*' (3662,17)-(3662,18)
                  pointer_declarator (3662,18)-(3662,22)
                    *: '*' (3662,18)-(3662,19)
                    identifier: 'ap2' (3662,19)-(3662,22)
                ;: ';' (3662,22)-(3662,23)
              expression_statement (3664,6)-(3664,16)
                assignment_expression (3664,6)-(3664,15)
                  identifier: 'ap' (3664,6)-(3664,8)
                  =: '=' (3664,9)-(3664,10)
                  identifier: 'aval' (3664,11)-(3664,15)
                ;: ';' (3664,15)-(3664,16)
              expression_statement (3665,6)-(3665,72)
                assignment_expression (3665,6)-(3665,71)
                  identifier: 'ap2' (3665,6)-(3665,9)
                  =: '=' (3665,10)-(3665,11)
                  assignment_expression (3665,12)-(3665,71)
                    identifier: 'aval' (3665,12)-(3665,16)
                    =: '=' (3665,17)-(3665,18)
                    cast_expression (3665,19)-(3665,71)
                      (: '(' (3665,19)-(3665,20)
                      type_descriptor (3665,20)-(3665,27)
                        primitive_type: 'char' (3665,20)-(3665,24)
                        abstract_pointer_declarator (3665,25)-(3665,27)
                          *: '*' (3665,25)-(3665,26)
                          abstract_pointer_declarator (3665,26)-(3665,27)
                            *: '*' (3665,26)-(3665,27)
                      ): ')' (3665,27)-(3665,28)
                      call_expression (3665,29)-(3665,71)
                        identifier: 'zhalloc' (3665,29)-(3665,36)
                        argument_list (3665,36)-(3665,71)
                          (: '(' (3665,36)-(3665,37)
                          binary_expression (3665,37)-(3665,70)
                            sizeof_expression (3665,37)-(3665,51)
                              sizeof: 'sizeof' (3665,37)-(3665,43)
                              (: '(' (3665,43)-(3665,44)
                              type_descriptor (3665,44)-(3665,50)
                                primitive_type: 'char' (3665,44)-(3665,48)
                                abstract_pointer_declarator (3665,49)-(3665,50)
                                  *: '*' (3665,49)-(3665,50)
                              ): ')' (3665,50)-(3665,51)
                            *: '*' (3665,52)-(3665,53)
                            parenthesized_expression (3665,54)-(3665,70)
                              (: '(' (3665,54)-(3665,55)
                              binary_expression (3665,55)-(3665,69)
                                call_expression (3665,55)-(3665,67)
                                  identifier: 'arrlen' (3665,55)-(3665,61)
                                  argument_list (3665,61)-(3665,67)
                                    (: '(' (3665,61)-(3665,62)
                                    identifier: 'aval' (3665,62)-(3665,66)
                                    ): ')' (3665,66)-(3665,67)
                                +: '+' (3665,67)-(3665,68)
                                number_literal: '1' (3665,68)-(3665,69)
                              ): ')' (3665,69)-(3665,70)
                          ): ')' (3665,70)-(3665,71)
                ;: ';' (3665,71)-(3665,72)
              while_statement (3667,6)-(3668,38)
                while: 'while' (3667,6)-(3667,11)
                parenthesized_expression (3667,12)-(3667,17)
                  (: '(' (3667,12)-(3667,13)
                  pointer_expression (3667,13)-(3667,16)
                    *: '*' (3667,13)-(3667,14)
                    identifier: 'ap' (3667,14)-(3667,16)
                  ): ')' (3667,16)-(3667,17)
                expression_statement (3668,3)-(3668,38)
                  assignment_expression (3668,3)-(3668,37)
                    pointer_expression (3668,3)-(3668,9)
                      *: '*' (3668,3)-(3668,4)
                      update_expression (3668,4)-(3668,9)
                        identifier: 'ap2' (3668,4)-(3668,7)
                        ++: '++' (3668,7)-(3668,9)
                    =: '=' (3668,10)-(3668,11)
                    call_expression (3668,12)-(3668,37)
                      identifier: 'casemodify' (3668,12)-(3668,22)
                      argument_list (3668,22)-(3668,37)
                        (: '(' (3668,22)-(3668,23)
                        pointer_expression (3668,23)-(3668,28)
                          *: '*' (3668,23)-(3668,24)
                          update_expression (3668,24)-(3668,28)
                            identifier: 'ap' (3668,24)-(3668,26)
                            ++: '++' (3668,26)-(3668,28)
                        ,: ',' (3668,28)-(3668,29)
                        identifier: 'casmod' (3668,30)-(3668,36)
                        ): ')' (3668,36)-(3668,37)
                  ;: ';' (3668,37)-(3668,38)
              expression_statement (3669,6)-(3669,20)
                assignment_expression (3669,6)-(3669,19)
                  pointer_expression (3669,6)-(3669,12)
                    *: '*' (3669,6)-(3669,7)
                    update_expression (3669,7)-(3669,12)
                      identifier: 'ap2' (3669,7)-(3669,10)
                      ++: '++' (3669,10)-(3669,12)
                  =: '=' (3669,13)-(3669,14)
                  null (3669,15)-(3669,19)
                    NULL: 'NULL' (3669,15)-(3669,19)
                ;: ';' (3669,19)-(3669,20)
              }: '}' (3670,2)-(3670,3)
            else_clause (3670,4)-(3672,3)
              else: 'else' (3670,4)-(3670,8)
              compound_statement (3670,9)-(3672,3)
                {: '{' (3670,9)-(3670,10)
                expression_statement (3671,6)-(3671,36)
                  assignment_expression (3671,6)-(3671,35)
                    identifier: 'val' (3671,6)-(3671,9)
                    =: '=' (3671,10)-(3671,11)
                    call_expression (3671,12)-(3671,35)
                      identifier: 'casemodify' (3671,12)-(3671,22)
                      argument_list (3671,22)-(3671,35)
                        (: '(' (3671,22)-(3671,23)
                        identifier: 'val' (3671,23)-(3671,26)
                        ,: ',' (3671,26)-(3671,27)
                        identifier: 'casmod' (3671,28)-(3671,34)
                        ): ')' (3671,34)-(3671,35)
                  ;: ';' (3671,35)-(3671,36)
                }: '}' (3672,2)-(3672,3)
          }: '}' (3673,5)-(3673,6)
      comment: '/*
     * Process echo- and print-style escape sequences.
     */' (3674,5)-(3676,8)
      if_statement (3677,5)-(3695,6)
        if: 'if' (3677,5)-(3677,7)
        parenthesized_expression (3677,8)-(3677,22)
          (: '(' (3677,8)-(3677,9)
          binary_expression (3677,9)-(3677,21)
            identifier: 'getkeys' (3677,9)-(3677,16)
            >=: '>=' (3677,17)-(3677,19)
            number_literal: '0' (3677,20)-(3677,21)
          ): ')' (3677,21)-(3677,22)
        compound_statement (3677,23)-(3695,6)
          {: '{' (3677,23)-(3677,24)
          declaration (3678,2)-(3678,10)
            primitive_type: 'int' (3678,2)-(3678,5)
            identifier: 'len' (3678,6)-(3678,9)
            ;: ';' (3678,9)-(3678,10)
          expression_statement (3680,2)-(3680,13)
            assignment_expression (3680,2)-(3680,12)
              identifier: 'copied' (3680,2)-(3680,8)
              =: '=' (3680,9)-(3680,10)
              number_literal: '1' (3680,11)-(3680,12)
            ;: ';' (3680,12)-(3680,13)
          comment: '/* string is always copied */' (3680,15)-(3680,44)
          if_statement (3681,2)-(3694,3)
            if: 'if' (3681,2)-(3681,4)
            parenthesized_expression (3681,5)-(3681,12)
              (: '(' (3681,5)-(3681,6)
              identifier: 'isarr' (3681,6)-(3681,11)
              ): ')' (3681,11)-(3681,12)
            compound_statement (3681,13)-(3691,3)
              {: '{' (3681,13)-(3681,14)
              declaration (3682,6)-(3682,23)
                primitive_type: 'char' (3682,6)-(3682,10)
                pointer_declarator (3682,11)-(3682,15)
                  *: '*' (3682,11)-(3682,12)
                  pointer_declarator (3682,12)-(3682,15)
                    *: '*' (3682,12)-(3682,13)
                    identifier: 'ap' (3682,13)-(3682,15)
                ,: ',' (3682,15)-(3682,16)
                pointer_declarator (3682,17)-(3682,22)
                  *: '*' (3682,17)-(3682,18)
                  pointer_declarator (3682,18)-(3682,22)
                    *: '*' (3682,18)-(3682,19)
                    identifier: 'ap2' (3682,19)-(3682,22)
                ;: ';' (3682,22)-(3682,23)
              expression_statement (3684,6)-(3684,16)
                assignment_expression (3684,6)-(3684,15)
                  identifier: 'ap' (3684,6)-(3684,8)
                  =: '=' (3684,9)-(3684,10)
                  identifier: 'aval' (3684,11)-(3684,15)
                ;: ';' (3684,15)-(3684,16)
              expression_statement (3685,6)-(3685,66)
                assignment_expression (3685,6)-(3685,65)
                  identifier: 'aval' (3685,6)-(3685,10)
                  =: '=' (3685,11)-(3685,12)
                  cast_expression (3685,13)-(3685,65)
                    (: '(' (3685,13)-(3685,14)
                    type_descriptor (3685,14)-(3685,21)
                      primitive_type: 'char' (3685,14)-(3685,18)
                      abstract_pointer_declarator (3685,19)-(3685,21)
                        *: '*' (3685,19)-(3685,20)
                        abstract_pointer_declarator (3685,20)-(3685,21)
                          *: '*' (3685,20)-(3685,21)
                    ): ')' (3685,21)-(3685,22)
                    call_expression (3685,23)-(3685,65)
                      identifier: 'zhalloc' (3685,23)-(3685,30)
                      argument_list (3685,30)-(3685,65)
                        (: '(' (3685,30)-(3685,31)
                        binary_expression (3685,31)-(3685,64)
                          sizeof_expression (3685,31)-(3685,45)
                            sizeof: 'sizeof' (3685,31)-(3685,37)
                            (: '(' (3685,37)-(3685,38)
                            type_descriptor (3685,38)-(3685,44)
                              primitive_type: 'char' (3685,38)-(3685,42)
                              abstract_pointer_declarator (3685,43)-(3685,44)
                                *: '*' (3685,43)-(3685,44)
                            ): ')' (3685,44)-(3685,45)
                          *: '*' (3685,46)-(3685,47)
                          parenthesized_expression (3685,48)-(3685,64)
                            (: '(' (3685,48)-(3685,49)
                            binary_expression (3685,49)-(3685,63)
                              call_expression (3685,49)-(3685,61)
                                identifier: 'arrlen' (3685,49)-(3685,55)
                                argument_list (3685,55)-(3685,61)
                                  (: '(' (3685,55)-(3685,56)
                                  identifier: 'aval' (3685,56)-(3685,60)
                                  ): ')' (3685,60)-(3685,61)
                              +: '+' (3685,61)-(3685,62)
                              number_literal: '1' (3685,62)-(3685,63)
                            ): ')' (3685,63)-(3685,64)
                        ): ')' (3685,64)-(3685,65)
                ;: ';' (3685,65)-(3685,66)
              for_statement (3686,6)-(3689,7)
                for: 'for' (3686,6)-(3686,9)
                (: '(' (3686,10)-(3686,11)
                assignment_expression (3686,11)-(3686,21)
                  identifier: 'ap2' (3686,11)-(3686,14)
                  =: '=' (3686,15)-(3686,16)
                  identifier: 'aval' (3686,17)-(3686,21)
                ;: ';' (3686,21)-(3686,22)
                pointer_expression (3686,23)-(3686,26)
                  *: '*' (3686,23)-(3686,24)
                  identifier: 'ap' (3686,24)-(3686,26)
                ;: ';' (3686,26)-(3686,27)
                comma_expression (3686,28)-(3686,39)
                  update_expression (3686,28)-(3686,32)
                    identifier: 'ap' (3686,28)-(3686,30)
                    ++: '++' (3686,30)-(3686,32)
                  ,: ',' (3686,32)-(3686,33)
                  update_expression (3686,34)-(3686,39)
                    identifier: 'ap2' (3686,34)-(3686,37)
                    ++: '++' (3686,37)-(3686,39)
                ): ')' (3686,39)-(3686,40)
                compound_statement (3686,41)-(3689,7)
                  {: '{' (3686,41)-(3686,42)
                  expression_statement (3687,3)-(3687,49)
                    assignment_expression (3687,3)-(3687,48)
                      pointer_expression (3687,3)-(3687,7)
                        *: '*' (3687,3)-(3687,4)
                        identifier: 'ap2' (3687,4)-(3687,7)
                      =: '=' (3687,8)-(3687,9)
                      call_expression (3687,10)-(3687,48)
                        identifier: 'getkeystring' (3687,10)-(3687,22)
                        argument_list (3687,22)-(3687,48)
                          (: '(' (3687,22)-(3687,23)
                          pointer_expression (3687,23)-(3687,26)
                            *: '*' (3687,23)-(3687,24)
                            identifier: 'ap' (3687,24)-(3687,26)
                          ,: ',' (3687,26)-(3687,27)
                          pointer_expression (3687,28)-(3687,32)
                            &: '&' (3687,28)-(3687,29)
                            identifier: 'len' (3687,29)-(3687,32)
                          ,: ',' (3687,32)-(3687,33)
                          identifier: 'getkeys' (3687,34)-(3687,41)
                          ,: ',' (3687,41)-(3687,42)
                          null (3687,43)-(3687,47)
                            NULL: 'NULL' (3687,43)-(3687,47)
                          ): ')' (3687,47)-(3687,48)
                    ;: ';' (3687,48)-(3687,49)
                  expression_statement (3688,3)-(3688,42)
                    assignment_expression (3688,3)-(3688,41)
                      pointer_expression (3688,3)-(3688,7)
                        *: '*' (3688,3)-(3688,4)
                        identifier: 'ap2' (3688,4)-(3688,7)
                      =: '=' (3688,8)-(3688,9)
                      call_expression (3688,10)-(3688,41)
                        identifier: 'metafy' (3688,10)-(3688,16)
                        argument_list (3688,16)-(3688,41)
                          (: '(' (3688,16)-(3688,17)
                          pointer_expression (3688,17)-(3688,21)
                            *: '*' (3688,17)-(3688,18)
                            identifier: 'ap2' (3688,18)-(3688,21)
                          ,: ',' (3688,21)-(3688,22)
                          identifier: 'len' (3688,23)-(3688,26)
                          ,: ',' (3688,26)-(3688,27)
                          identifier: 'META_USEHEAP' (3688,28)-(3688,40)
                          ): ')' (3688,40)-(3688,41)
                    ;: ';' (3688,41)-(3688,42)
                  }: '}' (3689,6)-(3689,7)
              expression_statement (3690,6)-(3690,20)
                assignment_expression (3690,6)-(3690,19)
                  pointer_expression (3690,6)-(3690,12)
                    *: '*' (3690,6)-(3690,7)
                    update_expression (3690,7)-(3690,12)
                      identifier: 'ap2' (3690,7)-(3690,10)
                      ++: '++' (3690,10)-(3690,12)
                  =: '=' (3690,13)-(3690,14)
                  null (3690,15)-(3690,19)
                    NULL: 'NULL' (3690,15)-(3690,19)
                ;: ';' (3690,19)-(3690,20)
              }: '}' (3691,2)-(3691,3)
            else_clause (3691,4)-(3694,3)
              else: 'else' (3691,4)-(3691,8)
              compound_statement (3691,9)-(3694,3)
                {: '{' (3691,9)-(3691,10)
                expression_statement (3692,6)-(3692,51)
                  assignment_expression (3692,6)-(3692,50)
                    identifier: 'val' (3692,6)-(3692,9)
                    =: '=' (3692,10)-(3692,11)
                    call_expression (3692,12)-(3692,50)
                      identifier: 'getkeystring' (3692,12)-(3692,24)
                      argument_list (3692,24)-(3692,50)
                        (: '(' (3692,24)-(3692,25)
                        identifier: 'val' (3692,25)-(3692,28)
                        ,: ',' (3692,28)-(3692,29)
                        pointer_expression (3692,30)-(3692,34)
                          &: '&' (3692,30)-(3692,31)
                          identifier: 'len' (3692,31)-(3692,34)
                        ,: ',' (3692,34)-(3692,35)
                        identifier: 'getkeys' (3692,36)-(3692,43)
                        ,: ',' (3692,43)-(3692,44)
                        null (3692,45)-(3692,49)
                          NULL: 'NULL' (3692,45)-(3692,49)
                        ): ')' (3692,49)-(3692,50)
                  ;: ';' (3692,50)-(3692,51)
                expression_statement (3693,6)-(3693,43)
                  assignment_expression (3693,6)-(3693,42)
                    identifier: 'val' (3693,6)-(3693,9)
                    =: '=' (3693,10)-(3693,11)
                    call_expression (3693,12)-(3693,42)
                      identifier: 'metafy' (3693,12)-(3693,18)
                      argument_list (3693,18)-(3693,42)
                        (: '(' (3693,18)-(3693,19)
                        identifier: 'val' (3693,19)-(3693,22)
                        ,: ',' (3693,22)-(3693,23)
                        identifier: 'len' (3693,24)-(3693,27)
                        ,: ',' (3693,27)-(3693,28)
                        identifier: 'META_USEHEAP' (3693,29)-(3693,41)
                        ): ')' (3693,41)-(3693,42)
                  ;: ';' (3693,42)-(3693,43)
                }: '}' (3694,2)-(3694,3)
          }: '}' (3695,5)-(3695,6)
      comment: '/*
     * Perform prompt-style modifications.
     */' (3696,5)-(3698,8)
      if_statement (3699,5)-(3740,6)
        if: 'if' (3699,5)-(3699,7)
        parenthesized_expression (3699,8)-(3699,15)
          (: '(' (3699,8)-(3699,9)
          identifier: 'presc' (3699,9)-(3699,14)
          ): ')' (3699,14)-(3699,15)
        compound_statement (3699,16)-(3740,6)
          {: '{' (3699,16)-(3699,17)
          declaration (3700,2)-(3700,54)
            primitive_type: 'int' (3700,2)-(3700,5)
            init_declarator (3700,6)-(3700,29)
              identifier: 'ops' (3700,6)-(3700,9)
              =: '=' (3700,10)-(3700,11)
              subscript_expression (3700,12)-(3700,29)
                identifier: 'opts' (3700,12)-(3700,16)
                [: '[' (3700,16)-(3700,17)
                identifier: 'PROMPTSUBST' (3700,17)-(3700,28)
                ]: ']' (3700,28)-(3700,29)
            ,: ',' (3700,29)-(3700,30)
            init_declarator (3700,31)-(3700,53)
              identifier: 'opb' (3700,31)-(3700,34)
              =: '=' (3700,35)-(3700,36)
              subscript_expression (3700,37)-(3700,53)
                identifier: 'opts' (3700,37)-(3700,41)
                [: '[' (3700,41)-(3700,42)
                identifier: 'PROMPTBANG' (3700,42)-(3700,52)
                ]: ']' (3700,52)-(3700,53)
            ;: ';' (3700,53)-(3700,54)
          declaration (3701,2)-(3701,32)
            primitive_type: 'int' (3701,2)-(3701,5)
            init_declarator (3701,6)-(3701,31)
              identifier: 'opp' (3701,6)-(3701,9)
              =: '=' (3701,10)-(3701,11)
              subscript_expression (3701,12)-(3701,31)
                identifier: 'opts' (3701,12)-(3701,16)
                [: '[' (3701,16)-(3701,17)
                identifier: 'PROMPTPERCENT' (3701,17)-(3701,30)
                ]: ']' (3701,30)-(3701,31)
            ;: ';' (3701,31)-(3701,32)
          if_statement (3703,2)-(3706,3)
            if: 'if' (3703,2)-(3703,4)
            parenthesized_expression (3703,5)-(3703,16)
              (: '(' (3703,5)-(3703,6)
              binary_expression (3703,6)-(3703,15)
                identifier: 'presc' (3703,6)-(3703,11)
                <: '<' (3703,12)-(3703,13)
                number_literal: '2' (3703,14)-(3703,15)
              ): ')' (3703,15)-(3703,16)
            compound_statement (3703,17)-(3706,3)
              {: '{' (3703,17)-(3703,18)
              expression_statement (3704,6)-(3704,30)
                assignment_expression (3704,6)-(3704,29)
                  subscript_expression (3704,6)-(3704,25)
                    identifier: 'opts' (3704,6)-(3704,10)
                    [: '[' (3704,10)-(3704,11)
                    identifier: 'PROMPTPERCENT' (3704,11)-(3704,24)
                    ]: ']' (3704,24)-(3704,25)
                  =: '=' (3704,26)-(3704,27)
                  number_literal: '1' (3704,28)-(3704,29)
                ;: ';' (3704,29)-(3704,30)
              expression_statement (3705,6)-(3705,47)
                assignment_expression (3705,6)-(3705,46)
                  subscript_expression (3705,6)-(3705,23)
                    identifier: 'opts' (3705,6)-(3705,10)
                    [: '[' (3705,10)-(3705,11)
                    identifier: 'PROMPTSUBST' (3705,11)-(3705,22)
                    ]: ']' (3705,22)-(3705,23)
                  =: '=' (3705,24)-(3705,25)
                  assignment_expression (3705,26)-(3705,46)
                    subscript_expression (3705,26)-(3705,42)
                      identifier: 'opts' (3705,26)-(3705,30)
                      [: '[' (3705,30)-(3705,31)
                      identifier: 'PROMPTBANG' (3705,31)-(3705,41)
                      ]: ']' (3705,41)-(3705,42)
                    =: '=' (3705,43)-(3705,44)
                    number_literal: '0' (3705,45)-(3705,46)
                ;: ';' (3705,46)-(3705,47)
              }: '}' (3706,2)-(3706,3)
          comment: '/*
	 * TODO:  It would be really quite nice to abstract the
	 * isarr and !isarr code into a function which gets
	 * passed a pointer to a function with the effect of
	 * the promptexpand bit.  Then we could use this for
	 * a lot of stuff and bury val/aval/isarr inside a structure
	 * which gets passed to it.
	 */' (3707,2)-(3714,5)
          if_statement (3715,2)-(3736,3)
            if: 'if' (3715,2)-(3715,4)
            parenthesized_expression (3715,5)-(3715,12)
              (: '(' (3715,5)-(3715,6)
              identifier: 'isarr' (3715,6)-(3715,11)
              ): ')' (3715,11)-(3715,12)
            compound_statement (3715,13)-(3728,3)
              {: '{' (3715,13)-(3715,14)
              declaration (3716,6)-(3716,16)
                primitive_type: 'char' (3716,6)-(3716,10)
                pointer_declarator (3716,11)-(3716,15)
                  *: '*' (3716,11)-(3716,12)
                  pointer_declarator (3716,12)-(3716,15)
                    *: '*' (3716,12)-(3716,13)
                    identifier: 'ap' (3716,13)-(3716,15)
                ;: ';' (3716,15)-(3716,16)
              if_statement (3718,6)-(3719,35)
                if: 'if' (3718,6)-(3718,8)
                parenthesized_expression (3718,9)-(3718,18)
                  (: '(' (3718,9)-(3718,10)
                  unary_expression (3718,10)-(3718,17)
                    !: '!' (3718,10)-(3718,11)
                    identifier: 'copied' (3718,11)-(3718,17)
                  ): ')' (3718,17)-(3718,18)
                expression_statement (3719,3)-(3719,35)
                  comma_expression (3719,3)-(3719,34)
                    assignment_expression (3719,3)-(3719,22)
                      identifier: 'aval' (3719,3)-(3719,7)
                      =: '=' (3719,8)-(3719,9)
                      call_expression (3719,10)-(3719,22)
                        identifier: 'arrdup' (3719,10)-(3719,16)
                        argument_list (3719,16)-(3719,22)
                          (: '(' (3719,16)-(3719,17)
                          identifier: 'aval' (3719,17)-(3719,21)
                          ): ')' (3719,21)-(3719,22)
                    ,: ',' (3719,22)-(3719,23)
                    assignment_expression (3719,24)-(3719,34)
                      identifier: 'copied' (3719,24)-(3719,30)
                      =: '=' (3719,31)-(3719,32)
                      number_literal: '1' (3719,33)-(3719,34)
                  ;: ';' (3719,34)-(3719,35)
              expression_statement (3720,6)-(3720,16)
                assignment_expression (3720,6)-(3720,15)
                  identifier: 'ap' (3720,6)-(3720,8)
                  =: '=' (3720,9)-(3720,10)
                  identifier: 'aval' (3720,11)-(3720,15)
                ;: ';' (3720,15)-(3720,16)
              for_statement (3721,6)-(3727,7)
                for: 'for' (3721,6)-(3721,9)
                (: '(' (3721,10)-(3721,11)
                ;: ';' (3721,11)-(3721,12)
                pointer_expression (3721,13)-(3721,16)
                  *: '*' (3721,13)-(3721,14)
                  identifier: 'ap' (3721,14)-(3721,16)
                ;: ';' (3721,16)-(3721,17)
                update_expression (3721,18)-(3721,22)
                  identifier: 'ap' (3721,18)-(3721,20)
                  ++: '++' (3721,20)-(3721,22)
                ): ')' (3721,22)-(3721,23)
                compound_statement (3721,24)-(3727,7)
                  {: '{' (3721,24)-(3721,25)
                  declaration (3722,3)-(3722,14)
                    primitive_type: 'char' (3722,3)-(3722,7)
                    pointer_declarator (3722,8)-(3722,13)
                      *: '*' (3722,8)-(3722,9)
                      identifier: 'tmps' (3722,9)-(3722,13)
                    ;: ';' (3722,13)-(3722,14)
                  expression_statement (3723,3)-(3723,19)
                    call_expression (3723,3)-(3723,18)
                      identifier: 'untokenize' (3723,3)-(3723,13)
                      argument_list (3723,13)-(3723,18)
                        (: '(' (3723,13)-(3723,14)
                        pointer_expression (3723,14)-(3723,17)
                          *: '*' (3723,14)-(3723,15)
                          identifier: 'ap' (3723,15)-(3723,17)
                        ): ')' (3723,17)-(3723,18)
                    ;: ';' (3723,18)-(3723,19)
                  expression_statement (3724,3)-(3724,49)
                    assignment_expression (3724,3)-(3724,48)
                      identifier: 'tmps' (3724,3)-(3724,7)
                      =: '=' (3724,8)-(3724,9)
                      call_expression (3724,10)-(3724,48)
                        identifier: 'promptexpand' (3724,10)-(3724,22)
                        argument_list (3724,22)-(3724,48)
                          (: '(' (3724,22)-(3724,23)
                          pointer_expression (3724,23)-(3724,26)
                            *: '*' (3724,23)-(3724,24)
                            identifier: 'ap' (3724,24)-(3724,26)
                          ,: ',' (3724,26)-(3724,27)
                          number_literal: '0' (3724,28)-(3724,29)
                          ,: ',' (3724,29)-(3724,30)
                          null (3724,31)-(3724,35)
                            NULL: 'NULL' (3724,31)-(3724,35)
                          ,: ',' (3724,35)-(3724,36)
                          null (3724,37)-(3724,41)
                            NULL: 'NULL' (3724,37)-(3724,41)
                          ,: ',' (3724,41)-(3724,42)
                          null (3724,43)-(3724,47)
                            NULL: 'NULL' (3724,43)-(3724,47)
                          ): ')' (3724,47)-(3724,48)
                    ;: ';' (3724,48)-(3724,49)
                  expression_statement (3725,3)-(3725,25)
                    assignment_expression (3725,3)-(3725,24)
                      pointer_expression (3725,3)-(3725,6)
                        *: '*' (3725,3)-(3725,4)
                        identifier: 'ap' (3725,4)-(3725,6)
                      =: '=' (3725,7)-(3725,8)
                      call_expression (3725,9)-(3725,24)
                        identifier: 'dupstring' (3725,9)-(3725,18)
                        argument_list (3725,18)-(3725,24)
                          (: '(' (3725,18)-(3725,19)
                          identifier: 'tmps' (3725,19)-(3725,23)
                          ): ')' (3725,23)-(3725,24)
                    ;: ';' (3725,24)-(3725,25)
                  expression_statement (3726,3)-(3726,14)
                    call_expression (3726,3)-(3726,13)
                      identifier: 'free' (3726,3)-(3726,7)
                      argument_list (3726,7)-(3726,13)
                        (: '(' (3726,7)-(3726,8)
                        identifier: 'tmps' (3726,8)-(3726,12)
                        ): ')' (3726,12)-(3726,13)
                    ;: ';' (3726,13)-(3726,14)
                  }: '}' (3727,6)-(3727,7)
              }: '}' (3728,2)-(3728,3)
            else_clause (3728,4)-(3736,3)
              else: 'else' (3728,4)-(3728,8)
              compound_statement (3728,9)-(3736,3)
                {: '{' (3728,9)-(3728,10)
                declaration (3729,6)-(3729,17)
                  primitive_type: 'char' (3729,6)-(3729,10)
                  pointer_declarator (3729,11)-(3729,16)
                    *: '*' (3729,11)-(3729,12)
                    identifier: 'tmps' (3729,12)-(3729,16)
                  ;: ';' (3729,16)-(3729,17)
                if_statement (3730,6)-(3731,36)
                  if: 'if' (3730,6)-(3730,8)
                  parenthesized_expression (3730,9)-(3730,18)
                    (: '(' (3730,9)-(3730,10)
                    unary_expression (3730,10)-(3730,17)
                      !: '!' (3730,10)-(3730,11)
                      identifier: 'copied' (3730,11)-(3730,17)
                    ): ')' (3730,17)-(3730,18)
                  expression_statement (3731,3)-(3731,36)
                    comma_expression (3731,3)-(3731,35)
                      assignment_expression (3731,3)-(3731,23)
                        identifier: 'val' (3731,3)-(3731,6)
                        =: '=' (3731,7)-(3731,8)
                        call_expression (3731,9)-(3731,23)
                          identifier: 'dupstring' (3731,9)-(3731,18)
                          argument_list (3731,18)-(3731,23)
                            (: '(' (3731,18)-(3731,19)
                            identifier: 'val' (3731,19)-(3731,22)
                            ): ')' (3731,22)-(3731,23)
                      ,: ',' (3731,23)-(3731,24)
                      assignment_expression (3731,25)-(3731,35)
                        identifier: 'copied' (3731,25)-(3731,31)
                        =: '=' (3731,32)-(3731,33)
                        number_literal: '1' (3731,34)-(3731,35)
                    ;: ';' (3731,35)-(3731,36)
                expression_statement (3732,6)-(3732,22)
                  call_expression (3732,6)-(3732,21)
                    identifier: 'untokenize' (3732,6)-(3732,16)
                    argument_list (3732,16)-(3732,21)
                      (: '(' (3732,16)-(3732,17)
                      identifier: 'val' (3732,17)-(3732,20)
                      ): ')' (3732,20)-(3732,21)
                  ;: ';' (3732,21)-(3732,22)
                expression_statement (3733,6)-(3733,52)
                  assignment_expression (3733,6)-(3733,51)
                    identifier: 'tmps' (3733,6)-(3733,10)
                    =: '=' (3733,11)-(3733,12)
                    call_expression (3733,13)-(3733,51)
                      identifier: 'promptexpand' (3733,13)-(3733,25)
                      argument_list (3733,25)-(3733,51)
                        (: '(' (3733,25)-(3733,26)
                        identifier: 'val' (3733,26)-(3733,29)
                        ,: ',' (3733,29)-(3733,30)
                        number_literal: '0' (3733,31)-(3733,32)
                        ,: ',' (3733,32)-(3733,33)
                        null (3733,34)-(3733,38)
                          NULL: 'NULL' (3733,34)-(3733,38)
                        ,: ',' (3733,38)-(3733,39)
                        null (3733,40)-(3733,44)
                          NULL: 'NULL' (3733,40)-(3733,44)
                        ,: ',' (3733,44)-(3733,45)
                        null (3733,46)-(3733,50)
                          NULL: 'NULL' (3733,46)-(3733,50)
                        ): ')' (3733,50)-(3733,51)
                  ;: ';' (3733,51)-(3733,52)
                expression_statement (3734,6)-(3734,28)
                  assignment_expression (3734,6)-(3734,27)
                    identifier: 'val' (3734,6)-(3734,9)
                    =: '=' (3734,10)-(3734,11)
                    call_expression (3734,12)-(3734,27)
                      identifier: 'dupstring' (3734,12)-(3734,21)
                      argument_list (3734,21)-(3734,27)
                        (: '(' (3734,21)-(3734,22)
                        identifier: 'tmps' (3734,22)-(3734,26)
                        ): ')' (3734,26)-(3734,27)
                  ;: ';' (3734,27)-(3734,28)
                expression_statement (3735,6)-(3735,17)
                  call_expression (3735,6)-(3735,16)
                    identifier: 'free' (3735,6)-(3735,10)
                    argument_list (3735,10)-(3735,16)
                      (: '(' (3735,10)-(3735,11)
                      identifier: 'tmps' (3735,11)-(3735,15)
                      ): ')' (3735,15)-(3735,16)
                  ;: ';' (3735,16)-(3735,17)
                }: '}' (3736,2)-(3736,3)
          expression_statement (3737,2)-(3737,26)
            assignment_expression (3737,2)-(3737,25)
              subscript_expression (3737,2)-(3737,19)
                identifier: 'opts' (3737,2)-(3737,6)
                [: '[' (3737,6)-(3737,7)
                identifier: 'PROMPTSUBST' (3737,7)-(3737,18)
                ]: ']' (3737,18)-(3737,19)
              =: '=' (3737,20)-(3737,21)
              identifier: 'ops' (3737,22)-(3737,25)
            ;: ';' (3737,25)-(3737,26)
          expression_statement (3738,2)-(3738,25)
            assignment_expression (3738,2)-(3738,24)
              subscript_expression (3738,2)-(3738,18)
                identifier: 'opts' (3738,2)-(3738,6)
                [: '[' (3738,6)-(3738,7)
                identifier: 'PROMPTBANG' (3738,7)-(3738,17)
                ]: ']' (3738,17)-(3738,18)
              =: '=' (3738,19)-(3738,20)
              identifier: 'opb' (3738,21)-(3738,24)
            ;: ';' (3738,24)-(3738,25)
          expression_statement (3739,2)-(3739,28)
            assignment_expression (3739,2)-(3739,27)
              subscript_expression (3739,2)-(3739,21)
                identifier: 'opts' (3739,2)-(3739,6)
                [: '[' (3739,6)-(3739,7)
                identifier: 'PROMPTPERCENT' (3739,7)-(3739,20)
                ]: ']' (3739,20)-(3739,21)
              =: '=' (3739,22)-(3739,23)
              identifier: 'opp' (3739,24)-(3739,27)
            ;: ';' (3739,27)-(3739,28)
          }: '}' (3740,5)-(3740,6)
      comment: '/*
     * One of the possible set of quotes to apply, depending on
     * the repetitions of the (q) flag.
     */' (3741,5)-(3744,8)
      if_statement (3745,5)-(3859,6)
        if: 'if' (3745,5)-(3745,7)
        parenthesized_expression (3745,8)-(3745,18)
          (: '(' (3745,8)-(3745,9)
          identifier: 'quotemod' (3745,9)-(3745,17)
          ): ')' (3745,17)-(3745,18)
        compound_statement (3745,19)-(3859,6)
          {: '{' (3745,19)-(3745,20)
          declaration (3746,2)-(3746,24)
            primitive_type: 'int' (3746,2)-(3746,5)
            init_declarator (3746,6)-(3746,13)
              identifier: 'pre' (3746,6)-(3746,9)
              =: '=' (3746,10)-(3746,11)
              number_literal: '0' (3746,12)-(3746,13)
            ,: ',' (3746,13)-(3746,14)
            init_declarator (3746,15)-(3746,23)
              identifier: 'post' (3746,15)-(3746,19)
              =: '=' (3746,20)-(3746,21)
              number_literal: '0' (3746,22)-(3746,23)
            ;: ';' (3746,23)-(3746,24)
          if_statement (3748,2)-(3768,3)
            if: 'if' (3748,2)-(3748,4)
            parenthesized_expression (3748,5)-(3748,19)
              (: '(' (3748,5)-(3748,6)
              binary_expression (3748,6)-(3748,18)
                identifier: 'quotemod' (3748,6)-(3748,14)
                >: '>' (3748,15)-(3748,16)
                number_literal: '0' (3748,17)-(3748,18)
              ): ')' (3748,18)-(3748,19)
            compound_statement (3748,20)-(3768,3)
              {: '{' (3748,20)-(3748,21)
              switch_statement (3749,6)-(3767,7)
                switch: 'switch' (3749,6)-(3749,12)
                parenthesized_expression (3749,13)-(3749,24)
                  (: '(' (3749,13)-(3749,14)
                  identifier: 'quotetype' (3749,14)-(3749,23)
                  ): ')' (3749,23)-(3749,24)
                compound_statement (3750,6)-(3767,7)
                  {: '{' (3750,6)-(3750,7)
                  case_statement (3751,6)-(3755,9)
                    case: 'case' (3751,6)-(3751,10)
                    identifier: 'QT_DOLLARS' (3751,11)-(3751,21)
                    :: ':' (3751,21)-(3751,22)
                    comment: '/* space for "$" */' (3752,3)-(3752,22)
                    expression_statement (3753,3)-(3753,11)
                      assignment_expression (3753,3)-(3753,10)
                        identifier: 'pre' (3753,3)-(3753,6)
                        =: '=' (3753,7)-(3753,8)
                        number_literal: '2' (3753,9)-(3753,10)
                      ;: ';' (3753,10)-(3753,11)
                    expression_statement (3754,3)-(3754,12)
                      assignment_expression (3754,3)-(3754,11)
                        identifier: 'post' (3754,3)-(3754,7)
                        =: '=' (3754,8)-(3754,9)
                        number_literal: '1' (3754,10)-(3754,11)
                      ;: ';' (3754,11)-(3754,12)
                    break_statement (3755,3)-(3755,9)
                      break: 'break' (3755,3)-(3755,8)
                      ;: ';' (3755,8)-(3755,9)
                  case_statement (3757,6)-(3757,30)
                    case: 'case' (3757,6)-(3757,10)
                    identifier: 'QT_SINGLE_OPTIONAL' (3757,11)-(3757,29)
                    :: ':' (3757,29)-(3757,30)
                  comment: '/* quotes will be added for us */' (3758,3)-(3758,36)
                  case_statement (3759,6)-(3759,24)
                    case: 'case' (3759,6)-(3759,10)
                    identifier: 'QT_BACKSLASH' (3759,11)-(3759,23)
                    :: ':' (3759,23)-(3759,24)
                  case_statement (3760,6)-(3762,9)
                    case: 'case' (3760,6)-(3760,10)
                    identifier: 'QT_BACKSLASH_PATTERN' (3760,11)-(3760,31)
                    :: ':' (3760,31)-(3760,32)
                    comment: '/* no quotes */' (3761,3)-(3761,18)
                    break_statement (3762,3)-(3762,9)
                      break: 'break' (3762,3)-(3762,8)
                      ;: ';' (3762,8)-(3762,9)
                  case_statement (3764,6)-(3766,9)
                    default: 'default' (3764,6)-(3764,13)
                    :: ':' (3764,13)-(3764,14)
                    expression_statement (3765,3)-(3765,18)
                      assignment_expression (3765,3)-(3765,17)
                        identifier: 'pre' (3765,3)-(3765,6)
                        =: '=' (3765,7)-(3765,8)
                        assignment_expression (3765,9)-(3765,17)
                          identifier: 'post' (3765,9)-(3765,13)
                          =: '=' (3765,14)-(3765,15)
                          number_literal: '1' (3765,16)-(3765,17)
                      ;: ';' (3765,17)-(3765,18)
                    break_statement (3766,3)-(3766,9)
                      break: 'break' (3766,3)-(3766,8)
                      ;: ';' (3766,8)-(3766,9)
                  }: '}' (3767,6)-(3767,7)
              }: '}' (3768,2)-(3768,3)
          if_statement (3769,2)-(3858,3)
            if: 'if' (3769,2)-(3769,4)
            parenthesized_expression (3769,5)-(3769,12)
              (: '(' (3769,5)-(3769,6)
              identifier: 'isarr' (3769,6)-(3769,11)
              ): ')' (3769,11)-(3769,12)
            compound_statement (3769,13)-(3819,3)
              {: '{' (3769,13)-(3769,14)
              declaration (3770,6)-(3770,16)
                primitive_type: 'char' (3770,6)-(3770,10)
                pointer_declarator (3770,11)-(3770,15)
                  *: '*' (3770,11)-(3770,12)
                  pointer_declarator (3770,12)-(3770,15)
                    *: '*' (3770,12)-(3770,13)
                    identifier: 'ap' (3770,13)-(3770,15)
                ;: ';' (3770,15)-(3770,16)
              if_statement (3772,6)-(3773,35)
                if: 'if' (3772,6)-(3772,8)
                parenthesized_expression (3772,9)-(3772,18)
                  (: '(' (3772,9)-(3772,10)
                  unary_expression (3772,10)-(3772,17)
                    !: '!' (3772,10)-(3772,11)
                    identifier: 'copied' (3772,11)-(3772,17)
                  ): ')' (3772,17)-(3772,18)
                expression_statement (3773,3)-(3773,35)
                  comma_expression (3773,3)-(3773,34)
                    assignment_expression (3773,3)-(3773,22)
                      identifier: 'aval' (3773,3)-(3773,7)
                      =: '=' (3773,8)-(3773,9)
                      call_expression (3773,10)-(3773,22)
                        identifier: 'arrdup' (3773,10)-(3773,16)
                        argument_list (3773,16)-(3773,22)
                          (: '(' (3773,16)-(3773,17)
                          identifier: 'aval' (3773,17)-(3773,21)
                          ): ')' (3773,21)-(3773,22)
                    ,: ',' (3773,22)-(3773,23)
                    assignment_expression (3773,24)-(3773,34)
                      identifier: 'copied' (3773,24)-(3773,30)
                      =: '=' (3773,31)-(3773,32)
                      number_literal: '1' (3773,33)-(3773,34)
                  ;: ';' (3773,34)-(3773,35)
              expression_statement (3774,6)-(3774,16)
                assignment_expression (3774,6)-(3774,15)
                  identifier: 'ap' (3774,6)-(3774,8)
                  =: '=' (3774,9)-(3774,10)
                  identifier: 'aval' (3774,11)-(3774,15)
                ;: ';' (3774,15)-(3774,16)
              if_statement (3776,6)-(3818,7)
                if: 'if' (3776,6)-(3776,8)
                parenthesized_expression (3776,9)-(3776,23)
                  (: '(' (3776,9)-(3776,10)
                  binary_expression (3776,10)-(3776,22)
                    identifier: 'quotemod' (3776,10)-(3776,18)
                    >: '>' (3776,19)-(3776,20)
                    number_literal: '0' (3776,21)-(3776,22)
                  ): ')' (3776,22)-(3776,23)
                compound_statement (3776,24)-(3799,7)
                  {: '{' (3776,24)-(3776,25)
                  if_statement (3777,3)-(3798,50)
                    if: 'if' (3777,3)-(3777,5)
                    parenthesized_expression (3777,6)-(3777,35)
                      (: '(' (3777,6)-(3777,7)
                      binary_expression (3777,7)-(3777,34)
                        identifier: 'quotetype' (3777,7)-(3777,16)
                        ==: '==' (3777,17)-(3777,19)
                        identifier: 'QT_QUOTEDZPUTS' (3777,20)-(3777,34)
                      ): ')' (3777,34)-(3777,35)
                    compound_statement (3777,36)-(3780,4)
                      {: '{' (3777,36)-(3777,37)
                      for_statement (3778,7)-(3779,33)
                        for: 'for' (3778,7)-(3778,10)
                        (: '(' (3778,11)-(3778,12)
                        ;: ';' (3778,12)-(3778,13)
                        pointer_expression (3778,14)-(3778,17)
                          *: '*' (3778,14)-(3778,15)
                          identifier: 'ap' (3778,15)-(3778,17)
                        ;: ';' (3778,17)-(3778,18)
                        update_expression (3778,19)-(3778,23)
                          identifier: 'ap' (3778,19)-(3778,21)
                          ++: '++' (3778,21)-(3778,23)
                        ): ')' (3778,23)-(3778,24)
                        expression_statement (3779,4)-(3779,33)
                          assignment_expression (3779,4)-(3779,32)
                            pointer_expression (3779,4)-(3779,7)
                              *: '*' (3779,4)-(3779,5)
                              identifier: 'ap' (3779,5)-(3779,7)
                            =: '=' (3779,8)-(3779,9)
                            call_expression (3779,10)-(3779,32)
                              identifier: 'quotedzputs' (3779,10)-(3779,21)
                              argument_list (3779,21)-(3779,32)
                                (: '(' (3779,21)-(3779,22)
                                pointer_expression (3779,22)-(3779,25)
                                  *: '*' (3779,22)-(3779,23)
                                  identifier: 'ap' (3779,23)-(3779,25)
                                ,: ',' (3779,25)-(3779,26)
                                null (3779,27)-(3779,31)
                                  NULL: 'NULL' (3779,27)-(3779,31)
                                ): ')' (3779,31)-(3779,32)
                          ;: ';' (3779,32)-(3779,33)
                      }: '}' (3780,3)-(3780,4)
                    else_clause (3780,5)-(3798,50)
                      else: 'else' (3780,5)-(3780,9)
                      if_statement (3780,10)-(3798,50)
                        if: 'if' (3780,10)-(3780,12)
                        parenthesized_expression (3780,13)-(3780,39)
                          (: '(' (3780,13)-(3780,14)
                          binary_expression (3780,14)-(3780,38)
                            identifier: 'quotetype' (3780,14)-(3780,23)
                            >: '>' (3780,24)-(3780,25)
                            identifier: 'QT_BACKSLASH' (3780,26)-(3780,38)
                          ): ')' (3780,38)-(3780,39)
                        compound_statement (3780,40)-(3796,4)
                          {: '{' (3780,40)-(3780,41)
                          declaration (3781,7)-(3781,14)
                            primitive_type: 'int' (3781,7)-(3781,10)
                            identifier: 'sl' (3781,11)-(3781,13)
                            ;: ';' (3781,13)-(3781,14)
                          declaration (3782,7)-(3782,17)
                            primitive_type: 'char' (3782,7)-(3782,11)
                            pointer_declarator (3782,12)-(3782,16)
                              *: '*' (3782,12)-(3782,13)
                              identifier: 'tmp' (3782,13)-(3782,16)
                            ;: ';' (3782,16)-(3782,17)
                          for_statement (3784,7)-(3795,8)
                            for: 'for' (3784,7)-(3784,10)
                            (: '(' (3784,11)-(3784,12)
                            ;: ';' (3784,12)-(3784,13)
                            pointer_expression (3784,14)-(3784,17)
                              *: '*' (3784,14)-(3784,15)
                              identifier: 'ap' (3784,15)-(3784,17)
                            ;: ';' (3784,17)-(3784,18)
                            update_expression (3784,19)-(3784,23)
                              identifier: 'ap' (3784,19)-(3784,21)
                              ++: '++' (3784,21)-(3784,23)
                            ): ')' (3784,23)-(3784,24)
                            compound_statement (3784,25)-(3795,8)
                              {: '{' (3784,25)-(3784,26)
                              expression_statement (3785,4)-(3785,38)
                                assignment_expression (3785,4)-(3785,37)
                                  identifier: 'tmp' (3785,4)-(3785,7)
                                  =: '=' (3785,8)-(3785,9)
                                  call_expression (3785,10)-(3785,37)
                                    identifier: 'quotestring' (3785,10)-(3785,21)
                                    argument_list (3785,21)-(3785,37)
                                      (: '(' (3785,21)-(3785,22)
                                      pointer_expression (3785,22)-(3785,25)
                                        *: '*' (3785,22)-(3785,23)
                                        identifier: 'ap' (3785,23)-(3785,25)
                                      ,: ',' (3785,25)-(3785,26)
                                      identifier: 'quotetype' (3785,27)-(3785,36)
                                      ): ')' (3785,36)-(3785,37)
                                ;: ';' (3785,37)-(3785,38)
                              expression_statement (3786,4)-(3786,21)
                                assignment_expression (3786,4)-(3786,20)
                                  identifier: 'sl' (3786,4)-(3786,6)
                                  =: '=' (3786,7)-(3786,8)
                                  call_expression (3786,9)-(3786,20)
                                    identifier: 'strlen' (3786,9)-(3786,15)
                                    argument_list (3786,15)-(3786,20)
                                      (: '(' (3786,15)-(3786,16)
                                      identifier: 'tmp' (3786,16)-(3786,19)
                                      ): ')' (3786,19)-(3786,20)
                                ;: ';' (3786,20)-(3786,21)
                              expression_statement (3787,4)-(3787,48)
                                assignment_expression (3787,4)-(3787,47)
                                  pointer_expression (3787,4)-(3787,7)
                                    *: '*' (3787,4)-(3787,5)
                                    identifier: 'ap' (3787,5)-(3787,7)
                                  =: '=' (3787,8)-(3787,9)
                                  cast_expression (3787,10)-(3787,47)
                                    (: '(' (3787,10)-(3787,11)
                                    type_descriptor (3787,11)-(3787,17)
                                      primitive_type: 'char' (3787,11)-(3787,15)
                                      abstract_pointer_declarator (3787,16)-(3787,17)
                                        *: '*' (3787,16)-(3787,17)
                                    ): ')' (3787,17)-(3787,18)
                                    call_expression (3787,19)-(3787,47)
                                      identifier: 'zhalloc' (3787,19)-(3787,26)
                                      argument_list (3787,26)-(3787,47)
                                        (: '(' (3787,26)-(3787,27)
                                        binary_expression (3787,27)-(3787,46)
                                          binary_expression (3787,27)-(3787,42)
                                            binary_expression (3787,27)-(3787,35)
                                              identifier: 'pre' (3787,27)-(3787,30)
                                              +: '+' (3787,31)-(3787,32)
                                              identifier: 'sl' (3787,33)-(3787,35)
                                            +: '+' (3787,36)-(3787,37)
                                            identifier: 'post' (3787,38)-(3787,42)
                                          +: '+' (3787,43)-(3787,44)
                                          number_literal: '1' (3787,45)-(3787,46)
                                        ): ')' (3787,46)-(3787,47)
                                ;: ';' (3787,47)-(3787,48)
                              expression_statement (3788,4)-(3788,29)
                                call_expression (3788,4)-(3788,28)
                                  identifier: 'strcpy' (3788,4)-(3788,10)
                                  argument_list (3788,10)-(3788,28)
                                    (: '(' (3788,10)-(3788,11)
                                    binary_expression (3788,11)-(3788,22)
                                      parenthesized_expression (3788,11)-(3788,16)
                                        (: '(' (3788,11)-(3788,12)
                                        pointer_expression (3788,12)-(3788,15)
                                          *: '*' (3788,12)-(3788,13)
                                          identifier: 'ap' (3788,13)-(3788,15)
                                        ): ')' (3788,15)-(3788,16)
                                      +: '+' (3788,17)-(3788,18)
                                      identifier: 'pre' (3788,19)-(3788,22)
                                    ,: ',' (3788,22)-(3788,23)
                                    identifier: 'tmp' (3788,24)-(3788,27)
                                    ): ')' (3788,27)-(3788,28)
                                ;: ';' (3788,28)-(3788,29)
                              if_statement (3789,4)-(3791,43)
                                if: 'if' (3789,4)-(3789,6)
                                parenthesized_expression (3789,7)-(3789,12)
                                  (: '(' (3789,7)-(3789,8)
                                  identifier: 'pre' (3789,8)-(3789,11)
                                  ): ')' (3789,11)-(3789,12)
                                expression_statement (3790,8)-(3791,43)
                                  assignment_expression (3790,8)-(3791,42)
                                    subscript_expression (3790,8)-(3790,22)
                                      subscript_expression (3790,8)-(3790,13)
                                        identifier: 'ap' (3790,8)-(3790,10)
                                        [: '[' (3790,10)-(3790,11)
                                        number_literal: '0' (3790,11)-(3790,12)
                                        ]: ']' (3790,12)-(3790,13)
                                      [: '[' (3790,13)-(3790,14)
                                      binary_expression (3790,14)-(3790,21)
                                        identifier: 'pre' (3790,14)-(3790,17)
                                        -: '-' (3790,18)-(3790,19)
                                        number_literal: '1' (3790,20)-(3790,21)
                                      ]: ']' (3790,21)-(3790,22)
                                    =: '=' (3790,23)-(3790,24)
                                    assignment_expression (3790,25)-(3791,42)
                                      subscript_expression (3790,25)-(3790,40)
                                        subscript_expression (3790,25)-(3790,30)
                                          identifier: 'ap' (3790,25)-(3790,27)
                                          [: '[' (3790,27)-(3790,28)
                                          number_literal: '0' (3790,28)-(3790,29)
                                          ]: ']' (3790,29)-(3790,30)
                                        [: '[' (3790,30)-(3790,31)
                                        binary_expression (3790,31)-(3790,39)
                                          identifier: 'pre' (3790,31)-(3790,34)
                                          +: '+' (3790,35)-(3790,36)
                                          identifier: 'sl' (3790,37)-(3790,39)
                                        ]: ']' (3790,39)-(3790,40)
                                      =: '=' (3790,41)-(3790,42)
                                      parenthesized_expression (3791,5)-(3791,42)
                                        (: '(' (3791,5)-(3791,6)
                                        conditional_expression (3791,6)-(3791,41)
                                          binary_expression (3791,6)-(3791,28)
                                            identifier: 'quotetype' (3791,6)-(3791,15)
                                            !=: '!=' (3791,16)-(3791,18)
                                            identifier: 'QT_DOUBLE' (3791,19)-(3791,28)
                                          ?: '?' (3791,29)-(3791,30)
                                          char_literal (3791,31)-(3791,35)
                                            ': ''' (3791,31)-(3791,32)
                                            escape_sequence: '\'' (3791,32)-(3791,34)
                                            ': ''' (3791,34)-(3791,35)
                                          :: ':' (3791,36)-(3791,37)
                                          char_literal (3791,38)-(3791,41)
                                            ': ''' (3791,38)-(3791,39)
                                            character: '"' (3791,39)-(3791,40)
                                            ': ''' (3791,40)-(3791,41)
                                        ): ')' (3791,41)-(3791,42)
                                  ;: ';' (3791,42)-(3791,43)
                              expression_statement (3792,4)-(3792,34)
                                assignment_expression (3792,4)-(3792,33)
                                  subscript_expression (3792,4)-(3792,26)
                                    subscript_expression (3792,4)-(3792,9)
                                      identifier: 'ap' (3792,4)-(3792,6)
                                      [: '[' (3792,6)-(3792,7)
                                      number_literal: '0' (3792,7)-(3792,8)
                                      ]: ']' (3792,8)-(3792,9)
                                    [: '[' (3792,9)-(3792,10)
                                    binary_expression (3792,10)-(3792,25)
                                      binary_expression (3792,10)-(3792,18)
                                        identifier: 'pre' (3792,10)-(3792,13)
                                        +: '+' (3792,14)-(3792,15)
                                        identifier: 'sl' (3792,16)-(3792,18)
                                      +: '+' (3792,19)-(3792,20)
                                      identifier: 'post' (3792,21)-(3792,25)
                                    ]: ']' (3792,25)-(3792,26)
                                  =: '=' (3792,27)-(3792,28)
                                  char_literal (3792,29)-(3792,33)
                                    ': ''' (3792,29)-(3792,30)
                                    escape_sequence: '\0' (3792,30)-(3792,32)
                                    ': ''' (3792,32)-(3792,33)
                                ;: ';' (3792,33)-(3792,34)
                              if_statement (3793,4)-(3794,21)
                                if: 'if' (3793,4)-(3793,6)
                                parenthesized_expression (3793,7)-(3793,32)
                                  (: '(' (3793,7)-(3793,8)
                                  binary_expression (3793,8)-(3793,31)
                                    identifier: 'quotetype' (3793,8)-(3793,17)
                                    ==: '==' (3793,18)-(3793,20)
                                    identifier: 'QT_DOLLARS' (3793,21)-(3793,31)
                                  ): ')' (3793,31)-(3793,32)
                                expression_statement (3794,6)-(3794,21)
                                  assignment_expression (3794,6)-(3794,20)
                                    subscript_expression (3794,6)-(3794,14)
                                      subscript_expression (3794,6)-(3794,11)
                                        identifier: 'ap' (3794,6)-(3794,8)
                                        [: '[' (3794,8)-(3794,9)
                                        number_literal: '0' (3794,9)-(3794,10)
                                        ]: ']' (3794,10)-(3794,11)
                                      [: '[' (3794,11)-(3794,12)
                                      number_literal: '0' (3794,12)-(3794,13)
                                      ]: ']' (3794,13)-(3794,14)
                                    =: '=' (3794,15)-(3794,16)
                                    char_literal (3794,17)-(3794,20)
                                      ': ''' (3794,17)-(3794,18)
                                      character: '$' (3794,18)-(3794,19)
                                      ': ''' (3794,19)-(3794,20)
                                  ;: ';' (3794,20)-(3794,21)
                              }: '}' (3795,7)-(3795,8)
                          }: '}' (3796,3)-(3796,4)
                        else_clause (3796,5)-(3798,50)
                          else: 'else' (3796,5)-(3796,9)
                          for_statement (3797,7)-(3798,50)
                            for: 'for' (3797,7)-(3797,10)
                            (: '(' (3797,11)-(3797,12)
                            ;: ';' (3797,12)-(3797,13)
                            pointer_expression (3797,14)-(3797,17)
                              *: '*' (3797,14)-(3797,15)
                              identifier: 'ap' (3797,15)-(3797,17)
                            ;: ';' (3797,17)-(3797,18)
                            update_expression (3797,19)-(3797,23)
                              identifier: 'ap' (3797,19)-(3797,21)
                              ++: '++' (3797,21)-(3797,23)
                            ): ')' (3797,23)-(3797,24)
                            expression_statement (3798,4)-(3798,50)
                              assignment_expression (3798,4)-(3798,49)
                                pointer_expression (3798,4)-(3798,7)
                                  *: '*' (3798,4)-(3798,5)
                                  identifier: 'ap' (3798,5)-(3798,7)
                                =: '=' (3798,8)-(3798,9)
                                call_expression (3798,10)-(3798,49)
                                  identifier: 'quotestring' (3798,10)-(3798,21)
                                  argument_list (3798,21)-(3798,49)
                                    (: '(' (3798,21)-(3798,22)
                                    pointer_expression (3798,22)-(3798,25)
                                      *: '*' (3798,22)-(3798,23)
                                      identifier: 'ap' (3798,23)-(3798,25)
                                    ,: ',' (3798,25)-(3798,26)
                                    identifier: 'QT_BACKSLASH_SHOWNULL' (3798,27)-(3798,48)
                                    ): ')' (3798,48)-(3798,49)
                              ;: ';' (3798,49)-(3798,50)
                  }: '}' (3799,6)-(3799,7)
                else_clause (3799,8)-(3818,7)
                  else: 'else' (3799,8)-(3799,12)
                  compound_statement (3799,13)-(3818,7)
                    {: '{' (3799,13)-(3799,14)
                    declaration (3800,3)-(3800,47)
                      primitive_type: 'int' (3800,3)-(3800,6)
                      init_declarator (3800,7)-(3800,19)
                        identifier: 'one' (3800,7)-(3800,10)
                        =: '=' (3800,11)-(3800,12)
                        identifier: 'noerrs' (3800,13)-(3800,19)
                      ,: ',' (3800,19)-(3800,20)
                      init_declarator (3800,21)-(3800,34)
                        identifier: 'oef' (3800,21)-(3800,24)
                        =: '=' (3800,25)-(3800,26)
                        identifier: 'errflag' (3800,27)-(3800,34)
                      ,: ',' (3800,34)-(3800,35)
                      init_declarator (3800,36)-(3800,46)
                        identifier: 'haserr' (3800,36)-(3800,42)
                        =: '=' (3800,43)-(3800,44)
                        number_literal: '0' (3800,45)-(3800,46)
                      ;: ';' (3800,46)-(3800,47)
                    if_statement (3802,3)-(3803,18)
                      if: 'if' (3802,3)-(3802,5)
                      parenthesized_expression (3802,6)-(3802,17)
                        (: '(' (3802,6)-(3802,7)
                        unary_expression (3802,7)-(3802,16)
                          !: '!' (3802,7)-(3802,8)
                          identifier: 'quoteerr' (3802,8)-(3802,16)
                        ): ')' (3802,16)-(3802,17)
                      expression_statement (3803,7)-(3803,18)
                        assignment_expression (3803,7)-(3803,17)
                          identifier: 'noerrs' (3803,7)-(3803,13)
                          =: '=' (3803,14)-(3803,15)
                          number_literal: '1' (3803,16)-(3803,17)
                        ;: ';' (3803,17)-(3803,18)
                    for_statement (3804,3)-(3808,4)
                      for: 'for' (3804,3)-(3804,6)
                      (: '(' (3804,7)-(3804,8)
                      ;: ';' (3804,8)-(3804,9)
                      pointer_expression (3804,10)-(3804,13)
                        *: '*' (3804,10)-(3804,11)
                        identifier: 'ap' (3804,11)-(3804,13)
                      ;: ';' (3804,13)-(3804,14)
                      update_expression (3804,15)-(3804,19)
                        identifier: 'ap' (3804,15)-(3804,17)
                        ++: '++' (3804,17)-(3804,19)
                      ): ')' (3804,19)-(3804,20)
                      compound_statement (3804,21)-(3808,4)
                        {: '{' (3804,21)-(3804,22)
                        expression_statement (3805,7)-(3805,41)
                          assignment_expression (3805,7)-(3805,40)
                            identifier: 'haserr' (3805,7)-(3805,13)
                            |=: '|=' (3805,14)-(3805,16)
                            call_expression (3805,17)-(3805,40)
                              identifier: 'parse_subst_string' (3805,17)-(3805,35)
                              argument_list (3805,35)-(3805,40)
                                (: '(' (3805,35)-(3805,36)
                                pointer_expression (3805,36)-(3805,39)
                                  *: '*' (3805,36)-(3805,37)
                                  identifier: 'ap' (3805,37)-(3805,39)
                                ): ')' (3805,39)-(3805,40)
                          ;: ';' (3805,40)-(3805,41)
                        expression_statement (3806,7)-(3806,23)
                          call_expression (3806,7)-(3806,22)
                            identifier: 'remnulargs' (3806,7)-(3806,17)
                            argument_list (3806,17)-(3806,22)
                              (: '(' (3806,17)-(3806,18)
                              pointer_expression (3806,18)-(3806,21)
                                *: '*' (3806,18)-(3806,19)
                                identifier: 'ap' (3806,19)-(3806,21)
                              ): ')' (3806,21)-(3806,22)
                          ;: ';' (3806,22)-(3806,23)
                        expression_statement (3807,7)-(3807,23)
                          call_expression (3807,7)-(3807,22)
                            identifier: 'untokenize' (3807,7)-(3807,17)
                            argument_list (3807,17)-(3807,22)
                              (: '(' (3807,17)-(3807,18)
                              pointer_expression (3807,18)-(3807,21)
                                *: '*' (3807,18)-(3807,19)
                                identifier: 'ap' (3807,19)-(3807,21)
                              ): ')' (3807,21)-(3807,22)
                          ;: ';' (3807,22)-(3807,23)
                        }: '}' (3808,3)-(3808,4)
                    expression_statement (3809,3)-(3809,16)
                      assignment_expression (3809,3)-(3809,15)
                        identifier: 'noerrs' (3809,3)-(3809,9)
                        =: '=' (3809,10)-(3809,11)
                        identifier: 'one' (3809,12)-(3809,15)
                      ;: ';' (3809,15)-(3809,16)
                    if_statement (3810,3)-(3817,4)
                      if: 'if' (3810,3)-(3810,5)
                      parenthesized_expression (3810,6)-(3810,17)
                        (: '(' (3810,6)-(3810,7)
                        unary_expression (3810,7)-(3810,16)
                          !: '!' (3810,7)-(3810,8)
                          identifier: 'quoteerr' (3810,8)-(3810,16)
                        ): ')' (3810,16)-(3810,17)
                      compound_statement (3810,18)-(3813,4)
                        {: '{' (3810,18)-(3810,19)
                        comment: '/* Retain any user interrupt error status */' (3811,7)-(3811,51)
                        expression_statement (3812,7)-(3812,47)
                          assignment_expression (3812,7)-(3812,46)
                            identifier: 'errflag' (3812,7)-(3812,14)
                            =: '=' (3812,15)-(3812,16)
                            binary_expression (3812,17)-(3812,46)
                              identifier: 'oef' (3812,17)-(3812,20)
                              |: '|' (3812,21)-(3812,22)
                              parenthesized_expression (3812,23)-(3812,46)
                                (: '(' (3812,23)-(3812,24)
                                binary_expression (3812,24)-(3812,45)
                                  identifier: 'errflag' (3812,24)-(3812,31)
                                  &: '&' (3812,32)-(3812,33)
                                  identifier: 'ERRFLAG_INT' (3812,34)-(3812,45)
                                ): ')' (3812,45)-(3812,46)
                          ;: ';' (3812,46)-(3812,47)
                        }: '}' (3813,3)-(3813,4)
                      else_clause (3814,3)-(3817,4)
                        else: 'else' (3814,3)-(3814,7)
                        if_statement (3814,8)-(3817,4)
                          if: 'if' (3814,8)-(3814,10)
                          parenthesized_expression (3814,11)-(3814,30)
                            (: '(' (3814,11)-(3814,12)
                            binary_expression (3814,12)-(3814,29)
                              identifier: 'haserr' (3814,12)-(3814,18)
                              ||: '||' (3814,19)-(3814,21)
                              identifier: 'errflag' (3814,22)-(3814,29)
                            ): ')' (3814,29)-(3814,30)
                          compound_statement (3814,31)-(3817,4)
                            {: '{' (3814,31)-(3814,32)
                            expression_statement (3815,7)-(3815,46)
                              call_expression (3815,7)-(3815,45)
                                identifier: 'zerr' (3815,7)-(3815,11)
                                argument_list (3815,11)-(3815,45)
                                  (: '(' (3815,11)-(3815,12)
                                  string_literal (3815,12)-(3815,44)
                                    ": '"' (3815,12)-(3815,13)
                                    string_content: 'parse error in parameter value' (3815,13)-(3815,43)
                                    ": '"' (3815,43)-(3815,44)
                                  ): ')' (3815,44)-(3815,45)
                              ;: ';' (3815,45)-(3815,46)
                            return_statement (3816,7)-(3816,19)
                              return: 'return' (3816,7)-(3816,13)
                              null (3816,14)-(3816,18)
                                NULL: 'NULL' (3816,14)-(3816,18)
                              ;: ';' (3816,18)-(3816,19)
                            }: '}' (3817,3)-(3817,4)
                    }: '}' (3818,6)-(3818,7)
              }: '}' (3819,2)-(3819,3)
            else_clause (3819,4)-(3858,3)
              else: 'else' (3819,4)-(3819,8)
              compound_statement (3819,9)-(3858,3)
                {: '{' (3819,9)-(3819,10)
                if_statement (3820,6)-(3821,36)
                  if: 'if' (3820,6)-(3820,8)
                  parenthesized_expression (3820,9)-(3820,18)
                    (: '(' (3820,9)-(3820,10)
                    unary_expression (3820,10)-(3820,17)
                      !: '!' (3820,10)-(3820,11)
                      identifier: 'copied' (3820,11)-(3820,17)
                    ): ')' (3820,17)-(3820,18)
                  expression_statement (3821,3)-(3821,36)
                    comma_expression (3821,3)-(3821,35)
                      assignment_expression (3821,3)-(3821,23)
                        identifier: 'val' (3821,3)-(3821,6)
                        =: '=' (3821,7)-(3821,8)
                        call_expression (3821,9)-(3821,23)
                          identifier: 'dupstring' (3821,9)-(3821,18)
                          argument_list (3821,18)-(3821,23)
                            (: '(' (3821,18)-(3821,19)
                            identifier: 'val' (3821,19)-(3821,22)
                            ): ')' (3821,22)-(3821,23)
                      ,: ',' (3821,23)-(3821,24)
                      assignment_expression (3821,25)-(3821,35)
                        identifier: 'copied' (3821,25)-(3821,31)
                        =: '=' (3821,32)-(3821,33)
                        number_literal: '1' (3821,34)-(3821,35)
                    ;: ';' (3821,35)-(3821,36)
                if_statement (3822,6)-(3857,7)
                  if: 'if' (3822,6)-(3822,8)
                  parenthesized_expression (3822,9)-(3822,23)
                    (: '(' (3822,9)-(3822,10)
                    binary_expression (3822,10)-(3822,22)
                      identifier: 'quotemod' (3822,10)-(3822,18)
                      >: '>' (3822,19)-(3822,20)
                      number_literal: '0' (3822,21)-(3822,22)
                    ): ')' (3822,22)-(3822,23)
                  compound_statement (3822,24)-(3840,7)
                    {: '{' (3822,24)-(3822,25)
                    if_statement (3823,3)-(3839,53)
                      if: 'if' (3823,3)-(3823,5)
                      parenthesized_expression (3823,6)-(3823,35)
                        (: '(' (3823,6)-(3823,7)
                        binary_expression (3823,7)-(3823,34)
                          identifier: 'quotetype' (3823,7)-(3823,16)
                          ==: '==' (3823,17)-(3823,19)
                          identifier: 'QT_QUOTEDZPUTS' (3823,20)-(3823,34)
                        ): ')' (3823,34)-(3823,35)
                      compound_statement (3823,36)-(3825,4)
                        {: '{' (3823,36)-(3823,37)
                        expression_statement (3824,7)-(3824,36)
                          assignment_expression (3824,7)-(3824,35)
                            identifier: 'val' (3824,7)-(3824,10)
                            =: '=' (3824,11)-(3824,12)
                            call_expression (3824,13)-(3824,35)
                              identifier: 'quotedzputs' (3824,13)-(3824,24)
                              argument_list (3824,24)-(3824,35)
                                (: '(' (3824,24)-(3824,25)
                                identifier: 'val' (3824,25)-(3824,28)
                                ,: ',' (3824,28)-(3824,29)
                                null (3824,30)-(3824,34)
                                  NULL: 'NULL' (3824,30)-(3824,34)
                                ): ')' (3824,34)-(3824,35)
                          ;: ';' (3824,35)-(3824,36)
                        }: '}' (3825,3)-(3825,4)
                      else_clause (3825,5)-(3839,53)
                        else: 'else' (3825,5)-(3825,9)
                        if_statement (3825,10)-(3839,53)
                          if: 'if' (3825,10)-(3825,12)
                          parenthesized_expression (3825,13)-(3825,39)
                            (: '(' (3825,13)-(3825,14)
                            binary_expression (3825,14)-(3825,38)
                              identifier: 'quotetype' (3825,14)-(3825,23)
                              >: '>' (3825,24)-(3825,25)
                              identifier: 'QT_BACKSLASH' (3825,26)-(3825,38)
                            ): ')' (3825,38)-(3825,39)
                          compound_statement (3825,40)-(3838,4)
                            {: '{' (3825,40)-(3825,41)
                            declaration (3826,7)-(3826,14)
                              primitive_type: 'int' (3826,7)-(3826,10)
                              identifier: 'sl' (3826,11)-(3826,13)
                              ;: ';' (3826,13)-(3826,14)
                            declaration (3827,7)-(3827,17)
                              primitive_type: 'char' (3827,7)-(3827,11)
                              pointer_declarator (3827,12)-(3827,16)
                                *: '*' (3827,12)-(3827,13)
                                identifier: 'tmp' (3827,13)-(3827,16)
                              ;: ';' (3827,16)-(3827,17)
                            expression_statement (3828,7)-(3828,41)
                              assignment_expression (3828,7)-(3828,40)
                                identifier: 'tmp' (3828,7)-(3828,10)
                                =: '=' (3828,11)-(3828,12)
                                call_expression (3828,13)-(3828,40)
                                  identifier: 'quotestring' (3828,13)-(3828,24)
                                  argument_list (3828,24)-(3828,40)
                                    (: '(' (3828,24)-(3828,25)
                                    identifier: 'val' (3828,25)-(3828,28)
                                    ,: ',' (3828,28)-(3828,29)
                                    identifier: 'quotetype' (3828,30)-(3828,39)
                                    ): ')' (3828,39)-(3828,40)
                              ;: ';' (3828,40)-(3828,41)
                            expression_statement (3829,7)-(3829,24)
                              assignment_expression (3829,7)-(3829,23)
                                identifier: 'sl' (3829,7)-(3829,9)
                                =: '=' (3829,10)-(3829,11)
                                call_expression (3829,12)-(3829,23)
                                  identifier: 'strlen' (3829,12)-(3829,18)
                                  argument_list (3829,18)-(3829,23)
                                    (: '(' (3829,18)-(3829,19)
                                    identifier: 'tmp' (3829,19)-(3829,22)
                                    ): ')' (3829,22)-(3829,23)
                              ;: ';' (3829,23)-(3829,24)
                            expression_statement (3830,7)-(3830,51)
                              assignment_expression (3830,7)-(3830,50)
                                identifier: 'val' (3830,7)-(3830,10)
                                =: '=' (3830,11)-(3830,12)
                                cast_expression (3830,13)-(3830,50)
                                  (: '(' (3830,13)-(3830,14)
                                  type_descriptor (3830,14)-(3830,20)
                                    primitive_type: 'char' (3830,14)-(3830,18)
                                    abstract_pointer_declarator (3830,19)-(3830,20)
                                      *: '*' (3830,19)-(3830,20)
                                  ): ')' (3830,20)-(3830,21)
                                  call_expression (3830,22)-(3830,50)
                                    identifier: 'zhalloc' (3830,22)-(3830,29)
                                    argument_list (3830,29)-(3830,50)
                                      (: '(' (3830,29)-(3830,30)
                                      binary_expression (3830,30)-(3830,49)
                                        binary_expression (3830,30)-(3830,45)
                                          binary_expression (3830,30)-(3830,38)
                                            identifier: 'pre' (3830,30)-(3830,33)
                                            +: '+' (3830,34)-(3830,35)
                                            identifier: 'sl' (3830,36)-(3830,38)
                                          +: '+' (3830,39)-(3830,40)
                                          identifier: 'post' (3830,41)-(3830,45)
                                        +: '+' (3830,46)-(3830,47)
                                        number_literal: '1' (3830,48)-(3830,49)
                                      ): ')' (3830,49)-(3830,50)
                              ;: ';' (3830,50)-(3830,51)
                            expression_statement (3831,7)-(3831,30)
                              call_expression (3831,7)-(3831,29)
                                identifier: 'strcpy' (3831,7)-(3831,13)
                                argument_list (3831,13)-(3831,29)
                                  (: '(' (3831,13)-(3831,14)
                                  binary_expression (3831,14)-(3831,23)
                                    identifier: 'val' (3831,14)-(3831,17)
                                    +: '+' (3831,18)-(3831,19)
                                    identifier: 'pre' (3831,20)-(3831,23)
                                  ,: ',' (3831,23)-(3831,24)
                                  identifier: 'tmp' (3831,25)-(3831,28)
                                  ): ')' (3831,28)-(3831,29)
                              ;: ';' (3831,29)-(3831,30)
                            if_statement (3832,7)-(3834,46)
                              if: 'if' (3832,7)-(3832,9)
                              parenthesized_expression (3832,10)-(3832,15)
                                (: '(' (3832,10)-(3832,11)
                                identifier: 'pre' (3832,11)-(3832,14)
                                ): ')' (3832,14)-(3832,15)
                              expression_statement (3833,4)-(3834,46)
                                assignment_expression (3833,4)-(3834,45)
                                  subscript_expression (3833,4)-(3833,16)
                                    identifier: 'val' (3833,4)-(3833,7)
                                    [: '[' (3833,7)-(3833,8)
                                    binary_expression (3833,8)-(3833,15)
                                      identifier: 'pre' (3833,8)-(3833,11)
                                      -: '-' (3833,12)-(3833,13)
                                      number_literal: '1' (3833,14)-(3833,15)
                                    ]: ']' (3833,15)-(3833,16)
                                  =: '=' (3833,17)-(3833,18)
                                  assignment_expression (3833,19)-(3834,45)
                                    subscript_expression (3833,19)-(3833,32)
                                      identifier: 'val' (3833,19)-(3833,22)
                                      [: '[' (3833,22)-(3833,23)
                                      binary_expression (3833,23)-(3833,31)
                                        identifier: 'pre' (3833,23)-(3833,26)
                                        +: '+' (3833,27)-(3833,28)
                                        identifier: 'sl' (3833,29)-(3833,31)
                                      ]: ']' (3833,31)-(3833,32)
                                    =: '=' (3833,33)-(3833,34)
                                    parenthesized_expression (3834,8)-(3834,45)
                                      (: '(' (3834,8)-(3834,9)
                                      conditional_expression (3834,9)-(3834,44)
                                        binary_expression (3834,9)-(3834,31)
                                          identifier: 'quotetype' (3834,9)-(3834,18)
                                          !=: '!=' (3834,19)-(3834,21)
                                          identifier: 'QT_DOUBLE' (3834,22)-(3834,31)
                                        ?: '?' (3834,32)-(3834,33)
                                        char_literal (3834,34)-(3834,38)
                                          ': ''' (3834,34)-(3834,35)
                                          escape_sequence: '\'' (3834,35)-(3834,37)
                                          ': ''' (3834,37)-(3834,38)
                                        :: ':' (3834,39)-(3834,40)
                                        char_literal (3834,41)-(3834,44)
                                          ': ''' (3834,41)-(3834,42)
                                          character: '"' (3834,42)-(3834,43)
                                          ': ''' (3834,43)-(3834,44)
                                      ): ')' (3834,44)-(3834,45)
                                ;: ';' (3834,45)-(3834,46)
                            expression_statement (3835,7)-(3835,35)
                              assignment_expression (3835,7)-(3835,34)
                                subscript_expression (3835,7)-(3835,27)
                                  identifier: 'val' (3835,7)-(3835,10)
                                  [: '[' (3835,10)-(3835,11)
                                  binary_expression (3835,11)-(3835,26)
                                    binary_expression (3835,11)-(3835,19)
                                      identifier: 'pre' (3835,11)-(3835,14)
                                      +: '+' (3835,15)-(3835,16)
                                      identifier: 'sl' (3835,17)-(3835,19)
                                    +: '+' (3835,20)-(3835,21)
                                    identifier: 'post' (3835,22)-(3835,26)
                                  ]: ']' (3835,26)-(3835,27)
                                =: '=' (3835,28)-(3835,29)
                                char_literal (3835,30)-(3835,34)
                                  ': ''' (3835,30)-(3835,31)
                                  escape_sequence: '\0' (3835,31)-(3835,33)
                                  ': ''' (3835,33)-(3835,34)
                              ;: ';' (3835,34)-(3835,35)
                            if_statement (3836,7)-(3837,22)
                              if: 'if' (3836,7)-(3836,9)
                              parenthesized_expression (3836,10)-(3836,35)
                                (: '(' (3836,10)-(3836,11)
                                binary_expression (3836,11)-(3836,34)
                                  identifier: 'quotetype' (3836,11)-(3836,20)
                                  ==: '==' (3836,21)-(3836,23)
                                  identifier: 'QT_DOLLARS' (3836,24)-(3836,34)
                                ): ')' (3836,34)-(3836,35)
                              expression_statement (3837,9)-(3837,22)
                                assignment_expression (3837,9)-(3837,21)
                                  subscript_expression (3837,9)-(3837,15)
                                    identifier: 'val' (3837,9)-(3837,12)
                                    [: '[' (3837,12)-(3837,13)
                                    number_literal: '0' (3837,13)-(3837,14)
                                    ]: ']' (3837,14)-(3837,15)
                                  =: '=' (3837,16)-(3837,17)
                                  char_literal (3837,18)-(3837,21)
                                    ': ''' (3837,18)-(3837,19)
                                    character: '$' (3837,19)-(3837,20)
                                    ': ''' (3837,20)-(3837,21)
                                ;: ';' (3837,21)-(3837,22)
                            }: '}' (3838,3)-(3838,4)
                          else_clause (3838,5)-(3839,53)
                            else: 'else' (3838,5)-(3838,9)
                            expression_statement (3839,7)-(3839,53)
                              assignment_expression (3839,7)-(3839,52)
                                identifier: 'val' (3839,7)-(3839,10)
                                =: '=' (3839,11)-(3839,12)
                                call_expression (3839,13)-(3839,52)
                                  identifier: 'quotestring' (3839,13)-(3839,24)
                                  argument_list (3839,24)-(3839,52)
                                    (: '(' (3839,24)-(3839,25)
                                    identifier: 'val' (3839,25)-(3839,28)
                                    ,: ',' (3839,28)-(3839,29)
                                    identifier: 'QT_BACKSLASH_SHOWNULL' (3839,30)-(3839,51)
                                    ): ')' (3839,51)-(3839,52)
                              ;: ';' (3839,52)-(3839,53)
                    }: '}' (3840,6)-(3840,7)
                  else_clause (3840,8)-(3857,7)
                    else: 'else' (3840,8)-(3840,12)
                    compound_statement (3840,13)-(3857,7)
                      {: '{' (3840,13)-(3840,14)
                      declaration (3841,3)-(3841,43)
                        primitive_type: 'int' (3841,3)-(3841,6)
                        init_declarator (3841,7)-(3841,19)
                          identifier: 'one' (3841,7)-(3841,10)
                          =: '=' (3841,11)-(3841,12)
                          identifier: 'noerrs' (3841,13)-(3841,19)
                        ,: ',' (3841,19)-(3841,20)
                        init_declarator (3841,21)-(3841,34)
                          identifier: 'oef' (3841,21)-(3841,24)
                          =: '=' (3841,25)-(3841,26)
                          identifier: 'errflag' (3841,27)-(3841,34)
                        ,: ',' (3841,34)-(3841,35)
                        identifier: 'haserr' (3841,36)-(3841,42)
                        ;: ';' (3841,42)-(3841,43)
                      if_statement (3843,3)-(3844,18)
                        if: 'if' (3843,3)-(3843,5)
                        parenthesized_expression (3843,6)-(3843,17)
                          (: '(' (3843,6)-(3843,7)
                          unary_expression (3843,7)-(3843,16)
                            !: '!' (3843,7)-(3843,8)
                            identifier: 'quoteerr' (3843,8)-(3843,16)
                          ): ')' (3843,16)-(3843,17)
                        expression_statement (3844,7)-(3844,18)
                          assignment_expression (3844,7)-(3844,17)
                            identifier: 'noerrs' (3844,7)-(3844,13)
                            =: '=' (3844,14)-(3844,15)
                            number_literal: '1' (3844,16)-(3844,17)
                          ;: ';' (3844,17)-(3844,18)
                      expression_statement (3845,3)-(3845,36)
                        assignment_expression (3845,3)-(3845,35)
                          identifier: 'haserr' (3845,3)-(3845,9)
                          =: '=' (3845,10)-(3845,11)
                          call_expression (3845,12)-(3845,35)
                            identifier: 'parse_subst_string' (3845,12)-(3845,30)
                            argument_list (3845,30)-(3845,35)
                              (: '(' (3845,30)-(3845,31)
                              identifier: 'val' (3845,31)-(3845,34)
                              ): ')' (3845,34)-(3845,35)
                        ;: ';' (3845,35)-(3845,36)
                      expression_statement (3846,3)-(3846,16)
                        assignment_expression (3846,3)-(3846,15)
                          identifier: 'noerrs' (3846,3)-(3846,9)
                          =: '=' (3846,10)-(3846,11)
                          identifier: 'one' (3846,12)-(3846,15)
                        ;: ';' (3846,15)-(3846,16)
                      if_statement (3847,3)-(3854,4)
                        if: 'if' (3847,3)-(3847,5)
                        parenthesized_expression (3847,6)-(3847,17)
                          (: '(' (3847,6)-(3847,7)
                          unary_expression (3847,7)-(3847,16)
                            !: '!' (3847,7)-(3847,8)
                            identifier: 'quoteerr' (3847,8)-(3847,16)
                          ): ')' (3847,16)-(3847,17)
                        compound_statement (3847,18)-(3850,4)
                          {: '{' (3847,18)-(3847,19)
                          comment: '/* Retain any user interrupt error status */' (3848,7)-(3848,51)
                          expression_statement (3849,7)-(3849,47)
                            assignment_expression (3849,7)-(3849,46)
                              identifier: 'errflag' (3849,7)-(3849,14)
                              =: '=' (3849,15)-(3849,16)
                              binary_expression (3849,17)-(3849,46)
                                identifier: 'oef' (3849,17)-(3849,20)
                                |: '|' (3849,21)-(3849,22)
                                parenthesized_expression (3849,23)-(3849,46)
                                  (: '(' (3849,23)-(3849,24)
                                  binary_expression (3849,24)-(3849,45)
                                    identifier: 'errflag' (3849,24)-(3849,31)
                                    &: '&' (3849,32)-(3849,33)
                                    identifier: 'ERRFLAG_INT' (3849,34)-(3849,45)
                                  ): ')' (3849,45)-(3849,46)
                            ;: ';' (3849,46)-(3849,47)
                          }: '}' (3850,3)-(3850,4)
                        else_clause (3851,3)-(3854,4)
                          else: 'else' (3851,3)-(3851,7)
                          if_statement (3851,8)-(3854,4)
                            if: 'if' (3851,8)-(3851,10)
                            parenthesized_expression (3851,11)-(3851,30)
                              (: '(' (3851,11)-(3851,12)
                              binary_expression (3851,12)-(3851,29)
                                identifier: 'haserr' (3851,12)-(3851,18)
                                ||: '||' (3851,19)-(3851,21)
                                identifier: 'errflag' (3851,22)-(3851,29)
                              ): ')' (3851,29)-(3851,30)
                            compound_statement (3851,31)-(3854,4)
                              {: '{' (3851,31)-(3851,32)
                              expression_statement (3852,7)-(3852,46)
                                call_expression (3852,7)-(3852,45)
                                  identifier: 'zerr' (3852,7)-(3852,11)
                                  argument_list (3852,11)-(3852,45)
                                    (: '(' (3852,11)-(3852,12)
                                    string_literal (3852,12)-(3852,44)
                                      ": '"' (3852,12)-(3852,13)
                                      string_content: 'parse error in parameter value' (3852,13)-(3852,43)
                                      ": '"' (3852,43)-(3852,44)
                                    ): ')' (3852,44)-(3852,45)
                                ;: ';' (3852,45)-(3852,46)
                              return_statement (3853,7)-(3853,19)
                                return: 'return' (3853,7)-(3853,13)
                                null (3853,14)-(3853,18)
                                  NULL: 'NULL' (3853,14)-(3853,18)
                                ;: ';' (3853,18)-(3853,19)
                              }: '}' (3854,3)-(3854,4)
                      expression_statement (3855,3)-(3855,19)
                        call_expression (3855,3)-(3855,18)
                          identifier: 'remnulargs' (3855,3)-(3855,13)
                          argument_list (3855,13)-(3855,18)
                            (: '(' (3855,13)-(3855,14)
                            identifier: 'val' (3855,14)-(3855,17)
                            ): ')' (3855,17)-(3855,18)
                        ;: ';' (3855,18)-(3855,19)
                      expression_statement (3856,3)-(3856,19)
                        call_expression (3856,3)-(3856,18)
                          identifier: 'untokenize' (3856,3)-(3856,13)
                          argument_list (3856,13)-(3856,18)
                            (: '(' (3856,13)-(3856,14)
                            identifier: 'val' (3856,14)-(3856,17)
                            ): ')' (3856,17)-(3856,18)
                        ;: ';' (3856,18)-(3856,19)
                      }: '}' (3857,6)-(3857,7)
                }: '}' (3858,2)-(3858,3)
          }: '}' (3859,5)-(3859,6)
      comment: '/*
     * Transform special characters in the string to make them
     * printable, or to show directories, or possibly even both.
     */' (3860,5)-(3863,8)
      if_statement (3864,5)-(3883,6)
        if: 'if' (3864,5)-(3864,7)
        parenthesized_expression (3864,8)-(3864,14)
          (: '(' (3864,8)-(3864,9)
          identifier: 'mods' (3864,9)-(3864,13)
          ): ')' (3864,13)-(3864,14)
        compound_statement (3864,15)-(3883,6)
          {: '{' (3864,15)-(3864,16)
          if_statement (3865,2)-(3882,3)
            if: 'if' (3865,2)-(3865,4)
            parenthesized_expression (3865,5)-(3865,12)
              (: '(' (3865,5)-(3865,6)
              identifier: 'isarr' (3865,6)-(3865,11)
              ): ')' (3865,11)-(3865,12)
            compound_statement (3865,13)-(3875,3)
              {: '{' (3865,13)-(3865,14)
              declaration (3866,6)-(3866,16)
                primitive_type: 'char' (3866,6)-(3866,10)
                pointer_declarator (3866,11)-(3866,15)
                  *: '*' (3866,11)-(3866,12)
                  pointer_declarator (3866,12)-(3866,15)
                    *: '*' (3866,12)-(3866,13)
                    identifier: 'ap' (3866,13)-(3866,15)
                ;: ';' (3866,15)-(3866,16)
              if_statement (3867,6)-(3868,35)
                if: 'if' (3867,6)-(3867,8)
                parenthesized_expression (3867,9)-(3867,18)
                  (: '(' (3867,9)-(3867,10)
                  unary_expression (3867,10)-(3867,17)
                    !: '!' (3867,10)-(3867,11)
                    identifier: 'copied' (3867,11)-(3867,17)
                  ): ')' (3867,17)-(3867,18)
                expression_statement (3868,3)-(3868,35)
                  comma_expression (3868,3)-(3868,34)
                    assignment_expression (3868,3)-(3868,22)
                      identifier: 'aval' (3868,3)-(3868,7)
                      =: '=' (3868,8)-(3868,9)
                      call_expression (3868,10)-(3868,22)
                        identifier: 'arrdup' (3868,10)-(3868,16)
                        argument_list (3868,16)-(3868,22)
                          (: '(' (3868,16)-(3868,17)
                          identifier: 'aval' (3868,17)-(3868,21)
                          ): ')' (3868,21)-(3868,22)
                    ,: ',' (3868,22)-(3868,23)
                    assignment_expression (3868,24)-(3868,34)
                      identifier: 'copied' (3868,24)-(3868,30)
                      =: '=' (3868,31)-(3868,32)
                      number_literal: '1' (3868,33)-(3868,34)
                  ;: ';' (3868,34)-(3868,35)
              for_statement (3869,6)-(3874,7)
                for: 'for' (3869,6)-(3869,9)
                (: '(' (3869,10)-(3869,11)
                assignment_expression (3869,11)-(3869,20)
                  identifier: 'ap' (3869,11)-(3869,13)
                  =: '=' (3869,14)-(3869,15)
                  identifier: 'aval' (3869,16)-(3869,20)
                ;: ';' (3869,20)-(3869,21)
                pointer_expression (3869,22)-(3869,25)
                  *: '*' (3869,22)-(3869,23)
                  identifier: 'ap' (3869,23)-(3869,25)
                ;: ';' (3869,25)-(3869,26)
                update_expression (3869,27)-(3869,31)
                  identifier: 'ap' (3869,27)-(3869,29)
                  ++: '++' (3869,29)-(3869,31)
                ): ')' (3869,31)-(3869,32)
                compound_statement (3869,33)-(3874,7)
                  {: '{' (3869,33)-(3869,34)
                  if_statement (3870,3)-(3871,31)
                    if: 'if' (3870,3)-(3870,5)
                    parenthesized_expression (3870,6)-(3870,16)
                      (: '(' (3870,6)-(3870,7)
                      binary_expression (3870,7)-(3870,15)
                        identifier: 'mods' (3870,7)-(3870,11)
                        &: '&' (3870,12)-(3870,13)
                        number_literal: '1' (3870,14)-(3870,15)
                      ): ')' (3870,15)-(3870,16)
                    expression_statement (3871,7)-(3871,31)
                      assignment_expression (3871,7)-(3871,30)
                        pointer_expression (3871,7)-(3871,10)
                          *: '*' (3871,7)-(3871,8)
                          identifier: 'ap' (3871,8)-(3871,10)
                        =: '=' (3871,11)-(3871,12)
                        call_expression (3871,13)-(3871,30)
                          identifier: 'substnamedir' (3871,13)-(3871,25)
                          argument_list (3871,25)-(3871,30)
                            (: '(' (3871,25)-(3871,26)
                            pointer_expression (3871,26)-(3871,29)
                              *: '*' (3871,26)-(3871,27)
                              identifier: 'ap' (3871,27)-(3871,29)
                            ): ')' (3871,29)-(3871,30)
                      ;: ';' (3871,30)-(3871,31)
                  if_statement (3872,3)-(3873,32)
                    if: 'if' (3872,3)-(3872,5)
                    parenthesized_expression (3872,6)-(3872,16)
                      (: '(' (3872,6)-(3872,7)
                      binary_expression (3872,7)-(3872,15)
                        identifier: 'mods' (3872,7)-(3872,11)
                        &: '&' (3872,12)-(3872,13)
                        number_literal: '2' (3872,14)-(3872,15)
                      ): ')' (3872,15)-(3872,16)
                    expression_statement (3873,7)-(3873,32)
                      assignment_expression (3873,7)-(3873,31)
                        pointer_expression (3873,7)-(3873,10)
                          *: '*' (3873,7)-(3873,8)
                          identifier: 'ap' (3873,8)-(3873,10)
                        =: '=' (3873,11)-(3873,12)
                        call_expression (3873,13)-(3873,31)
                          identifier: 'nicedupstring' (3873,13)-(3873,26)
                          argument_list (3873,26)-(3873,31)
                            (: '(' (3873,26)-(3873,27)
                            pointer_expression (3873,27)-(3873,30)
                              *: '*' (3873,27)-(3873,28)
                              identifier: 'ap' (3873,28)-(3873,30)
                            ): ')' (3873,30)-(3873,31)
                      ;: ';' (3873,31)-(3873,32)
                  }: '}' (3874,6)-(3874,7)
              }: '}' (3875,2)-(3875,3)
            else_clause (3875,4)-(3882,3)
              else: 'else' (3875,4)-(3875,8)
              compound_statement (3875,9)-(3882,3)
                {: '{' (3875,9)-(3875,10)
                if_statement (3876,6)-(3877,36)
                  if: 'if' (3876,6)-(3876,8)
                  parenthesized_expression (3876,9)-(3876,18)
                    (: '(' (3876,9)-(3876,10)
                    unary_expression (3876,10)-(3876,17)
                      !: '!' (3876,10)-(3876,11)
                      identifier: 'copied' (3876,11)-(3876,17)
                    ): ')' (3876,17)-(3876,18)
                  expression_statement (3877,3)-(3877,36)
                    comma_expression (3877,3)-(3877,35)
                      assignment_expression (3877,3)-(3877,23)
                        identifier: 'val' (3877,3)-(3877,6)
                        =: '=' (3877,7)-(3877,8)
                        call_expression (3877,9)-(3877,23)
                          identifier: 'dupstring' (3877,9)-(3877,18)
                          argument_list (3877,18)-(3877,23)
                            (: '(' (3877,18)-(3877,19)
                            identifier: 'val' (3877,19)-(3877,22)
                            ): ')' (3877,22)-(3877,23)
                      ,: ',' (3877,23)-(3877,24)
                      assignment_expression (3877,25)-(3877,35)
                        identifier: 'copied' (3877,25)-(3877,31)
                        =: '=' (3877,32)-(3877,33)
                        number_literal: '1' (3877,34)-(3877,35)
                    ;: ';' (3877,35)-(3877,36)
                if_statement (3878,6)-(3879,27)
                  if: 'if' (3878,6)-(3878,8)
                  parenthesized_expression (3878,9)-(3878,19)
                    (: '(' (3878,9)-(3878,10)
                    binary_expression (3878,10)-(3878,18)
                      identifier: 'mods' (3878,10)-(3878,14)
                      &: '&' (3878,15)-(3878,16)
                      number_literal: '1' (3878,17)-(3878,18)
                    ): ')' (3878,18)-(3878,19)
                  expression_statement (3879,3)-(3879,27)
                    assignment_expression (3879,3)-(3879,26)
                      identifier: 'val' (3879,3)-(3879,6)
                      =: '=' (3879,7)-(3879,8)
                      call_expression (3879,9)-(3879,26)
                        identifier: 'substnamedir' (3879,9)-(3879,21)
                        argument_list (3879,21)-(3879,26)
                          (: '(' (3879,21)-(3879,22)
                          identifier: 'val' (3879,22)-(3879,25)
                          ): ')' (3879,25)-(3879,26)
                    ;: ';' (3879,26)-(3879,27)
                if_statement (3880,6)-(3881,28)
                  if: 'if' (3880,6)-(3880,8)
                  parenthesized_expression (3880,9)-(3880,19)
                    (: '(' (3880,9)-(3880,10)
                    binary_expression (3880,10)-(3880,18)
                      identifier: 'mods' (3880,10)-(3880,14)
                      &: '&' (3880,15)-(3880,16)
                      number_literal: '2' (3880,17)-(3880,18)
                    ): ')' (3880,18)-(3880,19)
                  expression_statement (3881,3)-(3881,28)
                    assignment_expression (3881,3)-(3881,27)
                      identifier: 'val' (3881,3)-(3881,6)
                      =: '=' (3881,7)-(3881,8)
                      call_expression (3881,9)-(3881,27)
                        identifier: 'nicedupstring' (3881,9)-(3881,22)
                        argument_list (3881,22)-(3881,27)
                          (: '(' (3881,22)-(3881,23)
                          identifier: 'val' (3881,23)-(3881,26)
                          ): ')' (3881,26)-(3881,27)
                    ;: ';' (3881,27)-(3881,28)
                }: '}' (3882,2)-(3882,3)
          }: '}' (3883,5)-(3883,6)
      comment: '/*
     * Nothing particularly to do with SH_WORD_SPLIT --- this
     * performs lexical splitting on a string as specified by
     * the (z) flag.
     */' (3884,5)-(3888,8)
      if_statement (3889,5)-(3914,6)
        if: 'if' (3889,5)-(3889,7)
        parenthesized_expression (3889,8)-(3889,17)
          (: '(' (3889,8)-(3889,9)
          identifier: 'shsplit' (3889,9)-(3889,16)
          ): ')' (3889,16)-(3889,17)
        compound_statement (3889,18)-(3914,6)
          {: '{' (3889,18)-(3889,19)
          declaration (3890,2)-(3890,23)
            type_identifier: 'LinkList' (3890,2)-(3890,10)
            init_declarator (3890,11)-(3890,22)
              identifier: 'list' (3890,11)-(3890,15)
              =: '=' (3890,16)-(3890,17)
              null (3890,18)-(3890,22)
                NULL: 'NULL' (3890,18)-(3890,22)
            ;: ';' (3890,22)-(3890,23)
          if_statement (3892,2)-(3902,3)
            if: 'if' (3892,2)-(3892,4)
            parenthesized_expression (3892,5)-(3892,12)
              (: '(' (3892,5)-(3892,6)
              identifier: 'isarr' (3892,6)-(3892,11)
              ): ')' (3892,11)-(3892,12)
            compound_statement (3892,13)-(3899,3)
              {: '{' (3892,13)-(3892,14)
              declaration (3893,6)-(3893,16)
                primitive_type: 'char' (3893,6)-(3893,10)
                pointer_declarator (3893,11)-(3893,15)
                  *: '*' (3893,11)-(3893,12)
                  pointer_declarator (3893,12)-(3893,15)
                    *: '*' (3893,12)-(3893,13)
                    identifier: 'ap' (3893,13)-(3893,15)
                ;: ';' (3893,15)-(3893,16)
              for_statement (3894,6)-(3897,7)
                for: 'for' (3894,6)-(3894,9)
                (: '(' (3894,10)-(3894,11)
                assignment_expression (3894,11)-(3894,20)
                  identifier: 'ap' (3894,11)-(3894,13)
                  =: '=' (3894,14)-(3894,15)
                  identifier: 'aval' (3894,16)-(3894,20)
                ;: ';' (3894,20)-(3894,21)
                pointer_expression (3894,22)-(3894,25)
                  *: '*' (3894,22)-(3894,23)
                  identifier: 'ap' (3894,23)-(3894,25)
                ;: ';' (3894,25)-(3894,26)
                update_expression (3894,27)-(3894,31)
                  identifier: 'ap' (3894,27)-(3894,29)
                  ++: '++' (3894,29)-(3894,31)
                ): ')' (3894,31)-(3894,32)
                compound_statement (3894,33)-(3897,7)
                  {: '{' (3894,33)-(3894,34)
                  expression_statement (3895,3)-(3895,19)
                    call_expression (3895,3)-(3895,18)
                      identifier: 'untokenize' (3895,3)-(3895,13)
                      argument_list (3895,13)-(3895,18)
                        (: '(' (3895,13)-(3895,14)
                        pointer_expression (3895,14)-(3895,17)
                          *: '*' (3895,14)-(3895,15)
                          identifier: 'ap' (3895,15)-(3895,17)
                        ): ')' (3895,17)-(3895,18)
                    ;: ';' (3895,18)-(3895,19)
                  expression_statement (3896,3)-(3896,48)
                    assignment_expression (3896,3)-(3896,47)
                      identifier: 'list' (3896,3)-(3896,7)
                      =: '=' (3896,8)-(3896,9)
                      call_expression (3896,10)-(3896,47)
                        identifier: 'bufferwords' (3896,10)-(3896,21)
                        argument_list (3896,21)-(3896,47)
                          (: '(' (3896,21)-(3896,22)
                          identifier: 'list' (3896,22)-(3896,26)
                          ,: ',' (3896,26)-(3896,27)
                          pointer_expression (3896,28)-(3896,31)
                            *: '*' (3896,28)-(3896,29)
                            identifier: 'ap' (3896,29)-(3896,31)
                          ,: ',' (3896,31)-(3896,32)
                          null (3896,33)-(3896,37)
                            NULL: 'NULL' (3896,33)-(3896,37)
                          ,: ',' (3896,37)-(3896,38)
                          identifier: 'shsplit' (3896,39)-(3896,46)
                          ): ')' (3896,46)-(3896,47)
                    ;: ';' (3896,47)-(3896,48)
                  }: '}' (3897,6)-(3897,7)
              expression_statement (3898,6)-(3898,16)
                assignment_expression (3898,6)-(3898,15)
                  identifier: 'isarr' (3898,6)-(3898,11)
                  =: '=' (3898,12)-(3898,13)
                  number_literal: '0' (3898,14)-(3898,15)
                ;: ';' (3898,15)-(3898,16)
              }: '}' (3899,2)-(3899,3)
            else_clause (3899,4)-(3902,3)
              else: 'else' (3899,4)-(3899,8)
              compound_statement (3899,9)-(3902,3)
                {: '{' (3899,9)-(3899,10)
                expression_statement (3900,6)-(3900,22)
                  call_expression (3900,6)-(3900,21)
                    identifier: 'untokenize' (3900,6)-(3900,16)
                    argument_list (3900,16)-(3900,21)
                      (: '(' (3900,16)-(3900,17)
                      identifier: 'val' (3900,17)-(3900,20)
                      ): ')' (3900,20)-(3900,21)
                  ;: ';' (3900,21)-(3900,22)
                expression_statement (3901,6)-(3901,51)
                  assignment_expression (3901,6)-(3901,50)
                    identifier: 'list' (3901,6)-(3901,10)
                    =: '=' (3901,11)-(3901,12)
                    call_expression (3901,13)-(3901,50)
                      identifier: 'bufferwords' (3901,13)-(3901,24)
                      argument_list (3901,24)-(3901,50)
                        (: '(' (3901,24)-(3901,25)
                        null (3901,25)-(3901,29)
                          NULL: 'NULL' (3901,25)-(3901,29)
                        ,: ',' (3901,29)-(3901,30)
                        identifier: 'val' (3901,31)-(3901,34)
                        ,: ',' (3901,34)-(3901,35)
                        null (3901,36)-(3901,40)
                          NULL: 'NULL' (3901,36)-(3901,40)
                        ,: ',' (3901,40)-(3901,41)
                        identifier: 'shsplit' (3901,42)-(3901,49)
                        ): ')' (3901,49)-(3901,50)
                  ;: ';' (3901,50)-(3901,51)
                }: '}' (3902,2)-(3902,3)
          if_statement (3904,2)-(3912,3)
            if: 'if' (3904,2)-(3904,4)
            parenthesized_expression (3904,5)-(3904,32)
              (: '(' (3904,5)-(3904,6)
              binary_expression (3904,6)-(3904,31)
                unary_expression (3904,6)-(3904,11)
                  !: '!' (3904,6)-(3904,7)
                  identifier: 'list' (3904,7)-(3904,11)
                ||: '||' (3904,12)-(3904,14)
                unary_expression (3904,15)-(3904,31)
                  !: '!' (3904,15)-(3904,16)
                  call_expression (3904,16)-(3904,31)
                    identifier: 'firstnode' (3904,16)-(3904,25)
                    argument_list (3904,25)-(3904,31)
                      (: '(' (3904,25)-(3904,26)
                      identifier: 'list' (3904,26)-(3904,30)
                      ): ')' (3904,30)-(3904,31)
              ): ')' (3904,31)-(3904,32)
            expression_statement (3905,6)-(3905,26)
              assignment_expression (3905,6)-(3905,25)
                identifier: 'val' (3905,6)-(3905,9)
                =: '=' (3905,10)-(3905,11)
                call_expression (3905,12)-(3905,25)
                  identifier: 'dupstring' (3905,12)-(3905,21)
                  argument_list (3905,21)-(3905,25)
                    (: '(' (3905,21)-(3905,22)
                    string_literal (3905,22)-(3905,24)
                      ": '"' (3905,22)-(3905,23)
                      ": '"' (3905,23)-(3905,24)
                    ): ')' (3905,24)-(3905,25)
              ;: ';' (3905,25)-(3905,26)
            else_clause (3906,2)-(3912,3)
              else: 'else' (3906,2)-(3906,6)
              if_statement (3906,7)-(3912,3)
                if: 'if' (3906,7)-(3906,9)
                parenthesized_expression (3906,10)-(3906,38)
                  (: '(' (3906,10)-(3906,11)
                  unary_expression (3906,11)-(3906,37)
                    !: '!' (3906,11)-(3906,12)
                    call_expression (3906,12)-(3906,37)
                      identifier: 'nextnode' (3906,12)-(3906,20)
                      argument_list (3906,20)-(3906,37)
                        (: '(' (3906,20)-(3906,21)
                        call_expression (3906,21)-(3906,36)
                          identifier: 'firstnode' (3906,21)-(3906,30)
                          argument_list (3906,30)-(3906,36)
                            (: '(' (3906,30)-(3906,31)
                            identifier: 'list' (3906,31)-(3906,35)
                            ): ')' (3906,35)-(3906,36)
                        ): ')' (3906,36)-(3906,37)
                  ): ')' (3906,37)-(3906,38)
                expression_statement (3907,6)-(3907,37)
                  assignment_expression (3907,6)-(3907,36)
                    identifier: 'val' (3907,6)-(3907,9)
                    =: '=' (3907,10)-(3907,11)
                    call_expression (3907,12)-(3907,36)
                      identifier: 'getdata' (3907,12)-(3907,19)
                      argument_list (3907,19)-(3907,36)
                        (: '(' (3907,19)-(3907,20)
                        call_expression (3907,20)-(3907,35)
                          identifier: 'firstnode' (3907,20)-(3907,29)
                          argument_list (3907,29)-(3907,35)
                            (: '(' (3907,29)-(3907,30)
                            identifier: 'list' (3907,30)-(3907,34)
                            ): ')' (3907,34)-(3907,35)
                        ): ')' (3907,35)-(3907,36)
                  ;: ';' (3907,36)-(3907,37)
                else_clause (3908,2)-(3912,3)
                  else: 'else' (3908,2)-(3908,6)
                  compound_statement (3908,7)-(3912,3)
                    {: '{' (3908,7)-(3908,8)
                    expression_statement (3909,6)-(3909,38)
                      assignment_expression (3909,6)-(3909,37)
                        identifier: 'aval' (3909,6)-(3909,10)
                        =: '=' (3909,11)-(3909,12)
                        call_expression (3909,13)-(3909,37)
                          identifier: 'hlinklist2array' (3909,13)-(3909,28)
                          argument_list (3909,28)-(3909,37)
                            (: '(' (3909,28)-(3909,29)
                            identifier: 'list' (3909,29)-(3909,33)
                            ,: ',' (3909,33)-(3909,34)
                            number_literal: '0' (3909,35)-(3909,36)
                            ): ')' (3909,36)-(3909,37)
                      ;: ';' (3909,37)-(3909,38)
                    expression_statement (3910,6)-(3910,29)
                      assignment_expression (3910,6)-(3910,28)
                        identifier: 'isarr' (3910,6)-(3910,11)
                        =: '=' (3910,12)-(3910,13)
                        conditional_expression (3910,14)-(3910,28)
                          identifier: 'nojoin' (3910,14)-(3910,20)
                          ?: '?' (3910,21)-(3910,22)
                          number_literal: '1' (3910,23)-(3910,24)
                          :: ':' (3910,25)-(3910,26)
                          number_literal: '2' (3910,27)-(3910,28)
                      ;: ';' (3910,28)-(3910,29)
                    expression_statement (3911,6)-(3911,32)
                      assignment_expression (3911,6)-(3911,31)
                        field_expression (3911,6)-(3911,19)
                          field_expression (3911,6)-(3911,13)
                            identifier: 'l' (3911,6)-(3911,7)
                            ->: '->' (3911,7)-(3911,9)
                            field_identifier: 'list' (3911,9)-(3911,13)
                          .: '.' (3911,13)-(3911,14)
                          field_identifier: 'flags' (3911,14)-(3911,19)
                        |=: '|=' (3911,20)-(3911,22)
                        identifier: 'LF_ARRAY' (3911,23)-(3911,31)
                      ;: ';' (3911,31)-(3911,32)
                    }: '}' (3912,2)-(3912,3)
          expression_statement (3913,2)-(3913,13)
            assignment_expression (3913,2)-(3913,12)
              identifier: 'copied' (3913,2)-(3913,8)
              =: '=' (3913,9)-(3913,10)
              number_literal: '1' (3913,11)-(3913,12)
            ;: ';' (3913,12)-(3913,13)
          }: '}' (3914,5)-(3914,6)
      comment: '/*
     * TODO: hmm.  At this point we have to be on our toes about
     * whether we're putting stuff into a line or not, i.e.
     * we don't want to do this from a recursive call.
     * Rather than passing back flags in a non-trivial way, maybe
     * we could decide on the basis of flags passed down to us.
     *
     * This is the ideal place to do any last-minute conversion from
     * array to strings.  However, given all the transformations we've
     * already done, probably if it's going to be done it will already
     * have been.  (I'd really like to keep everying in aval or
     * equivalent and only locally decide if we need to treat it
     * as a scalar.)
     */' (3915,5)-(3928,8)
      if_statement (3930,5)-(3935,6)
        if: 'if' (3930,5)-(3930,7)
        parenthesized_expression (3930,8)-(3930,23)
          (: '(' (3930,8)-(3930,9)
          binary_expression (3930,9)-(3930,22)
            identifier: 'isarr' (3930,9)-(3930,14)
            &&: '&&' (3930,15)-(3930,17)
            identifier: 'ssub' (3930,18)-(3930,22)
          ): ')' (3930,22)-(3930,23)
        compound_statement (3930,24)-(3935,6)
          {: '{' (3930,24)-(3930,25)
          comment: '/* prefork() wants a scalar, so join no matter what else */' (3931,2)-(3931,61)
          expression_statement (3932,2)-(3932,31)
            assignment_expression (3932,2)-(3932,30)
              identifier: 'val' (3932,2)-(3932,5)
              =: '=' (3932,6)-(3932,7)
              call_expression (3932,8)-(3932,30)
                identifier: 'sepjoin' (3932,8)-(3932,15)
                argument_list (3932,15)-(3932,30)
                  (: '(' (3932,15)-(3932,16)
                  identifier: 'aval' (3932,16)-(3932,20)
                  ,: ',' (3932,20)-(3932,21)
                  null (3932,22)-(3932,26)
                    NULL: 'NULL' (3932,22)-(3932,26)
                  ,: ',' (3932,26)-(3932,27)
                  number_literal: '1' (3932,28)-(3932,29)
                  ): ')' (3932,29)-(3932,30)
            ;: ';' (3932,30)-(3932,31)
          expression_statement (3933,2)-(3933,12)
            assignment_expression (3933,2)-(3933,11)
              identifier: 'isarr' (3933,2)-(3933,7)
              =: '=' (3933,8)-(3933,9)
              number_literal: '0' (3933,10)-(3933,11)
            ;: ';' (3933,11)-(3933,12)
          expression_statement (3934,2)-(3934,29)
            assignment_expression (3934,2)-(3934,28)
              field_expression (3934,2)-(3934,15)
                field_expression (3934,2)-(3934,9)
                  identifier: 'l' (3934,2)-(3934,3)
                  ->: '->' (3934,3)-(3934,5)
                  field_identifier: 'list' (3934,5)-(3934,9)
                .: '.' (3934,9)-(3934,10)
                field_identifier: 'flags' (3934,10)-(3934,15)
              &=: '&=' (3934,16)-(3934,18)
              unary_expression (3934,19)-(3934,28)
                ~: '~' (3934,19)-(3934,20)
                identifier: 'LF_ARRAY' (3934,20)-(3934,28)
            ;: ';' (3934,28)-(3934,29)
          }: '}' (3935,5)-(3935,6)
      comment: '/*
     * If a multsub result had whitespace at the start and we're
     * splitting and there's a previous string, now's the time to do so.
     */' (3937,5)-(3940,8)
      if_statement (3941,5)-(3944,6)
        if: 'if' (3941,5)-(3941,7)
        parenthesized_expression (3941,8)-(3941,57)
          (: '(' (3941,8)-(3941,9)
          binary_expression (3941,9)-(3941,56)
            parenthesized_expression (3941,9)-(3941,41)
              (: '(' (3941,9)-(3941,10)
              binary_expression (3941,10)-(3941,40)
                identifier: 'ms_flags' (3941,10)-(3941,18)
                &: '&' (3941,19)-(3941,20)
                identifier: 'MULTSUB_WS_AT_START' (3941,21)-(3941,40)
              ): ')' (3941,40)-(3941,41)
            &&: '&&' (3941,42)-(3941,44)
            binary_expression (3941,45)-(3941,56)
              identifier: 'aptr' (3941,45)-(3941,49)
              >: '>' (3941,50)-(3941,51)
              identifier: 'ostr' (3941,52)-(3941,56)
          ): ')' (3941,56)-(3941,57)
        compound_statement (3941,58)-(3944,6)
          {: '{' (3941,58)-(3941,59)
          expression_statement (3942,2)-(3942,65)
            comma_expression (3942,2)-(3942,64)
              call_expression (3942,2)-(3942,52)
                identifier: 'insertlinknode' (3942,2)-(3942,16)
                argument_list (3942,16)-(3942,52)
                  (: '(' (3942,16)-(3942,17)
                  identifier: 'l' (3942,17)-(3942,18)
                  ,: ',' (3942,18)-(3942,19)
                  identifier: 'n' (3942,20)-(3942,21)
                  ,: ',' (3942,21)-(3942,22)
                  call_expression (3942,23)-(3942,51)
                    identifier: 'dupstrpfx' (3942,23)-(3942,32)
                    argument_list (3942,32)-(3942,51)
                      (: '(' (3942,32)-(3942,33)
                      identifier: 'ostr' (3942,33)-(3942,37)
                      ,: ',' (3942,37)-(3942,38)
                      binary_expression (3942,39)-(3942,50)
                        identifier: 'aptr' (3942,39)-(3942,43)
                        -: '-' (3942,44)-(3942,45)
                        identifier: 'ostr' (3942,46)-(3942,50)
                      ): ')' (3942,50)-(3942,51)
                  ): ')' (3942,51)-(3942,52)
              ,: ',' (3942,52)-(3942,53)
              call_expression (3942,54)-(3942,64)
                identifier: 'incnode' (3942,54)-(3942,61)
                argument_list (3942,61)-(3942,64)
                  (: '(' (3942,61)-(3942,62)
                  identifier: 'n' (3942,62)-(3942,63)
                  ): ')' (3942,63)-(3942,64)
            ;: ';' (3942,64)-(3942,65)
          expression_statement (3943,2)-(3943,14)
            assignment_expression (3943,2)-(3943,13)
              identifier: 'ostr' (3943,2)-(3943,6)
              =: '=' (3943,7)-(3943,8)
              identifier: 'aptr' (3943,9)-(3943,13)
            ;: ';' (3943,13)-(3943,14)
          }: '}' (3944,5)-(3944,6)
      comment: '/* Likewise at the end */' (3945,5)-(3945,30)
      if_statement (3946,5)-(3949,6)
        if: 'if' (3946,5)-(3946,7)
        parenthesized_expression (3946,8)-(3946,49)
          (: '(' (3946,8)-(3946,9)
          binary_expression (3946,9)-(3946,48)
            parenthesized_expression (3946,9)-(3946,39)
              (: '(' (3946,9)-(3946,10)
              binary_expression (3946,10)-(3946,38)
                identifier: 'ms_flags' (3946,10)-(3946,18)
                &: '&' (3946,19)-(3946,20)
                identifier: 'MULTSUB_WS_AT_END' (3946,21)-(3946,38)
              ): ')' (3946,38)-(3946,39)
            &&: '&&' (3946,40)-(3946,42)
            pointer_expression (3946,43)-(3946,48)
              *: '*' (3946,43)-(3946,44)
              identifier: 'fstr' (3946,44)-(3946,48)
          ): ')' (3946,48)-(3946,49)
        compound_statement (3946,50)-(3949,6)
          {: '{' (3946,50)-(3946,51)
          expression_statement (3947,2)-(3947,40)
            call_expression (3947,2)-(3947,39)
              identifier: 'insertlinknode' (3947,2)-(3947,16)
              argument_list (3947,16)-(3947,39)
                (: '(' (3947,16)-(3947,17)
                identifier: 'l' (3947,17)-(3947,18)
                ,: ',' (3947,18)-(3947,19)
                identifier: 'n' (3947,20)-(3947,21)
                ,: ',' (3947,21)-(3947,22)
                call_expression (3947,23)-(3947,38)
                  identifier: 'dupstring' (3947,23)-(3947,32)
                  argument_list (3947,32)-(3947,38)
                    (: '(' (3947,32)-(3947,33)
                    identifier: 'fstr' (3947,33)-(3947,37)
                    ): ')' (3947,37)-(3947,38)
                ): ')' (3947,38)-(3947,39)
            ;: ';' (3947,39)-(3947,40)
          comment: '/* appended, no incnode */' (3947,41)-(3947,67)
          expression_statement (3948,2)-(3948,15)
            assignment_expression (3948,2)-(3948,14)
              pointer_expression (3948,2)-(3948,7)
                *: '*' (3948,2)-(3948,3)
                identifier: 'fstr' (3948,3)-(3948,7)
              =: '=' (3948,8)-(3948,9)
              char_literal (3948,10)-(3948,14)
                ': ''' (3948,10)-(3948,11)
                escape_sequence: '\0' (3948,11)-(3948,13)
                ': ''' (3948,13)-(3948,14)
            ;: ';' (3948,14)-(3948,15)
          }: '}' (3949,5)-(3949,6)
      if_statement (3950,5)-(3959,6)
        if: 'if' (3950,5)-(3950,7)
        parenthesized_expression (3950,8)-(3950,26)
          (: '(' (3950,8)-(3950,9)
          binary_expression (3950,9)-(3950,25)
            identifier: 'arrasg' (3950,9)-(3950,15)
            &&: '&&' (3950,16)-(3950,18)
            unary_expression (3950,19)-(3950,25)
              !: '!' (3950,19)-(3950,20)
              identifier: 'isarr' (3950,20)-(3950,25)
          ): ')' (3950,25)-(3950,26)
        compound_statement (3950,27)-(3959,6)
          {: '{' (3950,27)-(3950,28)
          comment: '/*
	 * Caller requested this be forced to an array even if scalar.
	 * Any point in distinguishing arrasg == 2 (assoc array) here?
	 */' (3951,2)-(3954,5)
          expression_statement (3955,2)-(3955,28)
            assignment_expression (3955,2)-(3955,27)
              field_expression (3955,2)-(3955,15)
                field_expression (3955,2)-(3955,9)
                  identifier: 'l' (3955,2)-(3955,3)
                  ->: '->' (3955,3)-(3955,5)
                  field_identifier: 'list' (3955,5)-(3955,9)
                .: '.' (3955,9)-(3955,10)
                field_identifier: 'flags' (3955,10)-(3955,15)
              |=: '|=' (3955,16)-(3955,18)
              identifier: 'LF_ARRAY' (3955,19)-(3955,27)
            ;: ';' (3955,27)-(3955,28)
          expression_statement (3956,2)-(3956,23)
            assignment_expression (3956,2)-(3956,22)
              identifier: 'aval' (3956,2)-(3956,6)
              =: '=' (3956,7)-(3956,8)
              call_expression (3956,9)-(3956,22)
                identifier: 'hmkarray' (3956,9)-(3956,17)
                argument_list (3956,17)-(3956,22)
                  (: '(' (3956,17)-(3956,18)
                  identifier: 'val' (3956,18)-(3956,21)
                  ): ')' (3956,21)-(3956,22)
            ;: ';' (3956,22)-(3956,23)
          expression_statement (3957,2)-(3957,12)
            assignment_expression (3957,2)-(3957,11)
              identifier: 'isarr' (3957,2)-(3957,7)
              =: '=' (3957,8)-(3957,9)
              number_literal: '1' (3957,10)-(3957,11)
            ;: ';' (3957,11)-(3957,12)
          expression_statement (3958,2)-(3958,58)
            call_expression (3958,2)-(3958,57)
              identifier: 'DPUTS' (3958,2)-(3958,7)
              argument_list (3958,7)-(3958,57)
                (: '(' (3958,7)-(3958,8)
                unary_expression (3958,8)-(3958,12)
                  !: '!' (3958,8)-(3958,9)
                  identifier: 'val' (3958,9)-(3958,12)
                ,: ',' (3958,12)-(3958,13)
                string_literal (3958,14)-(3958,56)
                  ": '"' (3958,14)-(3958,15)
                  string_content: 'value is NULL in paramsubst, empty array' (3958,15)-(3958,55)
                  ": '"' (3958,55)-(3958,56)
                ): ')' (3958,56)-(3958,57)
            ;: ';' (3958,57)-(3958,58)
          }: '}' (3959,5)-(3959,6)
      if_statement (3960,5)-(4183,6)
        if: 'if' (3960,5)-(3960,7)
        parenthesized_expression (3960,8)-(3960,15)
          (: '(' (3960,8)-(3960,9)
          identifier: 'isarr' (3960,9)-(3960,14)
          ): ')' (3960,14)-(3960,15)
        compound_statement (3960,16)-(4153,6)
          {: '{' (3960,16)-(3960,17)
          declaration (3961,2)-(3961,10)
            primitive_type: 'char' (3961,2)-(3961,6)
            pointer_declarator (3961,7)-(3961,9)
              *: '*' (3961,7)-(3961,8)
              identifier: 'x' (3961,8)-(3961,9)
            ;: ';' (3961,9)-(3961,10)
          declaration (3962,2)-(3962,10)
            primitive_type: 'char' (3962,2)-(3962,6)
            pointer_declarator (3962,7)-(3962,9)
              *: '*' (3962,7)-(3962,8)
              identifier: 'y' (3962,8)-(3962,9)
            ;: ';' (3962,9)-(3962,10)
          declaration (3963,2)-(3963,11)
            primitive_type: 'int' (3963,2)-(3963,5)
            identifier: 'xlen' (3963,6)-(3963,10)
            ;: ';' (3963,10)-(3963,11)
          declaration (3964,2)-(3964,8)
            primitive_type: 'int' (3964,2)-(3964,5)
            identifier: 'i' (3964,6)-(3964,7)
            ;: ';' (3964,7)-(3964,8)
          declaration (3965,2)-(3965,18)
            type_identifier: 'LinkNode' (3965,2)-(3965,10)
            init_declarator (3965,11)-(3965,17)
              identifier: 'on' (3965,11)-(3965,13)
              =: '=' (3965,14)-(3965,15)
              identifier: 'n' (3965,16)-(3965,17)
            ;: ';' (3965,17)-(3965,18)
          comment: '/* Handle the (u) flag; we need this before the next test */' (3967,2)-(3967,62)
          if_statement (3968,2)-(3975,3)
            if: 'if' (3968,2)-(3968,4)
            parenthesized_expression (3968,5)-(3968,13)
              (: '(' (3968,5)-(3968,6)
              identifier: 'unique' (3968,6)-(3968,12)
              ): ')' (3968,12)-(3968,13)
            compound_statement (3968,14)-(3975,3)
              {: '{' (3968,14)-(3968,15)
              if_statement (3969,6)-(3970,23)
                if: 'if' (3969,6)-(3969,8)
                parenthesized_expression (3969,8)-(3969,17)
                  (: '(' (3969,8)-(3969,9)
                  unary_expression (3969,9)-(3969,16)
                    !: '!' (3969,9)-(3969,10)
                    identifier: 'copied' (3969,10)-(3969,16)
                  ): ')' (3969,16)-(3969,17)
                expression_statement (3970,3)-(3970,23)
                  assignment_expression (3970,3)-(3970,22)
                    identifier: 'aval' (3970,3)-(3970,7)
                    =: '=' (3970,8)-(3970,9)
                    call_expression (3970,10)-(3970,22)
                      identifier: 'arrdup' (3970,10)-(3970,16)
                      argument_list (3970,16)-(3970,22)
                        (: '(' (3970,16)-(3970,17)
                        identifier: 'aval' (3970,17)-(3970,21)
                        ): ')' (3970,21)-(3970,22)
                  ;: ';' (3970,22)-(3970,23)
              expression_statement (3972,6)-(3972,23)
                assignment_expression (3972,6)-(3972,22)
                  identifier: 'i' (3972,6)-(3972,7)
                  =: '=' (3972,8)-(3972,9)
                  call_expression (3972,10)-(3972,22)
                    identifier: 'arrlen' (3972,10)-(3972,16)
                    argument_list (3972,16)-(3972,22)
                      (: '(' (3972,16)-(3972,17)
                      identifier: 'aval' (3972,17)-(3972,21)
                      ): ')' (3972,21)-(3972,22)
                ;: ';' (3972,22)-(3972,23)
              if_statement (3973,6)-(3974,21)
                if: 'if' (3973,6)-(3973,8)
                parenthesized_expression (3973,9)-(3973,16)
                  (: '(' (3973,9)-(3973,10)
                  binary_expression (3973,10)-(3973,15)
                    identifier: 'i' (3973,10)-(3973,11)
                    >: '>' (3973,12)-(3973,13)
                    number_literal: '1' (3973,14)-(3973,15)
                  ): ')' (3973,15)-(3973,16)
                expression_statement (3974,3)-(3974,21)
                  call_expression (3974,3)-(3974,20)
                    identifier: 'zhuniqarray' (3974,3)-(3974,14)
                    argument_list (3974,14)-(3974,20)
                      (: '(' (3974,14)-(3974,15)
                      identifier: 'aval' (3974,15)-(3974,19)
                      ): ')' (3974,19)-(3974,20)
                  ;: ';' (3974,20)-(3974,21)
              }: '}' (3975,2)-(3975,3)
          if_statement (3976,2)-(4003,3)
            if: 'if' (3976,2)-(3976,4)
            parenthesized_expression (3976,5)-(3976,39)
              (: '(' (3976,5)-(3976,6)
              binary_expression (3976,6)-(3976,38)
                parenthesized_expression (3976,6)-(3976,28)
                  (: '(' (3976,6)-(3976,7)
                  binary_expression (3976,7)-(3976,27)
                    unary_expression (3976,7)-(3976,15)
                      !: '!' (3976,7)-(3976,8)
                      subscript_expression (3976,8)-(3976,15)
                        identifier: 'aval' (3976,8)-(3976,12)
                        [: '[' (3976,12)-(3976,13)
                        number_literal: '0' (3976,13)-(3976,14)
                        ]: ']' (3976,14)-(3976,15)
                    ||: '||' (3976,16)-(3976,18)
                    unary_expression (3976,19)-(3976,27)
                      !: '!' (3976,19)-(3976,20)
                      subscript_expression (3976,20)-(3976,27)
                        identifier: 'aval' (3976,20)-(3976,24)
                        [: '[' (3976,24)-(3976,25)
                        number_literal: '1' (3976,25)-(3976,26)
                        ]: ']' (3976,26)-(3976,27)
                  ): ')' (3976,27)-(3976,28)
                &&: '&&' (3976,29)-(3976,31)
                unary_expression (3976,32)-(3976,38)
                  !: '!' (3976,32)-(3976,33)
                  identifier: 'plan9' (3976,33)-(3976,38)
              ): ')' (3976,38)-(3976,39)
            compound_statement (3976,40)-(4003,3)
              {: '{' (3976,40)-(3976,41)
              comment: '/*
	     * Empty array or single element.  Currently you only
	     * get a single element array at this point from the
	     * unique expansion above. but we can potentially
	     * have other reasons.
	     *
	     * The following test removes the markers
	     * from surrounding double quotes, but I don't know why
	     * that's necessary.
	     */' (3977,6)-(3986,9)
              declaration (3987,6)-(3987,17)
                primitive_type: 'int' (3987,6)-(3987,9)
                identifier: 'vallen' (3987,10)-(3987,16)
                ;: ';' (3987,16)-(3987,17)
              if_statement (3988,6)-(3990,26)
                if: 'if' (3988,6)-(3988,8)
                parenthesized_expression (3988,9)-(3989,39)
                  (: '(' (3988,9)-(3988,10)
                  binary_expression (3988,10)-(3989,38)
                    binary_expression (3988,10)-(3989,20)
                      binary_expression (3988,10)-(3988,36)
                        identifier: 'aptr' (3988,10)-(3988,14)
                        >: '>' (3988,15)-(3988,16)
                        cast_expression (3988,17)-(3988,36)
                          (: '(' (3988,17)-(3988,18)
                          type_descriptor (3988,18)-(3988,24)
                            primitive_type: 'char' (3988,18)-(3988,22)
                            abstract_pointer_declarator (3988,23)-(3988,24)
                              *: '*' (3988,23)-(3988,24)
                          ): ')' (3988,24)-(3988,25)
                          call_expression (3988,26)-(3988,36)
                            identifier: 'getdata' (3988,26)-(3988,33)
                            argument_list (3988,33)-(3988,36)
                              (: '(' (3988,33)-(3988,34)
                              identifier: 'n' (3988,34)-(3988,35)
                              ): ')' (3988,35)-(3988,36)
                      &&: '&&' (3988,37)-(3988,39)
                      binary_expression (3989,3)-(3989,20)
                        subscript_expression (3989,3)-(3989,11)
                          identifier: 'aptr' (3989,3)-(3989,7)
                          [: '[' (3989,7)-(3989,8)
                          number_literal: '-1' (3989,8)-(3989,10)
                          ]: ']' (3989,10)-(3989,11)
                        ==: '==' (3989,12)-(3989,14)
                        identifier: 'Dnull' (3989,15)-(3989,20)
                    &&: '&&' (3989,21)-(3989,23)
                    binary_expression (3989,24)-(3989,38)
                      pointer_expression (3989,24)-(3989,29)
                        *: '*' (3989,24)-(3989,25)
                        identifier: 'fstr' (3989,25)-(3989,29)
                      ==: '==' (3989,30)-(3989,32)
                      identifier: 'Dnull' (3989,33)-(3989,38)
                  ): ')' (3989,38)-(3989,39)
                expression_statement (3990,3)-(3990,26)
                  comma_expression (3990,3)-(3990,25)
                    assignment_expression (3990,3)-(3990,17)
                      pointer_expression (3990,3)-(3990,10)
                        *: '*' (3990,3)-(3990,4)
                        update_expression (3990,4)-(3990,10)
                          --: '--' (3990,4)-(3990,6)
                          identifier: 'aptr' (3990,6)-(3990,10)
                      =: '=' (3990,11)-(3990,12)
                      char_literal (3990,13)-(3990,17)
                        ': ''' (3990,13)-(3990,14)
                        escape_sequence: '\0' (3990,14)-(3990,16)
                        ': ''' (3990,16)-(3990,17)
                    ,: ',' (3990,17)-(3990,18)
                    update_expression (3990,19)-(3990,25)
                      identifier: 'fstr' (3990,19)-(3990,23)
                      ++: '++' (3990,23)-(3990,25)
                  ;: ';' (3990,25)-(3990,26)
              expression_statement (3991,6)-(3991,45)
                assignment_expression (3991,6)-(3991,44)
                  identifier: 'vallen' (3991,6)-(3991,12)
                  =: '=' (3991,13)-(3991,14)
                  conditional_expression (3991,15)-(3991,44)
                    subscript_expression (3991,15)-(3991,22)
                      identifier: 'aval' (3991,15)-(3991,19)
                      [: '[' (3991,19)-(3991,20)
                      number_literal: '0' (3991,20)-(3991,21)
                      ]: ']' (3991,21)-(3991,22)
                    ?: '?' (3991,23)-(3991,24)
                    call_expression (3991,25)-(3991,40)
                      identifier: 'strlen' (3991,25)-(3991,31)
                      argument_list (3991,31)-(3991,40)
                        (: '(' (3991,31)-(3991,32)
                        subscript_expression (3991,32)-(3991,39)
                          identifier: 'aval' (3991,32)-(3991,36)
                          [: '[' (3991,36)-(3991,37)
                          number_literal: '0' (3991,37)-(3991,38)
                          ]: ']' (3991,38)-(3991,39)
                        ): ')' (3991,39)-(3991,40)
                    :: ':' (3991,41)-(3991,42)
                    number_literal: '0' (3991,43)-(3991,44)
                ;: ';' (3991,44)-(3991,45)
              expression_statement (3992,6)-(3992,70)
                assignment_expression (3992,6)-(3992,69)
                  identifier: 'y' (3992,6)-(3992,7)
                  =: '=' (3992,8)-(3992,9)
                  cast_expression (3992,10)-(3992,69)
                    (: '(' (3992,10)-(3992,11)
                    type_descriptor (3992,11)-(3992,17)
                      primitive_type: 'char' (3992,11)-(3992,15)
                      abstract_pointer_declarator (3992,16)-(3992,17)
                        *: '*' (3992,16)-(3992,17)
                    ): ')' (3992,17)-(3992,18)
                    call_expression (3992,19)-(3992,69)
                      identifier: 'hcalloc' (3992,19)-(3992,26)
                      argument_list (3992,26)-(3992,69)
                        (: '(' (3992,26)-(3992,27)
                        binary_expression (3992,27)-(3992,68)
                          binary_expression (3992,27)-(3992,64)
                            binary_expression (3992,27)-(3992,49)
                              parenthesized_expression (3992,27)-(3992,40)
                                (: '(' (3992,27)-(3992,28)
                                binary_expression (3992,28)-(3992,39)
                                  identifier: 'aptr' (3992,28)-(3992,32)
                                  -: '-' (3992,33)-(3992,34)
                                  identifier: 'ostr' (3992,35)-(3992,39)
                                ): ')' (3992,39)-(3992,40)
                              +: '+' (3992,41)-(3992,42)
                              identifier: 'vallen' (3992,43)-(3992,49)
                            +: '+' (3992,50)-(3992,51)
                            call_expression (3992,52)-(3992,64)
                              identifier: 'strlen' (3992,52)-(3992,58)
                              argument_list (3992,58)-(3992,64)
                                (: '(' (3992,58)-(3992,59)
                                identifier: 'fstr' (3992,59)-(3992,63)
                                ): ')' (3992,63)-(3992,64)
                          +: '+' (3992,65)-(3992,66)
                          number_literal: '1' (3992,67)-(3992,68)
                        ): ')' (3992,68)-(3992,69)
                ;: ';' (3992,69)-(3992,70)
              expression_statement (3993,6)-(3993,22)
                call_expression (3993,6)-(3993,21)
                  identifier: 'strcpy' (3993,6)-(3993,12)
                  argument_list (3993,12)-(3993,21)
                    (: '(' (3993,12)-(3993,13)
                    identifier: 'y' (3993,13)-(3993,14)
                    ,: ',' (3993,14)-(3993,15)
                    identifier: 'ostr' (3993,16)-(3993,20)
                    ): ')' (3993,20)-(3993,21)
                ;: ';' (3993,21)-(3993,22)
              expression_statement (3994,6)-(3994,31)
                assignment_expression (3994,6)-(3994,30)
                  pointer_expression (3994,6)-(3994,10)
                    *: '*' (3994,6)-(3994,7)
                    identifier: 'str' (3994,7)-(3994,10)
                  =: '=' (3994,11)-(3994,12)
                  binary_expression (3994,13)-(3994,30)
                    identifier: 'y' (3994,13)-(3994,14)
                    +: '+' (3994,15)-(3994,16)
                    parenthesized_expression (3994,17)-(3994,30)
                      (: '(' (3994,17)-(3994,18)
                      binary_expression (3994,18)-(3994,29)
                        identifier: 'aptr' (3994,18)-(3994,22)
                        -: '-' (3994,23)-(3994,24)
                        identifier: 'ostr' (3994,25)-(3994,29)
                      ): ')' (3994,29)-(3994,30)
                ;: ';' (3994,30)-(3994,31)
              if_statement (3995,6)-(3999,7)
                if: 'if' (3995,6)-(3995,8)
                parenthesized_expression (3995,9)-(3995,17)
                  (: '(' (3995,9)-(3995,10)
                  identifier: 'vallen' (3995,10)-(3995,16)
                  ): ')' (3995,16)-(3995,17)
                compound_statement (3996,6)-(3999,7)
                  {: '{' (3996,6)-(3996,7)
                  expression_statement (3997,3)-(3997,25)
                    call_expression (3997,3)-(3997,24)
                      identifier: 'strcpy' (3997,3)-(3997,9)
                      argument_list (3997,9)-(3997,24)
                        (: '(' (3997,9)-(3997,10)
                        pointer_expression (3997,10)-(3997,14)
                          *: '*' (3997,10)-(3997,11)
                          identifier: 'str' (3997,11)-(3997,14)
                        ,: ',' (3997,14)-(3997,15)
                        subscript_expression (3997,16)-(3997,23)
                          identifier: 'aval' (3997,16)-(3997,20)
                          [: '[' (3997,20)-(3997,21)
                          number_literal: '0' (3997,21)-(3997,22)
                          ]: ']' (3997,22)-(3997,23)
                        ): ')' (3997,23)-(3997,24)
                    ;: ';' (3997,24)-(3997,25)
                  expression_statement (3998,3)-(3998,18)
                    assignment_expression (3998,3)-(3998,17)
                      pointer_expression (3998,3)-(3998,7)
                        *: '*' (3998,3)-(3998,4)
                        identifier: 'str' (3998,4)-(3998,7)
                      +=: '+=' (3998,8)-(3998,10)
                      identifier: 'vallen' (3998,11)-(3998,17)
                    ;: ';' (3998,17)-(3998,18)
                  }: '}' (3999,6)-(3999,7)
              expression_statement (4000,6)-(4000,25)
                call_expression (4000,6)-(4000,24)
                  identifier: 'strcpy' (4000,6)-(4000,12)
                  argument_list (4000,12)-(4000,24)
                    (: '(' (4000,12)-(4000,13)
                    pointer_expression (4000,13)-(4000,17)
                      *: '*' (4000,13)-(4000,14)
                      identifier: 'str' (4000,14)-(4000,17)
                    ,: ',' (4000,17)-(4000,18)
                    identifier: 'fstr' (4000,19)-(4000,23)
                    ): ')' (4000,23)-(4000,24)
                ;: ';' (4000,24)-(4000,25)
              expression_statement (4001,6)-(4001,20)
                call_expression (4001,6)-(4001,19)
                  identifier: 'setdata' (4001,6)-(4001,13)
                  argument_list (4001,13)-(4001,19)
                    (: '(' (4001,13)-(4001,14)
                    identifier: 'n' (4001,14)-(4001,15)
                    ,: ',' (4001,15)-(4001,16)
                    identifier: 'y' (4001,17)-(4001,18)
                    ): ')' (4001,18)-(4001,19)
                ;: ';' (4001,19)-(4001,20)
              return_statement (4002,6)-(4002,15)
                return: 'return' (4002,6)-(4002,12)
                identifier: 'n' (4002,13)-(4002,14)
                ;: ';' (4002,14)-(4002,15)
              }: '}' (4003,2)-(4003,3)
          comment: '/* Handle (o) and (O) and their variants */' (4004,2)-(4004,45)
          if_statement (4005,2)-(4030,3)
            if: 'if' (4005,2)-(4005,4)
            parenthesized_expression (4005,5)-(4005,33)
              (: '(' (4005,5)-(4005,6)
              binary_expression (4005,6)-(4005,32)
                identifier: 'sortit' (4005,6)-(4005,12)
                !=: '!=' (4005,13)-(4005,15)
                identifier: 'SORTIT_ANYOLDHOW' (4005,16)-(4005,32)
              ): ')' (4005,32)-(4005,33)
            compound_statement (4005,34)-(4030,3)
              {: '{' (4005,34)-(4005,35)
              if_statement (4006,6)-(4007,23)
                if: 'if' (4006,6)-(4006,8)
                parenthesized_expression (4006,9)-(4006,18)
                  (: '(' (4006,9)-(4006,10)
                  unary_expression (4006,10)-(4006,17)
                    !: '!' (4006,10)-(4006,11)
                    identifier: 'copied' (4006,11)-(4006,17)
                  ): ')' (4006,17)-(4006,18)
                expression_statement (4007,3)-(4007,23)
                  assignment_expression (4007,3)-(4007,22)
                    identifier: 'aval' (4007,3)-(4007,7)
                    =: '=' (4007,8)-(4007,9)
                    call_expression (4007,10)-(4007,22)
                      identifier: 'arrdup' (4007,10)-(4007,16)
                      argument_list (4007,16)-(4007,22)
                        (: '(' (4007,16)-(4007,17)
                        identifier: 'aval' (4007,17)-(4007,21)
                        ): ')' (4007,21)-(4007,22)
                  ;: ';' (4007,22)-(4007,23)
              if_statement (4008,6)-(4029,7)
                if: 'if' (4008,6)-(4008,8)
                parenthesized_expression (4008,9)-(4008,17)
                  (: '(' (4008,9)-(4008,10)
                  identifier: 'indord' (4008,10)-(4008,16)
                  ): ')' (4008,16)-(4008,17)
                compound_statement (4008,18)-(4020,7)
                  {: '{' (4008,18)-(4008,19)
                  if_statement (4009,3)-(4019,4)
                    if: 'if' (4009,3)-(4009,5)
                    parenthesized_expression (4009,6)-(4009,33)
                      (: '(' (4009,6)-(4009,7)
                      binary_expression (4009,7)-(4009,32)
                        identifier: 'sortit' (4009,7)-(4009,13)
                        &: '&' (4009,14)-(4009,15)
                        identifier: 'SORTIT_BACKWARDS' (4009,16)-(4009,32)
                      ): ')' (4009,32)-(4009,33)
                    compound_statement (4009,34)-(4019,4)
                      {: '{' (4009,34)-(4009,35)
                      declaration (4010,7)-(4010,18)
                        primitive_type: 'char' (4010,7)-(4010,11)
                        pointer_declarator (4010,12)-(4010,17)
                          *: '*' (4010,12)-(4010,13)
                          identifier: 'copy' (4010,13)-(4010,17)
                        ;: ';' (4010,17)-(4010,18)
                      declaration (4011,7)-(4011,60)
                        primitive_type: 'char' (4011,7)-(4011,11)
                        init_declarator (4011,12)-(4011,43)
                          pointer_declarator (4011,12)-(4011,17)
                            *: '*' (4011,12)-(4011,13)
                            pointer_declarator (4011,13)-(4011,17)
                              *: '*' (4011,13)-(4011,14)
                              identifier: 'end' (4011,14)-(4011,17)
                          =: '=' (4011,18)-(4011,19)
                          binary_expression (4011,20)-(4011,43)
                            binary_expression (4011,20)-(4011,39)
                              identifier: 'aval' (4011,20)-(4011,24)
                              +: '+' (4011,25)-(4011,26)
                              call_expression (4011,27)-(4011,39)
                                identifier: 'arrlen' (4011,27)-(4011,33)
                                argument_list (4011,33)-(4011,39)
                                  (: '(' (4011,33)-(4011,34)
                                  identifier: 'aval' (4011,34)-(4011,38)
                                  ): ')' (4011,38)-(4011,39)
                            -: '-' (4011,40)-(4011,41)
                            number_literal: '1' (4011,42)-(4011,43)
                        ,: ',' (4011,43)-(4011,44)
                        init_declarator (4011,45)-(4011,59)
                          pointer_declarator (4011,45)-(4011,52)
                            *: '*' (4011,45)-(4011,46)
                            pointer_declarator (4011,46)-(4011,52)
                              *: '*' (4011,46)-(4011,47)
                              identifier: 'start' (4011,47)-(4011,52)
                          =: '=' (4011,53)-(4011,54)
                          identifier: 'aval' (4011,55)-(4011,59)
                        ;: ';' (4011,59)-(4011,60)
                      comment: '/* reverse the array */' (4013,7)-(4013,30)
                      while_statement (4014,7)-(4018,8)
                        while: 'while' (4014,7)-(4014,12)
                        parenthesized_expression (4014,13)-(4014,26)
                          (: '(' (4014,13)-(4014,14)
                          binary_expression (4014,14)-(4014,25)
                            identifier: 'start' (4014,14)-(4014,19)
                            <: '<' (4014,20)-(4014,21)
                            identifier: 'end' (4014,22)-(4014,25)
                          ): ')' (4014,25)-(4014,26)
                        compound_statement (4014,27)-(4018,8)
                          {: '{' (4014,27)-(4014,28)
                          expression_statement (4015,4)-(4015,16)
                            assignment_expression (4015,4)-(4015,15)
                              identifier: 'copy' (4015,4)-(4015,8)
                              =: '=' (4015,9)-(4015,10)
                              pointer_expression (4015,11)-(4015,15)
                                *: '*' (4015,11)-(4015,12)
                                identifier: 'end' (4015,12)-(4015,15)
                            ;: ';' (4015,15)-(4015,16)
                          expression_statement (4016,4)-(4016,20)
                            assignment_expression (4016,4)-(4016,19)
                              pointer_expression (4016,4)-(4016,10)
                                *: '*' (4016,4)-(4016,5)
                                update_expression (4016,5)-(4016,10)
                                  identifier: 'end' (4016,5)-(4016,8)
                                  --: '--' (4016,8)-(4016,10)
                              =: '=' (4016,11)-(4016,12)
                              pointer_expression (4016,13)-(4016,19)
                                *: '*' (4016,13)-(4016,14)
                                identifier: 'start' (4016,14)-(4016,19)
                            ;: ';' (4016,19)-(4016,20)
                          expression_statement (4017,4)-(4017,20)
                            assignment_expression (4017,4)-(4017,19)
                              pointer_expression (4017,4)-(4017,12)
                                *: '*' (4017,4)-(4017,5)
                                update_expression (4017,5)-(4017,12)
                                  identifier: 'start' (4017,5)-(4017,10)
                                  ++: '++' (4017,10)-(4017,12)
                              =: '=' (4017,13)-(4017,14)
                              identifier: 'copy' (4017,15)-(4017,19)
                            ;: ';' (4017,19)-(4017,20)
                          }: '}' (4018,7)-(4018,8)
                      }: '}' (4019,3)-(4019,4)
                  }: '}' (4020,6)-(4020,7)
                else_clause (4020,8)-(4029,7)
                  else: 'else' (4020,8)-(4020,12)
                  compound_statement (4020,13)-(4029,7)
                    {: '{' (4020,13)-(4020,14)
                    comment: '/*
		 * HERE: we tested if the last element of the array
		 * was not a NULL string.  Why the last element?
		 * Why didn't we expect NULL strings to work?
		 * Was it just a clumsy way of testing whether there
		 * was enough in the array to sort?
		 */' (4021,3)-(4027,6)
                    expression_statement (4028,3)-(4028,35)
                      call_expression (4028,3)-(4028,34)
                        identifier: 'strmetasort' (4028,3)-(4028,14)
                        argument_list (4028,14)-(4028,34)
                          (: '(' (4028,14)-(4028,15)
                          identifier: 'aval' (4028,15)-(4028,19)
                          ,: ',' (4028,19)-(4028,20)
                          identifier: 'sortit' (4028,21)-(4028,27)
                          ,: ',' (4028,27)-(4028,28)
                          null (4028,29)-(4028,33)
                            NULL: 'NULL' (4028,29)-(4028,33)
                          ): ')' (4028,33)-(4028,34)
                      ;: ';' (4028,34)-(4028,35)
                    }: '}' (4029,6)-(4029,7)
              }: '}' (4030,2)-(4030,3)
          if_statement (4031,2)-(4144,3)
            if: 'if' (4031,2)-(4031,4)
            parenthesized_expression (4031,5)-(4031,12)
              (: '(' (4031,5)-(4031,6)
              identifier: 'plan9' (4031,6)-(4031,11)
              ): ')' (4031,11)-(4031,12)
            compound_statement (4031,13)-(4081,3)
              {: '{' (4031,13)-(4031,14)
              comment: '/* Handle RC_EXPAND_PARAM */' (4032,6)-(4032,34)
              declaration (4033,6)-(4033,18)
                type_identifier: 'LinkNode' (4033,6)-(4033,14)
                identifier: 'tn' (4033,15)-(4033,17)
                ;: ';' (4033,17)-(4033,18)
              expression_statement (4034,6)-(4034,22)
                call_expression (4034,6)-(4034,21)
                  identifier: 'local_list1' (4034,6)-(4034,17)
                  argument_list (4034,17)-(4034,21)
                    (: '(' (4034,17)-(4034,18)
                    identifier: 'tl' (4034,18)-(4034,20)
                    ): ')' (4034,20)-(4034,21)
                ;: ';' (4034,21)-(4034,22)
              expression_statement (4036,6)-(4036,23)
                assignment_expression (4036,6)-(4036,22)
                  pointer_expression (4036,6)-(4036,13)
                    *: '*' (4036,6)-(4036,7)
                    update_expression (4036,7)-(4036,13)
                      --: '--' (4036,7)-(4036,9)
                      identifier: 'fstr' (4036,9)-(4036,13)
                  =: '=' (4036,14)-(4036,15)
                  identifier: 'Marker' (4036,16)-(4036,22)
                ;: ';' (4036,22)-(4036,23)
              expression_statement (4037,6)-(4037,27)
                call_expression (4037,6)-(4037,26)
                  identifier: 'init_list1' (4037,6)-(4037,16)
                  argument_list (4037,16)-(4037,26)
                    (: '(' (4037,16)-(4037,17)
                    identifier: 'tl' (4037,17)-(4037,19)
                    ,: ',' (4037,19)-(4037,20)
                    identifier: 'fstr' (4037,21)-(4037,25)
                    ): ')' (4037,25)-(4037,26)
                ;: ';' (4037,26)-(4037,27)
              if_statement (4038,6)-(4039,15)
                if: 'if' (4038,6)-(4038,8)
                parenthesized_expression (4038,9)-(4038,73)
                  (: '(' (4038,9)-(4038,10)
                  binary_expression (4038,10)-(4038,72)
                    unary_expression (4038,10)-(4038,15)
                      !: '!' (4038,10)-(4038,11)
                      identifier: 'eval' (4038,11)-(4038,15)
                    &&: '&&' (4038,16)-(4038,18)
                    unary_expression (4038,19)-(4038,72)
                      !: '!' (4038,19)-(4038,20)
                      call_expression (4038,20)-(4038,72)
                        identifier: 'stringsubst' (4038,20)-(4038,31)
                        argument_list (4038,31)-(4038,72)
                          (: '(' (4038,31)-(4038,32)
                          pointer_expression (4038,32)-(4038,35)
                            &: '&' (4038,32)-(4038,33)
                            identifier: 'tl' (4038,33)-(4038,35)
                          ,: ',' (4038,35)-(4038,36)
                          call_expression (4038,37)-(4038,51)
                            identifier: 'firstnode' (4038,37)-(4038,46)
                            argument_list (4038,46)-(4038,51)
                              (: '(' (4038,46)-(4038,47)
                              pointer_expression (4038,47)-(4038,50)
                                &: '&' (4038,47)-(4038,48)
                                identifier: 'tl' (4038,48)-(4038,50)
                              ): ')' (4038,50)-(4038,51)
                          ,: ',' (4038,51)-(4038,52)
                          identifier: 'ssub' (4038,53)-(4038,57)
                          ,: ',' (4038,57)-(4038,58)
                          identifier: 'ret_flags' (4038,59)-(4038,68)
                          ,: ',' (4038,68)-(4038,69)
                          number_literal: '0' (4038,70)-(4038,71)
                          ): ')' (4038,71)-(4038,72)
                  ): ')' (4038,72)-(4038,73)
                return_statement (4039,3)-(4039,15)
                  return: 'return' (4039,3)-(4039,9)
                  null (4039,10)-(4039,14)
                    NULL: 'NULL' (4039,10)-(4039,14)
                  ;: ';' (4039,14)-(4039,15)
              expression_statement (4040,6)-(4040,18)
                assignment_expression (4040,6)-(4040,17)
                  pointer_expression (4040,6)-(4040,10)
                    *: '*' (4040,6)-(4040,7)
                    identifier: 'str' (4040,7)-(4040,10)
                  =: '=' (4040,11)-(4040,12)
                  identifier: 'aptr' (4040,13)-(4040,17)
                ;: ';' (4040,17)-(4040,18)
              expression_statement (4041,6)-(4041,26)
                assignment_expression (4041,6)-(4041,25)
                  identifier: 'tn' (4041,6)-(4041,8)
                  =: '=' (4041,9)-(4041,10)
                  call_expression (4041,11)-(4041,25)
                    identifier: 'firstnode' (4041,11)-(4041,20)
                    argument_list (4041,20)-(4041,25)
                      (: '(' (4041,20)-(4041,21)
                      pointer_expression (4041,21)-(4041,24)
                        &: '&' (4041,21)-(4041,22)
                        identifier: 'tl' (4041,22)-(4041,24)
                      ): ')' (4041,24)-(4041,25)
                ;: ';' (4041,25)-(4041,26)
              while_statement (4042,6)-(4065,7)
                while: 'while' (4042,6)-(4042,11)
                parenthesized_expression (4042,12)-(4042,27)
                  (: '(' (4042,12)-(4042,13)
                  parenthesized_expression (4042,13)-(4042,26)
                    (: '(' (4042,13)-(4042,14)
                    assignment_expression (4042,14)-(4042,25)
                      identifier: 'x' (4042,14)-(4042,15)
                      =: '=' (4042,16)-(4042,17)
                      pointer_expression (4042,18)-(4042,25)
                        *: '*' (4042,18)-(4042,19)
                        update_expression (4042,19)-(4042,25)
                          identifier: 'aval' (4042,19)-(4042,23)
                          ++: '++' (4042,23)-(4042,25)
                    ): ')' (4042,25)-(4042,26)
                  ): ')' (4042,26)-(4042,27)
                compound_statement (4042,28)-(4065,7)
                  {: '{' (4042,28)-(4042,29)
                  if_statement (4043,3)-(4049,6)
                    if: 'if' (4043,3)-(4043,5)
                    parenthesized_expression (4043,6)-(4043,25)
                      (: '(' (4043,6)-(4043,7)
                      binary_expression (4043,7)-(4043,24)
                        identifier: 'prenum' (4043,7)-(4043,13)
                        ||: '||' (4043,14)-(4043,16)
                        identifier: 'postnum' (4043,17)-(4043,24)
                      ): ')' (4043,24)-(4043,25)
                    expression_statement (4044,7)-(4049,6)
                      assignment_expression (4044,7)-(4049,5)
                        identifier: 'x' (4044,7)-(4044,8)
                        =: '=' (4044,9)-(4044,10)
                        call_expression (4044,11)-(4049,5)
                          identifier: 'dopadding' (4044,11)-(4044,20)
                          argument_list (4044,20)-(4049,5)
                            (: '(' (4044,20)-(4044,21)
                            identifier: 'x' (4044,21)-(4044,22)
                            ,: ',' (4044,22)-(4044,23)
                            identifier: 'prenum' (4044,24)-(4044,30)
                            ,: ',' (4044,30)-(4044,31)
                            identifier: 'postnum' (4044,32)-(4044,39)
                            ,: ',' (4044,39)-(4044,40)
                            identifier: 'preone' (4044,41)-(4044,47)
                            ,: ',' (4044,47)-(4044,48)
                            identifier: 'postone' (4044,49)-(4044,56)
                            ,: ',' (4044,56)-(4044,57)
                            identifier: 'premul' (4045,7)-(4045,13)
                            ,: ',' (4045,13)-(4045,14)
                            identifier: 'postmul' (4045,15)-(4045,22)
                            ERROR (4046,1)-(4046,25)
                              #ifdef: '#ifdef' (4046,1)-(4046,7)
                              identifier: 'MULTIBYTE_SUPPORT' (4046,8)-(4046,25)
                            ,: ',' (4047,7)-(4047,8)
                            identifier: 'multi_width' (4047,9)-(4047,20)
                            ERROR (4048,1)-(4048,7)
                              #endif: '#endif' (4048,1)-(4048,7)
                            ): ')' (4049,4)-(4049,5)
                      ;: ';' (4049,5)-(4049,6)
                  if_statement (4050,3)-(4051,19)
                    if: 'if' (4050,3)-(4050,5)
                    parenthesized_expression (4050,6)-(4050,62)
                      (: '(' (4050,6)-(4050,7)
                      binary_expression (4050,7)-(4050,61)
                        identifier: 'eval' (4050,7)-(4050,11)
                        &&: '&&' (4050,12)-(4050,14)
                        call_expression (4050,15)-(4050,61)
                          identifier: 'subst_parse_str' (4050,15)-(4050,30)
                          argument_list (4050,30)-(4050,61)
                            (: '(' (4050,30)-(4050,31)
                            pointer_expression (4050,31)-(4050,33)
                              &: '&' (4050,31)-(4050,32)
                              identifier: 'x' (4050,32)-(4050,33)
                            ,: ',' (4050,33)-(4050,34)
                            parenthesized_expression (4050,35)-(4050,50)
                              (: '(' (4050,35)-(4050,36)
                              binary_expression (4050,36)-(4050,49)
                                identifier: 'qt' (4050,36)-(4050,38)
                                &&: '&&' (4050,39)-(4050,41)
                                unary_expression (4050,42)-(4050,49)
                                  !: '!' (4050,42)-(4050,43)
                                  identifier: 'nojoin' (4050,43)-(4050,49)
                              ): ')' (4050,49)-(4050,50)
                            ,: ',' (4050,50)-(4050,51)
                            identifier: 'quoteerr' (4050,52)-(4050,60)
                            ): ')' (4050,60)-(4050,61)
                      ): ')' (4050,61)-(4050,62)
                    return_statement (4051,7)-(4051,19)
                      return: 'return' (4051,7)-(4051,13)
                      null (4051,14)-(4051,18)
                        NULL: 'NULL' (4051,14)-(4051,18)
                      ;: ';' (4051,18)-(4051,19)
                  expression_statement (4052,3)-(4052,20)
                    assignment_expression (4052,3)-(4052,19)
                      identifier: 'xlen' (4052,3)-(4052,7)
                      =: '=' (4052,8)-(4052,9)
                      call_expression (4052,10)-(4052,19)
                        identifier: 'strlen' (4052,10)-(4052,16)
                        argument_list (4052,16)-(4052,19)
                          (: '(' (4052,16)-(4052,17)
                          identifier: 'x' (4052,17)-(4052,18)
                          ): ')' (4052,18)-(4052,19)
                    ;: ';' (4052,19)-(4052,20)
                  for_statement (4053,3)-(4064,4)
                    for: 'for' (4053,3)-(4053,6)
                    (: '(' (4053,7)-(4053,8)
                    assignment_expression (4053,8)-(4053,27)
                      identifier: 'tn' (4053,8)-(4053,10)
                      =: '=' (4053,11)-(4053,12)
                      call_expression (4053,13)-(4053,27)
                        identifier: 'firstnode' (4053,13)-(4053,22)
                        argument_list (4053,22)-(4053,27)
                          (: '(' (4053,22)-(4053,23)
                          pointer_expression (4053,23)-(4053,26)
                            &: '&' (4053,23)-(4053,24)
                            identifier: 'tl' (4053,24)-(4053,26)
                          ): ')' (4053,26)-(4053,27)
                    ;: ';' (4053,27)-(4053,28)
                    binary_expression (4054,8)-(4054,51)
                      identifier: 'tn' (4054,8)-(4054,10)
                      &&: '&&' (4054,11)-(4054,13)
                      binary_expression (4054,14)-(4054,51)
                        pointer_expression (4054,14)-(4054,41)
                          *: '*' (4054,14)-(4054,15)
                          parenthesized_expression (4054,15)-(4054,41)
                            (: '(' (4054,15)-(4054,16)
                            assignment_expression (4054,16)-(4054,40)
                              identifier: 'y' (4054,16)-(4054,17)
                              =: '=' (4054,18)-(4054,19)
                              cast_expression (4054,20)-(4054,40)
                                (: '(' (4054,20)-(4054,21)
                                type_descriptor (4054,21)-(4054,27)
                                  primitive_type: 'char' (4054,21)-(4054,25)
                                  abstract_pointer_declarator (4054,26)-(4054,27)
                                    *: '*' (4054,26)-(4054,27)
                                ): ')' (4054,27)-(4054,28)
                                call_expression (4054,29)-(4054,40)
                                  identifier: 'getdata' (4054,29)-(4054,36)
                                  argument_list (4054,36)-(4054,40)
                                    (: '(' (4054,36)-(4054,37)
                                    identifier: 'tn' (4054,37)-(4054,39)
                                    ): ')' (4054,39)-(4054,40)
                            ): ')' (4054,40)-(4054,41)
                        ==: '==' (4054,42)-(4054,44)
                        identifier: 'Marker' (4054,45)-(4054,51)
                    ;: ';' (4054,51)-(4054,52)
                    call_expression (4055,8)-(4055,19)
                      identifier: 'incnode' (4055,8)-(4055,15)
                      argument_list (4055,15)-(4055,19)
                        (: '(' (4055,15)-(4055,16)
                        identifier: 'tn' (4055,16)-(4055,18)
                        ): ')' (4055,18)-(4055,19)
                    ): ')' (4055,19)-(4055,20)
                    compound_statement (4055,21)-(4064,4)
                      {: '{' (4055,21)-(4055,22)
                      expression_statement (4056,7)-(4057,18)
                        call_expression (4056,7)-(4057,17)
                          identifier: 'strcatsub' (4056,7)-(4056,16)
                          argument_list (4056,16)-(4057,17)
                            (: '(' (4056,16)-(4056,17)
                            pointer_expression (4056,17)-(4056,19)
                              &: '&' (4056,17)-(4056,18)
                              identifier: 'y' (4056,18)-(4056,19)
                            ,: ',' (4056,19)-(4056,20)
                            identifier: 'ostr' (4056,21)-(4056,25)
                            ,: ',' (4056,25)-(4056,26)
                            identifier: 'aptr' (4056,27)-(4056,31)
                            ,: ',' (4056,31)-(4056,32)
                            identifier: 'x' (4056,33)-(4056,34)
                            ,: ',' (4056,34)-(4056,35)
                            identifier: 'xlen' (4056,36)-(4056,40)
                            ,: ',' (4056,40)-(4056,41)
                            binary_expression (4056,42)-(4056,47)
                              identifier: 'y' (4056,42)-(4056,43)
                              +: '+' (4056,44)-(4056,45)
                              number_literal: '1' (4056,46)-(4056,47)
                            ,: ',' (4056,47)-(4056,48)
                            identifier: 'globsubst' (4056,49)-(4056,58)
                            ,: ',' (4056,58)-(4056,59)
                            identifier: 'copied' (4057,10)-(4057,16)
                            ): ')' (4057,16)-(4057,17)
                        ;: ';' (4057,17)-(4057,18)
                      if_statement (4058,7)-(4059,29)
                        if: 'if' (4058,7)-(4058,9)
                        parenthesized_expression (4058,10)-(4058,35)
                          (: '(' (4058,10)-(4058,11)
                          binary_expression (4058,11)-(4058,34)
                            binary_expression (4058,11)-(4058,20)
                              identifier: 'qt' (4058,11)-(4058,13)
                              &&: '&&' (4058,14)-(4058,16)
                              unary_expression (4058,17)-(4058,20)
                                !: '!' (4058,17)-(4058,18)
                                pointer_expression (4058,18)-(4058,20)
                                  *: '*' (4058,18)-(4058,19)
                                  identifier: 'y' (4058,19)-(4058,20)
                            &&: '&&' (4058,21)-(4058,23)
                            binary_expression (4058,24)-(4058,34)
                              identifier: 'isarr' (4058,24)-(4058,29)
                              !=: '!=' (4058,30)-(4058,32)
                              number_literal: '2' (4058,33)-(4058,34)
                          ): ')' (4058,34)-(4058,35)
                        expression_statement (4059,4)-(4059,29)
                          assignment_expression (4059,4)-(4059,28)
                            identifier: 'y' (4059,4)-(4059,5)
                            =: '=' (4059,6)-(4059,7)
                            call_expression (4059,8)-(4059,28)
                              identifier: 'dupstring' (4059,8)-(4059,17)
                              argument_list (4059,17)-(4059,28)
                                (: '(' (4059,17)-(4059,18)
                                identifier: 'nulstring' (4059,18)-(4059,27)
                                ): ')' (4059,27)-(4059,28)
                          ;: ';' (4059,28)-(4059,29)
                      if_statement (4060,7)-(4063,49)
                        if: 'if' (4060,7)-(4060,9)
                        parenthesized_expression (4060,10)-(4060,17)
                          (: '(' (4060,10)-(4060,11)
                          identifier: 'plan9' (4060,11)-(4060,16)
                          ): ')' (4060,16)-(4060,17)
                        expression_statement (4061,4)-(4061,38)
                          comma_expression (4061,4)-(4061,37)
                            call_expression (4061,4)-(4061,26)
                              identifier: 'setdata' (4061,4)-(4061,11)
                              argument_list (4061,11)-(4061,26)
                                (: '(' (4061,11)-(4061,12)
                                identifier: 'n' (4061,12)-(4061,13)
                                ,: ',' (4061,13)-(4061,14)
                                cast_expression (4061,15)-(4061,25)
                                  (: '(' (4061,15)-(4061,16)
                                  type_descriptor (4061,16)-(4061,22)
                                    primitive_type: 'void' (4061,16)-(4061,20)
                                    abstract_pointer_declarator (4061,21)-(4061,22)
                                      *: '*' (4061,21)-(4061,22)
                                  ): ')' (4061,22)-(4061,23)
                                  identifier: 'y' (4061,24)-(4061,25)
                                ): ')' (4061,25)-(4061,26)
                            ,: ',' (4061,26)-(4061,27)
                            assignment_expression (4061,28)-(4061,37)
                              identifier: 'plan9' (4061,28)-(4061,33)
                              =: '=' (4061,34)-(4061,35)
                              number_literal: '0' (4061,36)-(4061,37)
                          ;: ';' (4061,37)-(4061,38)
                        else_clause (4062,7)-(4063,49)
                          else: 'else' (4062,7)-(4062,11)
                          expression_statement (4063,4)-(4063,49)
                            comma_expression (4063,4)-(4063,48)
                              call_expression (4063,4)-(4063,36)
                                identifier: 'insertlinknode' (4063,4)-(4063,18)
                                argument_list (4063,18)-(4063,36)
                                  (: '(' (4063,18)-(4063,19)
                                  identifier: 'l' (4063,19)-(4063,20)
                                  ,: ',' (4063,20)-(4063,21)
                                  identifier: 'n' (4063,22)-(4063,23)
                                  ,: ',' (4063,23)-(4063,24)
                                  cast_expression (4063,25)-(4063,35)
                                    (: '(' (4063,25)-(4063,26)
                                    type_descriptor (4063,26)-(4063,32)
                                      primitive_type: 'void' (4063,26)-(4063,30)
                                      abstract_pointer_declarator (4063,31)-(4063,32)
                                        *: '*' (4063,31)-(4063,32)
                                    ): ')' (4063,32)-(4063,33)
                                    identifier: 'y' (4063,34)-(4063,35)
                                  ): ')' (4063,35)-(4063,36)
                              ,: ',' (4063,36)-(4063,37)
                              call_expression (4063,38)-(4063,48)
                                identifier: 'incnode' (4063,38)-(4063,45)
                                argument_list (4063,45)-(4063,48)
                                  (: '(' (4063,45)-(4063,46)
                                  identifier: 'n' (4063,46)-(4063,47)
                                  ): ')' (4063,47)-(4063,48)
                            ;: ';' (4063,48)-(4063,49)
                      }: '}' (4064,3)-(4064,4)
                  }: '}' (4065,6)-(4065,7)
              for_statement (4066,6)-(4076,7)
                for: 'for' (4066,6)-(4066,9)
                (: '(' (4066,10)-(4066,11)
                ;: ';' (4066,11)-(4066,12)
                identifier: 'tn' (4066,13)-(4066,15)
                ;: ';' (4066,15)-(4066,16)
                call_expression (4066,17)-(4066,28)
                  identifier: 'incnode' (4066,17)-(4066,24)
                  argument_list (4066,24)-(4066,28)
                    (: '(' (4066,24)-(4066,25)
                    identifier: 'tn' (4066,25)-(4066,27)
                    ): ')' (4066,27)-(4066,28)
                ): ')' (4066,28)-(4066,29)
                compound_statement (4066,30)-(4076,7)
                  {: '{' (4066,30)-(4066,31)
                  expression_statement (4067,3)-(4067,28)
                    assignment_expression (4067,3)-(4067,27)
                      identifier: 'y' (4067,3)-(4067,4)
                      =: '=' (4067,5)-(4067,6)
                      cast_expression (4067,7)-(4067,27)
                        (: '(' (4067,7)-(4067,8)
                        type_descriptor (4067,8)-(4067,14)
                          primitive_type: 'char' (4067,8)-(4067,12)
                          abstract_pointer_declarator (4067,13)-(4067,14)
                            *: '*' (4067,13)-(4067,14)
                        ): ')' (4067,14)-(4067,15)
                        call_expression (4067,16)-(4067,27)
                          identifier: 'getdata' (4067,16)-(4067,23)
                          argument_list (4067,23)-(4067,27)
                            (: '(' (4067,23)-(4067,24)
                            identifier: 'tn' (4067,24)-(4067,26)
                            ): ')' (4067,26)-(4067,27)
                    ;: ';' (4067,27)-(4067,28)
                  if_statement (4068,3)-(4069,16)
                    if: 'if' (4068,3)-(4068,5)
                    parenthesized_expression (4068,6)-(4068,20)
                      (: '(' (4068,6)-(4068,7)
                      binary_expression (4068,7)-(4068,19)
                        pointer_expression (4068,7)-(4068,9)
                          *: '*' (4068,7)-(4068,8)
                          identifier: 'y' (4068,8)-(4068,9)
                        ==: '==' (4068,10)-(4068,12)
                        identifier: 'Marker' (4068,13)-(4068,19)
                      ): ')' (4068,19)-(4068,20)
                    continue_statement (4069,7)-(4069,16)
                      continue: 'continue' (4069,7)-(4069,15)
                      ;: ';' (4069,15)-(4069,16)
                  if_statement (4070,3)-(4071,32)
                    if: 'if' (4070,3)-(4070,5)
                    parenthesized_expression (4070,6)-(4070,31)
                      (: '(' (4070,6)-(4070,7)
                      binary_expression (4070,7)-(4070,30)
                        binary_expression (4070,7)-(4070,16)
                          identifier: 'qt' (4070,7)-(4070,9)
                          &&: '&&' (4070,10)-(4070,12)
                          unary_expression (4070,13)-(4070,16)
                            !: '!' (4070,13)-(4070,14)
                            pointer_expression (4070,14)-(4070,16)
                              *: '*' (4070,14)-(4070,15)
                              identifier: 'y' (4070,15)-(4070,16)
                        &&: '&&' (4070,17)-(4070,19)
                        binary_expression (4070,20)-(4070,30)
                          identifier: 'isarr' (4070,20)-(4070,25)
                          !=: '!=' (4070,26)-(4070,28)
                          number_literal: '2' (4070,29)-(4070,30)
                      ): ')' (4070,30)-(4070,31)
                    expression_statement (4071,7)-(4071,32)
                      assignment_expression (4071,7)-(4071,31)
                        identifier: 'y' (4071,7)-(4071,8)
                        =: '=' (4071,9)-(4071,10)
                        call_expression (4071,11)-(4071,31)
                          identifier: 'dupstring' (4071,11)-(4071,20)
                          argument_list (4071,20)-(4071,31)
                            (: '(' (4071,20)-(4071,21)
                            identifier: 'nulstring' (4071,21)-(4071,30)
                            ): ')' (4071,30)-(4071,31)
                      ;: ';' (4071,31)-(4071,32)
                  if_statement (4072,3)-(4075,52)
                    if: 'if' (4072,3)-(4072,5)
                    parenthesized_expression (4072,6)-(4072,13)
                      (: '(' (4072,6)-(4072,7)
                      identifier: 'plan9' (4072,7)-(4072,12)
                      ): ')' (4072,12)-(4072,13)
                    expression_statement (4073,7)-(4073,41)
                      comma_expression (4073,7)-(4073,40)
                        call_expression (4073,7)-(4073,29)
                          identifier: 'setdata' (4073,7)-(4073,14)
                          argument_list (4073,14)-(4073,29)
                            (: '(' (4073,14)-(4073,15)
                            identifier: 'n' (4073,15)-(4073,16)
                            ,: ',' (4073,16)-(4073,17)
                            cast_expression (4073,18)-(4073,28)
                              (: '(' (4073,18)-(4073,19)
                              type_descriptor (4073,19)-(4073,25)
                                primitive_type: 'void' (4073,19)-(4073,23)
                                abstract_pointer_declarator (4073,24)-(4073,25)
                                  *: '*' (4073,24)-(4073,25)
                              ): ')' (4073,25)-(4073,26)
                              identifier: 'y' (4073,27)-(4073,28)
                            ): ')' (4073,28)-(4073,29)
                        ,: ',' (4073,29)-(4073,30)
                        assignment_expression (4073,31)-(4073,40)
                          identifier: 'plan9' (4073,31)-(4073,36)
                          =: '=' (4073,37)-(4073,38)
                          number_literal: '0' (4073,39)-(4073,40)
                      ;: ';' (4073,40)-(4073,41)
                    else_clause (4074,3)-(4075,52)
                      else: 'else' (4074,3)-(4074,7)
                      expression_statement (4075,7)-(4075,52)
                        comma_expression (4075,7)-(4075,51)
                          call_expression (4075,7)-(4075,39)
                            identifier: 'insertlinknode' (4075,7)-(4075,21)
                            argument_list (4075,21)-(4075,39)
                              (: '(' (4075,21)-(4075,22)
                              identifier: 'l' (4075,22)-(4075,23)
                              ,: ',' (4075,23)-(4075,24)
                              identifier: 'n' (4075,25)-(4075,26)
                              ,: ',' (4075,26)-(4075,27)
                              cast_expression (4075,28)-(4075,38)
                                (: '(' (4075,28)-(4075,29)
                                type_descriptor (4075,29)-(4075,35)
                                  primitive_type: 'void' (4075,29)-(4075,33)
                                  abstract_pointer_declarator (4075,34)-(4075,35)
                                    *: '*' (4075,34)-(4075,35)
                                ): ')' (4075,35)-(4075,36)
                                identifier: 'y' (4075,37)-(4075,38)
                              ): ')' (4075,38)-(4075,39)
                          ,: ',' (4075,39)-(4075,40)
                          call_expression (4075,41)-(4075,51)
                            identifier: 'incnode' (4075,41)-(4075,48)
                            argument_list (4075,48)-(4075,51)
                              (: '(' (4075,48)-(4075,49)
                              identifier: 'n' (4075,49)-(4075,50)
                              ): ')' (4075,50)-(4075,51)
                        ;: ';' (4075,51)-(4075,52)
                  }: '}' (4076,6)-(4076,7)
              if_statement (4077,6)-(4080,7)
                if: 'if' (4077,6)-(4077,8)
                parenthesized_expression (4077,9)-(4077,16)
                  (: '(' (4077,9)-(4077,10)
                  identifier: 'plan9' (4077,10)-(4077,15)
                  ): ')' (4077,15)-(4077,16)
                compound_statement (4077,17)-(4080,7)
                  {: '{' (4077,17)-(4077,18)
                  expression_statement (4078,3)-(4078,18)
                    call_expression (4078,3)-(4078,17)
                      identifier: 'uremnode' (4078,3)-(4078,11)
                      argument_list (4078,11)-(4078,17)
                        (: '(' (4078,11)-(4078,12)
                        identifier: 'l' (4078,12)-(4078,13)
                        ,: ',' (4078,13)-(4078,14)
                        identifier: 'n' (4078,15)-(4078,16)
                        ): ')' (4078,16)-(4078,17)
                    ;: ';' (4078,17)-(4078,18)
                  return_statement (4079,3)-(4079,12)
                    return: 'return' (4079,3)-(4079,9)
                    identifier: 'n' (4079,10)-(4079,11)
                    ;: ';' (4079,11)-(4079,12)
                  }: '}' (4080,6)-(4080,7)
              }: '}' (4081,2)-(4081,3)
            else_clause (4081,4)-(4144,3)
              else: 'else' (4081,4)-(4081,8)
              compound_statement (4081,9)-(4144,3)
                {: '{' (4081,9)-(4081,10)
                comment: '/*
	     * Not RC_EXPAND_PARAM: simply join the first and
	     * last values.
	     * TODO: how about removing the restriction that
	     * aval[1] is non-NULL to promote consistency?, or
	     * simply changing the test so that we drop into
	     * the scalar branch, instead of tricking isarr?
	     */' (4082,6)-(4089,9)
                expression_statement (4090,6)-(4090,18)
                  assignment_expression (4090,6)-(4090,17)
                    identifier: 'x' (4090,6)-(4090,7)
                    =: '=' (4090,8)-(4090,9)
                    subscript_expression (4090,10)-(4090,17)
                      identifier: 'aval' (4090,10)-(4090,14)
                      [: '[' (4090,14)-(4090,15)
                      number_literal: '0' (4090,15)-(4090,16)
                      ]: ']' (4090,16)-(4090,17)
                  ;: ';' (4090,17)-(4090,18)
                if_statement (4091,6)-(4097,9)
                  if: 'if' (4091,6)-(4091,8)
                  parenthesized_expression (4091,9)-(4091,28)
                    (: '(' (4091,9)-(4091,10)
                    binary_expression (4091,10)-(4091,27)
                      identifier: 'prenum' (4091,10)-(4091,16)
                      ||: '||' (4091,17)-(4091,19)
                      identifier: 'postnum' (4091,20)-(4091,27)
                    ): ')' (4091,27)-(4091,28)
                  expression_statement (4092,3)-(4097,9)
                    assignment_expression (4092,3)-(4097,8)
                      identifier: 'x' (4092,3)-(4092,4)
                      =: '=' (4092,5)-(4092,6)
                      call_expression (4092,7)-(4097,8)
                        identifier: 'dopadding' (4092,7)-(4092,16)
                        argument_list (4092,16)-(4097,8)
                          (: '(' (4092,16)-(4092,17)
                          identifier: 'x' (4092,17)-(4092,18)
                          ,: ',' (4092,18)-(4092,19)
                          identifier: 'prenum' (4092,20)-(4092,26)
                          ,: ',' (4092,26)-(4092,27)
                          identifier: 'postnum' (4092,28)-(4092,35)
                          ,: ',' (4092,35)-(4092,36)
                          identifier: 'preone' (4092,37)-(4092,43)
                          ,: ',' (4092,43)-(4092,44)
                          identifier: 'postone' (4092,45)-(4092,52)
                          ,: ',' (4092,52)-(4092,53)
                          identifier: 'premul' (4093,10)-(4093,16)
                          ,: ',' (4093,16)-(4093,17)
                          identifier: 'postmul' (4093,18)-(4093,25)
                          ERROR (4094,1)-(4094,25)
                            #ifdef: '#ifdef' (4094,1)-(4094,7)
                            identifier: 'MULTIBYTE_SUPPORT' (4094,8)-(4094,25)
                          ,: ',' (4095,10)-(4095,11)
                          identifier: 'multi_width' (4095,12)-(4095,23)
                          ERROR (4096,1)-(4096,7)
                            #endif: '#endif' (4096,1)-(4096,7)
                          ): ')' (4097,7)-(4097,8)
                    ;: ';' (4097,8)-(4097,9)
                if_statement (4098,6)-(4099,15)
                  if: 'if' (4098,6)-(4098,8)
                  parenthesized_expression (4098,9)-(4098,65)
                    (: '(' (4098,9)-(4098,10)
                    binary_expression (4098,10)-(4098,64)
                      identifier: 'eval' (4098,10)-(4098,14)
                      &&: '&&' (4098,15)-(4098,17)
                      call_expression (4098,18)-(4098,64)
                        identifier: 'subst_parse_str' (4098,18)-(4098,33)
                        argument_list (4098,33)-(4098,64)
                          (: '(' (4098,33)-(4098,34)
                          pointer_expression (4098,34)-(4098,36)
                            &: '&' (4098,34)-(4098,35)
                            identifier: 'x' (4098,35)-(4098,36)
                          ,: ',' (4098,36)-(4098,37)
                          parenthesized_expression (4098,38)-(4098,53)
                            (: '(' (4098,38)-(4098,39)
                            binary_expression (4098,39)-(4098,52)
                              identifier: 'qt' (4098,39)-(4098,41)
                              &&: '&&' (4098,42)-(4098,44)
                              unary_expression (4098,45)-(4098,52)
                                !: '!' (4098,45)-(4098,46)
                                identifier: 'nojoin' (4098,46)-(4098,52)
                            ): ')' (4098,52)-(4098,53)
                          ,: ',' (4098,53)-(4098,54)
                          identifier: 'quoteerr' (4098,55)-(4098,63)
                          ): ')' (4098,63)-(4098,64)
                    ): ')' (4098,64)-(4098,65)
                  return_statement (4099,3)-(4099,15)
                    return: 'return' (4099,3)-(4099,9)
                    null (4099,10)-(4099,14)
                      NULL: 'NULL' (4099,10)-(4099,14)
                    ;: ';' (4099,14)-(4099,15)
                expression_statement (4100,6)-(4100,23)
                  assignment_expression (4100,6)-(4100,22)
                    identifier: 'xlen' (4100,6)-(4100,10)
                    =: '=' (4100,11)-(4100,12)
                    call_expression (4100,13)-(4100,22)
                      identifier: 'strlen' (4100,13)-(4100,19)
                      argument_list (4100,19)-(4100,22)
                        (: '(' (4100,19)-(4100,20)
                        identifier: 'x' (4100,20)-(4100,21)
                        ): ')' (4100,21)-(4100,22)
                  ;: ';' (4100,22)-(4100,23)
                expression_statement (4101,6)-(4101,66)
                  call_expression (4101,6)-(4101,65)
                    identifier: 'strcatsub' (4101,6)-(4101,15)
                    argument_list (4101,15)-(4101,65)
                      (: '(' (4101,15)-(4101,16)
                      pointer_expression (4101,16)-(4101,18)
                        &: '&' (4101,16)-(4101,17)
                        identifier: 'y' (4101,17)-(4101,18)
                      ,: ',' (4101,18)-(4101,19)
                      identifier: 'ostr' (4101,20)-(4101,24)
                      ,: ',' (4101,24)-(4101,25)
                      identifier: 'aptr' (4101,26)-(4101,30)
                      ,: ',' (4101,30)-(4101,31)
                      identifier: 'x' (4101,32)-(4101,33)
                      ,: ',' (4101,33)-(4101,34)
                      identifier: 'xlen' (4101,35)-(4101,39)
                      ,: ',' (4101,39)-(4101,40)
                      null (4101,41)-(4101,45)
                        NULL: 'NULL' (4101,41)-(4101,45)
                      ,: ',' (4101,45)-(4101,46)
                      identifier: 'globsubst' (4101,47)-(4101,56)
                      ,: ',' (4101,56)-(4101,57)
                      identifier: 'copied' (4101,58)-(4101,64)
                      ): ')' (4101,64)-(4101,65)
                  ;: ';' (4101,65)-(4101,66)
                if_statement (4102,6)-(4103,28)
                  if: 'if' (4102,6)-(4102,8)
                  parenthesized_expression (4102,9)-(4102,34)
                    (: '(' (4102,9)-(4102,10)
                    binary_expression (4102,10)-(4102,33)
                      binary_expression (4102,10)-(4102,19)
                        identifier: 'qt' (4102,10)-(4102,12)
                        &&: '&&' (4102,13)-(4102,15)
                        unary_expression (4102,16)-(4102,19)
                          !: '!' (4102,16)-(4102,17)
                          pointer_expression (4102,17)-(4102,19)
                            *: '*' (4102,17)-(4102,18)
                            identifier: 'y' (4102,18)-(4102,19)
                      &&: '&&' (4102,20)-(4102,22)
                      binary_expression (4102,23)-(4102,33)
                        identifier: 'isarr' (4102,23)-(4102,28)
                        !=: '!=' (4102,29)-(4102,31)
                        number_literal: '2' (4102,32)-(4102,33)
                    ): ')' (4102,33)-(4102,34)
                  expression_statement (4103,3)-(4103,28)
                    assignment_expression (4103,3)-(4103,27)
                      identifier: 'y' (4103,3)-(4103,4)
                      =: '=' (4103,5)-(4103,6)
                      call_expression (4103,7)-(4103,27)
                        identifier: 'dupstring' (4103,7)-(4103,16)
                        argument_list (4103,16)-(4103,27)
                          (: '(' (4103,16)-(4103,17)
                          identifier: 'nulstring' (4103,17)-(4103,26)
                          ): ')' (4103,26)-(4103,27)
                    ;: ';' (4103,27)-(4103,28)
                expression_statement (4104,6)-(4104,29)
                  call_expression (4104,6)-(4104,28)
                    identifier: 'setdata' (4104,6)-(4104,13)
                    argument_list (4104,13)-(4104,28)
                      (: '(' (4104,13)-(4104,14)
                      identifier: 'n' (4104,14)-(4104,15)
                      ,: ',' (4104,15)-(4104,16)
                      cast_expression (4104,17)-(4104,27)
                        (: '(' (4104,17)-(4104,18)
                        type_descriptor (4104,18)-(4104,24)
                          primitive_type: 'void' (4104,18)-(4104,22)
                          abstract_pointer_declarator (4104,23)-(4104,24)
                            *: '*' (4104,23)-(4104,24)
                        ): ')' (4104,24)-(4104,25)
                        identifier: 'y' (4104,26)-(4104,27)
                      ): ')' (4104,27)-(4104,28)
                  ;: ';' (4104,28)-(4104,29)
                expression_statement (4106,6)-(4106,12)
                  assignment_expression (4106,6)-(4106,11)
                    identifier: 'i' (4106,6)-(4106,7)
                    =: '=' (4106,8)-(4106,9)
                    number_literal: '1' (4106,10)-(4106,11)
                  ;: ';' (4106,11)-(4106,12)
                comment: '/* aval[1] is non-null here */' (4107,6)-(4107,36)
                while_statement (4108,6)-(4127,7)
                  while: 'while' (4108,6)-(4108,11)
                  parenthesized_expression (4108,12)-(4108,25)
                    (: '(' (4108,12)-(4108,13)
                    subscript_expression (4108,13)-(4108,24)
                      identifier: 'aval' (4108,13)-(4108,17)
                      [: '[' (4108,17)-(4108,18)
                      binary_expression (4108,18)-(4108,23)
                        identifier: 'i' (4108,18)-(4108,19)
                        +: '+' (4108,20)-(4108,21)
                        number_literal: '1' (4108,22)-(4108,23)
                      ]: ']' (4108,23)-(4108,24)
                    ): ')' (4108,24)-(4108,25)
                  compound_statement (4108,26)-(4127,7)
                    {: '{' (4108,26)-(4108,27)
                    expression_statement (4109,3)-(4109,17)
                      assignment_expression (4109,3)-(4109,16)
                        identifier: 'x' (4109,3)-(4109,4)
                        =: '=' (4109,5)-(4109,6)
                        subscript_expression (4109,7)-(4109,16)
                          identifier: 'aval' (4109,7)-(4109,11)
                          [: '[' (4109,11)-(4109,12)
                          update_expression (4109,12)-(4109,15)
                            identifier: 'i' (4109,12)-(4109,13)
                            ++: '++' (4109,13)-(4109,15)
                          ]: ']' (4109,15)-(4109,16)
                      ;: ';' (4109,16)-(4109,17)
                    if_statement (4110,3)-(4116,6)
                      if: 'if' (4110,3)-(4110,5)
                      parenthesized_expression (4110,6)-(4110,25)
                        (: '(' (4110,6)-(4110,7)
                        binary_expression (4110,7)-(4110,24)
                          identifier: 'prenum' (4110,7)-(4110,13)
                          ||: '||' (4110,14)-(4110,16)
                          identifier: 'postnum' (4110,17)-(4110,24)
                        ): ')' (4110,24)-(4110,25)
                      expression_statement (4111,7)-(4116,6)
                        assignment_expression (4111,7)-(4116,5)
                          identifier: 'x' (4111,7)-(4111,8)
                          =: '=' (4111,9)-(4111,10)
                          call_expression (4111,11)-(4116,5)
                            identifier: 'dopadding' (4111,11)-(4111,20)
                            argument_list (4111,20)-(4116,5)
                              (: '(' (4111,20)-(4111,21)
                              identifier: 'x' (4111,21)-(4111,22)
                              ,: ',' (4111,22)-(4111,23)
                              identifier: 'prenum' (4111,24)-(4111,30)
                              ,: ',' (4111,30)-(4111,31)
                              identifier: 'postnum' (4111,32)-(4111,39)
                              ,: ',' (4111,39)-(4111,40)
                              identifier: 'preone' (4111,41)-(4111,47)
                              ,: ',' (4111,47)-(4111,48)
                              identifier: 'postone' (4111,49)-(4111,56)
                              ,: ',' (4111,56)-(4111,57)
                              identifier: 'premul' (4112,7)-(4112,13)
                              ,: ',' (4112,13)-(4112,14)
                              identifier: 'postmul' (4112,15)-(4112,22)
                              ERROR (4113,1)-(4113,25)
                                #ifdef: '#ifdef' (4113,1)-(4113,7)
                                identifier: 'MULTIBYTE_SUPPORT' (4113,8)-(4113,25)
                              ,: ',' (4114,7)-(4114,8)
                              identifier: 'multi_width' (4114,9)-(4114,20)
                              ERROR (4115,1)-(4115,7)
                                #endif: '#endif' (4115,1)-(4115,7)
                              ): ')' (4116,4)-(4116,5)
                        ;: ';' (4116,5)-(4116,6)
                    if_statement (4117,3)-(4118,19)
                      if: 'if' (4117,3)-(4117,5)
                      parenthesized_expression (4117,6)-(4117,62)
                        (: '(' (4117,6)-(4117,7)
                        binary_expression (4117,7)-(4117,61)
                          identifier: 'eval' (4117,7)-(4117,11)
                          &&: '&&' (4117,12)-(4117,14)
                          call_expression (4117,15)-(4117,61)
                            identifier: 'subst_parse_str' (4117,15)-(4117,30)
                            argument_list (4117,30)-(4117,61)
                              (: '(' (4117,30)-(4117,31)
                              pointer_expression (4117,31)-(4117,33)
                                &: '&' (4117,31)-(4117,32)
                                identifier: 'x' (4117,32)-(4117,33)
                              ,: ',' (4117,33)-(4117,34)
                              parenthesized_expression (4117,35)-(4117,50)
                                (: '(' (4117,35)-(4117,36)
                                binary_expression (4117,36)-(4117,49)
                                  identifier: 'qt' (4117,36)-(4117,38)
                                  &&: '&&' (4117,39)-(4117,41)
                                  unary_expression (4117,42)-(4117,49)
                                    !: '!' (4117,42)-(4117,43)
                                    identifier: 'nojoin' (4117,43)-(4117,49)
                                ): ')' (4117,49)-(4117,50)
                              ,: ',' (4117,50)-(4117,51)
                              identifier: 'quoteerr' (4117,52)-(4117,60)
                              ): ')' (4117,60)-(4117,61)
                        ): ')' (4117,61)-(4117,62)
                      return_statement (4118,7)-(4118,19)
                        return: 'return' (4118,7)-(4118,13)
                        null (4118,14)-(4118,18)
                          NULL: 'NULL' (4118,14)-(4118,18)
                        ;: ';' (4118,18)-(4118,19)
                    if_statement (4119,3)-(4125,4)
                      if: 'if' (4119,3)-(4119,5)
                      parenthesized_expression (4119,6)-(4119,31)
                        (: '(' (4119,6)-(4119,7)
                        binary_expression (4119,7)-(4119,30)
                          binary_expression (4119,7)-(4119,16)
                            identifier: 'qt' (4119,7)-(4119,9)
                            &&: '&&' (4119,10)-(4119,12)
                            unary_expression (4119,13)-(4119,16)
                              !: '!' (4119,13)-(4119,14)
                              pointer_expression (4119,14)-(4119,16)
                                *: '*' (4119,14)-(4119,15)
                                identifier: 'x' (4119,15)-(4119,16)
                          &&: '&&' (4119,17)-(4119,19)
                          binary_expression (4119,20)-(4119,30)
                            identifier: 'isarr' (4119,20)-(4119,25)
                            !=: '!=' (4119,26)-(4119,28)
                            number_literal: '2' (4119,29)-(4119,30)
                        ): ')' (4119,30)-(4119,31)
                      expression_statement (4120,7)-(4120,32)
                        assignment_expression (4120,7)-(4120,31)
                          identifier: 'y' (4120,7)-(4120,8)
                          =: '=' (4120,9)-(4120,10)
                          call_expression (4120,11)-(4120,31)
                            identifier: 'dupstring' (4120,11)-(4120,20)
                            argument_list (4120,20)-(4120,31)
                              (: '(' (4120,20)-(4120,21)
                              identifier: 'nulstring' (4120,21)-(4120,30)
                              ): ')' (4120,30)-(4120,31)
                        ;: ';' (4120,31)-(4120,32)
                      else_clause (4121,3)-(4125,4)
                        else: 'else' (4121,3)-(4121,7)
                        compound_statement (4121,8)-(4125,4)
                          {: '{' (4121,8)-(4121,9)
                          expression_statement (4122,7)-(4122,24)
                            assignment_expression (4122,7)-(4122,23)
                              identifier: 'y' (4122,7)-(4122,8)
                              =: '=' (4122,9)-(4122,10)
                              call_expression (4122,11)-(4122,23)
                                identifier: 'dupstring' (4122,11)-(4122,20)
                                argument_list (4122,20)-(4122,23)
                                  (: '(' (4122,20)-(4122,21)
                                  identifier: 'x' (4122,21)-(4122,22)
                                  ): ')' (4122,22)-(4122,23)
                            ;: ';' (4122,23)-(4122,24)
                          if_statement (4123,7)-(4124,18)
                            if: 'if' (4123,7)-(4123,9)
                            parenthesized_expression (4123,10)-(4123,21)
                              (: '(' (4123,10)-(4123,11)
                              identifier: 'globsubst' (4123,11)-(4123,20)
                              ): ')' (4123,20)-(4123,21)
                            expression_statement (4124,4)-(4124,18)
                              call_expression (4124,4)-(4124,17)
                                identifier: 'shtokenize' (4124,4)-(4124,14)
                                argument_list (4124,14)-(4124,17)
                                  (: '(' (4124,14)-(4124,15)
                                  identifier: 'y' (4124,15)-(4124,16)
                                  ): ')' (4124,16)-(4124,17)
                              ;: ';' (4124,17)-(4124,18)
                          }: '}' (4125,3)-(4125,4)
                    expression_statement (4126,3)-(4126,48)
                      comma_expression (4126,3)-(4126,47)
                        call_expression (4126,3)-(4126,35)
                          identifier: 'insertlinknode' (4126,3)-(4126,17)
                          argument_list (4126,17)-(4126,35)
                            (: '(' (4126,17)-(4126,18)
                            identifier: 'l' (4126,18)-(4126,19)
                            ,: ',' (4126,19)-(4126,20)
                            identifier: 'n' (4126,21)-(4126,22)
                            ,: ',' (4126,22)-(4126,23)
                            cast_expression (4126,24)-(4126,34)
                              (: '(' (4126,24)-(4126,25)
                              type_descriptor (4126,25)-(4126,31)
                                primitive_type: 'void' (4126,25)-(4126,29)
                                abstract_pointer_declarator (4126,30)-(4126,31)
                                  *: '*' (4126,30)-(4126,31)
                              ): ')' (4126,31)-(4126,32)
                              identifier: 'y' (4126,33)-(4126,34)
                            ): ')' (4126,34)-(4126,35)
                        ,: ',' (4126,35)-(4126,36)
                        call_expression (4126,37)-(4126,47)
                          identifier: 'incnode' (4126,37)-(4126,44)
                          argument_list (4126,44)-(4126,47)
                            (: '(' (4126,44)-(4126,45)
                            identifier: 'n' (4126,45)-(4126,46)
                            ): ')' (4126,46)-(4126,47)
                      ;: ';' (4126,47)-(4126,48)
                    }: '}' (4127,6)-(4127,7)
                expression_statement (4129,6)-(4129,18)
                  assignment_expression (4129,6)-(4129,17)
                    identifier: 'x' (4129,6)-(4129,7)
                    =: '=' (4129,8)-(4129,9)
                    subscript_expression (4129,10)-(4129,17)
                      identifier: 'aval' (4129,10)-(4129,14)
                      [: '[' (4129,14)-(4129,15)
                      identifier: 'i' (4129,15)-(4129,16)
                      ]: ']' (4129,16)-(4129,17)
                  ;: ';' (4129,17)-(4129,18)
                if_statement (4130,6)-(4136,9)
                  if: 'if' (4130,6)-(4130,8)
                  parenthesized_expression (4130,9)-(4130,28)
                    (: '(' (4130,9)-(4130,10)
                    binary_expression (4130,10)-(4130,27)
                      identifier: 'prenum' (4130,10)-(4130,16)
                      ||: '||' (4130,17)-(4130,19)
                      identifier: 'postnum' (4130,20)-(4130,27)
                    ): ')' (4130,27)-(4130,28)
                  expression_statement (4131,3)-(4136,9)
                    assignment_expression (4131,3)-(4136,8)
                      identifier: 'x' (4131,3)-(4131,4)
                      =: '=' (4131,5)-(4131,6)
                      call_expression (4131,7)-(4136,8)
                        identifier: 'dopadding' (4131,7)-(4131,16)
                        argument_list (4131,16)-(4136,8)
                          (: '(' (4131,16)-(4131,17)
                          identifier: 'x' (4131,17)-(4131,18)
                          ,: ',' (4131,18)-(4131,19)
                          identifier: 'prenum' (4131,20)-(4131,26)
                          ,: ',' (4131,26)-(4131,27)
                          identifier: 'postnum' (4131,28)-(4131,35)
                          ,: ',' (4131,35)-(4131,36)
                          identifier: 'preone' (4131,37)-(4131,43)
                          ,: ',' (4131,43)-(4131,44)
                          identifier: 'postone' (4131,45)-(4131,52)
                          ,: ',' (4131,52)-(4131,53)
                          identifier: 'premul' (4132,10)-(4132,16)
                          ,: ',' (4132,16)-(4132,17)
                          identifier: 'postmul' (4132,18)-(4132,25)
                          ERROR (4133,1)-(4133,25)
                            #ifdef: '#ifdef' (4133,1)-(4133,7)
                            identifier: 'MULTIBYTE_SUPPORT' (4133,8)-(4133,25)
                          ,: ',' (4134,10)-(4134,11)
                          identifier: 'multi_width' (4134,12)-(4134,23)
                          ERROR (4135,1)-(4135,7)
                            #endif: '#endif' (4135,1)-(4135,7)
                          ): ')' (4136,7)-(4136,8)
                    ;: ';' (4136,8)-(4136,9)
                if_statement (4137,6)-(4138,15)
                  if: 'if' (4137,6)-(4137,8)
                  parenthesized_expression (4137,9)-(4137,65)
                    (: '(' (4137,9)-(4137,10)
                    binary_expression (4137,10)-(4137,64)
                      identifier: 'eval' (4137,10)-(4137,14)
                      &&: '&&' (4137,15)-(4137,17)
                      call_expression (4137,18)-(4137,64)
                        identifier: 'subst_parse_str' (4137,18)-(4137,33)
                        argument_list (4137,33)-(4137,64)
                          (: '(' (4137,33)-(4137,34)
                          pointer_expression (4137,34)-(4137,36)
                            &: '&' (4137,34)-(4137,35)
                            identifier: 'x' (4137,35)-(4137,36)
                          ,: ',' (4137,36)-(4137,37)
                          parenthesized_expression (4137,38)-(4137,53)
                            (: '(' (4137,38)-(4137,39)
                            binary_expression (4137,39)-(4137,52)
                              identifier: 'qt' (4137,39)-(4137,41)
                              &&: '&&' (4137,42)-(4137,44)
                              unary_expression (4137,45)-(4137,52)
                                !: '!' (4137,45)-(4137,46)
                                identifier: 'nojoin' (4137,46)-(4137,52)
                            ): ')' (4137,52)-(4137,53)
                          ,: ',' (4137,53)-(4137,54)
                          identifier: 'quoteerr' (4137,55)-(4137,63)
                          ): ')' (4137,63)-(4137,64)
                    ): ')' (4137,64)-(4137,65)
                  return_statement (4138,3)-(4138,15)
                    return: 'return' (4138,3)-(4138,9)
                    null (4138,10)-(4138,14)
                      NULL: 'NULL' (4138,10)-(4138,14)
                    ;: ';' (4138,14)-(4138,15)
                expression_statement (4139,6)-(4139,23)
                  assignment_expression (4139,6)-(4139,22)
                    identifier: 'xlen' (4139,6)-(4139,10)
                    =: '=' (4139,11)-(4139,12)
                    call_expression (4139,13)-(4139,22)
                      identifier: 'strlen' (4139,13)-(4139,19)
                      argument_list (4139,19)-(4139,22)
                        (: '(' (4139,19)-(4139,20)
                        identifier: 'x' (4139,20)-(4139,21)
                        ): ')' (4139,21)-(4139,22)
                  ;: ';' (4139,22)-(4139,23)
                expression_statement (4140,6)-(4140,73)
                  assignment_expression (4140,6)-(4140,72)
                    pointer_expression (4140,6)-(4140,10)
                      *: '*' (4140,6)-(4140,7)
                      identifier: 'str' (4140,7)-(4140,10)
                    =: '=' (4140,11)-(4140,12)
                    call_expression (4140,13)-(4140,72)
                      identifier: 'strcatsub' (4140,13)-(4140,22)
                      argument_list (4140,22)-(4140,72)
                        (: '(' (4140,22)-(4140,23)
                        pointer_expression (4140,23)-(4140,25)
                          &: '&' (4140,23)-(4140,24)
                          identifier: 'y' (4140,24)-(4140,25)
                        ,: ',' (4140,25)-(4140,26)
                        identifier: 'aptr' (4140,27)-(4140,31)
                        ,: ',' (4140,31)-(4140,32)
                        identifier: 'aptr' (4140,33)-(4140,37)
                        ,: ',' (4140,37)-(4140,38)
                        identifier: 'x' (4140,39)-(4140,40)
                        ,: ',' (4140,40)-(4140,41)
                        identifier: 'xlen' (4140,42)-(4140,46)
                        ,: ',' (4140,46)-(4140,47)
                        identifier: 'fstr' (4140,48)-(4140,52)
                        ,: ',' (4140,52)-(4140,53)
                        identifier: 'globsubst' (4140,54)-(4140,63)
                        ,: ',' (4140,63)-(4140,64)
                        identifier: 'copied' (4140,65)-(4140,71)
                        ): ')' (4140,71)-(4140,72)
                  ;: ';' (4140,72)-(4140,73)
                if_statement (4141,6)-(4142,28)
                  if: 'if' (4141,6)-(4141,8)
                  parenthesized_expression (4141,9)-(4141,34)
                    (: '(' (4141,9)-(4141,10)
                    binary_expression (4141,10)-(4141,33)
                      binary_expression (4141,10)-(4141,19)
                        identifier: 'qt' (4141,10)-(4141,12)
                        &&: '&&' (4141,13)-(4141,15)
                        unary_expression (4141,16)-(4141,19)
                          !: '!' (4141,16)-(4141,17)
                          pointer_expression (4141,17)-(4141,19)
                            *: '*' (4141,17)-(4141,18)
                            identifier: 'y' (4141,18)-(4141,19)
                      &&: '&&' (4141,20)-(4141,22)
                      binary_expression (4141,23)-(4141,33)
                        identifier: 'isarr' (4141,23)-(4141,28)
                        !=: '!=' (4141,29)-(4141,31)
                        number_literal: '2' (4141,32)-(4141,33)
                    ): ')' (4141,33)-(4141,34)
                  expression_statement (4142,3)-(4142,28)
                    assignment_expression (4142,3)-(4142,27)
                      identifier: 'y' (4142,3)-(4142,4)
                      =: '=' (4142,5)-(4142,6)
                      call_expression (4142,7)-(4142,27)
                        identifier: 'dupstring' (4142,7)-(4142,16)
                        argument_list (4142,16)-(4142,27)
                          (: '(' (4142,16)-(4142,17)
                          identifier: 'nulstring' (4142,17)-(4142,26)
                          ): ')' (4142,26)-(4142,27)
                    ;: ';' (4142,27)-(4142,28)
                expression_statement (4143,6)-(4143,51)
                  comma_expression (4143,6)-(4143,50)
                    call_expression (4143,6)-(4143,38)
                      identifier: 'insertlinknode' (4143,6)-(4143,20)
                      argument_list (4143,20)-(4143,38)
                        (: '(' (4143,20)-(4143,21)
                        identifier: 'l' (4143,21)-(4143,22)
                        ,: ',' (4143,22)-(4143,23)
                        identifier: 'n' (4143,24)-(4143,25)
                        ,: ',' (4143,25)-(4143,26)
                        cast_expression (4143,27)-(4143,37)
                          (: '(' (4143,27)-(4143,28)
                          type_descriptor (4143,28)-(4143,34)
                            primitive_type: 'void' (4143,28)-(4143,32)
                            abstract_pointer_declarator (4143,33)-(4143,34)
                              *: '*' (4143,33)-(4143,34)
                          ): ')' (4143,34)-(4143,35)
                          identifier: 'y' (4143,36)-(4143,37)
                        ): ')' (4143,37)-(4143,38)
                    ,: ',' (4143,38)-(4143,39)
                    call_expression (4143,40)-(4143,50)
                      identifier: 'incnode' (4143,40)-(4143,47)
                      argument_list (4143,47)-(4143,50)
                        (: '(' (4143,47)-(4143,48)
                        identifier: 'n' (4143,48)-(4143,49)
                        ): ')' (4143,49)-(4143,50)
                  ;: ';' (4143,50)-(4143,51)
                }: '}' (4144,2)-(4144,3)
          comment: '/* This used to omit restoring of *str and instead test
	 *   if (eval)
	 *       n = on;
	 * but that causes strange behavior of history modifiers when
	 * applied across all values of an array.  What is magic about
	 * eval here that *str seemed not to need restoring?
	 */' (4145,2)-(4151,5)
          expression_statement (4152,2)-(4152,25)
            assignment_expression (4152,2)-(4152,24)
              pointer_expression (4152,2)-(4152,6)
                *: '*' (4152,2)-(4152,3)
                identifier: 'str' (4152,3)-(4152,6)
              =: '=' (4152,7)-(4152,8)
              call_expression (4152,9)-(4152,24)
                identifier: 'getdata' (4152,9)-(4152,16)
                argument_list (4152,16)-(4152,24)
                  (: '(' (4152,16)-(4152,17)
                  assignment_expression (4152,17)-(4152,23)
                    identifier: 'n' (4152,17)-(4152,18)
                    =: '=' (4152,19)-(4152,20)
                    identifier: 'on' (4152,21)-(4152,23)
                  ): ')' (4152,23)-(4152,24)
            ;: ';' (4152,24)-(4152,25)
          }: '}' (4153,5)-(4153,6)
        else_clause (4153,7)-(4183,6)
          else: 'else' (4153,7)-(4153,11)
          compound_statement (4153,12)-(4183,6)
            {: '{' (4153,12)-(4153,13)
            comment: '/*
	 * Scalar value.  Handle last minute transformations
	 * such as left- or right-padding and the (e) flag to
	 * revaluate the result.
	 */' (4154,2)-(4158,5)
            declaration (4159,2)-(4159,11)
              primitive_type: 'int' (4159,2)-(4159,5)
              identifier: 'xlen' (4159,6)-(4159,10)
              ;: ';' (4159,10)-(4159,11)
            declaration (4160,2)-(4160,10)
              primitive_type: 'char' (4160,2)-(4160,6)
              pointer_declarator (4160,7)-(4160,9)
                *: '*' (4160,7)-(4160,8)
                identifier: 'x' (4160,8)-(4160,9)
              ;: ';' (4160,9)-(4160,10)
            declaration (4161,2)-(4161,10)
              primitive_type: 'char' (4161,2)-(4161,6)
              pointer_declarator (4161,7)-(4161,9)
                *: '*' (4161,7)-(4161,8)
                identifier: 'y' (4161,8)-(4161,9)
              ;: ';' (4161,9)-(4161,10)
            expression_statement (4163,2)-(4163,10)
              assignment_expression (4163,2)-(4163,9)
                identifier: 'x' (4163,2)-(4163,3)
                =: '=' (4163,4)-(4163,5)
                identifier: 'val' (4163,6)-(4163,9)
              ;: ';' (4163,9)-(4163,10)
            if_statement (4164,2)-(4168,3)
              if: 'if' (4164,2)-(4164,4)
              parenthesized_expression (4164,5)-(4164,9)
                (: '(' (4164,5)-(4164,6)
                unary_expression (4164,6)-(4164,8)
                  !: '!' (4164,6)-(4164,7)
                  identifier: 'x' (4164,7)-(4164,8)
                ): ')' (4164,8)-(4164,9)
              compound_statement (4164,10)-(4168,3)
                {: '{' (4164,10)-(4164,11)
                comment: '/* Shouldn't have got here with a NULL string. */' (4165,6)-(4165,55)
                expression_statement (4166,6)-(4166,46)
                  call_expression (4166,6)-(4166,45)
                    identifier: 'DPUTS' (4166,6)-(4166,11)
                    argument_list (4166,11)-(4166,45)
                      (: '(' (4166,11)-(4166,12)
                      number_literal: '1' (4166,12)-(4166,13)
                      ,: ',' (4166,13)-(4166,14)
                      string_literal (4166,15)-(4166,44)
                        ": '"' (4166,15)-(4166,16)
                        string_content: 'value is NULL in paramsubst' (4166,16)-(4166,43)
                        ": '"' (4166,43)-(4166,44)
                      ): ')' (4166,44)-(4166,45)
                  ;: ';' (4166,45)-(4166,46)
                return_statement (4167,6)-(4167,18)
                  return: 'return' (4167,6)-(4167,12)
                  null (4167,13)-(4167,17)
                    NULL: 'NULL' (4167,13)-(4167,17)
                  ;: ';' (4167,17)-(4167,18)
                }: '}' (4168,2)-(4168,3)
            if_statement (4169,2)-(4175,5)
              if: 'if' (4169,2)-(4169,4)
              parenthesized_expression (4169,5)-(4169,24)
                (: '(' (4169,5)-(4169,6)
                binary_expression (4169,6)-(4169,23)
                  identifier: 'prenum' (4169,6)-(4169,12)
                  ||: '||' (4169,13)-(4169,15)
                  identifier: 'postnum' (4169,16)-(4169,23)
                ): ')' (4169,23)-(4169,24)
              expression_statement (4170,6)-(4175,5)
                assignment_expression (4170,6)-(4175,4)
                  identifier: 'x' (4170,6)-(4170,7)
                  =: '=' (4170,8)-(4170,9)
                  call_expression (4170,10)-(4175,4)
                    identifier: 'dopadding' (4170,10)-(4170,19)
                    argument_list (4170,19)-(4175,4)
                      (: '(' (4170,19)-(4170,20)
                      identifier: 'x' (4170,20)-(4170,21)
                      ,: ',' (4170,21)-(4170,22)
                      identifier: 'prenum' (4170,23)-(4170,29)
                      ,: ',' (4170,29)-(4170,30)
                      identifier: 'postnum' (4170,31)-(4170,38)
                      ,: ',' (4170,38)-(4170,39)
                      identifier: 'preone' (4170,40)-(4170,46)
                      ,: ',' (4170,46)-(4170,47)
                      identifier: 'postone' (4170,48)-(4170,55)
                      ,: ',' (4170,55)-(4170,56)
                      identifier: 'premul' (4171,6)-(4171,12)
                      ,: ',' (4171,12)-(4171,13)
                      identifier: 'postmul' (4171,14)-(4171,21)
                      ERROR (4172,1)-(4172,25)
                        #ifdef: '#ifdef' (4172,1)-(4172,7)
                        identifier: 'MULTIBYTE_SUPPORT' (4172,8)-(4172,25)
                      ,: ',' (4173,6)-(4173,7)
                      identifier: 'multi_width' (4173,8)-(4173,19)
                      ERROR (4174,1)-(4174,7)
                        #endif: '#endif' (4174,1)-(4174,7)
                      ): ')' (4175,3)-(4175,4)
                ;: ';' (4175,4)-(4175,5)
            if_statement (4176,2)-(4177,18)
              if: 'if' (4176,2)-(4176,4)
              parenthesized_expression (4176,5)-(4176,61)
                (: '(' (4176,5)-(4176,6)
                binary_expression (4176,6)-(4176,60)
                  identifier: 'eval' (4176,6)-(4176,10)
                  &&: '&&' (4176,11)-(4176,13)
                  call_expression (4176,14)-(4176,60)
                    identifier: 'subst_parse_str' (4176,14)-(4176,29)
                    argument_list (4176,29)-(4176,60)
                      (: '(' (4176,29)-(4176,30)
                      pointer_expression (4176,30)-(4176,32)
                        &: '&' (4176,30)-(4176,31)
                        identifier: 'x' (4176,31)-(4176,32)
                      ,: ',' (4176,32)-(4176,33)
                      parenthesized_expression (4176,34)-(4176,49)
                        (: '(' (4176,34)-(4176,35)
                        binary_expression (4176,35)-(4176,48)
                          identifier: 'qt' (4176,35)-(4176,37)
                          &&: '&&' (4176,38)-(4176,40)
                          unary_expression (4176,41)-(4176,48)
                            !: '!' (4176,41)-(4176,42)
                            identifier: 'nojoin' (4176,42)-(4176,48)
                        ): ')' (4176,48)-(4176,49)
                      ,: ',' (4176,49)-(4176,50)
                      identifier: 'quoteerr' (4176,51)-(4176,59)
                      ): ')' (4176,59)-(4176,60)
                ): ')' (4176,60)-(4176,61)
              return_statement (4177,6)-(4177,18)
                return: 'return' (4177,6)-(4177,12)
                null (4177,13)-(4177,17)
                  NULL: 'NULL' (4177,13)-(4177,17)
                ;: ';' (4177,17)-(4177,18)
            expression_statement (4178,2)-(4178,19)
              assignment_expression (4178,2)-(4178,18)
                identifier: 'xlen' (4178,2)-(4178,6)
                =: '=' (4178,7)-(4178,8)
                call_expression (4178,9)-(4178,18)
                  identifier: 'strlen' (4178,9)-(4178,15)
                  argument_list (4178,15)-(4178,18)
                    (: '(' (4178,15)-(4178,16)
                    identifier: 'x' (4178,16)-(4178,17)
                    ): ')' (4178,17)-(4178,18)
              ;: ';' (4178,18)-(4178,19)
            expression_statement (4179,2)-(4179,69)
              assignment_expression (4179,2)-(4179,68)
                pointer_expression (4179,2)-(4179,6)
                  *: '*' (4179,2)-(4179,3)
                  identifier: 'str' (4179,3)-(4179,6)
                =: '=' (4179,7)-(4179,8)
                call_expression (4179,9)-(4179,68)
                  identifier: 'strcatsub' (4179,9)-(4179,18)
                  argument_list (4179,18)-(4179,68)
                    (: '(' (4179,18)-(4179,19)
                    pointer_expression (4179,19)-(4179,21)
                      &: '&' (4179,19)-(4179,20)
                      identifier: 'y' (4179,20)-(4179,21)
                    ,: ',' (4179,21)-(4179,22)
                    identifier: 'ostr' (4179,23)-(4179,27)
                    ,: ',' (4179,27)-(4179,28)
                    identifier: 'aptr' (4179,29)-(4179,33)
                    ,: ',' (4179,33)-(4179,34)
                    identifier: 'x' (4179,35)-(4179,36)
                    ,: ',' (4179,36)-(4179,37)
                    identifier: 'xlen' (4179,38)-(4179,42)
                    ,: ',' (4179,42)-(4179,43)
                    identifier: 'fstr' (4179,44)-(4179,48)
                    ,: ',' (4179,48)-(4179,49)
                    identifier: 'globsubst' (4179,50)-(4179,59)
                    ,: ',' (4179,59)-(4179,60)
                    identifier: 'copied' (4179,61)-(4179,67)
                    ): ')' (4179,67)-(4179,68)
              ;: ';' (4179,68)-(4179,69)
            if_statement (4180,2)-(4181,31)
              if: 'if' (4180,2)-(4180,4)
              parenthesized_expression (4180,5)-(4180,16)
                (: '(' (4180,5)-(4180,6)
                binary_expression (4180,6)-(4180,15)
                  identifier: 'qt' (4180,6)-(4180,8)
                  &&: '&&' (4180,9)-(4180,11)
                  unary_expression (4180,12)-(4180,15)
                    !: '!' (4180,12)-(4180,13)
                    pointer_expression (4180,13)-(4180,15)
                      *: '*' (4180,13)-(4180,14)
                      identifier: 'y' (4180,14)-(4180,15)
                ): ')' (4180,15)-(4180,16)
              expression_statement (4181,6)-(4181,31)
                assignment_expression (4181,6)-(4181,30)
                  identifier: 'y' (4181,6)-(4181,7)
                  =: '=' (4181,8)-(4181,9)
                  call_expression (4181,10)-(4181,30)
                    identifier: 'dupstring' (4181,10)-(4181,19)
                    argument_list (4181,19)-(4181,30)
                      (: '(' (4181,19)-(4181,20)
                      identifier: 'nulstring' (4181,20)-(4181,29)
                      ): ')' (4181,29)-(4181,30)
                ;: ';' (4181,30)-(4181,31)
            expression_statement (4182,2)-(4182,25)
              call_expression (4182,2)-(4182,24)
                identifier: 'setdata' (4182,2)-(4182,9)
                argument_list (4182,9)-(4182,24)
                  (: '(' (4182,9)-(4182,10)
                  identifier: 'n' (4182,10)-(4182,11)
                  ,: ',' (4182,11)-(4182,12)
                  cast_expression (4182,13)-(4182,23)
                    (: '(' (4182,13)-(4182,14)
                    type_descriptor (4182,14)-(4182,20)
                      primitive_type: 'void' (4182,14)-(4182,18)
                      abstract_pointer_declarator (4182,19)-(4182,20)
                        *: '*' (4182,19)-(4182,20)
                    ): ')' (4182,20)-(4182,21)
                    identifier: 'y' (4182,22)-(4182,23)
                  ): ')' (4182,23)-(4182,24)
              ;: ';' (4182,24)-(4182,25)
            }: '}' (4183,5)-(4183,6)
      if_statement (4184,5)-(4185,29)
        if: 'if' (4184,5)-(4184,7)
        parenthesized_expression (4184,8)-(4184,14)
          (: '(' (4184,8)-(4184,9)
          identifier: 'eval' (4184,9)-(4184,13)
          ): ')' (4184,13)-(4184,14)
        expression_statement (4185,2)-(4185,29)
          assignment_expression (4185,2)-(4185,28)
            pointer_expression (4185,2)-(4185,6)
              *: '*' (4185,2)-(4185,3)
              identifier: 'str' (4185,3)-(4185,6)
            =: '=' (4185,7)-(4185,8)
            cast_expression (4185,9)-(4185,28)
              (: '(' (4185,9)-(4185,10)
              type_descriptor (4185,10)-(4185,16)
                primitive_type: 'char' (4185,10)-(4185,14)
                abstract_pointer_declarator (4185,15)-(4185,16)
                  *: '*' (4185,15)-(4185,16)
              ): ')' (4185,16)-(4185,17)
              call_expression (4185,18)-(4185,28)
                identifier: 'getdata' (4185,18)-(4185,25)
                argument_list (4185,25)-(4185,28)
                  (: '(' (4185,25)-(4185,26)
                  identifier: 'n' (4185,26)-(4185,27)
                  ): ')' (4185,27)-(4185,28)
          ;: ';' (4185,28)-(4185,29)
      return_statement (4187,5)-(4187,14)
        return: 'return' (4187,5)-(4187,11)
        identifier: 'n' (4187,12)-(4187,13)
        ;: ';' (4187,13)-(4187,14)
      }: '}' (4188,1)-(4188,2)
  comment: '/*
 * Arithmetic substitution: `a' is the string to be evaluated, `bptr'
 * points to the beginning of the string containing it.  The tail of
 * the string is given by `rest'. *bptr is modified with the substituted
 * string. The function returns a pointer to the tail in the substituted
 * string.
 */' (4190,1)-(4196,4)
  comment: '/**/' (4198,1)-(4198,5)
  function_definition (4199,1)-(4223,2)
    storage_class_specifier (4199,1)-(4199,7)
      static: 'static' (4199,1)-(4199,7)
    primitive_type: 'char' (4199,8)-(4199,12)
    pointer_declarator (4199,13)-(4200,45)
      *: '*' (4199,13)-(4199,14)
      function_declarator (4200,1)-(4200,45)
        identifier: 'arithsubst' (4200,1)-(4200,11)
        parameter_list (4200,11)-(4200,45)
          (: '(' (4200,11)-(4200,12)
          parameter_declaration (4200,12)-(4200,19)
            primitive_type: 'char' (4200,12)-(4200,16)
            pointer_declarator (4200,17)-(4200,19)
              *: '*' (4200,17)-(4200,18)
              identifier: 'a' (4200,18)-(4200,19)
          ,: ',' (4200,19)-(4200,20)
          parameter_declaration (4200,21)-(4200,32)
            primitive_type: 'char' (4200,21)-(4200,25)
            pointer_declarator (4200,26)-(4200,32)
              *: '*' (4200,26)-(4200,27)
              pointer_declarator (4200,27)-(4200,32)
                *: '*' (4200,27)-(4200,28)
                identifier: 'bptr' (4200,28)-(4200,32)
          ,: ',' (4200,32)-(4200,33)
          parameter_declaration (4200,34)-(4200,44)
            primitive_type: 'char' (4200,34)-(4200,38)
            pointer_declarator (4200,39)-(4200,44)
              *: '*' (4200,39)-(4200,40)
              identifier: 'rest' (4200,40)-(4200,44)
          ): ')' (4200,44)-(4200,45)
    compound_statement (4201,1)-(4223,2)
      {: '{' (4201,1)-(4201,2)
      declaration (4202,5)-(4202,25)
        primitive_type: 'char' (4202,5)-(4202,9)
        init_declarator (4202,10)-(4202,20)
          pointer_declarator (4202,10)-(4202,12)
            *: '*' (4202,10)-(4202,11)
            identifier: 's' (4202,11)-(4202,12)
          =: '=' (4202,13)-(4202,14)
          pointer_expression (4202,15)-(4202,20)
            *: '*' (4202,15)-(4202,16)
            identifier: 'bptr' (4202,16)-(4202,20)
        ,: ',' (4202,20)-(4202,21)
        pointer_declarator (4202,22)-(4202,24)
          *: '*' (4202,22)-(4202,23)
          identifier: 't' (4202,23)-(4202,24)
        ;: ';' (4202,24)-(4202,25)
      declaration (4203,5)-(4203,31)
        primitive_type: 'char' (4203,5)-(4203,9)
        array_declarator (4203,10)-(4203,26)
          identifier: 'buf' (4203,10)-(4203,13)
          [: '[' (4203,13)-(4203,14)
          identifier: 'BDIGBUFSIZE' (4203,14)-(4203,25)
          ]: ']' (4203,25)-(4203,26)
        ,: ',' (4203,26)-(4203,27)
        pointer_declarator (4203,28)-(4203,30)
          *: '*' (4203,28)-(4203,29)
          identifier: 'b' (4203,29)-(4203,30)
        ;: ';' (4203,30)-(4203,31)
      declaration (4204,5)-(4204,15)
        type_identifier: 'mnumber' (4204,5)-(4204,12)
        identifier: 'v' (4204,13)-(4204,14)
        ;: ';' (4204,14)-(4204,15)
      expression_statement (4206,5)-(4206,17)
        call_expression (4206,5)-(4206,16)
          identifier: 'singsub' (4206,5)-(4206,12)
          argument_list (4206,12)-(4206,16)
            (: '(' (4206,12)-(4206,13)
            pointer_expression (4206,13)-(4206,15)
              &: '&' (4206,13)-(4206,14)
              identifier: 'a' (4206,14)-(4206,15)
            ): ')' (4206,15)-(4206,16)
        ;: ';' (4206,16)-(4206,17)
      expression_statement (4207,5)-(4207,21)
        assignment_expression (4207,5)-(4207,20)
          identifier: 'v' (4207,5)-(4207,6)
          =: '=' (4207,7)-(4207,8)
          call_expression (4207,9)-(4207,20)
            identifier: 'matheval' (4207,9)-(4207,17)
            argument_list (4207,17)-(4207,20)
              (: '(' (4207,17)-(4207,18)
              identifier: 'a' (4207,18)-(4207,19)
              ): ')' (4207,19)-(4207,20)
        ;: ';' (4207,20)-(4207,21)
      if_statement (4208,5)-(4214,6)
        if: 'if' (4208,5)-(4208,7)
        parenthesized_expression (4208,8)-(4208,45)
          (: '(' (4208,8)-(4208,9)
          binary_expression (4208,9)-(4208,44)
            parenthesized_expression (4208,9)-(4208,28)
              (: '(' (4208,9)-(4208,10)
              binary_expression (4208,10)-(4208,27)
                field_expression (4208,10)-(4208,16)
                  identifier: 'v' (4208,10)-(4208,11)
                  .: '.' (4208,11)-(4208,12)
                  field_identifier: 'type' (4208,12)-(4208,16)
                &: '&' (4208,17)-(4208,18)
                identifier: 'MN_FLOAT' (4208,19)-(4208,27)
              ): ')' (4208,27)-(4208,28)
            &&: '&&' (4208,29)-(4208,31)
            unary_expression (4208,32)-(4208,44)
              !: '!' (4208,32)-(4208,33)
              identifier: 'outputradix' (4208,33)-(4208,44)
          ): ')' (4208,44)-(4208,45)
        expression_statement (4209,2)-(4209,52)
          assignment_expression (4209,2)-(4209,51)
            identifier: 'b' (4209,2)-(4209,3)
            =: '=' (4209,4)-(4209,5)
            call_expression (4209,6)-(4209,51)
              identifier: 'convfloat_underscore' (4209,6)-(4209,26)
              argument_list (4209,26)-(4209,51)
                (: '(' (4209,26)-(4209,27)
                field_expression (4209,27)-(4209,32)
                  field_expression (4209,27)-(4209,30)
                    identifier: 'v' (4209,27)-(4209,28)
                    .: '.' (4209,28)-(4209,29)
                    field_identifier: 'u' (4209,29)-(4209,30)
                  .: '.' (4209,30)-(4209,31)
                  field_identifier: 'd' (4209,31)-(4209,32)
                ,: ',' (4209,32)-(4209,33)
                identifier: 'outputunderscore' (4209,34)-(4209,50)
                ): ')' (4209,50)-(4209,51)
          ;: ';' (4209,51)-(4209,52)
        else_clause (4210,5)-(4214,6)
          else: 'else' (4210,5)-(4210,9)
          compound_statement (4210,10)-(4214,6)
            {: '{' (4210,10)-(4210,11)
            if_statement (4211,2)-(4212,28)
              if: 'if' (4211,2)-(4211,4)
              parenthesized_expression (4211,5)-(4211,24)
                (: '(' (4211,5)-(4211,6)
                binary_expression (4211,6)-(4211,23)
                  field_expression (4211,6)-(4211,12)
                    identifier: 'v' (4211,6)-(4211,7)
                    .: '.' (4211,7)-(4211,8)
                    field_identifier: 'type' (4211,8)-(4211,12)
                  &: '&' (4211,13)-(4211,14)
                  identifier: 'MN_FLOAT' (4211,15)-(4211,23)
                ): ')' (4211,23)-(4211,24)
              expression_statement (4212,6)-(4212,28)
                assignment_expression (4212,6)-(4212,27)
                  field_expression (4212,6)-(4212,11)
                    field_expression (4212,6)-(4212,9)
                      identifier: 'v' (4212,6)-(4212,7)
                      .: '.' (4212,7)-(4212,8)
                      field_identifier: 'u' (4212,8)-(4212,9)
                    .: '.' (4212,9)-(4212,10)
                    field_identifier: 'l' (4212,10)-(4212,11)
                  =: '=' (4212,12)-(4212,13)
                  cast_expression (4212,14)-(4212,27)
                    (: '(' (4212,14)-(4212,15)
                    type_descriptor (4212,15)-(4212,20)
                      type_identifier: 'zlong' (4212,15)-(4212,20)
                    ): ')' (4212,20)-(4212,21)
                    field_expression (4212,22)-(4212,27)
                      field_expression (4212,22)-(4212,25)
                        identifier: 'v' (4212,22)-(4212,23)
                        .: '.' (4212,23)-(4212,24)
                        field_identifier: 'u' (4212,24)-(4212,25)
                      .: '.' (4212,25)-(4212,26)
                      field_identifier: 'd' (4212,26)-(4212,27)
                ;: ';' (4212,27)-(4212,28)
            expression_statement (4213,2)-(4213,69)
              assignment_expression (4213,2)-(4213,68)
                identifier: 'b' (4213,2)-(4213,3)
                =: '=' (4213,4)-(4213,5)
                call_expression (4213,6)-(4213,68)
                  identifier: 'convbase_underscore' (4213,6)-(4213,25)
                  argument_list (4213,25)-(4213,68)
                    (: '(' (4213,25)-(4213,26)
                    identifier: 'buf' (4213,26)-(4213,29)
                    ,: ',' (4213,29)-(4213,30)
                    field_expression (4213,31)-(4213,36)
                      field_expression (4213,31)-(4213,34)
                        identifier: 'v' (4213,31)-(4213,32)
                        .: '.' (4213,32)-(4213,33)
                        field_identifier: 'u' (4213,33)-(4213,34)
                      .: '.' (4213,34)-(4213,35)
                      field_identifier: 'l' (4213,35)-(4213,36)
                    ,: ',' (4213,36)-(4213,37)
                    identifier: 'outputradix' (4213,38)-(4213,49)
                    ,: ',' (4213,49)-(4213,50)
                    identifier: 'outputunderscore' (4213,51)-(4213,67)
                    ): ')' (4213,67)-(4213,68)
              ;: ';' (4213,68)-(4213,69)
            }: '}' (4214,5)-(4214,6)
      expression_statement (4215,5)-(4216,24)
        assignment_expression (4215,5)-(4216,23)
          identifier: 't' (4215,5)-(4215,6)
          =: '=' (4215,7)-(4215,8)
          assignment_expression (4215,9)-(4216,23)
            pointer_expression (4215,9)-(4215,14)
              *: '*' (4215,9)-(4215,10)
              identifier: 'bptr' (4215,10)-(4215,14)
            =: '=' (4215,15)-(4215,16)
            cast_expression (4215,17)-(4216,23)
              (: '(' (4215,17)-(4215,18)
              type_descriptor (4215,18)-(4215,24)
                primitive_type: 'char' (4215,18)-(4215,22)
                abstract_pointer_declarator (4215,23)-(4215,24)
                  *: '*' (4215,23)-(4215,24)
              ): ')' (4215,24)-(4215,25)
              call_expression (4215,26)-(4216,23)
                identifier: 'hcalloc' (4215,26)-(4215,33)
                argument_list (4215,33)-(4216,23)
                  (: '(' (4215,33)-(4215,34)
                  binary_expression (4215,34)-(4216,22)
                    binary_expression (4215,34)-(4216,18)
                      binary_expression (4215,34)-(4215,59)
                        call_expression (4215,34)-(4215,47)
                          identifier: 'strlen' (4215,34)-(4215,40)
                          argument_list (4215,40)-(4215,47)
                            (: '(' (4215,40)-(4215,41)
                            pointer_expression (4215,41)-(4215,46)
                              *: '*' (4215,41)-(4215,42)
                              identifier: 'bptr' (4215,42)-(4215,46)
                            ): ')' (4215,46)-(4215,47)
                        +: '+' (4215,48)-(4215,49)
                        call_expression (4215,50)-(4215,59)
                          identifier: 'strlen' (4215,50)-(4215,56)
                          argument_list (4215,56)-(4215,59)
                            (: '(' (4215,56)-(4215,57)
                            identifier: 'b' (4215,57)-(4215,58)
                            ): ')' (4215,58)-(4215,59)
                      +: '+' (4215,60)-(4215,61)
                      call_expression (4216,6)-(4216,18)
                        identifier: 'strlen' (4216,6)-(4216,12)
                        argument_list (4216,12)-(4216,18)
                          (: '(' (4216,12)-(4216,13)
                          identifier: 'rest' (4216,13)-(4216,17)
                          ): ')' (4216,17)-(4216,18)
                    +: '+' (4216,19)-(4216,20)
                    number_literal: '1' (4216,21)-(4216,22)
                  ): ')' (4216,22)-(4216,23)
        ;: ';' (4216,23)-(4216,24)
      expression_statement (4217,5)-(4217,9)
        update_expression (4217,5)-(4217,8)
          identifier: 't' (4217,5)-(4217,6)
          --: '--' (4217,6)-(4217,8)
        ;: ';' (4217,8)-(4217,9)
      while_statement (4218,5)-(4218,27)
        while: 'while' (4218,5)-(4218,10)
        parenthesized_expression (4218,11)-(4218,26)
          (: '(' (4218,11)-(4218,12)
          parenthesized_expression (4218,12)-(4218,25)
            (: '(' (4218,12)-(4218,13)
            assignment_expression (4218,13)-(4218,24)
              pointer_expression (4218,13)-(4218,17)
                *: '*' (4218,13)-(4218,14)
                update_expression (4218,14)-(4218,17)
                  ++: '++' (4218,14)-(4218,16)
                  identifier: 't' (4218,16)-(4218,17)
              =: '=' (4218,18)-(4218,19)
              pointer_expression (4218,20)-(4218,24)
                *: '*' (4218,20)-(4218,21)
                update_expression (4218,21)-(4218,24)
                  identifier: 's' (4218,21)-(4218,22)
                  ++: '++' (4218,22)-(4218,24)
            ): ')' (4218,24)-(4218,25)
          ): ')' (4218,25)-(4218,26)
        expression_statement (4218,26)-(4218,27)
          ;: ';' (4218,26)-(4218,27)
      expression_statement (4219,5)-(4219,9)
        update_expression (4219,5)-(4219,8)
          identifier: 't' (4219,5)-(4219,6)
          --: '--' (4219,6)-(4219,8)
        ;: ';' (4219,8)-(4219,9)
      while_statement (4220,5)-(4220,27)
        while: 'while' (4220,5)-(4220,10)
        parenthesized_expression (4220,11)-(4220,26)
          (: '(' (4220,11)-(4220,12)
          parenthesized_expression (4220,12)-(4220,25)
            (: '(' (4220,12)-(4220,13)
            assignment_expression (4220,13)-(4220,24)
              pointer_expression (4220,13)-(4220,17)
                *: '*' (4220,13)-(4220,14)
                update_expression (4220,14)-(4220,17)
                  ++: '++' (4220,14)-(4220,16)
                  identifier: 't' (4220,16)-(4220,17)
              =: '=' (4220,18)-(4220,19)
              pointer_expression (4220,20)-(4220,24)
                *: '*' (4220,20)-(4220,21)
                update_expression (4220,21)-(4220,24)
                  identifier: 'b' (4220,21)-(4220,22)
                  ++: '++' (4220,22)-(4220,24)
            ): ')' (4220,24)-(4220,25)
          ): ')' (4220,25)-(4220,26)
        expression_statement (4220,26)-(4220,27)
          ;: ';' (4220,26)-(4220,27)
      expression_statement (4221,5)-(4221,21)
        call_expression (4221,5)-(4221,20)
          identifier: 'strcat' (4221,5)-(4221,11)
          argument_list (4221,11)-(4221,20)
            (: '(' (4221,11)-(4221,12)
            identifier: 't' (4221,12)-(4221,13)
            ,: ',' (4221,13)-(4221,14)
            identifier: 'rest' (4221,15)-(4221,19)
            ): ')' (4221,19)-(4221,20)
        ;: ';' (4221,20)-(4221,21)
      return_statement (4222,5)-(4222,14)
        return: 'return' (4222,5)-(4222,11)
        identifier: 't' (4222,12)-(4222,13)
        ;: ';' (4222,13)-(4222,14)
      }: '}' (4223,1)-(4223,2)
  comment: '/* This function implements colon modifiers.
 *
 * STR is an in/out parameter.  On entry it is the string (e.g., path)
 * to modified.  On return it is the modified path.
 *
 * PTR is an in/out parameter.  On entry it contains the string of colon
 * modifiers.  On return it points past the last recognised modifier.
 *
 * INBRACE is non-zero if we are in some form of a bracketed or
 * parenthesised expression; it is zero for modifiers ocurring
 * in an an unbracketed variable substitution.  This means that
 * $foo:t222 is treated ias ${foo:t}222 rather than ${foo:t222}
 * for backward compatibility.
 *
 * Example:
 *     ENTRY:   *str is "."   *ptr is ":AN"
 *     RETURN:  *str is "/home/foobar" (equal to $PWD)   *ptr points to the "N"
 */' (4225,1)-(4242,4)
  comment: '/**/' (4244,1)-(4244,5)
  function_definition (4245,1)-(4603,2)
    primitive_type: 'void' (4245,1)-(4245,5)
    function_declarator (4246,1)-(4246,44)
      identifier: 'modify' (4246,1)-(4246,7)
      parameter_list (4246,7)-(4246,44)
        (: '(' (4246,7)-(4246,8)
        parameter_declaration (4246,8)-(4246,18)
          primitive_type: 'char' (4246,8)-(4246,12)
          pointer_declarator (4246,13)-(4246,18)
            *: '*' (4246,13)-(4246,14)
            pointer_declarator (4246,14)-(4246,18)
              *: '*' (4246,14)-(4246,15)
              identifier: 'str' (4246,15)-(4246,18)
        ,: ',' (4246,18)-(4246,19)
        parameter_declaration (4246,20)-(4246,30)
          primitive_type: 'char' (4246,20)-(4246,24)
          pointer_declarator (4246,25)-(4246,30)
            *: '*' (4246,25)-(4246,26)
            pointer_declarator (4246,26)-(4246,30)
              *: '*' (4246,26)-(4246,27)
              identifier: 'ptr' (4246,27)-(4246,30)
        ,: ',' (4246,30)-(4246,31)
        parameter_declaration (4246,32)-(4246,43)
          primitive_type: 'int' (4246,32)-(4246,35)
          identifier: 'inbrace' (4246,36)-(4246,43)
        ): ')' (4246,43)-(4246,44)
    compound_statement (4247,1)-(4603,2)
      {: '{' (4247,1)-(4247,2)
      declaration (4248,5)-(4248,70)
        primitive_type: 'char' (4248,5)-(4248,9)
        pointer_declarator (4248,10)-(4248,15)
          *: '*' (4248,10)-(4248,11)
          identifier: 'ptr1' (4248,11)-(4248,15)
        ,: ',' (4248,15)-(4248,16)
        pointer_declarator (4248,17)-(4248,22)
          *: '*' (4248,17)-(4248,18)
          identifier: 'ptr2' (4248,18)-(4248,22)
        ,: ',' (4248,22)-(4248,23)
        pointer_declarator (4248,24)-(4248,29)
          *: '*' (4248,24)-(4248,25)
          identifier: 'ptr3' (4248,25)-(4248,29)
        ,: ',' (4248,29)-(4248,30)
        pointer_declarator (4248,31)-(4248,36)
          *: '*' (4248,31)-(4248,32)
          identifier: 'lptr' (4248,32)-(4248,36)
        ,: ',' (4248,36)-(4248,37)
        identifier: 'c' (4248,38)-(4248,39)
        ,: ',' (4248,39)-(4248,40)
        pointer_declarator (4248,41)-(4248,46)
          *: '*' (4248,41)-(4248,42)
          identifier: 'test' (4248,42)-(4248,46)
        ,: ',' (4248,46)-(4248,47)
        pointer_declarator (4248,48)-(4248,52)
          *: '*' (4248,48)-(4248,49)
          identifier: 'sep' (4248,49)-(4248,52)
        ,: ',' (4248,52)-(4248,53)
        pointer_declarator (4248,54)-(4248,56)
          *: '*' (4248,54)-(4248,55)
          identifier: 't' (4248,55)-(4248,56)
        ,: ',' (4248,56)-(4248,57)
        pointer_declarator (4248,58)-(4248,61)
          *: '*' (4248,58)-(4248,59)
          identifier: 'tt' (4248,59)-(4248,61)
        ,: ',' (4248,61)-(4248,62)
        identifier: 'tc' (4248,63)-(4248,65)
        ,: ',' (4248,65)-(4248,66)
        pointer_declarator (4248,67)-(4248,69)
          *: '*' (4248,67)-(4248,68)
          identifier: 'e' (4248,68)-(4248,69)
        ;: ';' (4248,69)-(4248,70)
      declaration (4249,5)-(4249,49)
        primitive_type: 'char' (4249,5)-(4249,9)
        pointer_declarator (4249,10)-(4249,15)
          *: '*' (4249,10)-(4249,11)
          identifier: 'copy' (4249,11)-(4249,15)
        ,: ',' (4249,15)-(4249,16)
        pointer_declarator (4249,17)-(4249,21)
          *: '*' (4249,17)-(4249,18)
          identifier: 'all' (4249,18)-(4249,21)
        ,: ',' (4249,21)-(4249,22)
        pointer_declarator (4249,23)-(4249,27)
          *: '*' (4249,23)-(4249,24)
          identifier: 'tmp' (4249,24)-(4249,27)
        ,: ',' (4249,27)-(4249,28)
        identifier: 'sav' (4249,29)-(4249,32)
        ,: ',' (4249,32)-(4249,33)
        identifier: 'sav1' (4249,34)-(4249,38)
        ,: ',' (4249,38)-(4249,39)
        pointer_declarator (4249,40)-(4249,48)
          *: '*' (4249,40)-(4249,41)
          identifier: 'ptr1end' (4249,41)-(4249,48)
        ;: ';' (4249,48)-(4249,49)
      declaration (4250,5)-(4250,50)
        primitive_type: 'int' (4250,5)-(4250,8)
        identifier: 'gbal' (4250,9)-(4250,13)
        ,: ',' (4250,13)-(4250,14)
        identifier: 'wall' (4250,15)-(4250,19)
        ,: ',' (4250,19)-(4250,20)
        identifier: 'rec' (4250,21)-(4250,24)
        ,: ',' (4250,24)-(4250,25)
        identifier: 'al' (4250,26)-(4250,28)
        ,: ',' (4250,28)-(4250,29)
        identifier: 'nl' (4250,30)-(4250,32)
        ,: ',' (4250,32)-(4250,33)
        identifier: 'charlen' (4250,34)-(4250,41)
        ,: ',' (4250,41)-(4250,42)
        identifier: 'dellen' (4250,43)-(4250,49)
        ;: ';' (4250,49)-(4250,50)
      declaration (4251,5)-(4251,20)
        type_identifier: 'convchar_t' (4251,5)-(4251,15)
        identifier: 'del' (4251,16)-(4251,19)
        ;: ';' (4251,19)-(4251,20)
      expression_statement (4253,5)-(4253,17)
        assignment_expression (4253,5)-(4253,16)
          identifier: 'test' (4253,5)-(4253,9)
          =: '=' (4253,10)-(4253,11)
          null (4253,12)-(4253,16)
            NULL: 'NULL' (4253,12)-(4253,16)
        ;: ';' (4253,16)-(4253,17)
      if_statement (4255,5)-(4256,25)
        if: 'if' (4255,5)-(4255,7)
        parenthesized_expression (4255,8)-(4255,22)
          (: '(' (4255,8)-(4255,9)
          binary_expression (4255,9)-(4255,21)
            pointer_expression (4255,9)-(4255,14)
              *: '*' (4255,9)-(4255,10)
              pointer_expression (4255,10)-(4255,14)
                *: '*' (4255,10)-(4255,11)
                identifier: 'ptr' (4255,11)-(4255,14)
            ==: '==' (4255,15)-(4255,17)
            char_literal (4255,18)-(4255,21)
              ': ''' (4255,18)-(4255,19)
              character: ':' (4255,19)-(4255,20)
              ': ''' (4255,20)-(4255,21)
          ): ')' (4255,21)-(4255,22)
        expression_statement (4256,2)-(4256,25)
          assignment_expression (4256,2)-(4256,24)
            pointer_expression (4256,2)-(4256,6)
              *: '*' (4256,2)-(4256,3)
              identifier: 'str' (4256,3)-(4256,6)
            =: '=' (4256,7)-(4256,8)
            call_expression (4256,9)-(4256,24)
              identifier: 'dupstring' (4256,9)-(4256,18)
              argument_list (4256,18)-(4256,24)
                (: '(' (4256,18)-(4256,19)
                pointer_expression (4256,19)-(4256,23)
                  *: '*' (4256,19)-(4256,20)
                  identifier: 'str' (4256,20)-(4256,23)
                ): ')' (4256,23)-(4256,24)
          ;: ';' (4256,24)-(4256,25)
      while_statement (4258,5)-(4602,6)
        while: 'while' (4258,5)-(4258,10)
        parenthesized_expression (4258,11)-(4258,25)
          (: '(' (4258,11)-(4258,12)
          binary_expression (4258,12)-(4258,24)
            pointer_expression (4258,12)-(4258,17)
              *: '*' (4258,12)-(4258,13)
              pointer_expression (4258,13)-(4258,17)
                *: '*' (4258,13)-(4258,14)
                identifier: 'ptr' (4258,14)-(4258,17)
            ==: '==' (4258,18)-(4258,20)
            char_literal (4258,21)-(4258,24)
              ': ''' (4258,21)-(4258,22)
              character: ':' (4258,22)-(4258,23)
              ': ''' (4258,23)-(4258,24)
          ): ')' (4258,24)-(4258,25)
        compound_statement (4258,26)-(4602,6)
          {: '{' (4258,26)-(4258,27)
          declaration (4259,2)-(4259,16)
            primitive_type: 'int' (4259,2)-(4259,5)
            init_declarator (4259,6)-(4259,15)
              identifier: 'count' (4259,6)-(4259,11)
              =: '=' (4259,12)-(4259,13)
              number_literal: '0' (4259,14)-(4259,15)
            ;: ';' (4259,15)-(4259,16)
          expression_statement (4261,2)-(4261,14)
            assignment_expression (4261,2)-(4261,13)
              identifier: 'lptr' (4261,2)-(4261,6)
              =: '=' (4261,7)-(4261,8)
              pointer_expression (4261,9)-(4261,13)
                *: '*' (4261,9)-(4261,10)
                identifier: 'ptr' (4261,10)-(4261,13)
            ;: ';' (4261,13)-(4261,14)
          expression_statement (4262,2)-(4262,11)
            update_expression (4262,2)-(4262,10)
              parenthesized_expression (4262,2)-(4262,8)
                (: '(' (4262,2)-(4262,3)
                pointer_expression (4262,3)-(4262,7)
                  *: '*' (4262,3)-(4262,4)
                  identifier: 'ptr' (4262,4)-(4262,7)
                ): ')' (4262,7)-(4262,8)
              ++: '++' (4262,8)-(4262,10)
            ;: ';' (4262,10)-(4262,11)
          expression_statement (4263,2)-(4263,18)
            assignment_expression (4263,2)-(4263,17)
              identifier: 'wall' (4263,2)-(4263,6)
              =: '=' (4263,7)-(4263,8)
              assignment_expression (4263,9)-(4263,17)
                identifier: 'gbal' (4263,9)-(4263,13)
                =: '=' (4263,14)-(4263,15)
                number_literal: '0' (4263,16)-(4263,17)
            ;: ';' (4263,17)-(4263,18)
          expression_statement (4264,2)-(4264,10)
            assignment_expression (4264,2)-(4264,9)
              identifier: 'rec' (4264,2)-(4264,5)
              =: '=' (4264,6)-(4264,7)
              number_literal: '1' (4264,8)-(4264,9)
            ;: ';' (4264,9)-(4264,10)
          expression_statement (4265,2)-(4265,11)
            assignment_expression (4265,2)-(4265,10)
              identifier: 'c' (4265,2)-(4265,3)
              =: '=' (4265,4)-(4265,5)
              char_literal (4265,6)-(4265,10)
                ': ''' (4265,6)-(4265,7)
                escape_sequence: '\0' (4265,7)-(4265,9)
                ': ''' (4265,9)-(4265,10)
            ;: ';' (4265,10)-(4265,11)
          expression_statement (4266,2)-(4266,13)
            assignment_expression (4266,2)-(4266,12)
              identifier: 'sep' (4266,2)-(4266,5)
              =: '=' (4266,6)-(4266,7)
              null (4266,8)-(4266,12)
                NULL: 'NULL' (4266,8)-(4266,12)
            ;: ';' (4266,12)-(4266,13)
          for_statement (4268,2)-(4426,3)
            for: 'for' (4268,2)-(4268,5)
            (: '(' (4268,6)-(4268,7)
            ;: ';' (4268,7)-(4268,8)
            binary_expression (4268,9)-(4268,20)
              unary_expression (4268,9)-(4268,11)
                !: '!' (4268,9)-(4268,10)
                identifier: 'c' (4268,10)-(4268,11)
              &&: '&&' (4268,12)-(4268,14)
              pointer_expression (4268,15)-(4268,20)
                *: '*' (4268,15)-(4268,16)
                pointer_expression (4268,16)-(4268,20)
                  *: '*' (4268,16)-(4268,17)
                  identifier: 'ptr' (4268,17)-(4268,20)
            ;: ';' (4268,20)-(4268,21)
            ): ')' (4268,21)-(4268,22)
            compound_statement (4268,23)-(4426,3)
              {: '{' (4268,23)-(4268,24)
              switch_statement (4269,6)-(4425,7)
                switch: 'switch' (4269,6)-(4269,12)
                parenthesized_expression (4269,13)-(4269,20)
                  (: '(' (4269,13)-(4269,14)
                  pointer_expression (4269,14)-(4269,19)
                    *: '*' (4269,14)-(4269,15)
                    pointer_expression (4269,15)-(4269,19)
                      *: '*' (4269,15)-(4269,16)
                      identifier: 'ptr' (4269,16)-(4269,19)
                  ): ')' (4269,19)-(4269,20)
                compound_statement (4269,21)-(4425,7)
                  {: '{' (4269,21)-(4269,22)
                  case_statement (4270,13)-(4270,22)
                    case: 'case' (4270,13)-(4270,17)
                    char_literal (4270,18)-(4270,21)
                      ': ''' (4270,18)-(4270,19)
                      character: 'a' (4270,19)-(4270,20)
                      ': ''' (4270,20)-(4270,21)
                    :: ':' (4270,21)-(4270,22)
                  case_statement (4271,13)-(4271,22)
                    case: 'case' (4271,13)-(4271,17)
                    char_literal (4271,18)-(4271,21)
                      ': ''' (4271,18)-(4271,19)
                      character: 'A' (4271,19)-(4271,20)
                      ': ''' (4271,20)-(4271,21)
                    :: ':' (4271,21)-(4271,22)
                  case_statement (4272,6)-(4272,15)
                    case: 'case' (4272,6)-(4272,10)
                    char_literal (4272,11)-(4272,14)
                      ': ''' (4272,11)-(4272,12)
                      character: 'c' (4272,12)-(4272,13)
                      ': ''' (4272,13)-(4272,14)
                    :: ':' (4272,14)-(4272,15)
                  case_statement (4273,6)-(4273,15)
                    case: 'case' (4273,6)-(4273,10)
                    char_literal (4273,11)-(4273,14)
                      ': ''' (4273,11)-(4273,12)
                      character: 'r' (4273,12)-(4273,13)
                      ': ''' (4273,13)-(4273,14)
                    :: ':' (4273,14)-(4273,15)
                  case_statement (4274,6)-(4274,15)
                    case: 'case' (4274,6)-(4274,10)
                    char_literal (4274,11)-(4274,14)
                      ': ''' (4274,11)-(4274,12)
                      character: 'e' (4274,12)-(4274,13)
                      ': ''' (4274,13)-(4274,14)
                    :: ':' (4274,14)-(4274,15)
                  case_statement (4275,6)-(4275,15)
                    case: 'case' (4275,6)-(4275,10)
                    char_literal (4275,11)-(4275,14)
                      ': ''' (4275,11)-(4275,12)
                      character: 'l' (4275,12)-(4275,13)
                      ': ''' (4275,13)-(4275,14)
                    :: ':' (4275,14)-(4275,15)
                  case_statement (4276,6)-(4276,15)
                    case: 'case' (4276,6)-(4276,10)
                    char_literal (4276,11)-(4276,14)
                      ': ''' (4276,11)-(4276,12)
                      character: 'u' (4276,12)-(4276,13)
                      ': ''' (4276,13)-(4276,14)
                    :: ':' (4276,14)-(4276,15)
                  case_statement (4277,6)-(4277,15)
                    case: 'case' (4277,6)-(4277,10)
                    char_literal (4277,11)-(4277,14)
                      ': ''' (4277,11)-(4277,12)
                      character: 'q' (4277,12)-(4277,13)
                      ': ''' (4277,13)-(4277,14)
                    :: ':' (4277,14)-(4277,15)
                  case_statement (4278,6)-(4278,15)
                    case: 'case' (4278,6)-(4278,10)
                    char_literal (4278,11)-(4278,14)
                      ': ''' (4278,11)-(4278,12)
                      character: 'Q' (4278,12)-(4278,13)
                      ': ''' (4278,13)-(4278,14)
                    :: ':' (4278,14)-(4278,15)
                  case_statement (4279,6)-(4281,9)
                    case: 'case' (4279,6)-(4279,10)
                    char_literal (4279,11)-(4279,14)
                      ': ''' (4279,11)-(4279,12)
                      character: 'P' (4279,12)-(4279,13)
                      ': ''' (4279,13)-(4279,14)
                    :: ':' (4279,14)-(4279,15)
                    expression_statement (4280,3)-(4280,13)
                      assignment_expression (4280,3)-(4280,12)
                        identifier: 'c' (4280,3)-(4280,4)
                        =: '=' (4280,5)-(4280,6)
                        pointer_expression (4280,7)-(4280,12)
                          *: '*' (4280,7)-(4280,8)
                          pointer_expression (4280,8)-(4280,12)
                            *: '*' (4280,8)-(4280,9)
                            identifier: 'ptr' (4280,9)-(4280,12)
                      ;: ';' (4280,12)-(4280,13)
                    break_statement (4281,3)-(4281,9)
                      break: 'break' (4281,3)-(4281,8)
                      ;: ';' (4281,8)-(4281,9)
                  case_statement (4283,6)-(4283,15)
                    case: 'case' (4283,6)-(4283,10)
                    char_literal (4283,11)-(4283,14)
                      ': ''' (4283,11)-(4283,12)
                      character: 'h' (4283,12)-(4283,13)
                      ': ''' (4283,13)-(4283,14)
                    :: ':' (4283,14)-(4283,15)
                  case_statement (4284,6)-(4292,9)
                    case: 'case' (4284,6)-(4284,10)
                    char_literal (4284,11)-(4284,14)
                      ': ''' (4284,11)-(4284,12)
                      character: 't' (4284,12)-(4284,13)
                      ': ''' (4284,13)-(4284,14)
                    :: ':' (4284,14)-(4284,15)
                    expression_statement (4285,3)-(4285,13)
                      assignment_expression (4285,3)-(4285,12)
                        identifier: 'c' (4285,3)-(4285,4)
                        =: '=' (4285,5)-(4285,6)
                        pointer_expression (4285,7)-(4285,12)
                          *: '*' (4285,7)-(4285,8)
                          pointer_expression (4285,8)-(4285,12)
                            *: '*' (4285,8)-(4285,9)
                            identifier: 'ptr' (4285,9)-(4285,12)
                      ;: ';' (4285,12)-(4285,13)
                    if_statement (4286,3)-(4291,4)
                      if: 'if' (4286,3)-(4286,5)
                      parenthesized_expression (4286,6)-(4286,36)
                        (: '(' (4286,6)-(4286,7)
                        binary_expression (4286,7)-(4286,35)
                          identifier: 'inbrace' (4286,7)-(4286,14)
                          &&: '&&' (4286,15)-(4286,17)
                          call_expression (4286,18)-(4286,35)
                            identifier: 'idigit' (4286,18)-(4286,24)
                            argument_list (4286,24)-(4286,35)
                              (: '(' (4286,24)-(4286,25)
                              subscript_expression (4286,25)-(4286,34)
                                parenthesized_expression (4286,25)-(4286,31)
                                  (: '(' (4286,25)-(4286,26)
                                  pointer_expression (4286,26)-(4286,30)
                                    *: '*' (4286,26)-(4286,27)
                                    identifier: 'ptr' (4286,27)-(4286,30)
                                  ): ')' (4286,30)-(4286,31)
                                [: '[' (4286,31)-(4286,32)
                                number_literal: '1' (4286,32)-(4286,33)
                                ]: ']' (4286,33)-(4286,34)
                              ): ')' (4286,34)-(4286,35)
                        ): ')' (4286,35)-(4286,36)
                      compound_statement (4286,37)-(4291,4)
                        {: '{' (4286,37)-(4286,38)
                        do_statement (4287,7)-(4290,35)
                          do: 'do' (4287,7)-(4287,9)
                          compound_statement (4287,10)-(4290,8)
                            {: '{' (4287,10)-(4287,11)
                            expression_statement (4288,4)-(4288,43)
                              assignment_expression (4288,4)-(4288,42)
                                identifier: 'count' (4288,4)-(4288,9)
                                =: '=' (4288,10)-(4288,11)
                                binary_expression (4288,12)-(4288,42)
                                  binary_expression (4288,12)-(4288,22)
                                    number_literal: '10' (4288,12)-(4288,14)
                                    *: '*' (4288,15)-(4288,16)
                                    identifier: 'count' (4288,17)-(4288,22)
                                  +: '+' (4288,23)-(4288,24)
                                  parenthesized_expression (4288,25)-(4288,42)
                                    (: '(' (4288,25)-(4288,26)
                                    binary_expression (4288,26)-(4288,41)
                                      subscript_expression (4288,26)-(4288,35)
                                        parenthesized_expression (4288,26)-(4288,32)
                                          (: '(' (4288,26)-(4288,27)
                                          pointer_expression (4288,27)-(4288,31)
                                            *: '*' (4288,27)-(4288,28)
                                            identifier: 'ptr' (4288,28)-(4288,31)
                                          ): ')' (4288,31)-(4288,32)
                                        [: '[' (4288,32)-(4288,33)
                                        number_literal: '1' (4288,33)-(4288,34)
                                        ]: ']' (4288,34)-(4288,35)
                                      -: '-' (4288,36)-(4288,37)
                                      char_literal (4288,38)-(4288,41)
                                        ': ''' (4288,38)-(4288,39)
                                        character: '0' (4288,39)-(4288,40)
                                        ': ''' (4288,40)-(4288,41)
                                    ): ')' (4288,41)-(4288,42)
                              ;: ';' (4288,42)-(4288,43)
                            expression_statement (4289,4)-(4289,13)
                              update_expression (4289,4)-(4289,12)
                                ++: '++' (4289,4)-(4289,6)
                                parenthesized_expression (4289,6)-(4289,12)
                                  (: '(' (4289,6)-(4289,7)
                                  pointer_expression (4289,7)-(4289,11)
                                    *: '*' (4289,7)-(4289,8)
                                    identifier: 'ptr' (4289,8)-(4289,11)
                                  ): ')' (4289,11)-(4289,12)
                              ;: ';' (4289,12)-(4289,13)
                            }: '}' (4290,7)-(4290,8)
                          while: 'while' (4290,9)-(4290,14)
                          parenthesized_expression (4290,15)-(4290,34)
                            (: '(' (4290,15)-(4290,16)
                            call_expression (4290,16)-(4290,33)
                              identifier: 'idigit' (4290,16)-(4290,22)
                              argument_list (4290,22)-(4290,33)
                                (: '(' (4290,22)-(4290,23)
                                subscript_expression (4290,23)-(4290,32)
                                  parenthesized_expression (4290,23)-(4290,29)
                                    (: '(' (4290,23)-(4290,24)
                                    pointer_expression (4290,24)-(4290,28)
                                      *: '*' (4290,24)-(4290,25)
                                      identifier: 'ptr' (4290,25)-(4290,28)
                                    ): ')' (4290,28)-(4290,29)
                                  [: '[' (4290,29)-(4290,30)
                                  number_literal: '1' (4290,30)-(4290,31)
                                  ]: ']' (4290,31)-(4290,32)
                                ): ')' (4290,32)-(4290,33)
                            ): ')' (4290,33)-(4290,34)
                          ;: ';' (4290,34)-(4290,35)
                        }: '}' (4291,3)-(4291,4)
                    break_statement (4292,3)-(4292,9)
                      break: 'break' (4292,3)-(4292,8)
                      ;: ';' (4292,8)-(4292,9)
                  case_statement (4294,6)-(4299,44)
                    case: 'case' (4294,6)-(4294,10)
                    char_literal (4294,11)-(4294,14)
                      ': ''' (4294,11)-(4294,12)
                      character: 's' (4294,12)-(4294,13)
                      ': ''' (4294,13)-(4294,14)
                    :: ':' (4294,14)-(4294,15)
                    expression_statement (4295,3)-(4295,13)
                      assignment_expression (4295,3)-(4295,12)
                        identifier: 'c' (4295,3)-(4295,4)
                        =: '=' (4295,5)-(4295,6)
                        pointer_expression (4295,7)-(4295,12)
                          *: '*' (4295,7)-(4295,8)
                          pointer_expression (4295,8)-(4295,12)
                            *: '*' (4295,8)-(4295,9)
                            identifier: 'ptr' (4295,9)-(4295,12)
                      ;: ';' (4295,12)-(4295,13)
                    expression_statement (4296,3)-(4296,12)
                      update_expression (4296,3)-(4296,11)
                        parenthesized_expression (4296,3)-(4296,9)
                          (: '(' (4296,3)-(4296,4)
                          pointer_expression (4296,4)-(4296,8)
                            *: '*' (4296,4)-(4296,5)
                            identifier: 'ptr' (4296,5)-(4296,8)
                          ): ')' (4296,8)-(4296,9)
                        ++: '++' (4296,9)-(4296,11)
                      ;: ';' (4296,11)-(4296,12)
                    expression_statement (4297,3)-(4297,15)
                      assignment_expression (4297,3)-(4297,14)
                        identifier: 'ptr1' (4297,3)-(4297,7)
                        =: '=' (4297,8)-(4297,9)
                        pointer_expression (4297,10)-(4297,14)
                          *: '*' (4297,10)-(4297,11)
                          identifier: 'ptr' (4297,11)-(4297,14)
                      ;: ';' (4297,14)-(4297,15)
                    expression_statement (4298,3)-(4298,21)
                      call_expression (4298,3)-(4298,20)
                        identifier: 'MB_METACHARINIT' (4298,3)-(4298,18)
                        argument_list (4298,18)-(4298,20)
                          (: '(' (4298,18)-(4298,19)
                          ): ')' (4298,19)-(4298,20)
                      ;: ';' (4298,20)-(4298,21)
                    expression_statement (4299,3)-(4299,44)
                      assignment_expression (4299,3)-(4299,43)
                        identifier: 'charlen' (4299,3)-(4299,10)
                        =: '=' (4299,11)-(4299,12)
                        call_expression (4299,13)-(4299,43)
                          identifier: 'MB_METACHARLENCONV' (4299,13)-(4299,31)
                          argument_list (4299,31)-(4299,43)
                            (: '(' (4299,31)-(4299,32)
                            identifier: 'ptr1' (4299,32)-(4299,36)
                            ,: ',' (4299,36)-(4299,37)
                            pointer_expression (4299,38)-(4299,42)
                              &: '&' (4299,38)-(4299,39)
                              identifier: 'del' (4299,39)-(4299,42)
                            ): ')' (4299,42)-(4299,43)
                      ;: ';' (4299,43)-(4299,44)
                  preproc_ifdef (4300,1)-(4303,7)
                    #ifdef: '#ifdef' (4300,1)-(4300,7)
                    identifier: 'MULTIBYTE_SUPPORT' (4300,8)-(4300,25)
                    if_statement (4301,3)-(4302,62)
                      if: 'if' (4301,3)-(4301,5)
                      parenthesized_expression (4301,6)-(4301,19)
                        (: '(' (4301,6)-(4301,7)
                        binary_expression (4301,7)-(4301,18)
                          identifier: 'del' (4301,7)-(4301,10)
                          ==: '==' (4301,11)-(4301,13)
                          identifier: 'WEOF' (4301,14)-(4301,18)
                        ): ')' (4301,18)-(4301,19)
                      expression_statement (4302,7)-(4302,62)
                        assignment_expression (4302,7)-(4302,61)
                          identifier: 'del' (4302,7)-(4302,10)
                          =: '=' (4302,11)-(4302,12)
                          call_expression (4302,13)-(4302,61)
                            parenthesized_expression (4302,13)-(4302,21)
                              (: '(' (4302,13)-(4302,14)
                              identifier: 'wint_t' (4302,14)-(4302,20)
                              ): ')' (4302,20)-(4302,21)
                            argument_list (4302,21)-(4302,61)
                              (: '(' (4302,21)-(4302,22)
                              conditional_expression (4302,22)-(4302,60)
                                parenthesized_expression (4302,22)-(4302,37)
                                  (: '(' (4302,22)-(4302,23)
                                  binary_expression (4302,23)-(4302,36)
                                    pointer_expression (4302,23)-(4302,28)
                                      *: '*' (4302,23)-(4302,24)
                                      identifier: 'ptr1' (4302,24)-(4302,28)
                                    ==: '==' (4302,29)-(4302,31)
                                    identifier: 'Meta' (4302,32)-(4302,36)
                                  ): ')' (4302,36)-(4302,37)
                                ?: '?' (4302,38)-(4302,39)
                                binary_expression (4302,40)-(4302,52)
                                  subscript_expression (4302,40)-(4302,47)
                                    identifier: 'ptr1' (4302,40)-(4302,44)
                                    [: '[' (4302,44)-(4302,45)
                                    number_literal: '1' (4302,45)-(4302,46)
                                    ]: ']' (4302,46)-(4302,47)
                                  ^: '^' (4302,48)-(4302,49)
                                  number_literal: '32' (4302,50)-(4302,52)
                                :: ':' (4302,53)-(4302,54)
                                pointer_expression (4302,55)-(4302,60)
                                  *: '*' (4302,55)-(4302,56)
                                  identifier: 'ptr1' (4302,56)-(4302,60)
                              ): ')' (4302,60)-(4302,61)
                        ;: ';' (4302,61)-(4302,62)
                    #endif: '#endif' (4303,1)-(4303,7)
                  expression_statement (4304,3)-(4304,19)
                    assignment_expression (4304,3)-(4304,18)
                      identifier: 'ptr1' (4304,3)-(4304,7)
                      +=: '+=' (4304,8)-(4304,10)
                      identifier: 'charlen' (4304,11)-(4304,18)
                    ;: ';' (4304,18)-(4304,19)
                  for_statement (4305,3)-(4322,4)
                    for: 'for' (4305,3)-(4305,6)
                    (: '(' (4305,7)-(4305,8)
                    comma_expression (4305,8)-(4305,32)
                      assignment_expression (4305,8)-(4305,19)
                        identifier: 'ptr2' (4305,8)-(4305,12)
                        =: '=' (4305,13)-(4305,14)
                        identifier: 'ptr1' (4305,15)-(4305,19)
                      ,: ',' (4305,19)-(4305,20)
                      assignment_expression (4305,21)-(4305,32)
                        identifier: 'charlen' (4305,21)-(4305,28)
                        =: '=' (4305,29)-(4305,30)
                        number_literal: '0' (4305,31)-(4305,32)
                    ;: ';' (4305,32)-(4305,33)
                    pointer_expression (4305,34)-(4305,39)
                      *: '*' (4305,34)-(4305,35)
                      identifier: 'ptr2' (4305,35)-(4305,39)
                    ;: ';' (4305,39)-(4305,40)
                    assignment_expression (4305,41)-(4305,56)
                      identifier: 'ptr2' (4305,41)-(4305,45)
                      +=: '+=' (4305,46)-(4305,48)
                      identifier: 'charlen' (4305,49)-(4305,56)
                    ): ')' (4305,56)-(4305,57)
                    compound_statement (4305,58)-(4322,4)
                      {: '{' (4305,58)-(4305,59)
                      declaration (4306,7)-(4306,23)
                        type_identifier: 'convchar_t' (4306,7)-(4306,17)
                        identifier: 'del2' (4306,18)-(4306,22)
                        ;: ';' (4306,22)-(4306,23)
                      if_statement (4307,7)-(4313,8)
                        if: 'if' (4307,7)-(4307,9)
                        parenthesized_expression (4307,10)-(4307,56)
                          (: '(' (4307,10)-(4307,11)
                          binary_expression (4307,11)-(4307,55)
                            parenthesized_expression (4307,11)-(4307,44)
                              (: '(' (4307,11)-(4307,12)
                              binary_expression (4307,12)-(4307,43)
                                binary_expression (4307,12)-(4307,26)
                                  pointer_expression (4307,12)-(4307,17)
                                    *: '*' (4307,12)-(4307,13)
                                    identifier: 'ptr2' (4307,13)-(4307,17)
                                  ==: '==' (4307,18)-(4307,20)
                                  identifier: 'Bnull' (4307,21)-(4307,26)
                                ||: '||' (4307,27)-(4307,29)
                                binary_expression (4307,30)-(4307,43)
                                  pointer_expression (4307,30)-(4307,35)
                                    *: '*' (4307,30)-(4307,31)
                                    identifier: 'ptr2' (4307,31)-(4307,35)
                                  ==: '==' (4307,36)-(4307,38)
                                  char_literal (4307,39)-(4307,43)
                                    ': ''' (4307,39)-(4307,40)
                                    escape_sequence: '\\' (4307,40)-(4307,42)
                                    ': ''' (4307,42)-(4307,43)
                              ): ')' (4307,43)-(4307,44)
                            &&: '&&' (4307,45)-(4307,47)
                            subscript_expression (4307,48)-(4307,55)
                              identifier: 'ptr2' (4307,48)-(4307,52)
                              [: '[' (4307,52)-(4307,53)
                              number_literal: '1' (4307,53)-(4307,54)
                              ]: ']' (4307,54)-(4307,55)
                          ): ')' (4307,55)-(4307,56)
                        compound_statement (4307,57)-(4313,8)
                          {: '{' (4307,57)-(4307,58)
                          comment: '/* in double quotes, the backslash isn't tokenized */' (4308,4)-(4308,57)
                          if_statement (4309,4)-(4310,22)
                            if: 'if' (4309,4)-(4309,6)
                            parenthesized_expression (4309,7)-(4309,22)
                              (: '(' (4309,7)-(4309,8)
                              binary_expression (4309,8)-(4309,21)
                                pointer_expression (4309,8)-(4309,13)
                                  *: '*' (4309,8)-(4309,9)
                                  identifier: 'ptr2' (4309,9)-(4309,13)
                                ==: '==' (4309,14)-(4309,16)
                                char_literal (4309,17)-(4309,21)
                                  ': ''' (4309,17)-(4309,18)
                                  escape_sequence: '\\' (4309,18)-(4309,20)
                                  ': ''' (4309,20)-(4309,21)
                              ): ')' (4309,21)-(4309,22)
                            expression_statement (4310,8)-(4310,22)
                              assignment_expression (4310,8)-(4310,21)
                                pointer_expression (4310,8)-(4310,13)
                                  *: '*' (4310,8)-(4310,9)
                                  identifier: 'ptr2' (4310,9)-(4310,13)
                                =: '=' (4310,14)-(4310,15)
                                identifier: 'Bnull' (4310,16)-(4310,21)
                              ;: ';' (4310,21)-(4310,22)
                          expression_statement (4311,4)-(4311,16)
                            assignment_expression (4311,4)-(4311,15)
                              identifier: 'charlen' (4311,4)-(4311,11)
                              =: '=' (4311,12)-(4311,13)
                              number_literal: '2' (4311,14)-(4311,15)
                            ;: ';' (4311,15)-(4311,16)
                          continue_statement (4312,4)-(4312,13)
                            continue: 'continue' (4312,4)-(4312,12)
                            ;: ';' (4312,12)-(4312,13)
                          }: '}' (4313,7)-(4313,8)
                      expression_statement (4314,7)-(4314,49)
                        assignment_expression (4314,7)-(4314,48)
                          identifier: 'charlen' (4314,7)-(4314,14)
                          =: '=' (4314,15)-(4314,16)
                          call_expression (4314,17)-(4314,48)
                            identifier: 'MB_METACHARLENCONV' (4314,17)-(4314,35)
                            argument_list (4314,35)-(4314,48)
                              (: '(' (4314,35)-(4314,36)
                              identifier: 'ptr2' (4314,36)-(4314,40)
                              ,: ',' (4314,40)-(4314,41)
                              pointer_expression (4314,42)-(4314,47)
                                &: '&' (4314,42)-(4314,43)
                                identifier: 'del2' (4314,43)-(4314,47)
                              ): ')' (4314,47)-(4314,48)
                        ;: ';' (4314,48)-(4314,49)
                      preproc_ifdef (4315,1)-(4319,7)
                        #ifdef: '#ifdef' (4315,1)-(4315,7)
                        identifier: 'MULTIBYTE_SUPPORT' (4315,8)-(4315,25)
                        if_statement (4316,7)-(4318,28)
                          if: 'if' (4316,7)-(4316,9)
                          parenthesized_expression (4316,10)-(4316,24)
                            (: '(' (4316,10)-(4316,11)
                            binary_expression (4316,11)-(4316,23)
                              identifier: 'del2' (4316,11)-(4316,15)
                              ==: '==' (4316,16)-(4316,18)
                              identifier: 'WEOF' (4316,19)-(4316,23)
                            ): ')' (4316,23)-(4316,24)
                          expression_statement (4317,4)-(4318,28)
                            assignment_expression (4317,4)-(4318,27)
                              identifier: 'del2' (4317,4)-(4317,8)
                              =: '=' (4317,9)-(4317,10)
                              call_expression (4317,11)-(4318,27)
                                parenthesized_expression (4317,11)-(4317,19)
                                  (: '(' (4317,11)-(4317,12)
                                  identifier: 'wint_t' (4317,12)-(4317,18)
                                  ): ')' (4317,18)-(4317,19)
                                argument_list (4317,19)-(4318,27)
                                  (: '(' (4317,19)-(4317,20)
                                  conditional_expression (4317,20)-(4318,26)
                                    parenthesized_expression (4317,20)-(4317,35)
                                      (: '(' (4317,20)-(4317,21)
                                      binary_expression (4317,21)-(4317,34)
                                        pointer_expression (4317,21)-(4317,26)
                                          *: '*' (4317,21)-(4317,22)
                                          identifier: 'ptr2' (4317,22)-(4317,26)
                                        ==: '==' (4317,27)-(4317,29)
                                        identifier: 'Meta' (4317,30)-(4317,34)
                                      ): ')' (4317,34)-(4317,35)
                                    ?: '?' (4317,36)-(4317,37)
                                    binary_expression (4318,6)-(4318,18)
                                      subscript_expression (4318,6)-(4318,13)
                                        identifier: 'ptr2' (4318,6)-(4318,10)
                                        [: '[' (4318,10)-(4318,11)
                                        number_literal: '1' (4318,11)-(4318,12)
                                        ]: ']' (4318,12)-(4318,13)
                                      ^: '^' (4318,14)-(4318,15)
                                      number_literal: '32' (4318,16)-(4318,18)
                                    :: ':' (4318,19)-(4318,20)
                                    pointer_expression (4318,21)-(4318,26)
                                      *: '*' (4318,21)-(4318,22)
                                      identifier: 'ptr2' (4318,22)-(4318,26)
                                  ): ')' (4318,26)-(4318,27)
                            ;: ';' (4318,27)-(4318,28)
                        #endif: '#endif' (4319,1)-(4319,7)
                      if_statement (4320,7)-(4321,10)
                        if: 'if' (4320,7)-(4320,9)
                        parenthesized_expression (4320,10)-(4320,23)
                          (: '(' (4320,10)-(4320,11)
                          binary_expression (4320,11)-(4320,22)
                            identifier: 'del2' (4320,11)-(4320,15)
                            ==: '==' (4320,16)-(4320,18)
                            identifier: 'del' (4320,19)-(4320,22)
                          ): ')' (4320,22)-(4320,23)
                        break_statement (4321,4)-(4321,10)
                          break: 'break' (4321,4)-(4321,9)
                          ;: ';' (4321,9)-(4321,10)
                      }: '}' (4322,3)-(4322,4)
                  if_statement (4323,3)-(4326,4)
                    if: 'if' (4323,3)-(4323,5)
                    parenthesized_expression (4323,6)-(4323,14)
                      (: '(' (4323,6)-(4323,7)
                      unary_expression (4323,7)-(4323,13)
                        !: '!' (4323,7)-(4323,8)
                        pointer_expression (4323,8)-(4323,13)
                          *: '*' (4323,8)-(4323,9)
                          identifier: 'ptr2' (4323,9)-(4323,13)
                      ): ')' (4323,13)-(4323,14)
                    compound_statement (4323,15)-(4326,4)
                      {: '{' (4323,15)-(4323,16)
                      expression_statement (4324,7)-(4324,32)
                        call_expression (4324,7)-(4324,31)
                          identifier: 'zerr' (4324,7)-(4324,11)
                          argument_list (4324,11)-(4324,31)
                            (: '(' (4324,11)-(4324,12)
                            string_literal (4324,12)-(4324,30)
                              ": '"' (4324,12)-(4324,13)
                              string_content: 'bad substitution' (4324,13)-(4324,29)
                              ": '"' (4324,29)-(4324,30)
                            ): ')' (4324,30)-(4324,31)
                        ;: ';' (4324,31)-(4324,32)
                      return_statement (4325,7)-(4325,14)
                        return: 'return' (4325,7)-(4325,13)
                        ;: ';' (4325,13)-(4325,14)
                      }: '}' (4326,3)-(4326,4)
                  expression_statement (4327,3)-(4327,18)
                    assignment_expression (4327,3)-(4327,17)
                      identifier: 'ptr1end' (4327,3)-(4327,10)
                      =: '=' (4327,11)-(4327,12)
                      identifier: 'ptr2' (4327,13)-(4327,17)
                    ;: ';' (4327,17)-(4327,18)
                  expression_statement (4328,3)-(4328,19)
                    assignment_expression (4328,3)-(4328,18)
                      identifier: 'ptr2' (4328,3)-(4328,7)
                      +=: '+=' (4328,8)-(4328,10)
                      identifier: 'charlen' (4328,11)-(4328,18)
                    ;: ';' (4328,18)-(4328,19)
                  expression_statement (4329,3)-(4329,19)
                    assignment_expression (4329,3)-(4329,18)
                      identifier: 'sav1' (4329,3)-(4329,7)
                      =: '=' (4329,8)-(4329,9)
                      pointer_expression (4329,10)-(4329,18)
                        *: '*' (4329,10)-(4329,11)
                        identifier: 'ptr1end' (4329,11)-(4329,18)
                    ;: ';' (4329,18)-(4329,19)
                  expression_statement (4330,3)-(4330,19)
                    assignment_expression (4330,3)-(4330,18)
                      pointer_expression (4330,3)-(4330,11)
                        *: '*' (4330,3)-(4330,4)
                        identifier: 'ptr1end' (4330,4)-(4330,11)
                      =: '=' (4330,12)-(4330,13)
                      char_literal (4330,14)-(4330,18)
                        ': ''' (4330,14)-(4330,15)
                        escape_sequence: '\0' (4330,15)-(4330,17)
                        ': ''' (4330,17)-(4330,18)
                    ;: ';' (4330,18)-(4330,19)
                  for_statement (4331,3)-(4348,4)
                    for: 'for' (4331,3)-(4331,6)
                    (: '(' (4331,7)-(4331,8)
                    comma_expression (4331,8)-(4331,32)
                      assignment_expression (4331,8)-(4331,19)
                        identifier: 'ptr3' (4331,8)-(4331,12)
                        =: '=' (4331,13)-(4331,14)
                        identifier: 'ptr2' (4331,15)-(4331,19)
                      ,: ',' (4331,19)-(4331,20)
                      assignment_expression (4331,21)-(4331,32)
                        identifier: 'charlen' (4331,21)-(4331,28)
                        =: '=' (4331,29)-(4331,30)
                        number_literal: '0' (4331,31)-(4331,32)
                    ;: ';' (4331,32)-(4331,33)
                    pointer_expression (4331,34)-(4331,39)
                      *: '*' (4331,34)-(4331,35)
                      identifier: 'ptr3' (4331,35)-(4331,39)
                    ;: ';' (4331,39)-(4331,40)
                    assignment_expression (4331,41)-(4331,56)
                      identifier: 'ptr3' (4331,41)-(4331,45)
                      +=: '+=' (4331,46)-(4331,48)
                      identifier: 'charlen' (4331,49)-(4331,56)
                    ): ')' (4331,56)-(4331,57)
                    compound_statement (4331,58)-(4348,4)
                      {: '{' (4331,58)-(4331,59)
                      declaration (4332,7)-(4332,23)
                        type_identifier: 'convchar_t' (4332,7)-(4332,17)
                        identifier: 'del3' (4332,18)-(4332,22)
                        ;: ';' (4332,22)-(4332,23)
                      if_statement (4333,7)-(4339,8)
                        if: 'if' (4333,7)-(4333,9)
                        parenthesized_expression (4333,10)-(4333,56)
                          (: '(' (4333,10)-(4333,11)
                          binary_expression (4333,11)-(4333,55)
                            parenthesized_expression (4333,11)-(4333,44)
                              (: '(' (4333,11)-(4333,12)
                              binary_expression (4333,12)-(4333,43)
                                binary_expression (4333,12)-(4333,26)
                                  pointer_expression (4333,12)-(4333,17)
                                    *: '*' (4333,12)-(4333,13)
                                    identifier: 'ptr3' (4333,13)-(4333,17)
                                  ==: '==' (4333,18)-(4333,20)
                                  identifier: 'Bnull' (4333,21)-(4333,26)
                                ||: '||' (4333,27)-(4333,29)
                                binary_expression (4333,30)-(4333,43)
                                  pointer_expression (4333,30)-(4333,35)
                                    *: '*' (4333,30)-(4333,31)
                                    identifier: 'ptr3' (4333,31)-(4333,35)
                                  ==: '==' (4333,36)-(4333,38)
                                  char_literal (4333,39)-(4333,43)
                                    ': ''' (4333,39)-(4333,40)
                                    escape_sequence: '\\' (4333,40)-(4333,42)
                                    ': ''' (4333,42)-(4333,43)
                              ): ')' (4333,43)-(4333,44)
                            &&: '&&' (4333,45)-(4333,47)
                            subscript_expression (4333,48)-(4333,55)
                              identifier: 'ptr3' (4333,48)-(4333,52)
                              [: '[' (4333,52)-(4333,53)
                              number_literal: '1' (4333,53)-(4333,54)
                              ]: ']' (4333,54)-(4333,55)
                          ): ')' (4333,55)-(4333,56)
                        compound_statement (4333,57)-(4339,8)
                          {: '{' (4333,57)-(4333,58)
                          comment: '/* in double quotes, the backslash isn't tokenized */' (4334,4)-(4334,57)
                          if_statement (4335,4)-(4336,22)
                            if: 'if' (4335,4)-(4335,6)
                            parenthesized_expression (4335,7)-(4335,22)
                              (: '(' (4335,7)-(4335,8)
                              binary_expression (4335,8)-(4335,21)
                                pointer_expression (4335,8)-(4335,13)
                                  *: '*' (4335,8)-(4335,9)
                                  identifier: 'ptr3' (4335,9)-(4335,13)
                                ==: '==' (4335,14)-(4335,16)
                                char_literal (4335,17)-(4335,21)
                                  ': ''' (4335,17)-(4335,18)
                                  escape_sequence: '\\' (4335,18)-(4335,20)
                                  ': ''' (4335,20)-(4335,21)
                              ): ')' (4335,21)-(4335,22)
                            expression_statement (4336,8)-(4336,22)
                              assignment_expression (4336,8)-(4336,21)
                                pointer_expression (4336,8)-(4336,13)
                                  *: '*' (4336,8)-(4336,9)
                                  identifier: 'ptr3' (4336,9)-(4336,13)
                                =: '=' (4336,14)-(4336,15)
                                identifier: 'Bnull' (4336,16)-(4336,21)
                              ;: ';' (4336,21)-(4336,22)
                          expression_statement (4337,4)-(4337,16)
                            assignment_expression (4337,4)-(4337,15)
                              identifier: 'charlen' (4337,4)-(4337,11)
                              =: '=' (4337,12)-(4337,13)
                              number_literal: '2' (4337,14)-(4337,15)
                            ;: ';' (4337,15)-(4337,16)
                          continue_statement (4338,4)-(4338,13)
                            continue: 'continue' (4338,4)-(4338,12)
                            ;: ';' (4338,12)-(4338,13)
                          }: '}' (4339,7)-(4339,8)
                      expression_statement (4340,7)-(4340,49)
                        assignment_expression (4340,7)-(4340,48)
                          identifier: 'charlen' (4340,7)-(4340,14)
                          =: '=' (4340,15)-(4340,16)
                          call_expression (4340,17)-(4340,48)
                            identifier: 'MB_METACHARLENCONV' (4340,17)-(4340,35)
                            argument_list (4340,35)-(4340,48)
                              (: '(' (4340,35)-(4340,36)
                              identifier: 'ptr3' (4340,36)-(4340,40)
                              ,: ',' (4340,40)-(4340,41)
                              pointer_expression (4340,42)-(4340,47)
                                &: '&' (4340,42)-(4340,43)
                                identifier: 'del3' (4340,43)-(4340,47)
                              ): ')' (4340,47)-(4340,48)
                        ;: ';' (4340,48)-(4340,49)
                      preproc_ifdef (4341,1)-(4345,7)
                        #ifdef: '#ifdef' (4341,1)-(4341,7)
                        identifier: 'MULTIBYTE_SUPPORT' (4341,8)-(4341,25)
                        if_statement (4342,7)-(4344,28)
                          if: 'if' (4342,7)-(4342,9)
                          parenthesized_expression (4342,10)-(4342,24)
                            (: '(' (4342,10)-(4342,11)
                            binary_expression (4342,11)-(4342,23)
                              identifier: 'del3' (4342,11)-(4342,15)
                              ==: '==' (4342,16)-(4342,18)
                              identifier: 'WEOF' (4342,19)-(4342,23)
                            ): ')' (4342,23)-(4342,24)
                          expression_statement (4343,4)-(4344,28)
                            assignment_expression (4343,4)-(4344,27)
                              identifier: 'del3' (4343,4)-(4343,8)
                              =: '=' (4343,9)-(4343,10)
                              call_expression (4343,11)-(4344,27)
                                parenthesized_expression (4343,11)-(4343,19)
                                  (: '(' (4343,11)-(4343,12)
                                  identifier: 'wint_t' (4343,12)-(4343,18)
                                  ): ')' (4343,18)-(4343,19)
                                argument_list (4343,19)-(4344,27)
                                  (: '(' (4343,19)-(4343,20)
                                  conditional_expression (4343,20)-(4344,26)
                                    parenthesized_expression (4343,20)-(4343,35)
                                      (: '(' (4343,20)-(4343,21)
                                      binary_expression (4343,21)-(4343,34)
                                        pointer_expression (4343,21)-(4343,26)
                                          *: '*' (4343,21)-(4343,22)
                                          identifier: 'ptr3' (4343,22)-(4343,26)
                                        ==: '==' (4343,27)-(4343,29)
                                        identifier: 'Meta' (4343,30)-(4343,34)
                                      ): ')' (4343,34)-(4343,35)
                                    ?: '?' (4343,36)-(4343,37)
                                    binary_expression (4344,6)-(4344,18)
                                      subscript_expression (4344,6)-(4344,13)
                                        identifier: 'ptr3' (4344,6)-(4344,10)
                                        [: '[' (4344,10)-(4344,11)
                                        number_literal: '1' (4344,11)-(4344,12)
                                        ]: ']' (4344,12)-(4344,13)
                                      ^: '^' (4344,14)-(4344,15)
                                      number_literal: '32' (4344,16)-(4344,18)
                                    :: ':' (4344,19)-(4344,20)
                                    pointer_expression (4344,21)-(4344,26)
                                      *: '*' (4344,21)-(4344,22)
                                      identifier: 'ptr3' (4344,22)-(4344,26)
                                  ): ')' (4344,26)-(4344,27)
                            ;: ';' (4344,27)-(4344,28)
                        #endif: '#endif' (4345,1)-(4345,7)
                      if_statement (4346,7)-(4347,10)
                        if: 'if' (4346,7)-(4346,9)
                        parenthesized_expression (4346,10)-(4346,23)
                          (: '(' (4346,10)-(4346,11)
                          binary_expression (4346,11)-(4346,22)
                            identifier: 'del3' (4346,11)-(4346,15)
                            ==: '==' (4346,16)-(4346,18)
                            identifier: 'del' (4346,19)-(4346,22)
                          ): ')' (4346,22)-(4346,23)
                        break_statement (4347,4)-(4347,10)
                          break: 'break' (4347,4)-(4347,9)
                          ;: ';' (4347,9)-(4347,10)
                      }: '}' (4348,3)-(4348,4)
                  expression_statement (4349,3)-(4349,15)
                    assignment_expression (4349,3)-(4349,14)
                      identifier: 'sav' (4349,3)-(4349,6)
                      =: '=' (4349,7)-(4349,8)
                      pointer_expression (4349,9)-(4349,14)
                        *: '*' (4349,9)-(4349,10)
                        identifier: 'ptr3' (4349,10)-(4349,14)
                    ;: ';' (4349,14)-(4349,15)
                  expression_statement (4350,3)-(4350,16)
                    assignment_expression (4350,3)-(4350,15)
                      pointer_expression (4350,3)-(4350,8)
                        *: '*' (4350,3)-(4350,4)
                        identifier: 'ptr3' (4350,4)-(4350,8)
                      =: '=' (4350,9)-(4350,10)
                      char_literal (4350,11)-(4350,15)
                        ': ''' (4350,11)-(4350,12)
                        escape_sequence: '\0' (4350,12)-(4350,14)
                        ': ''' (4350,14)-(4350,15)
                    ;: ';' (4350,15)-(4350,16)
                  if_statement (4351,3)-(4354,5)
                    if: 'if' (4351,3)-(4351,5)
                    parenthesized_expression (4351,6)-(4351,13)
                      (: '(' (4351,6)-(4351,7)
                      pointer_expression (4351,7)-(4351,12)
                        *: '*' (4351,7)-(4351,8)
                        identifier: 'ptr1' (4351,8)-(4351,12)
                      ): ')' (4351,12)-(4351,13)
                    compound_statement (4351,14)-(4354,5)
                      {: '{' (4351,14)-(4351,15)
                      expression_statement (4352,7)-(4352,21)
                        call_expression (4352,7)-(4352,20)
                          identifier: 'zsfree' (4352,7)-(4352,13)
                          argument_list (4352,13)-(4352,20)
                            (: '(' (4352,13)-(4352,14)
                            identifier: 'hsubl' (4352,14)-(4352,19)
                            ): ')' (4352,19)-(4352,20)
                        ;: ';' (4352,20)-(4352,21)
                      expression_statement (4353,7)-(4353,28)
                        assignment_expression (4353,7)-(4353,27)
                          identifier: 'hsubl' (4353,7)-(4353,12)
                          =: '=' (4353,13)-(4353,14)
                          call_expression (4353,15)-(4353,27)
                            identifier: 'ztrdup' (4353,15)-(4353,21)
                            argument_list (4353,21)-(4353,27)
                              (: '(' (4353,21)-(4353,22)
                              identifier: 'ptr1' (4353,22)-(4353,26)
                              ): ')' (4353,26)-(4353,27)
                        ;: ';' (4353,27)-(4353,28)
                      }: '}' (4354,4)-(4354,5)
                  if_statement (4355,3)-(4358,4)
                    if: 'if' (4355,3)-(4355,5)
                    parenthesized_expression (4355,6)-(4355,14)
                      (: '(' (4355,6)-(4355,7)
                      unary_expression (4355,7)-(4355,13)
                        !: '!' (4355,7)-(4355,8)
                        identifier: 'hsubl' (4355,8)-(4355,13)
                      ): ')' (4355,13)-(4355,14)
                    compound_statement (4355,15)-(4358,4)
                      {: '{' (4355,15)-(4355,16)
                      expression_statement (4356,7)-(4356,40)
                        call_expression (4356,7)-(4356,39)
                          identifier: 'zerr' (4356,7)-(4356,11)
                          argument_list (4356,11)-(4356,39)
                            (: '(' (4356,11)-(4356,12)
                            string_literal (4356,12)-(4356,38)
                              ": '"' (4356,12)-(4356,13)
                              string_content: 'no previous substitution' (4356,13)-(4356,37)
                              ": '"' (4356,37)-(4356,38)
                            ): ')' (4356,38)-(4356,39)
                        ;: ';' (4356,39)-(4356,40)
                      return_statement (4357,7)-(4357,14)
                        return: 'return' (4357,7)-(4357,13)
                        ;: ';' (4357,13)-(4357,14)
                      }: '}' (4358,3)-(4358,4)
                  expression_statement (4359,3)-(4359,17)
                    call_expression (4359,3)-(4359,16)
                      identifier: 'zsfree' (4359,3)-(4359,9)
                      argument_list (4359,9)-(4359,16)
                        (: '(' (4359,9)-(4359,10)
                        identifier: 'hsubr' (4359,10)-(4359,15)
                        ): ')' (4359,15)-(4359,16)
                    ;: ';' (4359,16)-(4359,17)
                  for_statement (4360,3)-(4362,16)
                    for: 'for' (4360,3)-(4360,6)
                    (: '(' (4360,7)-(4360,8)
                    assignment_expression (4360,8)-(4360,18)
                      identifier: 'tt' (4360,8)-(4360,10)
                      =: '=' (4360,11)-(4360,12)
                      identifier: 'hsubl' (4360,13)-(4360,18)
                    ;: ';' (4360,18)-(4360,19)
                    pointer_expression (4360,20)-(4360,23)
                      *: '*' (4360,20)-(4360,21)
                      identifier: 'tt' (4360,21)-(4360,23)
                    ;: ';' (4360,23)-(4360,24)
                    update_expression (4360,25)-(4360,29)
                      identifier: 'tt' (4360,25)-(4360,27)
                      ++: '++' (4360,27)-(4360,29)
                    ): ')' (4360,29)-(4360,30)
                    if_statement (4361,7)-(4362,16)
                      if: 'if' (4361,7)-(4361,9)
                      parenthesized_expression (4361,10)-(4361,42)
                        (: '(' (4361,10)-(4361,11)
                        binary_expression (4361,11)-(4361,41)
                          call_expression (4361,11)-(4361,21)
                            identifier: 'inull' (4361,11)-(4361,16)
                            argument_list (4361,16)-(4361,21)
                              (: '(' (4361,16)-(4361,17)
                              pointer_expression (4361,17)-(4361,20)
                                *: '*' (4361,17)-(4361,18)
                                identifier: 'tt' (4361,18)-(4361,20)
                              ): ')' (4361,20)-(4361,21)
                          &&: '&&' (4361,22)-(4361,24)
                          binary_expression (4361,25)-(4361,41)
                            pointer_expression (4361,25)-(4361,28)
                              *: '*' (4361,25)-(4361,26)
                              identifier: 'tt' (4361,26)-(4361,28)
                            !=: '!=' (4361,29)-(4361,31)
                            identifier: 'Bnullkeep' (4361,32)-(4361,41)
                        ): ')' (4361,41)-(4361,42)
                      expression_statement (4362,4)-(4362,16)
                        call_expression (4362,4)-(4362,15)
                          identifier: 'chuck' (4362,4)-(4362,9)
                          argument_list (4362,9)-(4362,15)
                            (: '(' (4362,9)-(4362,10)
                            update_expression (4362,10)-(4362,14)
                              identifier: 'tt' (4362,10)-(4362,12)
                              --: '--' (4362,12)-(4362,14)
                            ): ')' (4362,14)-(4362,15)
                        ;: ';' (4362,15)-(4362,16)
                  if_statement (4363,3)-(4364,25)
                    if: 'if' (4363,3)-(4363,5)
                    parenthesized_expression (4363,6)-(4363,32)
                      (: '(' (4363,6)-(4363,7)
                      unary_expression (4363,7)-(4363,31)
                        !: '!' (4363,7)-(4363,8)
                        call_expression (4363,8)-(4363,31)
                          identifier: 'isset' (4363,8)-(4363,13)
                          argument_list (4363,13)-(4363,31)
                            (: '(' (4363,13)-(4363,14)
                            identifier: 'HISTSUBSTPATTERN' (4363,14)-(4363,30)
                            ): ')' (4363,30)-(4363,31)
                      ): ')' (4363,31)-(4363,32)
                    expression_statement (4364,7)-(4364,25)
                      call_expression (4364,7)-(4364,24)
                        identifier: 'untokenize' (4364,7)-(4364,17)
                        argument_list (4364,17)-(4364,24)
                          (: '(' (4364,17)-(4364,18)
                          identifier: 'hsubl' (4364,18)-(4364,23)
                          ): ')' (4364,23)-(4364,24)
                      ;: ';' (4364,24)-(4364,25)
                  for_statement (4365,3)-(4378,4)
                    for: 'for' (4365,3)-(4365,6)
                    (: '(' (4365,7)-(4365,8)
                    assignment_expression (4365,8)-(4365,33)
                      identifier: 'tt' (4365,8)-(4365,10)
                      =: '=' (4365,11)-(4365,12)
                      assignment_expression (4365,13)-(4365,33)
                        identifier: 'hsubr' (4365,13)-(4365,18)
                        =: '=' (4365,19)-(4365,20)
                        call_expression (4365,21)-(4365,33)
                          identifier: 'ztrdup' (4365,21)-(4365,27)
                          argument_list (4365,27)-(4365,33)
                            (: '(' (4365,27)-(4365,28)
                            identifier: 'ptr2' (4365,28)-(4365,32)
                            ): ')' (4365,32)-(4365,33)
                    ;: ';' (4365,33)-(4365,34)
                    pointer_expression (4365,35)-(4365,38)
                      *: '*' (4365,35)-(4365,36)
                      identifier: 'tt' (4365,36)-(4365,38)
                    ;: ';' (4365,38)-(4365,39)
                    update_expression (4365,40)-(4365,44)
                      identifier: 'tt' (4365,40)-(4365,42)
                      ++: '++' (4365,42)-(4365,44)
                    ): ')' (4365,44)-(4365,45)
                    compound_statement (4365,46)-(4378,4)
                      {: '{' (4365,46)-(4365,47)
                      if_statement (4366,7)-(4377,8)
                        if: 'if' (4366,7)-(4366,9)
                        parenthesized_expression (4366,10)-(4366,42)
                          (: '(' (4366,10)-(4366,11)
                          binary_expression (4366,11)-(4366,41)
                            call_expression (4366,11)-(4366,21)
                              identifier: 'inull' (4366,11)-(4366,16)
                              argument_list (4366,16)-(4366,21)
                                (: '(' (4366,16)-(4366,17)
                                pointer_expression (4366,17)-(4366,20)
                                  *: '*' (4366,17)-(4366,18)
                                  identifier: 'tt' (4366,18)-(4366,20)
                                ): ')' (4366,20)-(4366,21)
                            &&: '&&' (4366,22)-(4366,24)
                            binary_expression (4366,25)-(4366,41)
                              pointer_expression (4366,25)-(4366,28)
                                *: '*' (4366,25)-(4366,26)
                                identifier: 'tt' (4366,26)-(4366,28)
                              !=: '!=' (4366,29)-(4366,31)
                              identifier: 'Bnullkeep' (4366,32)-(4366,41)
                          ): ')' (4366,41)-(4366,42)
                        compound_statement (4366,43)-(4377,8)
                          {: '{' (4366,43)-(4366,44)
                          if_statement (4367,4)-(4376,5)
                            if: 'if' (4367,4)-(4367,6)
                            parenthesized_expression (4367,7)-(4367,56)
                              (: '(' (4367,7)-(4367,8)
                              binary_expression (4367,8)-(4367,55)
                                binary_expression (4367,8)-(4367,20)
                                  pointer_expression (4367,8)-(4367,11)
                                    *: '*' (4367,8)-(4367,9)
                                    identifier: 'tt' (4367,9)-(4367,11)
                                  ==: '==' (4367,12)-(4367,14)
                                  identifier: 'Bnull' (4367,15)-(4367,20)
                                &&: '&&' (4367,21)-(4367,23)
                                parenthesized_expression (4367,24)-(4367,55)
                                  (: '(' (4367,24)-(4367,25)
                                  binary_expression (4367,25)-(4367,54)
                                    binary_expression (4367,25)-(4367,37)
                                      subscript_expression (4367,25)-(4367,30)
                                        identifier: 'tt' (4367,25)-(4367,27)
                                        [: '[' (4367,27)-(4367,28)
                                        number_literal: '1' (4367,28)-(4367,29)
                                        ]: ']' (4367,29)-(4367,30)
                                      ==: '==' (4367,31)-(4367,33)
                                      char_literal (4367,34)-(4367,37)
                                        ': ''' (4367,34)-(4367,35)
                                        character: '&' (4367,35)-(4367,36)
                                        ': ''' (4367,36)-(4367,37)
                                    ||: '||' (4367,38)-(4367,40)
                                    binary_expression (4367,41)-(4367,54)
                                      subscript_expression (4367,41)-(4367,46)
                                        identifier: 'tt' (4367,41)-(4367,43)
                                        [: '[' (4367,43)-(4367,44)
                                        number_literal: '1' (4367,44)-(4367,45)
                                        ]: ']' (4367,45)-(4367,46)
                                      ==: '==' (4367,47)-(4367,49)
                                      char_literal (4367,50)-(4367,54)
                                        ': ''' (4367,50)-(4367,51)
                                        escape_sequence: '\\' (4367,51)-(4367,53)
                                        ': ''' (4367,53)-(4367,54)
                                  ): ')' (4367,54)-(4367,55)
                              ): ')' (4367,55)-(4367,56)
                            compound_statement (4367,57)-(4374,5)
                              {: '{' (4367,57)-(4367,58)
                              comment: '/*
			     * The substitution will treat \& and \\
			     * specially.  We need to leave real \'s
			     * as the first character for this to work.
			     */' (4368,8)-(4372,11)
                              expression_statement (4373,8)-(4373,19)
                                assignment_expression (4373,8)-(4373,18)
                                  pointer_expression (4373,8)-(4373,11)
                                    *: '*' (4373,8)-(4373,9)
                                    identifier: 'tt' (4373,9)-(4373,11)
                                  =: '=' (4373,12)-(4373,13)
                                  char_literal (4373,14)-(4373,18)
                                    ': ''' (4373,14)-(4373,15)
                                    escape_sequence: '\\' (4373,15)-(4373,17)
                                    ': ''' (4373,17)-(4373,18)
                                ;: ';' (4373,18)-(4373,19)
                              }: '}' (4374,4)-(4374,5)
                            else_clause (4374,6)-(4376,5)
                              else: 'else' (4374,6)-(4374,10)
                              compound_statement (4374,11)-(4376,5)
                                {: '{' (4374,11)-(4374,12)
                                expression_statement (4375,8)-(4375,20)
                                  call_expression (4375,8)-(4375,19)
                                    identifier: 'chuck' (4375,8)-(4375,13)
                                    argument_list (4375,13)-(4375,19)
                                      (: '(' (4375,13)-(4375,14)
                                      update_expression (4375,14)-(4375,18)
                                        identifier: 'tt' (4375,14)-(4375,16)
                                        --: '--' (4375,16)-(4375,18)
                                      ): ')' (4375,18)-(4375,19)
                                  ;: ';' (4375,19)-(4375,20)
                                }: '}' (4376,4)-(4376,5)
                          }: '}' (4377,7)-(4377,8)
                      }: '}' (4378,3)-(4378,4)
                  expression_statement (4379,3)-(4379,19)
                    assignment_expression (4379,3)-(4379,18)
                      pointer_expression (4379,3)-(4379,11)
                        *: '*' (4379,3)-(4379,4)
                        identifier: 'ptr1end' (4379,4)-(4379,11)
                      =: '=' (4379,12)-(4379,13)
                      identifier: 'sav1' (4379,14)-(4379,18)
                    ;: ';' (4379,18)-(4379,19)
                  expression_statement (4380,3)-(4380,15)
                    assignment_expression (4380,3)-(4380,14)
                      pointer_expression (4380,3)-(4380,8)
                        *: '*' (4380,3)-(4380,4)
                        identifier: 'ptr3' (4380,4)-(4380,8)
                      =: '=' (4380,9)-(4380,10)
                      identifier: 'sav' (4380,11)-(4380,14)
                    ;: ';' (4380,14)-(4380,15)
                  expression_statement (4381,3)-(4381,19)
                    assignment_expression (4381,3)-(4381,18)
                      pointer_expression (4381,3)-(4381,7)
                        *: '*' (4381,3)-(4381,4)
                        identifier: 'ptr' (4381,4)-(4381,7)
                      =: '=' (4381,8)-(4381,9)
                      binary_expression (4381,10)-(4381,18)
                        identifier: 'ptr3' (4381,10)-(4381,14)
                        -: '-' (4381,15)-(4381,16)
                        number_literal: '1' (4381,17)-(4381,18)
                    ;: ';' (4381,18)-(4381,19)
                  if_statement (4382,3)-(4385,4)
                    if: 'if' (4382,3)-(4382,5)
                    parenthesized_expression (4382,6)-(4382,13)
                      (: '(' (4382,6)-(4382,7)
                      pointer_expression (4382,7)-(4382,12)
                        *: '*' (4382,7)-(4382,8)
                        identifier: 'ptr3' (4382,8)-(4382,12)
                      ): ')' (4382,12)-(4382,13)
                    compound_statement (4382,14)-(4385,4)
                      {: '{' (4382,14)-(4382,15)
                      comment: '/* Final terminator is optional. */' (4383,7)-(4383,42)
                      expression_statement (4384,7)-(4384,23)
                        assignment_expression (4384,7)-(4384,22)
                          pointer_expression (4384,7)-(4384,11)
                            *: '*' (4384,7)-(4384,8)
                            identifier: 'ptr' (4384,8)-(4384,11)
                          +=: '+=' (4384,12)-(4384,14)
                          identifier: 'charlen' (4384,15)-(4384,22)
                        ;: ';' (4384,22)-(4384,23)
                      }: '}' (4385,3)-(4385,4)
                  break_statement (4386,3)-(4386,9)
                    break: 'break' (4386,3)-(4386,8)
                    ;: ';' (4386,8)-(4386,9)
                  case_statement (4388,6)-(4390,9)
                    case: 'case' (4388,6)-(4388,10)
                    char_literal (4388,11)-(4388,14)
                      ': ''' (4388,11)-(4388,12)
                      character: '&' (4388,12)-(4388,13)
                      ': ''' (4388,13)-(4388,14)
                    :: ':' (4388,14)-(4388,15)
                    expression_statement (4389,3)-(4389,11)
                      assignment_expression (4389,3)-(4389,10)
                        identifier: 'c' (4389,3)-(4389,4)
                        =: '=' (4389,5)-(4389,6)
                        char_literal (4389,7)-(4389,10)
                          ': ''' (4389,7)-(4389,8)
                          character: 's' (4389,8)-(4389,9)
                          ': ''' (4389,9)-(4389,10)
                      ;: ';' (4389,10)-(4389,11)
                    break_statement (4390,3)-(4390,9)
                      break: 'break' (4390,3)-(4390,8)
                      ;: ';' (4390,8)-(4390,9)
                  case_statement (4392,6)-(4395,9)
                    case: 'case' (4392,6)-(4392,10)
                    char_literal (4392,11)-(4392,14)
                      ': ''' (4392,11)-(4392,12)
                      character: 'g' (4392,12)-(4392,13)
                      ': ''' (4392,13)-(4392,14)
                    :: ':' (4392,14)-(4392,15)
                    expression_statement (4393,3)-(4393,12)
                      update_expression (4393,3)-(4393,11)
                        parenthesized_expression (4393,3)-(4393,9)
                          (: '(' (4393,3)-(4393,4)
                          pointer_expression (4393,4)-(4393,8)
                            *: '*' (4393,4)-(4393,5)
                            identifier: 'ptr' (4393,5)-(4393,8)
                          ): ')' (4393,8)-(4393,9)
                        ++: '++' (4393,9)-(4393,11)
                      ;: ';' (4393,11)-(4393,12)
                    expression_statement (4394,3)-(4394,12)
                      assignment_expression (4394,3)-(4394,11)
                        identifier: 'gbal' (4394,3)-(4394,7)
                        =: '=' (4394,8)-(4394,9)
                        number_literal: '1' (4394,10)-(4394,11)
                      ;: ';' (4394,11)-(4394,12)
                    break_statement (4395,3)-(4395,9)
                      break: 'break' (4395,3)-(4395,8)
                      ;: ';' (4395,8)-(4395,9)
                  case_statement (4397,6)-(4400,9)
                    case: 'case' (4397,6)-(4397,10)
                    char_literal (4397,11)-(4397,14)
                      ': ''' (4397,11)-(4397,12)
                      character: 'w' (4397,12)-(4397,13)
                      ': ''' (4397,13)-(4397,14)
                    :: ':' (4397,14)-(4397,15)
                    expression_statement (4398,3)-(4398,12)
                      assignment_expression (4398,3)-(4398,11)
                        identifier: 'wall' (4398,3)-(4398,7)
                        =: '=' (4398,8)-(4398,9)
                        number_literal: '1' (4398,10)-(4398,11)
                      ;: ';' (4398,11)-(4398,12)
                    expression_statement (4399,3)-(4399,12)
                      update_expression (4399,3)-(4399,11)
                        parenthesized_expression (4399,3)-(4399,9)
                          (: '(' (4399,3)-(4399,4)
                          pointer_expression (4399,4)-(4399,8)
                            *: '*' (4399,4)-(4399,5)
                            identifier: 'ptr' (4399,5)-(4399,8)
                          ): ')' (4399,8)-(4399,9)
                        ++: '++' (4399,9)-(4399,11)
                      ;: ';' (4399,11)-(4399,12)
                    break_statement (4400,3)-(4400,9)
                      break: 'break' (4400,3)-(4400,8)
                      ;: ';' (4400,8)-(4400,9)
                  case_statement (4401,6)-(4412,9)
                    case: 'case' (4401,6)-(4401,10)
                    char_literal (4401,11)-(4401,14)
                      ': ''' (4401,11)-(4401,12)
                      character: 'W' (4401,12)-(4401,13)
                      ': ''' (4401,13)-(4401,14)
                    :: ':' (4401,14)-(4401,15)
                    expression_statement (4402,3)-(4402,12)
                      assignment_expression (4402,3)-(4402,11)
                        identifier: 'wall' (4402,3)-(4402,7)
                        =: '=' (4402,8)-(4402,9)
                        number_literal: '1' (4402,10)-(4402,11)
                      ;: ';' (4402,11)-(4402,12)
                    expression_statement (4403,3)-(4403,12)
                      update_expression (4403,3)-(4403,11)
                        parenthesized_expression (4403,3)-(4403,9)
                          (: '(' (4403,3)-(4403,4)
                          pointer_expression (4403,4)-(4403,8)
                            *: '*' (4403,4)-(4403,5)
                            identifier: 'ptr' (4403,5)-(4403,8)
                          ): ')' (4403,8)-(4403,9)
                        ++: '++' (4403,9)-(4403,11)
                      ;: ';' (4403,11)-(4403,12)
                    expression_statement (4404,3)-(4404,44)
                      assignment_expression (4404,3)-(4404,43)
                        identifier: 'ptr1' (4404,3)-(4404,7)
                        =: '=' (4404,8)-(4404,9)
                        call_expression (4404,10)-(4404,43)
                          identifier: 'get_strarg' (4404,10)-(4404,20)
                          argument_list (4404,20)-(4404,43)
                            (: '(' (4404,20)-(4404,21)
                            assignment_expression (4404,21)-(4404,32)
                              identifier: 'ptr2' (4404,21)-(4404,25)
                              =: '=' (4404,26)-(4404,27)
                              pointer_expression (4404,28)-(4404,32)
                                *: '*' (4404,28)-(4404,29)
                                identifier: 'ptr' (4404,29)-(4404,32)
                            ,: ',' (4404,32)-(4404,33)
                            pointer_expression (4404,34)-(4404,42)
                              &: '&' (4404,34)-(4404,35)
                              identifier: 'charlen' (4404,35)-(4404,42)
                            ): ')' (4404,42)-(4404,43)
                      ;: ';' (4404,43)-(4404,44)
                    if_statement (4405,3)-(4406,20)
                      if: 'if' (4405,3)-(4405,5)
                      parenthesized_expression (4405,6)-(4405,21)
                        (: '(' (4405,6)-(4405,7)
                        parenthesized_expression (4405,7)-(4405,20)
                          (: '(' (4405,7)-(4405,8)
                          assignment_expression (4405,8)-(4405,19)
                            identifier: 'sav' (4405,8)-(4405,11)
                            =: '=' (4405,12)-(4405,13)
                            pointer_expression (4405,14)-(4405,19)
                              *: '*' (4405,14)-(4405,15)
                              identifier: 'ptr1' (4405,15)-(4405,19)
                          ): ')' (4405,19)-(4405,20)
                        ): ')' (4405,20)-(4405,21)
                      expression_statement (4406,7)-(4406,20)
                        assignment_expression (4406,7)-(4406,19)
                          pointer_expression (4406,7)-(4406,12)
                            *: '*' (4406,7)-(4406,8)
                            identifier: 'ptr1' (4406,8)-(4406,12)
                          =: '=' (4406,13)-(4406,14)
                          char_literal (4406,15)-(4406,19)
                            ': ''' (4406,15)-(4406,16)
                            escape_sequence: '\0' (4406,16)-(4406,18)
                            ': ''' (4406,18)-(4406,19)
                        ;: ';' (4406,19)-(4406,20)
                    expression_statement (4407,3)-(4407,35)
                      assignment_expression (4407,3)-(4407,34)
                        identifier: 'sep' (4407,3)-(4407,6)
                        =: '=' (4407,7)-(4407,8)
                        call_expression (4407,9)-(4407,34)
                          identifier: 'dupstring' (4407,9)-(4407,18)
                          argument_list (4407,18)-(4407,34)
                            (: '(' (4407,18)-(4407,19)
                            binary_expression (4407,19)-(4407,33)
                              identifier: 'ptr2' (4407,19)-(4407,23)
                              +: '+' (4407,24)-(4407,25)
                              identifier: 'charlen' (4407,26)-(4407,33)
                            ): ')' (4407,33)-(4407,34)
                      ;: ';' (4407,34)-(4407,35)
                    if_statement (4408,3)-(4409,19)
                      if: 'if' (4408,3)-(4408,5)
                      parenthesized_expression (4408,6)-(4408,11)
                        (: '(' (4408,6)-(4408,7)
                        identifier: 'sav' (4408,7)-(4408,10)
                        ): ')' (4408,10)-(4408,11)
                      expression_statement (4409,7)-(4409,19)
                        assignment_expression (4409,7)-(4409,18)
                          pointer_expression (4409,7)-(4409,12)
                            *: '*' (4409,7)-(4409,8)
                            identifier: 'ptr1' (4409,8)-(4409,12)
                          =: '=' (4409,13)-(4409,14)
                          identifier: 'sav' (4409,15)-(4409,18)
                        ;: ';' (4409,18)-(4409,19)
                    expression_statement (4410,3)-(4410,25)
                      assignment_expression (4410,3)-(4410,24)
                        pointer_expression (4410,3)-(4410,7)
                          *: '*' (4410,3)-(4410,4)
                          identifier: 'ptr' (4410,4)-(4410,7)
                        =: '=' (4410,8)-(4410,9)
                        binary_expression (4410,10)-(4410,24)
                          identifier: 'ptr1' (4410,10)-(4410,14)
                          +: '+' (4410,15)-(4410,16)
                          identifier: 'charlen' (4410,17)-(4410,24)
                      ;: ';' (4410,24)-(4410,25)
                    expression_statement (4411,3)-(4411,12)
                      assignment_expression (4411,3)-(4411,11)
                        identifier: 'c' (4411,3)-(4411,4)
                        =: '=' (4411,5)-(4411,6)
                        char_literal (4411,7)-(4411,11)
                          ': ''' (4411,7)-(4411,8)
                          escape_sequence: '\0' (4411,8)-(4411,10)
                          ': ''' (4411,10)-(4411,11)
                      ;: ';' (4411,11)-(4411,12)
                    break_statement (4412,3)-(4412,9)
                      break: 'break' (4412,3)-(4412,8)
                      ;: ';' (4412,8)-(4412,9)
                  case_statement (4414,6)-(4417,9)
                    case: 'case' (4414,6)-(4414,10)
                    char_literal (4414,11)-(4414,14)
                      ': ''' (4414,11)-(4414,12)
                      character: 'f' (4414,12)-(4414,13)
                      ': ''' (4414,13)-(4414,14)
                    :: ':' (4414,14)-(4414,15)
                    expression_statement (4415,3)-(4415,12)
                      assignment_expression (4415,3)-(4415,11)
                        identifier: 'rec' (4415,3)-(4415,6)
                        =: '=' (4415,7)-(4415,8)
                        number_literal: '-1' (4415,9)-(4415,11)
                      ;: ';' (4415,11)-(4415,12)
                    expression_statement (4416,3)-(4416,12)
                      update_expression (4416,3)-(4416,11)
                        parenthesized_expression (4416,3)-(4416,9)
                          (: '(' (4416,3)-(4416,4)
                          pointer_expression (4416,4)-(4416,8)
                            *: '*' (4416,4)-(4416,5)
                            identifier: 'ptr' (4416,5)-(4416,8)
                          ): ')' (4416,8)-(4416,9)
                        ++: '++' (4416,9)-(4416,11)
                      ;: ';' (4416,11)-(4416,12)
                    break_statement (4417,3)-(4417,9)
                      break: 'break' (4417,3)-(4417,8)
                      ;: ';' (4417,8)-(4417,9)
                  case_statement (4418,6)-(4421,9)
                    case: 'case' (4418,6)-(4418,10)
                    char_literal (4418,11)-(4418,14)
                      ': ''' (4418,11)-(4418,12)
                      character: 'F' (4418,12)-(4418,13)
                      ': ''' (4418,13)-(4418,14)
                    :: ':' (4418,14)-(4418,15)
                    expression_statement (4419,3)-(4419,12)
                      update_expression (4419,3)-(4419,11)
                        parenthesized_expression (4419,3)-(4419,9)
                          (: '(' (4419,3)-(4419,4)
                          pointer_expression (4419,4)-(4419,8)
                            *: '*' (4419,4)-(4419,5)
                            identifier: 'ptr' (4419,5)-(4419,8)
                          ): ')' (4419,8)-(4419,9)
                        ++: '++' (4419,9)-(4419,11)
                      ;: ';' (4419,11)-(4419,12)
                    expression_statement (4420,3)-(4420,34)
                      assignment_expression (4420,3)-(4420,33)
                        identifier: 'rec' (4420,3)-(4420,6)
                        =: '=' (4420,7)-(4420,8)
                        call_expression (4420,9)-(4420,33)
                          identifier: 'get_intarg' (4420,9)-(4420,19)
                          argument_list (4420,19)-(4420,33)
                            (: '(' (4420,19)-(4420,20)
                            identifier: 'ptr' (4420,20)-(4420,23)
                            ,: ',' (4420,23)-(4420,24)
                            pointer_expression (4420,25)-(4420,32)
                              &: '&' (4420,25)-(4420,26)
                              identifier: 'dellen' (4420,26)-(4420,32)
                            ): ')' (4420,32)-(4420,33)
                      ;: ';' (4420,33)-(4420,34)
                    break_statement (4421,3)-(4421,9)
                      break: 'break' (4421,3)-(4421,8)
                      ;: ';' (4421,8)-(4421,9)
                  case_statement (4422,6)-(4424,10)
                    default: 'default' (4422,6)-(4422,13)
                    :: ':' (4422,13)-(4422,14)
                    expression_statement (4423,3)-(4423,15)
                      assignment_expression (4423,3)-(4423,14)
                        pointer_expression (4423,3)-(4423,7)
                          *: '*' (4423,3)-(4423,4)
                          identifier: 'ptr' (4423,4)-(4423,7)
                        =: '=' (4423,8)-(4423,9)
                        identifier: 'lptr' (4423,10)-(4423,14)
                      ;: ';' (4423,14)-(4423,15)
                    return_statement (4424,3)-(4424,10)
                      return: 'return' (4424,3)-(4424,9)
                      ;: ';' (4424,9)-(4424,10)
                  }: '}' (4425,6)-(4425,7)
              }: '}' (4426,2)-(4426,3)
          expression_statement (4427,2)-(4427,11)
            update_expression (4427,2)-(4427,10)
              parenthesized_expression (4427,2)-(4427,8)
                (: '(' (4427,2)-(4427,3)
                pointer_expression (4427,3)-(4427,7)
                  *: '*' (4427,3)-(4427,4)
                  identifier: 'ptr' (4427,4)-(4427,7)
                ): ')' (4427,7)-(4427,8)
              ++: '++' (4427,8)-(4427,10)
            ;: ';' (4427,10)-(4427,11)
          if_statement (4428,2)-(4431,3)
            if: 'if' (4428,2)-(4428,4)
            parenthesized_expression (4428,5)-(4428,9)
              (: '(' (4428,5)-(4428,6)
              unary_expression (4428,6)-(4428,8)
                !: '!' (4428,6)-(4428,7)
                identifier: 'c' (4428,7)-(4428,8)
              ): ')' (4428,8)-(4428,9)
            compound_statement (4428,10)-(4431,3)
              {: '{' (4428,10)-(4428,11)
              expression_statement (4429,6)-(4429,18)
                assignment_expression (4429,6)-(4429,17)
                  pointer_expression (4429,6)-(4429,10)
                    *: '*' (4429,6)-(4429,7)
                    identifier: 'ptr' (4429,7)-(4429,10)
                  =: '=' (4429,11)-(4429,12)
                  identifier: 'lptr' (4429,13)-(4429,17)
                ;: ';' (4429,17)-(4429,18)
              return_statement (4430,6)-(4430,13)
                return: 'return' (4430,6)-(4430,12)
                ;: ';' (4430,12)-(4430,13)
              }: '}' (4431,2)-(4431,3)
          if_statement (4432,2)-(4433,29)
            if: 'if' (4432,2)-(4432,4)
            parenthesized_expression (4432,5)-(4432,14)
              (: '(' (4432,5)-(4432,6)
              binary_expression (4432,6)-(4432,13)
                identifier: 'rec' (4432,6)-(4432,9)
                <: '<' (4432,10)-(4432,11)
                number_literal: '0' (4432,12)-(4432,13)
              ): ')' (4432,13)-(4432,14)
            expression_statement (4433,6)-(4433,29)
              assignment_expression (4433,6)-(4433,28)
                identifier: 'test' (4433,6)-(4433,10)
                =: '=' (4433,11)-(4433,12)
                call_expression (4433,13)-(4433,28)
                  identifier: 'dupstring' (4433,13)-(4433,22)
                  argument_list (4433,22)-(4433,28)
                    (: '(' (4433,22)-(4433,23)
                    pointer_expression (4433,23)-(4433,27)
                      *: '*' (4433,23)-(4433,24)
                      identifier: 'str' (4433,24)-(4433,27)
                    ): ')' (4433,27)-(4433,28)
              ;: ';' (4433,28)-(4433,29)
          while_statement (4435,2)-(4601,3)
            while: 'while' (4435,2)-(4435,7)
            parenthesized_expression (4435,8)-(4435,15)
              (: '(' (4435,8)-(4435,9)
              update_expression (4435,9)-(4435,14)
                identifier: 'rec' (4435,9)-(4435,12)
                --: '--' (4435,12)-(4435,14)
              ): ')' (4435,14)-(4435,15)
            compound_statement (4435,16)-(4601,3)
              {: '{' (4435,16)-(4435,17)
              if_statement (4436,6)-(4594,7)
                if: 'if' (4436,6)-(4436,8)
                parenthesized_expression (4436,9)-(4436,15)
                  (: '(' (4436,9)-(4436,10)
                  identifier: 'wall' (4436,10)-(4436,14)
                  ): ')' (4436,14)-(4436,15)
                compound_statement (4436,16)-(4530,7)
                  {: '{' (4436,16)-(4436,17)
                  expression_statement (4437,3)-(4437,10)
                    assignment_expression (4437,3)-(4437,9)
                      identifier: 'al' (4437,3)-(4437,5)
                      =: '=' (4437,6)-(4437,7)
                      number_literal: '0' (4437,8)-(4437,9)
                    ;: ';' (4437,9)-(4437,10)
                  expression_statement (4438,3)-(4438,14)
                    assignment_expression (4438,3)-(4438,13)
                      identifier: 'all' (4438,3)-(4438,6)
                      =: '=' (4438,7)-(4438,8)
                      null (4438,9)-(4438,13)
                        NULL: 'NULL' (4438,9)-(4438,13)
                    ;: ';' (4438,13)-(4438,14)
                  for_statement (4439,3)-(4524,4)
                    for: 'for' (4439,3)-(4439,6)
                    (: '(' (4439,7)-(4439,8)
                    assignment_expression (4439,8)-(4439,20)
                      identifier: 't' (4439,8)-(4439,9)
                      =: '=' (4439,10)-(4439,11)
                      assignment_expression (4439,12)-(4439,20)
                        identifier: 'e' (4439,12)-(4439,13)
                        =: '=' (4439,14)-(4439,15)
                        pointer_expression (4439,16)-(4439,20)
                          *: '*' (4439,16)-(4439,17)
                          identifier: 'str' (4439,17)-(4439,20)
                    ;: ';' (4439,20)-(4439,21)
                    parenthesized_expression (4439,22)-(4439,46)
                      (: '(' (4439,22)-(4439,23)
                      assignment_expression (4439,23)-(4439,45)
                        identifier: 'tt' (4439,23)-(4439,25)
                        =: '=' (4439,26)-(4439,27)
                        call_expression (4439,28)-(4439,45)
                          identifier: 'findword' (4439,28)-(4439,36)
                          argument_list (4439,36)-(4439,45)
                            (: '(' (4439,36)-(4439,37)
                            pointer_expression (4439,37)-(4439,39)
                              &: '&' (4439,37)-(4439,38)
                              identifier: 'e' (4439,38)-(4439,39)
                            ,: ',' (4439,39)-(4439,40)
                            identifier: 'sep' (4439,41)-(4439,44)
                            ): ')' (4439,44)-(4439,45)
                      ): ')' (4439,45)-(4439,46)
                    ;: ';' (4439,46)-(4439,47)
                    ): ')' (4439,47)-(4439,48)
                    compound_statement (4439,49)-(4524,4)
                      {: '{' (4439,49)-(4439,50)
                      expression_statement (4440,7)-(4440,15)
                        assignment_expression (4440,7)-(4440,14)
                          identifier: 'tc' (4440,7)-(4440,9)
                          =: '=' (4440,10)-(4440,11)
                          pointer_expression (4440,12)-(4440,14)
                            *: '*' (4440,12)-(4440,13)
                            identifier: 'e' (4440,13)-(4440,14)
                        ;: ';' (4440,14)-(4440,15)
                      expression_statement (4441,7)-(4441,17)
                        assignment_expression (4441,7)-(4441,16)
                          pointer_expression (4441,7)-(4441,9)
                            *: '*' (4441,7)-(4441,8)
                            identifier: 'e' (4441,8)-(4441,9)
                          =: '=' (4441,10)-(4441,11)
                          char_literal (4441,12)-(4441,16)
                            ': ''' (4441,12)-(4441,13)
                            escape_sequence: '\0' (4441,13)-(4441,15)
                            ': ''' (4441,15)-(4441,16)
                        ;: ';' (4441,16)-(4441,17)
                      if_statement (4442,7)-(4443,25)
                        if: 'if' (4442,7)-(4442,9)
                        parenthesized_expression (4442,10)-(4442,32)
                          (: '(' (4442,10)-(4442,11)
                          binary_expression (4442,11)-(4442,31)
                            binary_expression (4442,11)-(4442,19)
                              identifier: 'c' (4442,11)-(4442,12)
                              !=: '!=' (4442,13)-(4442,15)
                              char_literal (4442,16)-(4442,19)
                                ': ''' (4442,16)-(4442,17)
                                character: 'l' (4442,17)-(4442,18)
                                ': ''' (4442,18)-(4442,19)
                            &&: '&&' (4442,20)-(4442,22)
                            binary_expression (4442,23)-(4442,31)
                              identifier: 'c' (4442,23)-(4442,24)
                              !=: '!=' (4442,25)-(4442,27)
                              char_literal (4442,28)-(4442,31)
                                ': ''' (4442,28)-(4442,29)
                                character: 'u' (4442,29)-(4442,30)
                                ': ''' (4442,30)-(4442,31)
                          ): ')' (4442,31)-(4442,32)
                        expression_statement (4443,4)-(4443,25)
                          assignment_expression (4443,4)-(4443,24)
                            identifier: 'copy' (4443,4)-(4443,8)
                            =: '=' (4443,9)-(4443,10)
                            call_expression (4443,11)-(4443,24)
                              identifier: 'dupstring' (4443,11)-(4443,20)
                              argument_list (4443,20)-(4443,24)
                                (: '(' (4443,20)-(4443,21)
                                identifier: 'tt' (4443,21)-(4443,23)
                                ): ')' (4443,23)-(4443,24)
                          ;: ';' (4443,24)-(4443,25)
                      expression_statement (4444,7)-(4444,15)
                        assignment_expression (4444,7)-(4444,14)
                          pointer_expression (4444,7)-(4444,9)
                            *: '*' (4444,7)-(4444,8)
                            identifier: 'e' (4444,8)-(4444,9)
                          =: '=' (4444,10)-(4444,11)
                          identifier: 'tc' (4444,12)-(4444,14)
                        ;: ';' (4444,14)-(4444,15)
                      switch_statement (4445,7)-(4507,8)
                        switch: 'switch' (4445,7)-(4445,13)
                        parenthesized_expression (4445,14)-(4445,17)
                          (: '(' (4445,14)-(4445,15)
                          identifier: 'c' (4445,15)-(4445,16)
                          ): ')' (4445,16)-(4445,17)
                        compound_statement (4445,18)-(4507,8)
                          {: '{' (4445,18)-(4445,19)
                          case_statement (4446,21)-(4448,10)
                            case: 'case' (4446,21)-(4446,25)
                            char_literal (4446,26)-(4446,29)
                              ': ''' (4446,26)-(4446,27)
                              character: 'a' (4446,27)-(4446,28)
                              ': ''' (4446,28)-(4446,29)
                            :: ':' (4446,29)-(4446,30)
                            expression_statement (4447,4)-(4447,21)
                              call_expression (4447,4)-(4447,20)
                                identifier: 'chabspath' (4447,4)-(4447,13)
                                argument_list (4447,13)-(4447,20)
                                  (: '(' (4447,13)-(4447,14)
                                  pointer_expression (4447,14)-(4447,19)
                                    &: '&' (4447,14)-(4447,15)
                                    identifier: 'copy' (4447,15)-(4447,19)
                                  ): ')' (4447,19)-(4447,20)
                              ;: ';' (4447,20)-(4447,21)
                            break_statement (4448,4)-(4448,10)
                              break: 'break' (4448,4)-(4448,9)
                              ;: ';' (4448,9)-(4448,10)
                          case_statement (4449,7)-(4451,10)
                            case: 'case' (4449,7)-(4449,11)
                            char_literal (4449,12)-(4449,15)
                              ': ''' (4449,12)-(4449,13)
                              character: 'A' (4449,13)-(4449,14)
                              ': ''' (4449,14)-(4449,15)
                            :: ':' (4449,15)-(4449,16)
                            expression_statement (4450,4)-(4450,30)
                              call_expression (4450,4)-(4450,29)
                                identifier: 'chrealpath' (4450,4)-(4450,14)
                                argument_list (4450,14)-(4450,29)
                                  (: '(' (4450,14)-(4450,15)
                                  pointer_expression (4450,15)-(4450,20)
                                    &: '&' (4450,15)-(4450,16)
                                    identifier: 'copy' (4450,16)-(4450,20)
                                  ,: ',' (4450,20)-(4450,21)
                                  char_literal (4450,22)-(4450,25)
                                    ': ''' (4450,22)-(4450,23)
                                    character: 'A' (4450,23)-(4450,24)
                                    ': ''' (4450,24)-(4450,25)
                                  ,: ',' (4450,25)-(4450,26)
                                  number_literal: '1' (4450,27)-(4450,28)
                                  ): ')' (4450,28)-(4450,29)
                              ;: ';' (4450,29)-(4450,30)
                            break_statement (4451,4)-(4451,10)
                              break: 'break' (4451,4)-(4451,9)
                              ;: ';' (4451,9)-(4451,10)
                          case_statement (4452,7)-(4458,8)
                            case: 'case' (4452,7)-(4452,11)
                            char_literal (4452,12)-(4452,15)
                              ': ''' (4452,12)-(4452,13)
                              character: 'c' (4452,13)-(4452,14)
                              ': ''' (4452,14)-(4452,15)
                            :: ':' (4452,15)-(4452,16)
                            compound_statement (4453,7)-(4458,8)
                              {: '{' (4453,7)-(4453,8)
                              declaration (4454,4)-(4454,42)
                                primitive_type: 'char' (4454,4)-(4454,8)
                                init_declarator (4454,9)-(4454,41)
                                  pointer_declarator (4454,9)-(4454,15)
                                    *: '*' (4454,9)-(4454,10)
                                    identifier: 'copy2' (4454,10)-(4454,15)
                                  =: '=' (4454,16)-(4454,17)
                                  call_expression (4454,18)-(4454,41)
                                    identifier: 'equalsubstr' (4454,18)-(4454,29)
                                    argument_list (4454,29)-(4454,41)
                                      (: '(' (4454,29)-(4454,30)
                                      identifier: 'copy' (4454,30)-(4454,34)
                                      ,: ',' (4454,34)-(4454,35)
                                      number_literal: '0' (4454,36)-(4454,37)
                                      ,: ',' (4454,37)-(4454,38)
                                      number_literal: '0' (4454,39)-(4454,40)
                                      ): ')' (4454,40)-(4454,41)
                                ;: ';' (4454,41)-(4454,42)
                              if_statement (4455,4)-(4456,21)
                                if: 'if' (4455,4)-(4455,6)
                                parenthesized_expression (4455,7)-(4455,14)
                                  (: '(' (4455,7)-(4455,8)
                                  identifier: 'copy2' (4455,8)-(4455,13)
                                  ): ')' (4455,13)-(4455,14)
                                expression_statement (4456,8)-(4456,21)
                                  assignment_expression (4456,8)-(4456,20)
                                    identifier: 'copy' (4456,8)-(4456,12)
                                    =: '=' (4456,13)-(4456,14)
                                    identifier: 'copy2' (4456,15)-(4456,20)
                                  ;: ';' (4456,20)-(4456,21)
                              break_statement (4457,4)-(4457,10)
                                break: 'break' (4457,4)-(4457,9)
                                ;: ';' (4457,9)-(4457,10)
                              }: '}' (4458,7)-(4458,8)
                          case_statement (4459,7)-(4461,10)
                            case: 'case' (4459,7)-(4459,11)
                            char_literal (4459,12)-(4459,15)
                              ': ''' (4459,12)-(4459,13)
                              character: 'h' (4459,13)-(4459,14)
                              ': ''' (4459,14)-(4459,15)
                            :: ':' (4459,15)-(4459,16)
                            expression_statement (4460,4)-(4460,27)
                              call_expression (4460,4)-(4460,26)
                                identifier: 'remtpath' (4460,4)-(4460,12)
                                argument_list (4460,12)-(4460,26)
                                  (: '(' (4460,12)-(4460,13)
                                  pointer_expression (4460,13)-(4460,18)
                                    &: '&' (4460,13)-(4460,14)
                                    identifier: 'copy' (4460,14)-(4460,18)
                                  ,: ',' (4460,18)-(4460,19)
                                  identifier: 'count' (4460,20)-(4460,25)
                                  ): ')' (4460,25)-(4460,26)
                              ;: ';' (4460,26)-(4460,27)
                            break_statement (4461,4)-(4461,10)
                              break: 'break' (4461,4)-(4461,9)
                              ;: ';' (4461,9)-(4461,10)
                          case_statement (4462,7)-(4464,10)
                            case: 'case' (4462,7)-(4462,11)
                            char_literal (4462,12)-(4462,15)
                              ': ''' (4462,12)-(4462,13)
                              character: 'r' (4462,13)-(4462,14)
                              ': ''' (4462,14)-(4462,15)
                            :: ':' (4462,15)-(4462,16)
                            expression_statement (4463,4)-(4463,19)
                              call_expression (4463,4)-(4463,18)
                                identifier: 'remtext' (4463,4)-(4463,11)
                                argument_list (4463,11)-(4463,18)
                                  (: '(' (4463,11)-(4463,12)
                                  pointer_expression (4463,12)-(4463,17)
                                    &: '&' (4463,12)-(4463,13)
                                    identifier: 'copy' (4463,13)-(4463,17)
                                  ): ')' (4463,17)-(4463,18)
                              ;: ';' (4463,18)-(4463,19)
                            break_statement (4464,4)-(4464,10)
                              break: 'break' (4464,4)-(4464,9)
                              ;: ';' (4464,9)-(4464,10)
                          case_statement (4465,7)-(4467,10)
                            case: 'case' (4465,7)-(4465,11)
                            char_literal (4465,12)-(4465,15)
                              ': ''' (4465,12)-(4465,13)
                              character: 'e' (4465,13)-(4465,14)
                              ': ''' (4465,14)-(4465,15)
                            :: ':' (4465,15)-(4465,16)
                            expression_statement (4466,4)-(4466,21)
                              call_expression (4466,4)-(4466,20)
                                identifier: 'rembutext' (4466,4)-(4466,13)
                                argument_list (4466,13)-(4466,20)
                                  (: '(' (4466,13)-(4466,14)
                                  pointer_expression (4466,14)-(4466,19)
                                    &: '&' (4466,14)-(4466,15)
                                    identifier: 'copy' (4466,15)-(4466,19)
                                  ): ')' (4466,19)-(4466,20)
                              ;: ';' (4466,20)-(4466,21)
                            break_statement (4467,4)-(4467,10)
                              break: 'break' (4467,4)-(4467,9)
                              ;: ';' (4467,9)-(4467,10)
                          case_statement (4468,7)-(4470,10)
                            case: 'case' (4468,7)-(4468,11)
                            char_literal (4468,12)-(4468,15)
                              ': ''' (4468,12)-(4468,13)
                              character: 't' (4468,13)-(4468,14)
                              ': ''' (4468,14)-(4468,15)
                            :: ':' (4468,15)-(4468,16)
                            expression_statement (4469,4)-(4469,28)
                              call_expression (4469,4)-(4469,27)
                                identifier: 'remlpaths' (4469,4)-(4469,13)
                                argument_list (4469,13)-(4469,27)
                                  (: '(' (4469,13)-(4469,14)
                                  pointer_expression (4469,14)-(4469,19)
                                    &: '&' (4469,14)-(4469,15)
                                    identifier: 'copy' (4469,15)-(4469,19)
                                  ,: ',' (4469,19)-(4469,20)
                                  identifier: 'count' (4469,21)-(4469,26)
                                  ): ')' (4469,26)-(4469,27)
                              ;: ';' (4469,27)-(4469,28)
                            break_statement (4470,4)-(4470,10)
                              break: 'break' (4470,4)-(4470,9)
                              ;: ';' (4470,9)-(4470,10)
                          case_statement (4471,7)-(4473,10)
                            case: 'case' (4471,7)-(4471,11)
                            char_literal (4471,12)-(4471,15)
                              ': ''' (4471,12)-(4471,13)
                              character: 'l' (4471,13)-(4471,14)
                              ': ''' (4471,14)-(4471,15)
                            :: ':' (4471,15)-(4471,16)
                            expression_statement (4472,4)-(4472,40)
                              assignment_expression (4472,4)-(4472,39)
                                identifier: 'copy' (4472,4)-(4472,8)
                                =: '=' (4472,9)-(4472,10)
                                call_expression (4472,11)-(4472,39)
                                  identifier: 'casemodify' (4472,11)-(4472,21)
                                  argument_list (4472,21)-(4472,39)
                                    (: '(' (4472,21)-(4472,22)
                                    identifier: 'tt' (4472,22)-(4472,24)
                                    ,: ',' (4472,24)-(4472,25)
                                    identifier: 'CASMOD_LOWER' (4472,26)-(4472,38)
                                    ): ')' (4472,38)-(4472,39)
                              ;: ';' (4472,39)-(4472,40)
                            break_statement (4473,4)-(4473,10)
                              break: 'break' (4473,4)-(4473,9)
                              ;: ';' (4473,9)-(4473,10)
                          case_statement (4474,7)-(4476,10)
                            case: 'case' (4474,7)-(4474,11)
                            char_literal (4474,12)-(4474,15)
                              ': ''' (4474,12)-(4474,13)
                              character: 'u' (4474,13)-(4474,14)
                              ': ''' (4474,14)-(4474,15)
                            :: ':' (4474,15)-(4474,16)
                            expression_statement (4475,4)-(4475,40)
                              assignment_expression (4475,4)-(4475,39)
                                identifier: 'copy' (4475,4)-(4475,8)
                                =: '=' (4475,9)-(4475,10)
                                call_expression (4475,11)-(4475,39)
                                  identifier: 'casemodify' (4475,11)-(4475,21)
                                  argument_list (4475,21)-(4475,39)
                                    (: '(' (4475,21)-(4475,22)
                                    identifier: 'tt' (4475,22)-(4475,24)
                                    ,: ',' (4475,24)-(4475,25)
                                    identifier: 'CASMOD_UPPER' (4475,26)-(4475,38)
                                    ): ')' (4475,38)-(4475,39)
                              ;: ';' (4475,39)-(4475,40)
                            break_statement (4476,4)-(4476,10)
                              break: 'break' (4476,4)-(4476,9)
                              ;: ';' (4476,9)-(4476,10)
                          case_statement (4477,7)-(4480,10)
                            case: 'case' (4477,7)-(4477,11)
                            char_literal (4477,12)-(4477,15)
                              ': ''' (4477,12)-(4477,13)
                              character: 's' (4477,13)-(4477,14)
                              ': ''' (4477,14)-(4477,15)
                            :: ':' (4477,15)-(4477,16)
                            if_statement (4478,4)-(4479,41)
                              if: 'if' (4478,4)-(4478,6)
                              parenthesized_expression (4478,7)-(4478,23)
                                (: '(' (4478,7)-(4478,8)
                                binary_expression (4478,8)-(4478,22)
                                  identifier: 'hsubl' (4478,8)-(4478,13)
                                  &&: '&&' (4478,14)-(4478,16)
                                  identifier: 'hsubr' (4478,17)-(4478,22)
                                ): ')' (4478,22)-(4478,23)
                              expression_statement (4479,8)-(4479,41)
                                call_expression (4479,8)-(4479,40)
                                  identifier: 'subst' (4479,8)-(4479,13)
                                  argument_list (4479,13)-(4479,40)
                                    (: '(' (4479,13)-(4479,14)
                                    pointer_expression (4479,14)-(4479,19)
                                      &: '&' (4479,14)-(4479,15)
                                      identifier: 'copy' (4479,15)-(4479,19)
                                    ,: ',' (4479,19)-(4479,20)
                                    identifier: 'hsubl' (4479,21)-(4479,26)
                                    ,: ',' (4479,26)-(4479,27)
                                    identifier: 'hsubr' (4479,28)-(4479,33)
                                    ,: ',' (4479,33)-(4479,34)
                                    identifier: 'gbal' (4479,35)-(4479,39)
                                    ): ')' (4479,39)-(4479,40)
                                ;: ';' (4479,40)-(4479,41)
                            break_statement (4480,4)-(4480,10)
                              break: 'break' (4480,4)-(4480,9)
                              ;: ';' (4480,9)-(4480,10)
                          case_statement (4481,7)-(4483,10)
                            case: 'case' (4481,7)-(4481,11)
                            char_literal (4481,12)-(4481,15)
                              ': ''' (4481,12)-(4481,13)
                              character: 'q' (4481,13)-(4481,14)
                              ': ''' (4481,14)-(4481,15)
                            :: ':' (4481,15)-(4481,16)
                            expression_statement (4482,4)-(4482,52)
                              assignment_expression (4482,4)-(4482,51)
                                identifier: 'copy' (4482,4)-(4482,8)
                                =: '=' (4482,9)-(4482,10)
                                call_expression (4482,11)-(4482,51)
                                  identifier: 'quotestring' (4482,11)-(4482,22)
                                  argument_list (4482,22)-(4482,51)
                                    (: '(' (4482,22)-(4482,23)
                                    identifier: 'copy' (4482,23)-(4482,27)
                                    ,: ',' (4482,27)-(4482,28)
                                    identifier: 'QT_BACKSLASH_SHOWNULL' (4482,29)-(4482,50)
                                    ): ')' (4482,50)-(4482,51)
                              ;: ';' (4482,51)-(4482,52)
                            break_statement (4483,4)-(4483,10)
                              break: 'break' (4483,4)-(4483,9)
                              ;: ';' (4483,9)-(4483,10)
                          case_statement (4484,7)-(4496,10)
                            case: 'case' (4484,7)-(4484,11)
                            char_literal (4484,12)-(4484,15)
                              ': ''' (4484,12)-(4484,13)
                              character: 'Q' (4484,13)-(4484,14)
                              ': ''' (4484,14)-(4484,15)
                            :: ':' (4484,15)-(4484,16)
                            compound_statement (4485,4)-(4495,5)
                              {: '{' (4485,4)-(4485,5)
                              declaration (4486,8)-(4486,40)
                                primitive_type: 'int' (4486,8)-(4486,11)
                                init_declarator (4486,12)-(4486,24)
                                  identifier: 'one' (4486,12)-(4486,15)
                                  =: '=' (4486,16)-(4486,17)
                                  identifier: 'noerrs' (4486,18)-(4486,24)
                                ,: ',' (4486,24)-(4486,25)
                                init_declarator (4486,26)-(4486,39)
                                  identifier: 'oef' (4486,26)-(4486,29)
                                  =: '=' (4486,30)-(4486,31)
                                  identifier: 'errflag' (4486,32)-(4486,39)
                                ;: ';' (4486,39)-(4486,40)
                              expression_statement (4488,8)-(4488,19)
                                assignment_expression (4488,8)-(4488,18)
                                  identifier: 'noerrs' (4488,8)-(4488,14)
                                  =: '=' (4488,15)-(4488,16)
                                  number_literal: '1' (4488,17)-(4488,18)
                                ;: ';' (4488,18)-(4488,19)
                              expression_statement (4489,8)-(4489,33)
                                call_expression (4489,8)-(4489,32)
                                  identifier: 'parse_subst_string' (4489,8)-(4489,26)
                                  argument_list (4489,26)-(4489,32)
                                    (: '(' (4489,26)-(4489,27)
                                    identifier: 'copy' (4489,27)-(4489,31)
                                    ): ')' (4489,31)-(4489,32)
                                ;: ';' (4489,32)-(4489,33)
                              expression_statement (4490,8)-(4490,21)
                                assignment_expression (4490,8)-(4490,20)
                                  identifier: 'noerrs' (4490,8)-(4490,14)
                                  =: '=' (4490,15)-(4490,16)
                                  identifier: 'one' (4490,17)-(4490,20)
                                ;: ';' (4490,20)-(4490,21)
                              comment: '/* Retain any user interrupt error status */' (4491,8)-(4491,52)
                              expression_statement (4492,8)-(4492,48)
                                assignment_expression (4492,8)-(4492,47)
                                  identifier: 'errflag' (4492,8)-(4492,15)
                                  =: '=' (4492,16)-(4492,17)
                                  binary_expression (4492,18)-(4492,47)
                                    identifier: 'oef' (4492,18)-(4492,21)
                                    |: '|' (4492,22)-(4492,23)
                                    parenthesized_expression (4492,24)-(4492,47)
                                      (: '(' (4492,24)-(4492,25)
                                      binary_expression (4492,25)-(4492,46)
                                        identifier: 'errflag' (4492,25)-(4492,32)
                                        &: '&' (4492,33)-(4492,34)
                                        identifier: 'ERRFLAG_INT' (4492,35)-(4492,46)
                                      ): ')' (4492,46)-(4492,47)
                                ;: ';' (4492,47)-(4492,48)
                              expression_statement (4493,8)-(4493,25)
                                call_expression (4493,8)-(4493,24)
                                  identifier: 'remnulargs' (4493,8)-(4493,18)
                                  argument_list (4493,18)-(4493,24)
                                    (: '(' (4493,18)-(4493,19)
                                    identifier: 'copy' (4493,19)-(4493,23)
                                    ): ')' (4493,23)-(4493,24)
                                ;: ';' (4493,24)-(4493,25)
                              expression_statement (4494,8)-(4494,25)
                                call_expression (4494,8)-(4494,24)
                                  identifier: 'untokenize' (4494,8)-(4494,18)
                                  argument_list (4494,18)-(4494,24)
                                    (: '(' (4494,18)-(4494,19)
                                    identifier: 'copy' (4494,19)-(4494,23)
                                    ): ')' (4494,23)-(4494,24)
                                ;: ';' (4494,24)-(4494,25)
                              }: '}' (4495,4)-(4495,5)
                            break_statement (4496,4)-(4496,10)
                              break: 'break' (4496,4)-(4496,9)
                              ;: ';' (4496,9)-(4496,10)
                          case_statement (4497,7)-(4506,10)
                            case: 'case' (4497,7)-(4497,11)
                            char_literal (4497,12)-(4497,15)
                              ': ''' (4497,12)-(4497,13)
                              character: 'P' (4497,13)-(4497,14)
                              ': ''' (4497,14)-(4497,15)
                            :: ':' (4497,15)-(4497,16)
                            if_statement (4498,4)-(4504,5)
                              if: 'if' (4498,4)-(4498,6)
                              parenthesized_expression (4498,7)-(4498,21)
                                (: '(' (4498,7)-(4498,8)
                                binary_expression (4498,8)-(4498,20)
                                  pointer_expression (4498,8)-(4498,13)
                                    *: '*' (4498,8)-(4498,9)
                                    identifier: 'copy' (4498,9)-(4498,13)
                                  !=: '!=' (4498,14)-(4498,16)
                                  char_literal (4498,17)-(4498,20)
                                    ': ''' (4498,17)-(4498,18)
                                    character: '/' (4498,18)-(4498,19)
                                    ': ''' (4498,19)-(4498,20)
                                ): ')' (4498,20)-(4498,21)
                              compound_statement (4498,22)-(4504,5)
                                {: '{' (4498,22)-(4498,23)
                                declaration (4499,8)-(4499,31)
                                  primitive_type: 'char' (4499,8)-(4499,12)
                                  init_declarator (4499,13)-(4499,30)
                                    pointer_declarator (4499,13)-(4499,18)
                                      *: '*' (4499,13)-(4499,14)
                                      identifier: 'here' (4499,14)-(4499,18)
                                    =: '=' (4499,19)-(4499,20)
                                    call_expression (4499,21)-(4499,30)
                                      identifier: 'zgetcwd' (4499,21)-(4499,28)
                                      argument_list (4499,28)-(4499,30)
                                        (: '(' (4499,28)-(4499,29)
                                        ): ')' (4499,29)-(4499,30)
                                  ;: ';' (4499,30)-(4499,31)
                                if_statement (4500,8)-(4503,31)
                                  if: 'if' (4500,8)-(4500,10)
                                  parenthesized_expression (4500,11)-(4500,40)
                                    (: '(' (4500,11)-(4500,12)
                                    binary_expression (4500,12)-(4500,39)
                                      subscript_expression (4500,12)-(4500,32)
                                        identifier: 'here' (4500,12)-(4500,16)
                                        [: '[' (4500,16)-(4500,17)
                                        binary_expression (4500,17)-(4500,31)
                                          call_expression (4500,17)-(4500,29)
                                            identifier: 'strlen' (4500,17)-(4500,23)
                                            argument_list (4500,23)-(4500,29)
                                              (: '(' (4500,23)-(4500,24)
                                              identifier: 'here' (4500,24)-(4500,28)
                                              ): ')' (4500,28)-(4500,29)
                                          -: '-' (4500,29)-(4500,30)
                                          number_literal: '1' (4500,30)-(4500,31)
                                        ]: ']' (4500,31)-(4500,32)
                                      !=: '!=' (4500,33)-(4500,35)
                                      char_literal (4500,36)-(4500,39)
                                        ': ''' (4500,36)-(4500,37)
                                        character: '/' (4500,37)-(4500,38)
                                        ': ''' (4500,38)-(4500,39)
                                    ): ')' (4500,39)-(4500,40)
                                  expression_statement (4501,5)-(4501,64)
                                    assignment_expression (4501,5)-(4501,63)
                                      identifier: 'copy' (4501,5)-(4501,9)
                                      =: '=' (4501,10)-(4501,11)
                                      call_expression (4501,12)-(4501,63)
                                        identifier: 'zhtricat' (4501,12)-(4501,20)
                                        argument_list (4501,20)-(4501,63)
                                          (: '(' (4501,20)-(4501,21)
                                          call_expression (4501,21)-(4501,51)
                                            identifier: 'metafy' (4501,21)-(4501,27)
                                            argument_list (4501,27)-(4501,51)
                                              (: '(' (4501,27)-(4501,28)
                                              identifier: 'here' (4501,28)-(4501,32)
                                              ,: ',' (4501,32)-(4501,33)
                                              number_literal: '-1' (4501,34)-(4501,36)
                                              ,: ',' (4501,36)-(4501,37)
                                              identifier: 'META_HEAPDUP' (4501,38)-(4501,50)
                                              ): ')' (4501,50)-(4501,51)
                                          ,: ',' (4501,51)-(4501,52)
                                          string_literal (4501,53)-(4501,56)
                                            ": '"' (4501,53)-(4501,54)
                                            string_content: '/' (4501,54)-(4501,55)
                                            ": '"' (4501,55)-(4501,56)
                                          ,: ',' (4501,56)-(4501,57)
                                          identifier: 'copy' (4501,58)-(4501,62)
                                          ): ')' (4501,62)-(4501,63)
                                    ;: ';' (4501,63)-(4501,64)
                                  else_clause (4502,8)-(4503,31)
                                    else: 'else' (4502,8)-(4502,12)
                                    expression_statement (4503,5)-(4503,31)
                                      assignment_expression (4503,5)-(4503,30)
                                        identifier: 'copy' (4503,5)-(4503,9)
                                        =: '=' (4503,10)-(4503,11)
                                        call_expression (4503,12)-(4503,30)
                                          identifier: 'dyncat' (4503,12)-(4503,18)
                                          argument_list (4503,18)-(4503,30)
                                            (: '(' (4503,18)-(4503,19)
                                            identifier: 'here' (4503,19)-(4503,23)
                                            ,: ',' (4503,23)-(4503,24)
                                            identifier: 'copy' (4503,25)-(4503,29)
                                            ): ')' (4503,29)-(4503,30)
                                      ;: ';' (4503,30)-(4503,31)
                                }: '}' (4504,4)-(4504,5)
                            expression_statement (4505,4)-(4505,29)
                              assignment_expression (4505,4)-(4505,28)
                                identifier: 'copy' (4505,4)-(4505,8)
                                =: '=' (4505,9)-(4505,10)
                                call_expression (4505,11)-(4505,28)
                                  identifier: 'xsymlink' (4505,11)-(4505,19)
                                  argument_list (4505,19)-(4505,28)
                                    (: '(' (4505,19)-(4505,20)
                                    identifier: 'copy' (4505,20)-(4505,24)
                                    ,: ',' (4505,24)-(4505,25)
                                    number_literal: '1' (4505,26)-(4505,27)
                                    ): ')' (4505,27)-(4505,28)
                              ;: ';' (4505,28)-(4505,29)
                            break_statement (4506,4)-(4506,10)
                              break: 'break' (4506,4)-(4506,9)
                              ;: ';' (4506,9)-(4506,10)
                          }: '}' (4507,7)-(4507,8)
                      expression_statement (4508,7)-(4508,16)
                        assignment_expression (4508,7)-(4508,15)
                          identifier: 'tc' (4508,7)-(4508,9)
                          =: '=' (4508,10)-(4508,11)
                          pointer_expression (4508,12)-(4508,15)
                            *: '*' (4508,12)-(4508,13)
                            identifier: 'tt' (4508,13)-(4508,15)
                        ;: ';' (4508,15)-(4508,16)
                      expression_statement (4509,7)-(4509,18)
                        assignment_expression (4509,7)-(4509,17)
                          pointer_expression (4509,7)-(4509,10)
                            *: '*' (4509,7)-(4509,8)
                            identifier: 'tt' (4509,8)-(4509,10)
                          =: '=' (4509,11)-(4509,12)
                          char_literal (4509,13)-(4509,17)
                            ': ''' (4509,13)-(4509,14)
                            escape_sequence: '\0' (4509,14)-(4509,16)
                            ': ''' (4509,16)-(4509,17)
                        ;: ';' (4509,17)-(4509,18)
                      expression_statement (4510,7)-(4510,42)
                        assignment_expression (4510,7)-(4510,41)
                          identifier: 'nl' (4510,7)-(4510,9)
                          =: '=' (4510,10)-(4510,11)
                          binary_expression (4510,12)-(4510,41)
                            binary_expression (4510,12)-(4510,26)
                              identifier: 'al' (4510,12)-(4510,14)
                              +: '+' (4510,15)-(4510,16)
                              call_expression (4510,17)-(4510,26)
                                identifier: 'strlen' (4510,17)-(4510,23)
                                argument_list (4510,23)-(4510,26)
                                  (: '(' (4510,23)-(4510,24)
                                  identifier: 't' (4510,24)-(4510,25)
                                  ): ')' (4510,25)-(4510,26)
                            +: '+' (4510,27)-(4510,28)
                            call_expression (4510,29)-(4510,41)
                              identifier: 'strlen' (4510,29)-(4510,35)
                              argument_list (4510,35)-(4510,41)
                                (: '(' (4510,35)-(4510,36)
                                identifier: 'copy' (4510,36)-(4510,40)
                                ): ')' (4510,40)-(4510,41)
                        ;: ';' (4510,41)-(4510,42)
                      expression_statement (4511,7)-(4511,44)
                        assignment_expression (4511,7)-(4511,43)
                          identifier: 'ptr1' (4511,7)-(4511,11)
                          =: '=' (4511,12)-(4511,13)
                          assignment_expression (4511,14)-(4511,43)
                            identifier: 'tmp' (4511,14)-(4511,17)
                            =: '=' (4511,18)-(4511,19)
                            cast_expression (4511,20)-(4511,43)
                              (: '(' (4511,20)-(4511,21)
                              type_descriptor (4511,21)-(4511,27)
                                primitive_type: 'char' (4511,21)-(4511,25)
                                abstract_pointer_declarator (4511,26)-(4511,27)
                                  *: '*' (4511,26)-(4511,27)
                              ): ')' (4511,27)-(4511,28)
                              call_expression (4511,28)-(4511,43)
                                identifier: 'zhalloc' (4511,28)-(4511,35)
                                argument_list (4511,35)-(4511,43)
                                  (: '(' (4511,35)-(4511,36)
                                  binary_expression (4511,36)-(4511,42)
                                    identifier: 'nl' (4511,36)-(4511,38)
                                    +: '+' (4511,39)-(4511,40)
                                    number_literal: '1' (4511,41)-(4511,42)
                                  ): ')' (4511,42)-(4511,43)
                        ;: ';' (4511,43)-(4511,44)
                      if_statement (4512,7)-(4514,26)
                        if: 'if' (4512,7)-(4512,9)
                        parenthesized_expression (4512,10)-(4512,15)
                          (: '(' (4512,10)-(4512,11)
                          identifier: 'all' (4512,11)-(4512,14)
                          ): ')' (4512,14)-(4512,15)
                        for_statement (4513,4)-(4514,26)
                          for: 'for' (4513,4)-(4513,7)
                          (: '(' (4513,8)-(4513,9)
                          assignment_expression (4513,9)-(4513,19)
                            identifier: 'ptr2' (4513,9)-(4513,13)
                            =: '=' (4513,14)-(4513,15)
                            identifier: 'all' (4513,16)-(4513,19)
                          ;: ';' (4513,19)-(4513,20)
                          pointer_expression (4513,21)-(4513,26)
                            *: '*' (4513,21)-(4513,22)
                            identifier: 'ptr2' (4513,22)-(4513,26)
                          ;: ';' (4513,26)-(4513,27)
                          ): ')' (4513,27)-(4513,28)
                          expression_statement (4514,8)-(4514,26)
                            assignment_expression (4514,8)-(4514,25)
                              pointer_expression (4514,8)-(4514,15)
                                *: '*' (4514,8)-(4514,9)
                                update_expression (4514,9)-(4514,15)
                                  identifier: 'ptr1' (4514,9)-(4514,13)
                                  ++: '++' (4514,13)-(4514,15)
                              =: '=' (4514,16)-(4514,17)
                              pointer_expression (4514,18)-(4514,25)
                                *: '*' (4514,18)-(4514,19)
                                update_expression (4514,19)-(4514,25)
                                  identifier: 'ptr2' (4514,19)-(4514,23)
                                  ++: '++' (4514,23)-(4514,25)
                            ;: ';' (4514,25)-(4514,26)
                      for_statement (4515,7)-(4516,22)
                        for: 'for' (4515,7)-(4515,10)
                        (: '(' (4515,11)-(4515,12)
                        assignment_expression (4515,12)-(4515,20)
                          identifier: 'ptr2' (4515,12)-(4515,16)
                          =: '=' (4515,17)-(4515,18)
                          identifier: 't' (4515,19)-(4515,20)
                        ;: ';' (4515,20)-(4515,21)
                        pointer_expression (4515,22)-(4515,27)
                          *: '*' (4515,22)-(4515,23)
                          identifier: 'ptr2' (4515,23)-(4515,27)
                        ;: ';' (4515,27)-(4515,28)
                        ): ')' (4515,28)-(4515,29)
                        expression_statement (4516,4)-(4516,22)
                          assignment_expression (4516,4)-(4516,21)
                            pointer_expression (4516,4)-(4516,11)
                              *: '*' (4516,4)-(4516,5)
                              update_expression (4516,5)-(4516,11)
                                identifier: 'ptr1' (4516,5)-(4516,9)
                                ++: '++' (4516,9)-(4516,11)
                            =: '=' (4516,12)-(4516,13)
                            pointer_expression (4516,14)-(4516,21)
                              *: '*' (4516,14)-(4516,15)
                              update_expression (4516,15)-(4516,21)
                                identifier: 'ptr2' (4516,15)-(4516,19)
                                ++: '++' (4516,19)-(4516,21)
                          ;: ';' (4516,21)-(4516,22)
                      expression_statement (4517,7)-(4517,16)
                        assignment_expression (4517,7)-(4517,15)
                          pointer_expression (4517,7)-(4517,10)
                            *: '*' (4517,7)-(4517,8)
                            identifier: 'tt' (4517,8)-(4517,10)
                          =: '=' (4517,11)-(4517,12)
                          identifier: 'tc' (4517,13)-(4517,15)
                        ;: ';' (4517,15)-(4517,16)
                      for_statement (4518,7)-(4519,22)
                        for: 'for' (4518,7)-(4518,10)
                        (: '(' (4518,11)-(4518,12)
                        assignment_expression (4518,12)-(4518,23)
                          identifier: 'ptr2' (4518,12)-(4518,16)
                          =: '=' (4518,17)-(4518,18)
                          identifier: 'copy' (4518,19)-(4518,23)
                        ;: ';' (4518,23)-(4518,24)
                        pointer_expression (4518,25)-(4518,30)
                          *: '*' (4518,25)-(4518,26)
                          identifier: 'ptr2' (4518,26)-(4518,30)
                        ;: ';' (4518,30)-(4518,31)
                        ): ')' (4518,31)-(4518,32)
                        expression_statement (4519,4)-(4519,22)
                          assignment_expression (4519,4)-(4519,21)
                            pointer_expression (4519,4)-(4519,11)
                              *: '*' (4519,4)-(4519,5)
                              update_expression (4519,5)-(4519,11)
                                identifier: 'ptr1' (4519,5)-(4519,9)
                                ++: '++' (4519,9)-(4519,11)
                            =: '=' (4519,12)-(4519,13)
                            pointer_expression (4519,14)-(4519,21)
                              *: '*' (4519,14)-(4519,15)
                              update_expression (4519,15)-(4519,21)
                                identifier: 'ptr2' (4519,15)-(4519,19)
                                ++: '++' (4519,19)-(4519,21)
                          ;: ';' (4519,21)-(4519,22)
                      expression_statement (4520,7)-(4520,20)
                        assignment_expression (4520,7)-(4520,19)
                          pointer_expression (4520,7)-(4520,12)
                            *: '*' (4520,7)-(4520,8)
                            identifier: 'ptr1' (4520,8)-(4520,12)
                          =: '=' (4520,13)-(4520,14)
                          char_literal (4520,15)-(4520,19)
                            ': ''' (4520,15)-(4520,16)
                            escape_sequence: '\0' (4520,16)-(4520,18)
                            ': ''' (4520,18)-(4520,19)
                        ;: ';' (4520,19)-(4520,20)
                      expression_statement (4521,7)-(4521,15)
                        assignment_expression (4521,7)-(4521,14)
                          identifier: 'al' (4521,7)-(4521,9)
                          =: '=' (4521,10)-(4521,11)
                          identifier: 'nl' (4521,12)-(4521,14)
                        ;: ';' (4521,14)-(4521,15)
                      expression_statement (4522,7)-(4522,17)
                        assignment_expression (4522,7)-(4522,16)
                          identifier: 'all' (4522,7)-(4522,10)
                          =: '=' (4522,11)-(4522,12)
                          identifier: 'tmp' (4522,13)-(4522,16)
                        ;: ';' (4522,16)-(4522,17)
                      expression_statement (4523,7)-(4523,13)
                        assignment_expression (4523,7)-(4523,12)
                          identifier: 't' (4523,7)-(4523,8)
                          =: '=' (4523,9)-(4523,10)
                          identifier: 'e' (4523,11)-(4523,12)
                        ;: ';' (4523,12)-(4523,13)
                      }: '}' (4524,3)-(4524,4)
                  if_statement (4525,3)-(4528,18)
                    if: 'if' (4525,3)-(4525,5)
                    parenthesized_expression (4525,6)-(4525,12)
                      (: '(' (4525,6)-(4525,7)
                      unary_expression (4525,7)-(4525,11)
                        !: '!' (4525,7)-(4525,8)
                        identifier: 'all' (4525,8)-(4525,11)
                      ): ')' (4525,11)-(4525,12)
                    expression_statement (4526,7)-(4526,28)
                      assignment_expression (4526,7)-(4526,27)
                        pointer_expression (4526,7)-(4526,11)
                          *: '*' (4526,7)-(4526,8)
                          identifier: 'str' (4526,8)-(4526,11)
                        =: '=' (4526,12)-(4526,13)
                        call_expression (4526,14)-(4526,27)
                          identifier: 'dupstring' (4526,14)-(4526,23)
                          argument_list (4526,23)-(4526,27)
                            (: '(' (4526,23)-(4526,24)
                            string_literal (4526,24)-(4526,26)
                              ": '"' (4526,24)-(4526,25)
                              ": '"' (4526,25)-(4526,26)
                            ): ')' (4526,26)-(4526,27)
                      ;: ';' (4526,27)-(4526,28)
                    else_clause (4527,3)-(4528,18)
                      else: 'else' (4527,3)-(4527,7)
                      expression_statement (4528,7)-(4528,18)
                        assignment_expression (4528,7)-(4528,17)
                          pointer_expression (4528,7)-(4528,11)
                            *: '*' (4528,7)-(4528,8)
                            identifier: 'str' (4528,8)-(4528,11)
                          =: '=' (4528,12)-(4528,13)
                          identifier: 'all' (4528,14)-(4528,17)
                        ;: ';' (4528,17)-(4528,18)
                  }: '}' (4530,6)-(4530,7)
                else_clause (4530,8)-(4594,7)
                  else: 'else' (4530,8)-(4530,12)
                  compound_statement (4530,13)-(4594,7)
                    {: '{' (4530,13)-(4530,14)
                    switch_statement (4531,3)-(4593,4)
                      switch: 'switch' (4531,3)-(4531,9)
                      parenthesized_expression (4531,10)-(4531,13)
                        (: '(' (4531,10)-(4531,11)
                        identifier: 'c' (4531,11)-(4531,12)
                        ): ')' (4531,12)-(4531,13)
                      compound_statement (4531,14)-(4593,4)
                        {: '{' (4531,14)-(4531,15)
                        case_statement (4532,3)-(4534,13)
                          case: 'case' (4532,3)-(4532,7)
                          char_literal (4532,8)-(4532,11)
                            ': ''' (4532,8)-(4532,9)
                            character: 'a' (4532,9)-(4532,10)
                            ': ''' (4532,10)-(4532,11)
                          :: ':' (4532,11)-(4532,12)
                          expression_statement (4533,7)-(4533,22)
                            call_expression (4533,7)-(4533,21)
                              identifier: 'chabspath' (4533,7)-(4533,16)
                              argument_list (4533,16)-(4533,21)
                                (: '(' (4533,16)-(4533,17)
                                identifier: 'str' (4533,17)-(4533,20)
                                ): ')' (4533,20)-(4533,21)
                            ;: ';' (4533,21)-(4533,22)
                          break_statement (4534,7)-(4534,13)
                            break: 'break' (4534,7)-(4534,12)
                            ;: ';' (4534,12)-(4534,13)
                        case_statement (4535,3)-(4537,13)
                          case: 'case' (4535,3)-(4535,7)
                          char_literal (4535,8)-(4535,11)
                            ': ''' (4535,8)-(4535,9)
                            character: 'A' (4535,9)-(4535,10)
                            ': ''' (4535,10)-(4535,11)
                          :: ':' (4535,11)-(4535,12)
                          expression_statement (4536,7)-(4536,31)
                            call_expression (4536,7)-(4536,30)
                              identifier: 'chrealpath' (4536,7)-(4536,17)
                              argument_list (4536,17)-(4536,30)
                                (: '(' (4536,17)-(4536,18)
                                identifier: 'str' (4536,18)-(4536,21)
                                ,: ',' (4536,21)-(4536,22)
                                char_literal (4536,23)-(4536,26)
                                  ': ''' (4536,23)-(4536,24)
                                  character: 'A' (4536,24)-(4536,25)
                                  ': ''' (4536,25)-(4536,26)
                                ,: ',' (4536,26)-(4536,27)
                                number_literal: '1' (4536,28)-(4536,29)
                                ): ')' (4536,29)-(4536,30)
                            ;: ';' (4536,30)-(4536,31)
                          break_statement (4537,7)-(4537,13)
                            break: 'break' (4537,7)-(4537,12)
                            ;: ';' (4537,12)-(4537,13)
                        case_statement (4538,3)-(4544,4)
                          case: 'case' (4538,3)-(4538,7)
                          char_literal (4538,8)-(4538,11)
                            ': ''' (4538,8)-(4538,9)
                            character: 'c' (4538,9)-(4538,10)
                            ': ''' (4538,10)-(4538,11)
                          :: ':' (4538,11)-(4538,12)
                          compound_statement (4539,3)-(4544,4)
                            {: '{' (4539,3)-(4539,4)
                            declaration (4540,7)-(4540,45)
                              primitive_type: 'char' (4540,7)-(4540,11)
                              init_declarator (4540,12)-(4540,44)
                                pointer_declarator (4540,12)-(4540,18)
                                  *: '*' (4540,12)-(4540,13)
                                  identifier: 'copy2' (4540,13)-(4540,18)
                                =: '=' (4540,19)-(4540,20)
                                call_expression (4540,21)-(4540,44)
                                  identifier: 'equalsubstr' (4540,21)-(4540,32)
                                  argument_list (4540,32)-(4540,44)
                                    (: '(' (4540,32)-(4540,33)
                                    pointer_expression (4540,33)-(4540,37)
                                      *: '*' (4540,33)-(4540,34)
                                      identifier: 'str' (4540,34)-(4540,37)
                                    ,: ',' (4540,37)-(4540,38)
                                    number_literal: '0' (4540,39)-(4540,40)
                                    ,: ',' (4540,40)-(4540,41)
                                    number_literal: '0' (4540,42)-(4540,43)
                                    ): ')' (4540,43)-(4540,44)
                              ;: ';' (4540,44)-(4540,45)
                            if_statement (4541,7)-(4542,17)
                              if: 'if' (4541,7)-(4541,9)
                              parenthesized_expression (4541,10)-(4541,17)
                                (: '(' (4541,10)-(4541,11)
                                identifier: 'copy2' (4541,11)-(4541,16)
                                ): ')' (4541,16)-(4541,17)
                              expression_statement (4542,4)-(4542,17)
                                assignment_expression (4542,4)-(4542,16)
                                  pointer_expression (4542,4)-(4542,8)
                                    *: '*' (4542,4)-(4542,5)
                                    identifier: 'str' (4542,5)-(4542,8)
                                  =: '=' (4542,9)-(4542,10)
                                  identifier: 'copy2' (4542,11)-(4542,16)
                                ;: ';' (4542,16)-(4542,17)
                            break_statement (4543,7)-(4543,13)
                              break: 'break' (4543,7)-(4543,12)
                              ;: ';' (4543,12)-(4543,13)
                            }: '}' (4544,3)-(4544,4)
                        case_statement (4545,3)-(4547,13)
                          case: 'case' (4545,3)-(4545,7)
                          char_literal (4545,8)-(4545,11)
                            ': ''' (4545,8)-(4545,9)
                            character: 'h' (4545,9)-(4545,10)
                            ': ''' (4545,10)-(4545,11)
                          :: ':' (4545,11)-(4545,12)
                          expression_statement (4546,7)-(4546,28)
                            call_expression (4546,7)-(4546,27)
                              identifier: 'remtpath' (4546,7)-(4546,15)
                              argument_list (4546,15)-(4546,27)
                                (: '(' (4546,15)-(4546,16)
                                identifier: 'str' (4546,16)-(4546,19)
                                ,: ',' (4546,19)-(4546,20)
                                identifier: 'count' (4546,21)-(4546,26)
                                ): ')' (4546,26)-(4546,27)
                            ;: ';' (4546,27)-(4546,28)
                          break_statement (4547,7)-(4547,13)
                            break: 'break' (4547,7)-(4547,12)
                            ;: ';' (4547,12)-(4547,13)
                        case_statement (4548,3)-(4550,13)
                          case: 'case' (4548,3)-(4548,7)
                          char_literal (4548,8)-(4548,11)
                            ': ''' (4548,8)-(4548,9)
                            character: 'r' (4548,9)-(4548,10)
                            ': ''' (4548,10)-(4548,11)
                          :: ':' (4548,11)-(4548,12)
                          expression_statement (4549,7)-(4549,20)
                            call_expression (4549,7)-(4549,19)
                              identifier: 'remtext' (4549,7)-(4549,14)
                              argument_list (4549,14)-(4549,19)
                                (: '(' (4549,14)-(4549,15)
                                identifier: 'str' (4549,15)-(4549,18)
                                ): ')' (4549,18)-(4549,19)
                            ;: ';' (4549,19)-(4549,20)
                          break_statement (4550,7)-(4550,13)
                            break: 'break' (4550,7)-(4550,12)
                            ;: ';' (4550,12)-(4550,13)
                        case_statement (4551,3)-(4553,13)
                          case: 'case' (4551,3)-(4551,7)
                          char_literal (4551,8)-(4551,11)
                            ': ''' (4551,8)-(4551,9)
                            character: 'e' (4551,9)-(4551,10)
                            ': ''' (4551,10)-(4551,11)
                          :: ':' (4551,11)-(4551,12)
                          expression_statement (4552,7)-(4552,22)
                            call_expression (4552,7)-(4552,21)
                              identifier: 'rembutext' (4552,7)-(4552,16)
                              argument_list (4552,16)-(4552,21)
                                (: '(' (4552,16)-(4552,17)
                                identifier: 'str' (4552,17)-(4552,20)
                                ): ')' (4552,20)-(4552,21)
                            ;: ';' (4552,21)-(4552,22)
                          break_statement (4553,7)-(4553,13)
                            break: 'break' (4553,7)-(4553,12)
                            ;: ';' (4553,12)-(4553,13)
                        case_statement (4554,3)-(4556,13)
                          case: 'case' (4554,3)-(4554,7)
                          char_literal (4554,8)-(4554,11)
                            ': ''' (4554,8)-(4554,9)
                            character: 't' (4554,9)-(4554,10)
                            ': ''' (4554,10)-(4554,11)
                          :: ':' (4554,11)-(4554,12)
                          expression_statement (4555,7)-(4555,29)
                            call_expression (4555,7)-(4555,28)
                              identifier: 'remlpaths' (4555,7)-(4555,16)
                              argument_list (4555,16)-(4555,28)
                                (: '(' (4555,16)-(4555,17)
                                identifier: 'str' (4555,17)-(4555,20)
                                ,: ',' (4555,20)-(4555,21)
                                identifier: 'count' (4555,22)-(4555,27)
                                ): ')' (4555,27)-(4555,28)
                            ;: ';' (4555,28)-(4555,29)
                          break_statement (4556,7)-(4556,13)
                            break: 'break' (4556,7)-(4556,12)
                            ;: ';' (4556,12)-(4556,13)
                        case_statement (4557,3)-(4559,13)
                          case: 'case' (4557,3)-(4557,7)
                          char_literal (4557,8)-(4557,11)
                            ': ''' (4557,8)-(4557,9)
                            character: 'l' (4557,9)-(4557,10)
                            ': ''' (4557,10)-(4557,11)
                          :: ':' (4557,11)-(4557,12)
                          expression_statement (4558,7)-(4558,45)
                            assignment_expression (4558,7)-(4558,44)
                              pointer_expression (4558,7)-(4558,11)
                                *: '*' (4558,7)-(4558,8)
                                identifier: 'str' (4558,8)-(4558,11)
                              =: '=' (4558,12)-(4558,13)
                              call_expression (4558,14)-(4558,44)
                                identifier: 'casemodify' (4558,14)-(4558,24)
                                argument_list (4558,24)-(4558,44)
                                  (: '(' (4558,24)-(4558,25)
                                  pointer_expression (4558,25)-(4558,29)
                                    *: '*' (4558,25)-(4558,26)
                                    identifier: 'str' (4558,26)-(4558,29)
                                  ,: ',' (4558,29)-(4558,30)
                                  identifier: 'CASMOD_LOWER' (4558,31)-(4558,43)
                                  ): ')' (4558,43)-(4558,44)
                            ;: ';' (4558,44)-(4558,45)
                          break_statement (4559,7)-(4559,13)
                            break: 'break' (4559,7)-(4559,12)
                            ;: ';' (4559,12)-(4559,13)
                        case_statement (4560,3)-(4562,13)
                          case: 'case' (4560,3)-(4560,7)
                          char_literal (4560,8)-(4560,11)
                            ': ''' (4560,8)-(4560,9)
                            character: 'u' (4560,9)-(4560,10)
                            ': ''' (4560,10)-(4560,11)
                          :: ':' (4560,11)-(4560,12)
                          expression_statement (4561,7)-(4561,45)
                            assignment_expression (4561,7)-(4561,44)
                              pointer_expression (4561,7)-(4561,11)
                                *: '*' (4561,7)-(4561,8)
                                identifier: 'str' (4561,8)-(4561,11)
                              =: '=' (4561,12)-(4561,13)
                              call_expression (4561,14)-(4561,44)
                                identifier: 'casemodify' (4561,14)-(4561,24)
                                argument_list (4561,24)-(4561,44)
                                  (: '(' (4561,24)-(4561,25)
                                  pointer_expression (4561,25)-(4561,29)
                                    *: '*' (4561,25)-(4561,26)
                                    identifier: 'str' (4561,26)-(4561,29)
                                  ,: ',' (4561,29)-(4561,30)
                                  identifier: 'CASMOD_UPPER' (4561,31)-(4561,43)
                                  ): ')' (4561,43)-(4561,44)
                            ;: ';' (4561,44)-(4561,45)
                          break_statement (4562,7)-(4562,13)
                            break: 'break' (4562,7)-(4562,12)
                            ;: ';' (4562,12)-(4562,13)
                        case_statement (4563,3)-(4566,13)
                          case: 'case' (4563,3)-(4563,7)
                          char_literal (4563,8)-(4563,11)
                            ': ''' (4563,8)-(4563,9)
                            character: 's' (4563,9)-(4563,10)
                            ': ''' (4563,10)-(4563,11)
                          :: ':' (4563,11)-(4563,12)
                          if_statement (4564,7)-(4565,35)
                            if: 'if' (4564,7)-(4564,9)
                            parenthesized_expression (4564,10)-(4564,26)
                              (: '(' (4564,10)-(4564,11)
                              binary_expression (4564,11)-(4564,25)
                                identifier: 'hsubl' (4564,11)-(4564,16)
                                &&: '&&' (4564,17)-(4564,19)
                                identifier: 'hsubr' (4564,20)-(4564,25)
                              ): ')' (4564,25)-(4564,26)
                            expression_statement (4565,4)-(4565,35)
                              call_expression (4565,4)-(4565,34)
                                identifier: 'subst' (4565,4)-(4565,9)
                                argument_list (4565,9)-(4565,34)
                                  (: '(' (4565,9)-(4565,10)
                                  identifier: 'str' (4565,10)-(4565,13)
                                  ,: ',' (4565,13)-(4565,14)
                                  identifier: 'hsubl' (4565,15)-(4565,20)
                                  ,: ',' (4565,20)-(4565,21)
                                  identifier: 'hsubr' (4565,22)-(4565,27)
                                  ,: ',' (4565,27)-(4565,28)
                                  identifier: 'gbal' (4565,29)-(4565,33)
                                  ): ')' (4565,33)-(4565,34)
                              ;: ';' (4565,34)-(4565,35)
                          break_statement (4566,7)-(4566,13)
                            break: 'break' (4566,7)-(4566,12)
                            ;: ';' (4566,12)-(4566,13)
                        case_statement (4567,3)-(4569,13)
                          case: 'case' (4567,3)-(4567,7)
                          char_literal (4567,8)-(4567,11)
                            ': ''' (4567,8)-(4567,9)
                            character: 'q' (4567,9)-(4567,10)
                            ': ''' (4567,10)-(4567,11)
                          :: ':' (4567,11)-(4567,12)
                          expression_statement (4568,7)-(4568,46)
                            assignment_expression (4568,7)-(4568,45)
                              pointer_expression (4568,7)-(4568,11)
                                *: '*' (4568,7)-(4568,8)
                                identifier: 'str' (4568,8)-(4568,11)
                              =: '=' (4568,12)-(4568,13)
                              call_expression (4568,14)-(4568,45)
                                identifier: 'quotestring' (4568,14)-(4568,25)
                                argument_list (4568,25)-(4568,45)
                                  (: '(' (4568,25)-(4568,26)
                                  pointer_expression (4568,26)-(4568,30)
                                    *: '*' (4568,26)-(4568,27)
                                    identifier: 'str' (4568,27)-(4568,30)
                                  ,: ',' (4568,30)-(4568,31)
                                  identifier: 'QT_BACKSLASH' (4568,32)-(4568,44)
                                  ): ')' (4568,44)-(4568,45)
                            ;: ';' (4568,45)-(4568,46)
                          break_statement (4569,7)-(4569,13)
                            break: 'break' (4569,7)-(4569,12)
                            ;: ';' (4569,12)-(4569,13)
                        case_statement (4570,3)-(4582,13)
                          case: 'case' (4570,3)-(4570,7)
                          char_literal (4570,8)-(4570,11)
                            ': ''' (4570,8)-(4570,9)
                            character: 'Q' (4570,9)-(4570,10)
                            ': ''' (4570,10)-(4570,11)
                          :: ':' (4570,11)-(4570,12)
                          compound_statement (4571,7)-(4581,8)
                            {: '{' (4571,7)-(4571,8)
                            declaration (4572,4)-(4572,36)
                              primitive_type: 'int' (4572,4)-(4572,7)
                              init_declarator (4572,8)-(4572,20)
                                identifier: 'one' (4572,8)-(4572,11)
                                =: '=' (4572,12)-(4572,13)
                                identifier: 'noerrs' (4572,14)-(4572,20)
                              ,: ',' (4572,20)-(4572,21)
                              init_declarator (4572,22)-(4572,35)
                                identifier: 'oef' (4572,22)-(4572,25)
                                =: '=' (4572,26)-(4572,27)
                                identifier: 'errflag' (4572,28)-(4572,35)
                              ;: ';' (4572,35)-(4572,36)
                            expression_statement (4574,4)-(4574,15)
                              assignment_expression (4574,4)-(4574,14)
                                identifier: 'noerrs' (4574,4)-(4574,10)
                                =: '=' (4574,11)-(4574,12)
                                number_literal: '1' (4574,13)-(4574,14)
                              ;: ';' (4574,14)-(4574,15)
                            expression_statement (4575,4)-(4575,29)
                              call_expression (4575,4)-(4575,28)
                                identifier: 'parse_subst_string' (4575,4)-(4575,22)
                                argument_list (4575,22)-(4575,28)
                                  (: '(' (4575,22)-(4575,23)
                                  pointer_expression (4575,23)-(4575,27)
                                    *: '*' (4575,23)-(4575,24)
                                    identifier: 'str' (4575,24)-(4575,27)
                                  ): ')' (4575,27)-(4575,28)
                              ;: ';' (4575,28)-(4575,29)
                            expression_statement (4576,4)-(4576,17)
                              assignment_expression (4576,4)-(4576,16)
                                identifier: 'noerrs' (4576,4)-(4576,10)
                                =: '=' (4576,11)-(4576,12)
                                identifier: 'one' (4576,13)-(4576,16)
                              ;: ';' (4576,16)-(4576,17)
                            comment: '/* Retain any user interrupt error status */' (4577,4)-(4577,48)
                            expression_statement (4578,4)-(4578,44)
                              assignment_expression (4578,4)-(4578,43)
                                identifier: 'errflag' (4578,4)-(4578,11)
                                =: '=' (4578,12)-(4578,13)
                                binary_expression (4578,14)-(4578,43)
                                  identifier: 'oef' (4578,14)-(4578,17)
                                  |: '|' (4578,18)-(4578,19)
                                  parenthesized_expression (4578,20)-(4578,43)
                                    (: '(' (4578,20)-(4578,21)
                                    binary_expression (4578,21)-(4578,42)
                                      identifier: 'errflag' (4578,21)-(4578,28)
                                      &: '&' (4578,29)-(4578,30)
                                      identifier: 'ERRFLAG_INT' (4578,31)-(4578,42)
                                    ): ')' (4578,42)-(4578,43)
                              ;: ';' (4578,43)-(4578,44)
                            expression_statement (4579,4)-(4579,21)
                              call_expression (4579,4)-(4579,20)
                                identifier: 'remnulargs' (4579,4)-(4579,14)
                                argument_list (4579,14)-(4579,20)
                                  (: '(' (4579,14)-(4579,15)
                                  pointer_expression (4579,15)-(4579,19)
                                    *: '*' (4579,15)-(4579,16)
                                    identifier: 'str' (4579,16)-(4579,19)
                                  ): ')' (4579,19)-(4579,20)
                              ;: ';' (4579,20)-(4579,21)
                            expression_statement (4580,4)-(4580,21)
                              call_expression (4580,4)-(4580,20)
                                identifier: 'untokenize' (4580,4)-(4580,14)
                                argument_list (4580,14)-(4580,20)
                                  (: '(' (4580,14)-(4580,15)
                                  pointer_expression (4580,15)-(4580,19)
                                    *: '*' (4580,15)-(4580,16)
                                    identifier: 'str' (4580,16)-(4580,19)
                                  ): ')' (4580,19)-(4580,20)
                              ;: ';' (4580,20)-(4580,21)
                            }: '}' (4581,7)-(4581,8)
                          break_statement (4582,7)-(4582,13)
                            break: 'break' (4582,7)-(4582,12)
                            ;: ';' (4582,12)-(4582,13)
                        case_statement (4583,3)-(4592,13)
                          case: 'case' (4583,3)-(4583,7)
                          char_literal (4583,8)-(4583,11)
                            ': ''' (4583,8)-(4583,9)
                            character: 'P' (4583,9)-(4583,10)
                            ': ''' (4583,10)-(4583,11)
                          :: ':' (4583,11)-(4583,12)
                          if_statement (4584,7)-(4590,8)
                            if: 'if' (4584,7)-(4584,9)
                            parenthesized_expression (4584,10)-(4584,24)
                              (: '(' (4584,10)-(4584,11)
                              binary_expression (4584,11)-(4584,23)
                                pointer_expression (4584,11)-(4584,16)
                                  *: '*' (4584,11)-(4584,12)
                                  pointer_expression (4584,12)-(4584,16)
                                    *: '*' (4584,12)-(4584,13)
                                    identifier: 'str' (4584,13)-(4584,16)
                                !=: '!=' (4584,17)-(4584,19)
                                char_literal (4584,20)-(4584,23)
                                  ': ''' (4584,20)-(4584,21)
                                  character: '/' (4584,21)-(4584,22)
                                  ': ''' (4584,22)-(4584,23)
                              ): ')' (4584,23)-(4584,24)
                            compound_statement (4584,25)-(4590,8)
                              {: '{' (4584,25)-(4584,26)
                              declaration (4585,4)-(4585,27)
                                primitive_type: 'char' (4585,4)-(4585,8)
                                init_declarator (4585,9)-(4585,26)
                                  pointer_declarator (4585,9)-(4585,14)
                                    *: '*' (4585,9)-(4585,10)
                                    identifier: 'here' (4585,10)-(4585,14)
                                  =: '=' (4585,15)-(4585,16)
                                  call_expression (4585,17)-(4585,26)
                                    identifier: 'zgetcwd' (4585,17)-(4585,24)
                                    argument_list (4585,24)-(4585,26)
                                      (: '(' (4585,24)-(4585,25)
                                      ): ')' (4585,25)-(4585,26)
                                ;: ';' (4585,26)-(4585,27)
                              if_statement (4586,4)-(4589,34)
                                if: 'if' (4586,4)-(4586,6)
                                parenthesized_expression (4586,7)-(4586,36)
                                  (: '(' (4586,7)-(4586,8)
                                  binary_expression (4586,8)-(4586,35)
                                    subscript_expression (4586,8)-(4586,28)
                                      identifier: 'here' (4586,8)-(4586,12)
                                      [: '[' (4586,12)-(4586,13)
                                      binary_expression (4586,13)-(4586,27)
                                        call_expression (4586,13)-(4586,25)
                                          identifier: 'strlen' (4586,13)-(4586,19)
                                          argument_list (4586,19)-(4586,25)
                                            (: '(' (4586,19)-(4586,20)
                                            identifier: 'here' (4586,20)-(4586,24)
                                            ): ')' (4586,24)-(4586,25)
                                        -: '-' (4586,25)-(4586,26)
                                        number_literal: '1' (4586,26)-(4586,27)
                                      ]: ']' (4586,27)-(4586,28)
                                    !=: '!=' (4586,29)-(4586,31)
                                    char_literal (4586,32)-(4586,35)
                                      ': ''' (4586,32)-(4586,33)
                                      character: '/' (4586,33)-(4586,34)
                                      ': ''' (4586,34)-(4586,35)
                                  ): ')' (4586,35)-(4586,36)
                                expression_statement (4587,8)-(4587,67)
                                  assignment_expression (4587,8)-(4587,66)
                                    pointer_expression (4587,8)-(4587,12)
                                      *: '*' (4587,8)-(4587,9)
                                      identifier: 'str' (4587,9)-(4587,12)
                                    =: '=' (4587,13)-(4587,14)
                                    call_expression (4587,15)-(4587,66)
                                      identifier: 'zhtricat' (4587,15)-(4587,23)
                                      argument_list (4587,23)-(4587,66)
                                        (: '(' (4587,23)-(4587,24)
                                        call_expression (4587,24)-(4587,54)
                                          identifier: 'metafy' (4587,24)-(4587,30)
                                          argument_list (4587,30)-(4587,54)
                                            (: '(' (4587,30)-(4587,31)
                                            identifier: 'here' (4587,31)-(4587,35)
                                            ,: ',' (4587,35)-(4587,36)
                                            number_literal: '-1' (4587,37)-(4587,39)
                                            ,: ',' (4587,39)-(4587,40)
                                            identifier: 'META_HEAPDUP' (4587,41)-(4587,53)
                                            ): ')' (4587,53)-(4587,54)
                                        ,: ',' (4587,54)-(4587,55)
                                        string_literal (4587,56)-(4587,59)
                                          ": '"' (4587,56)-(4587,57)
                                          string_content: '/' (4587,57)-(4587,58)
                                          ": '"' (4587,58)-(4587,59)
                                        ,: ',' (4587,59)-(4587,60)
                                        pointer_expression (4587,61)-(4587,65)
                                          *: '*' (4587,61)-(4587,62)
                                          identifier: 'str' (4587,62)-(4587,65)
                                        ): ')' (4587,65)-(4587,66)
                                  ;: ';' (4587,66)-(4587,67)
                                else_clause (4588,4)-(4589,34)
                                  else: 'else' (4588,4)-(4588,8)
                                  expression_statement (4589,8)-(4589,34)
                                    assignment_expression (4589,8)-(4589,33)
                                      pointer_expression (4589,8)-(4589,12)
                                        *: '*' (4589,8)-(4589,9)
                                        identifier: 'str' (4589,9)-(4589,12)
                                      =: '=' (4589,13)-(4589,14)
                                      call_expression (4589,15)-(4589,33)
                                        identifier: 'dyncat' (4589,15)-(4589,21)
                                        argument_list (4589,21)-(4589,33)
                                          (: '(' (4589,21)-(4589,22)
                                          identifier: 'here' (4589,22)-(4589,26)
                                          ,: ',' (4589,26)-(4589,27)
                                          pointer_expression (4589,28)-(4589,32)
                                            *: '*' (4589,28)-(4589,29)
                                            identifier: 'str' (4589,29)-(4589,32)
                                          ): ')' (4589,32)-(4589,33)
                                    ;: ';' (4589,33)-(4589,34)
                              }: '}' (4590,7)-(4590,8)
                          expression_statement (4591,7)-(4591,32)
                            assignment_expression (4591,7)-(4591,31)
                              pointer_expression (4591,7)-(4591,11)
                                *: '*' (4591,7)-(4591,8)
                                identifier: 'str' (4591,8)-(4591,11)
                              =: '=' (4591,12)-(4591,13)
                              call_expression (4591,14)-(4591,31)
                                identifier: 'xsymlink' (4591,14)-(4591,22)
                                argument_list (4591,22)-(4591,31)
                                  (: '(' (4591,22)-(4591,23)
                                  pointer_expression (4591,23)-(4591,27)
                                    *: '*' (4591,23)-(4591,24)
                                    identifier: 'str' (4591,24)-(4591,27)
                                  ,: ',' (4591,27)-(4591,28)
                                  number_literal: '1' (4591,29)-(4591,30)
                                  ): ')' (4591,30)-(4591,31)
                            ;: ';' (4591,31)-(4591,32)
                          break_statement (4592,7)-(4592,13)
                            break: 'break' (4592,7)-(4592,12)
                            ;: ';' (4592,12)-(4592,13)
                        }: '}' (4593,3)-(4593,4)
                    }: '}' (4594,6)-(4594,7)
              if_statement (4595,6)-(4600,7)
                if: 'if' (4595,6)-(4595,8)
                parenthesized_expression (4595,9)-(4595,18)
                  (: '(' (4595,9)-(4595,10)
                  binary_expression (4595,10)-(4595,17)
                    identifier: 'rec' (4595,10)-(4595,13)
                    <: '<' (4595,14)-(4595,15)
                    number_literal: '0' (4595,16)-(4595,17)
                  ): ')' (4595,17)-(4595,18)
                compound_statement (4595,19)-(4600,7)
                  {: '{' (4595,19)-(4595,20)
                  if_statement (4596,3)-(4599,30)
                    if: 'if' (4596,3)-(4596,5)
                    parenthesized_expression (4596,6)-(4596,27)
                      (: '(' (4596,6)-(4596,7)
                      unary_expression (4596,7)-(4596,26)
                        !: '!' (4596,7)-(4596,8)
                        call_expression (4596,8)-(4596,26)
                          identifier: 'strcmp' (4596,8)-(4596,14)
                          argument_list (4596,14)-(4596,26)
                            (: '(' (4596,14)-(4596,15)
                            identifier: 'test' (4596,15)-(4596,19)
                            ,: ',' (4596,19)-(4596,20)
                            pointer_expression (4596,21)-(4596,25)
                              *: '*' (4596,21)-(4596,22)
                              identifier: 'str' (4596,22)-(4596,25)
                            ): ')' (4596,25)-(4596,26)
                      ): ')' (4596,26)-(4596,27)
                    expression_statement (4597,7)-(4597,15)
                      assignment_expression (4597,7)-(4597,14)
                        identifier: 'rec' (4597,7)-(4597,10)
                        =: '=' (4597,11)-(4597,12)
                        number_literal: '0' (4597,13)-(4597,14)
                      ;: ';' (4597,14)-(4597,15)
                    else_clause (4598,3)-(4599,30)
                      else: 'else' (4598,3)-(4598,7)
                      expression_statement (4599,7)-(4599,30)
                        assignment_expression (4599,7)-(4599,29)
                          identifier: 'test' (4599,7)-(4599,11)
                          =: '=' (4599,12)-(4599,13)
                          call_expression (4599,14)-(4599,29)
                            identifier: 'dupstring' (4599,14)-(4599,23)
                            argument_list (4599,23)-(4599,29)
                              (: '(' (4599,23)-(4599,24)
                              pointer_expression (4599,24)-(4599,28)
                                *: '*' (4599,24)-(4599,25)
                                identifier: 'str' (4599,25)-(4599,28)
                              ): ')' (4599,28)-(4599,29)
                        ;: ';' (4599,29)-(4599,30)
                  }: '}' (4600,6)-(4600,7)
              }: '}' (4601,2)-(4601,3)
          }: '}' (4602,5)-(4602,6)
      }: '}' (4603,1)-(4603,2)
  comment: '/* get a directory stack entry */' (4605,1)-(4605,34)
  comment: '/**/' (4607,1)-(4607,5)
  function_definition (4608,1)-(4629,2)
    storage_class_specifier (4608,1)-(4608,7)
      static: 'static' (4608,1)-(4608,7)
    primitive_type: 'char' (4608,8)-(4608,12)
    pointer_declarator (4608,13)-(4609,28)
      *: '*' (4608,13)-(4608,14)
      function_declarator (4609,1)-(4609,28)
        identifier: 'dstackent' (4609,1)-(4609,10)
        parameter_list (4609,10)-(4609,28)
          (: '(' (4609,10)-(4609,11)
          parameter_declaration (4609,11)-(4609,18)
            primitive_type: 'char' (4609,11)-(4609,15)
            identifier: 'ch' (4609,16)-(4609,18)
          ,: ',' (4609,18)-(4609,19)
          parameter_declaration (4609,20)-(4609,27)
            primitive_type: 'int' (4609,20)-(4609,23)
            identifier: 'val' (4609,24)-(4609,27)
          ): ')' (4609,27)-(4609,28)
    compound_statement (4610,1)-(4629,2)
      {: '{' (4610,1)-(4610,2)
      declaration (4611,5)-(4611,19)
        primitive_type: 'int' (4611,5)-(4611,8)
        identifier: 'backwards' (4611,9)-(4611,18)
        ;: ';' (4611,18)-(4611,19)
      declaration (4612,5)-(4612,40)
        type_identifier: 'LinkNode' (4612,5)-(4612,13)
        init_declarator (4612,14)-(4612,36)
          identifier: 'end' (4612,14)-(4612,17)
          =: '=' (4612,17)-(4612,18)
          cast_expression (4612,18)-(4612,36)
            (: '(' (4612,18)-(4612,19)
            type_descriptor (4612,19)-(4612,27)
              type_identifier: 'LinkNode' (4612,19)-(4612,27)
            ): ')' (4612,27)-(4612,28)
            identifier: 'dirstack' (4612,28)-(4612,36)
        ,: ',' (4612,36)-(4612,37)
        identifier: 'n' (4612,38)-(4612,39)
        ;: ';' (4612,39)-(4612,40)
      expression_statement (4614,5)-(4614,55)
        assignment_expression (4614,5)-(4614,54)
          identifier: 'backwards' (4614,5)-(4614,14)
          =: '=' (4614,15)-(4614,16)
          binary_expression (4614,17)-(4614,54)
            identifier: 'ch' (4614,17)-(4614,19)
            ==: '==' (4614,20)-(4614,22)
            parenthesized_expression (4614,23)-(4614,54)
              (: '(' (4614,23)-(4614,24)
              conditional_expression (4614,24)-(4614,53)
                call_expression (4614,24)-(4614,41)
                  identifier: 'isset' (4614,24)-(4614,29)
                  argument_list (4614,29)-(4614,41)
                    (: '(' (4614,29)-(4614,30)
                    identifier: 'PUSHDMINUS' (4614,30)-(4614,40)
                    ): ')' (4614,40)-(4614,41)
                ?: '?' (4614,42)-(4614,43)
                char_literal (4614,44)-(4614,47)
                  ': ''' (4614,44)-(4614,45)
                  character: '+' (4614,45)-(4614,46)
                  ': ''' (4614,46)-(4614,47)
                :: ':' (4614,48)-(4614,49)
                char_literal (4614,50)-(4614,53)
                  ': ''' (4614,50)-(4614,51)
                  character: '-' (4614,51)-(4614,52)
                  ': ''' (4614,52)-(4614,53)
              ): ')' (4614,53)-(4614,54)
        ;: ';' (4614,54)-(4614,55)
      if_statement (4615,5)-(4616,13)
        if: 'if' (4615,5)-(4615,7)
        parenthesized_expression (4615,7)-(4615,29)
          (: '(' (4615,7)-(4615,8)
          binary_expression (4615,8)-(4615,28)
            unary_expression (4615,8)-(4615,18)
              !: '!' (4615,8)-(4615,9)
              identifier: 'backwards' (4615,9)-(4615,18)
            &&: '&&' (4615,19)-(4615,21)
            update_expression (4615,22)-(4615,28)
              unary_expression (4615,22)-(4615,26)
                !: '!' (4615,22)-(4615,23)
                identifier: 'val' (4615,23)-(4615,26)
              --: '--' (4615,26)-(4615,28)
          ): ')' (4615,28)-(4615,29)
        return_statement (4616,2)-(4616,13)
          return: 'return' (4616,2)-(4616,8)
          identifier: 'pwd' (4616,9)-(4616,12)
          ;: ';' (4616,12)-(4616,13)
      if_statement (4617,5)-(4620,72)
        if: 'if' (4617,5)-(4617,7)
        parenthesized_expression (4617,8)-(4617,19)
          (: '(' (4617,8)-(4617,9)
          identifier: 'backwards' (4617,9)-(4617,18)
          ): ')' (4617,18)-(4617,19)
        for_statement (4618,2)-(4618,68)
          for: 'for' (4618,2)-(4618,5)
          (: '(' (4618,6)-(4618,7)
          assignment_expression (4618,7)-(4618,27)
            identifier: 'n' (4618,7)-(4618,8)
            =: '=' (4618,8)-(4618,9)
            call_expression (4618,9)-(4618,27)
              identifier: 'lastnode' (4618,9)-(4618,17)
              argument_list (4618,17)-(4618,27)
                (: '(' (4618,17)-(4618,18)
                identifier: 'dirstack' (4618,18)-(4618,26)
                ): ')' (4618,26)-(4618,27)
          ;: ';' (4618,27)-(4618,28)
          binary_expression (4618,29)-(4618,44)
            binary_expression (4618,29)-(4618,37)
              identifier: 'n' (4618,29)-(4618,30)
              !=: '!=' (4618,31)-(4618,33)
              identifier: 'end' (4618,34)-(4618,37)
            &&: '&&' (4618,38)-(4618,40)
            identifier: 'val' (4618,41)-(4618,44)
          ;: ';' (4618,44)-(4618,45)
          comma_expression (4618,46)-(4618,66)
            update_expression (4618,46)-(4618,51)
              identifier: 'val' (4618,46)-(4618,49)
              --: '--' (4618,49)-(4618,51)
            ,: ',' (4618,51)-(4618,52)
            assignment_expression (4618,53)-(4618,66)
              identifier: 'n' (4618,53)-(4618,54)
              =: '=' (4618,54)-(4618,55)
              call_expression (4618,55)-(4618,66)
                identifier: 'prevnode' (4618,55)-(4618,63)
                argument_list (4618,63)-(4618,66)
                  (: '(' (4618,63)-(4618,64)
                  identifier: 'n' (4618,64)-(4618,65)
                  ): ')' (4618,65)-(4618,66)
          ): ')' (4618,66)-(4618,67)
          expression_statement (4618,67)-(4618,68)
            ;: ';' (4618,67)-(4618,68)
        else_clause (4619,5)-(4620,72)
          else: 'else' (4619,5)-(4619,9)
          for_statement (4620,2)-(4620,72)
            for: 'for' (4620,2)-(4620,5)
            (: '(' (4620,6)-(4620,7)
            comma_expression (4620,7)-(4620,38)
              assignment_expression (4620,7)-(4620,15)
                identifier: 'end' (4620,7)-(4620,10)
                =: '=' (4620,10)-(4620,11)
                null (4620,11)-(4620,15)
                  NULL: 'NULL' (4620,11)-(4620,15)
              ,: ',' (4620,15)-(4620,16)
              assignment_expression (4620,17)-(4620,38)
                identifier: 'n' (4620,17)-(4620,18)
                =: '=' (4620,18)-(4620,19)
                call_expression (4620,19)-(4620,38)
                  identifier: 'firstnode' (4620,19)-(4620,28)
                  argument_list (4620,28)-(4620,38)
                    (: '(' (4620,28)-(4620,29)
                    identifier: 'dirstack' (4620,29)-(4620,37)
                    ): ')' (4620,37)-(4620,38)
            ;: ';' (4620,38)-(4620,39)
            binary_expression (4620,40)-(4620,48)
              identifier: 'n' (4620,40)-(4620,41)
              &&: '&&' (4620,42)-(4620,44)
              identifier: 'val' (4620,45)-(4620,48)
            ;: ';' (4620,48)-(4620,49)
            comma_expression (4620,50)-(4620,70)
              update_expression (4620,50)-(4620,55)
                identifier: 'val' (4620,50)-(4620,53)
                --: '--' (4620,53)-(4620,55)
              ,: ',' (4620,55)-(4620,56)
              assignment_expression (4620,57)-(4620,70)
                identifier: 'n' (4620,57)-(4620,58)
                =: '=' (4620,58)-(4620,59)
                call_expression (4620,59)-(4620,70)
                  identifier: 'nextnode' (4620,59)-(4620,67)
                  argument_list (4620,67)-(4620,70)
                    (: '(' (4620,67)-(4620,68)
                    identifier: 'n' (4620,68)-(4620,69)
                    ): ')' (4620,69)-(4620,70)
            ): ')' (4620,70)-(4620,71)
            expression_statement (4620,71)-(4620,72)
              ;: ';' (4620,71)-(4620,72)
      if_statement (4621,5)-(4627,6)
        if: 'if' (4621,5)-(4621,7)
        parenthesized_expression (4621,8)-(4621,18)
          (: '(' (4621,8)-(4621,9)
          binary_expression (4621,9)-(4621,17)
            identifier: 'n' (4621,9)-(4621,10)
            ==: '==' (4621,11)-(4621,13)
            identifier: 'end' (4621,14)-(4621,17)
          ): ')' (4621,17)-(4621,18)
        compound_statement (4621,19)-(4627,6)
          {: '{' (4621,19)-(4621,20)
          if_statement (4622,2)-(4623,17)
            if: 'if' (4622,2)-(4622,4)
            parenthesized_expression (4622,5)-(4622,24)
              (: '(' (4622,5)-(4622,6)
              binary_expression (4622,6)-(4622,23)
                identifier: 'backwards' (4622,6)-(4622,15)
                &&: '&&' (4622,16)-(4622,18)
                unary_expression (4622,19)-(4622,23)
                  !: '!' (4622,19)-(4622,20)
                  identifier: 'val' (4622,20)-(4622,23)
              ): ')' (4622,23)-(4622,24)
            return_statement (4623,6)-(4623,17)
              return: 'return' (4623,6)-(4623,12)
              identifier: 'pwd' (4623,13)-(4623,16)
              ;: ';' (4623,16)-(4623,17)
          if_statement (4624,2)-(4625,50)
            if: 'if' (4624,2)-(4624,4)
            parenthesized_expression (4624,5)-(4624,21)
              (: '(' (4624,5)-(4624,6)
              call_expression (4624,6)-(4624,20)
                identifier: 'isset' (4624,6)-(4624,11)
                argument_list (4624,11)-(4624,20)
                  (: '(' (4624,11)-(4624,12)
                  identifier: 'NOMATCH' (4624,12)-(4624,19)
                  ): ')' (4624,19)-(4624,20)
              ): ')' (4624,20)-(4624,21)
            expression_statement (4625,6)-(4625,50)
              call_expression (4625,6)-(4625,49)
                identifier: 'zerr' (4625,6)-(4625,10)
                argument_list (4625,10)-(4625,49)
                  (: '(' (4625,10)-(4625,11)
                  string_literal (4625,11)-(4625,48)
                    ": '"' (4625,11)-(4625,12)
                    string_content: 'not enough directory stack entries.' (4625,12)-(4625,47)
                    ": '"' (4625,47)-(4625,48)
                  ): ')' (4625,48)-(4625,49)
              ;: ';' (4625,49)-(4625,50)
          return_statement (4626,2)-(4626,14)
            return: 'return' (4626,2)-(4626,8)
            null (4626,9)-(4626,13)
              NULL: 'NULL' (4626,9)-(4626,13)
            ;: ';' (4626,13)-(4626,14)
          }: '}' (4627,5)-(4627,6)
      return_statement (4628,5)-(4628,31)
        return: 'return' (4628,5)-(4628,11)
        cast_expression (4628,12)-(4628,30)
          (: '(' (4628,12)-(4628,13)
          type_descriptor (4628,13)-(4628,19)
            primitive_type: 'char' (4628,13)-(4628,17)
            abstract_pointer_declarator (4628,18)-(4628,19)
              *: '*' (4628,18)-(4628,19)
          ): ')' (4628,19)-(4628,20)
          call_expression (4628,20)-(4628,30)
            identifier: 'getdata' (4628,20)-(4628,27)
            argument_list (4628,27)-(4628,30)
              (: '(' (4628,27)-(4628,28)
              identifier: 'n' (4628,28)-(4628,29)
              ): ')' (4628,29)-(4628,30)
        ;: ';' (4628,30)-(4628,31)
      }: '}' (4629,1)-(4629,2)
